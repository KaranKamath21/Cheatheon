username,userslug,contest_rank,question_id,language,code,submission_id
Ian Wong,ianwong1999,2,3616,cpp,"class Solution {
public:
    int f(int id, vector<int> nums, int dir) {
        int n = nums.size();
        while (id >= 0 && id < n) {
            if (nums[id] == 0) {
                id += dir;
                continue;
            }
            
            nums[id]--;
            
            dir *= -1;
            id += dir;
        }
        
        return *max_element(nums.begin(), nums.end()) == 0;
    }
    int countValidSelections(vector<int>& nums) {
        int res = 0;
        int n = nums.size();
        
        for (int i = 0; i < n; i++) {
            if (nums[i] != 0) continue;
            int x = f(i, nums, -1);
            int y = f(i, nums, 1);
            res += x + y;
        }
        
        return res;
    }
};",1454807745
Ian Wong,ianwong1999,2,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        vector<int> pref(n + 1);
        
        for (const auto& vec : queries) {
            int l = vec[0];
            int r = vec[1];
            
            pref[l]++;
            pref[r + 1]--;
        }
        
        for (int i = 1; i < n; i++) pref[i] += pref[i - 1];
        for (int i = 0; i < n; i++) if (pref[i] < nums[i]) return false;
        return true;
    }
};",1454809530
Ian Wong,ianwong1999,2,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        int m = queries.size();
        
        int lb = -1, ub = m + 1;
        
        auto trial = [&](int id) {
            vector<int> pref(n + 1);
        
            for (const auto& vec : queries) {
                if (id == 0) break;
                id--;
                int l = vec[0];
                int r = vec[1];
                int val = vec[2];

                pref[l] += val;
                pref[r + 1] -= val;
            }

            for (int i = 1; i < n; i++) pref[i] += pref[i - 1];
            for (int i = 0; i < n; i++) if (pref[i] < nums[i]) return false;
            return true;
        };
        
        while (ub - lb > 1) {
            int mid = (ub + lb) >> 1;
            if (trial(mid)) ub = mid;
            else lb = mid;
        }
        
        if (ub == m + 1) ub = -1;
        return ub;
        
    }
};",1454813764
Ian Wong,ianwong1999,2,3658,cpp,"class Solution {
public:
    int minDifference(vector<int>& nums) {
        vector<int> vec;
        
        int n = nums.size();
        
        for (int i = 0; i < n; i++) {
            if (nums[i] != -1) continue;
            if (i - 1 >= 0 && nums[i - 1] != -1) vec.push_back(nums[i - 1]);
            if (i + 1 < n && nums[i + 1] != -1) vec.push_back(nums[i + 1]);
        }
        
        sort(vec.begin(), vec.end());
        vec.erase(unique(vec.begin(), vec.end()), vec.end());
        
        int lb = -1, ub = (int)1e9 + 1;
        
        auto trial = [&](int tar) {
            vector<int> a = nums;
            
            if (!vec.empty()) {
                int x = min(vec[0] + tar, vec.back());
                int y = max(vec[0], vec.back() - tar);
                if (y < x) y = x;
                
                for (int i = 0; i < n; i++) {
                    if (a[i] != -1) continue;
                    int j = i;

                    while (j < n && a[j] == -1) j++;

                    int l = i - 1;
                    int r = j;
                    
                    // try x
                    {
                        bool bad = false;
                        if (l >= 0 && abs(x - a[l]) > tar) bad = true;
                        if (r < n && abs(x - a[r]) > tar) bad = true;
                        
                        if (!bad) {
                            for (int k = i; k < j; k++) {
                                a[k] = x;
                            }
                        }
                    }
                    
                    // try y
                    if (a[i] == -1) {
                        bool bad = false;
                        if (l >= 0 && abs(y - a[l]) > tar) bad = true;
                        if (r < n && abs(y - a[r]) > tar) bad = true;
                        
                        if (!bad) {
                            for (int k = i; k < j; k++) {
                                a[k] = y;
                            }
                        }
                    }
                    
                    // try x y
                    if (a[i] == -1) {
                        if (abs(x - y) > tar) return false;
                        if (l >= 0) {
                            if (abs(x - a[l]) <= tar) a[i] = x;
                            else if (abs(y - a[l]) <= tar) a[i] = y;
                            else return false;
                        } else {
                            a[i] = x;
                        }
                        
                        if (r < n) {
                            if (abs(x - a[r]) <= tar) a[r - 1] = x;
                            else if (abs(y - a[r]) <= tar) a[r - 1] = y;
                            else return false;
                        } else {
                            a[r - 1] = x;
                        }
                        
                        for (int k = i + 1; k < j - 1; k++) a[k] = a[k - 1];
                    }

                    i = j - 1;
                }
            }
            for (int i = 0; i < n; i++) {
                int l = i - 1;
                int r = i + 1;
                if (l >= 0 && abs(a[i] - a[l]) > tar) return false;
                if (r < n && abs(a[i] - a[r]) > tar) return false;
            }
            
            return true;
        };
        
        while (ub - lb > 1) {
            int mid = (ub + lb) >> 1;
            if (trial(mid)) ub = mid;
            else lb = mid;
        }
        
        return ub;
    }
};",1454847461
Superultra,Superultra,3,3616,cpp,"#include <bits/stdc++.h>
using namespace std;

#define FOR(i, x, y) for (int i = x; i < y; i++)

#define ll long long

#define pb push_back
#define all(x) x.begin(), x.end()
#define sz(x) x.size()

#define pii pair<int, int>
#define f first
#define s second
#define mp make_pair

class Solution {
public:
    int countValidSelections(vector<int>& A) {
        int n = A.size();
        int ans = 0;

        for (int i = 0; i < n; i++){
            if (A[i])
                continue;
            
            int lsm = 0;
            int rsm = 0;

            for (int j = 0; j < i; j++)
                lsm += A[j];
            for (int j = i + 1; j < n; j++)
                rsm += A[j];
            
            if (abs(lsm - rsm) == 1)
                ans++;
            if (abs(lsm - rsm) == 0)
                ans += 2;
        }
        return ans;
    }
};",1454864113
Superultra,Superultra,3,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& A, vector<vector<int>>& Q) {
        // all 0
        bool all0 = true;
        for (int i : A)
            all0 &= (i == 0);

        if (all0)
            return true;
        
        int n = A.size();

        auto chk = [&](int k){
            vector<int> psm(n + 5, 0);

            for (int i = 0; i <= k; i++){
                int l = Q[i][0];
                int r = Q[i][1];
                int v = 1;

                psm[l] += v;
                psm[r + 1] -= v;
                // cout << l << "" "" << r << endl;
            }
            for (int i = 0; i < A.size(); i++){
                if (i)
                    psm[i] += psm[i - 1];
                // cout << psm[i] << endl;
                if (A[i] > psm[i])
                    return false;
            }
            return true;
        };
        return chk((int)Q.size() - 1);
    }
};",1454857600
Superultra,Superultra,3,3643,cpp,"#include <bits/stdc++.h>
using namespace std;

#define FOR(i, x, y) for (int i = x; i < y; i++)

#define ll long long

#define pb push_back
#define all(x) x.begin(), x.end()
#define sz(x) x.size()

#define pii pair<int, int>
#define f first
#define s second
#define mp make_pair

class Solution {
public:
    int minZeroArray(vector<int>& A, vector<vector<int>>& Q) {
        // all 0
        bool all0 = true;
        for (int i : A)
            all0 &= (i == 0);

        if (all0)
            return 0;
        
        int n = A.size();

        auto chk = [&](int k){
            vector<int> psm(n + 5, 0);

            for (int i = 0; i <= k; i++){
                int l = Q[i][0];
                int r = Q[i][1];
                int v = Q[i][2];

                psm[l] += v;
                psm[r + 1] -= v;
            }
            for (int i = 0; i < A.size(); i++){
                if (i)
                    psm[i] += psm[i - 1];
                
                if (A[i] > psm[i])
                    return false;
            }
            return true;
        };
        int L = 0, H = (int)Q.size() - 1;

        if (!chk(H))
            return -1;
        while (L < H){
            int M = (L + H) / 2;
            chk(M) ? H = M : L = M + 1;
        }
        return L + 1;
    }
};",1454853782
Superultra,Superultra,3,3658,cpp,"#include <bits/stdc++.h>
using namespace std;

#define FOR(i, x, y) for (int i = x; i < y; i++)

#define ll long long

#define pb push_back
#define all(x) x.begin(), x.end()
#define sz(x) x.size()

#define pii pair<int, int>
#define f first
#define s second
#define mp make_pair

class Solution {
public:
    int minDifference(vector<int>& A) {
        int n = A.size();

        // Everything -1 case
        bool allbad = true;
        for (int i : A)
            allbad &= (i == -1);
        if (allbad)
            return 0;
        
        int mx = 0;
        for (int i = 1; i < n; i++)
            if (A[i] != -1 and A[i - 1] != -1)
                mx = max(mx, abs(A[i] - A[i - 1]));
        
        auto chk1 = [&](int dif){
            // here we have constraint that |x-y| can be > dif (-1s must be same)
            vector<pii> itv;

            for (int i = 0; i < n; i++){
                if (A[i] != -1)
                    continue;
                
                int r = i;
                while (r + 1 < n and A[r + 1] == -1)
                    r++;
                                    
                // [i, r] of -1s
                // we are forced to make everything the same

                if (i == 0){
                    itv.push_back({A[r + 1] - dif, A[r + 1] + dif});
                }
                else if (r == n - 1){
                    itv.push_back({A[i - 1] - dif, A[i - 1] + dif});
                }
                else{
                    int lp = max(A[i - 1] - dif, A[r + 1] - dif);
                    int rp = min(A[i - 1] + dif, A[r + 1] + dif);
                    itv.push_back({lp, rp});
                }

                // move to next
                i = r;
            }

            // Process intervals
            if (itv.empty())
                return true;

            // first point at minimum end
            // second at max start
            int fpoint = 2e9 + 1;
            int spoint = -1;

            for (auto &[l, r] : itv){
                fpoint = min(fpoint, r);
                spoint = max(spoint, l);
            }

            bool ok = true;
            for (auto &[l, r] : itv){
                ok &= ((fpoint >= l and fpoint <= r) or (spoint >= l and spoint <= r));
            }

            return ok;
        };





        auto chk2 = [&](int dif){
            // here we dont have constraint on |x-y| (|x-y| <= dif)
            vector<pii> itv;

            for (int i = 0; i < n; i++){
                if (A[i] != -1)
                    continue;
                
                int r = i;
                while (r + 1 < n and A[r + 1] == -1)
                    r++;
                
                // [i, r] of -1s
                // we can have different

                if (i == 0){
                    itv.push_back({A[r + 1] - dif, A[r + 1] + dif});
                }
                else if (r == n - 1){
                    itv.push_back({A[i - 1] - dif, A[i - 1] + dif});
                }
                else{
                    if (r - i + 1 == 1){
                        int lp = max(A[i - 1] - dif, A[r + 1] - dif);
                        int rp = min(A[i - 1] + dif, A[r + 1] + dif);
                        itv.push_back({lp, rp});
                    }
                    else{
                        itv.push_back({A[r + 1] - dif, A[r + 1] + dif});
                        itv.push_back({A[i - 1] - dif, A[i - 1] + dif});
                    }
                }

                // move to next
                i = r;
            }

            // Process intervals
            if (itv.empty())
                return true;

            // first point at minimum end
            // second at max start
            int fpoint = 2e9 + 1;
            int spoint = -1;

            for (auto &[l, r] : itv){
                fpoint = min(fpoint, r);
                spoint = max(spoint, l);
            }

            bool ok = true;
            for (auto &[l, r] : itv){
                ok &= ((fpoint >= l and fpoint <= r) or (spoint >= l and spoint <= r));
            }

            return ok and abs(fpoint - spoint) <= dif;
        };


        // cout << chk2(3) << endl;

        int L = mx, H = 1e9 + 1;

        while (L < H){
            int M = (L + H) / 2;
            (chk1(M) or chk2(M)) ? H = M : L = M + 1;
        }
        return L;
    }
};
",1454840985
Aryan470,Aryan470,4,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        lhs_sum = 0
        rhs_sum = sum(nums)
        ans = 0
        for x in nums:
            rhs_sum -= x
            if x == 0:
                if lhs_sum == rhs_sum:
                    ans += 2
                elif abs(lhs_sum-rhs_sum) == 1:
                    ans += 1
            lhs_sum += x
        return ans",1454807847
Aryan470,Aryan470,4,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        delta = [0] * len(nums)
        for l, r in queries:
            delta[l] += 1
            if r < len(nums)-1:
                delta[r+1] -= 1
        for i in range(1, len(delta)):
            delta[i] += delta[i-1]

        for i in range(len(delta)):
            if delta[i] < nums[i]:
                return False
        return True",1454809641
Aryan470,Aryan470,4,3643,python3,"class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        def works(k):
            delta = [0] * (len(nums) + 1)
            for l, r, v in (queries[:k]):
                delta[l] += v
                delta[r+1] -= v

            for i in range(1, len(delta)):
                delta[i] += delta[i-1]

            for i in range(len(nums)):
                if delta[i] < nums[i]:
                    return False
            return True
                
        ans = len(queries)+1
        L = 0
        R = len(queries)+1

        while L < R:
            M = (L+R)//2
            if works(M):
                # can reduce K
                R = M
                ans = min(ans, M)
            else:
                L = M+1

        if ans == len(queries)+1:
            return -1
        return ans",1454815290
Aryan470,Aryan470,4,3658,python3,"class Solution:
    def minDifference(self, nums: List[int]) -> int:
        # assume x < y
        # if a pair of numbers contains x then use x, if it contains y use y
        # if it contains neither, then if x is closer use x
        # otherwise use y
        # how to pick x/y
        # if we pick some x, y, and shift x up by one, 
        # axyb = x-a + y-x + b-y or x-a, x-x, b-x
        # track pairs of diffs
        # track any number that is adj to -1
        # cnt number of 
        # if we pick max abs diff can we check if feasible
        minus_ones = []
        for i in range(len(nums)):
            if nums[i] == -1:
                minus_ones.append(i)
        def works(delta):
            seen_diff = 0
            for i in range(1, len(nums)):
                if nums[i-1] != -1 and nums[i] != -1:
                    seen_diff = max(seen_diff, abs(nums[i]-nums[i-1]))
            if seen_diff > delta:
                return False
            if not minus_ones:
                return True
                    
            # see if we can place numbers to satisfy <= delta
            # for each -1 we can determine a range of values
            # find parition of ranges that have intersection
            ranges = []
            for i in minus_ones:
                my_range = [1, 10**9]
                if i > 0:
                    if nums[i-1] != -1:
                        # i must be greater than equal to num - delta
                        # less than equal to num + delta
                        my_range[0] = max(my_range[0], nums[i-1] - delta)
                        my_range[1] = min(my_range[1], nums[i-1] + delta)
                if i < len(nums)-1 and nums[i+1] != -1:
                    # i must be greater than equal to num - delta
                    # less than equal to num + delta
                    my_range[0] = max(my_range[0], nums[i+1] - delta)
                    my_range[1] = min(my_range[1], nums[i+1] + delta)
                ranges.append(my_range)
            # take x to be smallest rb
            # take y to be greatest lb
            x = min(r[1] for r in ranges)
            y = max(r[0] for r in ranges)

            # check to make sure that each range at least contains x or y
            for l, r in ranges:
                if not ((l <= x <= r) or (l <= y <= r)):
                    return False

            assignment = [0] * len(minus_ones)

            # check the ranges on each one
            for i, moi in enumerate(minus_ones):
                l, r = ranges[i]
                if not ((l <= x <= r)):
                    # must be y
                    assignment[i] = 1
                if not ((l <= y <= r)):
                    # must be x
                    assignment[i] = -1

            # now let's check that each pair of adj -1s works
            for moi in range(1, len(minus_ones)):
                i = minus_ones[moi-1]
                j = minus_ones[moi]
                if i != j-1:
                    continue
                # check the assignments for these
                l_assign = assignment[moi-1]
                r_assign = assignment[moi]
                if l_assign != 0 and r_assign != 0:
                    if l_assign != r_assign and abs(x-y)>delta:
                        return False
                if l_assign != 0 and r_assign == 0:
                    if abs(x-y)>delta:
                        assignment[moi] = assignment[moi-1]
            return True
        
        L = 0
        R = 10**9
        ans = 10**9

        while L < R:
            M = (L+R)//2
            if works(M):
                ans = min(ans, M)
                R = M
            else:
                L = M+1
        return ans",1454858612
LayCurse,LayCurse,5,3616,cpp,"#pragma GCC optimize(""Ofast"")
#pragma GCC optimize(""unroll-loops"")
#pragma GCC optimize(""inline"")
#include<bits/stdc++.h>
using namespace std;
#define main dummy_main
int main(){
  return 0;
}
#undef main
class Solution{
  public:
  int countValidSelections(vector<int>& A){
    int i;
    int N;
    int x;
    int y;
    int res = 0;
    N = A.size();
    for(i=(0);i<(N);i++){
      if(A[i]==0){
        int j;
        x = y = 0;
        for(j=(0);j<(i);j++){
          x += A[j];
        }
        for(j=(i+1);j<(N);j++){
          y += A[j];
        }
        if(x == y){
          res += 2;
        }
        if(abs(x-y)==1){
          res += 1;
        }
      }
    }
    return res;
  }
}
;
// cLay version 20241019-1

// --- original code ---
// #define main dummy_main
// {}
// #undef main
// 
// class Solution {
// public:
//   int countValidSelections(vector<int>& A) {
//     int N, x, y;
//     int res = 0;
//     N = A.size();
// 
//     rep(i,N) if(A[i]==0){
//       x = y = 0;
//       rep(j,i) x += A[j];
//       rep(j,i+1,N) y += A[j];
//       if(x == y) res += 2;
//       if(abs(x-y)==1) res += 1;
//     }
//     return res;
//   }
// };
",1454806915
LayCurse,LayCurse,5,3639,cpp,"#pragma GCC optimize(""Ofast"")
#pragma GCC optimize(""unroll-loops"")
#pragma GCC optimize(""inline"")
#include<bits/stdc++.h>
using namespace std;
template<class T> struct cLtraits_identity{
  using type = T;
}
;
template<class T> using cLtraits_try_make_signed =
  typename conditional<
    is_integral<T>::value,
    make_signed<T>,
    cLtraits_identity<T>
    >::type;
template <class S, class T> struct cLtraits_common_type{
  using tS = typename cLtraits_try_make_signed<S>::type;
  using tT = typename cLtraits_try_make_signed<T>::type;
  using type = typename common_type<tS,tT>::type;
}
;
void*wmem;
char memarr[96000000];
template<class S, class T> inline auto min_L(S a, T b)
-> typename cLtraits_common_type<S,T>::type{
  return (typename cLtraits_common_type<S,T>::type) a <= (typename cLtraits_common_type<S,T>::type) b ? a : b;
}
template<class S, class T> inline S chmin(S &a, T b){
  if(a>b){
    a=b;
  }
  return a;
}
template<class T> inline void walloc1d(T **arr, int x, void **mem = &wmem){
  static int skip[16] = {0, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1};
  (*mem) = (void*)( ((char*)(*mem)) + skip[((unsigned long long)(*mem)) & 15] );
  (*arr)=(T*)(*mem);
  (*mem)=((*arr)+x);
}
template<class T> inline void walloc1d(T **arr, int x1, int x2, void **mem = &wmem){
  walloc1d(arr, x2-x1, mem);
  (*arr) -= x1;
}
template<class T> struct segtree_Add_Minval{
  int N;
  int logN;
  T*mn;
  T*addval;
  void malloc(int maxN, int once = 0){
    int i;
    for(i=1;i<maxN;i*=2){
      ;
    }
    mn = new T[2*i];
    addval = new T[i];
    if(once){
      setN(maxN);
    }
  }
  void walloc(int maxN, int once = 0, void **mem = &wmem){
    int i;
    for(i=1;i<maxN;i*=2){
      ;
    }
    walloc1d(&mn, 2*i, mem);
    walloc1d(&addval, i, mem);
    if(once){
      setN(maxN);
    }
  }
  void free(void){
    delete [] mn;
    delete [] addval;
  }
  T& operator[](int i){
    return mn[N+i];
  }
  void setN(int n, int zerofill = 1, int dobuild = 1){
    int i;
    for(i=1,logN=0;i<n;i*=2,logN++){
      ;
    }
    N = i;
    if(zerofill){
      for(i=(0);i<(N);i++){
        mn[N+i] = 0;
      }
    }
    if(dobuild){
      build();
    }
  }
  void build(void){
    int i;
    for(i=N-1;i;i--){
      mn[i] =min_L(mn[2*i], mn[2*i+1]);
    }
    int myTeyldV = N;
    for(i=(1);i<(myTeyldV);i++){
      addval[i] = 0;
    }
  }
  inline void push_one(int a, int sz, int st){
    if(addval[a] != 0){
      if(sz > 1){
        addval[a*2] += addval[a];
        addval[a*2+1] += addval[a];
        mn[a*2] += addval[a];
        mn[a*2+1] += addval[a];
      }
      else{
        mn[a*2] += addval[a];
        mn[a*2+1] += addval[a];
      }
      addval[a] = 0;
      return;
    }
  }
  inline void push(int a){
    int i;
    int aa = a - N;
    int nd;
    int sz;
    int st;
    for(i=logN;i;i--){
      nd = a>>i;
      sz = 1<<(i-1);
      st = 2 * sz * (aa>>i);
      push_one(nd, sz, st);
    }
  }
  inline void build(int a){
    int sz = 1;
    int st = a - N;
    while(a > 1){
      if(a%2){
        st += sz;
      }
      a /= 2;
      sz *= 2;
      mn[a] =min_L(mn[a*2], mn[a*2+1]);
      if(addval[a] != 0){
        mn[a] += addval[a];
      }
    }
  }
  inline void add(int a, int b, T val){
    int sz = 1;
    int aa;
    int bb;
    if(a >= b){
      return;
    }
    aa = (a += N);
    bb = (b += N);
    push(a);
    push(b-1);
    if(a%2){
      mn[a] += val;
      a++;
    }
    if(b%2){
      b--;
      mn[b] += val;
    }
    a /= 2;
    b /= 2;
    while(a < b){
      sz *= 2;
      if(a%2){
        addval[a] += val;
        mn[a] += val;
        a++;
      }
      if(b%2){
        b--;
        addval[b] += val;
        mn[b] += val;
      }
      a /= 2;
      b /= 2;
    }
    build(aa);
    build(bb-1);
  }
  inline T getMinVal(int a, int b){
    T res;
    T tmp;
    int fga = 0;
    int fgb = 0;
    a += N;
    b += N;
    push(a);
    push(b-1);
    while(a < b){
      if(a%2){
        if(fga){
          res =min_L(res, mn[a]);
        }
        else{
          res = mn[a];
          fga = 1;
        }
        a++;
      }
      if(b%2){
        b--;
        if(fgb){
          tmp =min_L(mn[b], tmp);
        }
        else{
          tmp = mn[b];
          fgb = 1;
        }
      }
      a /= 2;
      b /= 2;
    }
    if(fga==1 && fgb==0){
      return res;
    }
    if(fga==0 && fgb==1){
      return tmp;
    }
    if(fga==1 && fgb==1){
      res =min_L(res, tmp);
      return res;
    }
    return res;
  }
}
;
#define main dummy_main
int main(){
  wmem = memarr;
  return 0;
}
#undef main
class Solution{
  public:
  bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries){
    int i, k;
    dummy_main();
    int N = nums.size();
    segtree_Add_Minval<int> t;
    t.walloc(N);
    t.setN(N);
    for(i=(0);i<(N);i++){
      t[i] = -nums[i];
    }
    t.build();
    for(k=(0);k<(queries.size());k++){
      int L;
      int R;
      int X;
      L = queries[k][0];
      R = queries[k][1];
      X = 1;
      t.add(L,R+1,X);
    }
    if(t.getMinVal(0,N) >= 0){
      return true;
    }
    return false;
  }
}
;
// cLay version 20241019-1

// --- original code ---
// #define main dummy_main
// {}
// #undef main
// 
// class Solution {
// public:
//   bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
//     dummy_main();
//     int N = nums.size();
//     segtree_Add_Minval<int> t;
// 
//     t.walloc(N);
//     t.setN(N);
//     rep(i,N) t[i] = -nums[i];
//     t.build();
// 
//     rep(k,queries.size()){
//       int L, R, X;
//       L = queries[k][0];
//       R = queries[k][1];
//       X = 1;
// 
//       t.add(L,R+1,X);
//     }
//     if(t.getMinVal(0,N) >= 0) return true;
// 
//     return false;
//   }
// };
",1454815207
LayCurse,LayCurse,5,3643,cpp,"#pragma GCC optimize(""Ofast"")
#pragma GCC optimize(""unroll-loops"")
#pragma GCC optimize(""inline"")
#include<bits/stdc++.h>
using namespace std;
template<class T> struct cLtraits_identity{
  using type = T;
}
;
template<class T> using cLtraits_try_make_signed =
  typename conditional<
    is_integral<T>::value,
    make_signed<T>,
    cLtraits_identity<T>
    >::type;
template <class S, class T> struct cLtraits_common_type{
  using tS = typename cLtraits_try_make_signed<S>::type;
  using tT = typename cLtraits_try_make_signed<T>::type;
  using type = typename common_type<tS,tT>::type;
}
;
void*wmem;
char memarr[96000000];
template<class S, class T> inline auto min_L(S a, T b)
-> typename cLtraits_common_type<S,T>::type{
  return (typename cLtraits_common_type<S,T>::type) a <= (typename cLtraits_common_type<S,T>::type) b ? a : b;
}
template<class S, class T> inline S chmin(S &a, T b){
  if(a>b){
    a=b;
  }
  return a;
}
template<class T> inline void walloc1d(T **arr, int x, void **mem = &wmem){
  static int skip[16] = {0, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1};
  (*mem) = (void*)( ((char*)(*mem)) + skip[((unsigned long long)(*mem)) & 15] );
  (*arr)=(T*)(*mem);
  (*mem)=((*arr)+x);
}
template<class T> inline void walloc1d(T **arr, int x1, int x2, void **mem = &wmem){
  walloc1d(arr, x2-x1, mem);
  (*arr) -= x1;
}
template<class T> struct segtree_Add_Minval{
  int N;
  int logN;
  T*mn;
  T*addval;
  void malloc(int maxN, int once = 0){
    int i;
    for(i=1;i<maxN;i*=2){
      ;
    }
    mn = new T[2*i];
    addval = new T[i];
    if(once){
      setN(maxN);
    }
  }
  void walloc(int maxN, int once = 0, void **mem = &wmem){
    int i;
    for(i=1;i<maxN;i*=2){
      ;
    }
    walloc1d(&mn, 2*i, mem);
    walloc1d(&addval, i, mem);
    if(once){
      setN(maxN);
    }
  }
  void free(void){
    delete [] mn;
    delete [] addval;
  }
  T& operator[](int i){
    return mn[N+i];
  }
  void setN(int n, int zerofill = 1, int dobuild = 1){
    int i;
    for(i=1,logN=0;i<n;i*=2,logN++){
      ;
    }
    N = i;
    if(zerofill){
      for(i=(0);i<(N);i++){
        mn[N+i] = 0;
      }
    }
    if(dobuild){
      build();
    }
  }
  void build(void){
    int i;
    for(i=N-1;i;i--){
      mn[i] =min_L(mn[2*i], mn[2*i+1]);
    }
    int myTeyldV = N;
    for(i=(1);i<(myTeyldV);i++){
      addval[i] = 0;
    }
  }
  inline void push_one(int a, int sz, int st){
    if(addval[a] != 0){
      if(sz > 1){
        addval[a*2] += addval[a];
        addval[a*2+1] += addval[a];
        mn[a*2] += addval[a];
        mn[a*2+1] += addval[a];
      }
      else{
        mn[a*2] += addval[a];
        mn[a*2+1] += addval[a];
      }
      addval[a] = 0;
      return;
    }
  }
  inline void push(int a){
    int i;
    int aa = a - N;
    int nd;
    int sz;
    int st;
    for(i=logN;i;i--){
      nd = a>>i;
      sz = 1<<(i-1);
      st = 2 * sz * (aa>>i);
      push_one(nd, sz, st);
    }
  }
  inline void build(int a){
    int sz = 1;
    int st = a - N;
    while(a > 1){
      if(a%2){
        st += sz;
      }
      a /= 2;
      sz *= 2;
      mn[a] =min_L(mn[a*2], mn[a*2+1]);
      if(addval[a] != 0){
        mn[a] += addval[a];
      }
    }
  }
  inline void add(int a, int b, T val){
    int sz = 1;
    int aa;
    int bb;
    if(a >= b){
      return;
    }
    aa = (a += N);
    bb = (b += N);
    push(a);
    push(b-1);
    if(a%2){
      mn[a] += val;
      a++;
    }
    if(b%2){
      b--;
      mn[b] += val;
    }
    a /= 2;
    b /= 2;
    while(a < b){
      sz *= 2;
      if(a%2){
        addval[a] += val;
        mn[a] += val;
        a++;
      }
      if(b%2){
        b--;
        addval[b] += val;
        mn[b] += val;
      }
      a /= 2;
      b /= 2;
    }
    build(aa);
    build(bb-1);
  }
  inline T getMinVal(int a, int b){
    T res;
    T tmp;
    int fga = 0;
    int fgb = 0;
    a += N;
    b += N;
    push(a);
    push(b-1);
    while(a < b){
      if(a%2){
        if(fga){
          res =min_L(res, mn[a]);
        }
        else{
          res = mn[a];
          fga = 1;
        }
        a++;
      }
      if(b%2){
        b--;
        if(fgb){
          tmp =min_L(mn[b], tmp);
        }
        else{
          tmp = mn[b];
          fgb = 1;
        }
      }
      a /= 2;
      b /= 2;
    }
    if(fga==1 && fgb==0){
      return res;
    }
    if(fga==0 && fgb==1){
      return tmp;
    }
    if(fga==1 && fgb==1){
      res =min_L(res, tmp);
      return res;
    }
    return res;
  }
}
;
#define main dummy_main
int main(){
  wmem = memarr;
  return 0;
}
#undef main
class Solution{
  public:
  int minZeroArray(vector<int>& nums, vector<vector<int>>& queries){
    int i, k;
    dummy_main();
    int N = nums.size();
    segtree_Add_Minval<int> t;
    t.walloc(N);
    t.setN(N);
    for(i=(0);i<(N);i++){
      t[i] = -nums[i];
    }
    t.build();
    if(t.getMinVal(0,N) >= 0){
      return 0;
    }
    for(k=(0);k<(queries.size());k++){
      int L;
      int R;
      int X;
      L = queries[k][0];
      R = queries[k][1];
      X = queries[k][2];
      t.add(L,R+1,X);
      if(t.getMinVal(0,N) >= 0){
        return k+1;
      }
    }
    return -1;
  }
}
;
// cLay version 20241019-1

// --- original code ---
// #define main dummy_main
// {}
// #undef main
// 
// class Solution {
// public:
//   int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
//     dummy_main();
//     int N = nums.size();
//     segtree_Add_Minval<int> t;
// 
//     t.walloc(N);
//     t.setN(N);
//     rep(i,N) t[i] = -nums[i];
//     t.build();
// 
//     if(t.getMinVal(0,N) >= 0) return 0;
// 
//     rep(k,queries.size()){
//       int L, R, X;
//       L = queries[k][0];
//       R = queries[k][1];
//       X = queries[k][2];
// 
//       t.add(L,R+1,X);
//       if(t.getMinVal(0,N) >= 0) return k+1;
//     }
// 
//     return -1;
//   }
// };
",1454813466
LayCurse,LayCurse,5,3658,cpp,"#pragma GCC optimize(""Ofast"")
#pragma GCC optimize(""unroll-loops"")
#pragma GCC optimize(""inline"")
#include<bits/stdc++.h>
using namespace std;
template<class T> struct cLtraits_identity{
  using type = T;
}
;
template<class T> using cLtraits_try_make_signed =
  typename conditional<
    is_integral<T>::value,
    make_signed<T>,
    cLtraits_identity<T>
    >::type;
template <class S, class T> struct cLtraits_common_type{
  using tS = typename cLtraits_try_make_signed<S>::type;
  using tT = typename cLtraits_try_make_signed<T>::type;
  using type = typename common_type<tS,tT>::type;
}
;
template<class S, class T> inline auto min_L(S a, T b)
-> typename cLtraits_common_type<S,T>::type{
  return (typename cLtraits_common_type<S,T>::type) a <= (typename cLtraits_common_type<S,T>::type) b ? a : b;
}
template<class S, class T> inline auto max_L(S a, T b)
-> typename cLtraits_common_type<S,T>::type{
  return (typename cLtraits_common_type<S,T>::type) a >= (typename cLtraits_common_type<S,T>::type) b ? a : b;
}
template<class S, class T> inline S chmin(S &a, T b){
  if(a>b){
    a=b;
  }
  return a;
}
template<class S, class T> inline S chmax(S &a, T b){
  if(a<b){
    a=b;
  }
  return a;
}
#define main dummy_main
int main(){
  return 0;
}
#undef main
class Solution{
  public:
  int minDifference(vector<int>& A){
    int i;
    int j;
    int k;
    int cur = 0;
    int res;
    int ok;
    int x1;
    int x2;
    int y1;
    int y2;
    int fg;
    long long x;
    long long y;
    long long mn;
    long long mx;
    int N = A.size();
    vector<pair<int,int>> one;
    vector<pair<int,int>> two;
    for(i=(0);i<(N);i++){
      if(A[i] != -1){
        break;
      }
    }
    if(i==N){
      return 0;
    }
    for(i=(1);i<(N);i++){
      if(A[i-1] != -1 && A[i] != -1){
        chmax(cur, abs(A[i] - A[i-1]));
      }
    }
    for(i=(0);i<(N);i++){
      if(A[i] == -1){
        int c = 1;
        int x = -1;
        int y = -1;
        if(i != 0){
          x = A[i-1];
        }
        while(i+1 < N && A[i+1]==-1){
          c++;
          i++;
        }
        if(i+1 < N){
          y = A[i+1];
        }
        if(x == -1){
          x = y;
        }
        if(y == -1){
          y = x;
        }
        if(x > y){
          swap(x, y);
        }
        ;
        if(c==1){
          one.push_back({x,y});
        }
        if(c>=2){
          one.push_back({x,x});
          one.push_back({y,y});
          two.push_back({x,y});
        }
      }
    }
    long long OA9NF42T;
    long long ATMZloZo;
    long long pyHJGNQc;
    OA9NF42T = 0;
    ATMZloZo = 1000000000;
    while(OA9NF42T < ATMZloZo){
      if((OA9NF42T + ATMZloZo)%2==0){
        pyHJGNQc = (OA9NF42T + ATMZloZo) / 2;
      }
      else{
        pyHJGNQc = (OA9NF42T + ATMZloZo - 1) / 2;
      }
      ok = 1;
      x1 = y1 = 0;
      x2 = y2 = 1000000000+1;
      fg = 0;
      for(i=(0);i<(one.size());i++){
        if(ok){
          x = one[i].first;
          y = one[i].second;
          mn = y - pyHJGNQc;
          mx = x + pyHJGNQc;
          if(mn > mx){
            ok = 0;
            break;
          }
          if(max_L(x1, mn)<=min_L(x2, mx)){
            chmax(x1, mn);
            chmin(x2, mx);
          }
          else if(max_L(y1, mn)<=min_L(y2, mx)){
            chmax(y1, mn);
            chmin(y2, mx);
          }
          else{
            ok = 0;
          }
        }
      }
      for(i=(0);i<(two.size());i++){
        if(ok){
          x = two[i].first;
          y = two[i].second;
          mn = y - pyHJGNQc;
          mx = x + pyHJGNQc;
          if(max_L(x1, mn)<=min_L(x2, mx)){
            continue;
          }
          if(max_L(y1, mn)<=min_L(y2, mx)){
            continue;
          }
          fg = 1;
        }
      }
      if(fg && (x1 > y2 + pyHJGNQc || y1 > x2 + pyHJGNQc )){
        ok = 0;
      }
      if(ok){
        ATMZloZo = pyHJGNQc;
      }
      else{
        OA9NF42T = pyHJGNQc + 1;
      }
    }
    res =ATMZloZo;
    chmax(cur, res);
    return cur;
  }
}
;
// cLay version 20241019-1

// --- original code ---
// #define main dummy_main
// {}
// #undef main
// 
// class Solution {
// public:
//   int minDifference(vector<int>& A) {
//     int i, j, k;
//     int cur = 0, res, ok, x1, x2, y1, y2, fg;
//     ll x, y, mn, mx;
//     int N = A.size();
//     vector<pair<int,int>> one, two;
// 
//     rep(i,N) if(A[i] != -1) break;
//     if(i==N) return 0;
// 
//     rep(i,1,N) if(A[i-1] != -1 && A[i] != -1) cur >?= abs(A[i] - A[i-1]);
// 
//     rep(i,N) if(A[i] == -1){
//       int c = 1, x = -1, y = -1;
//       if(i != 0) x = A[i-1];
//       while(i+1 < N && A[i+1]==-1) c++, i++;
//       if(i+1 < N) y = A[i+1];
// 
//       if(x == -1) x = y;
//       if(y == -1) y = x;
//       sortE(x,y);
//       if(c==1) one.push_back({x,y});
//       if(c>=2){
//         one.push_back({x,x});
//         one.push_back({y,y});
//         two.push_back({x,y});
//       }
//     }
// 
//     res = bsearch_min[ll,d,0,1d9][
//       ok = 1;
//       x1 = y1 = 0;
//       x2 = y2 = 1d9+1;
//       fg = 0;
// 
//       rep(i,one.size()) if(ok){
//         x = one[i].first;
//         y = one[i].second;
//         mn = y - d;
//         mx = x + d;
//         if(mn > mx) ok = 0, break;
// 
//         if(max(x1,mn) <= min(x2,mx)){
//           x1 >?= mn;
//           x2 <?= mx;
//         } else if(max(y1,mn) <= min(y2,mx)){
//           y1 >?= mn;
//           y2 <?= mx;
//         } else {
//           ok = 0;
//         }
//       }
//       rep(i,two.size()) if(ok){
//         x = two[i].first;
//         y = two[i].second;
// 
//         mn = y - d;
//         mx = x + d;
//         if(max(x1,mn) <= min(x2,mx)) continue;
//         if(max(y1,mn) <= min(y2,mx)) continue;
// 
//         fg = 1;
//       }
// 
//       if(fg && (x1 > y2 + d || y1 > x2 + d )) ok = 0;
//     ](ok);
// 
//     cur >?= res;
//     return cur;
//   }
// };
",1454875764
Chinedu,profchi,9,3616,java,"class Solution {
    public int countValidSelections(int[] nums) {
        
        int count = 0;
        
        for (int i = 0; i < nums.length; ++i) {
            if (nums[i] != 0)
                continue;
            
            if (isValid(nums, i, 1) ) {
                ++count;   
            }
            
            if (isValid(nums, i, -1) ) {
                ++count;   
            }
        }
        
        return count;
    }
    
    
    private boolean isValid(int [] nums, int val, int dir) {
        
        int [] arr = new int [nums.length];
        
        for (int i = 0; i < nums.length; ++i) {
            arr[i] = nums[i];
        }
        
        int idx = val + dir;
        
        while (idx < nums.length && idx >= 0) {
            
            if (arr[idx] > 0) {
                --arr[idx];
                dir *= -1;
            }
            
            idx += dir;
        }
        
        
        for (int num : arr) {
            if (num != 0)
                return false; 
        }
        
        return true;
    }
}",1454809068
Chinedu,profchi,9,3639,java,"class Solution {
    public boolean isZeroArray(int[] nums, int[][] queries) {
        
        int [] added = new int [nums.length];
        
        int l, r;
        
        for (int [] query : queries) {
            l = query[0];
            r = query[1];
            
            added[l]++;
            
            if (r + 1 < nums.length) {
                added[r + 1]--;
            }
        }
        
        
        int sum = 0;
        
        for (int i = 0; i < nums.length; ++i) {
            sum += added[i];
            added[i] = sum;
        }
        
        
        for (int i = 0; i < nums.length; ++i) {
            
            if (nums[i] > added[i])
                return false;
        }
        
        return true;
    }
}",1454812534
Chinedu,profchi,9,3643,java,"class Solution {
    public int minZeroArray(int[] nums, int[][] queries) {
        
        int max = queries.length;
        
        if (!works(nums, queries, max))
            return -1;
        
        int min = -1;
        int mid;
        
        
        while (max - min > 1) {
            mid = (max + min) / 2;
            
            if (works(nums, queries, mid)) {
                max = mid;
            } else {
                min = mid;
            }
        }
        
        return max;
    }
    
    
    public boolean works(int [] nums, int [][] queries, int k) {
        
        int [] added = new int [nums.length];
        
        int l, r;
        
        int [] query;
        for (int i = 0; i < k && i < queries.length; ++i) {
            query = queries[i];
            
            l = query[0];
            r = query[1];
            
            added[l] += query[2];
            
            if (r + 1 < nums.length) {
                added[r + 1] -= query[2];
            }
        }
        
        
        int sum = 0;
        
        for (int i = 0; i < nums.length; ++i) {
            sum += added[i];
            added[i] = sum;
        }
        
        
        for (int i = 0; i < nums.length; ++i) {
            
            if (nums[i] > added[i])
                return false;
        }
        
        return true;
    }
}",1454820099
Chinedu,profchi,9,3658,java,"class Solution {
    public int minDifference(int[] nums) {
        
        
        long min = -1;
        
        long max = 1_000_000_001;
        
        List<int []> list = new ArrayList<>();
        
        for (int i = 0; i < nums.length; ++i) {
            if (nums[i] == -1)
                continue;
            
            list.add(new int [] {nums[i], i});
        }
        
        long mid;
        
        // max = 12;
        // min = 10;
        
        while (max - min > 1) {
            mid = (max + min) / 2;
            
            if (works(nums, list, mid)) {
                max = mid;
            } else {
                min = mid;
            }
        }
        
        return (int ) max;
    }
    
    
    private boolean works(int [] arr, List<int []> list, long maxDiff) {
        
        for (int i = 1; i < arr.length; ++i) {
            if (arr[i] > 0 && arr[i - 1] > 0 && Math.abs(arr[i] - arr[i - 1]) > maxDiff)
                return false;
        }
        
        long [] first = null;
        long [] second = null;
        
        
        List<long []> ranges = new ArrayList<>();
        
        
        for (int i = 0; i < arr.length; ++i) {
            if (arr[i] == -1)
                continue;
            
            if ( (i - 1 >= 0 && arr[i - 1] == -1) || (i + 1 < arr.length && arr[i + 1] == -1) ) {
                ranges.add(new long [] {arr[i] - maxDiff, arr[i] + maxDiff});
            }
        }
        
        
        Collections.sort(ranges, (a, b) -> Long.compare(a[0], b[0]));
        
        
        long max1 = Long.MAX_VALUE;
        
        
        for (long [] range : ranges) {
            if (range[1] < max1) {
                max1 = range[1];
            }
        }
        
        Collections.sort(ranges, (a, b) -> Long.compare(b[1], a[1]));
        
        long max2 = 0;
        
        for (long [] range : ranges) {
            if (range[0] > max2) {
                max2 = range[0];
            }
        }
        
        int count;
        
        for (long [] range : ranges) {
            count = 0;
            
            if (max1 >= range[0] && max1 <= range[1])
                ++count;
            
            if (max2 >= range[0] && max2 <= range[1])
                ++count;
            
            if (count == 0)
                return false;
        }
        
        
        // System.out.println(max1 + "" "" + max2);
        
        int cur, prev, space;
        
        for (int i = 1; i < list.size(); ++i) {
            
            cur = list.get(i)[0];
            prev = list.get(i - 1)[0];
            
            space = list.get(i)[1] - list.get(i - 1)[1] - 1;
            
            if (space == 0)
                continue;
            
            
            if (Math.abs(max1 - cur) <= maxDiff && Math.abs(max1 - prev) <= maxDiff )
                continue;
            
            if (Math.abs(max2 - cur) <= maxDiff && Math.abs(max2 - prev) <= maxDiff )
                continue;
            
           //  System.out.println(max1 + "" "" + max2 + "" "" + cur + "" "" + prev + "" "" + space);
            
            if (space == 1 || Math.abs(max1 - max2) > maxDiff)
                return false;
        }
        
        return true;
    }
}",1454879702
Paul Chen,876pol,10,3616,cpp,"#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

using namespace std;
using namespace __gnu_pbds;

using ll = long long;
using pll = pair<ll, ll>;
template <class T>
using vec = vector<T>;
template <class T>
using indexed_set =
    tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

#define FOR(i, s, e) for (ll i = (ll)s; i < (ll)e; i++)
#define CFOR(i, s, e) for (ll i = (ll)s; i <= (ll)e; i++)
#define TRAV(a, c) for (const auto &a : c)
#define dbg(x) cerr << ""ln"" << __LINE__ << "": "" << #x << "" = "" << x << endl

template <class K, class V>
ostream &operator<<(ostream &out, const pair<K, V> &obj) {
    return out << ""("" << obj.first << "", "" << obj.second << "")"";
}

template <class T, class = decay_t<decltype(*begin(declval<T>()))>,
          class = enable_if_t<!is_same<T, string>::value>>
ostream &operator<<(ostream &out, const T &obj) {
    out << '[';
    for (auto it = obj.begin(); it != obj.end(); it++)
        out << &"", ""[2 * (it == obj.begin())] << *it;
    return out << ']';
}

class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int sum = accumulate(nums.begin(), nums.end(), 0ll);
        int n = nums.size();
        int curr = 0;
        int ans = 0;
        FOR(i, 0, n) {
            curr += nums[i];
            if (curr * 2 == sum && nums[i] == 0) {
                ans += 2;
            } else if (abs(curr * 2 - sum) == 1 && nums[i] == 0) {
                ans += 1; 
            }
        }
        return ans;
    }
};",1454808501
Paul Chen,876pol,10,3639,cpp,"#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

using namespace std;
using namespace __gnu_pbds;

using ll = long long;
using pll = pair<ll, ll>;
template <class T>
using vec = vector<T>;
template <class T>
using indexed_set =
    tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

#define FOR(i, s, e) for (ll i = (ll)s; i < (ll)e; i++)
#define CFOR(i, s, e) for (ll i = (ll)s; i <= (ll)e; i++)
#define TRAV(a, c) for (const auto &a : c)
#define dbg(x) cerr << ""ln"" << __LINE__ << "": "" << #x << "" = "" << x << endl

template <class K, class V>
ostream &operator<<(ostream &out, const pair<K, V> &obj) {
    return out << ""("" << obj.first << "", "" << obj.second << "")"";
}

template <class T, class = decay_t<decltype(*begin(declval<T>()))>,
          class = enable_if_t<!is_same<T, string>::value>>
ostream &operator<<(ostream &out, const T &obj) {
    out << '[';
    for (auto it = obj.begin(); it != obj.end(); it++)
        out << &"", ""[2 * (it == obj.begin())] << *it;
    return out << ']';
}

class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        ll n = nums.size();
        vec<ll> diff(n + 1);
        TRAV(e, queries) {
            diff[e[0]]++;
            diff[e[1] + 1]--;
        }
        FOR(i, 0, n) diff[i + 1] += diff[i];
        FOR(i, 0, n) {
            if (nums[i] > diff[i]) return false;
        }
        return true;
    }
};",1454813989
Paul Chen,876pol,10,3643,cpp,"#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

using namespace std;
using namespace __gnu_pbds;

using ll = long long;
using pll = pair<ll, ll>;
template <class T>
using vec = vector<T>;
template <class T>
using indexed_set =
    tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

#define FOR(i, s, e) for (ll i = (ll)s; i < (ll)e; i++)
#define CFOR(i, s, e) for (ll i = (ll)s; i <= (ll)e; i++)
#define TRAV(a, c) for (const auto &a : c)
#define dbg(x) cerr << ""ln"" << __LINE__ << "": "" << #x << "" = "" << x << endl

template <class K, class V>
ostream &operator<<(ostream &out, const pair<K, V> &obj) {
    return out << ""("" << obj.first << "", "" << obj.second << "")"";
}

template <class T, class = decay_t<decltype(*begin(declval<T>()))>,
          class = enable_if_t<!is_same<T, string>::value>>
ostream &operator<<(ostream &out, const T &obj) {
    out << '[';
    for (auto it = obj.begin(); it != obj.end(); it++)
        out << &"", ""[2 * (it == obj.begin())] << *it;
    return out << ']';
}

class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        ll n = nums.size();
        function<bool(ll)> ok = [&](ll x) {
            vec<ll> diff(n + 1);
            FOR(i, 0, x) {
                auto e = queries[i];
                diff[e[0]] += e[2];
                diff[e[1] + 1] -= e[2];
            }
            FOR(i, 0, n) diff[i + 1] += diff[i];
            FOR(i, 0, n) {
                if (nums[i] > diff[i]) return false;
            }
            return true;
        };
        ll l = 0, r = queries.size(), ans = -1;
        while (l <= r) {
            ll m = (l + r) / 2;
            if (ok(m)) {
                r = m - 1;
                ans = m;
            } else {
                l = m + 1; 
            }
        }
        return ans;
    }
};",1454820507
Paul Chen,876pol,10,3658,cpp,"#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

using namespace std;
using namespace __gnu_pbds;

using ll = long long;
using pll = pair<ll, ll>;
template <class T>
using vec = vector<T>;
template <class T>
using indexed_set =
    tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

#define FOR(i, s, e) for (ll i = (ll)s; i < (ll)e; i++)
#define CFOR(i, s, e) for (ll i = (ll)s; i <= (ll)e; i++)
#define TRAV(a, c) for (const auto &a : c)
#define dbg(x) cerr << ""ln"" << __LINE__ << "": "" << #x << "" = "" << x << endl

template <class K, class V>
ostream &operator<<(ostream &out, const pair<K, V> &obj) {
    return out << ""("" << obj.first << "", "" << obj.second << "")"";
}

template <class T, class = decay_t<decltype(*begin(declval<T>()))>,
          class = enable_if_t<!is_same<T, string>::value>>
ostream &operator<<(ostream &out, const T &obj) {
    out << '[';
    for (auto it = obj.begin(); it != obj.end(); it++)
        out << &"", ""[2 * (it == obj.begin())] << *it;
    return out << ']';
}

class Solution {
public:
    int minDifference(vector<int>& nums) {
        ll n = nums.size();
        vec<ll> inds;
        FOR(i, 0, n) {
            if (nums[i] != -1) {
                inds.push_back(i);
            }
        }
        ll m = inds.size();
        if (m == 0) return 0;
        function<ll(ll)> ok1 = [&](ll x) {
            vec<pll> p;
            bool flag = false;
            FOR(i, 0, m - 1) {
                ll a = nums[inds[i]];
                ll b = nums[inds[i + 1]];
                if (a > b) swap(a, b);
                if (inds[i] + 1 == inds[i + 1]) {
                    if (abs(a - b) > x) return false;
                } else if (inds[i] + 2 == inds[i + 1]) {
                    p.push_back({b - x, a + x});
                    if (p.back().first > p.back().second) return false;
                } else {
                    flag = true; 
                    p.push_back({a - x, a + x}); 
                    p.push_back({b - x, b + x}); 
                }
            }
            if (m && inds[0] != 0) {
                ll a = nums[inds[0]];
                p.push_back({a - x, a + x}); 
            }
            if (m && inds[m - 1] != n - 1) {
                ll a = nums[inds[m - 1]];
                p.push_back({a - x, a + x}); 
            }
            ll o1 = 1e9 + 5, o2 = 0;
            TRAV(e, p) {
                o1 = min(o1, e.second);
                o2 = max(o2, e.first);
            }
            TRAV(e, p) {
                if (!((e.first <= o1 && o1 <= e.second) || (e.first <= o2 && o2 <= e.second))) {
                    return false; 
                }
            }
            if (o1 < o2 && flag && abs(o1 - o2) > x) return false;
            return true;
        };
        function<ll(ll)> ok2 = [&](ll x) {
            vec<pll> p;
            FOR(i, 0, m - 1) {
                ll a = nums[inds[i]];
                ll b = nums[inds[i + 1]];
                if (a > b) swap(a, b);
                if (inds[i] + 1 == inds[i + 1]) {
                    if (abs(a - b) > x) return false;
                } else if (inds[i] + 2 == inds[i + 1]) {
                    p.push_back({b - x, a + x});
                    if (p.back().first > p.back().second) return false;
                } else {
                    p.push_back({b - x, a + x});
                    if (p.back().first > p.back().second) return false;
                }
            }
            if (m && inds[0] != 0) {
                ll a = nums[inds[0]];
                p.push_back({a - x, a + x}); 
            }
            if (m && inds[m - 1] != n - 1) {
                ll a = nums[inds[m - 1]];
                p.push_back({a - x, a + x}); 
            }
            ll o1 = 1e9 + 5, o2 = 0;
            TRAV(e, p) {
                o1 = min(o1, e.second);
                o2 = max(o2, e.first);
            }
            TRAV(e, p) {
                if (!((e.first <= o1 && o1 <= e.second) || (e.first <= o2 && o2 <= e.second))) {
                    return false; 
                }
            }
            return true;
        };
        ll l = 0, r = 1e9 + 5, ans = 1e9 + 5;
        while (l <= r) {
            ll m = (l + r) / 2;
            if (ok1(m) || ok2(m)) {
                r = m - 1;
                ans = m;
            } else {
                l = m + 1;
            }
        }
        return ans;
    }
};",1454873559
misrx,misrx,11,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int n = nums.size();
        int count = 0;
        for (int curr = 0; curr < nums.size(); curr ++) {
            if (nums[curr] == 0) {
                for (int direction : {-1, 1}) {
                    vector<int> temp = nums;
                    int pos = curr;
                    while (pos >= 0 && pos < n) {
                        if (temp[pos] == 0) {
                            pos += direction;
                        } else if (temp[pos] > 0) {
                            temp[pos] -= 1;
                            direction = -direction;
                            pos += direction;
                        }
                    }
                    if (accumulate(temp.begin(), temp.end(), 0) == 0) count++;
                }
            }
        }
        return count;    
    }
};",1454808392
misrx,misrx,11,3639,cpp,"using ll = long long;
class Solution {
public:
    bool check(vector<int> &nums, vector<vector<int>> & queries, int k) {
        vector<ll> psa(nums.size());
        for (int i = 0; i < k; i++) {
            int l = queries[i][0];
            int r = queries[i][1];
            ll val = 1;
            psa[l] += val;
            if (r+1 < nums.size()) psa[r+1] -= val;
        }
        for (int i = 1; i < nums.size(); i++) {
            psa[i] += psa[i-1];
        }
        for (int i = 0; i < nums.size(); i++) {
            if ((ll)nums[i] > psa[i]) return false;
        }
        return true;
    }
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        return check(nums, queries, queries.size());
    }
};",1454817067
misrx,misrx,11,3643,cpp,"using ll = long long;
class Solution {
public:
    bool check(vector<int> &nums, vector<vector<int>> & queries, int k) {
        vector<ll> psa(nums.size());
        for (int i = 0; i < k; i++) {
            int l = queries[i][0];
            int r = queries[i][1];
            ll val = queries[i][2];
            psa[l] += val;
            if (r+1 < nums.size()) psa[r+1] -= val;
        }
        for (int i = 1; i < nums.size(); i++) {
            psa[i] += psa[i-1];
        }
        for (int i = 0; i < nums.size(); i++) {
            if ((ll)nums[i] > psa[i]) return false;
        }
        return true;
    }

    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int l = 0;
        int r = queries.size();
        int ans = -1;
        while (l <= r) {
            int m = (l+r)/2;
            if (check(nums, queries, m)) {
                ans = m;
                r = m-1;
            } else {
                l = m+1;
            }
        }
        return ans;
    }
};",1454815935
misrx,misrx,11,3658,cpp,"class Solution {
public:
    int minDifference(vector<int>& nums) {
        int n = nums.size();
        set<int> touch;
        int l = 0;
        for (int i = 0; i < n; i++) {
            if (nums[i] != -1) {
                if (i > 0 && nums[i-1] == -1) touch.insert(nums[i]);
                if (i < n-1 && nums[i+1] == -1) touch.insert(nums[i]);
            }
            if (i > 0 && nums[i] != -1 && nums[i-1] != -1) {
                l = max(l, abs(nums[i-1]-nums[i]));
            }
        }
        vector<int> bad(touch.begin(), touch.end());
        int r = 1e9;
        int ans = 1e9;
        while (l <= r) {
            int m = (l+r)/2;
            int x = 2e9;
            int y = -2e9;
            for (int e : bad) {
                x = min(e+m, x);
                y = max(e-m, y);
            }
            if (x >= y) {
                ans = m;
                r = m-1;
                continue;
            }
            // cout << m << "" "" << x << "" "" << y << ""\n"";
            vector<vector<int>> dp(n, vector<int>(2));
            dp[0][0] = 1;
            dp[0][1] = 1;
            for (int i = 1; i < n; i++) {
                if (nums[i] == -1) {
                    if (nums[i-1] == -1) {
                        // use x
                        dp[i][0] = dp[i-1][0];
                        dp[i][0] |= (y-x <= m) & dp[i-1][1];
                        
                        // use k
                        dp[i][1] = dp[i-1][1];
                        dp[i][1] |= (y-x <= m) & dp[i-1][0];
                    } else {
                        int lastpos = dp[i-1][0] | dp[i-1][1];
                        
                        // use x
                        dp[i][0] = lastpos & (abs(x-nums[i-1]) <= m);
                        
                        //use y
                        dp[i][1] = lastpos & (abs(y-nums[i-1]) <= m);
                    }
                } else {
                    if (nums[i-1] == -1) {
                        dp[i][0] = dp[i][1] = (dp[i-1][0] & abs(x-nums[i]) <= m) | 
                                                (dp[i-1][1] & abs(y-nums[i]) <= m);
                    } else {
                        dp[i][0] = dp[i][1] = dp[i-1][0] | dp[i-1][1];
                    }
                    
                }
            }
            if (dp[n-1][0] || dp[n-1][1]) {
                ans = m;
                r = m-1;
            } else {
                l = m+1;
            }
        }
        return ans;
    }
};",1454890285
sveng101,sveng101,12,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        #tot = sum(nums)
        #curr = 0
        #for i, num in enumerate(nums):
        #    curr += num
        #    if curr
        
        n = len(nums)
        
        def process(idx0: int, dec: bool) -> bool:
            nums2 = list(nums)
            dec2 = dec
            idx = idx0 + (-1 if dec2 else 1)
            while 0 <= idx and idx < n:
                if nums2[idx]:
                    nums2[idx] -= 1
                    dec2 = not dec2
                idx += (-1 if dec2 else 1)
            #print(idx0, dec)
            #print(nums2)
            return not any(nums2)
        res = 0
        for i, num in enumerate(nums):
            if num: continue
            res += process(i, False) + process(i, True)

        return res",1454812511
sveng101,sveng101,12,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        n = len(nums)
        delta_arr = [0] * (n + 1)
        for q in queries:
            delta_arr[q[0]] += 1
            delta_arr[q[1] + 1] -= 1
        #print(delta_arr)
        curr = 0
        for i in range(n):
            curr += delta_arr[i]
            if nums[i] > curr: return False
        return True
            ",1454819117
sveng101,sveng101,12,3643,python3,"class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        n = len(nums)
        m = len(queries)
        def canManage(k: int) -> bool:
            delta_arr = [0] * (n + 1)
            for j in range(k):
                q = queries[j]
                delta_arr[q[0]] += q[2]
                delta_arr[q[1] + 1] -= q[2]
            #print(delta_arr)
            curr = 0
            for i in range(n):
                curr += delta_arr[i]
                if nums[i] > curr: return False
            return True

        lft, rgt = 0, m + 1
        while lft < rgt:
            mid = lft + ((rgt - lft) >> 1)
            #print(n, mid)
            if canManage(mid):
                rgt = mid
            else: lft = mid + 1
        return lft if lft <= m else -1",1454831198
sveng101,sveng101,12,3658,python3,"class Solution:
    def minDifference(self, nums: List[int]) -> int:
        n = len(nums)
        lb = 0
        mx = -1
        mn = float(""inf"")
        for i in range(n - 1):
            if nums[i] == -1 or nums[i + 1] == -1:
                if nums[i] != -1: num = nums[i]
                elif nums[i + 1] != -1: num = nums[i + 1]
                else: continue
                mx = max(mx, num)
                mn = min(mn, num)
                continue
            lb = max(lb, abs(nums[i + 1] - nums[i]))
        if mx < mn: return lb
        #print(mn, mx)
        #print(lb)
        missing_rngs = []
        rng = [float(""inf""), -float(""inf"")]
        for i, num in enumerate(nums):
            if num == -1:
                if not missing_rngs or len(missing_rngs[-1]) == 2:
                    missing_rngs.append([i])
                continue
            if missing_rngs and len(missing_rngs[-1]) == 1:
                missing_rngs[-1].append(i)
            rng[0] = min(rng[0], num)
            rng[1] = max(rng[1], num)
        if missing_rngs and len(missing_rngs[-1]) == 1:
            missing_rngs[-1].append(n)
        #print(missing_rngs)
        #print(rng)
        n_missing_rngs = len(missing_rngs)
        if not n_missing_rngs: return lb
        
        def canManage(diff: int) -> bool:
            pair = (mn + diff, mx - diff)
            if pair[0] >= pair[1]: return True
            can_transition = (pair[1] - pair[0]) <= diff
            for rng in missing_rngs:
                opts = set(pair)
                if rng[0] > 0:
                    num1 = nums[rng[0] - 1]
                    opts2 = set(opts)
                    for opt in opts2:
                        if abs(num1 - opt) > diff:
                            opts.remove(opt)
                    if not opts: return False
                if rng[1] - rng[0] > 1 and can_transition:
                    opts = set(pair)
                if rng[1] < n:
                    num2 = nums[rng[1]]
                    opts2 = set(opts)
                    for opt in opts2:
                        if abs(num2 - opt) > diff:
                            opts.remove(opt)
                    if not opts: return False
            return True

        lft, rgt = lb, ((mx - mn) >> 1) + 1
        while lft < rgt:
            mid = lft + ((rgt - lft) >> 1)
            if canManage(mid):
                rgt = mid
            else: lft = mid + 1
        
        return lft",1454884652
Shayan_Jahan,Shayan_Jahan,13,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int sum = 0, n = nums.size();
        for (int i = 0; i < n; i++) {
            sum += nums[i];
        }

        int ans = 0, cur = 0;
        for (int i = 0; i < n; i++) {
            if (nums[i] > 0);
            else if (cur == sum - cur) ans += 2;
            else if (abs(sum - 2 * cur) == 1) ans++;

            if (i < n) cur += nums[i];
        }

        return ans;
    }
};",1454810800
Shayan_Jahan,Shayan_Jahan,13,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        vector<int> ps(n + 1);

        for (auto p: queries) {
            ps[p[0]]++;
            ps[p[1] + 1]--;
        }

        for (int i = 0; i < n; i++) {
            ps[i + 1] += ps[i];
            if (ps[i] < nums[i]) return false;
        }

        return true;
    }
};",1454818131
Shayan_Jahan,Shayan_Jahan,13,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size(), q = queries.size();

        int low = -1, high = q + 1;
        while (high - low > 1) {
            int mid = (low + high) / 2;

            vector <long long> ps(n + 1);

            for (int i = 0; i < mid; i++) {
                auto p = queries[i];
                ps[p[0]] += p[2];
                ps[p[1] + 1] -= p[2];
            }

            bool bad = false;
            for (int i = 0; i < n; i++) {
                ps[i + 1] += ps[i];
                if (ps[i] < nums[i]) bad = true;
            }
            if (bad) low = mid;
            else high = mid;
        }

        if (high == q + 1) high = -1;
        return high;
    }
};",1454826527
Shayan_Jahan,Shayan_Jahan,13,3658,cpp,"class Solution {
public:
    bool in(pair<int, int> p, int x) {
        return p.first <= x && x <= p.second;
    }

    pair<int, int> getPair(vector<pair<int, int>> &vec) {
        if (!vec.size()) return {1, 1};
        
        bool bad = false;
        int x = 0, y = 1e9 + 10;
        for (auto p: vec) {
            if (p.first > p.second) return {-1, -1};
            x = max(x, p.first);
            y = min(y, p.second);
        }

        // cout << '\t' << x << ' ' << y << '\n';
        
        for (auto p: vec) {
            if (!in(p, x) && !in(p, y)) return {-1, -1};
        }        

        // // cout << '\t' << x << ' ' << y << '\n';
        
        if (y >= x) return {x, x};

        return {x, y};
    }

    int minDifference(vector<int>& nums) {
        int n = nums.size();
        int low = -1, high = 1e9 + 10;

        vector<int> a = nums;

        while (high - low > 1) {
            bool bad = false;

            int mid = (low + high) / 2;
        
            for (int i = 0; i < n - 1; i++) {
                if (a[i] != -1 && a[i + 1] != -1 && abs(a[i + 1] - a[i]) > mid) {
                    bad = true;
                    break;
                }
            }

            // x - y <= mid

            bool good = false;
            vector <pair<int, int>> vec;
            for (int i = 0; i < n; i++) {
                if (a[i] != -1) continue;

                int mn = -1, mx = 1e9 + 20;
                
                if (i && a[i - 1] != -1) {
                    if (i + 1 < n && a[i + 1] != -1) {
                        mn = max(a[i - 1], a[i + 1]) - mid;
                        mx = min(a[i - 1], a[i + 1]) + mid;
                    }
                    else {
                        mn = a[i - 1] - mid;
                        mx = a[i - 1] + mid;
                    }
                }
                else if (i + 1 < n && a[i + 1] != -1) {
                    mn = a[i + 1] - mid;
                    mx = a[i + 1] + mid;
                }

                vec.push_back({mn, mx});
            }

            // for (auto p: vec) cout << p.first << ' ' << p.second << '\n';
            
            pair<int, int> p = getPair(vec);

            // cout << p.first << ' ' << p.second << '\n';
        
            if (p.first != -1 && abs(p.second - p.first) <= mid) {
                good = true;
            }

            // x - y > mid

            vec.clear();
        
            int lst = -1;
            for (int i = 0; i < n; i++) {
                if (a[i] != -1) {
                    lst = a[i];
                    continue;
                }
                if (i + 1 < n && a[i + 1] == -1) continue;

                // cout << ' ' << i << ' ' << lst << '\n';
                
                int mn = -1, mx = 1e9 + 20;
                
                if (lst != -1) {
                    if (i + 1 < n) {
                        mn = max(lst, a[i + 1]) - mid;
                        mx = min(lst, a[i + 1]) + mid;
                    }
                    else {
                        mn = lst - mid;
                        mx = lst + mid;
                    }
                }
                else if (i + 1 < n){
                    mn = a[i + 1] - mid;
                    mx = a[i + 1] + mid;
                }

                vec.push_back({mn, mx});
            }

            p = getPair(vec);

            // for (auto p: vec) cout << p.first << ' ' << p.second << '\n';
            
            // cout << p.first << ' ' << p.second << '\n';
            
            if (p.first != -1) {
                good = true;
            }

            if (bad || !good) low = mid;
            else high = mid;
        }
        return high;
    }
};",1454885315
lukewu28,lukewu28,14,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        a = sum(nums)
        re = 0
        cur = 0
        for i in nums:
            if(i == 0):
                if(cur + cur == a): re+= 2
                elif(cur + cur == a - 1 or cur + cur == a + 1): re += 1
            else: cur += i

        return re;",1454806498
lukewu28,lukewu28,14,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        vector<int> g(n + 1, 0);
        for(auto x: queries){
            g[x[0]]++;
            g[x[1] + 1]--;
        }
        for(int i = 1; i <= n; i++) g[i] += g[i - 1];

        for(int i = 0; i < n; i++){
            if(g[i] < nums[i]) return false; 
        }
        return true;
    }
};",1454808254
lukewu28,lukewu28,14,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int l = 0, r = queries.size();
        long long n = nums.size();
        while(l < r){
            int m = (l + r) / 2;
            vector<long long> g(n + 1, 0);
            for(int i = 0 ; i < m; i++){
                auto x = queries[i];
                g[x[0]] += x[2];
                g[x[1] + 1] -= x[2];
            }
            for(int i = 1; i <= n; i++) g[i] += g[i - 1];

            bool ok = 1;
            for(int i = 0; i < n; i++){
                if(g[i] < nums[i]) ok = 0; 
            }
            if(ok) r = m;
            else l = m + 1;
        }


        vector<long long> g(n + 1, 0);
        int m = l;
            for(int i = 0 ; i < m; i++){
                auto x = queries[i];
                g[x[0]] += x[2];
                g[x[1] + 1] -= x[2];
            }
            for(int i = 1; i <= n; i++) g[i] += g[i - 1];

            bool ok = 1;
            for(int i = 0; i < n; i++){
                if(g[i] < nums[i]) ok = 0; 
            }
            if(ok) r = m;
            else l = m + 1;

        if(ok) return l;
        else return -1;
    }
};",1454814540
lukewu28,lukewu28,14,3658,cpp,"class Solution {
public:
    int minDifference(vector<int>& nums) {
        int ll = 0;
        int last = -1;
        int n = nums.size();
        while(ll < n && nums[ll] == -1){
            ll++;
        }
        if(ll == n) return 0;
        vector<int> a = nums;
        vector<array<int, 3>> segs;
        vector<int> points;
        if(ll) segs.push_back({nums[ll], nums[ll], ll});

        int cnt = 0;
        int re = 0;
        int mn = 1e9 + 1, mx = 0;
        for(int i = ll; i < n; i++){
            if(a[i] == -1){
                cnt++;
            }
            else{
                if(last != -1 && cnt){
                    int cur = a[i];
                    if(last > cur) swap(last, cur);
                    segs.push_back({last, cur, cnt});
                }
                if(last != -1 && cnt == 0){
                    re = max(re, abs(a[i] - last));
                }
                cnt = 0;
                last = a[i];
            }
        }

        for(int i = 0; i < n; i++){
            bool ok = 0;
            if(a[i] != -1){
                if(i > 0 && a[i - 1] == -1) ok = 1;
                if(i < n - 1 && a[i + 1] == -1) ok =1;
            }
            if(ok) points.push_back(a[i]);
        }
        
        if(a[n - 1] == -1){
            segs.push_back({last, last, cnt});
        }

        if(points.size() <= 1) return re;

        sort(points.begin(), points.end());
        
        int mid = (points[0] + points.back() + 1) / 2;
        int l = re, r = 1e9;
        int ind = lower_bound(points.begin(), points.end(), mid) - points.begin();
        if(ind == 0) return re;
        while(l < r){
            int m = (l + r) / 2;
            int lr = points[0] + m;
            int ll = points[ind - 1] - m;
            int rr = points[ind] + m;
            int rl = points.back() - m;

            if(lr < ll || rr < rl) {
                l = m + 1;
                continue;
            }

            int x = lr;
            int y = rl;

            bool ok = 1;
            for(auto s: segs){
                if(s[2] > 1){
                    int dsxa = abs(s[0] - x);
                    int dsxb = abs(s[1] - x);
                    int dsya = abs(s[0] - y);
                    int dsyb = abs(s[1] - y);
                    
                    int d = min(max(dsxa, dsxb), max(dsya, dsyb));

                    d = min(d, max(abs(x -y), max(dsxa, dsyb)));
                    if(d > m) ok = 0;
                    
                }
                else{
                    int dsxa = abs(s[0] - x);
                    int dsxb = abs(s[1] - x);
                    int dsya = abs(s[0] - y);
                    int dsyb = abs(s[1] - y);
                    
                    int d = min(max(dsxa, dsxb), max(dsya, dsyb));

                    if(d > m) ok = 0;
                }
            }

            if(ok) r = m;
            else l = m + 1;
        }
        return l;
    }
};",1454888120
Maruzensky,Maruzensky,16,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        total = sum(nums)
        
        left = 0
        answer = 0
        
        for x in nums:
            left += x
            if x == 0:
                right = total - left
                if left == right:
                    answer += 2
                elif abs(left - right) == 1:
                    answer += 1
                    
        return answer",1454807575
Maruzensky,Maruzensky,16,3639,python3,"from collections import Counter

class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        n = len(nums)
        ctr = Counter()
        
        for left, right in queries:
            ctr[left] += 1
            ctr[right + 1] -= 1
            
        psum = 0
        for i, x in enumerate(nums):
            psum += ctr[i]
            if x > psum:
                return False
            
        return True",1454810557
Maruzensky,Maruzensky,16,3643,python3,"from collections import Counter

class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        n = len(nums)
        ctr = Counter()
        
        for left, right, val in queries:
            ctr[left] += val
            ctr[right + 1] -= val
            
        psum = 0
        for i, x in enumerate(nums):
            psum += ctr[i]
            if x > psum:
                return -1
            
        ptr_min, ptr_max = 0, len(queries)
        while ptr_min != ptr_max:
            ptr = (ptr_min + ptr_max) // 2
            
            ctr = Counter()

            for left, right, val in queries[:ptr]:
                ctr[left] += val
                ctr[right + 1] -= val

            is_valid = True
            psum = 0
            for i, x in enumerate(nums):
                psum += ctr[i]
                if x > psum:
                    is_valid = False
                    break
                    
            if is_valid:
                ptr_max = ptr
            else:
                ptr_min = ptr + 1
                
        return ptr_min
",1454817316
Maruzensky,Maruzensky,16,3658,python3,"class Solution:
    def minDifference(self, nums: List[int]) -> int:
        n = len(nums)
        
        gap = 0
        has_m1, has_m2 = False, False
        for x, y in zip(nums, nums[1:]):
            if x != -1 and y != -1:
                gap = max(gap, abs(y - x))
            elif x == -1 and y == -1:
                has_m2 = True
                has_m1 = True
            else:
                has_m1 = True
                
        if not has_m1:
            return gap
        
        if max(nums) < 0:
            return 0
        
        run = 0
        n1, n2 = [], []
        for x in nums:
            if x == -1:
                run += 1
            else:
                run = 0
                
            if run <= 1:
                n1.append(x)
            if run <= 2:
                n2.append(x)
                
        # allow x-y bond
        ptr_min, ptr_max = 0, 10**9
        while ptr_min != ptr_max:
            ptr = (ptr_min + ptr_max) // 2
            need = []
            is_possible = True
            
            for i, x in enumerate(n2):
                if x == -1:
                    ask = []
                    if i != 0:
                        y = n2[i - 1]
                        if y != -1:
                            ask.append([y - ptr, y + ptr])
                    if i < len(n2) - 1:
                        z = n2[i + 1]
                        if z != -1:
                            ask.append([z - ptr, z + ptr])
                            
                    if len(ask) == 1:
                        need.append(ask[0])
                    elif len(ask) == 2:
                        i1, i2 = ask
                        left, right = max(i1[0], i2[0]), min(i1[1], i2[1])
                        
                        if left > right:
                            is_possible = False
                            break
                            
                        else:
                            need.append([left, right])
                            
            if is_possible:
                left = min(r for _, r in need)
                right = max(l for l, _ in need)
                
                if right - left > ptr:
                    is_possible = False
                else:
                    if all(l <= left <= r or l <= right <= r for l, r in need):
                        is_possible = True
                    else:
                        is_possible = False
                        
            if is_possible:
                ptr_max = ptr
            else:
                ptr_min = ptr + 1
                
        case_1 = ptr_max
        
        # disallow x-y bond
        ptr_min, ptr_max = 0, 10**9
        while ptr_min != ptr_max:
            ptr = (ptr_min + ptr_max) // 2
            need = []
            is_possible = True
            
            for i, x in enumerate(n1):
                if x == -1:
                    ask = []
                    if i != 0:
                        y = n1[i - 1]
                        if y != -1:
                            ask.append([y - ptr, y + ptr])
                    if i < len(n1) - 1:
                        z = n1[i + 1]
                        if z != -1:
                            ask.append([z - ptr, z + ptr])
                            
                    if len(ask) == 1:
                        need.append(ask[0])
                    elif len(ask) == 2:
                        i1, i2 = ask
                        left, right = max(i1[0], i2[0]), min(i1[1], i2[1])
                        
                        if left > right:
                            is_possible = False
                            break
                            
                        else:
                            need.append([left, right])
                            
            if is_possible:
                left = min(r for _, r in need)
                right = max(l for l, _ in need)
                
                if all(l <= left <= r or l <= right <= r for l, r in need):
                    is_possible = True
                else:
                    is_possible = False
                        
            if is_possible:
                ptr_max = ptr
            else:
                ptr_min = ptr + 1
                
        case_2 = ptr_max
        
        return max(min(case_1, case_2), gap)
        
        ",1454890939
uwi,uwi,18,3616,java,"	class Solution {
		public int countValidSelections(int[] nums) {
			int n = nums.length;
			int ans = 0;
			for(int i = 0;i < n;i++){
				if(nums[i] == 0){
					for(int j = -1;j <= 1;j+=2){
						int[] a = Arrays.copyOf(nums, n);
						int cur = i, dir = j;
						while(cur >= 0 && cur < n){
							if(a[cur] == 0){
								cur += dir;
							}else{
								a[cur]--;
								dir = -dir;
								cur += dir;
							}
						}
						boolean az = true;
						for(int k = 0;k < n;k++){
							if(a[k] != 0){
								az = false;
								break;
							}
						}
						if(az)ans++;
					}
				}
			}
			return ans;
		}
	}
	//
",1454807191
uwi,uwi,18,3639,java,"class Solution {
    public boolean isZeroArray(int[] nums, int[][] queries) {
        int n = nums.length;
        int[] imos = new int[n+1];
        for(int[] q : queries){
            imos[q[0]]++;
            imos[q[1]+1]--;
        }
        for(int i = 0;i < n;i++){
            imos[i+1] += imos[i];
        }
        for(int i = 0;i < n;i++){
            if(nums[i] <= imos[i]){
                
            }else{
                return false;
            }
        }
        return true;
    }
}",1454808873
uwi,uwi,18,3643,java,"	class Solution {
		public int minZeroArray(int[] nums, int[][] queries) {
			int n = nums.length;
			int low = -1, high = queries.length+1;
			while(high - low > 1){
				int h = high+low>>1;
				if(ok(nums, queries, h)){
					high = h;
				}else{
					low = h;
				}
			}
			return high > queries.length ? -1 : high;
		}

		boolean ok(int[] nums, int[][] queries, int h) {
			int n = nums.length;
			long[] imos = new long[n + 1];
			for(int i = 0;i < h;i++){
				int[] q = queries[i];
				imos[q[0]] += q[2];
				imos[q[1] + 1] -= q[2];
			}
			for (int i = 0; i < n; i++) {
				imos[i + 1] += imos[i];
			}
			for (int i = 0; i < n; i++) {
				if (nums[i] > imos[i]) return false;
			}
			return true;
		}
	}
",1454815910
uwi,uwi,18,3658,java,"	class Solution {
		public int minDifference(int[] nums) {
			List<Integer> ex = new ArrayList<>();
			for(int i = 0;i < nums.length;i++){
				if(nums[i] != -1){
					ex.add(i);
				}
			}
			if(ex.size() <= 1)return 0;
			int n = nums.length;

			// V x : |V-x|
			// V x+ V': max(|V'-x|, |V-x|)
			// V x+ y V': max(|V'-y|, |V-x|, |y-x|)


			long base = 0;
			for(int i = 0;i < ex.size()-1;i++){
				if(ex.get(i+1) - ex.get(i) == 1){
					base = Math.max(base, Math.abs(nums[ex.get(i)] - nums[ex.get(i+1)]));
				}
			}

//			tr(ok(nums, ex, 1));
			long low = base-1, high = 1000000007;
			while(high - low > 1){
				long h = high+low>>1;
				boolean res = ok(nums, ex, h);
				if(res){
					high = h;
				}else{
					low = h;
				}
			}
			return (int)high;
		}

		boolean ok(int[] nums, List<Integer> ex, long h)
		{
			int min = Integer.MAX_VALUE;
			if(ex.get(0) > 0){
				min = Math.min(min, (int)(nums[ex.get(0)] + h));
			}
			if(ex.get(ex.size()-1) < nums.length-1){
				min = Math.min(min, (int)(nums[ex.get(ex.size()-1)] + h));
			}
			for(int i = 0;i < ex.size()-1;i++){
				if(ex.get(i+1) - ex.get(i) > 1) {
					min = Math.min(min, (int) (nums[ex.get(i)] + h));
					min = Math.min(min, (int) (nums[ex.get(i+1)] + h));
				}
			}
			long x = min;
//			tr(x);

			long xmin = Long.MAX_VALUE;
			if(ex.get(0) > 0 && nums[ex.get(0)] > x + h){
				xmin = Math.min(xmin, nums[ex.get(0)] + h);
			}
			if(ex.get(ex.size()-1) < nums.length-1 && nums[ex.get(ex.size()-1)] > x + h){
				xmin = Math.min(xmin, nums[ex.get(ex.size()-1)] + h);
			}
			for(int i = 0;i < ex.size()-1;i++){
				if(ex.get(i+1) - ex.get(i) == 2){
					if(Math.abs(nums[ex.get(i)] - x) > h || Math.abs(nums[ex.get(i+1)] - x) > h) {
						xmin = Math.min(xmin, Math.min(nums[ex.get(i)], nums[ex.get(i+1)]) + h);
					}
				}else if(ex.get(i+1) - ex.get(i) > 2) {
					int l = nums[ex.get(i)], r = nums[ex.get(i+1)];
					if(Math.abs(l - x) <= h && Math.abs(r - x) <= h){
						continue;
					}else if(l <= x && r > x+h){
						xmin = Math.min(xmin, x + h);
					}else if(l > x+h && r <= x) {
						xmin = Math.min(xmin, x + h);
					}else {
						xmin = Math.min(xmin, l + h);
						xmin = Math.min(xmin, r + h);
					}
				}
			}
			if(xmin == Long.MAX_VALUE)return true;
			long y = xmin;
//			tr(y);

			if(ex.get(0) > 0){
				if(Math.abs(x - nums[ex.get(0)]) <= h || Math.abs(y - nums[ex.get(0)]) <= h){
				}else{
					return false;
				}
			}
			if(ex.get(ex.size()-1) < nums.length-1){
				if(Math.abs(x - nums[ex.get(ex.size()-1)]) <= h || Math.abs(y - nums[ex.get(ex.size()-1)]) <= h){
				}else{
					return false;
				}
			}
			for(int i = 0;i < ex.size()-1;i++){
				int l = nums[ex.get(i)], r = nums[ex.get(i+1)];
				if(ex.get(i+1) - ex.get(i) == 2){
					if(Math.abs(l - y) <= h && Math.abs(r - y) <= h) {
						continue;
					}
					if(Math.abs(l - x) <= h && Math.abs(r - x) <= h) {
						continue;
					}
					return false;
				}else if(ex.get(i+1) - ex.get(i) > 2) {
					if(Math.abs(l - y) <= h && Math.abs(r - y) <= h) {
						continue;
					}
					if(Math.abs(l - x) <= h && Math.abs(r - x) <= h) {
						continue;
					}
					if(Math.abs(l - y) <= h && Math.abs(r - x) <= h && Math.abs(y - x) <= h) {
						continue;
					}
					if(Math.abs(l - x) <= h && Math.abs(r - y) <= h && Math.abs(y - x) <= h) {
						continue;
					}
					return false;
				}
			}
			return true;
		}
	}
",1454894222
megaspazz,megaspazz,19,3616,java,"class Solution {
    public int countValidSelections(int[] nums) {
        final int N = nums.length;
        
        long[] sum = new long[N + 1];
        for (int i = 0; i < N; ++i) {
            sum[i + 1] = sum[i] + nums[i];
        }
        
        int ans = 0;
        for (int i = 0; i < N; ++i) {
            if (nums[i] != 0) {
                continue;
            }
            long diff = Math.abs(sum[N] - (sum[i] << 1));
            if (diff == 0) {
                ans += 2;
            } else if (diff == 1) {
                ++ans;
            }
        }
        return ans;
    }
    
//     private static boolean simulate(int[] nums, int dir) {
//         final int N = nums.length;
//         final int[] A = Arrays.copyOf(nums, N);
        
        
//     }
}",1454811434
megaspazz,megaspazz,19,3639,java,"class Solution {
    public boolean isZeroArray(int[] nums, int[][] queries) {
        final int N = nums.length;
        long[] delt = new long[N + 1];
        
        for (int[] q : queries) {
            final int L = q[0];
            final int R = q[1];
            --delt[L];
            ++delt[R + 1];
        }
        
        long curr = 0;
        for (int i = 0; i < N; ++i) {
            curr += delt[i];
            nums[i] += curr;
            
            if (nums[i] > 0) {
                return false;
            }
        }
        return true;
    }
}",1454816250
megaspazz,megaspazz,19,3643,java,"class Solution {
    public int minZeroArray(int[] nums, int[][] queries) {
        final int N = nums.length;
        final int Q = queries.length;
        
        int ans = BinarySearch.firstThat(0, Q + 1, new BinarySearch.IntCheck() {
            @Override
            public boolean valid(int k) {
                long[] delt = new long[N + 1];

                for (int q = 0; q < k; ++q) {
                    final int L = queries[q][0];
                    final int R = queries[q][1];
                    final int val = queries[q][2];

                    delt[L] -= val;
                    delt[R + 1] += val;
                }

                long curr = 0;
                for (int i = 0; i < N; ++i) {
                    curr += delt[i];

                    if (nums[i] + curr > 0) {
                        return false;
                    }
                }
                return true;
            }
        });
        if (ans < 0 || ans > Q) {
            return -1;
        }
        return ans;
    }
    
	/**
	 * Generic binary search to find the first or last value resulting in a matching condition.
	 */
	// EXAMPLE USAGE (find insertion index in sorted array `A`):
	/*
		int insertionIndex = BinarySearch.firstThat(0, A.length, new BinarySearch.IntCheck() {
			@Override
			public boolean valid(int index) {
				return A[index] > mid;
			}
		});
	 */
	public static class BinarySearch {
		// Finds the left-most value that satisfies the IntCheck in the range [L, R).
		// It will return R if the nothing in the range satisfies the check.
		public static int firstThat(int L, int R, IntCheck check) {
			while (L < R) {
				int M = (L >> 1) + (R >> 1) + (L & R & 1);
				if (check.valid(M)) {
					R = M;
				} else {
					L = M + 1;
				}
			}
			return L;
		}

		// Finds the right-most value that satisfies the IntCheck in the range [L, R).
		// It will return L - 1 if nothing in the range satisfies the check.
		public static int lastThat(int L, int R, IntCheck check) {
			int firstValue = firstThat(L, R, new IntCheck() {
				@Override
				public boolean valid(int value) {
					return !check.valid(value);
				}
			});
			return firstValue - 1;
		}

		// Finds the left-most value that satisfies the LongCheck in the range [L, R).
		public static long firstThat(long L, long R, LongCheck check) {
			while (L < R) {
				long M = (L >> 1) + (R >> 1) + (L & R & 1);
				if (check.valid(M)) {
					R = M;
				} else {
					L = M + 1;
				}
			}
			return L;
		}

		// Finds the right-most value that satisfies the IntCheck in the range [L, R).
		// It will return L - 1 if nothing in the range satisfies the check.
		public static long lastThat(long L, long R, LongCheck check) {
			long firstValue = firstThat(L, R, new LongCheck() {
				@Override
				public boolean valid(long value) {
					return !check.valid(value);
				}
			});
			return firstValue - 1;
		}

		public static interface LongCheck {
			public boolean valid(long value);
		}

		public static interface IntCheck {
			public boolean valid(int value);
		}
	}
}",1454823533
megaspazz,megaspazz,19,3658,java,"class Solution {
    private static final int INF = 1_000_111_000;
    
    public int minDifference(int[] nums) {
        final int N = nums.length;
        
        final Range[] A = new Range[N];
        for (int i = 0; i < N; ++i) {
            if (nums[i] == -1) {
                A[i] = Range.ALL;
            } else {
                A[i] = new Range(nums[i], nums[i]);
            }
        }
        
        long ans = BinarySearch.firstThat(0, 1_000_000_001, new BinarySearch.LongCheck() {
            @Override
            public boolean valid(long value) {
                ArrayList<Range> ranges = new ArrayList<>();
                for (int i = 0; i < N; ++i) {
                    if (nums[i] != -1) {
                        continue;
                    }
                    
                    Range left = get(A, i - 1);
                    Range right = get(A, i + 1);
                    if (left == Range.ALL && right == Range.ALL) {
                        continue;
                    }
                    
                    Range r = Range.merge(left.extend(value), right.extend(value));
                    if (!r.isValid()) {
                        // System.out.format(""value = %d, failed at i = %d, with r = %s%n"", value, i, r);
                        return false;
                    }
                    ranges.add(r);
                }
                
                // System.out.format(""value = %d, ranges = %s%n"", value, ranges);
                
                // if (ranges.isEmpty()) {
                //     return true;
                // }
                
                Range[] B = ranges.toArray(new Range[0]);
                
                Arrays.sort(B, new Comparator<Range>() {
                    @Override
                    public int compare(Range a, Range b) {
                        return Long.compare(a.L, b.L);
                    }
                });
                
                long xLo = get(B, 0).R;
                for (int i = 1; i < B.length; ++i) {
                    if (B[i].L > xLo) {
                        break;
                    }
                    xLo = Math.min(xLo, B[i].R);
                }
                
                Arrays.sort(B, new Comparator<Range>() {
                    @Override
                    public int compare(Range a, Range b) {
                        return Long.compare(b.R, b.R);
                    }
                });
                
                long xHi = get(B, 0).L;
                for (int i = 1; i < B.length; ++i) {
                    if (B[i].R < xHi) {
                        break;
                    }
                    xHi = Math.max(xHi, B[i].L);
                }
                
                boolean[] withOrig = new boolean[N];
                boolean[] withXLo = new boolean[N];
                boolean[] withXHi = new boolean[N];
                if (A[0] == Range.ALL) {
                    withXLo[0] = true;
                    withXHi[0] = true;
                } else {
                    withOrig[0] = true;
                }
                for (int i = 1; i < N; ++i) {
                    if (A[i] == Range.ALL) {
                        if (withOrig[i - 1] && Math.abs(xLo - nums[i - 1]) <= value) {
                            withXLo[i] = true;
                        } else if (withXLo[i - 1]) {
                            withXLo[i] = true;
                        } else if (withXHi[i - 1] && Math.abs(xLo - xHi) <= value) {
                            withXLo[i] = true;
                        }
                        
                        if (withOrig[i - 1] && Math.abs(xHi - nums[i - 1]) <= value) {
                            withXHi[i] = true;
                        } else if (withXHi[i - 1]) {
                            withXHi[i] = true;
                        } else if (withXLo[i - 1] && Math.abs(xHi - xLo) <= value) {
                            withXHi[i] = true;
                        }
                    } else {
                        if (withOrig[i - 1] && Math.abs(nums[i] - nums[i - 1]) <= value) {
                            withOrig[i] = true;
                        } else if (withXLo[i - 1] && Math.abs(nums[i] - xLo) <= value) {
                            withOrig[i] = true;
                        } else if (withXHi[i - 1] && Math.abs(nums[i] - xHi) <= value) {
                            withOrig[i] = true;
                        }
                    }
                }
                return withXLo[N - 1] || withXHi[N - 1] || withOrig[N - 1];
                
//                 boolean hasDouble = false;
//                 for (int i = 1; i < N; ++i) {
//                     if (A[i] == Ranges.INF && A[i - 1] == Ranges.INF) {
//                         hasDouble = true;
//                         break;
//                     }
//                 }
                
//                 for (int i = 0; i < N; ++i) {
//                     if (A[i] != Ranges.INF) {
                        
//                     }
//                 }
                
//                 if (hasDouble) {
                    
//                 }
                
//                 return false;
            }
        });
        return (int) ans;
    }
    
    private static Range get(Range[] A, int i) {
        if (i < 0 || i >= A.length) {
            return Range.ALL;
        }
        return A[i];
    }
    
    private static record Range(long L, long R) {
        public static final Range ALL = new Range(-INF, INF);
        
        public boolean isValid() {
            return L <= R;
        }
        
        public Range extend(long amount) {
            return new Range(L - amount, R + amount);
        }
        
        public static Range merge(Range a, Range b) {
            return new Range(Math.max(a.L, b.L), Math.min(a.R, b.R));
        }
    }
    
	/**
	 * Generic binary search to find the first or last value resulting in a matching condition.
	 */
	// EXAMPLE USAGE (find insertion index in sorted array `A`):
	/*
		int insertionIndex = BinarySearch.firstThat(0, A.length, new BinarySearch.IntCheck() {
			@Override
			public boolean valid(int index) {
				return A[index] > mid;
			}
		});
	 */
	public static class BinarySearch {
		// Finds the left-most value that satisfies the IntCheck in the range [L, R).
		// It will return R if the nothing in the range satisfies the check.
		public static int firstThat(int L, int R, IntCheck check) {
			while (L < R) {
				int M = (L >> 1) + (R >> 1) + (L & R & 1);
				if (check.valid(M)) {
					R = M;
				} else {
					L = M + 1;
				}
			}
			return L;
		}

		// Finds the right-most value that satisfies the IntCheck in the range [L, R).
		// It will return L - 1 if nothing in the range satisfies the check.
		public static int lastThat(int L, int R, IntCheck check) {
			int firstValue = firstThat(L, R, new IntCheck() {
				@Override
				public boolean valid(int value) {
					return !check.valid(value);
				}
			});
			return firstValue - 1;
		}

		// Finds the left-most value that satisfies the LongCheck in the range [L, R).
		public static long firstThat(long L, long R, LongCheck check) {
			while (L < R) {
				long M = (L >> 1) + (R >> 1) + (L & R & 1);
				if (check.valid(M)) {
					R = M;
				} else {
					L = M + 1;
				}
			}
			return L;
		}

		// Finds the right-most value that satisfies the IntCheck in the range [L, R).
		// It will return L - 1 if nothing in the range satisfies the check.
		public static long lastThat(long L, long R, LongCheck check) {
			long firstValue = firstThat(L, R, new LongCheck() {
				@Override
				public boolean valid(long value) {
					return !check.valid(value);
				}
			});
			return firstValue - 1;
		}

		public static interface LongCheck {
			public boolean valid(long value);
		}

		public static interface IntCheck {
			public boolean valid(int value);
		}
	}
}",1454887650
Ashwanth K,ashwanthkannan,21,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        
        int tot = 0;
        int n = nums.size();
        
        
        for(int x : nums) tot += x;
        
        
        int s1 = 0 , s2 = tot;
        int ans = 0;
        
        for(int i  =0 ; i < n ; i ++)
        {
            s1 += nums[i];
            s2 -= nums[i];
            
            if(nums[i] == 0)
            {
                if(s1 == s2 || s2 == s1 + 1) ans++;
                if(s1 == s2 || s1 == s2 + 1) ans++;
            }
        }
            
        
        return ans;
        
    }
};",1454888364
Ashwanth K,ashwanthkannan,21,3639,cpp,"#define ll long long
		
struct node
{
	ll add;
	ll maxi;
};
 
 
struct segtree
{
	int size;
	vector<struct node> operations;
 
	struct node defval = {0ll , 0ll};
		
 
	void init(int n)
	{
		size = 1;
		while(size < n) size*=2;
		operations.assign(2*size , defval);
	}

 	
 	struct node merge(struct node x ,struct node y)
 	{
 		struct node mergenode;
 		mergenode.maxi = max(x.maxi , y.maxi);
 		mergenode.add = 0;
 		return mergenode;
 	}

	struct node apply_operation(struct node x , struct node y)
	{
		struct node res = x;
		// y is parent , res is child
		res.add += y.add;
		return res;
	}
 
	void propagation(int x , int lx , int rx)
	{
		if(rx - lx == 1) 
		{
			// relax all lazy operations
			operations[x].maxi += operations[x].add;
			operations[x].add = 0;

			return;
		}
		else
		{
			operations[2*x+1] = apply_operation(operations[2*x+1] , operations[x]);
			operations[2*x+2] = apply_operation(operations[2*x+2] , operations[x]);
			
			// relax all lazy operations
			operations[x].maxi += operations[x].add;
			operations[x].add = 0;

		}
	}
 
	
 
	void range_update(int l , int r ,ll v, int x , int lx , int rx)
	{
		if(lx >= r || l >= rx) return ;
		propagation(x , lx , rx);
 
		if(l <= lx && r >= rx)
		{
			operations[x].add += v;
			propagation(x , lx , rx);
			return;
		}
 
		int m = (lx + rx)/2;
		range_update(l , r , v , 2*x+1 , lx , m);
		range_update(l , r , v , 2*x+2 , m , rx);
 
		propagation(2*x+1 , lx , m);
		propagation(2*x+2 , m , rx);

		operations[x] = merge(operations[2*x+1] , operations[2*x+2]);
 
	}
	void range_update(int l , int r , ll v)
	{
		range_update(l , r  , v, 0 , 0 , size);
	}
 
	struct node range_calc(int l , int r , int x , int lx , int rx)
	{
		propagation(x , lx , rx);
		if(lx >= r || l >= rx) return defval;
 
		if(l <= lx && r >= rx)
		{
			return operations[x];
		}
 
		int m = (lx + rx)/2;
		// calculate

		propagation(2*x+1 , lx , m);
		propagation(2*x+2 , m , rx);

		operations[x] = merge(operations[2*x+1] , operations[2*x+2]);
		return merge(range_calc(l , r , 2*x+1 , lx , m) , range_calc(l , r , 2*x+2 , m , rx));
	}
 
	struct node range_calc(int l , int r)
	{
		return range_calc(l , r , 0 , 0 , size);
	}
};


class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        segtree god;
        god.init(n);
        
        int q = queries.size();
        
        for(int i = 0 ; i < n ; i ++)
        {
            god.range_update(i , i+1 , nums[i]);
        }
        
        if(god.range_calc(0 , n).maxi <= 0)
            {
                return true;
            }
        
        for(int i = 0 ; i < q ; i ++)
        {
            int lx = queries[i][0];
            int rx = queries[i][1];  
            
            god.range_update(lx , rx+1 , -1);
            if(god.range_calc(0 , n).maxi <= 0)
            {
                return true;
            }
            
            
//             for(int i = 0 ; i < n ; i ++)
//             {
//                 cout << god.range_calc(i,i+1).maxi << "" "";
//             }
//             cout << endl;
        }
        
        return false;
    }
};",1454814573
Ashwanth K,ashwanthkannan,21,3643,cpp,"#define ll long long
		
struct node
{
	ll add;
	ll maxi;
};
 
 
struct segtree
{
	int size;
	vector<struct node> operations;
 
	struct node defval = {0ll , 0ll};
		
 
	void init(int n)
	{
		size = 1;
		while(size < n) size*=2;
		operations.assign(2*size , defval);
	}

 	
 	struct node merge(struct node x ,struct node y)
 	{
 		struct node mergenode;
 		mergenode.maxi = max(x.maxi , y.maxi);
 		mergenode.add = 0;
 		return mergenode;
 	}

	struct node apply_operation(struct node x , struct node y)
	{
		struct node res = x;
		// y is parent , res is child
		res.add += y.add;
		return res;
	}
 
	void propagation(int x , int lx , int rx)
	{
		if(rx - lx == 1) 
		{
			// relax all lazy operations
			operations[x].maxi += operations[x].add;
			operations[x].add = 0;

			return;
		}
		else
		{
			operations[2*x+1] = apply_operation(operations[2*x+1] , operations[x]);
			operations[2*x+2] = apply_operation(operations[2*x+2] , operations[x]);
			
			// relax all lazy operations
			operations[x].maxi += operations[x].add;
			operations[x].add = 0;

		}
	}
 
	
 
	void range_update(int l , int r ,ll v, int x , int lx , int rx)
	{
		if(lx >= r || l >= rx) return ;
		propagation(x , lx , rx);
 
		if(l <= lx && r >= rx)
		{
			operations[x].add += v;
			propagation(x , lx , rx);
			return;
		}
 
		int m = (lx + rx)/2;
		range_update(l , r , v , 2*x+1 , lx , m);
		range_update(l , r , v , 2*x+2 , m , rx);
 
		propagation(2*x+1 , lx , m);
		propagation(2*x+2 , m , rx);

		operations[x] = merge(operations[2*x+1] , operations[2*x+2]);
 
	}
	void range_update(int l , int r , ll v)
	{
		range_update(l , r  , v, 0 , 0 , size);
	}
 
	struct node range_calc(int l , int r , int x , int lx , int rx)
	{
		propagation(x , lx , rx);
		if(lx >= r || l >= rx) return defval;
 
		if(l <= lx && r >= rx)
		{
			return operations[x];
		}
 
		int m = (lx + rx)/2;
		// calculate

		propagation(2*x+1 , lx , m);
		propagation(2*x+2 , m , rx);

		operations[x] = merge(operations[2*x+1] , operations[2*x+2]);
		return merge(range_calc(l , r , 2*x+1 , lx , m) , range_calc(l , r , 2*x+2 , m , rx));
	}
 
	struct node range_calc(int l , int r)
	{
		return range_calc(l , r , 0 , 0 , size);
	}
};


class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        
        
        
        int n = nums.size();
        segtree god;
        god.init(n);
        
        int q = queries.size();
        
        for(int i = 0 ; i < n ; i ++)
        {
            god.range_update(i , i+1 , nums[i]);
        }
        
        if(god.range_calc(0 , n).maxi <= 0)
            {
                return 0;
            }
        
        for(int i = 0 ; i < q ; i ++)
        {
            int lx = queries[i][0];
            int rx = queries[i][1];
            int v = queries[i][2];    
            
            god.range_update(lx , rx+1 , -v);
            if(god.range_calc(0 , n).maxi <= 0)
            {
                return i+1;
            }
            
            
//             for(int i = 0 ; i < n ; i ++)
//             {
//                 cout << god.range_calc(i,i+1).maxi << "" "";
//             }
//             cout << endl;
        }
        
        return -1;
    }
};",1454812287
Ashwanth K,ashwanthkannan,21,3658,cpp,"#define  ll long long
#define inf 1e18
#define pll pair<long long,long long>

class Solution {
public:
    
    int n;
    vector<int> arr;
    vector<pll> chk;
    
    bool check(ll mid)
    {
        vector<pll> intv1;
        vector<pll> intv2;
        
        for(int i = 0 ; i < n ; i ++)
        {
            if(arr[i] == -1)
            {
                pll cur = {-inf,inf};
                bool ok = false;
                
                if(i-1 >= 0 && arr[i-1]!=-1)
                {
                    ok = true;
                    pll temp = {arr[i-1]-mid , arr[i-1]+mid};
                    cur.first = max(cur.first , temp.first);
                    cur.second = min(cur.second , temp.second);
                }
                if(i+1 < n && arr[i+1]!=-1)
                {
                    ok = true;
                    pll temp = {arr[i+1]-mid , arr[i+1]+mid};
                    cur.first = max(cur.first , temp.first);
                    cur.second = min(cur.second , temp.second);
                }
                
                if(ok)
                {
                    if(cur.first > cur.second) return false;
                    intv1.push_back({cur.first , cur.second});
                    intv2.push_back({cur.second , cur.first});
                }
            }
        }
        
        
        sort(intv1.begin() , intv1.end());
        sort(intv2.begin() , intv2.end());
        
        if(intv1.size() == 0) return true;
        
        ll x = intv2[0].first;
        ll y = intv1.back().first;
        
        if(x >= y)
        {
            return true;
        }
        
        
        for(auto cur : intv1)
        {
            if(cur.first <= x && x <= cur.second)
            {
                
            }
            else if(cur.first <= y && y <= cur.second)
            {
                
            }
            else
            {
                return false;
            }
        }
        
      //  cout << mid << "" "" << x << "" "" << y << endl;
        
        for(auto cur : chk)
        {
            bool lftx = abs(cur.first  - x) <= mid;
            bool lfty = abs(cur.first  - y) <= mid;
            bool rgtx = abs(cur.second  - x) <= mid;
            bool rgty = abs(cur.second  - y) <= mid;
            
            if(lftx && rgtx)
            {
                
            }
            else if(lfty && rgty)
            {
                
            }
            else
            {
                if(abs(x - y) <= mid)
                {
                    
                }
                else
                {
                    return false;
                }
            }
            
        }
        
        return true;
    }
    
    int minDifference(vector<int>& nums) {
        
        n = nums.size();
        arr = nums;
        chk.clear();
        
        ll low = 0 , high = 1e12;
        
        for(int i = 1 ; i < n ; i ++)
        {
            if(nums[i] != -1 && nums[i-1] != -1)
            {
                low = max(low , 1ll*abs(nums[i] - nums[i-1]));
            }
        }
        
        
        vector<pll> temp;
        ll st = -1,  ed = -1;
        
        for(int i = 0 ; i < n ; i ++)
        {
            if(nums[i] == -1)
            {
                if(st == -1)
                    st = i;
                ed = i;
            }
            else
            {
                if(st != -1 && ed != -1)
                {
                    temp.push_back({st , ed});
                    st = -1;
                    ed = -1;
                }
            }
        }
        
        if(st != -1 && ed != -1)
        {
            temp.push_back({st , ed});
        }
        
        
        for(auto kk : temp)
        {
           // cout << kk.first << "" "" << kk.second << endl;
            int lx = kk.first;
            int rx = kk.second;
            
            if(lx >= 1 && rx <= n-2)
            {
                if(rx - lx + 1 >= 2)
                {
                    chk.push_back({nums[lx-1] , nums[rx+1]});
                }
            }
        }
        
        
        
        while(low < high)    
        {
            ll mid = (low + high)/2;
            if(check(mid))
            {
                high = mid;
            }
            else
            {
                low = mid+1;
            }
        }
        
        return low;
    }
};",1454882886
Yan Pan,panyan7,23,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int n = nums.size(), s = accumulate(nums.begin(), nums.end(), 0), res = 0;
        for (int i = 0; i < n; i++) {
            if (nums[i] != 0)
                continue;
            for (int v = -1; v <= 1; v += 2) {
                vector<int> tmp = nums;
                int cur = i, d = v, r = s;
                while (r > 0) {
                    if (cur < 0 || cur >= n)
                        break;
                    if (tmp[cur] == 0) {
                        cur += d;
                    } else if (tmp[cur] > 0) {
                        tmp[cur]--;
                        r--;
                        d = -d;
                        cur += d;
                    }
                }
                if (r == 0) {
                    res++;
                }
            }
        }
        return res;
    }
};",1454836941
Yan Pan,panyan7,23,3639,cpp,"struct MaxInt {
    using T = long long;
    const T e = LLONG_MIN;
    T f(T a, T b) const { return max(a, b); }
};
struct MinInt {
    using T = long long;
    const T e = LLONG_MAX;
    T f(T a, T b) const { return min(a, b); }
};
template <class B>
struct SegTree : public B {
    using T = typename B::T;
    int n;
    vector<T> tree;
    vector<T> add;
private:
    void _build(const vector<T>& a, int v, int tl, int tr) {
        if (tl == tr) {
            tree[v] = a[tl];
            return;
        }
        int tmid = tl + (tr - tl) / 2;
        _build(a, v*2, tl, tmid);
        _build(a, v*2+1, tmid+1, tr);
        tree[v] = B::f(tree[v*2], tree[v*2+1]);
    }
    void _push(int v) {
        tree[v*2  ] += add[v];
        tree[v*2+1] += add[v];
        add[v*2  ] += add[v];
        add[v*2+1] += add[v];
        add[v] = 0;
    }
    void _update(int v, int tl, int tr, int l, int r, T val) {
        if (l > r)
            return;
        if (l == tl && r == tr) {
            tree[v] += val;
            add[v] += val;
            return;
        }
        _push(v);
        int tmid = tl + (tr - tl) / 2;
        _update(v*2, tl, tmid, l, min(r, tmid), val);
        _update(v*2+1, tmid+1, tr, max(l, tmid+1), r, val);
        tree[v] = B::f(tree[v*2], tree[v*2+1]);
    }
    T _query(int v, int tl, int tr, int l, int r) {
        if (l > r || tr < l || tl > r)
            return B::e;
        if (tr <= r && tl >= l)
            return tree[v];
        _push(v);
        int tmid = tl + (tr - tl) / 2;
        return B::f(_query(v*2, tl, tmid, l, min(r, tmid)),
                    _query(v*2+1, tmid+1, tr, max(l, tmid+1), r));
    }
    T _get(int v, int tl, int tr, int pos) {
        if (tl == tr)
            return tree[v];
        _push(v);
        int tmid = tl + (tr - tl) / 2;
        if (pos <= tmid)
            return _get(v*2, tl, tmid, pos);
        else
            return _get(v*2+1, tmid+1, tr, pos);
    }
public:
    SegTree(int n_) : n(n_) {
        tree.assign(4*n, B::e);
        add.assign(4*n, 0);
        vector<T> a(n, B::e);
        _build(a, 1, 0, n-1);
    }
    SegTree(int n_, T val) : n(n_) {
        tree.assign(4*n, B::e);
        add.assign(4*n, 0);
        vector<T> a(n, val);
        _build(a, 1, 0, n-1);
    }
    SegTree(const vector<T>& a) : n(a.size()) {
        tree.assign(4*n, B::e);
        add.assign(4*n, 0);
        _build(a, 1, 0, n-1);
    }
    friend ostream& operator<<(ostream& os, SegTree& st) {
        for (int i = 0; i < st.n; ++i)
            os << st.get(i) << "" "";
        return os;
    }
    void build(const vector<T>& a)   { _build(a, 1, 0, n-1); }
    void update(int l, int r, T val) { _update(1, 0, n-1, l,   r,   val); }
    void update(int pos, T val)      { _update(1, 0, n-1, pos, pos, val); }
    T query(int l, int r)            { return _query(1, 0, n-1, l, r); }
    T get(int pos)                   { return _get(1, 0, n-1, pos);  }
    T operator[](int pos)            { return get(pos); }
};

class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        SegTree<MaxInt> st(n, 0);
        for (auto& p : queries) {
            st.update(p[0], p[1], 1);
        }
        for (int i = 0; i < n; i++) {
            if (st.get(i) < nums[i])
                return false;
        }
        return true;
    }
};",1454813432
Yan Pan,panyan7,23,3643,cpp,"struct MaxInt {
    using T = long long;
    const T e = LLONG_MIN;
    T f(T a, T b) const { return max(a, b); }
};
struct MinInt {
    using T = long long;
    const T e = LLONG_MAX;
    T f(T a, T b) const { return min(a, b); }
};
template <class B>
struct SegTree : public B {
    using T = typename B::T;
    int n;
    vector<T> tree;
    vector<T> add;
private:
    void _build(const vector<T>& a, int v, int tl, int tr) {
        if (tl == tr) {
            tree[v] = a[tl];
            return;
        }
        int tmid = tl + (tr - tl) / 2;
        _build(a, v*2, tl, tmid);
        _build(a, v*2+1, tmid+1, tr);
        tree[v] = B::f(tree[v*2], tree[v*2+1]);
    }
    void _push(int v) {
        tree[v*2  ] += add[v];
        tree[v*2+1] += add[v];
        add[v*2  ] += add[v];
        add[v*2+1] += add[v];
        add[v] = 0;
    }
    void _update(int v, int tl, int tr, int l, int r, T val) {
        if (l > r)
            return;
        if (l == tl && r == tr) {
            tree[v] += val;
            add[v] += val;
            return;
        }
        _push(v);
        int tmid = tl + (tr - tl) / 2;
        _update(v*2, tl, tmid, l, min(r, tmid), val);
        _update(v*2+1, tmid+1, tr, max(l, tmid+1), r, val);
        tree[v] = B::f(tree[v*2], tree[v*2+1]);
    }
    T _query(int v, int tl, int tr, int l, int r) {
        if (l > r || tr < l || tl > r)
            return B::e;
        if (tr <= r && tl >= l)
            return tree[v];
        _push(v);
        int tmid = tl + (tr - tl) / 2;
        return B::f(_query(v*2, tl, tmid, l, min(r, tmid)),
                    _query(v*2+1, tmid+1, tr, max(l, tmid+1), r));
    }
    T _get(int v, int tl, int tr, int pos) {
        if (tl == tr)
            return tree[v];
        _push(v);
        int tmid = tl + (tr - tl) / 2;
        if (pos <= tmid)
            return _get(v*2, tl, tmid, pos);
        else
            return _get(v*2+1, tmid+1, tr, pos);
    }
public:
    SegTree(int n_) : n(n_) {
        tree.assign(4*n, B::e);
        add.assign(4*n, 0);
        vector<T> a(n, B::e);
        _build(a, 1, 0, n-1);
    }
    SegTree(int n_, T val) : n(n_) {
        tree.assign(4*n, B::e);
        add.assign(4*n, 0);
        vector<T> a(n, val);
        _build(a, 1, 0, n-1);
    }
    SegTree(const vector<T>& a) : n(a.size()) {
        tree.assign(4*n, B::e);
        add.assign(4*n, 0);
        _build(a, 1, 0, n-1);
    }
    friend ostream& operator<<(ostream& os, SegTree& st) {
        for (int i = 0; i < st.n; ++i)
            os << st.get(i) << "" "";
        return os;
    }
    void build(const vector<T>& a)   { _build(a, 1, 0, n-1); }
    void update(int l, int r, T val) { _update(1, 0, n-1, l,   r,   val); }
    void update(int pos, T val)      { _update(1, 0, n-1, pos, pos, val); }
    T query(int l, int r)            { return _query(1, 0, n-1, l, r); }
    T get(int pos)                   { return _get(1, 0, n-1, pos);  }
    T operator[](int pos)            { return get(pos); }
};
class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        vector<long long> a(n);
        for (int i = 0; i < n; i++)
            a[i] = nums[i];
        SegTree<MaxInt> st(a);
        if (st.query(0, n-1) <= 0)
            return 0;
        for (int k = 0; k < queries.size(); k++) {
            auto& p = queries[k];
            st.update(p[0], p[1], -p[2]);
            if (st.query(0, n-1) <= 0)
                return (k+1);
        }
        return -1;
    }
};",1454818032
Yan Pan,panyan7,23,3658,cpp,"class Solution {
public:
    int minDifference(vector<int>& nums) {
        long long lo = -1, hi = 1e9 + 10, n = nums.size();
        vector<long long> s;
        for (int i = 0; i < n; i++) {
            if (i+1 < n && nums[i+1] == -1 && nums[i] != -1) {
                s.push_back(nums[i]);
            } else if (i-1 >= 0 && nums[i-1] == -1 && nums[i] != -1) {
                s.push_back(nums[i]);
            }
        }
        sort(s.begin(), s.end());
        auto check = [&](int d) {
            long long x, y;
            if (s.size() == 0)
                x = 0, y = 0;
            else
                x = s[0] + d, y = s[s.size()-1] - d;
            vector<long long> tmp(n);
            for (int i = 0; i < n; i++)
                tmp[i] = nums[i];
            for (int i = 1; i < n; i++) {
                if (tmp[i] == -1 && tmp[i-1] != -1) {
                    if (abs(x-tmp[i-1]) > d)
                        tmp[i] = y;
                    else if (abs(y-tmp[i-1]) > d)
                        tmp[i] = x;
                }
            }
            for (int i = n-2; i >= 0; i--) {
                if (tmp[i] == -1 && tmp[i+1] != -1) {
                    if (abs(x-tmp[i+1]) > d)
                        tmp[i] = y;
                    else if (abs(y-tmp[i+1]) > d)
                        tmp[i] = x;
                }
            }
            for (int i = 0; i < n; i++) {
                if (tmp[i] == -1)
                    continue;
                if (i+1 < n && tmp[i+1] != -1) {
                    if (abs(tmp[i]-tmp[i+1]) > d)
                        return false;
                }
                if (i-1 >= 0 && nums[i-1] != -1) {
                    if (abs(tmp[i]-tmp[i-1]) > d)
                        return false;
                }
            }
            return true;
        };
        while (lo + 1 < hi) {
            int mid = lo + (hi - lo) / 2;
            if (check(mid))
                hi = mid;
            else
                lo = mid;
        }
        return hi;
    }
};",1454875195
arignote,arignote,27,3616,java,"class Solution {

    public int countValidSelections(int[] nums) {
        int count = 0;
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] == 0) {
                int sum = 0;
                for (int j = 0; j < nums.length; j++) {
                    sum += Integer.signum(j - i) * nums[j];
                }
                count += sum == 0 ? 2 : Math.abs(sum) == 1 ? 1 : 0;
            }
        }
        return count;
    }
}",1454870459
arignote,arignote,27,3639,java,"class Solution {

    public boolean isZeroArray(int[] nums, int[][] queries) {
        return minZeroArray(nums, queries) >= 0;
    }

    public int minZeroArray(int[] nums, int[][] queries) {
        int left = 0, right = queries.length + 1;
        while (left < right) {
            if (minZeroArray(nums, queries, (left + right) / 2)) {
                right = (left + right) / 2;
            } else {
                left = (left + right) / 2 + 1;
            }
        }
        return right <= queries.length ? right : -1;
    }

    private boolean minZeroArray(int[] nums, int[][] queries, int k) {
        int[] sum = new int[nums.length + 2];
        for (int i = 0; i < k; i++) {
            sum[queries[i][0] + 1] += 1;
            sum[queries[i][1] + 2] -= 1;
        }
        for (int i = 0; i < nums.length; i++) {
            if ((sum[i + 1] += sum[i]) < nums[i]) {
                return false;
            }
        }
        return true;
    }
}",1454870198
arignote,arignote,27,3643,java,"class Solution {

    public int minZeroArray(int[] nums, int[][] queries) {
        int left = 0, right = queries.length + 1;
        while (left < right) {
            if (minZeroArray(nums, queries, (left + right) / 2)) {
                right = (left + right) / 2;
            } else {
                left = (left + right) / 2 + 1;
            }
        }
        return right <= queries.length ? right : -1;
    }

    private boolean minZeroArray(int[] nums, int[][] queries, int k) {
        int[] sum = new int[nums.length + 2];
        for (int i = 0; i < k; i++) {
            sum[queries[i][0] + 1] += queries[i][2];
            sum[queries[i][1] + 2] -= queries[i][2];
        }
        for (int i = 0; i < nums.length; i++) {
            if ((sum[i + 1] += sum[i]) < nums[i]) {
                return false;
            }
        }
        return true;
    }
}",1454869968
arignote,arignote,27,3658,java,"class Solution {

    public int minDifference(int[] nums) {
        ArrayList<Integer> list = new ArrayList<>();
        for (int i = 0, k = -1; i < nums.length; i++) {
            if (nums[i] > 0) {
                list.add(nums[i]);
                for (int j = 0; j < nums.length; j++) {
                    list.add(nums[j]);
                    if (nums[j] > 0) {
                        k = nums[j];
                    }
                }
                list.add(k);
                break;
            }
        }
        int max = 0, min = Integer.MAX_VALUE, left = 0, right = 1000000000;
        ArrayList<int[]> list1 = new ArrayList<>(), list2 = new ArrayList<>();
        for (int i = 0, j = -2; i < list.size(); ++i) {
            if (list.get(i) > 0) {
                if (j == i - 1) {
                    max = Math.max(max, Math.abs(list.get(i) - list.get(i - 1)));
                } else if (j >= 0) {
                    (j == i - 2 ? list1 : list2).add(new int[] { Math.min(list.get(i), list.get(j)), Math.max(list.get(i), list.get(j)) });
                    min = Math.min(min, Math.min(list.get(i), list.get(j)));
                }
                j = i;
            }
        }
        while (left < right) {
            if (minDifference(list1, list2, (left + right) / 2, min)) {
                right = (left + right) / 2;
            } else {
                left = (left + right) / 2 + 1;
            }
        }
        return Math.max(max, left);
    }

    private boolean minDifference(List<int[]> list1, List<int[]> list2, int k, int min) {
        int left = min + k, right = Integer.MAX_VALUE;
        for (int[] i : list1) {
            if ((Math.abs(i[0] - min - k) > k || Math.abs(i[1] - min - k) > k) && (left = Math.max(left, i[1] - k)) > (right = Math.min(right, i[0] + k))) {
                return false;
            }
        }
        for (int[] i : list2) {
            if ((Math.abs(i[0] - min - k) > k || Math.abs(i[1] - min - k) > k) && (left = Math.max(left, i[1] - k)) > (right = Math.min(right, min + k < i[0] || min + k > i[1] ? i[0] + k : min + k + k))) {
                return false;
            }
        }
        return true;
    }
}",1454900505
lydxlx,lydxlx,28,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        ans = 0
        N = len(nums)
        for idx in range(N):
            if nums[idx] != 0:
                continue
            old_idx = idx
            for dir in [-1, 1]:
                old_dir = dir
                idx = old_idx
                A = list(nums)

                while 0 <= idx < N:
                    if A[idx] == 0:
                        idx += dir
                    elif A[idx] > 0:
                        A[idx] -= 1
                        dir = -dir
                        idx += dir
                if sum(A) == 0:
                    ans += 1
        return ans

",1454823188
lydxlx,lydxlx,28,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        n = len(nums)
        prefix = [0] * (n + 1)
        for l, r in queries:
            prefix[l] += 1
            prefix[r + 1] -= 1
        for i in range(1, n):
            prefix[i] += prefix[i - 1]
        return all(prefix[i] >= nums[i] for i in range(n))
",1454828001
lydxlx,lydxlx,28,3643,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]], query_cnt: int) -> bool:
        n = len(nums)
        prefix = [0] * (n + 1)
        for i in range(query_cnt):
            l, r, val = queries[i]
            prefix[l] += val
            prefix[r + 1] -= val
        for i in range(1, n):
            prefix[i] += prefix[i - 1]
        return all(prefix[i] >= nums[i] for i in range(n))

    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        if sum(nums) == 0:
            return 0
            
        Q = len(queries)
        if not self.isZeroArray(nums, queries, Q):
            return -1
        L = 0
        R = Q
        while L + 1 < R:
            mid = (L + R) // 2
            if self.isZeroArray(nums, queries, mid):
                R = mid
            else:
                L = mid
        return R
",1454846664
lydxlx,lydxlx,28,3658,python3,"import bisect
from typing import *
from sortedcontainers import SortedList, SortedDict
from collections import Counter, defaultdict
from math import inf
from math import gcd
from math import factorial
import string
import random
import itertools
from functools import cache, lru_cache
from fractions import Fraction
import itertools

class Solution:
    def canCoverByTwoPoints(self, intervals, maxDiff):
        originalMinRight = min([y for x, y in intervals])

        remain = []
        for a, b in intervals:
            if a <= originalMinRight <= b:
                continue
            remain.append((a, b))
        if not remain:
            return True
        minRight = min(y for x, y in remain)
        maxLeft = max(x for x, y in remain)
        return maxLeft <= minRight and maxLeft - originalMinRight <= maxDiff

    def minDifference(self, nums: List[int]) -> int:
        if len(set(nums)) == 1:
            return 0

        diff1 = {}
        diff2 = {}
        hasPre = False
        hasPost = False
        if nums[0] == -1:
            hasPre = True
        if nums[-1] == -1:
            hasPost = True
        n = len(nums)
        index = [i for i in range(n) if nums[i] != -1]
        firstNumber = nums[index[0]]
        lastNumber = nums[index[-1]]

        low, high = 0, 100000000000

        for i in range(1, len(index)):
            a, b = index[i - 1], index[i]
            if a + 1 != b:
                count = min(2, b - a - 1)
            num1, num2 = nums[a], nums[b]
            if a + 1 == b:
                low = max(low, abs(num2 - num1))
                continue
            if num1 > num2:
                num1, num2 = num2, num1
            if count == 1:
                diff1[(num1, num2)] = True
            else:
                diff2[(num1, num2)] = True

        if not diff1 and not diff2:
            return low

        for a, b in diff1:
            low = max(low, (b - a + 1) // 2)

        ans = None

        while low <= high:
            print(low, high)
            mid = (low + high) // 2

            intervals = []

            if hasPre:
                intervals.append((firstNumber - mid, firstNumber + mid))

            if hasPost:
                intervals.append((lastNumber - mid, lastNumber + mid))

            for a, b in diff1:
                intervals.append((b - mid, a + mid))

            for a, b in diff2:
                intervals.append((b - mid, a + mid))

            if self.canCoverByTwoPoints(intervals, inf):
                print(""check"")
                ans = mid
                high = mid - 1
                continue

            intervals = []

            if hasPre:
                intervals.append((firstNumber - mid, firstNumber + mid))

            if hasPost:
                intervals.append((lastNumber - mid, lastNumber + mid))

            for a, b in diff1:
                intervals.append((b - mid, a + mid))

            for a, b in diff2:
                intervals.append((a - mid, a + mid))
                intervals.append((b - mid, b + mid))
            print(intervals)
            if self.canCoverByTwoPoints(intervals, mid):
                ans = mid
                high = mid - 1
            else:
                low = mid + 1
        return ans

",1454892838
Smith,ShenTM,29,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        psum = list(itertools.accumulate(nums))
        # print(psum)
        tt = sum(nums)
        ans = 0
        for i, n in enumerate(psum):
            if nums[i] == 0 and n in [tt // 2, (tt + 1) // 2]:
                if tt % 2 == 0:
                    ans += 2
                else:
                    ans += 1
        return ans


        ",1454810511
Smith,ShenTM,29,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        ans = [0] * (len(nums) + 1)
        for s, e in queries:
            ans[s] += 1
            ans[e+1] -= 1
        ans = list(itertools.accumulate(ans))
        for v, t in zip(nums, ans):
            if v > t:
                return False
        return True



        ",1454814553
Smith,ShenTM,29,3643,python3,"class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:

        def helper(nums, queries):
            ans = [0] * (len(nums) + 1)
            for s, e, v in queries:
                ans[s] += v
                ans[e+1] -= v
            ans = list(itertools.accumulate(ans))
            for v, t in zip(nums, ans):
                if v > t:
                    return False
            return True
        if helper(nums, queries) == False:
            return -1
        l, r = 0, len(queries) + 1
        while l != r:
            mid = (l + r) // 2
            if helper(nums, queries[:mid]):
                r = mid
            else:
                l = mid + 1

        return r
            

            ",1454822607
Smith,ShenTM,29,3658,python3,"class Solution:
    def minDifference(self, nums: List[int]) -> int:
        x_max = max(nums)
        if x_max == -1:
            return 0
        pi = -1
        pn = 0
        all_questions = []
        nums.append(0)
        l = 0
        for i, n in enumerate(nums):
            if n != -1:
                if pi == -1:
                    if i != 0:
                        all_questions.append([n, n, 1])
                elif i - pi == 1 and i != len(nums) - 1:
                    l = max(l, abs(n - pn) )
                elif i - pi == 2:
                    all_questions.append([n, pn, 1] if n < pn else [pn, n, 1])
                elif i - pi > 2:
                    all_questions.append([n, pn, 2] if n < pn else [pn, n, 2])
                pi, pn = i, n
            else:
                continue
        nums.pop()
        if all_questions and all_questions[-1][0] == 0:
            all_questions[-1][0] = all_questions[-1][1]
            
        def check_multi_n1(x, y, diff):
            # print(x, y, diff)
            if x > y:
                return check_multi_n1(y, x ,diff)
            for s, e, t in all_questions:
                if t == 1:
                    if (x - diff <= s <= e <= x + diff) or (y - diff <= s <= e <= y + diff):
                        continue
                    else:
                        return False
                if t == 2:
                    if (x - diff <= s <= e <= x + diff) or (y - diff <= s <= e <= y + diff):
                        continue
                    elif y - x <= diff and (x - diff <= s <= x + diff) and (y - diff <= e <= y + diff):
                        continue
                    else:
                        return False
            return True
        def helper(diff):
            ranges = []
            x = x_max
            multi_n1 = False
            for i, j in zip(nums, nums[1:]):
                if i == -1 and j != -1:
                    ranges.append([j-diff, j+diff])
                    x = min(x, j + diff)
                elif i != -1 and j== -1:
                    ranges.append([i-diff, i + diff])
                    x = min(x, i + diff)
                elif i == j == -1:
                    multi_n1 += 1
            ranges.sort(key=lambda x: x[0])
            # print(ranges)
            y = 0
            for s, e in ranges:
                if s <= x <= e:
                    continue
                elif s <= y <= e:
                    continue
                else:
                    y = s
            for s, e in ranges:
                if s <= x <= e or s <= y <= e:
                    continue
                else:
                    return False
            return check_multi_n1(x, y, diff)

        r = x_max    
        # print(l, r)
        
        while l != r:
            mid = (l + r) // 2
            # l = r = mid = 6
            if helper(mid):
                r = mid
            else:
                l = mid + 1
            # break
        # print(l, r)
        return r
            


            





        ",1454893024
physics0523,physics0523,30,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int tot=0;
        for(auto &nx : nums){tot+=nx;}
        int s=0,res=0;
        for(auto &nx : nums){
            if(nx==0){
                if(s==tot){res+=2;}
                else if(abs(s-tot)==1){res++;}
            }
            else{
                tot-=nx;
                s+=nx;
            }
        }
        return res;
    }
};",1454806349
physics0523,physics0523,30,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        long long n=nums.size();
        vector<long long> bk(n+2,0);
        for(auto &nx : queries){
            bk[nx[0]]++;
            bk[nx[1]+1]--;
        }
        for(long long i=0;i<n;i++){
            if(nums[i]>bk[i]){return false;}
            bk[i+1]+=bk[i];
        }
        return true;
    }
};",1454808024
physics0523,physics0523,30,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int l=0,r=((int)queries.size());
        long long n=nums.size();
        while(l<=r){
            int te=(l+r)/2;
            bool jud=true;
            vector<long long> bk(n+2,0);
            // for(auto &nx : queries){
            for(int i=0;i<te;i++){
                bk[queries[i][0]]+=queries[i][2];
                bk[queries[i][1]+1]-=queries[i][2];
            }
            for(long long i=0;i<n;i++){
                if(nums[i]>bk[i]){jud=false;}
                bk[i+1]+=bk[i];
            }
            if(jud){r=te-1;}else{l=te+1;}
        }
        
        if(l>((int)queries.size())){l=-1;}
        return l;
    }
};
",1454811729
physics0523,physics0523,30,3658,cpp,"using pi=pair<int,int>;

vector<int> c2(vector<int> &vec){
    vector<int> a;
    for(auto &nx : vec){
        if(nx==-1){
            if(a.size()>=2){
                if(a[a.size()-2]==-1 && a[a.size()-1]==-1){continue;}
            }
        }
        a.push_back(nx);
    }
    return a;
}

vector<int> c1(vector<int> &vec){
    vector<int> a;
    for(auto &nx : vec){
        if(nx==-1){
            if(a.size()>=1){
                if(a[a.size()-1]==-1){continue;}
            }
        }
        a.push_back(nx);
    }
    return a;
}

class Solution {
public:
    int minDifference(vector<int>& nums) {
        vector<int> vec=nums;
        auto a2=c2(vec);
        auto a1=c1(vec);
        // for(auto &nx : a2){cout << nx << "" "";}cout << ""\n"";
        // for(auto &nx : a1){cout << nx << "" "";}cout << ""\n"";
        int s2=a2.size();
        int s1=a1.size();
        // if(s1==1){return 0;}
        int l=0,r=1e9+7;
        
        while(l<=r){
            int te=(l+r)/2;
            bool ok=false;
            // XY-adj NG
            {
                vector<int> lef(s1,1);
                vector<int> rig(s1,1e9+7);
                for(int i=1;i<s1;i++){
                    if(a1[i-1]!=-1){
                        lef[i]=max(lef[i],a1[i-1]-te);
                        rig[i]=min(rig[i],a1[i-1]+te);
                    }
                    if(a1[i]!=-1){
                        lef[i-1]=max(lef[i-1],a1[i]-te);
                        rig[i-1]=min(rig[i-1],a1[i]+te);
                    }
                }

                bool ng=false;
                vector<pi> seg;
                for(int i=0;i<s1;i++){
                    if(a1[i]==-1){
                        if(lef[i]>rig[i]){ng=true;}
                        else{
                            seg.push_back({lef[i],rig[i]});
                        }
                    }
                    else{
                        if(!(lef[i]<=a1[i] && a1[i]<=rig[i])){ng=true;}
                    }
                }
                if(!ng){
                    int elm=1e9+7;
                    for(auto &nx : seg){
                        elm=min(elm,nx.second);
                    }
                    int fil=1,fir=1e9+7;
                    for(auto &nx : seg){
                        if(nx.first<=elm && elm<=nx.second){continue;}
                        fil=max(fil,nx.first);
                        fir=min(fir,nx.second);
                    }
                    if(fil<=fir){ok=true;}
                }
            }
            // XY-adj OK
            {
                vector<int> lef(s2,1);
                vector<int> rig(s2,1e9+7);
                for(int i=1;i<s2;i++){
                    if(a2[i-1]!=-1){
                        lef[i]=max(lef[i],a2[i-1]-te);
                        rig[i]=min(rig[i],a2[i-1]+te);
                    }
                    if(a2[i]!=-1){
                        lef[i-1]=max(lef[i-1],a2[i]-te);
                        rig[i-1]=min(rig[i-1],a2[i]+te);
                    }
                }
                
                bool ng=false;
                vector<pi> seg;
                for(int i=0;i<s2;i++){
                    if(a2[i]==-1){
                        if(lef[i]>rig[i]){ng=true;}
                        else{
                            seg.push_back({lef[i],rig[i]});
                        }
                    }
                    else{
                        if(!(lef[i]<=a2[i] && a2[i]<=rig[i])){ng=true;}
                    }
                }
                if(!ng){
                    int elm=1e9+7;
                    for(auto &nx : seg){
                        elm=min(elm,nx.second);
                    }
                    int fil=elm,fir=elm+te;
                    for(auto &nx : seg){
                        if(nx.first<=elm && elm<=nx.second){continue;}
                        fil=max(fil,nx.first);
                        fir=min(fir,nx.second);
                    }
                    if(fil<=fir){ok=true;}
                }
            }
            if(ok){r=te-1;}else{l=te+1;}
        }
        return l;
    }
};",1454900063
green_pig,green_pig,31,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        n = len(nums)
        def check(i, d):
            a = nums.copy()
            while 0 <= i < n:
                if a[i]:
                    a[i] -= 1
                    d = -d
                i += d
            return sum(a) == 0
        return sum(check(i, d) for i in range(n) if nums[i] == 0 for d in [-1, 1])",1454806885
green_pig,green_pig,31,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        n = len(nums)
        def check(k):
            a = [0] * (n+1)
            for l, r in queries[:k]:
                a[l] += 1
                a[r+1] -= 1
            return all(x >= y for x, y in zip(accumulate(a), nums))
        return check(len(queries))",1454811469
green_pig,green_pig,31,3643,python3,"class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        n = len(nums)
        queries.append([0, n-1, inf])
        def check(k):
            a = [0] * (n+1)
            for l, r, v in queries[:k]:
                a[l] += v
                a[r+1] -= v
            return all(x >= y for x, y in zip(accumulate(a), nums))
        l, r = 0, len(queries)
        while l < r:
            m = l + r >> 1
            if check(m):
                r = m
            else:
                l = m+1
        return l if l < len(queries) else -1",1454810538
green_pig,green_pig,31,3658,python3,"class Solution:
    def minDifference(self, nums: List[int]) -> int:
        a = [i for i in nums if i > 0]
        if not a: a = [1]
        if nums[0] == -1:
            nums = [a[0]] + nums
        if nums[-1] == -1:
            nums = nums + [a[-1]]
        a = []
        for i in nums:
            if i == -1:
                a[-1] += i
            else:
                a.append(i)
                a.append(0)
        v = []
        for i in range(0, len(a)-2, 2):
            if a[i+1]:
                v.append(a[i:i+3])
        def check(k):
            s = [[max(a, b) - k, min(a, b) + k] for a, t, b in v]
            if not s: return 1
            s.sort()
            y = s[-1][0]
            s = [[l, r] for l, r in s if not l <= y <= r]
            if not s: return 1
            if max(l for l, r in s) <= min(r for l, r in s): return 1
            s = [[max(a, b) - k, min(a, b) + k] for a, t, b in v if t == -1]
            for a, t, b in v:
                if t < -1:
                    s.append([a - k, a + k])
                    s.append([b - k, b + k])
            if not s: return 1
            s.sort()
            y = s[-1][0]
            s = [[l, r] for l, r in s if not l <= y <= r]
            s.append([y - k, y])
            l, r = max(l for l, r in s), min(r for l, r in s)
            if l <= r and y - r <= k: return 1
            return 0
        l, r = max((abs(a-b) for a, b in zip(nums, nums[1:]) if a > 0 and b > 0), default=0), 10**10
        while l < r:
            m = l + r >> 1
            if check(m):
                r = m
            else:
                l = m+1
        return l
",1454888541
Javier,JavOliva,33,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int ans = 0;
        int sum = 0;
        for (int x : nums)
            sum += x;
        int n = nums.size();
        int cur = 0;
        for (int i = 0; i < n; i ++){
            if (nums[i] == 0){
                if (cur == sum - cur){
                    ans += 2;
                }
                if (cur == sum - cur - 1)
                    ans ++;
                if (cur == sum - cur + 1)
                    ans ++;
            }
            cur += nums[i];
        }
        return ans;
    }
};",1454807003
Javier,JavOliva,33,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        vector<int> ans(n + 1);
        int q = queries.size();
        for (int i = 0; i < q; i ++){
            int l = queries[i][0];
            int r = queries[i][1];
            ans[r + 1] ++;
            ans[l] --;
        }
        for (int i = 1; i <= n; i ++){
            ans[i] += ans[i - 1];
        }
        for (int i = 0; i < n; i ++){
            if (nums[i] > -ans[i])
                return false;
        }
        return true;
    }
};",1454809682
Javier,JavOliva,33,3643,cpp,"
typedef long long ll;
class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        int q = queries.size();
        int left = 0, right = q + 1;
        while(left < right){
            int mid = (left + right) / 2;
            vector<ll> ans(n + 1);
            for (int i = 0; i < mid; i ++){
                int l = queries[i][0];
                int r = queries[i][1];
                ll v = queries[i][2];
                ans[r + 1] += v;
                ans[l] -= v;
            }
            for (int i = 1; i < n; i ++)
                ans[i] += ans[i - 1];
            bool oka = true;
            for (int i = 0; i < n; i ++){
                if (nums[i] + ans[i] > 0){
                    oka = false;
                    break;
                }
            }
            if (oka)
                right = mid;
            else
                left = mid + 1;
        }
        return left == q + 1 ? -1 : left;
    }
};",1454815972
Javier,JavOliva,33,3658,cpp,"class Solution {
public:
    int minDifference(vector<int>& nums) {
        int n = nums.size();
        int left = 0, right = 1e9 + 1;
        for (int i = 0; i + 1 < n; i ++){
            if (nums[i] != -1 and nums[i + 1] != -1){
                left = max({left, nums[i + 1] - nums[i], nums[i] - nums[i + 1]});
            }
        }
        vector<bool> is_middle(n);
        for (int i = 0; i < n; i ++){
            if (nums[i] == -1 && ((i > 0 && nums[i - 1] == -1) || i == 0) && ((i + 1 < n && nums[i + 1] == -1) || i + 1 == n)){
                is_middle[i] = 1;
            }
            
        }
        vector<int> fixed_nums;
        for (int i = 0; i < n; i ++) if (!is_middle[i]){
            fixed_nums.push_back(nums[i]);
        }
        n = fixed_nums.size();
        vector<pair<int, int> > doubles;
        vector<int> singles;
        vector<pair<int, int> > especiales;
        for (int i = 0; i < n; i ++){
            if (fixed_nums[i] == -1){
                if (i + 1 < n && fixed_nums[i + 1] == -1){
                    especiales.emplace_back(fixed_nums[i - 1], fixed_nums[i + 2]);
                    i ++;
                }
                else if (i + 1 < n && i > 0){
                    doubles.emplace_back(fixed_nums[i - 1], fixed_nums[i + 1]);
                }
                else if (i + 1 < n){
                    singles.emplace_back(fixed_nums[i + 1]);
                }
                else {
                    singles.emplace_back(fixed_nums[i - 1]);
                }
            }
        }
        if (doubles.size() + especiales.size() + singles.size() == 0){
            return left;
        }
        while(left < right){
            int mid = (left + right) / 2;
            vector<pair<int, int> > rests;
            bool oka = true;
            for (auto x : singles){
                rests.emplace_back(x - mid, x + mid);
            }
            for (auto [x, y] : doubles){
                int L = max(x, y) - mid;
                int R = min(x, y) + mid;
                rests.emplace_back(L, R);
                if (L > R)
                    oka = false;
            }
            if (!oka){
                left = mid + 1;
                continue;
            }
            for (auto [x, y] : especiales){
                rests.emplace_back(x - mid, x + mid);
                rests.emplace_back(y - mid, y + mid);
            }
            int valor1 = max_element(rests.begin(), rests.end())->first;
            int L = 0, R = 1e9 + 1;
            for (auto x : singles){
                if (abs(x - valor1) > mid){
                    L = max(L, x - mid);
                    R = min(R, x + mid);
                    if (L > R){
                        oka =  false;
                        break;
                    }
                }
            }
            if (!oka){
                left = mid + 1;
                continue;
            }
            for (auto [x, y] : doubles){
                int Ld = max(x, y) - mid;
                int Rd = min(x, y) + mid;
                if (valor1 >= Ld && valor1 <= Rd)
                    continue;
                L = max(L, Ld);
                R = min(R, Rd);
                if (L > R){
                    oka = false;
                    break;
                }
            }
            if (!oka){
                left = mid + 1;
                continue;
            }
            for (auto [x, y] : especiales){
                if (x >= valor1 && y >= valor1){
                    continue;
                }
                if (x < y)
                    swap(x, y);
                if (x >= valor1 && y < valor1){
                    if (abs(y - valor1) <= mid)
                        continue;
                    L = max(L, valor1 - mid);
                    R = min(R, y + mid);
                    if (L > R){
                        oka = false;
                        break;
                    }
                    continue;
                }
                // x < valor1 and y < valor1
                if (abs(x - valor1) <= mid && abs(y - valor1) <= mid)
                    continue;
                L = max(L, x - mid);
                R = min(R, y + mid);
                if (L > R){
                    oka = false;
                    break;
                }
            }
            if (oka)
                right = mid;
            else
                left = mid + 1;
        }
        return left;
    }
};",1454896326
Yuanbin Cheng,cybsbbbb,35,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        n = len(nums)
        prefix = [0]
        for num in nums:
            prefix.append(prefix[-1] + num)
        suffix = [0]
        for num in nums[::-1]:
            suffix.append(suffix[-1] + num)
        prefix = prefix[1:]
        suffix = suffix[1:][::-1]
        ans = 0
        for i in range(n):
            if nums[i] == 0:
                if prefix[i] == suffix[i]:
                    ans += 2
                elif abs(prefix[i] - suffix[i]) == 1:
                    ans += 1
        return ans
        ",1454808673
Yuanbin Cheng,cybsbbbb,35,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        n = len(nums)
        diff = [0] * (n + 1)
        for li, ri in queries:
            diff[li] += 1
            diff[ri + 1] -= 1
        for i in range(1, n):
            diff[i] += diff[i - 1]
        flag = True
        for i in range(n):
            if nums[i] > diff[i]:
                flag = False
        return flag
        ",1454812187
Yuanbin Cheng,cybsbbbb,35,3643,python3,"class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        n, m = len(nums), len(queries)
        
        def helper(m):
            diff = [0] * (n + 2)
            for li, ri, vi in queries[:m]:
                diff[li] += vi
                diff[ri + 1] -= vi
            flag = True
            for i in range(n):
                diff[i] += diff[i - 1]
                if nums[i] > diff[i]:
                    flag = False
                    break
            return flag

        if max(nums) == 0:
            return 0
        if helper(m) is False:
            return -1

        left = 1
        right = m
        while left < right:
            mid = left + (right - left) // 2
            if helper(mid) is False:
                left = mid + 1
            else:
                right = mid

        return left
        ",1454824561
Yuanbin Cheng,cybsbbbb,35,3658,python3,"class Solution:
    def minDifference(self, nums: List[int]) -> int:
        if max(nums) == -1:
            return 0
        n = len(nums)
        known = 0
        ones = []
        twos = []

        prev = 0
        prev_miss = 0
        for i in range(n):
            if nums[i] > 0:
                if i > 0 and prev_miss == 0:
                    known = max(known, abs(nums[i] - nums[i - 1]))
                if prev_miss > 0:
                    if prev == 0:
                        ones.append([nums[i], nums[i]])
                    else:
                        if prev_miss == 1:
                            ones.append(sorted([prev, nums[i]]))
                        else:
                            twos.append(sorted([prev, nums[i]]))     
                prev = nums[i]
                prev_miss = 0
                
            elif nums[i] == -1:
                prev_miss += 1
        if prev_miss > 0:
            ones.append([prev, prev])

        ones.sort()
        twos.sort()

        def helper(mid):
            x, y = 10 ** 9, 0
            for l, r in ones:
                x = min(x, l)
                y = max(y, r)
            for l, r in twos:
                x = min(x, l)
                y = max(y, r)
            x += mid
            y -= mid
            if x >= y:
                return True

            for l, r in ones:
                if min(max(abs(l-x), abs(r-x)), max(abs(l-y), abs(r-y))) > mid:
                    return False
                    
            for l, r in twos:
                if min(max(abs(l-x), abs(r-x)), max(abs(l-y), abs(r-y))) <= mid:
                    continue
                if max(abs(l-x),abs(x-y), abs(r-y)) <= mid:
                    continue
                return False
            return True
                
        left = known
        right = 10 ** 10
        while left < right:
            mid = left + (right - left) // 2
            if helper(mid):
                right = mid
            else:
                left = mid + 1

        return left

        ",1454916804
OTTFF,OTTFF,37,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& a) {
        int n = a.size();
        vector<int> sum(n + 1);
        for (int i = 0; i < n; i++) {
            sum[i + 1] += sum[i] + a[i];
        }

        int ans = 0;
        for (int i = 0; i < n; i++) {
            if (a[i]) continue;

            if (sum[i] == sum[n] - sum[i]) {
                ans += 2;
            } else if (sum[i] + 1 == sum[n] - sum[i]) {
                ans++;
            } else if (sum[i] == sum[n] - sum[i] + 1) {
                ans++;
            }
        }

        return ans;
    }
};",1454807715
OTTFF,OTTFF,37,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& a, vector<vector<int>>& qs) {
        int n = a.size();
        vector<int> sum(n + 1);
        for (auto& q :qs) {
            sum[q[0]]++;
            sum[q[1] + 1]--;
        }

        int cur = 0;
        for (int i = 0; i < n; i++) {
            cur += sum[i];
            if (cur < a[i]) {
                return false;
            }
        }
        return true;
    }
};",1454810145
OTTFF,OTTFF,37,3643,cpp,"class Solution {
public:
typedef long long LL;
    int minZeroArray(vector<int>& a, vector<vector<int>>& qs) {
        int n = a.size();
        int m = qs.size();
        
        vector<LL> sum(n + 1);

        auto check = [&](int mid) -> bool {
            for (int i = 0; i <= n; i++) {
                sum[i] = 0;
            }
            for (int i = 0; i < mid; i++) {
                int l = qs[i][0], r = qs[i][1];
                sum[l] += qs[i][2];
                sum[r + 1] -= qs[i][2];
            }

            LL cur = 0;
            for (int i = 0; i < n; i++) {
                cur += sum[i];
                if (cur < a[i]) return false;
            }
            return true;
        };
        
        int l = 0, r = m;
        int ans = m + 1, mid;
        while (l <= r) {
            mid = (l + r) >> 1;
            if (check(mid)) {
                ans = mid;
                r = mid - 1;
            } else {
                l = mid + 1;
            }
        }

        if (ans == m + 1) {
            ans = -1;
        }
        return ans;
    }
};",1454814985
OTTFF,OTTFF,37,3658,cpp,"template<typename T> void cmin(T &x,const T &y) { if(y<x) x=y; }
template<typename T> void cmax(T &x,const T &y) { if(x<y) x=y; }

class Solution {
public:
typedef pair<int, int> PII;
int INF = 0x3f3f3f3f;
    int minDifference(vector<int>& a) {
        int n = a.size();

        // all -1
        int f = 0;
        for (int i : a) {
            if (i != -1) {
                f = 1;
                break;
            }
        }
        if (!f) {
            return 0;
        }

        vector<PII> one;
        vector<PII> two;

        for (int i = 0; i < n; ) {
            if (a[i] != -1) {
                i++;
                continue;
            }
            int j = i;
            while (j < n && a[j] == -1) {
                j++;
            }

            int lv = (i == 0 ? a[j] : a[i - 1]);
            int rv = (j == n ? a[i - 1] : a[j]);

            if (lv > rv) swap(lv, rv);
            if (j - i >= 2) {
                two.push_back({lv, rv});
            } else {
                one.push_back({lv, rv});
            }
            i = j;
        }

        int cmx = 0, cmn = INF;
        for (auto [l, r] : one) {
            cmax(cmx, r);
            cmin(cmn, l);
        }
        for (auto [l, r] : two) {
            cmax(cmx, r);
            cmin(cmn, l);
        }

        auto check = [&](int mid) -> bool {
            // if (cmn + mid * 3 <= cmx) return true;
            int x = cmn + mid;
            int y = cmx - mid;

            if (x > y) swap(x, y);

            // cout << mid << ' ' << x << ' ' << y << endl;
            
            // one
            for (auto& [l, r] : one) {
                if (l + 1LL * mid * 2 < r) {
                    return false;
                }

                // need x or y in [r - mid, l + mid]
                if ((abs(l - x) > mid || abs(r - x) > mid) && (abs(l - y) > mid || abs(r - y) > mid)) {
                    return false;
                }
            } 

            // int lx = 0, rx = INF;
            for (auto& [l, r] : two) {
                if (l + 1LL * mid * 3 < r) {
                    return false;
                }
                // if (l + mid * 2 < r) { // must have x and y for this interval
                //     // cmax(lx, r - mid * 2);
                //     // cmin(rx, l + mid);
                //     // x should in [r - mid * 2, l + mid]
                // } else {
                    
                // }

                int ff = 0;
                if ((abs(l - x) <= mid && abs(r - x) <= mid) || (abs(l - y) <= mid && abs(r - y) <= mid)) {
                    ff = 1;
                } else if (abs(l - x) <= mid && abs(r - y) <= mid && y - x <= mid) {
                    ff = 1;
                }
                if (!ff) {
                    return false;
                }
            }

            // if (lx > rx) return false;

            return true;
        };

        int l = 0, r = INF;
        int ans = r;
        int mid;

        for (int i = 1; i < n; i++) {
            if (a[i - 1] != -1 && a[i] != -1) {
                l = max(l, abs(a[i] - a[i - 1]));
            }
        }

        while (l <= r) {
            mid = (l + r) >> 1;
            if (check(mid)) {
                ans = mid;
                r = mid - 1;
            } else {
                l = mid + 1;
            }
        }
        return ans;
    }
};",1454906226
HFDnpkp1cs,HFDnpkp1cs,38,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int n = nums.size(), ret = 0;
        for(int i = 0; i < n; i++) {
            if(nums[i] == 0) {
                auto t = nums;
                if(check(t, i, true))
                    ret++;
                t = nums;
                if(check(t, i, false))
                    ret++;
            }
        }
        return ret;
    }

    bool check(vector<int>& nums, int idx, bool left) {
        int n = nums.size();
        if(idx < 0 || idx >= n) {
            for(int i = 0; i < n; i++) {
                if(nums[i] != 0)
                    return false;
            }
            return true;
        }

        if(nums[idx] == 0) {
            if(left)
                return check(nums, idx - 1, left);
            else
                return check(nums, idx + 1, left);
        }
        else {
            nums[idx]--;
            left = !left;
            if(left)
                return check(nums, idx - 1, left);
            else
                return check(nums, idx + 1, left);
        }
    }
};",1454808854
HFDnpkp1cs,HFDnpkp1cs,38,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& q) {
        int n = nums.size(), m = q.size();
        vector<int> sum(n + 1, 0);
        for(auto& qq : q) {
            int l = qq[0], r = qq[1];
            sum[l]++;
            sum[r + 1]--;
        }

        int cum = 0;
        for(int i = 0; i < n; i++) {
            cum += sum[i];
            if(cum < nums[i])
                return false;
        }
        return true;
    }
};",1454812253
HFDnpkp1cs,HFDnpkp1cs,38,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& q) {
        int n = nums.size(), m = q.size();
        if(!check(nums, q, m))
            return -1;

        int lo = 0, hi = m;
        while(lo < hi) {
            int mid = (lo + hi) / 2;
            if(check(nums, q, mid))
                hi = mid;
            else
                lo = mid + 1;
        }
        return lo;
    }

    bool check(vector<int>& nums, vector<vector<int>>& q, int sz) {
        int n = nums.size(), m = q.size();
        vector<int> sum(n + 1, 0);
        for(int i = 0; i < sz; i++) {
            int l = q[i][0], r = q[i][1], val = q[i][2];
            sum[l] += val;
            sum[r + 1] -= val;
        }

        int cum = 0;
        for(int i = 0; i < n; i++) {
            cum += sum[i];
            if(cum < nums[i])
                return false;
        }
        return true;
    }
};",1454822981
HFDnpkp1cs,HFDnpkp1cs,38,3658,cpp,"using ll = long long;

class Solution {
public:
    int minDifference(vector<int>& nums) {
        vector<int> v;
        int n = nums.size();
        if(nums == vector<int>(n, -1))
            return 0;
        
        for(int i = 0; i < n; i++) {
            if(i > 1 && nums[i] == -1 && nums[i - 1] == -1 && nums[i - 2] == -1)
                continue;
            v.push_back(nums[i]);
        }
        
        ll lo = 0, hi = 1e15;
        while(lo < hi) {
            ll mid = (lo + hi) / 2;
            if(check(v, mid))
                hi = mid;
            else
                lo = mid + 1;
        }
        return lo;
    }

    bool check(vector<int>& nums, ll diff) {
        ll n = nums.size();
        for(int i = 1; i < n; i++) {
            if(nums[i] == -1 || nums[i - 1] == -1)
                continue;
            if(abs(nums[i] - nums[i - 1]) > diff)
                return false;
        }
        
        vector<ll> v;
        for(ll i = 0; i < n; i++) {
            if(nums[i] == -1)
                continue;
            if((i > 0 && nums[i - 1] == -1) || i + 1 < n && nums[i + 1] == -1) {
                v.push_back(nums[i]);
            }
        }
        sort(v.begin(), v.end());
        if(v.empty()) {
            return true;
        }

        ll sz = v.size();
        ll lo = max(1ll, v[0] - diff), hi = v[0] + diff;
        ll left = hi, left_idx = 0;
        
        for(ll i = 1; i < sz; i++) {
            if(max(1ll, v[i] - diff) > hi)
                break;
            left_idx = i;
        }

        lo = max(1ll, v[sz - 1] - diff), hi = v[sz - 1] + diff;
        ll right = lo, right_idx = sz - 1;
        for(ll i = sz - 2; i >= 0; i--) {
            if(v[i] + diff < lo)
                break;
            right_idx = i;
        }

        if(right_idx - left_idx > 1)
            return false;

        if(left >= right) {
            return true;
        }
        else {
            for(ll i = 2; i < n - 1; i++) {
                if(nums[i] == -1 && nums[i - 1] == -1) {
                    ll a = nums[i - 2], b = nums[i + 1];
                    if(!valid({a, left, right, b}, diff) && !valid({a, left, left, b}, diff) && !valid({a, right, right, b}, diff) && !valid({a, right, left, b}, diff))
                        return false;
                }
            }

            for(int i = 1; i < n - 1; i++) {
                if(nums[i] == -1 && nums[i - 1] != -1 && nums[i + 1] != -1) {
                    int a = nums[i - 1], b = nums[i + 1];
                    if(!valid({a, left, b}, diff) && !valid({a, right, b}, diff))
                        return false;
                }
            }
            
            return true;
        }
    }

    bool valid(vector<ll> v, ll diff) {
        int n = v.size();
        for(int i = 1; i < n; i++) {
            if(abs(v[i] - v[i - 1]) > diff)
                return false;
        }
        return true;
    }
};",1454906800
delphih,delphih,41,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        s = sum(nums)
        cur = 0
        res = 0
        for i, x in enumerate(nums):
            cur += x
            if x == 0:
                res += cur * 2 - 1 <= s <= cur * 2
                res += cur * 2 <= s <= cur * 2 + 1
        return res",1454808701
delphih,delphih,41,3639,python3,"class Solution:
    def isZeroArray(self, A: List[int], Q: List[List[int]]) -> bool:
        ds = [(l, 1) for l, r in Q] + [(r+1, -1) for l, r in Q]
        ds.sort(reverse=1)
        cur = 0
        for i, x in enumerate(A):
            while ds and ds[-1][0] <= i:
                cur += ds.pop()[1]
            # print(i, cur)
            if x > cur: return False
        return True",1454813547
delphih,delphih,41,3643,python3,"class Solution:
    def minZeroArray(self, A: List[int], Q: List[List[int]]) -> int:
        def check(k):
            ds = [(l, v) for l, r, v in islice(Q, k)] + [(r+1, -v) for l, r, v in islice(Q, k)]
            ds.sort(reverse=1)
            cur = 0
            for i, x in enumerate(A):
                while ds and ds[-1][0] <= i:
                    cur += ds.pop()[1]
                # print(i, cur)
                if x > cur: return False
            return True
        l, r = -1, len(Q) + 1
        while l + 1 < r:
            m = (l + r) // 2
            if check(m): r = m
            else: l = m
        return r if r <= len(Q) else -1",1454820480
delphih,delphih,41,3658,python3,"class Solution:
    def minDifference(self, nums: List[int]) -> int:
        n = len(nums)
        max_known_diff = max((abs(x - y) for x, y in pairwise(nums) if x != -1 and y != -1), default=0)
        
        A = []
        slots = []
        for i in range(len(nums)):
            if 0 < i < n-1 and ((nums[i-1] > 0 and nums[i+1] > 0) or (nums[i-1] == -1 and nums[i+1] == -1)):
                continue
            A.append(nums[i])
            if nums[i] == -1: slots.append(len(A) - 1)

        B = []
        prev, previ = 1, -1
        for i, x in enumerate(nums):
            if x > 0 and i > 0 and nums[i-1] == -1:
                if previ == -1: prev = x
                l, r = sorted([prev, x])
                t = 1 if i - previ == 2 or previ == -1 else 2
                B.append((t, l, r))
            if x == -1 and i == len(nums)-1:
                B.append((1, prev, prev))
            if x > 0: prev, previ = x, i
        # print(B)
                
        # adjacents = []
        # for i in range(n):
        #     if nums[i] == -1:
        #         neighbors = []
        #         if i > 0 and nums[i - 1] != -1:
        #             neighbors.append(nums[i - 1])
        #         if i + 1 < n and nums[i + 1] != -1:
        #             neighbors.append(nums[i + 1])
        #         if neighbors:
        #             adjacents.extend(neighbors)

        # print(adjacents)
        # if not adjacents:
        #     return max_known_diff

        # def is_feasible(D):
        #     low_k = 1
        #     high_k = 10**9
        #     for val in adjacents:
        #         l = val - D
        #         r = val + D
        #         low_k = max(low_k, l)
        #         high_k = min(high_k, r)
        #         if low_k > high_k:
        #             return False
        #     return True

        def is_feasible(D):
            mnr = inf
            for t, l, r in B:
                mnr = min(mnr, l + D)
            x = mnr
            mnr = inf
            done = set()
            for i, (t, l, r) in enumerate(B):
                if abs(x - l) <= D and abs(x - r) <= D:
                    done.add(i)
                    continue
                if t == 1:
                    mnr = min(mnr, l + D)
                else:
                    mnr = min(mnr, max(l + D, x + D))
            y = mnr
            # print(x, y)
            for i, (t, l, r) in enumerate(B):
                if i in done: continue
                if abs(y - l) <= D and abs(y - r) <= D:
                    continue
                if t == 1:
                    return False
                else:
                    if not(abs(l - x) <= D and abs(x - y) <= D and abs(y - r) <= D):
                        return False
            return True

        l, r = max_known_diff-1, 10**9
        while l + 1 < r:
            mid = (l + r) // 2
            # print('=' * 10, mid, is_feasible(mid))
            if is_feasible(mid):
                r = mid
            else:
                l = mid

        return r",1454917365
SirTechnical,SirTechnical,44,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        
        def is_valid(i, d):
            arr = [x for x in nums]
            while 0 <= i < len(arr):
                if arr[i] == 0:
                    i += d
                else:
                    arr[i] -= 1
                    d *= -1
                    i += d
            return sum(arr) == 0
        ans = 0
        for i in range(len(nums)):
            if nums[i]: continue
            if is_valid(i, 1): 
                ans += 1
            if is_valid(i, -1):
                ans += 1
        return ans
            ",1454808865
SirTechnical,SirTechnical,44,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int N = nums.size();
        vector<int> diff(N+1, 0);
        for (vector<int>& q : queries) {
            diff[q[0]] += 1;
            diff[q[1]+1] -= 1;
        }
        for (int i = 0; i < N; ++i) diff[i+1] += diff[i];
        for (int i = 0; i < N; ++i) {
            //cout << diff[i] << ' ' << nums[i] << '\n';
            if (diff[i] < nums[i]) {
                return 0;
            }
        }
        return 1;
    }
};",1454813185
SirTechnical,SirTechnical,44,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int N = nums.size();
        
        auto can = [&](int k) {
            if (k > queries.size()) return 1;
            vector<int> diff(N+1, 0);
            for (int j = 0; j < k; ++j) {
                vector<int>& q = queries[j];
                diff[q[0]] += q[2];
                diff[q[1]+1] -= q[2];
            }
            for (int i = 0; i < N; ++i) diff[i+1] += diff[i];
            for (int i = 0; i < N; ++i) if (diff[i] < nums[i]) return 0;
            return 1;
        };
        int lo = 0;
        int hi = queries.size()+1;
        while (lo < hi) {
            int mid = (lo+hi)/2;
            if (!can(mid)) {
                lo = mid+1;
            } else {
                hi = mid;
            }
        }
        if (lo > queries.size()) return -1;
        return lo;
    }
};",1454819809
SirTechnical,SirTechnical,44,3658,python3,"class Solution:
    def minDifference(self, nums: List[int]) -> int:
        arr = []
        for n in nums:
            if n == -1 and arr and arr[-1] <= -1:
                if arr[-1] == -1: arr[-1] = -2
            else:
                arr.append(n)
        N = len(arr)
        if arr[0] == -2:
            arr[0] = -1
        if arr[-1] == -2:
            arr[-1] = -1
        if N <= 1: return 0
    
        def can(d, nums_close=False):
            if nums_close == False:
                if can(d, True):
                    return True
            ranges = []
            
            def apply_range(lo, hi) -> bool:
                if not lo <= hi: return False
                nonlocal ranges
                ranges.append((lo,hi))
                return True
            
            for i in range(len(arr)):                        
                if arr[i] == -1 or (arr[i] == -2 and not nums_close):
                    lo = -1
                    hi = 10**10
                    if i-1 >= 0:
                        lo = max(lo, arr[i-1]-d)
                        hi = min(hi, arr[i-1]+d)
                    if i+1 < len(arr):
                        lo = max(lo, arr[i+1]-d)
                        hi = min(hi, arr[i+1]+d)
                    if not apply_range(lo, hi): return False
                elif arr[i] == -2:
                    lo = arr[i-1]
                    hi = arr[i+1]
                    if lo>hi: lo,hi = hi,lo
                    clo1 = hi-2*d
                    chi1 = lo+d
                    clo2 = hi-d
                    chi2 = lo+2*d
                    if not apply_range(clo1, chi1): return False
                    if not apply_range(clo2, chi2): return False
                    
            if not ranges: return True
           # print(d, nums_close, ranges, arr)
            
            end = min(hi for lo,hi in ranges)
            ranges2 = []
            for lo,hi in ranges:
                if lo <= end <= hi:
                    pass
                else:
                    ranges2.append((lo,hi))
            if not ranges2: return True
            end2 = min(hi for lo,hi in ranges2)
            if nums_close: end2 = min(end2, end+d)
            for lo,hi in ranges2:
                if lo <= end2 <= hi:
                    pass
                else:
                    return False
            return True
                
        
        lo = 0
        for i in range(1,len(arr)):
            if arr[i-1] >= 0 and arr[i] >= 0:
                lo = max(lo, abs(arr[i-1]-arr[i]))
        hi = 10**9+10
        while lo < hi:
            mid = (lo+hi)//2
            if can(mid):
                hi = mid
            else:
                lo = mid+1
       # print(""========================="")
        return lo",1454895730
Tin,tin_le,45,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& a) {
        int n = a.size();
        int res = 0;
        int sm = accumulate(begin(a), end(a), 0);
        for(int i = 0, p = 0; i < n; i++) {
            sm -= a[i];
            p += a[i];
            if(a[i] == 0) {
                if(sm == p) res += 2;
                else if(abs(sm - p) == 1) res++;
            }
        }
        return res;
    }
};",1454809501
Tin,tin_le,45,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& a, vector<vector<int>>& q) {
        int n = a.size();
        vector<int> dp(n + 1);
        for(auto& it : q) {
            int l = it[0], r = it[1];
            dp[l]++;
            dp[r + 1]--;
        }
        for(int i = 0; i < n; i++) {
            if(i) dp[i] += dp[i - 1];
            if(a[i] > dp[i]) return false;
        }
        return true;
    }
};",1454813437
Tin,tin_le,45,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& a, vector<vector<int>>& q) {
        auto f = [&](int k) -> bool {
            int n = a.size();
            vector<int> dp(n + 1);
            for(int i = 0; i < k; i++) {
                auto& it = q[i];
                int l = it[0], r = it[1], v = it[2];
                dp[l] += v;
                dp[r + 1] -= v;
            }
            for(int i = 0; i < n; i++) {
                if(i) dp[i] += dp[i - 1];
                if(a[i] > dp[i]) return false;
            }
            return true;
        };
        int left = 0, right = q.size(), res = -1;
        while(left <= right) {
            int middle = left + (right - left) / 2;
            if(f(middle)) res = middle, right = middle - 1;
            else left = middle + 1;
        } 
        return res;
    }
};",1454819639
Tin,tin_le,45,3658,cpp,"class Solution {
public:
    int minDifference(vector<int>& b) {
        using ll = long long;
        int inf = 1e9;
        int n = b.size();
        int mn = inf, mx = -inf;
        for(int i = 0; i < n; i++) {
            if(b[i] == -1) {
                if(i && b[i - 1] != -1) {
                    mx = max(mx, b[i - 1]);
                    mn = min(mn, b[i - 1]);
                }
                if(i < n - 1 && b[i + 1] != -1) {
                    mn = min(mn, b[i + 1]);
                    mx = max(mx, b[i + 1]);
                }
            }
        }
        auto f = [&](int l, int r) -> int {
            vector<int> a(b);
            auto g = [](int a, int b, int c) -> ll {
                return max(abs(a - b), abs(b - c)); 
            };
            for(int i = 0; i < n; i++) {
                if(a[i] != -1) continue;
                if(i && i < n - 1 && a[i - 1] != -1 && a[i + 1] != -1) {
                    if(g(a[i - 1], l, a[i + 1]) < g(a[i - 1], r, a[i + 1])) a[i] = l;
                    else a[i] = r;
                    continue;
                }
                if(i && a[i - 1] != -1) {
                    if(g(a[i - 1], l, l) < g(a[i - 1], r, r)) a[i] = l;
                    else a[i] = r;
                    continue;
                }
                if(i < n - 1 && a[i + 1] != -1) {
                    if(g(a[i + 1], l, l) < g(a[i + 1], r, r)) a[i] = l;
                    else a[i] = r;
                    continue;
                }
                a[i] = l;
            }
            int res = 0;
            for(int i = 1; i < n; i++) {
                res = max(res, abs(a[i] - a[i - 1])); 
            }
            return res;
        };
        if(mx == -inf) {
            return f(0, 0);
        }
        int extra = (mx + mn) % 2;
        int k = (mx + mn) / 2;
        int left = 0, right = k - mn, res = inf;
        auto get_pair = [&](int x) -> pair<int, int> {
            return {k - x, k + x + extra};
        };
        while(left <= right) {
            int middle = left + (right - left) / 2;
            auto [lx, rx] = get_pair(middle);
            auto [ly, ry] = get_pair(middle + 1);
            int x = f(lx, rx), y = f(ly, ry);
            res = min(x, y);
            if(x > y) left = middle + 1;
            else right = middle - 1;
        }
        return res;
    }
};",1454876333
Sanath_Kulla,Sanath_Kulla,46,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int ans = 0;
        int sum = 0;
        int n = nums.size();
        for(int i = 0 ; i < n ; i++){
            sum += nums[i];
        }
        int x = 0;
        for(int i = 0 ; i < n ; i++){
            x += nums[i];
            if(nums[i] == 0){
                if(abs(x - (sum-x)) == 0)ans+=2;
                else if(abs(x - (sum-x)) == 1)ans++;
            }
        }
        return ans;
    }
};",1454808128
Sanath_Kulla,Sanath_Kulla,46,3639,cpp,"
 

 #define int long long
struct node{
    int sum , mx , mn , inc = 0  , set = 0;
    bool is_set = false;
};
 
void merge(vector<node> &seg , int ind){
     seg[ind].sum = seg[2*ind+1].sum + seg[2*ind+2].sum;
     seg[ind].mn = min(seg[2*ind+1].mn , seg[2*ind+2].mn);
     seg[ind].mx = max(seg[2*ind+1].mx , seg[2*ind+2].mx);
}
 
node find_node(node one , node two){
    node res;
    res.sum = one.sum + two.sum;
    res.mx = max(one.mx , two.mx);
    res.mn = min(two.mn , one.mn);
    return res;
}
 
node initial(){
    node res;
    res.sum = 0 , res.mx = INT_MIN , res.mn = INT_MAX , res.inc = 0 , res.set = 0 , res.is_set = 0;
    return res;
}
 
int N;
class sgtree // use inc = false to set in update function
{
    vector<node> seg;
 
public:
    sgtree(int N)
    {
        seg.resize(4 * N + 10);
    }
 
    void build(vector<int> &arr , int ind = 0, int low = 0, int high = N-1)
    {
        if (low == high)
        {
            seg[ind].sum = seg[ind].mx = seg[ind].mn = arr[low];
            return;
        }
 
        int mid = (low + high) / 2;
        build(arr , 2 * ind + 1, low, mid);
        build(arr , 2 * ind + 2, mid + 1, high);
        merge(seg , ind);
    }
    void default_build(int ind = 0, int low = 0, int high = N-1)
    {
        if (low == high)
        {
            seg[ind].sum = 0;
            seg[ind].mx = INT_MIN;
            seg[ind].mn = INT_MAX;
            return;
        }
 
        int mid = (low + high) / 2;
        default_build(2 * ind + 1, low, mid);
        default_build(2 * ind + 2, mid + 1, high);
        merge(seg , ind);
    }
 
    void update(int l , int r , int val ,bool inc = true, int ind  = 0 ,  int low = 0, int high = N - 1) // l , r , val
    {
        if(seg[ind].is_set){
            seg[ind].sum = (high - low + 1)*seg[ind].set;
            seg[ind].mx = seg[ind].mn = seg[ind].set;
            if(low != high){
                    seg[2*ind+1].is_set = 1;
                    seg[2*ind+1].inc = 0;
                    seg[2*ind+1].set = seg[ind].set;
                    seg[2*ind+2].is_set = 1;
                    seg[2*ind+2].inc = 0;
                    seg[2*ind+2].set = seg[ind].set;  
            }
            seg[ind].is_set = 0;
        }
        if(seg[ind].inc != 0){
            seg[ind].sum += (high - low + 1)*seg[ind].inc;
            seg[ind].mn += seg[ind].inc;
            seg[ind].mx += seg[ind].inc;
            if(low != high){
                    seg[2*ind+1].inc += seg[ind].inc;
                    seg[2*ind+2].inc += seg[ind].inc;
            }        
            seg[ind].inc = 0;    
        }
 
        if (l > high || r < low || low > high)
            return;
 
        if (low >= l && high <= r)
        { 
            if(inc){
            seg[ind].sum += (high - low + 1) * val;
            seg[ind].mn += val;
            seg[ind].mx += val;
 
            if (low != high)
            {
                    seg[2*ind+1].inc += val;
                    seg[2*ind+2].inc += val;
            }
           }else{
            seg[ind].sum = (high - low + 1) * val;
            seg[ind].mn = val;
            seg[ind].mx = val;
            seg[ind].inc = 0;
            if (low != high)
            {
                seg[2*ind+1].is_set = 1 , seg[2*ind+1].set = val , seg[2*ind+1].inc = 0;
                seg[2*ind+2].is_set = 1 , seg[2*ind+2].set = val , seg[2*ind+2].inc = 0;
            }
           }
            return;

        }
 
        int mid = (low + high) / 2;
        update(l , r , val , inc , 2 * ind + 1, low, mid);
        update(l , r, val , inc , 2 * ind + 2, mid + 1, high);
        merge(seg , ind);
    }
 

 
    node query(int l , int r , int ind = 0 , int low =  0 , int high = N-1) // l , r
    {
       if(seg[ind].is_set){
            seg[ind].sum = (high - low + 1)*seg[ind].set;
            seg[ind].mx = seg[ind].mn = seg[ind].set;
            if(low != high){
                    seg[2*ind+1].is_set = 1;
                    seg[2*ind+1].inc = 0;
                    seg[2*ind+1].set = seg[ind].set;
                    seg[2*ind+2].is_set = 1;
                    seg[2*ind+2].inc = 0;
                    seg[2*ind+2].set = seg[ind].set;  
            }
            seg[ind].is_set = 0;
        }
        if(seg[ind].inc != 0){
            seg[ind].sum += (high - low + 1)*seg[ind].inc;
            seg[ind].mn += seg[ind].inc;
            seg[ind].mx += seg[ind].inc;
            if(low != high){
                    seg[2*ind+1].inc += seg[ind].inc;
                    seg[2*ind+2].inc += seg[ind].inc;
            }        
            seg[ind].inc = 0;    
        }
 
        if (l > high || r < low || low > high)
        {
            return initial();
        }
 
        if (low >= l && high <= r)
        {
            return seg[ind];
        }
 
        int mid = (low + high) / 2;
        return find_node(query(l , r , 2 * ind + 1, low, mid) ,  query(l , r , 2 * ind + 2, mid + 1, high));
    }

        int findFirst(int ind , int lo , int hi , int l , int r,int val){
        if(l > hi or r < lo or lo > hi or seg[ind].mx < val){
            return (int)1e9;
        }
        if(lo == hi){
            return lo;
        }
        int mid = (lo+hi)/2;
        if(lo >= l and hi <= r){
            if(seg[ind].mx >= val){
                if(lo <= mid and seg[2*ind+1].mx >= val)return findFirst(2*ind+1 , lo , mid , l , r , val);
                if(mid+1 <= hi and seg[2*ind+2].mx >= val)return findFirst(2*ind+2 , mid+1 , hi , l , r , val);
            }
            return (int)1e9;
        }

        return min(findFirst(2*ind+1 , lo , mid , l ,r , val) , findFirst(2*ind+2 , mid+1 , hi , l , r , val));
    }

};
 #undef int
class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        N = n;
        sgtree sg(n);
        vector<long long> v;
        for(auto it:nums)v.push_back(it);
        sg.build(v);
        if(sg.query(0 , n-1).mx == 0)return true;
        int k = 0;
        for(auto it:queries){
            k++;
            int l = it[0] , r = it[1] , val = 1;
            sg.update(l , r , -val);
            if(sg.query(0 , n-1).mx <= 0)return true;
        }
        return false;
    }
};",1454824202
Sanath_Kulla,Sanath_Kulla,46,3643,cpp,"
 

 #define int long long
struct node{
    int sum , mx , mn , inc = 0  , set = 0;
    bool is_set = false;
};
 
void merge(vector<node> &seg , int ind){
     seg[ind].sum = seg[2*ind+1].sum + seg[2*ind+2].sum;
     seg[ind].mn = min(seg[2*ind+1].mn , seg[2*ind+2].mn);
     seg[ind].mx = max(seg[2*ind+1].mx , seg[2*ind+2].mx);
}
 
node find_node(node one , node two){
    node res;
    res.sum = one.sum + two.sum;
    res.mx = max(one.mx , two.mx);
    res.mn = min(two.mn , one.mn);
    return res;
}
 
node initial(){
    node res;
    res.sum = 0 , res.mx = INT_MIN , res.mn = INT_MAX , res.inc = 0 , res.set = 0 , res.is_set = 0;
    return res;
}
 
int N;
class sgtree // use inc = false to set in update function
{
    vector<node> seg;
 
public:
    sgtree(int N)
    {
        seg.resize(4 * N + 10);
    }
 
    void build(vector<int> &arr , int ind = 0, int low = 0, int high = N-1)
    {
        if (low == high)
        {
            seg[ind].sum = seg[ind].mx = seg[ind].mn = arr[low];
            return;
        }
 
        int mid = (low + high) / 2;
        build(arr , 2 * ind + 1, low, mid);
        build(arr , 2 * ind + 2, mid + 1, high);
        merge(seg , ind);
    }
    void default_build(int ind = 0, int low = 0, int high = N-1)
    {
        if (low == high)
        {
            seg[ind].sum = 0;
            seg[ind].mx = INT_MIN;
            seg[ind].mn = INT_MAX;
            return;
        }
 
        int mid = (low + high) / 2;
        default_build(2 * ind + 1, low, mid);
        default_build(2 * ind + 2, mid + 1, high);
        merge(seg , ind);
    }
 
    void update(int l , int r , int val ,bool inc = true, int ind  = 0 ,  int low = 0, int high = N - 1) // l , r , val
    {
        if(seg[ind].is_set){
            seg[ind].sum = (high - low + 1)*seg[ind].set;
            seg[ind].mx = seg[ind].mn = seg[ind].set;
            if(low != high){
                    seg[2*ind+1].is_set = 1;
                    seg[2*ind+1].inc = 0;
                    seg[2*ind+1].set = seg[ind].set;
                    seg[2*ind+2].is_set = 1;
                    seg[2*ind+2].inc = 0;
                    seg[2*ind+2].set = seg[ind].set;  
            }
            seg[ind].is_set = 0;
        }
        if(seg[ind].inc != 0){
            seg[ind].sum += (high - low + 1)*seg[ind].inc;
            seg[ind].mn += seg[ind].inc;
            seg[ind].mx += seg[ind].inc;
            if(low != high){
                    seg[2*ind+1].inc += seg[ind].inc;
                    seg[2*ind+2].inc += seg[ind].inc;
            }        
            seg[ind].inc = 0;    
        }
 
        if (l > high || r < low || low > high)
            return;
 
        if (low >= l && high <= r)
        { 
            if(inc){
            seg[ind].sum += (high - low + 1) * val;
            seg[ind].mn += val;
            seg[ind].mx += val;
 
            if (low != high)
            {
                    seg[2*ind+1].inc += val;
                    seg[2*ind+2].inc += val;
            }
           }else{
            seg[ind].sum = (high - low + 1) * val;
            seg[ind].mn = val;
            seg[ind].mx = val;
            seg[ind].inc = 0;
            if (low != high)
            {
                seg[2*ind+1].is_set = 1 , seg[2*ind+1].set = val , seg[2*ind+1].inc = 0;
                seg[2*ind+2].is_set = 1 , seg[2*ind+2].set = val , seg[2*ind+2].inc = 0;
            }
           }
            return;

        }
 
        int mid = (low + high) / 2;
        update(l , r , val , inc , 2 * ind + 1, low, mid);
        update(l , r, val , inc , 2 * ind + 2, mid + 1, high);
        merge(seg , ind);
    }
 

 
    node query(int l , int r , int ind = 0 , int low =  0 , int high = N-1) // l , r
    {
       if(seg[ind].is_set){
            seg[ind].sum = (high - low + 1)*seg[ind].set;
            seg[ind].mx = seg[ind].mn = seg[ind].set;
            if(low != high){
                    seg[2*ind+1].is_set = 1;
                    seg[2*ind+1].inc = 0;
                    seg[2*ind+1].set = seg[ind].set;
                    seg[2*ind+2].is_set = 1;
                    seg[2*ind+2].inc = 0;
                    seg[2*ind+2].set = seg[ind].set;  
            }
            seg[ind].is_set = 0;
        }
        if(seg[ind].inc != 0){
            seg[ind].sum += (high - low + 1)*seg[ind].inc;
            seg[ind].mn += seg[ind].inc;
            seg[ind].mx += seg[ind].inc;
            if(low != high){
                    seg[2*ind+1].inc += seg[ind].inc;
                    seg[2*ind+2].inc += seg[ind].inc;
            }        
            seg[ind].inc = 0;    
        }
 
        if (l > high || r < low || low > high)
        {
            return initial();
        }
 
        if (low >= l && high <= r)
        {
            return seg[ind];
        }
 
        int mid = (low + high) / 2;
        return find_node(query(l , r , 2 * ind + 1, low, mid) ,  query(l , r , 2 * ind + 2, mid + 1, high));
    }

        int findFirst(int ind , int lo , int hi , int l , int r,int val){
        if(l > hi or r < lo or lo > hi or seg[ind].mx < val){
            return (int)1e9;
        }
        if(lo == hi){
            return lo;
        }
        int mid = (lo+hi)/2;
        if(lo >= l and hi <= r){
            if(seg[ind].mx >= val){
                if(lo <= mid and seg[2*ind+1].mx >= val)return findFirst(2*ind+1 , lo , mid , l , r , val);
                if(mid+1 <= hi and seg[2*ind+2].mx >= val)return findFirst(2*ind+2 , mid+1 , hi , l , r , val);
            }
            return (int)1e9;
        }

        return min(findFirst(2*ind+1 , lo , mid , l ,r , val) , findFirst(2*ind+2 , mid+1 , hi , l , r , val));
    }

};
 #undef int
class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        N = n;
        sgtree sg(n);
        vector<long long> v;
        for(auto it:nums)v.push_back(it);
        sg.build(v);
        if(sg.query(0 , n-1).mx == 0)return 0;
        int k = 0;
        for(auto it:queries){
            k++;
            int l = it[0] , r = it[1] , val = it[2];
            sg.update(l , r , -val);
            if(sg.query(0 , n-1).mx <= 0)return k;
        }
        return -1;
    }
};",1454821856
Sanath_Kulla,Sanath_Kulla,46,3658,cpp,"const int N = 1e5+10 , NN = 3;
int dp[N][NN];
class Solution {
public:
    int minDifference(vector<int>& nums) {
        #define int long long
        using ll = long long;
        int cnt = 0;
        int n = nums.size();
        ll d = -1;
        
        for(int  i = 0 ; i < n ; i++){
            if(nums[i] == -1)cnt++;
            if(i and nums[i] != -1 and nums[i-1] != -1)d = max<ll>(d , abs(nums[i] - nums[i-1]));
        }
        if(cnt == n or cnt == n-1){
            return 0;
        }
        if(cnt == 0){
            return d;
        }
        d = max<ll>(0 , d);
        ll lo = d , hi = 3e9;
        ll ans = hi;
        while(lo <= hi){
            ll mid = (lo+hi)/2;
            vector<pair<ll,ll>> vp;
            for(int i = 0 ; i < n ; i++){
                dp[i][0] = dp[i][1] = dp[i][2] = -1;
                if(nums[i] == -1){
                    if(i-1>=0 and nums[i-1] != -1){
                        vp.push_back({nums[i-1] - mid , nums[i-1]+mid});
                    }
                    if(i+1 < n and nums[i+1] != -1){
                        vp.push_back({nums[i+1] - mid , nums[i+1]+mid});
                    }
                }
            }
            sort(vp.begin() , vp.end());
            int cnt = 1;
            int maxi = vp[0].second;
            ll x = -1 , y = -1;
            for(int i = 1 ; i < vp.size() ; i++){
                if(maxi < vp[i].first){
                    x = maxi;
                    maxi = vp[i].second;
                    cnt++;
                }else{
                    maxi = min<ll>(maxi , vp[i].second);
                }
            }
            if(cnt > 2){
                lo = mid+1;
                continue;
            }
            if(cnt == 2){
                y = vp.back().first;
            }else{
                x = y = vp.back().first;
            }
            //check for this (x , y)
            auto find = [&](auto &&self , int ind , int prev)->bool{
                  if(ind >= n)return true;
                  if(dp[ind][prev] != -1)return (bool)dp[ind][prev];
                  bool yes = 0;
                  //0-x , 1-y,2-fix
                  if(nums[ind] != -1){
                      if(prev == 2){
                          yes |= self(self , ind+1 , 2);
                      }
                      if(prev == 0){
                          yes |= (abs(nums[ind] - x) <= mid) & (self(self , ind+1 , 2));
                      }
                      if(prev == 1){
                          yes |= (abs(nums[ind] - y) <= mid) & (self(self , ind+1 , 2)); 
                      }
                  }else{
                       //try x
                      if(prev == 2){
                          if(ind-1>=0){
                              if(abs(nums[ind-1] - x) <= mid){
                                  yes |= self(self , ind+1 , 0);
                              }
                          }else{
                                  yes |= self(self , ind+1 , 0);
                          }
                      }
                      if(prev == 0){
                          yes |= (abs(x - x) <= mid) & (self(self , ind+1 , 0));
                      }
                      if(prev == 1){
                          yes |= (abs(x - y) <= mid) & (self(self , ind+1 , 0)); 
                      }
                      //try y
                      if(prev == 2){
                          if(ind-1>=0){
                              if(abs(nums[ind-1] - y) <= mid){
                                  yes |= self(self , ind+1 , 1);
                              }
                          }else{
                                  yes |= self(self , ind+1 , 1);
                          }
                      }
                      if(prev == 0){
                          yes |= (abs(y - x) <= mid) & (self(self , ind+1 , 1));
                      }
                      if(prev == 1){
                          yes |= (abs(y - y) <= mid) & (self(self , ind+1 , 1)); 
                      }
                  }
                return (bool)(dp[ind][prev] = yes);
            };
            
            if(find(find , 0 , 2)){
                // cout<<mid<<"" ""<<x<<"" ""<<y<<endl;
                ans = mid;
                hi = mid-1;
            }else{
                lo = mid+1;
            }
            // return false;
            
        }
        #undef int
        return ans;
    }
};",1454898423
JeffreyLC,JeffreyLC,48,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        const int n = nums.size();
        vector<int> x(n), y(n);
        for (int i = 1; i < n; ++i) {
            x[i] = x[i - 1] + nums[i - 1];
        }
        for (int i = n - 2; i >= 0; --i) {
            y[i] = y[i + 1] + nums[i + 1];
        }
        int ans = 0;
        for (int i = 0; i < n; ++i) {
            if (nums[i] != 0) continue;
            if (x[i] == y[i]) {
                ans += 2;
            } else if (abs(x[i] - y[i]) == 1) {
                ++ans;
            }
        }
        return ans;
    }
};",1454809548
JeffreyLC,JeffreyLC,48,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        const int n = nums.size();
        vector<int> v(n);
        for (const vector<int>& q : queries) {
            ++v[q[0]];
            if (q[1] + 1 < n) {
                --v[q[1] + 1];
            }
        }
        for (int i = 1; i < n; ++i) {
            v[i] += v[i - 1];
        }
        for (int i = 0; i < n; ++i) {
            if (v[i] < nums[i]) return false;
        }
        return true;
    }
};",1454813761
JeffreyLC,JeffreyLC,48,3643,cpp,"class SegmentTree {
 public:
    SegmentTree(const vector<int>& nums) {
        n_ = nums.size();
        segs_.resize(n_ << 2, 0);
        lazy_.resize(n_ << 2, 0);
        Build(nums, 0, n_ - 1, 1);
    }
    
    long long Query(int lq, int rq) {
        return QueryUtil(0, n_ - 1, 1, lq, rq);
    }
    
    void UpdateRange(int lq, int rq, long long diff) {
        UpdateRangeUtil(0, n_ - 1, 1, lq, rq, diff);
    }
    
 private:
    int n_;
    vector<long long> segs_;
    vector<long long> lazy_;
    
    void Build(const vector<int>& nums, int l, int r, int id) {
        if (l == r) {
            segs_[id] = nums[l];
        } else {
            int mid = (l + r) >> 1;
            Build(nums, l, mid, id * 2);
            Build(nums, mid + 1, r, id * 2 + 1);
            segs_[id] = max(segs_[id * 2], segs_[id * 2 + 1]);
        }
    }
    
    long long QueryUtil(int l, int r, int id, int lq, int rq) {
        if (lazy_[id] != 0) {
            segs_[id] += lazy_[id];
            if (l != r) {
                lazy_[id * 2] += lazy_[id];
                lazy_[id * 2 + 1] += lazy_[id];
            }
            lazy_[id] = 0;
        }
        if (r < lq || l > rq) return LLONG_MIN;
        if (lq <= l && r <= rq) return segs_[id];
        int mid = (l + r) >> 1;
        return max(QueryUtil(l, mid, id * 2, lq, rq), QueryUtil(mid + 1, r, id * 2 + 1, lq, rq));
    }
    
    void UpdateRangeUtil(int l, int r, int id, int lq, int rq, long long diff) {
        if (lazy_[id] != 0) {
            segs_[id] += lazy_[id];
            if (l != r) {
                lazy_[id * 2] += lazy_[id];
                lazy_[id * 2 + 1] += lazy_[id];
            }
            lazy_[id] = 0;
        }
        if (r < lq || l > rq) return;
        if (lq <= l && r <= rq) {
            segs_[id] += diff;
            if (l != r) {
                lazy_[id * 2] += diff;
                lazy_[id * 2 + 1] += diff;
            }
        } else {
            int mid = (l + r) >> 1;
            UpdateRangeUtil(l, mid, id * 2, lq, rq, diff);
            UpdateRangeUtil(mid + 1, r, id * 2 + 1, lq, rq, diff);
            segs_[id] = max(segs_[id * 2], segs_[id * 2 + 1]);
        }
    }
};

class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        const int n = nums.size();
        SegmentTree seg_tree = SegmentTree(nums);
        if (seg_tree.Query(0, n - 1) <= 0) return 0;
        for (int i = 0; i < queries.size(); ++i) {
            seg_tree.UpdateRange(queries[i][0], queries[i][1], -queries[i][2]);
            if (seg_tree.Query(0, n - 1) <= 0) return i + 1;
        }
        return -1;
    }
};",1454825327
JeffreyLC,JeffreyLC,48,3658,cpp,"class Solution {
public:
    int minDifference(vector<int>& nums) {
        const int n = nums.size();
        vector<int> a;
        vector<pair<int, int>> one, two;
        vector<pair<int, int>> v;
        for (int i = 0; i < n; ++i) {
            if (nums[i] != -1) {
                v.push_back({nums[i], i});
            }
        }
        if (v.size() <= 1) return 0;
        if (v[0].second != 0) a.push_back(v[0].first);
        if (v.back().second != n - 1) a.push_back(v.back().first);
        int max_diff = 0;
        for (int i = 1; i < v.size(); ++i) {
            int x = min(v[i - 1].first, v[i].first);
            int y = max(v[i - 1].first, v[i].first);
            int val_diff = y - x;
            int index_diff = v[i].second - v[i - 1].second;
            if (index_diff == 1) {
                max_diff = max(max_diff, val_diff);
            } else if (index_diff == 2) {
                one.push_back({x, y});
                max_diff = max(max_diff, (val_diff + 1) / 2);
            } else {
                two.push_back({x, y});
                max_diff = max(max_diff, (val_diff + 2) / 3);
            }
        }
        int l = max_diff, r = 1e9;
        while (l < r) {
            int m = (l + r) / 2;
            int choice = INT_MAX;
            for (int num : a) {
                choice = min(choice, num + m);
            }
            for (auto [fst, snd] : one) {
                choice = min(choice, fst + m);
            }
            for (auto [fst, snd] : two) {
                choice = min(choice, fst + m);
            }
            vector<pair<int, int>> intervals;
            for (int num : a) {
                if (num - m <= choice && choice <= num + m) continue;
                intervals.push_back({num - m, num + m});
            }
            for (auto [fst, snd] : one) {
                if (snd - m <= choice && choice <= fst + m) continue;
                intervals.push_back({snd - m, fst + m});
            }
            for (auto [fst, snd] : two) {
                if (snd - m * 2 <= choice && choice <= fst + m) {
                    int x = min(choice, snd);
                    int y = max(choice, snd);
                    if (y - m <= choice && choice <= x + m) continue;
                    intervals.push_back({y - m, x + m});
                } else {
                    if (snd - m <= choice && choice <= fst + m) continue;
                    intervals.push_back({snd - m, fst + m});
                }
            }
            int c = INT_MIN, d = INT_MAX;
            for (pair<int, int> p : intervals) {
                c = max(c, p.first);
                d = min(d, p.second);
            }
            if (c <= d) {
                r = m;
            } else {
                l = m + 1;
            }
        }
        return l;
    }
};",1454907147
kailam11223,kailam11223,50,3616,cpp,"class Solution {
private:
    bool cal(vector<int> v, int i, int dir){
        while(i >= 0 && i < v.size()){
            if(v[i] > 0){
                v[i]--;
                dir*=-1;
            }
            i += dir;
        }
        for(auto x : v){
            if(x > 0) return false;
        }
        return true;
    }
public:
    int countValidSelections(vector<int>& nums) {
        int ret = 0;
        for(int i = 0; i < nums.size(); ++i){
            if(nums[i] > 0) continue;
            ret += cal(nums, i, -1);
            ret += cal(nums, i, 1);
        }
        return ret;
    }
};",1454811737
kailam11223,kailam11223,50,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        vector<int> ps(n+1, 0);
        for(const auto& q : queries){
            ps[q[0]]++;
            ps[q[1]+1]--;
        }
        
        int s = 0;
        for(int i = 0; i < n; ++i){
            s += ps[i];
            if(s < nums[i]) return false;
        }
        return true;
    }
};",1454820394
kailam11223,kailam11223,50,3643,cpp,"class Solution {
private:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries, int k) {
        int n = nums.size();
        vector<int> ps(n+1, 0);
        for(int i = 0; i < k ; ++i){
            auto q = queries[i];
            ps[q[0]]+=q[2];
            ps[q[1]+1]-=q[2];
        }
        
        int s = 0;
        // cout<<endl<<""k=""<<k<<endl;;
        for(int i = 0; i < n; ++i){
            // cout<<s<<"","";
            s += ps[i];
            if(s < nums[i]) return false;
        }
        return true;
    }
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int l = 0; int r = queries.size();
        while(l < r){
            int m = (l+r)>>1;
            if(isZeroArray(nums, queries, m)){
                r = m;
            } else {
                l = m+1;
            }
        }
        return isZeroArray(nums, queries, l)?l:-1;
    }
};",1454835209
kailam11223,kailam11223,50,3658,cpp,"class Solution {
private:
    bool test(vector<int> nums, int d){
        vector<pair<int, int>> ivls;
        int x1 = m+d;
        int x2 = M-d;
        if(x2<x1)swap(x1, x2);
        // cout<<""x1=""<<x1<<"", x2=""<<x2<<"", d=""<<d<<endl;
        for(int i = 0; i < n; ++i){
            int x = nums[i];
            // cout<<x<<"" ,nxt=""<<nxt[i]<<endl;
            if(nxt[i]==-1) {
                if(x==-1||(i+1==n)) return true;
                if(abs(x-x1) <= d) return true;
                if(abs(x-x2) <= d) return true;
                return false;
            }
            if(x==-1) {
                if(abs(nxt[i]-x1)<=d) continue;
                if(abs(nxt[i]-x2)<=d) continue;
                return false;
            }
            if(nums[i+1]!=-1){
                if(abs(x-nums[i+1]) > d) return false;
                continue;
            }
            // cout<<""here""<<endl;
            if(abs(x-x2) <= d && abs(nxt[i]-x2) <= d){
                nums[i+1] = x2;
                continue;
            }
            if(abs(x-x1) <= d && abs(nxt[i]-x1) <= d){
                nums[i+1] = x1;
                continue;
            }
            if(nxt[i]>=x){
                if(abs(x-x1) > d) return false;
                nums[i+1] = x1;
            } else {
                if(abs(x-x2) > d) return false;
                nums[i+1] = x2;
            }
        }
        return true;
    }
public:
    int minDifference(vector<int>& nums) {
        n = nums.size();
        int l = 0; int r = 0;
        for(int i = 0; i < n; ++i){
            r = max(r, nums[i]);
            if(nums[i]==-1) continue;
            if((i > 0 && nums[i-1]==-1)||(i+1 < n && nums[i+1]==-1)){
                m = min(m, nums[i]);
                M = max(M, nums[i]);
            }
            if(nums[i]!=-1 && i > 0 && nums[i-1]!=-1){
                l = max(l, abs(nums[i]-nums[i-1]));
            }
        }
        
        nxt = vector<int>(n, -1);
        for(int i = n-2; i >= 0; --i){
            nxt[i] = (nums[i+1]!=-1)?nums[i+1]:nxt[i+1];
        }
        // cout<<""m=""<<m<<"", M=""<<M<<endl;
        while(l < r){
            // cout<<""l=""<<l<<"", r=""<<r<<endl;
            int m = (l+r)>>1;
            if(test(nums, m)){
                r = m;
            } else {
                l = m+1;
            }
        }
        return l;
    }
private:
int n;
int m = 1e9;
int M = 0;
vector<int> nxt;
};",1454922736
Md Abedin,MdAbedin,52,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        return sum({0:2,1:1}.get(abs(sum(nums[:i])-sum(nums[i+1:])),0) if nums[i] == 0 else 0 for i in range(len(nums)))",1454820915
Md Abedin,MdAbedin,52,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        subs = [0]*(len(nums)+1)

        for l,r in queries:
            subs[l] += 1
            subs[r+1] -= 1

        subs = list(accumulate(subs))

        return all(s >= x for x,s in zip(nums,subs))
",1454823356
Md Abedin,MdAbedin,52,3643,python3,"class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        def works(k):
            subs = [0]*(len(nums)+1)
    
            for l,r,v in queries[:k]:
                subs[l] += v
                subs[r+1] -= v
    
            subs = list(accumulate(subs))
    
            return all(s >= x for x,s in zip(nums,subs))

        return -1 if (ans:=bisect_left(range(len(queries)+1),True,key=works)) == len(queries)+1 else ans",1454826423
Md Abedin,MdAbedin,52,3658,python3,"class Solution:
    def minDifference(self, nums: List[int]) -> int:
        ranges = []
        s = []
        ans = 0

        for num in nums:
            if num == -1:
                if s and s[-1][0] == -1: s[-1][1] += 1
                else: s.append([-1,1])
            else:
                if not s:
                    s.append([num,1])
                elif s[-1][0] != -1:
                    num2 = s.pop()[0]
                    ans = max(ans,abs(num-num2))
                    s.append([num,1])
                else:
                    _,c = s.pop()
                    num2 = s.pop()[0] if s else num
                    ranges.append([min(c,2),min(num,num2),max(num,num2)])
                    s.append([num,1])

        if len(s) == 2:
            _,c = s.pop()
            num = s.pop()[0]
            ranges.append([max(c,2),num,num])

        if not ranges: return ans

        m1,m2 = min(x for r in ranges for x in r[1:]),max(x for r in ranges for x in r[1:])
        
        def works(d):
            x,y = sorted([m1+d,m2-d])

            for t,x1,x2 in ranges:
                if t == 1:
                    if min(max(x-x1,x2-x),max(y-x1,x2-y)) > d: return False
                else:
                    if min(max(x-x1,x2-x),max(y-x1,x2-y)) <= d: continue
                    if max(x-x1,y-x,x2-y) <= d: continue
                    return False

            return True

        ans = max(ans,bisect_left(range(10**9),True,key=works))
        
        return ans






























        ",1454911667
Gaurish Baliga,notQueue,53,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& a) {
        
        int n = a.size();
        vector<int>prefix(n + 2), suffix(n + 2);
        
        for(int i = 1; i <= n; i++) {
            prefix[i] = (prefix[i - 1] + a[i - 1]);
        }
        
        for(int i = n; i >= 1; i--) {
            suffix[i] = (suffix[i + 1] + a[i - 1]);
        }
        
        int answer = 0;
        
        for(int i = 1; i <= n; i++) {
            if(a[i - 1] != 0) continue;
            
            if(prefix[i - 1] >= suffix[i + 1] && prefix[i - 1] - suffix[i + 1] <= 1) {
                answer++;
            }
            
            if(prefix[i - 1] <= suffix[i + 1] && suffix[i + 1] - prefix[i - 1] <= 1) {
                answer++;
            }
        }
        
        return answer;
        
    }
};",1454822925
Gaurish Baliga,notQueue,53,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        
        vector<long long>prefix(n + 1);
        
        for(auto &i : queries) {
            prefix[i[0]] += 1;
            prefix[i[1] + 1] -= 1; 
        }
        
        for(int i = 0; i < n; i++) {
            if(i) prefix[i] += prefix[i - 1];
            if(prefix[i] < nums[i]) return false;
        }
        return true;
    }
};",1454829338
Gaurish Baliga,notQueue,53,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        
        auto okay = [&](int x) -> bool {
            vector<long long>prefix(n + 1);
        
            for(int i = 0; i < x; i++) {
                prefix[queries[i][0]] += queries[i][2];
                prefix[queries[i][1] + 1] -= queries[i][2]; 
            }

            for(int i = 0; i < n; i++) {
                if(i) prefix[i] += prefix[i - 1];
                if(prefix[i] < nums[i]) return false;
            }
            
            return true;
        };
        

        
        int left = 0, right = queries.size(), answer = -1;
        
        while(left <= right) {
            int mid = (left + right) / 2;
            if(okay(mid)) answer = mid, right = mid - 1;
            else left = mid + 1;
        }
        
        return answer;
    }
};",1454834205
Gaurish Baliga,notQueue,53,3658,cpp,"class Solution {
public:
    int minDifference(vector<int>& nums) {    
        
            ios_base::sync_with_stdio(false);
            cin.tie(NULL);
        
        vector<int>rem;       
        
        int mx = 0;
        
        for(int i = 0; i < nums.size(); i++) {                
            if(nums[i] == -1) continue;
            else if(i && nums[i - 1] == -1) rem.push_back(nums[i]);
            else if(i + 1 < nums.size() && nums[i + 1] == -1) rem.push_back(nums[i]);
            if(i + 1 < nums.size() && nums[i + 1] != -1) {
                mx = max(mx, abs(nums[i] - nums[i + 1]));
            }
        }
        
        sort(rem.begin(), rem.end());
            
        int left = 0, right = *max_element(nums.begin(), nums.end()), answer = *max_element(nums.begin(), nums.end());
        
        auto ok = [&](int x) -> bool {
            vector<pair<int,int>>ranges;
            
            for(auto &i : rem) {
                ranges.push_back({max(1, i - x), min((int)2e9, i + x)});
            }
        
            int idx = 0;
            while(idx < ranges.size() && ranges[idx].first <= ranges[0].second) idx++;
            
            if(ranges.empty()) return (mx <= x);
                        
            int l = ranges[0].second, r = 2e9;
            
            for(int i = idx; i < ranges.size(); i++) {
                l = max(l, ranges[i].first);
                r = min(r, ranges[i].second);
            }
            
            if(l > r) return false;
            
            vector<vector<int>>dp(nums.size(), vector<int>(2, -1));
            
            int first = ranges[0].second, second = l;
            
            auto f = [&](int i, int j, auto &&self) -> int {
                if(i == nums.size()) return 0;
                if(dp[i][j] != -1) return dp[i][j];
                
                if(i == 0) return min(self(i + 1, 0, self), self(i + 1, 1, self));
                
                int prevElement = (nums[i - 1] == -1 ? (j == 0 ? first : second) : nums[i - 1]);
                
                if(nums[i] == -1) return dp[i][j] = 
                    min(max(abs(second - prevElement), self(i + 1, 1, self)), 
                        max(abs(first - prevElement), self(i + 1, 0, self)));
                
                return dp[i][j] = max(abs(nums[i] - prevElement), self(i + 1, 0, self));
            };
                        
            return (f(0, 0, f) <= x);
        };
        
        while(left <= right) {
            int mid = (left + right) / 2;    
            if(ok(mid)) answer = mid, right = mid - 1;
            else left = mid + 1;
        }        
        
        return max(answer, mx);
    }
};",1454914823
luck,papaya,55,3616,python3,"import math 
import copy
from typing import * 
from heapq import * 
from collections import * 

class Solution:
    
    
    def check( self , i , dir ) : 
        
        
        if( i < 0 or i >= self.n ) : 
            sum_val = sum( self.b ) ; 
            return sum_val == 0 ; 

        key = tuple( [ i , dir , tuple(self.b)] ) ; 
        if( key in self.cache ) :
            return self.cache[key] ; 
        
        if( self.b[i] > 0 ) : 
            self.b[i] -= 1 ; 
            dir = 1 - dir ; 
            

        ret = 0 ; 
        if( dir == 1 ) :
            ret = self.check( i + 1 , dir ) ; 
        else : 
            ret = self.check( i - 1 , dir ) ; 
        
        self.cache[ key ] = ret ; 
        return ret ; 
    
    def ok( self , i , dir ) : 
        
        self.b = copy.copy( self.a ) ; 
        return self.check( i , dir ) ; 
        
    def solve( self ) : 
        
        self.cache = {} ;
        
        self.ans = 0 ; 
        for i in range( self.n ) : 
            if( self.a[i] == 0 ) :
                
                s1 = 0 ; 
                s2 = 0 ; 
                if( i - 1 >= 0 ) :
                    s1 = sum( self.a[0: i ] ) ; 
                
                if( i+1 < self.n ) : 
                    s2 = sum( self.a[i+1 : ] ) ; 
                    
                
                if( s1 == s2 ) : 
                    self.ans += 2 ; 

                if( abs( s1 - s2 ) == 1 ) :
                    self.ans += 1; 
                
        return self.ans ; 
    
    def countValidSelections(self, nums: List[int]) -> int:
        
        self.a = nums ; 
        self.n = len( self.a ) ; 
        
        return self.solve() ; 
        
def main( ) : 

    t = Solution() ; 

    nums = [1,0,2,0,3]
    
    
    # nums = [2,3,4,0,4,1,0]
    
    ans = t.countValidSelections ( nums ) ; 

    print(  ans ); 

if __name__ == '__main__':
    main()",1454924400
luck,papaya,55,3639,cpp,"#include<bits/stdc++.h>
using namespace std ; 
using int64 = long long ; 

const int64 INF = 1e18 ; 

template<typename T = int64 >
class Lazy_Segment_Tree { 
private:
    inline int ls( int u) { return u << 1 ; } ; 
    inline int rs( int u ) { return (u<<1) | 1  ; }
    inline void _mark( int u , int left , int right , T add_val ){// 整个区间应用这个操作,但不向下传递

        int size = right - left + 1 ; 
        t[ u ].sum = t[u].sum + size * add_val  ;       
        t[ u ].lazy_add   = t[u].lazy_add + add_val  ; 
    }
    inline void _pushdown( int u , int left , int right ) { // 整个区间操作,向下传递一层，并清空本层lazy标记

        if( t[ u ].lazy_add == 0 ) {
            return ; 
        }
        int mid = ( left + right ) >> 1 ; 
        _mark( ls(u) , left , mid ,  t[u].lazy_add ) ; 
        _mark( rs(u) , mid + 1 , right ,  t[u].lazy_add ) ; 
        t[ u ].lazy_add = 0 ; 
    }
    inline void _combine ( int u ) {
        t[ u ].sum =  t[ ls(u) ].sum +  t[ rs(u) ].sum   ;
    }
private:
    struct Node {          
        T sum ,  lazy_add ; // lazy variable 
    } ; 
    vector< Node > t ; 
    int n ; 
public:
    void init( int  tn ) {
        vector<T> a ( tn , 0 ) ;
        init( tn , a ) ; 
    }
    void init( int tn , vector<T> & a ) { //输入数组的下标，默认下标从0开始
        n = tn ;         
        t.resize( n * 4 ) ;      
        
        function<void(int,int,int)> build_tree = [&]( int u , int s , int e  ) {
            if( s == e ) {
                t[ u ].sum = a[ s ] ; 
                t[ u ].lazy_add = 0 ; 
                return ; 
            }
            int mid = ( s + e ) / 2 ; 
            build_tree( ls(u) , s , mid  ) ; 
            build_tree( rs(u) , mid + 1 , e ) ;  
            _combine ( u );   
            t[u].lazy_add = 0 ;        
        } ; 
        build_tree( 1 , 0 , n - 1 ) ; 
    } 
    void range_add( int x , int y , T add_val , int u = 1 , int left = 0 , int right = -1 ) {
        if( right == -1 ) right = n - 1 ;

        if( x <= left && right <= y )  { // cotain [left,right], _mark it 
            _mark( u , left , right , add_val ) ; 
            return ; 
        } 
        _pushdown( u , left , right ) ; 

        int mid = ( left + right ) >> 1 ; 
        if( x <= mid ) {
            range_add( x , y , add_val , ls(u) ,  left , mid ) ; 
        }
        if( y > mid  ) {
            range_add( x , y , add_val , rs(u) , mid + 1 , right ) ; 
        }
        _combine( u ) ;  
    }
    T get_range_sum( int x , int y  , int u = 1 , int left = 0 , int right = -1  ) {
        if( right == -1 ) right = n - 1 ;

        int mid = ( left + right ) >> 1 ; 
        if( x <= left && right <= y   )  { // cotain [left,right], _mark it 
            return t[ u ].sum ; 
        }      
        _pushdown( u , left , right ) ; 
        T ret = 0 ; 
        if( x <= mid ) {
            ret += get_range_sum( x , y  , ls(u) ,  left , mid ) ; 
        }
        if( y > mid  ) {
            ret += get_range_sum( x , y , rs(u) , mid + 1 , right ) ; 
        }
        return  ret  ; 
    }
} ; 


class Solution {
public:

    Lazy_Segment_Tree< int64 > t ; 

    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        auto & a= nums ; 
        int n = a.size() ; 

        t.init( n ) ; 
        for( auto &p : queries ) {
            int L = p[0] , R = p[1] ; 
            
            t.range_add( L , R , 1 ) ; 
        }    

        for( int i = 0 ; i < n ; i++ ) {
            auto val = t.get_range_sum( i , i ) ; 
            if( val >= a[i] ) {

            } else {
                return false ; 
            }
        }
        return true ; 
    }
};




int m22ain( )  { 
    Solution  t; 

    vector<int> a ;
    int n ; 

    a = {} ; 
    n = 14 ; 
    
    vector<int> nums ; 
    vector< vector<int>> queries; 

    nums = { 1,0,1 } ; 
    queries =  { { 0,2 }} ; 



    nums = { 4,3,2,1 } ; 
    queries = { { 1 , 3 } , { 0 , 2 }} ; ///[[1,3],[0,2]]

    auto ans = t.isZeroArray ( nums , queries ) ; 
    cout << ans << ""\n"" ;


    return 0 ; 
}
",1454820537
luck,papaya,55,3643,cpp,"#include<bits/stdc++.h>
using namespace std ; 
// using int64 = long long ; 

auto __OI_INIT__ = []() {
    ios::sync_with_stdio(0), cin.tie(0) , cout.tie(0);
    cout << fixed << setprecision(12); return 0 ; 
}();


template<typename T = int >
class Lazy_Segment_Tree { 
private:
    inline int ls( int u) { return u << 1 ; } ; 
    inline int rs( int u ) { return (u<<1) | 1  ; }
    inline void _mark( int u , int left , int right , T add_val ){// 整个区间应用这个操作,但不向下传递

        int size = right - left + 1 ;     
        t[ u ].lazy_add   = t[u].lazy_add + add_val  ; 
    }
    inline void _pushdown( int u , int left , int right ) { // 整个区间操作,向下传递一层，并清空本层lazy标记

        if( t[ u ].lazy_add == 0 ) {
            return ; 
        }
        int mid = ( left + right ) >> 1 ; 
        _mark( ls(u) , left , mid ,  t[u].lazy_add ) ; 
        _mark( rs(u) , mid + 1 , right ,  t[u].lazy_add ) ; 
        t[ u ].lazy_add = 0 ; 
    }
    inline void _combine ( int u ) {
        // t[ u ].sum =  t[ ls(u) ].sum +  t[ rs(u) ].sum   ;
    }
private:
    struct Node {          
        T  lazy_add ; // lazy variable 
    } ; 
    vector< Node > t ; 
    int n ; 
public:
    void init( int  tn ) {
        n = tn ;         
        t.resize( n * 4 ) ;      
        
        function<void(int,int,int)> build_tree = [&]( int u , int s , int e  ) {
            if( s == e ) {
                t[ u ].lazy_add = 0 ; 
                return ; 
            }
            int mid = ( s + e ) / 2 ; 
            build_tree( ls(u) , s , mid  ) ; 
            build_tree( rs(u) , mid + 1 , e ) ;  
            _combine ( u );   
            t[u].lazy_add = 0 ;        
        } ; 
        build_tree( 1 , 0 , n - 1 ) ; 
    } 
    void range_add( int x , int y , T add_val , int u = 1 , int left = 0 , int right = -1 ) {
        if( right == -1 ) right = n - 1 ;

        if( x <= left && right <= y )  { // cotain [left,right], _mark it 
            _mark( u , left , right , add_val ) ; 
            return ; 
        } 
        _pushdown( u , left , right ) ; 

        int mid = ( left + right ) >> 1 ; 
        if( x <= mid ) {
            range_add( x , y , add_val , ls(u) ,  left , mid ) ; 
        }
        if( y > mid  ) {
            range_add( x , y , add_val , rs(u) , mid + 1 , right ) ; 
        }
        _combine( u ) ;  
    }
    T get_range_sum( int x , int y  , int u = 1 , int left = 0 , int right = -1  ) {
        if( right == -1 ) right = n - 1 ;

        int mid = ( left + right ) >> 1 ; 
        if( x <= left && right <= y   )  { // cotain [left,right], _mark it 
            return t[ u ].lazy_add ; 
        }      
        _pushdown( u , left , right ) ; 
        T ret = 0 ; 
        if( x <= mid ) {
            ret += get_range_sum( x , y  , ls(u) ,  left , mid ) ; 
        }
        if( y > mid  ) {
            ret += get_range_sum( x , y , rs(u) , mid + 1 , right ) ; 
        }
        return  ret  ; 
    }
} ; 


class Solution {
public:

    Lazy_Segment_Tree< int > t ; 


    int check( int K , vector<int>& nums, vector<vector<int>>& queries) {
        
        auto & a= nums ; 
        int n = a.size() ; 

        t.init( n ) ; 
        for( int j = 0 ; j < K ; j++ ) {
            auto &p = queries[j] ;
            int L = p[0] , R = p[1] ; 
            int val = p[2] ; 
            
            t.range_add( L , R , val ) ; 
        }    

        for( int i = 0 ; i < n ; i++ ) {
            auto val = t.get_range_sum( i , i ) ; 
            if( val >= a[i] ) {

            } else {
                return false ; 
            }
        }
        return true ; 
    }

    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        
        int low = 0 ; 
        int high = queries.size() ; 

        int ans = -1 ; 
        while( low <=  high ) {
            int mid = ( low + high ) >> 1 ; 
            if( check( mid , nums , queries )) {

                ans = mid ; 
                high = mid - 1 ; 
            } else {
                low = mid + 1 ; 
            }
        }
        return ans ; 
    }
};




int mai22n( )  { 
    Solution  t; 

    vector<int> a ;
    int n ; 

    a = {} ; 
    n = 14 ; 
    
    vector<int> nums ; 
    vector< vector<int>> queries; 

    nums = { 2 , 0 , 2 } ; 
    queries = { { 0 , 2 , 1 } , { 0 , 2 , 1 } , { 1 ,  1 , 3 }} ; 
    

    // nums = { 4 , 3 , 2 , 1 } ; 
    // queries = { { 1 , 3 , 2 } , { 0 , 2 , 1 }} ; 

    auto ans = t.minZeroArray ( nums , queries ) ; 
    cout << ans << ""\n"" ;


    return 0 ; 
}
",1454837560
luck,papaya,55,3658,cpp,"#include<bits/stdc++.h>
using namespace std ; 
using int64 = long long ; 

const int64 INF = 1e18 ; 


class Sol_1 {
public:
    vector< pair<int64 , int64 > > info ; 
    int m ; 

    int base ; 

    bool ok( int64 K ) { 

        // cout << ""\n\n K : "" << K << ""\n"" ; 

        vector< pair<int64 , int64 >> pinfo ; 
        for( int i = 0 ; i < m ; i++ ) { 
            auto [ x , y ] = info[i] ; 
            
            int64 start = max( x , y ) - K ; 
            int64 end = min( x , y ) + K ; 

            if( start <= 0 ) {
                start = 1 ; 
            }
            if( start > end ) {
                // cout << ""error: start: ""<< start << "" end: "" << end << ""\n"" ; 
                // cout << ""i: "" << i << "" x: "" <<x << "" y: "" << y << "" k: "" << K << "" \n"" ; 

                return false ; 
            }
            pinfo.emplace_back( start , end ) ; 
        }
        // cout << ""yes K : "" << K << ""\n"" ; 
        sort( pinfo.begin() , pinfo.end() ) ; 

        // for( auto [ low , high ] : pinfo ) {
        //     cout << ""low; "" << low << "" high : "" << high << ""\n"" ; 
        // }

        
        int64 right = pinfo[0].second ; 

        int i = 1 ; 
        while( i < m ) {

            auto [ start , end ] = pinfo[i] ; 
            if( start <= right ) {
                right = min( right , end ) ; 
                i = i + 1 ; 
            }
            else {
                break ; 
            }
        }

        if( i >= m ) {
            return true ; 
        }

        right = pinfo[i].second ; 
        while( i < m ) {

            auto [ start , end ] = pinfo[i] ; 
            if( start <= right ) {
                right = min( right , end ) ; 
                i = i + 1 ; 
            }
            else {
                break ; 
            }
        }

        if( i >= m ) {
            return true ; 
        }
        return false ; 
    }
    int solve() { 
        m = info.size() ; 


        // for( auto [ start , end ] : info ) {
        //     cout << "" start: "" << start << "" "" << end << ""\n"" ; 
        // }
        // cout << "" over \n"" ; 


        int64 low = base ; 
        int64 high = 1e9 ; 

        int64 ret = high ; 

        while( low <= high ) {
            int64 mid = ( low + high ) >> 1 ; 
            if( ok( mid ) ) { 
                ret = mid ; 
                high = mid - 1 ; 
            } else {
                low = mid + 1 ; 
            }
        }
        return ret ;
    }
    int minDifference(vector<int>& nums) {
        auto &a = nums ; 
        int n = a.size() ; 

        base = 0 ; 
        for( int i = 1 ; i < n ; i++ ) {
            if( a[i] != -1 && a[i-1] != -1 ) {
                int D = abs( a[i] - a[i-1] ) ; 
                base = max( base , D ) ; 
            }
        }
        info = {} ;

        int i = 0 ; 
        for( ;  i < n ;  ) {
            if( a[i] != -1 ) {
                i = i + 1 ;
                continue ; 
            }

            int j = i + 1 ; 
            while( j < n && a[j] == -1 ) { 
                j = j + 1 ; 
            }

            j = j - 1 ; 


            int64 x = INF , y = INF ; 
            if( i - 1 >= 0 ) {
                x = a[i-1] ; 
            }
            if( j + 1 < n ) {
                y = a[j+1] ; 
            }
            if( i - 1 < 0 ) {
                x = y ; 
            } 
            if( j + 1 >= n ) { 
                y = x ; 
            }
            if( x > y ) {
                swap( x , y ) ; 
            }

            
            info.emplace_back( x , y ) ; 

            i = j + 1 ; 
        }

        if( info.size() == 0 ) {
            return base ; 
        }

        return solve() ; 
    }
};



class Sol_2 {
public:
    vector< pair<int64 , int64 > > info ; 
    int m ; 

    int base ; 

    bool ok( int64 K ) { 

        // cout << ""\n\n K222 : "" << K << ""\n"" ; 

        vector< pair<int64 , int64 >> pinfo ; 
        for( int i = 0 ; i < m ; i++ ) { 
            auto [ x , y ] = info[i] ; 
            
            int64 start = max( x , y ) - K ; 
            int64 end = min( x , y ) + K ; 

            if( start <= 0 ) {
                start = 1 ; 
            }
            if( start > end ) {
                // cout << ""222error: start: ""<< start << "" end: "" << end << ""\n"" ; 
                // cout << ""222i: "" << i << "" x: "" <<x << "" y: "" << y << "" k: "" << K << "" \n"" ; 

                return false ; 
            }
            pinfo.emplace_back( start , end ) ; 
        }
        // cout << ""yes K22 : "" << K << ""\n"" ; 
        sort( pinfo.begin() , pinfo.end() ) ; 

        // for( auto [ low , high ] : pinfo ) {
        //     cout << ""222low; "" << low << "" high : "" << high << ""\n"" ; 
        // }

        
        int64 right = pinfo[0].second ; 

        int i = 1 ; 
        while( i < m ) {

            auto [ start , end ] = pinfo[i] ; 
            if( start <= right ) {
                right = min( right , end ) ; 
                i = i + 1 ; 
            }
            else {
                break ; 
            }
        }

        if( i >= m ) {
            return true ; 
        }
        

        if( i >= m ) {
            return true ; 
        }

        int64 right2 = pinfo.back().first ; 

        for( int j = i ; j < m;  j++ ) {

            auto [ start , end ] = pinfo[j] ; 
            if( start <= right2 && right2 <= end ) {

            } else {
                return false ; 
            }
        }

        return abs( right2 - right ) <= K ; 
    }
    int solve() { 
        m = info.size() ; 


        // for( auto [ start , end ] : info ) {
        //     cout << "" start: "" << start << "" "" << end << ""\n"" ; 
        // }
        // cout << "" over \n"" ; 


        int64 low = base ; 
        int64 high = 1e9 ; 

        int64 ret = high ; 

        while( low <= high ) {
            int64 mid = ( low + high ) >> 1 ; 
            if( ok( mid ) ) { 
                ret = mid ; 
                high = mid - 1 ; 
            } else {
                low = mid + 1 ; 
            }
        }
        return ret ;
    }
    int minDifference(vector<int>& nums) {
        auto &a = nums ; 
        int n = a.size() ; 

        base = 0 ; 
        for( int i = 1 ; i < n ; i++ ) {
            if( a[i] != -1 && a[i-1] != -1 ) {
                int D = abs( a[i] - a[i-1] ) ; 
                base = max( base , D ) ; 
            }
        }
        info = {} ;

        int i = 0 ; 
        for( ;  i < n ;  ) {
            if( a[i] != -1 ) {
                i = i + 1 ;
                continue ; 
            }

            int j = i + 1 ; 
            while( j < n && a[j] == -1 ) { 
                j = j + 1 ; 
            }

            j = j - 1 ; 


            int64 x = INF , y = INF ; 
            if( i - 1 >= 0 ) {
                x = a[i-1] ; 
            }
            if( j + 1 < n ) {
                y = a[j+1] ; 
            }
            if( i - 1 < 0 ) {
                x = y ; 
            } 
            if( j + 1 >= n ) { 
                y = x ; 
            }
            if( x > y ) {
                swap( x , y ) ; 
            }

            if( x == y || i == j ) { 
                info.emplace_back( x , y ) ; 
            }
            else {
                info.emplace_back( x , x ) ; 
                info.emplace_back( y , y ) ; 
            }
            i = j + 1 ; 
        }

        if( info.size() == 0 ) {
            return base ; 
        }

        return solve() ; 
    }
};



class Solution {
public:
    int minDifference(vector<int>& nums) {

        Sol_1 t1 ; 
        Sol_2 t2 ; 

        auto ans_1 = t1.minDifference( nums ) ; 
        auto ans_2 = t2.minDifference( nums ) ;

        return min( ans_1 , ans_2 ) ; 
    }
};



int m2ain( )  { 
    Solution  t; 

    vector<int> a ;
    
    a = { 1,2,-1,10,8 } ; 

    a = { -1,-1,-1 } ; 

    a = { -1,10,-1,8 } ; 

    a = { 1 , 12 } ; 

    a = { 14,-1,-1,46 } ; 

    auto ans = t.minDifference (  a ) ; 
    cout << ans << ""\n"" ;


    return 0 ; 
}
",1454915940
Satj,Satj,57,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& a) {
        // for each 0 prefix
        int tot = accumulate(a.begin(), a.end(), 0);
        int cur = 0, n = a.size();
        int ret = 0;
        for (int i = 0; i < n; i++) {
            cur += a[i];
            if (a[i] == 0) {
                int res = abs(tot - cur - cur);
                if (res == 0)
                    ret += 2;
                if (res == 1)
                    ret += 1;
            }
        }
        return ret;
    }
};",1454913173
Satj,Satj,57,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& a, vector<vector<int>>& q) {
        int n = a.size(), m = q.size();
        vector <int> pref(n + 1, 0);
        for (auto &z : q) {
            pref[z[0]]++;
            pref[z[1] + 1]--;
        }
        for (int i = 1; i < n; i++)
            pref[i] += pref[i - 1];
        for (int i = 0; i < n; i++)
            if (a[i] > pref[i]) return false;
        return true;
    }
};",1454921084
Satj,Satj,57,3658,cpp,"class Solution {
public:
    int inf = 1e9 + 7;
    int g(int l, int r, int x) {
        return max(abs(l - x), abs(r - x));
    }
    int h(int l, int r, int x, int y) {
        return max({abs(l - x), abs(x - y), abs(r - y)});
    }
    int f(vector <array <int, 3>> &b, int t, int L, int R) {
        int x = L + t;
        int y = R - t;
        int ret = 0;
        for (auto &z : b) {
            int res = min(g(z[0], z[1], x), g(z[0], z[1], y));
            if (z[2] == 1)
                ret = max(ret, res);
            else
                ret = max(ret, min(res, h(z[0], z[1], x, y)));
        }
        return ret;
    }
    int minDifference(vector<int>& a) {
        unordered_set <int> s(a.begin(), a.end());
        if (s.size() == 1) return 0;
        
        vector <array <int, 3>> b;
        int prev = -2, n = a.size();
        int ll = 0;
        for (int i = 0; i < n; ) {
            if (a[i] != -1) {
                ll = max(ll, abs(a[i] - (prev < 0 ? a[i] : prev)));
                prev = a[i];
                i++;
                continue ;
            }
            int j = i;
            while (j < n && a[j] == -1) j++;
            if (j - i == 1) 
                b.push_back({prev < 0 ? a[j] : prev, (j < n) ? a[j] : prev, 1});
            else {
                b.push_back({prev < 0 ? a[j] : prev, (j < n) ? a[j] : prev, 2});
            }
            if (j < n) {
                prev = a[j];
            }
            i = j;
        }
        // for (auto z : b) cout << z[0] << "" "" << z[1] << "" "" << z[2] << endl;
        int L = inf;
        int R = -inf;
        for (auto &z : b) {
            z[0] = abs(z[0]);
            z[1] = abs(z[1]);
            if (z[0] > z[1]) swap(z[0], z[1]);
            L = min(z[0], L);
            R = max(z[1], R);
        }
        if (R < L) return ll;
        
        int l = ll, r = max(ll, (R - L) / 2 + 1);
        cout << l << "" "" << r << endl;
        int ret = r;
        while (r - l > 2) {
            int m1 = l + (r - l) / 3;
            int m2 = l + 2 * (r - l) / 3;

            int res1 = f(b, m1, L, R);
            int res2 = f(b, m2, L, R);
            ret = min({ret, res1, res2});
            if (res1 <= res2) 
                r = m2;
            else
                l = m1;
        }
        for (int i = l; i <= r; i++) 
            ret = min(ret, f(b, i, L, R));
        return max(ret, ll);
    }
};",1454902799
Syed Arham Saroosh,Syed-Arham-Saroosh,58,3616,python3,"from typing import List

class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        """"""
        Counts the number of valid selections of starting positions and movement directions
        in the given integer array `nums`. A selection is valid if starting from a position
        where nums[curr] == 0, and moving either left or right, all elements in `nums` can
        be reduced to 0 according to the specified movement rules.

        Args:
        nums (List[int]): The input array of integers.

        Returns:
        int: The number of valid selections.
        """"""
        
        n = len(nums)
        valid_count = 0

        for curr in range(n):
            if nums[curr] == 0:
                # Check right direction
                temp_nums = nums[:]
                position = curr
                direction = 1  # 1 for right, -1 for left
                
                while 0 <= position < n:
                    if temp_nums[position] == 0:
                        position += direction
                    else:
                        temp_nums[position] -= 1
                        direction *= -1  # Reverse direction
                        position += direction
                
                if all(x == 0 for x in temp_nums):
                    valid_count += 1
                
                # Check left direction
                temp_nums = nums[:]
                position = curr
                direction = -1  # Change direction to left
                
                while 0 <= position < n:
                    if temp_nums[position] == 0:
                        position += direction
                    else:
                        temp_nums[position] -= 1
                        direction *= -1  # Reverse direction
                        position += direction
                
                if all(x == 0 for x in temp_nums):
                    valid_count += 1

        return valid_count
",1454806229
Syed Arham Saroosh,Syed-Arham-Saroosh,58,3639,python3,"from typing import List

class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        n = len(nums)
        # Create a difference array for counting decrements
        decrement_count = [0] * (n + 1)

        # Process each query to fill the difference array
        for li, ri in queries:
            decrement_count[li] += 1
            if ri + 1 < n:
                decrement_count[ri + 1] -= 1

        # Calculate the total decrements for each index
        total_decrements = [0] * n
        current_decrement = 0

        for i in range(n):
            current_decrement += decrement_count[i]
            total_decrements[i] = current_decrement

        # Check if we can reduce nums to zero
        for i in range(n):
            if total_decrements[i] < nums[i]:
                return False
        
        return True
",1454807185
Syed Arham Saroosh,Syed-Arham-Saroosh,58,3643,python3,"from typing import List

class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        def canAchieveZero(k: int) -> bool:
            # Create a temporary array to track decrements
            temp = [0] * (len(nums) + 1)
            
            # Apply the first k queries
            for i in range(k):
                li, ri, vali = queries[i]
                temp[li] += vali
                if ri + 1 < len(nums):
                    temp[ri + 1] -= vali
            
            # Calculate the actual decrements for each index
            current_decrement = 0
            for i in range(len(nums)):
                current_decrement += temp[i]
                nums[i] -= current_decrement
            
            # Check if all elements are non-negative
            return all(num <= 0 for num in nums)

        # Binary search for the minimum k
        left, right = 0, len(queries)
        result = -1
        
        while left <= right:
            mid = (left + right) // 2
            # Store the original nums to restore after checking
            original_nums = nums[:]
            
            if canAchieveZero(mid):
                result = mid  # Found a valid k
                right = mid - 1  # Try to find a smaller k
            else:
                left = mid + 1  # Increase k
        
            # Restore nums for the next iteration
            nums = original_nums
        
        return result
",1454808055
KARTHICK,KARTHICK2605,59,3616,java,"class Solution {
    public int countValidSelections(int[] nums) {
        int n = nums.length;
        int validCount = 0;

        // Identify all positions where nums[curr] == 0
        for (int start = 0; start < n; start++) {
            if (nums[start] == 0) {
                // Try both directions: left (-1) and right (+1)
                if (simulate(nums.clone(), start, -1)) validCount++;
                if (simulate(nums.clone(), start, 1)) validCount++;
            }
        }

        return validCount;
    }

    private boolean simulate(int[] nums, int curr, int direction) {
        int n = nums.length;

        while (curr >= 0 && curr < n) {
            if (nums[curr] == 0) {
                // Move in the current direction
                curr += direction;
            } else {
                // Decrement nums[curr], reverse direction, and move
                nums[curr]--;
                direction = -direction;
                curr += direction;
            }
        }

        // Check if all elements in nums are zero
        for (int num : nums) {
            if (num != 0) return false;
        }
        return true;
    }
}
",1454806674
KARTHICK,KARTHICK2605,59,3639,java,"class Solution {
    public boolean isZeroArray(int[] nums, int[][] queries) {
        int n = nums.length;
        int[] diff = new int[n + 1]; // Difference array to track range updates

        // Process each query
        for (int[] query : queries) {
            int li = query[0], ri = query[1];
            diff[li] += 1;
            if (ri + 1 < n) diff[ri + 1] -= 1;
        }

        // Apply the prefix sum to calculate the total decrements for each index
        int[] decrements = new int[n];
        int currentDecrement = 0;
        for (int i = 0; i < n; i++) {
            currentDecrement += diff[i];
            decrements[i] = currentDecrement;
        }

        // Check if the decrements are sufficient to make nums a Zero Array
        for (int i = 0; i < n; i++) {
            if (decrements[i] < nums[i]) return false; // Not enough decrements
        }

        return true;
    }
}
",1454808512
KARTHICK,KARTHICK2605,59,3643,java,"class Solution {
    public int minZeroArray(int[] nums, int[][] queries) {
        int n = nums.length;
        int q = queries.length;

        // Binary search for the minimum k
        int left = 0, right = q, result = -1;

        while (left <= right) {
            int mid = left + (right - left) / 2;
            if (canTransform(nums, queries, mid)) {
                result = mid; // Possible with k = mid
                right = mid - 1;
            } else {
                left = mid + 1;
            }
        }

        return result;
    }

    private boolean canTransform(int[] nums, int[][] queries, int k) {
        int n = nums.length;
        int[] diff = new int[n + 1]; // Difference array for range updates

        // Apply the first k queries
        for (int i = 0; i < k; i++) {
            int li = queries[i][0], ri = queries[i][1], vali = queries[i][2];
            diff[li] += vali;
            if (ri + 1 < n) diff[ri + 1] -= vali;
        }

        // Calculate cumulative decrements and check if nums can be zeroed
        int[] decrements = new int[n];
        int currentDecrement = 0;

        for (int i = 0; i < n; i++) {
            currentDecrement += diff[i];
            decrements[i] = currentDecrement;

            // If the decrements available are less than the required, return false
            if (decrements[i] < nums[i]) {
                return false;
            }
        }

        return true; // Transformation possible
    }
}
",1454809796
Vengadeshwaran B,Vengadesh_25,60,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        def simulate(start, direction):
            n = len(nums)
            nums_copy = nums[:]  # Create a copy to modify
            curr = start
            while 0 <= curr < n:
                if nums_copy[curr] == 0:
                    curr += direction
                else:
                    nums_copy[curr] -= 1
                    direction = -direction
                    curr += direction
            return all(num == 0 for num in nums_copy)
        
        valid_selections = 0
        n = len(nums)
        
        for i in range(n):
            if nums[i] == 0:
                # Check both directions
                if simulate(i, 1):  # Right direction
                    valid_selections += 1
                if simulate(i, -1):  # Left direction
                    valid_selections += 1
        
        return valid_selections",1454806831
Vengadeshwaran B,Vengadesh_25,60,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        n = len(nums)
        diff = [0] * (n + 1)  # Difference array for range operations
    
        # Process each query
        for li, ri in queries:
            diff[li] += 1  # Start decrementing from index li
            if ri + 1 < n:
                diff[ri + 1] -= 1  # Stop decrementing after index ri
        
        # Compute prefix sum and check feasibility
        curr_decrement = 0
        for i in range(n):
            curr_decrement += diff[i]  # Apply the current decrement value
            if curr_decrement < nums[i]:
                return False  # Not enough decrements applied to make nums[i] zero
        
        return True  #
            ",1454807690
Vengadeshwaran B,Vengadesh_25,60,3643,python3,"class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        n = len(nums)
        q = len(queries)
    
        def canTransform(k):
            diff = [0] * (n + 1)  # Difference array
            for i in range(k):
                li, ri, vali = queries[i]
                diff[li] += vali
                if ri + 1 < n:
                    diff[ri + 1] -= vali
    
            cumulative_decrement = 0
            for i in range(n):
                cumulative_decrement += diff[i]
                if nums[i] - cumulative_decrement > 0:
                    return False
            
            return True
    
        left, right = 0, q
        result = -1
    
        while left <= right:
            mid = (left + right) // 2
            if canTransform(mid):
                result = mid
                right = mid - 1
            else:
                left = mid + 1
    
        return result",1454811189
Max Jiang,mangoqwq,61,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int N = nums.size();
        auto ok = [&](int i, int del) {
            vector<int> vec = nums;
            while (i >= 0 && i < N) {
                if (vec[i] > 0) {
                    vec[i]--;
                    del *= -1;
                }
                i += del;
            }
            return *max_element(vec.begin(), vec.end()) == 0;
        };
        int ans = 0;
        for (int i = 0; i < N; ++i) {
            if (nums[i]) continue;
            for (int del = -1; del <= 1; del += 2) {
                ans += ok(i, del);
            }
        }
        return ans;
    }
};",1454806620
Max Jiang,mangoqwq,61,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int N = nums.size(), Q = queries.size();
        vector<int> tot(N+1);
        for (int i = 0; i < Q; ++i) {
            int l = queries[i][0];
            int r = queries[i][1];
            tot[l]++; tot[r+1]--;
        }
        for (int i = 1; i <= N; ++i) {
            tot[i] += tot[i-1];
        }
        for (int i = 0; i < N; ++i) {
            if (tot[i] < nums[i]) return 0;
        }
        return 1;
    }
};",1454811873
Max Jiang,mangoqwq,61,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        using ll = long long;
        int N = nums.size(), Q = queries.size();
        auto ok = [&](int k) {
            vector<ll> tot(N+1);
            for (ll i = 0; i < k; ++i) {
                ll l = queries[i][0];
                ll r = queries[i][1];
                ll val = queries[i][2];
                tot[l] += val;
                tot[r+1] -= val;
            }
            for (int i = 1; i <= N; ++i) {
                tot[i] += tot[i-1];
            }
            for (int i = 0; i < N; ++i) {
                if (tot[i] < nums[i]) return 0;
            }
            return 1;
        };
        int lo = 0, hi = Q;
        while (lo < hi) {
            int mi = (lo + hi) >> 1;
            if (ok(mi)) hi = mi;
            else lo = mi + 1;
        }
        if (!ok(lo)) return -1; 
        else return lo;
    }
};",1454810040
sammochen,sammochen,63,3616,cpp,"
#include <bits/stdc++.h>
using namespace std;

#ifdef DEBUG
#include ""debug.h""
#else
#define debug(...) 1
#endif

using ll = long long;
using db = long double;
using VS = vector<string>;
using VLL = vector<ll>;
using VVLL = vector<VLL>;
using VVVLL = vector<VVLL>;
using PLL = pair<ll, ll>;
using MLL = map<ll, ll>;
using SLL = set<ll>;
using QLL = queue<ll>;
using SS = stringstream;

#define rep(x, l, u) for (ll x = l; x < u; x++)
#define rrep(x, l, u) for (ll x = l; x >= u; x--)
#define fe(x, a) for (auto x : a)
#define all(x) x.begin(), x.end()
#define rall(x) x.rbegin(), x.rend()
#define mst(x, v) memset(x, v, sizeof(x))
#define sz(x) (ll) x.size()

#define umap unordered_map
#define uset unordered_set
#define mset multiset

// clang-format off

ll ob(ll i, ll n) { return i < 0 || i >= n; }
ll tp(ll x) { return ( 1LL << x ); }
ll rup(ll a, ll b) { return a % b ? a/b + 1 : a/b; }
ll sign(ll x) {	return x == 0 ? 0 : x / abs(x); }
void makemod(ll& x, ll m) { x %= m; if (x < 0) { x += m; } }
ll getmod(ll x, ll m) { makemod(x, m); return x; }
ll powmod(ll a, ll b, ll m) { if (b == 0) return 1; ll h = powmod(a, b/2, m); ll ans = h*h%m; return b%2 ? ans*a%m : ans; }
ll invmod(ll a, ll m) { return powmod(a, m - 2, m); }
void inll(ll& x) { scanf(""%lld"", &x); }

template <typename A, typename B> bool upmin(A& x, B v) { if (v >= x) return false; return x = v, true; }
template <typename A, typename B> bool upmax(A& x, B v) { if (v <= x) return false; return x = v, true; }
// clang-format on

const VLL di = {0, 0, 1, -1, 1, -1, 1, -1}, dj = {1, -1, 0, 0, -1, -1, 1, 1};
const ll inf = 1e18;
const ll mod = 1e9 + 7;
const string vowels = ""aeiou"";
ll isvowel(char c) {
    c = tolower(c);
    return vowels.find(c) != string::npos;
}

class Solution {
public:
    int countValidSelections(vector<int>& A) {  // !
        ll n = A.size();
        ll ans = 0;
        rep(i, 0, n) {
            if (A[i] != 0) continue;

            ll left = 0, right = 0;
            rep(j, 0, n) {
                if (j < i) {
                    left += A[j];
                } else if (j > i) {
                    right += A[j];
                }
            }

            ll res = abs(left - right);
            if (res == 0)
                ans += 2;
            else if (res == 1)
                ans++;
        }
        return ans;
    }
};
",1454806531
sammochen,sammochen,63,3639,cpp,"
#include <bits/stdc++.h>
using namespace std;

#ifdef DEBUG
#include ""debug.h""
#else
#define debug(...) 1
#endif

using ll = long long;
using db = long double;
using VS = vector<string>;
using VLL = vector<ll>;
using VVLL = vector<VLL>;
using VVVLL = vector<VVLL>;
using PLL = pair<ll, ll>;
using MLL = map<ll, ll>;
using SLL = set<ll>;
using QLL = queue<ll>;
using SS = stringstream;

#define rep(x, l, u) for (ll x = l; x < u; x++)
#define rrep(x, l, u) for (ll x = l; x >= u; x--)
#define fe(x, a) for (auto x : a)
#define all(x) x.begin(), x.end()
#define rall(x) x.rbegin(), x.rend()
#define mst(x, v) memset(x, v, sizeof(x))
#define sz(x) (ll) x.size()

#define umap unordered_map
#define uset unordered_set
#define mset multiset

// clang-format off

ll ob(ll i, ll n) { return i < 0 || i >= n; }
ll tp(ll x) { return ( 1LL << x ); }
ll rup(ll a, ll b) { return a % b ? a/b + 1 : a/b; }
ll sign(ll x) {	return x == 0 ? 0 : x / abs(x); }
void makemod(ll& x, ll m) { x %= m; if (x < 0) { x += m; } }
ll getmod(ll x, ll m) { makemod(x, m); return x; }
ll powmod(ll a, ll b, ll m) { if (b == 0) return 1; ll h = powmod(a, b/2, m); ll ans = h*h%m; return b%2 ? ans*a%m : ans; }
ll invmod(ll a, ll m) { return powmod(a, m - 2, m); }
void inll(ll& x) { scanf(""%lld"", &x); }

template <typename A, typename B> bool upmin(A& x, B v) { if (v >= x) return false; return x = v, true; }
template <typename A, typename B> bool upmax(A& x, B v) { if (v <= x) return false; return x = v, true; }
// clang-format on

const VLL di = {0, 0, 1, -1, 1, -1, 1, -1}, dj = {1, -1, 0, 0, -1, -1, 1, 1};
const ll inf = 1e18;
const ll mod = 1e9 + 7;
const string vowels = ""aeiou"";
ll isvowel(char c) {
    c = tolower(c);
    return vowels.find(c) != string::npos;
}

class Solution {
public:
    bool isZeroArray(vector<int>& A, vector<vector<int>>& Q) {  // !

        ll n = A.size();
        ll m = Q.size();

        VLL sums(n + 1);
        rep(j, 0, m) {
            auto& q = Q[j];

            ll l = q[0];
            ll r = q[1];
            ll v = 1;

            sums[l] += v;
            sums[r + 1] -= v;
        }

        ll cur = 0;
        ll ok = 1;
        rep(i, 0, n) {
            cur += sums[i];
            if (cur < A[i]) {
                ok = 0;
                break;
            }
        }

        return ok;
    }
};
",1454812345
sammochen,sammochen,63,3643,cpp,"
#include <bits/stdc++.h>
using namespace std;

#ifdef DEBUG
#include ""debug.h""
#else
#define debug(...) 1
#endif

using ll = long long;
using db = long double;
using VS = vector<string>;
using VLL = vector<ll>;
using VVLL = vector<VLL>;
using VVVLL = vector<VVLL>;
using PLL = pair<ll, ll>;
using MLL = map<ll, ll>;
using SLL = set<ll>;
using QLL = queue<ll>;
using SS = stringstream;

#define rep(x, l, u) for (ll x = l; x < u; x++)
#define rrep(x, l, u) for (ll x = l; x >= u; x--)
#define fe(x, a) for (auto x : a)
#define all(x) x.begin(), x.end()
#define rall(x) x.rbegin(), x.rend()
#define mst(x, v) memset(x, v, sizeof(x))
#define sz(x) (ll) x.size()

#define umap unordered_map
#define uset unordered_set
#define mset multiset

// clang-format off

ll ob(ll i, ll n) { return i < 0 || i >= n; }
ll tp(ll x) { return ( 1LL << x ); }
ll rup(ll a, ll b) { return a % b ? a/b + 1 : a/b; }
ll sign(ll x) {	return x == 0 ? 0 : x / abs(x); }
void makemod(ll& x, ll m) { x %= m; if (x < 0) { x += m; } }
ll getmod(ll x, ll m) { makemod(x, m); return x; }
ll powmod(ll a, ll b, ll m) { if (b == 0) return 1; ll h = powmod(a, b/2, m); ll ans = h*h%m; return b%2 ? ans*a%m : ans; }
ll invmod(ll a, ll m) { return powmod(a, m - 2, m); }
void inll(ll& x) { scanf(""%lld"", &x); }

template <typename A, typename B> bool upmin(A& x, B v) { if (v >= x) return false; return x = v, true; }
template <typename A, typename B> bool upmax(A& x, B v) { if (v <= x) return false; return x = v, true; }
// clang-format on

const VLL di = {0, 0, 1, -1, 1, -1, 1, -1}, dj = {1, -1, 0, 0, -1, -1, 1, 1};
const ll inf = 1e18;
const ll mod = 1e9 + 7;
const string vowels = ""aeiou"";
ll isvowel(char c) {
    c = tolower(c);
    return vowels.find(c) != string::npos;
}

class Solution {
public:
    int minZeroArray(vector<int>& A, vector<vector<int>>& Q) {  // !

        ll n = A.size();
        ll m = Q.size();

        ll L = 0, R = m, ans = inf;
        while (L <= R) {
            ll M = (L + R) / 2;
            VLL sums(n + 1);
            rep(j, 0, M) {
                auto& q = Q[j];

                ll l = q[0];
                ll r = q[1];
                ll v = q[2];

                sums[l] += v;
                sums[r + 1] -= v;
            }

            ll cur = 0;
            ll ok = 1;
            rep(i, 0, n) {
                cur += sums[i];
                if (cur < A[i]) {
                    ok = 0;
                    break;
                }
            }
            if (ok) {
                upmin(ans, M);
                R = M - 1;
            } else {
                L = M + 1;
            }
        }

        if (ans == inf) return -1;
        return ans;
    }
};
",1454810435
Wanjun Li,wjli,64,3616,cpp,"


// COPY ALL MACROS BELOW

typedef long long LL;
#define MP make_pair
#define PB push_back
#define F first
#define S second
#define LB lower_bound
#define UB upper_bound
#define SZ(x) ((int)x.size())
#define LEN(x) ((int)x.length())
#define ALL(x) begin(x), end(x)
#define RSZ resize
#define ASS assign
#define REV(x) reverse(x.begin(), x.end());
#define trav(a, x) for (auto& a : x)
typedef pair<LL, LL> PL;
typedef vector<LL> VL;
typedef vector<PL> VPL;
typedef vector<VL> VVL;
typedef vector<VVL> VVVL;
typedef vector<VVVL> VVVVL;
typedef vector<string> VS;
typedef pair<int, int> PI;
typedef vector<int> VI;
typedef vector<PI> VPI;
typedef vector<vector<int>> VVI;
typedef vector<vector<PI>> VVPI;
#define MAX(x) *max_element(ALL(x))
#define MIN(x) *min_element(ALL(x))
#define FOR(i, n) for (int i = 0; i < n; i++) 
#define FOR1(i, n) for (int i = 1; i <= n; i++) 
#define SORT(x) sort(x.begin(), x.end())
#define RSORT(x) sort(x.rbegin(), x.rend())
#define SUM(x) accumulate(x.begin(), x.end(), 0LL)




class Solution {
public:
	int countValidSelections(vector<int>& nums) {
		int ans = 0, n = nums.size(), i, j, k, curr, d;
		FOR(i, n) {
			if (nums[i] != 0) continue;

			for (d = -1; d <= 1; d += 2) {
				int dd = d, curr = i;
				VI a = nums;
				while ((curr >= 0) && (curr < n)) {
					if (a[curr] == 0) curr += dd;
					else {
						a[curr]--;
						dd = -dd;
						curr += dd;
					}
				}

				bool valid = true;
				FOR(j, n) {
					if (a[j] != 0) {
						valid = false;
						break;
					}
				}
				if (valid) ans++;
			}
		}

		return ans;
	}
};
",1454806828
Wanjun Li,wjli,64,3639,cpp,"


// COPY ALL MACROS BELOW

typedef long long LL;
#define MP make_pair
#define PB push_back
#define F first
#define S second
#define LB lower_bound
#define UB upper_bound
#define SZ(x) ((int)x.size())
#define LEN(x) ((int)x.length())
#define ALL(x) begin(x), end(x)
#define RSZ resize
#define ASS assign
#define REV(x) reverse(x.begin(), x.end());
#define trav(a, x) for (auto& a : x)
typedef pair<LL, LL> PL;
typedef vector<LL> VL;
typedef vector<PL> VPL;
typedef vector<VL> VVL;
typedef vector<VVL> VVVL;
typedef vector<VVVL> VVVVL;
typedef vector<string> VS;
typedef pair<int, int> PI;
typedef vector<int> VI;
typedef vector<PI> VPI;
typedef vector<vector<int>> VVI;
typedef vector<vector<PI>> VVPI;
#define MAX(x) *max_element(ALL(x))
#define MIN(x) *min_element(ALL(x))
#define FOR(i, n) for (int i = 0; i < n; i++) 
#define FOR1(i, n) for (int i = 1; i <= n; i++) 
#define SORT(x) sort(x.begin(), x.end())
#define RSORT(x) sort(x.rbegin(), x.rend())
#define SUM(x) accumulate(x.begin(), x.end(), 0LL)





class Solution {
public:
	bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
		int n = nums.size(), i, j, k, s = 0;
		VI in(n, 0), out(n, 0);
		for (auto p : queries) {
			in[p[0]]++;
			out[p[1]]++;
		}

		bool valid = true;
		FOR(i, n) {
			s += in[i];
			if (s < nums[i]) valid = false;
			s -= out[i];
		}
		return valid;
	}
};

",1454808402
Wanjun Li,wjli,64,3643,cpp,"

// COPY ALL MACROS BELOW

typedef long long LL;
#define MP make_pair
#define PB push_back
#define F first
#define S second
#define LB lower_bound
#define UB upper_bound
#define SZ(x) ((int)x.size())
#define LEN(x) ((int)x.length())
#define ALL(x) begin(x), end(x)
#define RSZ resize
#define ASS assign
#define REV(x) reverse(x.begin(), x.end());
#define trav(a, x) for (auto& a : x)
typedef pair<LL, LL> PL;
typedef vector<LL> VL;
typedef vector<PL> VPL;
typedef vector<VL> VVL;
typedef vector<VVL> VVVL;
typedef vector<VVVL> VVVVL;
typedef vector<string> VS;
typedef pair<int, int> PI;
typedef vector<int> VI;
typedef vector<PI> VPI;
typedef vector<vector<int>> VVI;
typedef vector<vector<PI>> VVPI;
#define MAX(x) *max_element(ALL(x))
#define MIN(x) *min_element(ALL(x))
#define FOR(i, n) for (int i = 0; i < n; i++) 
#define FOR1(i, n) for (int i = 1; i <= n; i++) 
#define SORT(x) sort(x.begin(), x.end())
#define RSORT(x) sort(x.rbegin(), x.rend())
#define SUM(x) accumulate(x.begin(), x.end(), 0LL)





class Solution {
public:
	int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
		int n = nums.size(), i, j, k, s = 0, q = queries.size(), aa, bb, cc;

		aa = 0; bb = q + 2;
		while (aa < bb) {
			cc = (aa + bb) / 2;

			VI in(n, 0), out(n, 0);
			FOR(i, min(q, cc)) {
				in[queries[i][0]] += queries[i][2];
				out[queries[i][1]] += queries[i][2];
			}

			bool valid = true;
			FOR(i, n) {
				s += in[i];
				if (s < nums[i]) valid = false;
				s -= out[i];
			}
			if (!valid) aa = cc + 1;
			else bb = cc;	

		}
		if (aa > q) aa = -1;
		return aa;
	}
};

",1454812361
andy-lc,andy-lc,65,3616,python3,"class Solution:
    def countValidSelections(self, nums: list[int]) -> int:
        ans = 0
        for s in range(len(nums)):
            if nums[s] != 0:
                continue
            for d in (-1, 1):
                arr = list(nums)
                i = s
                while 0 <= i < len(arr):
                    if arr[i] > 0:
                        arr[i] -= 1
                        d = -d
                    i += d
                if all(x == 0 for x in arr):
                    ans += 1
        return ans
",1454807533
andy-lc,andy-lc,65,3639,python3,"class Solution:
    def isZeroArray(self, nums: list[int], queries: list[list[int]]) -> bool:
        diff = [0] * (len(nums) + 1)
        for a, b in queries:
            diff[a] += 1
            diff[b + 1] -= 1
        cum = 0
        for a, b in zip(nums, diff):
            cum += b
            if cum < a:
                return False
        return True
",1454809346
andy-lc,andy-lc,65,3643,python3,"class Solution:
    def check(self, nums: list[int], queries: list[list[int]]) -> bool:
        diff = [0] * (len(nums) + 1)
        for a, b, v in queries:
            diff[a] += v
            diff[b + 1] -= v
        cum = 0
        for a, b in zip(nums, diff):
            cum += b
            if cum < a:
                return False
        return True

    def minZeroArray(self, nums: list[int], queries: list[list[int]]) -> int:
        L = 0
        R = len(queries)
        if not self.check(nums, queries[:R]):
            return -1
        while L < R:
            M = (R - L) // 2 + L
            if self.check(nums, queries[:M]):
                R = M
            else:
                L = M + 1
        return L
",1454812906
Alex Wice,awice,67,3616,python3,"class Solution:
    def countValidSelections(self, A: List[int]) -> int:
        N = len(A)
        def check(i, d):
            B = A[:]
            while 0 <= i < N:
                if B[i] == 0:
                    i += d
                else:
                    B[i] -= 1
                    d *= -1
                    i += d
            return not any(B)
            
        ans = 0
        for i in range(N):
            if A[i]: continue
            for d in [-1,1]:
                if check(i, d): ans += 1
        return ans",1454806451
Alex Wice,awice,67,3639,python3,"class Solution:
    def isZeroArray(self, A: List[int], queries: List[List[int]]) -> bool:
        N = len(A)
        count = [0] * (N + 1)
        for l,r  in queries:
            count[l] += 1
            count[r+1] -= 1
        for i in range(1, N + 1):
            count[i] += count[i-1]
        for i in range(N):
            A[i] -= count[i]

        return all(v <= 0 for v in A)",1454807707
Alex Wice,awice,67,3643,python3,"class Solution:
    def minZeroArray(self, A: List[int], queries: List[List[int]]) -> int:
        N = len(A)
        def check(k):
            count = [0] * (N + 1)
            for i in range(k):
                l, r, v = queries[i]
                count[l] += v
                count[r+1] -= v
            for i in range(1, N + 1):
                count[i] += count[i-1]
            return all(x <= count[i] for i,x in enumerate(A))
            
        lo = 0
        hi = inf = len(queries) + 1
        while lo < hi:
            mi = lo + hi >> 1
            if not check(mi):
                lo = mi + 1
            else:
                hi = mi

        if lo == inf:
            lo = -1
        return lo",1454813343
hxu10,hxu10,69,3616,python,"class Solution(object):
    def countValidSelections(self, nums):
        """"""
        :type nums: List[int]
        :rtype: int
        """"""
        n = len(nums)
        def judge(curr, inc):
            arr = nums[:]
            d = inc
            while curr >= 0 and curr < n:
                if arr[curr] > 0:
                    arr[curr] -= 1
                    d *= -1
                curr += d
            
            return sum(arr) == 0
        
        ans = 0
        for i in range(n):
            if nums[i] > 0:  continue 
            if judge(i, 1):
                ans += 1
            if judge(i, -1):
                ans += 1
                
        return ans
    
            
                    
                ",1454807294
hxu10,hxu10,69,3639,python,"class Solution(object):
    def isZeroArray(self, nums, queries):
        """"""
        :type nums: List[int]
        :type queries: List[List[int]]
        :rtype: bool
        """"""
        n = len(nums)
        dp = [0]*(n+1)
        
        
        for [l,r] in queries:
            dp[l] += 1
            dp[r+1] -= 1
            
        for i in range(1,n):
            dp[i] += dp[i-1]
            
        for i in range(n):
            if dp[i] < nums[i]:
                return False
        return True
    
            ",1454809887
hxu10,hxu10,69,3643,python,"class Solution(object):
    def minZeroArray(self, nums, queries):
        """"""
        :type nums: List[int]
        :type queries: List[List[int]]
        :rtype: int
        """"""
        
        n = len(nums)
        def judge(k):
            dp = [0]*(n+1)
            for [l,r,d] in queries[:k]:
                dp[l] += d
                dp[r+1] -= d
            
            for i in range(1,n):
                dp[i] += dp[i-1]
                
            for i in range(n):
                if nums[i] > dp[i]:
                    return False
            return True
        
        front = 0
        rear = len(queries) + 1
        while front < rear:
            mid = (front + rear)//2
            if judge(mid):
                rear = mid
            else:
                front = mid + 1
                
                
        if front > len(queries):
            return -1
    
        
        return front
    
        
                ",1454813425
Salamander,BelgianSalamander,70,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        res = 0
        for start in range(len(nums)):
            if nums[start]: continue
            for dir in range(-1, 2, 2):
                bruh = nums[:]

                curr = start
                while True:
                    if curr < 0 or curr >= len(nums):
                        break
                    if bruh[curr] == 0:
                        curr += dir
                    else:
                        bruh[curr] -= 1
                        dir *= -1
                        curr += dir

                if sum(bruh) == 0:
                    #print(bruh)
                    res += 1
                    #print(start, dir)
                    
        return res",1454807856
Salamander,BelgianSalamander,70,3639,cpp,"class Solution {
public:
    vector<int> process(vector<int> nums, vector<vector<int>>& queries, int k) {
        vector<int> pdiff(nums.size() + 1);

        for (int i = 0; i < k; i++) {
            int l = queries[i][0];
            int r = queries[i][1];
            int val = queries[i][2];

            pdiff[l] -= val;
            pdiff[r+1] += val;
        }

        int curr = 0;

        for (int i = 0; i < nums.size(); i++) {
            curr += pdiff[i];
            nums[i] += curr;
        }

        return nums;
    }

    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        for (auto& p: queries) {
            p.push_back(1);
        }

        vector<int> res = process(nums, queries, queries.size());

        for (int x: res) {
            if (x > 0) return false;
        }

        return true;
    }
};",1454811895
Salamander,BelgianSalamander,70,3643,cpp,"class Solution {
public:
    vector<int> process(vector<int> nums, vector<vector<int>>& queries, int k) {
        vector<int> pdiff(nums.size() + 1);

        for (int i = 0; i < k; i++) {
            int l = queries[i][0];
            int r = queries[i][1];
            int val = queries[i][2];

            pdiff[l] -= val;
            pdiff[r+1] += val;
        }

        int curr = 0;

        for (int i = 0; i < nums.size(); i++) {
            curr += pdiff[i];
            nums[i] += curr;
        }

        return nums;
    }

    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int l = 0;
        int r = queries.size() + 1;

        while (l != r) {
            int m = (l + r) / 2;

            vector<int> res = process(nums, queries, m);

            bool valid = true;
            for (int x: res) {
                if (x > 0) valid = false;
            }

            if (valid) {
                r = m;
            } else {
                l = m + 1;
            }
        }

        if (l == queries.size() + 1) return -1;
        return l;
    }
};",1454813546
Edwin Chen,echen5503,72,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:

        n = len(nums)
        def sim(start, init_dir):
            A = nums[:]
            dir = init_dir
            pos = start

            while 0 <= pos < n:
                if A[pos] > 0:
                    dir = -1 if dir == 1 else 1
                    A[pos] -= 1

                pos += dir

            return sum(A) == 0

        ans = 0
        for i in range(len(nums)):
            if nums[i] != 0:
                continue
            for dir in [-1, 1]:
                if sim(i, dir):
                    ans += 1

        return ans",1454807292
Edwin Chen,echen5503,72,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:

        n = len(nums)
        diff = [0 for i in range(n+1)]

        for a, b in queries:
            diff[a] += 1
            diff[b+1] -= 1

        tot = [0 for i in range(n)]
        cur = 0
        for i in range(n):
            cur += diff[i]
            tot[i] += cur
        
        return all(t >= x for t, x in zip(tot, nums))
        ",1454809591
Edwin Chen,echen5503,72,3643,python3,"class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        
        n = len(nums)
        
        def check(subset):
            diff = [0 for i in range(n+1)]
    
            for a, b, val in subset:
                diff[a] += val
                diff[b+1] -= val
    
            tot = [0 for i in range(n)]
            cur = 0
            for i in range(n):
                cur += diff[i]
                tot[i] += cur
            
            return all(t >= x for t, x in zip(tot, nums))

        l = 0
        r = len(queries)

        while l < r:
            mid = (l+r)//2
            subset = queries[:mid]

            if check(subset):
                r = mid
            else:
                l = mid+1

        if not check(queries):
            return -1
            
        return l
            
        ",1454814159
SpeedyRogue54,SpeedyRogue54,73,3616,python3,"class Solution:
    def countValidSelections(self, nums):
        a = len(nums)
        b = 0
        c = [k for k in range(a) if nums[k] == 0]
        d = [-1, 1]
        for e in c:
            for f in d:
                g = nums[:]
                h = e
                i = f
                while 0 <= h < a:
                    if g[h] == 0:
                        h += i
                    else:
                        g[h] -= 1
                        i = -i
                        h += i
                if all(j == 0 for j in g):
                    b += 1
        return b
",1454812878
SpeedyRogue54,SpeedyRogue54,73,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        a = len(nums)
        b = [0] * a
        for c, d in queries:
            b[c] += 1
            if d + 1 < a:
                b[d + 1] -= 1
        for e in range(1, a):
            b[e] += b[e - 1]
        for f in range(a):
            if b[f] < nums[f]:
                return False
        return True
",1454813452
SpeedyRogue54,SpeedyRogue54,73,3643,python3,"class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        def can_zero(nums, queries, k):
            a = len(nums)
            b = [0] * (a + 1)
            for h in range(k):
                i, j, l = queries[h]
                b[i] += l
                if j + 1 < a:
                    b[j + 1] -= l
            m = 0
            for n in range(a):
                m += b[n]
                if m < nums[n]:
                    return False
            return True

        a = len(nums)
        b = len(queries)
        c = nums[:]  

        d = 0
        e = b
        f = -1

        while d <= e:
            g = (d + e) // 2
            if can_zero(c, queries, g):
                f = g
                e = g - 1
            else:
                d = g + 1

        return f

    ",1454814537
Victor Liu,powervic08,74,3616,java,"class Solution {
    public int countValidSelections(int[] nums) {
        int sum = 0;
        for (int i = 0; i < nums.length; i++) {
            sum += nums[i];
        }
        int cur = 0;
        int ans = 0;
        for (int i = 0; i < nums.length; i++) {
            cur += nums[i];
            if (nums[i] == 0) {
                if (cur == sum - cur) {
                    ans += 2;
                }
                else if (Math.abs(cur - (sum - cur)) == 1) {
                    ans++;
                }
            }
        }
        return ans;
    }
}",1454806541
Victor Liu,powervic08,74,3639,java,"class Solution {
    public boolean isZeroArray(int[] nums, int[][] queries) {
        long[] arr = new long[nums.length];
        for (int i = 0; i < queries.length; i++) {
            arr[queries[i][0]] += 1;
            if (queries[i][1] < nums.length - 1) {
                arr[queries[i][1] + 1] -= 1;
            }
        }
        for (int i = 1; i < arr.length; i++) {
            arr[i] += arr[i - 1];
        }
        boolean good = true;
        for (int i = 0; i < arr.length; i++) {
            if (arr[i] < nums[i]) good = false;
        }
        return good;
    }
}",1454809744
Victor Liu,powervic08,74,3643,java,"class Solution {
    public int minZeroArray(int[] nums, int[][] queries) {
        int l = 0;
        int r = queries.length;
        while (l < r) {
            int mid = (l + r) / 2;
            long[] arr = new long[nums.length];
            for (int i = 0; i < mid; i++) {
                arr[queries[i][0]] += queries[i][2];
                if (queries[i][1] < nums.length - 1) {
                    arr[queries[i][1] + 1] -= queries[i][2];
                }
            }
            for (int i = 1; i < arr.length; i++) {
                arr[i] += arr[i - 1];
            }
            boolean good = true;
            for (int i = 0; i < arr.length; i++) {
                if (arr[i] < nums[i]) good = false;
            }
            if (good) r = mid;
            else l = mid + 1;
        }
        long[] arr = new long[nums.length];
        for (int i = 0; i < l; i++) {
            arr[queries[i][0]] += queries[i][2];
            if (queries[i][1] < nums.length - 1) {
                arr[queries[i][1] + 1] -= queries[i][2];
            }
        }
        for (int i = 1; i < arr.length; i++) {
            arr[i] += arr[i - 1];
        }
        boolean good = true;
        for (int i = 0; i < arr.length; i++) {
            if (arr[i] < nums[i]) good = false;
        }
        if (good) return l;
        return -1;
    }
}",1454814855
penguinhacker,penguinhacker,76,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int ans=0;
        for (int i = 0; i < nums.size(); ++i) {
            if (nums[i])
                continue;
            for (int rep = 0; rep < 2; ++rep) {
                vector<int> b = nums;
                int dir = rep ? 1 : -1;
                int cur = i;
                while (cur >= 0 && cur < nums.size()) {
                    // if (i == 1 && rep == 0) {
                    //     cout << cur << endl;
                    // }
                    if (!b[cur]) {
                        cur += dir;
                        continue;
                    }
                    --b[cur];
                    dir *= -1;
                    cur += dir;
                }
                // if (*max_element(b.begin(), b.end())==0) {
                //     cout << i << "" "" << rep << endl;
                // }
                ans += *max_element(b.begin(), b.end())==0;
            }
        }
        return ans;
    }
};",1454815643
penguinhacker,penguinhacker,76,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
int lb=0, rb=queries.size()+1;
        while(lb<rb) {
            int mid=(lb+rb)/2;
            vector<int> p(nums.size()+1);
            for (int i=0; i<mid; ++i) {
                p[queries[i][0]]+=1;
                p[queries[i][1]+1]-=1;
            }
            bool ok=1;
            for (int i=0; i<nums.size(); ++i) {
                if (i)
                    p[i]+=p[i-1];
                if (p[i]<nums[i]) {
                    ok=0;
                    break;
                }
            }
            if (ok)
                rb=mid;
            else
                lb=mid+1;
        }
        return lb<=queries.size();
    }
};",1454809884
penguinhacker,penguinhacker,76,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int lb=0, rb=queries.size()+1;
        while(lb<rb) {
            int mid=(lb+rb)/2;
            vector<int> p(nums.size()+1);
            for (int i=0; i<mid; ++i) {
                p[queries[i][0]]+=queries[i][2];
                p[queries[i][1]+1]-=queries[i][2];
            }
            bool ok=1;
            for (int i=0; i<nums.size(); ++i) {
                if (i)
                    p[i]+=p[i-1];
                if (p[i]<nums[i]) {
                    ok=0;
                    break;
                }
            }
            if (ok)
                rb=mid;
            else
                lb=mid+1;
        }
        return lb==queries.size()+1?-1:lb;
    }
};",1454809133
Vitalii Nevidomyi,deadRabbit,78,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& A) {
        int r = 0;
        int s2 = 0; for (int x : A)  s2+=x;
        int s1 = 0;
        for (int x = 0; x < A.size(); ++x) {
            if (A[x]==0 && abs(s1-s2)<=1) r += (2-abs(s1-s2));
            s1+=A[x];
            s2-=A[x];
        }
        return r;
    }
};",1454806870
Vitalii Nevidomyi,deadRabbit,78,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& A, vector<vector<int>>& Q) {
        vector<int> S(A.size()+1, 0);
        for (auto q : Q) {
            S[q[0]]+=1;
            S[q[1]+1]-=1;
        }
        int c = 0;
        for (int i = 0; i < A.size(); ++i) {
            c += S[i];
            if (c<A[i]) return false;
        }
        return true;
    }
};",1454810811
Vitalii Nevidomyi,deadRabbit,78,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& A, vector<vector<int>>& Q) {
        int l = 0;
        int r = Q.size();
        int res = -1;
        while(l<=r) {
            int m = (r+l)/2;
            
            vector<int> S(A.size()+1, 0);
            for (int i = 0; i < m; ++i) {
                auto q = Q[i];
                S[q[0]]+=q[2];
                S[q[1]+1]-=q[2];
            }
            int c = 0;
            int ok = 1;
            for (int i = 0; ok && i < A.size(); ++i) {
                c += S[i];
                if (c<A[i]) ok = 0;
            }
            if (ok) {
                res = m;
                r = m-1;
            } else {
                l = m+1;
            }
        }
        return res;
    }
};",1454815851
Ayush,as_313,82,3616,python3,"class Solution:
    def move(self, p: int, r: bool) -> int:
        return p + 1 if r else p - 1
        
    def check(self, c: List[int], i: int, r: bool, l: int) -> bool:
        p = i
        while 0 <= p < l:
            if c[p] == 0: p = self.move(p, r)
            else: c[p] -= 1; r = not r; p = self.move(p, r)
        return all(x == 0 for x in c)
    
    def countValidSelections(self, n: List[int]) -> int:
        l = len(n)
        return sum(self.check(n.copy(), i, d, l) 
                  for i in range(l) if n[i] == 0 
                  for d in [True, False])",1454816394
Ayush,as_313,82,3639,python3,"class Solution:
    def isZeroArray(self, a: List[int], q: List[List[int]]) -> bool:
        n, d = len(a), [0] * (len(a) + 1)
        for l, r in q: d[l] += 1; d[r + 1] -= 1
        p, m = 0, [0] * n
        for i in range(n): p += d[i]; m[i] = p
        return all(a[i] <= m[i] for i in range(n))
",1454810803
Ayush,as_313,82,3643,python3,"class Solution:
    def minZeroArray(self, x: List[int], q: List[List[int]]) -> int:
        n, l, r, a = len(x), 0, len(q), -1
        def f(k):
            d, s = [0] * (n + 1), 0
            for i in range(k):
                a, b, v = q[i]
                d[a] += v; d[b + 1] -= v
            return all((s := s + d[i]) >= x[i] for i in range(n))
        while l <= r:
            m = (l + r) // 2
            if f(m): a, r = m, m - 1
            else: l = m + 1
        return a
",1454813223
Vasanth Reddy,vassu118,83,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int n = nums.size();
        int ans = 0;
        for(int i = 0; i < n; i++) if(nums[i] == 0) {
            int l = 0, r = 0;
            for(int j = 0; j < i; j++) l += nums[j];
            for(int j = i + 1; j < n; j++) r += nums[j];
            if(l == r) ans += 2;
            else if(abs(l - r) == 1) ans += 1;
        }
        return ans;
    }
};",1454807509
Vasanth Reddy,vassu118,83,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        bool ok = true;
        for(int j : nums) ok &= j == 0;
        if(ok) return 0;
        int l = 0, r = queries.size();
        while(l < r) {
            int mid = (l + r) / 2;
            vector<int> add(n + 1, 0);
            for(int j = 0; j <= mid; j++) {
                int x = queries[j][0], y = queries[j][1];
                add[x] += 1, add[y + 1] -= 1;
            }
            int sum = 0;
            bool ok = true;
            for(int j = 0; j < n; j++) {
                sum += add[j];
                ok &= (nums[j] - sum <= 0);
            }
            if(ok) r = mid;
            else l = mid + 1;
        }
        return (r == queries.size() ? false : true);
    }
};",1454816669
Vasanth Reddy,vassu118,83,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        bool ok = true;
        for(int j : nums) ok &= j == 0;
        if(ok) return 0;
        int l = 0, r = queries.size();
        while(l < r) {
            int mid = (l + r) / 2;
            vector<int> add(n + 1, 0);
            for(int j = 0; j <= mid; j++) {
                int x = queries[j][0], y = queries[j][1], z = queries[j][2];
                add[x] += z, add[y + 1] -= z;
            }
            int sum = 0;
            bool ok = true;
            for(int j = 0; j < n; j++) {
                sum += add[j];
                ok &= (nums[j] - sum <= 0);
            }
            if(ok) r = mid;
            else l = mid + 1;
        }
        return (r == queries.size() ? -1 : r + 1);
    }
};",1454815049
twitch_tv_qiqi_impact,twitch_tv_qiqi_impact,84,3616,python3,"class Solution:
    def countValidSelections(self, nn: List[int]) -> int:
        n = len(nn)
        def sim(x, dr):
            nums = nn[:]
            cur = x
            d = dr
            while 1:
                if not (0 <= cur <= n-1):
                    break
                if nums[cur] == 0:
                    cur += d
                elif nums[cur] > 0:
                    nums[cur] -= 1
                    d = -d
                    cur += d
            for x in nums:
                if x != 0:
                    return False
            return True
        ret = 0
        for i in range(n):
            if nn[i] == 0:
                for j in [-1, 1]:
                    if sim(i, j):
                        # print(i, j)
                        ret += 1
        return ret",1454809174
twitch_tv_qiqi_impact,twitch_tv_qiqi_impact,84,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        n = len(nums)
        ls = [0] * (n+1)
        for x, y in queries:
            ls[x] += 1
            ls[y+1] -= 1
        cur = 0
        for i in range(n):
            cur += ls[i]
            if cur < nums[i]:
                return False
        return True",1454812410
twitch_tv_qiqi_impact,twitch_tv_qiqi_impact,84,3643,python3,"class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        n = len(nums)
        def can(t):
            ls = [0] * (n+1)
            for i in range(t):
                x, y, z = queries[i]
                ls[x] += z
                ls[y+1] -= z
            cur = 0
            for i in range(n):
                cur += ls[i]
                if cur < nums[i]:
                    return False
            return True
        if not can(len(queries)):
            return -1
        l, r = 0, len(queries)
        while l < r:
            mi = (l + r) // 2
            if can(mi):
                r = mi
            else:
                l = mi + 1
        return r",1454816677
Enzo de Almeida Rodrigues,enzoar,89,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& a) {
        int pref = 0; 
        int suf = 0; 
        for (int num : a) suf += num; 
        int n = a.size(); 
        int ans = 0; 
        for (int i = 0; i < n; i++) {
            suf -= a[i]; 
            if (a[i] == 0) {
                ans += max(0, 2 - abs(suf - pref)); 
            }
            pref += a[i]; 
        }
        return ans; 
    }
};",1454807224
Enzo de Almeida Rodrigues,enzoar,89,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& a, vector<vector<int>>& Q) {
        int n = a.size();
        vector<int> delta(n + 1); 
        for (auto v : Q) {
            int l = v[0], r = v[1]; 
            delta[l]--; delta[r+1]++;
        }
        bool ok = 1; 
        for (int i = 0; i < n ;i++) {
            delta[i+1] += delta[i]; 
            a[i] += delta[i]; 
            ok &= a[i] <= 0; 
        }
        return (bool)ok; 
            
    }
};",1454810020
Enzo de Almeida Rodrigues,enzoar,89,3643,cpp,"class Solution {
public:
    typedef long long ll ;
    int minZeroArray(vector<int>& a, vector<vector<int>>& Q) {
        int n = a.size(); 
        int q = Q.size(); 
        int lo = -1, hi = q-1, ba = -2; 
        while (lo <= hi) {
            int mid = lo + hi >> 1; 
            vector<ll> delta(n + 1); 
            for (int i = 0; i <= mid; i++) {
                int l = Q[i][0], r = Q[i][1], v = Q[i][2]; 
                delta[l] -= v; 
                delta[r + 1] += v; 
            }
            bool ok = 1; 
            for (int i = 0; i < n; i++) {
                delta[i+1] += delta[i]; 
                ok &= (ll)a[i] + delta[i] <= 0; 
            }
            if (ok) {
                ba = mid; 
                hi = mid - 1; 
            }
            else lo = mid + 1; 
        }
        return (ba + 1); 
    }
};",1454817229
eatfood,eatfood,90,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        tot = sum(nums)
        n=len(nums)
        c=0

        valid =[]
        if tot % 2 == 0:
            valid=[tot//2]
        else:
            valid=[tot//2, tot//2+1]
        w = 3-len(valid)
        ans=0
        for i in range(n):
            c+=nums[i]
            if nums[i] == 0 and c in valid:
                ans+=w
        # print(tot, valid)
        return ans",1454808006
eatfood,eatfood,90,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        n=len(nums)
        m=len(queries)
        arr=[0]*n
        for l,r in queries:
            arr[l] += 1
            if r+1 < n:
                arr[r+1] -= 1
        # accum
        for i in range(1,n):
            arr[i]+=arr[i-1]

        # print(arr)

        # check larger
        for i in range(n):
            if arr[i] < nums[i]:
                return False
        return True",1454810366
eatfood,eatfood,90,3643,python3,"class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        n=len(nums)
        m=len(queries)
        inf=int(1e7)

        def check(k):
            arr=[0]*n
            for l,r,val in queries[:k]:
                arr[l] += val
                if r+1 < n:
                    arr[r+1] -= val
            # accum
            for i in range(1,n):
                arr[i]+=arr[i-1]
    
            # check larger
            for i in range(n):
                if arr[i] < nums[i]:
                    return False
            return True
        # binary search on k
        ans=inf
        lo = 0
        hi = m
        while lo<=hi:
            mid=(lo+hi)//2
            ok = check(mid)
            if ok:
                # go left
                ans=min(ans,mid)
                hi=mid-1
            else:
                lo=mid+1
        if ans == inf:
            return -1
        return ans
        
        ",1454817251
Anand V,Anand_2006,93,3616,python3,"from typing import List

class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        n = len(nums)
        valid_count = 0
        
        # Function to simulate the process
        def simulate(curr, direction):
            arr = nums[:]
            while 0 <= curr < n:
                if arr[curr] == 0:
                    curr += direction
                else:
                    arr[curr] -= 1
                    direction = -direction
                    curr += direction
            return all(x == 0 for x in arr)
        
        # Try all starting positions and directions
        for i in range(n):
            if nums[i] == 0:
                # Check both left and right directions
                if simulate(i, -1):  # Left direction
                    valid_count += 1
                if simulate(i, 1):  # Right direction
                    valid_count += 1
        
        return valid_count
",1454808271
Anand V,Anand_2006,93,3639,python3,"from typing import List

class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        n = len(nums)
        diff = [0] * (n + 1)
        
        # Build the difference array based on queries
        for li, ri in queries:
            diff[li] += 1
            if ri + 1 < n:
                diff[ri + 1] -= 1
        
        # Compute the prefix sum to get the range counts
        range_effect = [0] * n
        range_effect[0] = diff[0]
        for i in range(1, n):
            range_effect[i] = range_effect[i - 1] + diff[i]
        
        # Check if the allowed decrements are enough for each index
        for i in range(n):
            if nums[i] > range_effect[i]:
                return False
        
        return True
",1454808735
Anand V,Anand_2006,93,3643,python3,"class Solution:
    def minZeroArray(self, A, Q):
        n, m = len(A), len(Q)
        
        if all(x == 0 for x in A):  # Handle the edge case where A is already a Zero Array
            return 0
        
        def f(k):
            D = [0] * (n + 1)
            C = A[:]
            for i in range(k):
                l, r, v = Q[i]
                D[l] += v
                if r + 1 < n:
                    D[r + 1] -= v
            
            d = 0
            for i in range(n):
                d += D[i]
                C[i] = max(0, C[i] - d)
            
            return all(x == 0 for x in C)
        
        l, r, res = 1, m, -1
        while l <= r:
            mid = (l + r) // 2
            if f(mid):
                res = mid
                r = mid - 1
            else:
                l = mid + 1
        
        return res

",1454810856
YCX,EricYXing,94,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int n = nums.size(), s = 0, t = accumulate(nums.begin(), nums.end(), 0), ans = 0;
        for (int i = 0; i < n; i++)
        {
            s += nums[i];
            t -= nums[i];
            if (nums[i] == 0)
            {
                if (s == t)
                    ans += 2;
                else if (abs(s - t) == 1)
                    ans += 1;
            }
        }
        return ans;
    }
};",1454807547
YCX,EricYXing,94,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        vector<int> deop(n + 1, 0);
        for (auto& q : queries)
        {
            deop[q[0]]++;
            deop[q[1] + 1]--;
        }
        for (int i = 1; i <= n; i++)
            deop[i] += deop[i - 1];
        for (int i = 0; i < n; i++)
            if (nums[i] > deop[i])
                return false;
        return true;
    }
};",1454810905
YCX,EricYXing,94,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int ans = -1, l = 0, r = queries.size();
        while (l <= r)
        {
            int m = (l + r) / 2;
            if (check(nums, queries, m))
            {
                ans = m;
                r = m - 1;
            }
            else
                l = m + 1;
        }
        return ans;
    }
    
private: 
    bool check(vector<int>& nums, vector<vector<int>>& queries, int m)
    {
        int n = nums.size();
        vector<int> deop(n + 1, 0);
        for (int j = 0; j < m; j++)
        {
            deop[queries[j][0]] += queries[j][2];
            deop[queries[j][1] + 1] -= queries[j][2];
        }
        for (int i = 0; i < n; i++)
        {
            if (i > 0)
                deop[i] += deop[i - 1];
            if (nums[i] > deop[i])
                return false;
        }
        return true;
    }
};",1454817735
Kevin Xie,Kevinxiehk,96,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int sum = 0;
        for(auto x: nums) sum += x;
        int sum2 = 0;
        int ans = 0;
        for(int i = 0; i < nums.size(); i++) {
            if(nums[i] == 0 && sum2 * 2 == sum) ans += 2;
            else if(nums[i] == 0 && abs(sum - sum2 * 2) == 1) ans++;
            sum2 += nums[i];
        }
        return ans;
    }
};",1454806705
Kevin Xie,Kevinxiehk,96,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        int q = queries.size();
        int diff[n + 5];
        for(int i = 0; i <= n; i++) diff[i] = 0;
        for(auto x: queries) {
            diff[x[0]]--;
            diff[x[1] + 1]++;
        }
        for(int i = 1; i <= n; i++) diff[i] += diff[i - 1];
        for(int i = 0; i < n; i++) {
            if(nums[i] + diff[i] > 0) return false;
        }
        return true;
    }
};",1454808480
Kevin Xie,Kevinxiehk,96,3643,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries, int q) {
        int n = nums.size();
        long long diff[n + 5];
        for(int i = 0; i <= n; i++) diff[i] = 0;
        for(int i = 0; i < q; i++) {
            auto x = queries[i];
            diff[x[0]] -= x[2];
            diff[x[1] + 1] += x[2];
        }
        for(int i = 1; i <= n; i++) diff[i] += diff[i - 1];
        for(int i = 0; i < n; i++) {
            if(nums[i] + diff[i] > 0) return false;
        }
        return true;
    }
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int l = 0, r = queries.size();
        while(l < r) {
            int m = (l + r) / 2;
            if(isZeroArray(nums, queries, m)) r = m;
            else l = m + 1;
        }
        if(!isZeroArray(nums, queries, l)) return -1;
        return l;
    }
};",1454811646
Utpal Tiwari,utpaltiwari02,97,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int sum = accumulate(nums.begin(), nums.end(), 0);
        int curr = 0;
        int answer = 0;
        for(int i = 0; i < nums.size(); i++) {
            if(nums[i] == 0) {
                if(abs(sum - curr) == 1) {
                    answer += 1;
                }
                else if(abs(sum - curr) == 0) {
                    answer += 2;
                }
            }
            else {
                sum -= nums[i];
                curr += nums[i];
            }
        }
        return answer;
    }
};",1454808305
Utpal Tiwari,utpaltiwari02,97,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int size = nums.size();
        vector<int> sum(size, 0);
        for(int i = 0; i < queries.size(); i++) {
            int start = queries[i][0];
            int end = queries[i][1];
            sum[start]++;
            if(end + 1 < size) {
                sum[end + 1]--;
            }
        }
        vector<int> prefix;
        int total = 0;
        for(int i = 0; i < size; i++) {
            total += sum[i];
            prefix.push_back(total);
        }
        for(int i = 0; i < size; i++) {
            if(prefix[i] < nums[i]) {
                return false;
            }
        }
        return true;
    }
};",1454812045
Utpal Tiwari,utpaltiwari02,97,3643,cpp,"class Solution {
public:
    bool check(vector<int>& nums, vector<vector<int>>& queries, int k) {
        int size = nums.size();
        vector<int> sum(size, 0);
        for(int i = 0; i < k; i++) {
            int start = queries[i][0];
            int end = queries[i][1];
            int val = queries[i][2];
            sum[start] += val;
            if(end + 1 < size) {
                sum[end + 1] -= val;
            }
        }
        vector<int> prefix;
        int total = 0;
        for(int i = 0; i < size; i++) {
            total += sum[i];
            prefix.push_back(total);
        }
        for(int i = 0; i < size; i++) {
            if(nums[i] - prefix[i] > 0) {
                return false;
            }
        }
        return true;
    }
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int start = 0;
        int end = queries.size();
        int answer = INT_MAX;
        while(start <= end) {
            int mid = start + (end - start) / 2;
            if(check(nums, queries, mid) == true) {
                answer = min(answer, mid);
                end = mid - 1;
            }
            else {
                start = mid + 1;
            }
        }
        if(answer == INT_MAX) {
            return -1;
        }
        return answer;
    }
};",1454818757
Rohit Meena,Rohit_Meena,98,3616,cpp,"class Solution {
public:
    bool isValid(int pos, int dir, vector<int> nums){
        int n = nums.size();
        while(pos >= 0 && pos < n){
            if(nums[pos] == 0) pos += dir;
            else{
                nums[pos]--;
                if(dir == 1) dir = -1;
                else dir = 1;
                pos += dir;
            }
        }
        int sum = accumulate(nums.begin(), nums.end(), 0);
        return sum == 0;
    }
    int countValidSelections(vector<int>& nums) {
        int ans = 0;
        for(int i = 0;i<nums.size();i++){
            if(nums[i] != 0) continue;
            ans += isValid(i, 1, nums);
            ans += isValid(i, -1, nums);
        }
        return ans;
    }
};",1454808953
Rohit Meena,Rohit_Meena,98,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        vector<int> diff(n + 1);
        for(int i = 0;i<queries.size();i++){
            int l = queries[i][0], r = queries[i][1], val = 1;
            diff[l] += val;
            if(r + 1 < n) diff[r + 1] -= val;
        }
        for(int i = 0;i<n;i++){
            if(i) diff[i] += diff[i-1];
            if(diff[i] < nums[i]) return false;
        }
        return true;
    }
};",1454818815
Rohit Meena,Rohit_Meena,98,3643,cpp,"class Solution {
public:
    bool check(vector<int> &nums, vector<vector<int>>& queries, int k){
        int n = nums.size();
        vector<int> diff(n + 1);
        for(int i = 0;i<k;i++){
            int l = queries[i][0], r = queries[i][1], val = queries[i][2];
            diff[l] += val;
            if(r + 1 < n) diff[r + 1] -= val;
        }
        for(int i = 0;i<n;i++){
            if(i) diff[i] += diff[i-1];
            if(diff[i] < nums[i]) return false;
        }
        return true;
    }
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int l = 0, r = queries.size();
        int ans = -1;
        while(l <= r){
            int mid = l + (r - l)/2;
            if(check(nums, queries, mid)){
                ans = mid;
                r = mid - 1;
            }
            else l = mid + 1;
        }
        return ans;
    }
};",1454817563
Ma Lin,Ma_Lin,99,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& yuan) {
        vector<int> a;
        int i, j, p, sd, d, n = yuan.size(), res = 0;
        for (i = 0; i < n; ++i){
            if (yuan[i] != 0) continue;
            for (sd = -1; sd <= 1; sd += 2){
                a = yuan;
                d = sd;
                p = i;
                while (true){
                    p += d;
                    if (p < 0 || p >= n) break;
                    if (a[p] > 0){
                        --a[p];
                        d = -d;
                    }
                }
                
                for (j = 0; j < n; ++j)
                    if (a[j] != 0) break;
                if (j == n) ++res;
            }
        }
            
        return res;
    }
};",1454809639
Ma Lin,Ma_Lin,99,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& a, vector<vector<int>>& Q) {
        vector<int> f = a;
        int i, j, n = a.size(), now = 0;
        for (i = 0; i < n; ++i) f[i] = 0;
        for (auto q : Q){
            ++f[q[0]];
            if (q[1] + 1 < n) --f[q[1] + 1];
        }
        
        for (i = 0; i < n; ++i){
            now += f[i];
            if (now < a[i]) return false;
        }
        return true;
    }
};",1454812117
Ma Lin,Ma_Lin,99,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& a, vector<vector<int>>& Q) {
        int f[100005], i, j, st = 0, ed = Q.size(), mid, n = a.size(), now = 0, res = -1;
        while (st <= ed){
            mid = (st + ed) / 2;
            for (i = 0; i < n; ++i) f[i] = 0;
            for (i = 0; i < mid; ++i){
                f[Q[i][0]] += Q[i][2];
                if (Q[i][1] + 1 < n) f[Q[i][1] + 1] -= Q[i][2];
            }
            
            now = 0;
            for (i = 0; i < n; ++i){
                now += f[i];
                if (now < a[i]) break;
            }
            
            if (i >= n){
                res = mid;
                ed = mid - 1;
            }
            else st = mid + 1;
        }
        
        return res;
    }
};",1454818848
Huzaifa Khilawala,RedHeadphone,100,3616,python3,"
class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        right_sum = sum(nums)
        left_sum = 0
        ans = 0

        for i in range(len(nums)):
            right_sum -= nums[i]
            left_sum += nums[i]

            if nums[i]==0:
                if right_sum == left_sum:
                    ans+=2
                elif right_sum+1==left_sum or left_sum+1==right_sum:
                    ans+=1

        return ans 
",1454818389
Huzaifa Khilawala,RedHeadphone,100,3639,python3,"
class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        n = len(nums)
        diff = [0]*(n+1)

        for l,r in queries:
            diff[l] += 1
            diff[r+1] -= 1

        for i in range(1,n):
            diff[i] += diff[i-1]

        for i in range(n):
            if nums[i]-diff[i] > 0:
                return False
        
        return True",1454818545
Huzaifa Khilawala,RedHeadphone,100,3643,python3,"
def binary_search(left, right, check, start_from_left):
    if start_from_left:
        ans = left
    else:
        ans = right
    while left <= right:
        mid = (left + right) // 2
        if start_from_left:
            if check(mid):
                ans, left = mid, mid + 1
            else:
                right = mid - 1
        else:
            if check(mid):
                ans, right = mid, mid - 1
            else:
                left = mid + 1
    return ans

class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        n = len(nums)

        def check(k):
            diff = [0]*(n+1)

            for l,r,v in queries[:k]:
                diff[l] += v
                diff[r+1] -= v

            for i in range(1,n):
                diff[i] += diff[i-1]

            for i in range(n):
                if nums[i]-diff[i] > 0:
                    return False
            
            return True

        if not check(len(queries)):
            return -1

        ans = binary_search(0, len(queries), check, False)
        return ans ",1454819379
Mohamed Ashiq,mohd_ashiq04,103,3616,python3,"class Solution:
    def countValidSelections(self, nums):
        def simulate(curr, direction):
            nums_copy = nums[:]
            while 0 <= curr < len(nums_copy):
                if nums_copy[curr] == 0:
                    curr += direction
                else:
                    nums_copy[curr] -= 1
                    direction = -direction
                    curr += direction
            return all(x == 0 for x in nums_copy)

        valid_count = 0
        for i in range(len(nums)):
            if nums[i] == 0:
                if simulate(i, -1):  # Simulate starting at i, moving left
                    valid_count += 1
                if simulate(i, 1):   # Simulate starting at i, moving right
                    valid_count += 1
        return valid_count
",1454807289
Mohamed Ashiq,mohd_ashiq04,103,3639,python3,"class Solution:
    def isZeroArray(self, nums, queries):
        n = len(nums)
        diff = [0] * (n + 1)

        # Process each query to calculate the allowed decrements
        for li, ri in queries:
            diff[li] += 1
            if ri + 1 < n:
                diff[ri + 1] -= 1

        # Calculate the cumulative allowed decrements
        allowed_decrements = [0] * n
        current = 0
        for i in range(n):
            current += diff[i]
            allowed_decrements[i] = current

        # Check if nums can be transformed into a zero array
        for i in range(n):
            if nums[i] > allowed_decrements[i]:
                return False

        return True
",1454810674
Mohamed Ashiq,mohd_ashiq04,103,3643,python3,"class Solution:
    def minZeroArray(self, nums, queries):
        n = len(nums)
        m = len(queries)

        # Check if the first k queries can transform nums into a zero array
        def canMakeZero(k):
            diff = [0] * (n + 1)  # Difference array for allowed decrements

            # Apply the first k queries
            for i in range(k):
                l, r, val = queries[i]
                diff[l] += val
                if r + 1 < n:
                    diff[r + 1] -= val

            # Calculate cumulative allowed decrements
            allowed_decrements = [0] * n
            current = 0
            for i in range(n):
                current += diff[i]
                allowed_decrements[i] = current

            # Check if nums[i] <= allowed_decrements[i] for all i
            for i in range(n):
                if nums[i] > allowed_decrements[i]:
                    return False
            return True

        # Binary search for the minimum k
        left, right, result = 0, m, -1
        while left <= right:
            mid = (left + right) // 2
            if canMakeZero(mid):
                result = mid
                right = mid - 1  # Try to find a smaller k
            else:
                left = mid + 1  # Increase k

        return result
",1454812855
Xiaoyu Wang,wxy9018,104,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        summ = sum(nums)
        tot = 0
        res = 0
        for i in range(len(nums)):
            tot += nums[i]
            if nums[i] == 0:
                if tot * 2 == summ:
                    res += 2
                elif tot * 2 + 1 == summ or tot * 2 - 1 == summ:
                    res += 1
        return res",1454807563
Xiaoyu Wang,wxy9018,104,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        diff = [0] * (len(nums) + 1)
        for a, b in queries:
            diff[a] -= 1
            diff[b+1] += 1
        
        for i in range(len(nums)):
            diff[i+1] += diff[i]
        
        for i in range(len(nums)):
            nums[i] += diff[i]
        
        #print(nums)
        
        for i in range(len(nums)):
            if nums[i] > 0:
                return False
        
        return True",1454813721
Xiaoyu Wang,wxy9018,104,3643,python3,"class Solution:
    def minZeroArray(self, arr: List[int], queries: List[List[int]]) -> int:
        def helper(nums, k):
            diff = [0] * (len(nums) + 1)
            for i in range(k):
                a, b, val = queries[i]
                diff[a] -= val
                diff[b+1] += val

            for i in range(len(nums)):
                diff[i+1] += diff[i]

            for i in range(len(nums)):
                if nums[i] + diff[i] > 0:
                    return False

            return True
        
        low, high = 0, len(queries)
        while low < high:
            mid = (low + high) // 2
            if not helper(arr, mid):
                low = mid + 1
            else:
                high = mid
        
        if helper(arr, low):
            return low
        
        return -1",1454819859
code12345ay,code12345ay,106,3616,cpp,"#include <vector>
using namespace std;

class Solution {
public:
    // Helper function to simulate the process
    bool simulate(vector<int> nums, int start, int direction) {
        int n = nums.size();
        int curr = start;
        
        while (curr >= 0 && curr < n) {
            if (nums[curr] == 0) {
                curr += direction;
            } else {
                nums[curr] -= 1;
                direction *= -1; // Reverse direction
                curr += direction;
            }
        }
        
        // Check if all elements are zero
        for (int num : nums) {
            if (num != 0) {
                return false;
            }
        }
        
        return true;
    }

    int countValidSelections(vector<int>& nums) {
        int n = nums.size();
        int count = 0;
        
        for (int i = 0; i < n; ++i) {
            if (nums[i] == 0) {
                // Try moving left
                if (simulate(nums, i, -1)) {
                    count++;
                }
                // Try moving right
                if (simulate(nums, i, 1)) {
                    count++;
                }
            }
        }
        
        return count;
    }
};",1454813147
code12345ay,code12345ay,106,3639,cpp,"#include <vector>
using namespace std;

class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        vector<int> diff(n + 1, 0);

        // Apply all queries to the difference array
        for(auto &query : queries){
            int l = query[0];
            int r = query[1];
            diff[l] += 1;
            if(r + 1 < n){
                diff[r + 1] -= 1;
            }
        }

        // Compute prefix sums to get coverage counts
        int coverage = 0;
        for(int i = 0; i < n; ++i){
            coverage += diff[i];
            if(coverage < nums[i]){
                return false;
            }
        }
        return true;
    }
};",1454808151
code12345ay,code12345ay,106,3643,cpp,"#include <vector>
using namespace std;

class Solution {
public:
    bool isPossible(int k, const vector<int>& nums, const vector<vector<int>>& queries) {
        int n = nums.size();
        vector<long long> diff(n + 1, 0);
        for(int i = 0; i < k; ++i){
            int l = queries[i][0];
            int r = queries[i][1];
            int val = queries[i][2];
            diff[l] += val;
            if(r + 1 < n){
                diff[r + 1] -= val;
            }
        }
        long long total = 0;
        for(int i = 0; i < n; ++i){
            total += diff[i];
            if(total < nums[i]){
                return false;
            }
        }
        return true;
    }
    
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int left = 0, right = queries.size();
        int result = -1;
        while(left <= right){
            int mid = left + (right - left) / 2;
            if(isPossible(mid, nums, queries)){
                result = mid;
                right = mid - 1;
            }
            else{
                left = mid + 1;
            }
        }
        return result;
    }
};",1454806468
kmjp,kmjp,109,3616,cpp,"#include <bits/stdc++.h>
using namespace std;
typedef signed long long ll;

#undef _P
#define _P(...) (void)printf(__VA_ARGS__)
#define FOR(x,to) for(x=0;x<(to);x++)
#define FORR(x,arr) for(auto& x:arr)
#define FORR2(x,y,arr) for(auto& [x,y]:arr)
#define ALL(a) (a.begin()),(a.end())
#define ZERO(a) memset(a,0,sizeof(a))
#define MINUS(a) memset(a,0xff,sizeof(a))
template<class T> bool chmax(T &a, const T &b) { if(a<b){a=b;return 1;}return 0;}
template<class T> bool chmin(T &a, const T &b) { if(a>b){a=b;return 1;}return 0;}
//-------------------------------------------------------



class Solution {
public:
    int countValidSelections(vector<int>& nums) {
		int ret=0;
		int i,j;
		int N=nums.size();
		FOR(i,N) if(nums[i]==0) {
			FOR(j,2) {
				vector<int> V=nums;
				int cur=i;
				int dir=j;
				while(1) {
					if(cur<0||cur>=N) break;
					if(V[cur]==0) {
						if(dir==0) cur++;
						else cur--;
					}
					else {
						V[cur]--;
						dir^=1;
						if(dir==0) cur++;
						else cur--;
					}
				}
				FOR(cur,N) if(V[cur]) break;
				if(cur==N) ret++;
			}
		}
		return ret;
        
    }
};

",1454807873
kmjp,kmjp,109,3639,cpp,"#include <bits/stdc++.h>
using namespace std;
typedef signed long long ll;

#undef _P
#define _P(...) (void)printf(__VA_ARGS__)
#define FOR(x,to) for(x=0;x<(to);x++)
#define FORR(x,arr) for(auto& x:arr)
#define FORR2(x,y,arr) for(auto& [x,y]:arr)
#define ALL(a) (a.begin()),(a.end())
#define ZERO(a) memset(a,0,sizeof(a))
#define MINUS(a) memset(a,0xff,sizeof(a))
template<class T> bool chmax(T &a, const T &b) { if(a<b){a=b;return 1;}return 0;}
template<class T> bool chmin(T &a, const T &b) { if(a>b){a=b;return 1;}return 0;}
//-------------------------------------------------------


int S[202020];
class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
		int N=nums.size();
		int i;
		FOR(i,N+1) S[i]=0;
		FORR(q,queries) {
			S[q[0]]++;
			S[q[1]+1]--;
		}
		FOR(i,N) {
			S[i+1]+=S[i];
			if(S[i]<nums[i]) return 0;
		}
		return 1;
        
    }
};
",1454809550
kmjp,kmjp,109,3643,cpp,"#include <bits/stdc++.h>
using namespace std;
typedef signed long long ll;

#undef _P
#define _P(...) (void)printf(__VA_ARGS__)
#define FOR(x,to) for(x=0;x<(to);x++)
#define FORR(x,arr) for(auto& x:arr)
#define FORR2(x,y,arr) for(auto& [x,y]:arr)
#define ALL(a) (a.begin()),(a.end())
#define ZERO(a) memset(a,0,sizeof(a))
#define MINUS(a) memset(a,0xff,sizeof(a))
template<class T> bool chmax(T &a, const T &b) { if(a<b){a=b;return 1;}return 0;}
template<class T> bool chmin(T &a, const T &b) { if(a>b){a=b;return 1;}return 0;}
//-------------------------------------------------------

ll S[502020];


class Solution {
public:
	int can(vector<int> nums,vector<vector<int>> queries,int K) {
		int N=nums.size();
		int i;
		
		FOR(i,N+1) S[i]=0;
		FOR(i,K) {
			S[queries[i][0]]+=queries[i][2];
			S[queries[i][1]+1]-=queries[i][2];
		}
		FOR(i,N) {
			S[i+1]+=S[i];
			if(S[i]<nums[i]) return 0;
		}
		return 1;
	}
	
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
		int N=nums.size();
		int i;
		
		int K=queries.size()+1;
		for(i=20;i>=0;i--) if(can(nums,queries,K-(1<<i))) K-=1<<i;
		
		
		if(K<0) K=0;
		
		
		if(K==queries.size()+1) K=-1;
		return K;
        
    }
};
",1454813569
Sam Huang,CelonyMire,110,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& a) {
        int n = a.size();
        int ans = 0;
        for (int s = 0; s < n; s++) {
            if (a[s]) {
                continue;
            }
            for (int p = 0; p < 2; p++) {
                int d = pow(-1, p);
                auto b = a;
                for (int i = s; i >= 0 && i < n; i += d) {
                    if (b[i]) {
                        b[i]--;
                        d *= -1;
                    }
                }
                ans += ranges::count(b, 0) == n;
            }
        }
        return ans;
    }
};",1454808230
Sam Huang,CelonyMire,110,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& a, vector<vector<int>>& q) {
        int n = a.size(), m = q.size();
        bool ans = true;
        vector d(n + 1, 0);
        for (int i = 0; i < m; i++) {
            d[q[i][0]]++, d[q[i][1] + 1]--;
        }
        for (int i = 0, j = 0; i < n; i++) {
            j += d[i];
            ans &= j >= a[i];
        }
        return ans;
    }
};",1454810835
Sam Huang,CelonyMire,110,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& a, vector<vector<int>>& q) {
        int n = a.size(), m = q.size();
        int lb = -1, rb = m + 1;
        while (rb - lb > 1) {
            int mb = (lb + rb) >> 1;
            vector d(n + 1, 0);
            for (int i = 0; i < mb; i++) {
                d[q[i][0]] += q[i][2];
                d[q[i][1] + 1] -= q[i][2];
            }
            bool ans = true;
            for (int i = 0, j = 0; i < n; i++) {
                j += d[i];
                ans &= j >= a[i];
            }
            if (!ans) {
                lb = mb;
            } else {
                rb = mb;
            }
        }
        return rb > m ? -1 : rb;
    }
};",1454820441
Chris Ho,Chris_ho,111,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        n = len(nums)
        count = 0


        starting_positions = [i for i, val in enumerate(nums) if val == 0]

        for i in starting_positions:
            for d in [-1, 1]:  
                temp = nums.copy()
                curr = i
                dir = d

                while 0 <= curr < n:
                    if temp[curr] == 0:
                        curr += dir
                    else:
                        temp[curr] -= 1
                        dir = -dir
                        curr += dir


                all_zero = True
                for val in temp:
                    if val != 0:
                        all_zero = False
                        break
                if all_zero:
                    count += 1

        return count",1454806676
Chris Ho,Chris_ho,111,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        n = len(nums)
        coverage = [0] * (n + 1)  
        

        for query in queries:
            l, r = query
            coverage[l] += 1
            if r + 1 < n:
                coverage[r + 1] -= 1
        

        for i in range(n):
            if i > 0:
                coverage[i] += coverage[i - 1]

            if nums[i] > coverage[i]:
                return False
        

        return True",1454808178
Chris Ho,Chris_ho,111,3643,python3,"from typing import List

class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        n = len(nums)
        m = len(queries)
        

        if all(num == 0 for num in nums):
            return 0
        
        def is_possible(k: int) -> bool:

            diff = [0] * (n + 1)
            for i in range(k):
                l, r, val = queries[i]
                diff[l] += val
                if r + 1 < n:
                    diff[r + 1] -= val

            total = 0
            for i in range(n):
                total += diff[i]
                if total < nums[i]:
                    return False
            return True
        
        low = 1
        high = m
        answer = -1
        
        while low <= high:
            mid = (low + high) // 2
            if is_possible(mid):
                answer = mid
                high = mid - 1
            else:
                low = mid + 1
        

        if answer != -1:
            return answer
        else:

            if is_possible(m):
                return m
            else:
                return -1
",1454820491
jlallas384,jlallas384,112,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        ans = 0
        n = len(nums)
        for s in range(n):
            if nums[s] != 0:
                continue
            def do(dir):
                c = nums[:]
                at = s
                while 0 <= at and at < n:
                    if c[at] == 0:
                        at += dir
                    else:
                        c[at] -= 1
                        dir *= -1
                        at += dir
                return all(i == 0 for i in c)
            ans += do(-1) + do(1)
        return ans",1454808379
jlallas384,jlallas384,112,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        n = len(nums)
        ps = [0] * (n + 1)
        for l, r in queries:
            ps[l] += 1
            ps[r + 1] -= 1
        s = 0
        for i in range(n):
            ps[i + 1] += ps[i]
        for i in range(n):
            if nums[i] > ps[i]:
                return False
        return True",1454811226
jlallas384,jlallas384,112,3643,python3,"class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        n = len(nums)
        lo, hi = 0, len(queries)
        ans = -1
        while lo <= hi:
            mi = (lo + hi) // 2
            def f():
                ps = [0] * (n + 1)
                for i in range(mi):
                    l, r, v = queries[i]
                    ps[l] += v
                    ps[r + 1] -= v
                for i in range(n):
                    ps[i + 1] += ps[i]
                return all(ps[i] >= nums[i] for i in range(n))
            if f():
                ans = mi
                hi = mi - 1
            else:
                lo = mi + 1

        return ans",1454820761
Manan Rathod,Manan04,115,3616,python3,"class Solution:
    def countValidSelections(self, a: List[int]) -> int:
        ans = 0
        n = len(a)
        for i in range(n):
            if(a[i] != 0):
                continue
            *b, = a
            j = i
            direc = -1
            while j >= 0 and j < n:
                if(b[j] == 0):
                    j += direc
                elif(b[j] > 0):
                    b[j] -= 1
                    direc *= -1
                    j += direc
            if(b.count(0) == n):
                ans += 1
            j = i
            *b, = a
            direc = 1
            while j >= 0 and j < n:
                if(b[j] == 0):
                    j += direc
                elif(b[j] > 0):
                    b[j] -= 1
                    direc *= -1
                    j += direc
            if(b.count(0) == n):
                ans += 1
        return ans",1454807561
Manan Rathod,Manan04,115,3639,python3,"class Solution:
    def isZeroArray(self, a: List[int], queries: List[List[int]]) -> bool:
        n = len(a)
        helper = [0] * (n + 5)
        for l, r in queries:
            helper[l] += 1
            helper[r + 1] -= 1
        for i in range(1, len(helper)):
            helper[i] += helper[i - 1]
        for i in range(n):
            if(a[i] > helper[i]):
                return False
        return True",1454809990
Manan Rathod,Manan04,115,3643,python3,"class Solution:
    def minZeroArray(self, a: List[int], queries: List[List[int]]) -> int:
        ans = -2
        n = len(a)
        if(a.count(0) == n):
            return 0
        L = 0
        U = len(queries) - 1
        def poss(m):
            helper = [0] * (n + 5)
            for i in range(m + 1):
                l, r, val = queries[i]
                helper[l] += val
                helper[r + 1] -= val
            for i in range(1, len(helper)):
                helper[i] += helper[i - 1]
            for i in range(n):
                if(a[i] > helper[i]):
                    return False
            return True
        while L <= U:
            m = (L + U) >> 1
            if(poss(m)):
                U = m - 1
                ans = m
            else:
                L = m + 1
        return ans + 1",1454814706
Teadose,IanISam,116,3616,cpp,"class Solution {
public:
    bool check(int i, vector<int> nums, int dir){
        int n = nums.size();
        while(1){
            if(i==n||i<0)break;
            if(nums[i]==0){
                i+=dir;
            }
            else{
                nums[i]--;
                dir*=-1;
                i+=dir;
            }
        }
        for(int i=0; i<n; i++)if(nums[i])return(0);
        return(1);
    }
    int countValidSelections(vector<int>& nums) {
        int n = nums.size();
        int cnt = 0;
        for(int i=0; i<n; i++){
            if(nums[i])continue;
            cnt+=check(i, nums, 1);
            cnt+=check(i, nums, -1);
        }
        return(cnt);
    }
};",1454821673
Teadose,IanISam,116,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        vector<int> p(n+1);
        for(auto& x: queries){
            p[x[0]]++;
            p[x[1]+1]--;
        }
        int sum = 0;
        for(int i=0; i<n; i++){
            sum+=p[i];
            if(nums[i]>sum)return(0);
        }
        return(1);
    }
};",1454807827
Teadose,IanISam,116,3643,cpp,"class Solution {
public:
    typedef long long ll;
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        int start = -1, end = queries.size()+1;
        while(start<end-1){
            int find = (start+end)/2;
            int k = 0;
            vector<ll> p(n+1);
            for(auto& x: queries){
                if(k==find)break;
                p[x[0]]+=x[2];
                p[x[1]+1]-=x[2];
                k++;
            }
            ll sum = 0;
            bool found = 1;
            for(int i=0; i<n; i++){
                sum+=p[i];
                if(nums[i]>sum)found=0;
            }
            if(found){
                end=find;
            }
            else{
                start=find;
            }
        }
        return((end==queries.size()+1?-1:end));
    }
};",1454812926
Orca1293,Orca1293,120,3616,java,"class Solution {
    public int countValidSelections(int[] nums) {
        int n = nums.length;
        int[] arr1 = new int[n+1];
        int[] arr2 = new int[n+1];
        for(int i = 0; i < n; i++){
            arr1[i+1] = arr1[i] + nums[i];
        }
        
        for(int i = n-1; i >= 0; i--){
            arr2[i] = arr2[i+1] + nums[i];
        }
        int res = 0;
        for(int i = 0; i < n; i++){
            if(nums[i] == 0){
                if(arr1[i] == arr2[i+1]){
                    res += 2;
                }
                else if(arr1[i]+1 == arr2[i+1] || arr1[i] == arr2[i+1]+1){
                    res += 1;
                }
            }
        }
        return res;
    }
}",1454811143
Orca1293,Orca1293,120,3639,java,"class Solution {
    public boolean isZeroArray(int[] nums, int[][] queries) {
        int n = nums.length;
        int[] arr = new int[n+1];
        for(int[] c : queries){
            arr[c[0]] -= 1;
            arr[c[1]+1] += 1;
        }
        
        int cur = 0;
        for(int i = 0; i < n; i++){
            cur += arr[i];
            if(nums[i] + cur > 0){
                return false;
            }
        }
        
        return true;
    }
}",1454815927
Orca1293,Orca1293,120,3643,java,"class Solution {
    public int minZeroArray(int[] nums, int[][] queries) {
        int min = 0;
        int max = queries.length;
        while(min <= max){
            int mid = min + (max - min)/2;
            if(check(nums,queries,mid)){
                max = mid - 1;
            }
            else{
                min = mid + 1;
            }
        }
        if(min > queries.length){
            return -1;
        }
        return min;
    }
    
    public boolean check(int[] nums, int[][] queries, int mid){
        int n = nums.length;
        int[] arr = new int[n+1];
        int k = 0;
        for(int[] c : queries){
            if(k < mid){
                arr[c[0]] -= c[2];
                arr[c[1]+1] += c[2];
            }
            else{
                break;
            }
            k += 1;
        }
        
        int cur = 0;
        for(int i = 0; i < n; i++){
            cur += arr[i];
            if(nums[i] + cur > 0){
                return false;
            }
        }
        
        return true;
    }
}",1454821976
Viraj Chandra,virajchandra51,122,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int n = nums.size();
        vector<int> pre(n+1,0);
        for(int i=1;i<=n;i++)
            {
                pre[i]=pre[i-1]+nums[i-1];
            }
        for(auto it:pre) cout<<it<<"" "";
        cout<<endl;
        int ans = 0;
        for(int i=1;i<=n;i++)
            {
                if(nums[i-1]==0 && pre[i-1]==pre[n]-pre[i-1])
                    ans+=2;
                else if(nums[i-1]==0 && abs(pre[i-1]-(pre[n]-pre[i-1]))==1)
                    ans++;
            }
        return ans;
    }
};",1454813034
Viraj Chandra,virajchandra51,122,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        vector<int> diff(n + 1, 0);

        // Apply all queries to the difference array
        for(auto &query : queries){
            int l = query[0];
            int r = query[1];
            diff[l] += 1;
            if(r + 1 < n){
                diff[r + 1] -= 1;
            }
        }

        // Compute prefix sums to get coverage counts
        int coverage = 0;
        for(int i = 0; i < n; ++i){
            coverage += diff[i];
            if(coverage < nums[i]){
                return false;
            }
        }
        return true;
    }
};",1454814976
Viraj Chandra,virajchandra51,122,3643,cpp,"class Solution {
public:
    bool isPossible(int k, const vector<int>& nums, const vector<vector<int>>& queries) {
        int n = nums.size();
        vector<long long> diff(n + 1, 0);
        for(int i = 0; i < k; ++i){
            int l = queries[i][0];
            int r = queries[i][1];
            int val = queries[i][2];
            diff[l] += val;
            if(r + 1 < n){
                diff[r + 1] -= val;
            }
        }
        long long total = 0;
        for(int i = 0; i < n; ++i){
            total += diff[i];
            if(total < nums[i]){
                return false;
            }
        }
        return true;
    }
    
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int left = 0, right = queries.size();
        int result = -1;
        while(left <= right){
            int mid = left + (right - left) / 2;
            if(isPossible(mid, nums, queries)){
                result = mid;
                right = mid - 1;
            }
            else{
                left = mid + 1;
            }
        }
        return result;
    }
};",1454815550
Xiaomeng Yang,yangxm,123,3616,cpp,"constexpr int MAX = 128;

int a[MAX];

bool Check(int n, int p, int d) {
  while (p >= 0 && p < n) {
    if (a[p] == 0) {
      p += d;
    } else {
      --a[p];
      d = -d;
      p += d;
    }
  }
  for (int i = 0; i < n; ++i) {
    if (a[i]) {
      return false;
    }
  }
  return true;
}

class Solution {
public:
    int countValidSelections(vector<int>& nums) {
      int n = nums.size(), ret = 0;
      for (int i = 0; i < n; ++i) {
        if (nums[i] == 0) {
          copy(nums.begin(), nums.end(), a);
          if (Check(n, i, 1)) {
            ++ret;
          }
          copy(nums.begin(), nums.end(), a);
          if (Check(n, i, -1)) {
            ++ret;
          }
        }
      }
      return ret;
    }
};",1454809692
Xiaomeng Yang,yangxm,123,3639,cpp,"constexpr int MAX = 100010;

int cnt[MAX];

class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
      int n = nums.size();
      fill(cnt, cnt + n + 1, 0);
      for (const auto& q : queries) {
        int l = q[0], r = q[1] + 1;
        ++cnt[l];
        --cnt[r];
      }
      if (cnt[0] < nums[0]) {
        return false;
      }
      for (int i = 1; i < n; ++i) {
        cnt[i] += cnt[i - 1];
        if (cnt[i] < nums[i]) {
          return false;
        }
      }
      return true;
    }
};",1454813172
Xiaomeng Yang,yangxm,123,3643,cpp,"constexpr int MAX = 100010;

int a[MAX], l[MAX], r[MAX], v[MAX], cnt[MAX];

bool Check(int n, int m) {
  fill(cnt, cnt + n + 1, 0);
  for (int i = 0; i < m; ++i) {
    cnt[l[i]] += v[i];
    cnt[r[i]] -= v[i];
  }
  int sum = 0;
  for (int i = 0; i < n; ++i) {
    sum += cnt[i];
    if (sum < a[i]) {
      return false;
    }
  }
  return true;
}

class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
      int n = nums.size(), m = queries.size();
      copy(nums.begin(), nums.end(), a);
      for (int i = 0; i < m; ++i) {
        l[i] = queries[i][0];
        r[i] = queries[i][1] + 1;
        v[i] = queries[i][2];
      }
      int ll = 0, rr = m + 1, ret = -1;
      while (ll < rr) {
        int mid = ll + (rr - ll) / 2;
        if (Check(n, mid)) {
          ret = mid;
          rr = mid;
        } else {
          ll = mid + 1;
        }
      }
      return ret;
    }
};",1454822541
raincoat911,raincoat911,125,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        vector<int> left(nums.size() + 1);
        for (int i = 0; i < nums.size(); i++) {
            left[i + 1] = left[i] + nums[i];
        }
        int res = 0, right = 0;
        for (int i = nums.size() - 1; i > -1; i--) {
            // cout << left[i] << "" "" << right << endl;
            if (nums[i] == 0) {
                if (left[i] == right) res += 2;
                if (abs(left[i] - right) == 1) res++;
            }
            right += nums[i];
        }
        return res;
    }
};",1454808892
raincoat911,raincoat911,125,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        vector<int> m(nums.size() + 1);
        for (auto& q : queries) {
            m[q[0]]++;
            m[q[1] + 1]--;
        }
        int cur = 0;
        for (int i = 0; i < nums.size(); i++) {
            cur += m[i];
            // cout << cur << endl;
            if (nums[i] > cur) return false;
        }
        return true;
    }
};",1454811768
raincoat911,raincoat911,125,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int lo = 0, hi = queries.size() + 1;
        while (lo < hi) {
            int mid = (lo + hi) / 2;
            if (f(nums, queries, mid)) hi = mid;
            else lo = mid + 1;
        }
        return lo > queries.size() ? -1 : lo;
    }
    
private:
    int f(vector<int>& nums, vector<vector<int>>& queries, int k) {
        vector<int> m(nums.size() + 1);
        for (int i = 0; i < k; i++) {
            auto& q = queries[i];
            m[q[0]] += q[2];
            m[q[1] + 1] -= q[2];
        }
        int cur = 0;
        for (int i = 0; i < nums.size(); i++) {
            cur += m[i];
            // cout << cur << endl;
            if (nums[i] > cur) return false;
        }
        return true;
    }
};",1454815817
peicd7699,peicd7699,126,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        s = sum(nums)
        
        curr = 0
        res = 0
        
        for v in nums:
            curr += v
            left = curr
            right = s - left
            if v == 0:
                if abs(left-right) == 1:
                    res += 1
                elif left==right:
                    res += 2
                    
        return res
                ",1454810033
peicd7699,peicd7699,126,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        n = len(nums)
        arr = [0] * (n+1)
        
        for s,e in queries:
            arr[s] += 1
            arr[e+1] -= 1
            
        curr = 0
        
        for v,c in zip(nums, arr):
            curr += c
            if v > curr:
                # print(v,c)
                return False
        return True",1454812269
peicd7699,peicd7699,126,3643,python3,"class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        
        def check(m):
            
            n = len(nums)
            arr = [0] * (n+1)
            ind = 0
            for s,e,val in queries:
                ind += 1
                if ind > m:
                    break
                arr[s] += val
                arr[e+1] -= val

            curr = 0

            for v,c in zip(nums, arr):
                curr += c
                if v > curr:
                    # print(v,c)
                    return False
            return True
        
        res = float('inf')
        if sum(nums) == 0:
            return 0
        
        l, h = 1, len(queries)
        while l<=h:
            m = (l+h)//2
            if check(m):
                res = m
                h = m- 1
            else:
                l = m+1
        return res if res != float('inf') else -1",1454815841
Feng W,wddd,127,3616,java,"class Solution {
    public int countValidSelections(int[] nums) {
        int[] prefixLeft = new int[nums.length];
        prefixLeft[0] = nums[0];
        for (int i = 1; i < nums.length; i++) {
            prefixLeft[i] = nums[i] + prefixLeft[i - 1];
        }

        int[] prefixRight = new int[nums.length];
        prefixRight[prefixRight.length - 1] = nums[nums.length - 1];
        for (int i = nums.length - 2; i >= 0; i--) {
            prefixRight[i] = nums[i] + prefixRight[i + 1];
        }

        int count = 0;
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] == 0) {
                if (prefixLeft[i] == prefixRight[i]) {
                    count += 2;
                } else if (Math.abs(prefixLeft[i] - prefixRight[i]) == 1) {
                    count += 1;
                }
            }
        }

        return count;
    }
}",1454809697
Feng W,wddd,127,3639,java,"class Solution {
    public boolean isZeroArray(int[] nums, int[][] queries) {
        int[] diff = new int[nums.length + 1];
        for (int[] q : queries) {
            diff[q[0]]++;
            diff[q[1] + 1]--;
        }
        
        for (int i = 1; i < diff.length; i++) {
            diff[i] += diff[i - 1];
        }
        
        for (int i = 0; i < nums.length; i++) {
            if (diff[i] < nums[i]) {
                return false;
            }
        }
        
        return true;
    }
}",1454813169
Feng W,wddd,127,3643,java,"class Solution {
    public int minZeroArray(int[] nums, int[][] queries) {
        int[] diff = new int[nums.length + 1];

        int left = 0;
        int right = queries.length + 1;

        while (left < right) {
            int mid = left + (right - left) / 2;
            if (!valid(nums, diff, queries, mid)) {
                left = mid + 1;
            } else {
                right = mid;
            }
        }

        return left <= queries.length ? left : -1;
    }

    private boolean valid(int[] nums, int[] diff, int[][] queries, int k) {
        Arrays.fill(diff, 0);

        for (int i = 0; i < k; i++) {
            diff[queries[i][0]] += queries[i][2];
            diff[queries[i][1] + 1] -= queries[i][2];
        }

        for (int i = 0; i < nums.length; i++) {
            diff[i] += i > 0 ? diff[i - 1] : 0;
            if (diff[i] < nums[i]) {
                return false;
            }
        }

        return true;
    }
}",1454822804
Prasath,smartyprasath,128,3616,python3,"from typing import List

class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        def simulate(start, direction):
            nums_copy = nums[:]
            curr = start
            dir_sign = 1 if direction == ""right"" else -1
            while 0 <= curr < len(nums_copy):
                if nums_copy[curr] == 0:
                    curr += dir_sign
                elif nums_copy[curr] > 0:
                    nums_copy[curr] -= 1
                    dir_sign *= -1 
                    curr += dir_sign
        
            return all(x == 0 for x in nums_copy)
        valid_positions = [i for i, x in enumerate(nums) if x == 0]
        count = 0
        for pos in valid_positions:
            if simulate(pos, ""left""):
                count += 1
            if simulate(pos, ""right""):
                count += 1
        
        return count
",1454814338
Prasath,smartyprasath,128,3639,python3,"from typing import List

class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        n = len(nums)
        decrements = [0] * (n + 1)  
        
        for li, ri in queries:
            decrements[li] += 1
            if ri + 1 < n:
                decrements[ri + 1] -= 1
        
        current_decrement = 0
        for i in range(n):
            current_decrement += decrements[i]
            if current_decrement < nums[i]:
                return False
        
        return True",1454820898
Prasath,smartyprasath,128,3643,python3,"from typing import List

class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        n = len(nums)
        
        def canAchieveZero(k: int) -> bool:
            decrements = [0] * (n + 1)
        
            for i in range(k):
                li, ri, vali = queries[i]
                decrements[li] += vali
                if ri + 1 < n:
                    decrements[ri + 1] -= vali
            
            current_decrement = 0
            for i in range(n):
                current_decrement += decrements[i]
                if nums[i] > current_decrement:
                    return False
            
            return True
        
        left, right = 0, len(queries)
        result = -1
        
        while left <= right:
            mid = (left + right) // 2
            if canAchieveZero(mid):
                result = mid  
                right = mid - 1
            else:
                left = mid + 1
        
        return result

solution = Solution()
print(solution.minZeroArray([2, 0, 2], [[0, 2, 1], [0, 2, 1], [1, 1, 3]]))
print(solution.minZeroArray([4, 3, 2, 1], [[1, 3, 2], [0, 2, 1]]))  ",1454822933
Anupam Shah,user9218i,129,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int res = 0;
        const int n = nums.size();
        for(int i = 0; i < nums.size(); i ++ ) {
            if(!nums[i]) {
                int sum = 0;
                for(int j = 0; j < i; j ++) {
                    sum += nums[j];
                }
                for(int j = i + 1; j < n; j ++) {
                    sum -= nums[j];
                }
                if(abs(sum) == 1)   res ++;
                else    if(abs(sum) == 0)   res += 2;
            }
        }
        return res;
    }
};",1454822934
Anupam Shah,user9218i,129,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        vector<int> mp(n+2, 0);
        for(auto it : queries) {
            mp[it[0]] ++, mp[it[1] + 1] --;
            
        }
        for(int i = 1; i <= n; i ++)    mp[i] += mp[i-1];
        for(int i = 0; i < nums.size(); i ++) {
            if(nums[i] > mp[i])     return 0;
        }
        return 1;
    }
};",1454808520
Anupam Shah,user9218i,129,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int low = 0, high = queries.size(), ans = -1;
        const int n = nums.size();
        while(low <= high) {
            int mid = (low + high) >> 1;
            int k = mid - 1;
            
            vector<long long> f(n+2, 0);
            for(int i = 0; i <= k; i ++)     
                f[queries[i][0]] += (long long) queries[i][2], f[queries[i][1] + 1] -= (long long) queries[i][2];
            
            bool no = 0;
            for(int i = 0; i < n; i ++ ) {
                if(i)   f[i] += f[i-1];
                if(f[i] < nums[i]) {
                    no = 1;
                    break;
                }
            }
            if(no == 0) {
                ans = mid;
                high = mid - 1;
            }
            else    low = mid + 1;
        }
        return ans;
    }
};",1454817041
Xuanxuan Wang,wxxlouisa,130,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
       
        auto simulate = [&](int start, int direction) {
            vector<int> temp_nums = nums;
            int n = temp_nums.size();
            int curr = start;
            
            while (curr >= 0 && curr < n) {
                if (temp_nums[curr] == 0) {
                    curr += direction; 
                } else {
                    temp_nums[curr] -= 1; 
                    direction = -direction; 
                    curr += direction; 
                }
            }
            
            return all_of(temp_nums.begin(), temp_nums.end(), [](int x) { return x == 0; });
        };
        
        int validCount = 0; 
        int n = nums.size();
        
        for (int i = 0; i < n; ++i) {
            if (nums[i] == 0) {
                if (simulate(i, 1)) {
                    ++validCount;
                }
                if (simulate(i, -1)) {
                    ++validCount;
                }
            }
        }
        
        return validCount;
    }
};",1454807344
Xuanxuan Wang,wxxlouisa,130,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        int m = queries.size();

        auto canMakeZero = [&](int k) -> bool {
            vector<int> diff(n + 1, 0);
            vector<int> current = nums;

            for (int i = 0; i < k; ++i) {
                int li = queries[i][0];
                int ri = queries[i][1];
                int vali = queries[i][2];
                diff[li] -= vali;
                if (ri + 1 < n) {
                    diff[ri + 1] += vali;
                }
            }

            int decrement = 0;
            for (int i = 0; i < n; ++i) {
                decrement += diff[i];
                current[i] = max(0, current[i] + decrement);
                if (current[i] > 0) {
                    return false; 
                }
            }
            return true; 
        };
        
        for (auto& each: queries) {
            each.emplace_back(1);
        }
        return canMakeZero(m);
    }
};",1454822953
Xuanxuan Wang,wxxlouisa,130,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        int m = queries.size();

        auto canMakeZero = [&](int k) -> bool {
            vector<int> diff(n + 1, 0);
            vector<int> current = nums;

            for (int i = 0; i < k; ++i) {
                int li = queries[i][0];
                int ri = queries[i][1];
                int vali = queries[i][2];
                diff[li] -= vali;
                if (ri + 1 < n) {
                    diff[ri + 1] += vali;
                }
            }

            int decrement = 0;
            for (int i = 0; i < n; ++i) {
                decrement += diff[i];
                current[i] = max(0, current[i] + decrement);
                if (current[i] > 0) {
                    return false; 
                }
            }
            return true; 
        };

        int left = 0, right = m, result = -1;
        while (left <= right) {
            int mid = left + (right - left) / 2;
            if (canMakeZero(mid)) {
                result = mid;
                right = mid - 1; 
            } else {
                left = mid + 1; 
            }
        }

        return result;
    }
};",1454821127
zsq007,zsq007,131,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        ttl = sum(nums)
        acc, res = 0, 0
        for num in nums:
            if num == 0:
                if ttl == 2*acc:
                    res += 2
                elif abs(acc*2 - ttl) == 1:
                    res += 1
            else:
                acc += num

        return res",1454807564
zsq007,zsq007,131,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        n = len(nums)
        axis = [0] * (n+1)

        for l,r in queries:
            axis[l] += 1
            axis[r+1] -= 1

        for i in range(n):
            axis[i+1] += axis[i]
            if nums[i] > axis[i]:
                return False

        return True
        ",1454811205
zsq007,zsq007,131,3643,python3,"class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        def check(length: int) -> bool:
            n = len(nums)
            axis = [0] * (n+1)
    
            for l,r,val in queries[:length+1]:
                axis[l] += val
                axis[r+1] -= val
    
            for i in range(n):
                axis[i+1] += axis[i]
                if nums[i] > axis[i]:
                    return False
    
            return True

        if not any(nums):
            return 0
        res = bisect_left(range(len(queries)), 1, key=check) + 1
        return res if res <= len(queries) else -1",1454816204
kzyKT,kzyKT,136,3616,cpp,"#define F first
#define S second
#define R cin>>
#define ll long long
#define ln cout<<'\n'
#define in(a) insert(a)
#define pb(a) push_back(a)
#define pd(a) printf(""%.10f\n"",a)
#define mem(a) memset(a,0,sizeof(a))
#define all(c) (c).begin(),(c).end()
#define iter(c) __typeof((c).begin())
#define rrep(i,n) for(ll i=(ll)(n)-1;i>=0;i--)
#define REP(i,m,n) for(ll i=(ll)(m);i<(ll)(n);i++)
#define rep(i,n) REP(i,0,n)
#define tr(it,c) for(iter(c) it=(c).begin();it!=(c).end();it++)
ll check(ll n,ll m,ll x,ll y){return x>=0&&x<n&&y>=0&&y<m;}void pr(){ln;}
template<class A,class...B>void pr(const A &a,const B&...b){cout<<a<<(sizeof...(b)?"" "":"""");pr(b...);}
template<class A>void PR(A a,ll n){rep(i,n){if(i)cout<<' ';cout<<a[i];}ln;}
const ll MAX=1e9+7,MAXL=1LL<<61,dx[8]={0,-1,0,1,-1,-1,1,1},dy[8]={-1,0,1,0,-1,1,1,-1};
typedef pair<ll,ll> P;

class Solution {
public:
  int countValidSelections(vector<int>& a) {
    ll n=a.size();
    ll d[n],c[n];
    mem(d),mem(c);
    rep(i,n) d[i]=c[i]=a[i];
    rep(i,n-1) d[i+1]+=d[i];
    rrep(i,n-1) c[i]+=c[i+1];
    int ans=0;
    rep(i,n) {
      if(a[i]==0) {
        if(d[i]==c[i]) ans+=2;
        else if(d[i]+1==c[i]) ans++;
        else if(d[i]==c[i]+1) ans++;
      }
    }
    return ans;
  }
};
",1454806732
kzyKT,kzyKT,136,3639,cpp,"#define F first
#define S second
#define R cin>>
#define ll long long
#define ln cout<<'\n'
#define in(a) insert(a)
#define pb(a) push_back(a)
#define pd(a) printf(""%.10f\n"",a)
#define mem(a) memset(a,0,sizeof(a))
#define all(c) (c).begin(),(c).end()
#define iter(c) __typeof((c).begin())
#define rrep(i,n) for(ll i=(ll)(n)-1;i>=0;i--)
#define REP(i,m,n) for(ll i=(ll)(m);i<(ll)(n);i++)
#define rep(i,n) REP(i,0,n)
#define tr(it,c) for(iter(c) it=(c).begin();it!=(c).end();it++)
ll check(ll n,ll m,ll x,ll y){return x>=0&&x<n&&y>=0&&y<m;}void pr(){ln;}
template<class A,class...B>void pr(const A &a,const B&...b){cout<<a<<(sizeof...(b)?"" "":"""");pr(b...);}
template<class A>void PR(A a,ll n){rep(i,n){if(i)cout<<' ';cout<<a[i];}ln;}
const ll MAX=1e9+7,MAXL=1LL<<61,dx[8]={0,-1,0,1,-1,-1,1,1},dy[8]={-1,0,1,0,-1,1,1,-1};
typedef pair<ll,ll> P;

class Solution {
public:
  bool isZeroArray(vector<int>& a, vector<vector<int>>& q) {
    ll n=a.size();
    ll d[n+1];
    mem(d);
    rep(i,q.size()) {
      d[q[i][0]]++;
      d[q[i][1]+1]--;
    }
    rep(i,n) d[i+1]+=d[i];
    rep(i,n) {
      if(a[i]>d[i]) return 0;
    }
    return 1;
  }
};
",1454808921
kzyKT,kzyKT,136,3643,cpp,"#define F first
#define S second
#define R cin>>
#define ll long long
#define ln cout<<'\n'
#define in(a) insert(a)
#define pb(a) push_back(a)
#define pd(a) printf(""%.10f\n"",a)
#define mem(a) memset(a,0,sizeof(a))
#define all(c) (c).begin(),(c).end()
#define iter(c) __typeof((c).begin())
#define rrep(i,n) for(ll i=(ll)(n)-1;i>=0;i--)
#define REP(i,m,n) for(ll i=(ll)(m);i<(ll)(n);i++)
#define rep(i,n) REP(i,0,n)
#define tr(it,c) for(iter(c) it=(c).begin();it!=(c).end();it++)
ll check(ll n,ll m,ll x,ll y){return x>=0&&x<n&&y>=0&&y<m;}void pr(){ln;}
template<class A,class...B>void pr(const A &a,const B&...b){cout<<a<<(sizeof...(b)?"" "":"""");pr(b...);}
template<class A>void PR(A a,ll n){rep(i,n){if(i)cout<<' ';cout<<a[i];}ln;}
const ll MAX=1e9+7,MAXL=1LL<<61,dx[8]={0,-1,0,1,-1,-1,1,1},dy[8]={-1,0,1,0,-1,1,1,-1};
typedef pair<ll,ll> P;

int N=1<<19;
class StarrySkyTree{
public:
  ll Ma[1555555],A[1555555];
  void init(){fill(Ma,Ma+N*2,0),fill(A,A+N*2,0);}
  void add(int a,int b,ll x,int k=0,int l=0,int r=N) {
    if(r<=a||b<=l) return;
    if(a<=l&&r<=b){
      A[k]+=x;
      while(k){
        k=(k-1)/2;
        Ma[k]=max(Ma[k*2+1]+A[k*2+1],Ma[k*2+2]+A[k*2+2]);
      }
      return;
    }
    add(a,b,x,k*2+1,l,(l+r)/2);
    add(a,b,x,k*2+2,(l+r)/2,r);
  }
  ll getMax(int a,int b,int k=0,int l=0,int r=N) {
    if(r<=a||b<=l)return -MAXL;if(a<=l&&r<=b)return Ma[k]+A[k];
    ll left=getMax(a,b,k*2+1,l,(l+r)/2),right=getMax(a,b,k*2+2,(l+r)/2,r);
    return max(left,right)+A[k];
  }
};

StarrySkyTree t;

class Solution {
public:
  int minZeroArray(vector<int>& a, vector<vector<int>>& q) {
    ll n=a.size();
    N=1;
    while(N<=n) N*=2;
    t.init();
    rep(i,n) t.add(i,i+1,a[i]);
    if(t.getMax(0,n)<=0) return 0;
    rep(i,q.size()) {
      t.add(q[i][0],q[i][1]+1,-q[i][2]);
      if(t.getMax(0,n)<=0) return i+1;
    }
    return -1;
  }
};",1454816606
Abhishek Srivastava,Abhi_Srivastava,138,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int n = nums.size(), res = 0;
        vector<int> prefixSum(n), suffixSum(n);
        prefixSum[0] = nums[0];
        for (int i = 1; i < n; i++)
            prefixSum[i] = prefixSum[i - 1] + nums[i];
        suffixSum[n - 1] = nums[n - 1];
        for (int i = n - 2; i >= 0; i--)
            suffixSum[i] = suffixSum[i + 1] + nums[i];
        for (int i = 0; i < n; i++)
            if (!nums[i]) {
                if (prefixSum[i] == suffixSum[i])
                    res += 2;
                else if (abs(prefixSum[i] - suffixSum[i]) == 1)
                    res++;
            }
        return res;
    }
};",1454823623
Abhishek Srivastava,Abhi_Srivastava,138,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        vector<int> decrs(n, 0);
        for (auto x : queries) {
            decrs[x[0]]++;
            if (x[1] + 1 < n)
                 decrs[x[1] + 1]--;
        }
        for (int i = 1; i < n; i++)
            decrs[i] += decrs[i - 1];
        for (int i = 0; i < n; i++)
            if (decrs[i] < nums[i])
                return 0;
        return 1;
    }
};",1454807718
Abhishek Srivastava,Abhi_Srivastava,138,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int l = 0, r = queries.size(), res = -1, n = nums.size();
        while (l <= r) {
            int mid = (l + r) / 2;
            vector<long long> decrs(n, 0);
            for (int i = 0; i < mid; i++) {
                decrs[queries[i][0]] += queries[i][2];
                if (queries[i][1] + 1 < n)
                    decrs[queries[i][1] + 1] -= queries[i][2];
            }
            for (int i = 1; i < n; i++)
                decrs[i] += decrs[i - 1];
            bool poss = 1;
            for (int i = 0; i < n; i++)
                if (decrs[i] < nums[i]) {
                    poss = 0;
                    break;
                }
            if (poss) {
                res = mid;
                r = mid - 1;
            }
            else
                l = mid + 1;
        }
        return res;
    }
};",1454813244
humbl_pi,humbl_pi,139,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        step = 1
        n = len(nums)
        
        def proc(curr, step):
            if nums[curr] != 0: return False
            arr = nums[:]
            i = curr
            while 0<=i<n:
                if arr[i]==0:
                    i += step
                elif arr[i]>0:
                    arr[i] -= 1
                    step *= -1
                    i += step
            return all((num==0 for num in arr))

        ans = 0
        for i in range(n):
            for step in [1,-1]:
                res = proc(i,step)
                # print(i, step, res)
                ans += res

        return ans",1454809910
humbl_pi,humbl_pi,139,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        n = len(nums)
        diff = [0]*n
        for q1, q2 in queries:
            diff[q1] += 1
            if q2 < n-1: diff[q2+1] -= 1

        cum = 0
        for i, num in enumerate(nums):
            cum += diff[i]
            # print(f""{diff[i]} --> {cum} vs. {num}"")
            if num > cum: return False
        return True",1454815967
humbl_pi,humbl_pi,139,3643,python3,"class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        n = len(nums)
        
        def chk(k):
            diff = [0]*n
            for q1, q2, val in queries[:k]:
                diff[q1] += val
                if q2 < n-1: diff[q2+1] -= val
    
            cum = 0
            for i, num in enumerate(nums):
                cum += diff[i]
                # print(f""{diff[i]} --> {cum} vs. {num}"")
                if num > cum: return False
            return True

        lo, hi = 0, len(queries)
        
        while lo <= hi:
            mid = lo + (hi-lo)//2
            
            if chk(mid):
                hi = mid-1
            else:
                lo = mid+1

        return lo if 0<=lo<=len(queries) else -1",1454823648
Shannon Lis,shannonl,140,3616,cpp,"class Solution {
public:
    bool check(vector<int> nums, int start, int dir) {
        int i = start;
        int n = nums.size();
        while ( i < n && i >= 0) {
            while (i>=0 && i <n && nums[i] == 0) i += dir;
            if (i >= n || i < 0) break;
            nums[i] -= 1;
            dir = -dir;
            i += dir;
        }
        return accumulate(nums.begin(), nums.end(), 0) == 0;
    }
    int countValidSelections(vector<int>& nums) {
        int ans = 0;
        int n = nums.size();
        for (int i=0; i<n; i++) {
            if (nums[i] == 0) {
                if (check(nums, i, 1)) ans++;
                if (check(nums, i, -1)) ans++;
            }
        }
        return ans;
        
    }
};",1454810257
Shannon Lis,shannonl,140,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        vector<int> diff(n+1, 0);
        for (auto& q: queries) {
            int l = q[0], r = q[1];
            diff[l] += 1;
            diff[r+1] -= 1;
        }
        int accu = 0;
        for (int i=0; i<n; i++) {
            accu += diff[i];
            if (accu < nums[i]) return false;
        }
        return true;
        
    }
};",1454816523
Shannon Lis,shannonl,140,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int l = 0, r = queries.size();
        while (l < r) {
            int m = l + (r-l) / 2;
            if (check(nums, queries, m)) {
                r = m;
            } else {
                l = m + 1;
            }
        }
        if (check(nums, queries, l)) return l;
        return -1;
    }
    bool check(vector<int>& nums, vector<vector<int>>& queries, int k) {
        int n = nums.size();
        vector<int> diff(n+1, 0);
        for (int i=0; i<k; i++) {
            auto& q = queries[i];
            int l = q[0], r = q[1], v=q[2];
            diff[l] += v;
            diff[r+1] -= v;
        }
        int accu = 0;
        for (int i=0; i<n; i++) {
            accu += diff[i];
            if (accu < nums[i]) return false;
        }
        return true;
        
    }
};",1454823778
Anshuman Kanungo,PeacefulGuy,141,3616,java,"class Solution {
    public int countValidSelections(int[] nums) {
        int n = nums.length;
        int validSelections = 0;

        // Iterate through all possible starting positions
        for (int i = 0; i < n; i++) {
            if (nums[i] == 0) {
                // Check both directions
                if (isValid(nums, i, -1)) {
                    validSelections++;
                }
                if (isValid(nums, i, 1)) {
                    validSelections++;
                }
            }
        }

        return validSelections;
    }

    // Helper method to simulate the process
    private boolean isValid(int[] nums, int curr, int direction) {
        int[] temp = nums.clone(); // Clone nums to avoid modifying the original array
        int dir = direction;

        while (curr >= 0 && curr < temp.length) {
            if (temp[curr] == 0) {
                curr += dir; // Move in the current direction
            } else {
                temp[curr]--; // Decrement the value
                dir = -dir;   // Reverse direction
                curr += dir;  // Move in the new direction
            }
        }

        // Check if all elements are zero
        for (int num : temp) {
            if (num != 0) {
                return false;
            }
        }
        return true;
    }
}
",1454810976
Anshuman Kanungo,PeacefulGuy,141,3639,java,"class Solution {
    public boolean isZeroArray(int[] nums, int[][] queries) {
        int n = nums.length;
        int[] decrementCount = new int[n + 1]; // One extra space for easier range update

        // Process each query to build the decrementCount array
        for (int[] query : queries) {
            int li = query[0];
            int ri = query[1];
            decrementCount[li] += 1; // Start decrementing from li
            if (ri + 1 < n) {
                decrementCount[ri + 1] -= 1; // Stop decrementing after ri
            }
        }

        // Build the actual decrement counts from the difference array
        for (int i = 1; i < n; i++) {
            decrementCount[i] += decrementCount[i - 1];
        }

        // Compare decrement counts with nums
        for (int i = 0; i < n; i++) {
            if (decrementCount[i] < nums[i]) {
                return false; // Not enough decrements to make nums[i] zero
            }
        }

        return true; // All elements can be made zero
    }
}",1454822701
Anshuman Kanungo,PeacefulGuy,141,3643,java,"class Solution {
    public int minZeroArray(int[] nums, int[][] queries) {
        int n = nums.length;
        int left = 0, right = queries.length;
        int result = -1;

        // Binary search on the number of queries
        while (left <= right) {
            int mid = left + (right - left) / 2;

            // Create a temporary array to simulate the decrements
            int[] temp = new int[n];
            int[] decrement = new int[n + 1]; // For difference array

            // Apply the first mid queries
            for (int i = 0; i < mid; i++) {
                int li = queries[i][0];
                int ri = queries[i][1];
                int vali = queries[i][2];
                decrement[li] += vali; // Start decrementing from li
                if (ri + 1 < n) {
                    decrement[ri + 1] -= vali; // Stop decrementing after ri
                }
            }

            // Build the actual decrement values
            int currentDecrement = 0;
            for (int i = 0; i < n; i++) {
                currentDecrement += decrement[i];
                temp[i] = nums[i] - currentDecrement; // Apply total decrement
            }

            // Check if temp can become a Zero Array
            boolean isZeroArray = true;
            for (int i = 0; i < n; i++) {
                if (temp[i] > 0) {
                    isZeroArray = false;
                    break;
                }
            }

            if (isZeroArray) {
                result = mid; // Found a valid k
                right = mid - 1; // Try for a smaller k
            } else {
                left = mid + 1; // Increase k
            }
        }

        return result;
    }
}",1454823825
gan14008,gan14008,142,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        def dfs(curr, direction):
            t = nums[:]
            while 0 <= curr < n:
                if not t[curr]:
                    curr += direction
                    continue
                
                t[curr] -= 1
                direction = -direction
                curr += direction
            
            return all(not x for x in t)
        
        n = len(nums)
        res = 0
        for i in range(n):
            if not nums[i]:
                res += int(dfs(i, -1))
                res += int(dfs(i, 1))

        return res
",1454813615
gan14008,gan14008,142,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        n, m = len(nums), len(queries)
        steps = [0] * (n + 1)
        for l, r in queries:
            steps[l] += 1
            steps[r + 1] -= 1
        
        q = 0
        for i in range(n):
            q += steps[i]
            if nums[i] > q:
                return False
        
        return True",1454817356
gan14008,gan14008,142,3643,python3,"class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        n, m = len(nums), len(queries)
        
        def possible(k):
            steps = [0] * (n + 1)
            for j in range(k):
                l, r, v = queries[j]
                steps[l] += v
                steps[r + 1] -= v
            
            q = 0
            for i in range(n):
                q += steps[i]
                if nums[i] > q:
                    return False
            
            return True
            
        
        l, r = 0, m + 1
        while l < r:
            mid = (l + r) // 2
            if possible(mid):
                r = mid
            else:
                l = mid + 1
        
        if l == m + 1:
            return -1
        return l",1454823872
Andrew Lo Zhi Sheng,wrewsama,143,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        def check(idx, dir):
            cpynums = nums.copy()
            while idx >= 0 and idx < len(nums):
                if cpynums[idx] == 0:
                    idx += dir
                elif cpynums[idx] > 0:
                    cpynums[idx] -= 1
                    dir *= -1
                    idx += dir

            return sum(cpynums) == 0

        res = 0
        for i in range(len(nums)):
            if nums[i] != 0:
                continue
            res += 1 if check(i, 1) else 0
            res += 1 if check(i, -1) else 0

        return res",1454809255
Andrew Lo Zhi Sheng,wrewsama,143,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        rangeArr = [0 for _ in nums]
        for s, e in queries:
            rangeArr[s] += 1
            if e+1 < len(nums):
                rangeArr[e+1] -= 1

        # print(rangeArr)
        cum = 0
        for i in range(len(nums)):
            cum += rangeArr[i]
            if nums[i] - cum > 0:
                return False

        return True",1454819520
Andrew Lo Zhi Sheng,wrewsama,143,3643,python3,"class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        def check(k):
            rangeArr = [0 for _ in nums]
            for s, e, v in queries[:k]:
                rangeArr[s] += v
                if e+1 < len(nums):
                    rangeArr[e+1] -= v
    
            cum = 0
            for i in range(len(nums)):
                cum += rangeArr[i]
                if nums[i] - cum > 0:
                    return False
    
            return True

        lo, hi = 0, len(queries)
        while lo < hi:
            mid = (lo + hi) // 2
            if check(mid):
                hi = mid
            else:
                lo = mid + 1

        return lo if check(lo) else -1",1454824003
the_none,the_none,145,3616,cpp,"#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

using namespace __gnu_pbds;
using namespace std;

template <typename T> using oset = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
template <typename T> using omset = tree<T, null_type, less_equal<T>, rb_tree_tag, tree_order_statistics_node_update>;

static const int _ = []() {ios::sync_with_stdio(false); cin.tie(nullptr); cout.tie(nullptr); return 0;}();

#define all(x) (x).begin(),(x).end()
#define uniqque(x) sort(all(x)); x.erase(unique(all(x)),x.end())
#define sz(x) (int)(x).size()
#define fi first
#define se second
#define mp make_pair
#define pb push_back

#define ffs(a) __builtin_ffs(a) // find first set
#define clz(a) __builtin_clz(a) // count leading zeroes
#define ctz(a) __builtin_ctz(a) // count trailing zeroes
#define popc(a) __builtin_popcount(a) // count set bits
#define popcll(a) __builtin_popcountll(a) //count set bits for long long int

typedef long long ll;
typedef long double ld;
typedef pair<int, int> ii;
typedef vector<ii> vii;
typedef vector<int> vi;
typedef vector<vi> vvi;
typedef vector<ll> vl;
typedef vector<vl> vvl;

const ll inf = 1e9;
const ld eps = 1e-9;
const ld pi = acos(-1);
const int mod = 1000000007; // 1000000007 998244353
const ll lnf = 1e18;
const int dx[] = { -1, 0, 1, 0}, dy[] = {0, 1, 0, -1};
// int drow[8] = { -1, -1, -1, 0, 0, 1, 1, 1};
// int dcol[8] = { -1, 0, 1, -1, 1, -1, 0, 1};


template <class T> using pqmin = priority_queue<T, vector<T>, greater<T>>;
template <class T> using pqmax = priority_queue<T>;

template<class T, class V> istream& operator>> (istream& is, std::pair<T, V>& p) {is >> p.first >> p.second; return is;}
template<class T, class V>  ostream& operator<< (ostream& is, std::pair<T, V>& p) {is << p.first << "" "" << p.second; is << endl; return is;}
template<class T> istream& operator>> (istream& is, std::vector<T>& p) {  for (auto &i : p) {is >> i;} return is;}
template<class T> ostream& operator<< (ostream& is, std::vector<T>& p) {  for (auto &i : p) {is << i << "" "";} is << endl; return is;}
template<class T> istream& operator>> (istream& is, std::vector<std::vector<T>>& p) {  for (auto &i : p) {is >> i;} return is;}
template<class T> ostream& operator<< (ostream& is, std::vector<std::vector<T>>& p) {  for (auto &i : p) {is << i << "" "";} is << endl; return is;}

template<class Fun> class y_combinator_result {Fun fun_; public: template<class T>explicit y_combinator_result(T &&fun): fun_(std::forward<T>(fun)) {} template<class ...Args>decltype(auto) operator()(Args &&...args) {return fun_(std::ref(*this), std::forward<Args>(args)...);}};
template<class Fun> decltype(auto) y_combinator(Fun &&fun) {return y_combinator_result<std::decay_t<Fun>>(std::forward<Fun>(fun));}

void my_erase(omset<int>& t, int v) {t.erase(t.find_by_order(t.order_of_key(v)));}
void my_erase(oset<ll>& t, int v) {t.erase(t.find_by_order(t.order_of_key(v)));}

struct cord_comp {
  cord_comp() : cnt(0) {}
  void add(ll x) { a.push_back(x); }
  void init() {sort(a.begin(), a.end()); a.erase(unique(a.begin(), a.end()), a.end()); cnt = (int)(a.size());}
  ll to(ll x) {int index = lower_bound(a.begin(), a.end(), x) - a.begin(); return index;}
  ll from(int x) { return a[x]; }
  int size() { return cnt; }
private:
  vector<ll> a; int cnt;
};

#ifdef ONLINE_JUDGE
#include ""debug.h""
#define dbg(...)  cerr << __LINE__ << "" :: "", debug::printer(#__VA_ARGS__, __VA_ARGS__)
#define dbgA(arr, n) cerr << __LINE__ << "" :: "", debug::printerArr(#arr, arr, n)
#else
#define dbg(x...)
#define dbgA(arr, n)
#endif

class Solution {
public:
  int countValidSelections(vector<int>& nums) {
    int n = sz(nums);
    int sa = 0;

    for (int i = 0; i < n; i++) {
      if(nums[i] != 0) continue;
      vi a = nums;

      int cr = i;
      int dr = 1;
      while (cr >= 0 && cr < n) {
        if (a[cr] == 0)  {
          cr += dr;
        } else {
          a[cr] -= 1;
          if (dr == 1) dr = -1;
          else dr = 1;
          cr += dr;
        }
      }

      if (count(all(a), 0) == n) {
        sa++;
      }

      a = nums;
      cr = i;
      dr = -1;
      while (cr >= 0 && cr < n) {
        if (a[cr] == 0)  {
          cr += dr;
        } else {
          a[cr] -= 1;
          if (dr == 1) dr = -1;
          else dr = 1;
          cr += dr;
        }
      }

      if (count(all(a), 0) == n) {
        sa++;
      }

    }
    return sa;
  }
};
void solve() {
}

#ifdef LOCAL
int32_t main() { solve(); }
#endif
",1454808608
the_none,the_none,145,3639,cpp,"#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

using namespace __gnu_pbds;
using namespace std;

template <typename T> using oset = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
template <typename T> using omset = tree<T, null_type, less_equal<T>, rb_tree_tag, tree_order_statistics_node_update>;

static const int _ = []() {ios::sync_with_stdio(false); cin.tie(nullptr); cout.tie(nullptr); return 0;}();

#define all(x) (x).begin(),(x).end()
#define uniqque(x) sort(all(x)); x.erase(unique(all(x)),x.end())
#define sz(x) (int)(x).size()
#define fi first
#define se second
#define mp make_pair
#define pb push_back

#define ffs(a) __builtin_ffs(a) // find first set
#define clz(a) __builtin_clz(a) // count leading zeroes
#define ctz(a) __builtin_ctz(a) // count trailing zeroes
#define popc(a) __builtin_popcount(a) // count set bits
#define popcll(a) __builtin_popcountll(a) //count set bits for long long int

typedef long long ll;
typedef long double ld;
typedef pair<int, int> ii;
typedef vector<ii> vii;
typedef vector<int> vi;
typedef vector<vi> vvi;
typedef vector<ll> vl;
typedef vector<vl> vvl;

const ll inf = 1e9;
const ld eps = 1e-9;
const ld pi = acos(-1);
const int mod = 1000000007; // 1000000007 998244353
const ll lnf = 1e18;
const int dx[] = { -1, 0, 1, 0}, dy[] = {0, 1, 0, -1};
// int drow[8] = { -1, -1, -1, 0, 0, 1, 1, 1};
// int dcol[8] = { -1, 0, 1, -1, 1, -1, 0, 1};


template <class T> using pqmin = priority_queue<T, vector<T>, greater<T>>;
template <class T> using pqmax = priority_queue<T>;

template<class T, class V> istream& operator>> (istream& is, std::pair<T, V>& p) {is >> p.first >> p.second; return is;}
template<class T, class V>  ostream& operator<< (ostream& is, std::pair<T, V>& p) {is << p.first << "" "" << p.second; is << endl; return is;}
template<class T> istream& operator>> (istream& is, std::vector<T>& p) {  for (auto &i : p) {is >> i;} return is;}
template<class T> ostream& operator<< (ostream& is, std::vector<T>& p) {  for (auto &i : p) {is << i << "" "";} is << endl; return is;}
template<class T> istream& operator>> (istream& is, std::vector<std::vector<T>>& p) {  for (auto &i : p) {is >> i;} return is;}
template<class T> ostream& operator<< (ostream& is, std::vector<std::vector<T>>& p) {  for (auto &i : p) {is << i << "" "";} is << endl; return is;}

template<class Fun> class y_combinator_result {Fun fun_; public: template<class T>explicit y_combinator_result(T &&fun): fun_(std::forward<T>(fun)) {} template<class ...Args>decltype(auto) operator()(Args &&...args) {return fun_(std::ref(*this), std::forward<Args>(args)...);}};
template<class Fun> decltype(auto) y_combinator(Fun &&fun) {return y_combinator_result<std::decay_t<Fun>>(std::forward<Fun>(fun));}

void my_erase(omset<int>& t, int v) {t.erase(t.find_by_order(t.order_of_key(v)));}
void my_erase(oset<ll>& t, int v) {t.erase(t.find_by_order(t.order_of_key(v)));}

struct cord_comp {
  cord_comp() : cnt(0) {}
  void add(ll x) { a.push_back(x); }
  void init() {sort(a.begin(), a.end()); a.erase(unique(a.begin(), a.end()), a.end()); cnt = (int)(a.size());}
  ll to(ll x) {int index = lower_bound(a.begin(), a.end(), x) - a.begin(); return index;}
  ll from(int x) { return a[x]; }
  int size() { return cnt; }
private:
  vector<ll> a; int cnt;
};

#ifdef ONLINE_JUDGE
#include ""debug.h""
#define dbg(...)  cerr << __LINE__ << "" :: "", debug::printer(#__VA_ARGS__, __VA_ARGS__)
#define dbgA(arr, n) cerr << __LINE__ << "" :: "", debug::printerArr(#arr, arr, n)
#else
#define dbg(x...)
#define dbgA(arr, n)
#endif

class Solution {
public:
  bool isZeroArray(vector<int>& nums, vector<vector<int>>& Q) {
    int n = sz(nums);
    vi dp(n + 1);

    for (auto q : Q) {
      dp[q[0]] += 1;
      dp[q[1] + 1] -= 1;
    }

    for (int i = 1; i < n; i++) dp[i] += dp[i - 1];

    for (int i = 0; i < n; i++) {
      nums[i] -= dp[i];
      if (nums[i] > 0) return false;
    }
    return true;
  }
};
void solve() {
}

#ifdef LOCAL
int32_t main() { solve(); }
#endif
",1454811692
the_none,the_none,145,3643,cpp,"#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

using namespace __gnu_pbds;
using namespace std;

template <typename T> using oset = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
template <typename T> using omset = tree<T, null_type, less_equal<T>, rb_tree_tag, tree_order_statistics_node_update>;

static const int _ = []() {ios::sync_with_stdio(false); cin.tie(nullptr); cout.tie(nullptr); return 0;}();

#define all(x) (x).begin(),(x).end()
#define uniqque(x) sort(all(x)); x.erase(unique(all(x)),x.end())
#define sz(x) (int)(x).size()
#define fi first
#define se second
#define mp make_pair
#define pb push_back

#define ffs(a) __builtin_ffs(a) // find first set
#define clz(a) __builtin_clz(a) // count leading zeroes
#define ctz(a) __builtin_ctz(a) // count trailing zeroes
#define popc(a) __builtin_popcount(a) // count set bits
#define popcll(a) __builtin_popcountll(a) //count set bits for long long int

typedef long long ll;
typedef long double ld;
typedef pair<int, int> ii;
typedef vector<ii> vii;
typedef vector<int> vi;
typedef vector<vi> vvi;
typedef vector<ll> vl;
typedef vector<vl> vvl;

const ll inf = 1e9;
const ld eps = 1e-9;
const ld pi = acos(-1);
const int mod = 1000000007; // 1000000007 998244353
const ll lnf = 1e18;
const int dx[] = { -1, 0, 1, 0}, dy[] = {0, 1, 0, -1};
// int drow[8] = { -1, -1, -1, 0, 0, 1, 1, 1};
// int dcol[8] = { -1, 0, 1, -1, 1, -1, 0, 1};


template <class T> using pqmin = priority_queue<T, vector<T>, greater<T>>;
template <class T> using pqmax = priority_queue<T>;

template<class T, class V> istream& operator>> (istream& is, std::pair<T, V>& p) {is >> p.first >> p.second; return is;}
template<class T, class V>  ostream& operator<< (ostream& is, std::pair<T, V>& p) {is << p.first << "" "" << p.second; is << endl; return is;}
template<class T> istream& operator>> (istream& is, std::vector<T>& p) {  for (auto &i : p) {is >> i;} return is;}
template<class T> ostream& operator<< (ostream& is, std::vector<T>& p) {  for (auto &i : p) {is << i << "" "";} is << endl; return is;}
template<class T> istream& operator>> (istream& is, std::vector<std::vector<T>>& p) {  for (auto &i : p) {is >> i;} return is;}
template<class T> ostream& operator<< (ostream& is, std::vector<std::vector<T>>& p) {  for (auto &i : p) {is << i << "" "";} is << endl; return is;}

template<class Fun> class y_combinator_result {Fun fun_; public: template<class T>explicit y_combinator_result(T &&fun): fun_(std::forward<T>(fun)) {} template<class ...Args>decltype(auto) operator()(Args &&...args) {return fun_(std::ref(*this), std::forward<Args>(args)...);}};
template<class Fun> decltype(auto) y_combinator(Fun &&fun) {return y_combinator_result<std::decay_t<Fun>>(std::forward<Fun>(fun));}

void my_erase(omset<int>& t, int v) {t.erase(t.find_by_order(t.order_of_key(v)));}
void my_erase(oset<ll>& t, int v) {t.erase(t.find_by_order(t.order_of_key(v)));}

struct cord_comp {
  cord_comp() : cnt(0) {}
  void add(ll x) { a.push_back(x); }
  void init() {sort(a.begin(), a.end()); a.erase(unique(a.begin(), a.end()), a.end()); cnt = (int)(a.size());}
  ll to(ll x) {int index = lower_bound(a.begin(), a.end(), x) - a.begin(); return index;}
  ll from(int x) { return a[x]; }
  int size() { return cnt; }
private:
  vector<ll> a; int cnt;
};

#ifdef ONLINE_JUDGE
#include ""debug.h""
#define dbg(...)  cerr << __LINE__ << "" :: "", debug::printer(#__VA_ARGS__, __VA_ARGS__)
#define dbgA(arr, n) cerr << __LINE__ << "" :: "", debug::printerArr(#arr, arr, n)
#else
#define dbg(x...)
#define dbgA(arr, n)
#endif

template<typename T, typename U>
struct LAZY {
  vector<T> ST;
  vector<bool> LT;
  vector<U> UT;
  vector<int> arr;
  int n, s;
  LAZY(vector<int> &a) {
    arr = a, n = a.size(), s = 1;
    while (s < 2 * n) {
      s = s << 1;
    }
    ST.resize(s); fill(ST.begin(), ST.end(), T());
    LT.resize(s); fill(LT.begin(), LT.end(), false);
    UT.resize(s); fill(UT.begin(), UT.end(), U());
    build(0, n - 1, 1);
  }
  void build(int s, int e, int i) {
    if (s == e)   {
      ST[i] = T(arr[s]);
      return;
    }
    int m = (s + e) / 2;
    build(s, m, 2 * i);
    build(m + 1, e, 2 * i + 1);
    ST[i].merge(ST[2 * i], ST[2 * i + 1]);
  }
  void pushdown(int i, int s, int e) {
    if (LT[i]) {
      int m = (s + e) / 2;
      apply(2 * i, s, m, UT[i]);
      apply(2 * i + 1, m + 1, e, UT[i]);
      UT[i] = U(), LT[i] = 0;
    }
  }
  void apply(int i, int s, int e, U& u) {
    if (s != e) {
      LT[i] = 1, UT[i].comb(u, s, e);
    }
    u.apply(ST[i], s, e);
  }
  void update(int s, int e, int i, int l, int r, U& u) {
    if (s > r || e < l) return;
    if (s >= l && e <= r) {
      apply(i, s, e, u);
      return;
    }
    pushdown(i, s, e);
    int m = (s + e) / 2;
    update(s, m, 2 * i, l, r, u);
    update(m + 1, e, 2 * i + 1, l, r, u);
    ST[i].merge(ST[2 * i], ST[2 * i + 1]);
  }
  T query(int s, int e, int i, int l, int r) {
    if (s > r || e < l) return T();
    if (s >= l && e <= r) {
      pushdown(i, s, e);
      return ST[i];
    }
    pushdown(i, s, e);
    int m = (s + e) / 2;
    T ln, rn, ans;
    ln = query(s, m, 2 * i, l, r);
    rn = query(m + 1, e, 2 * i + 1, l, r);
    ans.merge(ln, rn);
    return ans;
  }
  void change(int l, int r, int val) {
    U x = U(val);
    update(0, n - 1, 1, l, r, x);
  }
  T get(int l, int r) {
    return query(0, n - 1, 1, l, r);
  }
};

struct T {
  int val;
  T() {
    val = 0;
  }
  T(int p1) {
    val = p1;
  }
  void merge(T &l, T &r) {
    val = max(l.val , r.val);
  }
};

struct U {
  int val;
  U() {
    val = 0;
  }
  U(int val1) {
    val = val1;
  }
  void apply(T &a, int s, int e) {
    a.val += val;
  }
  void comb(U& x, int s, int e) {
    val += x.val;
  }
};

// LAZY<T, U>sg = LAZY<T, U>(n, a);

class Solution {
public:
  int minZeroArray(vector<int>& nums, vector<vector<int>>& Q) {
    LAZY<T, U> sg = LAZY<T, U>(nums);
    int n = sz(nums);
    if (sg.get(0, n - 1).val <= 0) {
        return 0;
    }

    for (int i = 0; i < sz(Q); i++) {
      sg.change(Q[i][0], Q[i][1], -Q[i][2]);
      if (sg.get(0, n - 1).val <= 0) {
        return i + 1;
      }
    }
    return -1;
  }
};

void solve() {
}

#ifdef LOCAL
int32_t main() { solve(); }
#endif
",1454817191
hkhzzz,hkhzzz,149,3616,cpp,"class Solution {
public:
    bool isvalid(vector<int> nums, int cur, int moveright, int n) {
        if (nums[cur] != 0) return false;
        while(cur >= 0 && cur <= n - 1) {
            if (nums[cur] > 0) {
                nums[cur] --;
                moveright = - moveright;
            }
            cur = cur + moveright;
        }
        for (int i = 0; i < nums.size(); i ++) {
            if (nums[i] > 0) return false;
        }
        return true;
    }
    int countValidSelections(vector<int>& nums) {
        int n = nums.size();
        int ret = 0;
        for (int i = 0; i < n; i ++) {
            if (isvalid(nums, i, 1, n)) ret++;
            if (isvalid(nums, i, -1, n)) ret ++;
        }
        return ret;
    }
};",1454809004
hkhzzz,hkhzzz,149,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        vector<int> A(n + 1, 0);
        for (int i = 0; i < queries.size(); i ++) {
            A[queries[i][0]] += 1;
            A[queries[i][1] + 1] -= 1;
        }
        for (int i = 1; i <= n; i ++) {
            A[i] += A[i-1];
        }
        for (int i = 0; i < n; i ++) {
            if (nums[i] > A[i]) return false;
        }
        return true;
    }
};",1454813200
hkhzzz,hkhzzz,149,3643,cpp,"class Solution {
public:
    bool check(vector<int>& nums, vector<vector<int>>& queries, int k, vector<int>& A) {
        int n = nums.size();
        for (int i = 0; i <= n; i ++) {
            A[i] = 0;
        }
        for (int i = 0; i < k; i ++) {
            A[queries[i][0]] += queries[i][2];
            A[queries[i][1] + 1] -= queries[i][2];
        }
        for (int i = 1; i <= n; i ++) {
            A[i] += A[i-1];
            // cout << A[i] << "","";
        }
        // cout << endl;
        // cout << n << endl;
        for (int i = 0; i < n; i ++) {
            // cout << nums[i] << ""vs"" << A[i] << endl;
            if (nums[i] > A[i]) return false;
        }
        // cout << k << ""okay"" << endl;
        return true;
    }
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        vector<int> A(n+1, 0);
        int lK = 0;
        int rK = queries.size();
        if (check(nums, queries, rK, A) == false) return -1;
        while(lK < rK) {
            int midK = lK + (rK - lK) / 2;
            if (check(nums, queries, midK, A)) { // okay -> less K
                rK = midK;
            } else {
                lK = midK + 1;
            }
        }
        return lK;
    }
};",1454824405
tzhuan,tzhuan,150,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        const int N = nums.size();
        auto sum = accumulate(nums.begin(), nums.end(), 0);
        int ans = 0;
        for (int i = 0, ps = 0; i < N; ++i) {
            ps += nums[i];
            if (nums[i] == 0) {
                if (ps + ps == sum) ans += 2;
                if (ps + ps == sum - 1 or ps + ps == sum + 1) ans += 1;
            }
        }
        return ans;
    }
};",1454808174
tzhuan,tzhuan,150,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        const int N = nums.size();
        vector<int> count(N + 2, 0);
        for (const auto& q: queries) {
            ++count[q[0]];
            --count[q[1] + 1];
        }
        for (int i = 1; i < count.size(); ++i) count[i] += count[i - 1];
        for (int i = 0; i < N; ++i) if (count[i] < nums[i]) return false;
        return true;
    }
};",1454814386
tzhuan,tzhuan,150,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        const int N = nums.size(), Q = queries.size();
        auto is_ok = [&](int k) -> bool {
            vector<int> count(N + 2, 0);
            for (int i = 0; i < k; ++i) {
                const auto& q = queries[i];
                count[q[0]] += q[2];
                count[q[1] + 1] -= q[2];
            }
            for (int i = 1; i < N; ++i) count[i] += count[i - 1];
            for (int i = 0; i < N; ++i) if (count[i] < nums[i]) return false;
            return true;
        };
        int low = 0, high = Q + 1;
        while (low < high) {
            auto k = low + (high - low) / 2;
            // cout << low << "" "" << high << "": "" << k << "" => "" << is_ok(k) << endl;
            if (is_ok(k)) high = k;
            else low = k + 1;
        }
        return low > Q ? -1 : low;
    }
};",1454824517
Prashant Mishra,iamphoenix,152,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int n = nums.size();
        vector<int> zero_positions;
        for (int i = 0; i < n; ++i) {
            if (nums[i] == 0) {
                zero_positions.push_back(i);
            }
        }
        
        int ans = 0;
        for (int start_pos : zero_positions) {
            for (int dir : {-1, 1}) {
                vector<int> nums_copy = nums;
                int curr = start_pos;
                int current_dir = dir;
                while (curr >= 0 && curr < n) {
                    if (nums_copy[curr] == 0) {
                        curr += current_dir;
                    } else if (nums_copy[curr] > 0) {
                        nums_copy[curr] -= 1;
                        current_dir *= -1;
                        curr += current_dir;
                    }
                }
                bool all_zero = true;
                for (int num : nums_copy) {
                    if (num != 0) {
                        all_zero = false;
                        break;
                    }
                }
                if (all_zero) {
                    ans++;
                }
            }
        }
        return ans;
    }
};
",1454805792
Prashant Mishra,iamphoenix,152,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        vector<int> coverage(n + 1, 0);
        
        // Step 1: Process queries to compute coverage counts
        for (const auto& query : queries) {
            int l = query[0];
            int r = query[1];
            coverage[l] += 1;
            if (r + 1 < n) {
                coverage[r + 1] -= 1;
            }
        }
        
        // Step 2: Compute prefix sums to get coverage per index
        for (int i = 1; i < n; ++i) {
            coverage[i] += coverage[i - 1];
        }
        
        // Step 3: Check if each nums[i] can be reduced to zero
        for (int i = 0; i < n; ++i) {
            if (nums[i] > coverage[i]) {
                return false;
            }
        }
        
        return true;
    }
};
",1454806568
Prashant Mishra,iamphoenix,152,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        int m = queries.size();
        int left = 0, right = m;
        int answer = -1;

        while (left <= right) {
            int mid = left + (right - left) / 2;

            vector<long long> capacity(n, 0);

            // Process first 'mid' queries in sequence
            for (int i = 0; i < mid; ++i) {
                int l = queries[i][0];
                int r = queries[i][1];
                int val = queries[i][2];

                capacity[l] += val;
                if (r + 1 < n) {
                    capacity[r + 1] -= val;
                }
            }

            // Compute prefix sums to get cumulative capacity
            for (int i = 1; i < n; ++i) {
                capacity[i] += capacity[i - 1];
            }

            // Check if capacity at each index is sufficient
            bool possible = true;
            for (int i = 0; i < n; ++i) {
                if (capacity[i] < nums[i]) {
                    possible = false;
                    break;
                }
            }

            if (possible) {
                answer = mid;
                right = mid - 1; // Try to find a smaller k
            } else {
                left = mid + 1; // Need more queries
            }
        }

        return answer;
    }
};
",1454811178
Jashanpreet Singh,jashanp2005,155,3616,cpp,"class Solution {
int check(int idx, vector<int> &nums){
    int n = nums.size();
    int sum = 0;
    for(int i=0; i<idx; i++) sum+=nums[i];
    for(int i=idx+1; i<n; i++) sum -= nums[i];
    // cout<<sum<<endl;
    if(sum == 0) return 2;
    if(abs(sum ) == 1) return 1;
    return 0;
}
public:
    int countValidSelections(vector<int>& nums) {
        int cnt = 0;
        for(int i=0; i<nums.size(); i++){
            if(nums[i] == 0) cnt += check(i, nums);
        }
        return cnt;
    }
};",1454809680
Jashanpreet Singh,jashanp2005,155,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        vector<int> pre(n, 0);
        for(auto &it: queries){
            pre[it[0]]++;
            if(it[1] + 1 < n) pre[it[1]+1]--;
        }

        for(int i=0; i<n; i++){
            if(i) pre[i] += pre[i-1];
        }

        for(int i=0; i<nums.size(); i++){
            if(pre[i] < nums[i]) return false;
        }
        return true;
    }
};",1454813392
Jashanpreet Singh,jashanp2005,155,3643,cpp,"class Solution {
bool check(vector<int> &nums, vector<vector<int>> &queries, int k){
    int n = nums.size();
        vector<int> pre(n, 0);
    int cnt = 0;
        for(auto &it: queries){
            if(cnt == k) break;
            pre[it[0]] += it[2];
            if(it[1] + 1 < n) pre[it[1]+1] -= it[2];
            cnt++;
        }

        for(int i=0; i<n; i++){
            if(i) pre[i] += pre[i-1];
        }

        for(int i=0; i<nums.size(); i++){
            if(pre[i] < nums[i]) return false;
        }
        return true;
}
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int low = 0, high = queries.size();
        int ans = -1;
        while(low <= high){
            int mid = (low + high)/2ll;
            if(check(nums, queries, mid)){
                ans = mid;
                high = mid-1;
            }
            else low =  mid+1;
        }
        return ans;
    }
};",1454818092
tanishq1807,tanishq1807,156,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        auto isValid = [&](int start, int direction) {
            int n = nums.size();
            vector<int> numsCopy = nums;
            int curr = start, dirMult = direction;
            
            while (curr >= 0 && curr < n) {
                if (numsCopy[curr] == 0) {
                    curr += dirMult;
                } else {
                    numsCopy[curr]--;
                    dirMult = -dirMult;
                    curr += dirMult;
                }
            }
            
            for (int x : numsCopy) {
                if (x != 0) return false;
            }
            return true;
        };
        
        int validCount = 0;
        for (int i = 0; i < nums.size(); i++) {
            if (nums[i] == 0) {
                if (isValid(i, 1)) validCount++;
                if (isValid(i, -1)) validCount++;
            }
        }
        
        return validCount;
    }
};",1454806207
tanishq1807,tanishq1807,156,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        vector<int> diff(n + 1, 0);

        for (const auto& query : queries) {
            int l = query[0], r = query[1];
            diff[l]++;
            if (r + 1 < n) diff[r + 1]--;
        }

        int coverage = 0;
        for (int i = 0; i < n; ++i) {
            coverage += diff[i];
            if (coverage < nums[i]) return false;
        }

        return true;
    }
};",1454815246
tanishq1807,tanishq1807,156,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        int q = queries.size();

        auto canTransform = [&](int k) {
            vector<int> diff(n + 1, 0);

            for (int i = 0; i < k; ++i) {
                int l = queries[i][0], r = queries[i][1], val = queries[i][2];
                diff[l] += val;
                if (r + 1 < n) diff[r + 1] -= val;
            }

            vector<int> decrements(n, 0);
            int curr = 0;
            for (int i = 0; i < n; ++i) {
                curr += diff[i];
                decrements[i] = curr; 
                if (decrements[i] < nums[i]) return false; 
            }

            return true;
        };

        int left = 0, right = q, result = -1;

        while (left <= right) {
            int mid = left + (right - left) / 2;
            if (canTransform(mid)) {
                result = mid;
                right = mid - 1;
            } else {
                left = mid + 1;
            }
        }

        return result;
    }
};",1454818127
chengxia you,cy171,157,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        n = len(nums)
        total = sum(nums)
        acc = [0]*(n+1)
        for i , num in enumerate(nums):
            acc[i] = acc[i-1] + num
        ans = 0
        for i in range(n):
            if nums[i] == 0:
                a = acc[i-1]
                b = total - acc[i-1]
                if a == b:
                    ans += 2
                elif abs(a-b) == 1:
                    ans += 1
        return ans",1454809024
chengxia you,cy171,157,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        n = len(nums)
        acc = [0]*(n+2)
        for a, b in queries:
            acc[a] -= 1
            acc[b+1] += 1
        for i in range(n):
            acc[i] += acc[i-1]
        return all(acc[i] + nums[i] <= 0 for i in range(n))
",1454816485
chengxia you,cy171,157,3643,python3,"class SegmentTree:
    def __init__(self, n, nums):
        self.n = n
        self.data = [0] * (4 * n)
        self.lazy = [0] * (4 * n)
        self.build(1, 0, n - 1, nums)  #初始化 需要修改

    def build(self, node, start, end, values):
        if start == end:
            self.data[node] = values[start]
        else:
            mid = (start + end) // 2
            self.build(2 * node, start, mid, values)
            self.build(2 * node + 1, mid + 1, end, values)
            self.data[node] = max(self.data[2 * node], self.data[2 * node + 1])

    def update_range(self, l, r, val, node=1, start=0, end=None):
        if end is None:
            end = self.n - 1

        if self.lazy[node] != 0:
            self.data[node] += self.lazy[node]
            if start != end:
                self.lazy[2 * node] += self.lazy[node]
                self.lazy[2 * node + 1] += self.lazy[node]
            self.lazy[node] = 0

        if start > r or end < l:
            return

        if start >= l and end <= r:
            self.data[node] += val
            if start != end:
                self.lazy[2 * node] += val
                self.lazy[2 * node + 1] += val
            return

        mid = (start + end) // 2
        self.update_range(l, r, val, 2 * node, start, mid)
        self.update_range(l, r, val, 2 * node + 1, mid + 1, end)
        self.data[node] = max(self.data[2 * node], self.data[2 * node + 1])

    def query_range(self, l, r, node=1, start=0, end=None):
        if end is None:
            end = self.n - 1

        if self.lazy[node] != 0:
            self.data[node] += self.lazy[node]
            if start != end:
                self.lazy[2 * node] += self.lazy[node]
                self.lazy[2 * node + 1] += self.lazy[node]
            self.lazy[node] = 0

        if start > r or end < l:
            return -float('inf')

        if start >= l and end <= r:
            return self.data[node]

        mid = (start + end) // 2
        left_query = self.query_range(l, r, 2 * node, start, mid)
        right_query = self.query_range(l, r, 2 * node + 1, mid + 1, end)
        return max(left_query, right_query)

class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        n = len(nums)
        tree = SegmentTree(n, nums)
        if tree.data[1] <= 0:
            return 0
        for i, (a, b, val) in enumerate(queries):
            tree.update_range(a,b, -val)
            if tree.data[1] <= 0:
                return i + 1
        return -1
        ",1454825133
cro_poder,cro_poder,158,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int n = nums.size();
        int ans = 0;
         
        vector<int> hash;
        for (int i = 0; i < n; ++i) {
            if (nums[i] == 0) {
                hash.push_back(i);
            }
        }
 
        auto f = [&](int i, int d) {
            vector<int> temp = nums;
            int curr = i;

            while (curr >= 0 && curr < n) {
                if (temp[curr] == 0) {
                    curr += d;  
                } else {
                    temp[curr]--;         
                    d = -d;  
                    curr += d;   
                }
            }
 
            return all_of(temp.begin(), temp.end(), [](int x) { return x == 0; });
        };
 
        for (int zeroPos : hash) {
            if (f(zeroPos, -1)) {
                
                ans++;
            }
            if (f(zeroPos, 1)) {
                
                ans++;
            }
        }

        return ans;
    }
};
",1454809439
cro_poder,cro_poder,158,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        vector<int> temp = nums;
        int n = nums.size();
        vector<int> diff(n + 1, 0); 
            fill(diff.begin(), diff.end(), 0);
             int k = queries.size();
            for (int i = 0; i < k; ++i) {
                int l = queries[i][0], r = queries[i][1], val = 1;
                diff[l] -= val;
                if (r + 1 < n) diff[r + 1] += val;
            }
             
            int currEffect = 0;
            for (int i = 0; i < n; ++i) {
                currEffect += diff[i];
                temp[i] += currEffect;  
                 
                if (temp[i] > 0) return false;
            }
             
            return true;
    }
};",1454818222
cro_poder,cro_poder,158,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size(), m = queries.size();
        
        vector<int> diff(n + 1, 0); 
         
        auto canZero = [&](int k) -> bool {
            vector<int> temp = nums;
            fill(diff.begin(), diff.end(), 0);
             
            for (int i = 0; i < k; ++i) {
                int l = queries[i][0], r = queries[i][1], val = queries[i][2];
                diff[l] -= val;
                if (r + 1 < n) diff[r + 1] += val;
            }
             
            int currEffect = 0;
            for (int i = 0; i < n; ++i) {
                currEffect += diff[i];
                temp[i] += currEffect;  
                 
                if (temp[i] > 0) return false;
            }
             
            return true;
        };
         
        int left = 0, right = m, result = -1;
        while (left <= right) {
            int mid = left + (right - left) / 2;
            if (canZero(mid)) {
                result = mid;  
                right = mid - 1;
            } else {
                left = mid + 1;
            }
        }
        
        return result;
    }
};
",1454815988
Ankur Kumar,Ankur_8789,159,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int cnt=0,n=nums.size();
        vector<int> pref(n),suff(n);
        pref[0]=nums[0],suff[n-1]=nums[n-1];
        for(int i=1;i<n;i++)
            pref[i]=pref[i-1]+nums[i];
        for(int i=n-2;i>=0;i--)
            suff[i]=suff[i+1]+nums[i];
        for(int i=0;i<n;i++){
            if(nums[i])
                continue;
            int le=0,ri=0;
            if(i-1>=0)
                le=pref[i-1];
            if(i+1<n)
                ri=suff[i+1];
            if(abs(le-ri)==0)
                cnt+=2;
            else if(abs(le-ri)==1)
                cnt+=1;
        }
        return cnt;
    }
};",1454817136
Ankur Kumar,Ankur_8789,159,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n=nums.size();
        vector<int> pref(n+1);
        for(auto x: queries){
            pref[x[0]]--;
            pref[x[1]+1]++;
        }
        for(int i=1;i<=n;i++){
            pref[i]+=pref[i-1];
        }
        bool ok=true;
        for(int i=0;i<n;i++){
            nums[i]=max(0,nums[i]+pref[i]);
            // cout<<nums[i]<<"" "";
            if(nums[i]>0)
                ok=false;
        }
        return ok;
    }
};",1454809155
Ankur Kumar,Ankur_8789,159,3643,cpp,"class Solution {
public:
    bool check(int val,vector<int>& nums,vector<vector<int>>& q){
        int n=nums.size();
        vector<int> pref(n+1);
        for(int i=0;i<val;i++){
            int u=q[i][0],v=q[i][1];
            pref[u]-=q[i][2];
            pref[v+1]+=q[i][2];
        }
        for(int i=1;i<n;i++)
            pref[i]+=pref[i-1];
        vector<int> tem(n);
        for(int i=0;i<n;i++){
            tem[i]=max(0,nums[i]+pref[i]);
            if(tem[i])
                return 0;
        }
        return 1;
    }
    int minZeroArray(vector<int>& nums, vector<vector<int>>& q) {
        int l=0,r=q.size(),ans=-1;
        while(l<=r){
            int mid=(l+r)/2;
            if(check(mid,nums,q)){
                ans=mid;
                r=mid-1;
            }
            else{
                l=mid+1;
            }
        }
        return ans;
    }
};",1454825180
Ivan Li,liivan256,161,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        t = 0
        for i in range(len(nums)):
            if nums[i] != 0:
                continue
            l = sum(nums[:i])
            r = sum(nums[i:])
    
            if l == r:
                t += 2
            elif l + 1 == r or l == r + 1:
                t += 1
        return t
",1454807520
Ivan Li,liivan256,161,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        n = len(nums)
        diff = [0] * (n + 1)
        for l,r in queries:
            diff[l] += 1
            diff[r + 1] -= 1
        dec = list(accumulate(diff))
        return all(dec[i] >= nums[i] for i in range(n))",1454810667
Ivan Li,liivan256,161,3643,python3,"class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        n = len(nums)
        q = len(queries)
    
        def works(queries: list[list[int]]) -> bool:
            diff = [0] * (n + 1)
            for l, r, val in queries:
                diff[l] += val
                diff[r + 1] -= val
            dec = list(accumulate(diff))
            return all(dec[i] >= nums[i] for i in range(n))
    
        low = 0
        high = q
        ans = -1
        while low <= high:
            mid = (low + high) // 2
            if works(queries[:mid]):
                high = mid - 1
                ans = mid
            else:
                low = mid + 1
        return ans",1454818309
funsquared,funsquared,162,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        res = 0
        for i in range(len(nums)):
            if nums[i] == 0:
                if sum(nums[:i]) - sum(nums[i:]) in (0, 1):
                    res += 1
                if sum(nums[i:]) - sum(nums[:i]) in (0, 1):
                    res += 1
        return res",1454825323
funsquared,funsquared,162,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        n = len(nums)
        delta = [0] * (n + 1)
        for l, r in queries:
            delta[l] += 1
            delta[r + 1] -= 1
        cur = 0
        for i in range(n):
            cur += delta[i]
            if cur < nums[i]:
                return False
        return True",1454825141
funsquared,funsquared,162,3643,python3,"class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        def good(k):
            n = len(nums)
            delta = [0] * (n + 1)
            for l, r, v in queries[:k]:
                delta[l] += v
                delta[r + 1] -= v
            cur = 0
            for i in range(n):
                cur += delta[i]
                if cur < nums[i]:
                    return False
            return True
        
        low, high = -1, len(queries) + 1
        while high - low > 1:
            mid = (low + high) // 2
            if good(mid):
                high = mid
            else:
                low = mid
        return -1 if high > len(queries) else high
",1454825018
hanbro0112,hanbro0112,163,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        suffix = sum(nums)
        ans = prefix = 0
        for x in nums:
            prefix += x
            suffix -= x
            if x == 0:
                if prefix == suffix:
                    ans += 2
                elif abs(prefix - suffix) == 1:
                    ans += 1
        return ans",1454807232
hanbro0112,hanbro0112,163,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        prefix = [0] * (len(nums) + 1)
        for l, r in queries:
            prefix[l] += 1
            prefix[r + 1] -= 1
        subset = 0
        for i, x in enumerate(nums):
            subset += prefix[i]
            if x > subset:
                return False
        return True",1454810461
hanbro0112,hanbro0112,163,3643,python3,"class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        subset = k = 0
        prefix = [0] * (len(nums) + 1)
        for i, x in enumerate(nums):
            subset += prefix[i]
            while k < len(queries) and x > subset:
                l, r, val = queries[k]
                prefix[l] += val
                prefix[r + 1] -= val
                if l <= i <= r:
                    subset += val
                k += 1
            if x > subset:
                return -1
        return k",1454818544
TheodoreGossett,TheodoreGossett,165,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int tsum = 0;
        for(auto i: nums)tsum+=i;
        int sum = 0;
        int res = 0;
        for(auto i: nums){
            sum+=i;
            tsum-=i;
            if(i==0 && sum==tsum) res+=2;
            if(i==0 && abs(sum-tsum)==1) res+=1;
        }
        return res;
    }
};",1454807083
TheodoreGossett,TheodoreGossett,165,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        vector<int> dif(nums.size()+1);
        int n = nums.size();
        for(auto q:queries){
            dif[q[0]]--;
            dif[q[1]+1]++;
        }
        int d = 0;
        for(int i=0;i<n;i++){
            d+=dif[i];
            if(nums[i]+d>0) return false;
        }
        return true;
    }
};",1454810217
TheodoreGossett,TheodoreGossett,165,3643,cpp,"class Solution {
public:
    bool f(vector<int>& nums, vector<vector<int>>& queries, int k) {
        vector<int> dif(nums.size()+1);
        int n = nums.size();
        int cnt=0;
        for(auto q:queries){
            if(cnt==k) break;
            cnt++;
            dif[q[0]]-= q[2];
            dif[q[1]+1]+= q[2];
            
        }
        int d = 0;
        for(int i=0;i<n;i++){
            d+=dif[i];
            if(nums[i]+d>0) return false;
        }
        return true;
    }
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int l=0;int r=queries.size();
        int res = 1000000;
        while(l<=r){
            int mid = (r-l)/2+l;
            if(f(nums,queries, mid)){
                res = mid;
                r=mid-1;
            }else l=mid+1;
        }
        return res==1000000?-1:res;
    }
};",1454818779
leetgoat_dot_dev,leetgoat_dot_dev,166,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        def simulate(pos, direction):
            dupe = nums[:]
            currPos = pos
            currD = direction
            while True:
                # print(f'curr pos: {currPos}, currD: {currD}, dupe: {dupe}')
                if currPos < 0 or currPos >= len(dupe):
                    # print(f'out of bounds, dupe now: {dupe}')
                    return all(n == 0 for n in dupe)
                if dupe[currPos] == 0:
                    if currD == 1:
                        currPos += 1
                    else:
                        currPos -= 1
                elif dupe[currPos] > 0:
                    dupe[currPos] -= 1
                    if currD == 1:
                        currD = 0
                    else:
                        currD = 1
                    if currD == 1:
                        currPos += 1
                    else:
                        currPos -= 1
        
        # simulate(2, 0)
        # return
        res = 0
        for pos in range(len(nums)):
            if nums[pos] != 0:
                continue
            # print(f'pos={pos}')
            if simulate(pos, 1):
                res += 1
            if simulate(pos, 0):
                res += 1
            # print(f'res now: {res} for pos={pos}')
        return res
                    
                        
            ",1454818221
leetgoat_dot_dev,leetgoat_dot_dev,166,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        decs = [0] * (len(nums) + 1) # sweepline decs
        
        for l, r in queries:
            decs[l] += 1
            decs[r + 1] -= 1
        
        finalDecs = []
        
        curr = 0
        for d in decs:
            curr += d
            finalDecs.append(curr)
        
        return all(
        finalDecs[i] >= nums[i] for i in range(len(nums)))
        
        ",1454820532
leetgoat_dot_dev,leetgoat_dot_dev,166,3643,python3,"class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        l = 0
        r = 10**5 + 1
        
        resK = None
        
        def canDoInK(k):
            sweep = [0] * (len(nums) + 1)
            c = 0
            for x in range(min(k, len(queries))):
                l, r, v = queries[x]
                sweep[l] += v
                sweep[r + 1] -= v
            final = []
            for sweeped in sweep:
                c += sweeped
                final.append(c)
            
            return all(final[i] >= nums[i] for i in range(len(nums)))
        
        while l<=r:
            m = (r + l) // 2
            if canDoInK(m):
                resK = m
                r = m - 1
            else:
                l = m + 1
        
        if resK is None:
            return -1
        return resK
            
            

                ",1454825699
WSong,S_W,167,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        n = len(nums)
        target = sum(nums)
        def move(start, dx):
            x = start
            cnt = collections.Counter()
            acc = 0
            while 0 <= x <= n - 1:
                if nums[x] == cnt[x]:
                    x += dx
                elif nums[x] > cnt[x]:
                    cnt[x] += 1
                    acc += 1
                    dx *= -1
                    x += dx
            return acc == target
        res = 0
        for i, x in enumerate(nums):
            if x != 0:
                continue
            for m in [-1, 1]:
                if move(i, m):
                    res += 1
        return res
        
                ",1454809771
WSong,S_W,167,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        cnt = collections.Counter()
        for l, r in queries:
            cnt[l] += 1
            cnt[r+1] -= 1
        acc = 0
        for i, x in enumerate(nums):
            acc += cnt[i]
            if acc < x:
                return False
        return True",1454812682
WSong,S_W,167,3643,python3,"class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        def verify(limit):
            cnt = collections.Counter()
            for i in range(limit):
                l, r, val = queries[i]
                cnt[l] += val
                cnt[r+1] -= val
            acc = 0
            for i, x in enumerate(nums):
                acc += cnt[i]
                if acc < x:
                    return False
            return True
        l, r = 0, len(queries)
        while l < r:
            mid = (l + r)//2
            if verify(mid):
                r = mid
            else:
                l = mid + 1
        if not verify(l):
            return -1
        return l
        ",1454818839
Amit Chaudhary,aekairis,168,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int sum=0;
        int n=nums.size();
        for(int i=0;i<n;i++){
            sum+=nums[i];
        }
        int currentSum=0;
        int ans=0;
        for(int i=0;i<n;i++){
            currentSum+=nums[i];
            sum-=nums[i];
            if(nums[i]==0){
                if(abs(currentSum-sum)<=1){
                    ans+=2-abs(currentSum-sum);
                }
            }
        }
        return ans;
    }
};",1454811627
Amit Chaudhary,aekairis,168,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n=nums.size();
        vector<int> count(n+1,0);
        for(auto& q:queries){
            count[q[0]]++;
            count[q[1]+1]--;
        }
        for(int i=1;i<=n;i++){
            count[i]+=count[i-1];
        }
        for(int i=0;i<n;i++){
            if(nums[i]>count[i]){
                return false;
            }
        }
        return true;
    }
};",1454817058
Amit Chaudhary,aekairis,168,3643,cpp,"class Solution {
public:
    bool becomeZero(vector<int>& nums, vector<vector<int>>& queries,int k){
        int n=nums.size();
        vector<int> count(n+1,0);
        for(int i=0;i<k;i++){
            count[queries[i][0]]+=queries[i][2];
            count[queries[i][1]+1]-=queries[i][2];
        }
        for(int i=1;i<=n;i++){
            count[i]+=count[i-1];
        }
        for(int i=0;i<n;i++){
            if(nums[i]>count[i]){
                return false;
            }
        }
        return true;
    }
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int start=0;
        int end=queries.size();
        int ans=-1;
        while(start<=end){
            int mid=(start+end)/2;
            if(becomeZero(nums,queries,mid)){
                ans=mid;
                end=mid-1;
            }else{
                start=mid+1;
            }
        }
        return ans;
    }
};",1454825822
Hayford08,Hayford08,169,3616,cpp,"class Solution {
public:
    const int dirs[2] = {-1, 1};
    int countValidSelections(vector<int>& nums) {
        int n = nums.size();
        int ans = 0;
        for (int i = 0; i < n; i++){
            if (nums[i] != 0) continue;

            for (int dir : dirs){
                vector<int> values = nums;
                int idx = i;
                int dx = dir;
                while (0 <= idx && idx < n){
                    if (values[idx] == 0){
                        idx += dx;
                    }
                    else {
                        values[idx]--;
                        dx *= -1;
                        idx += dx;
                    }
                }
                if (*max_element(values.begin(), values.end()) == 0){
                    ans++;
                } 
            }
        }
        return ans;
    }
};",1454825827
Hayford08,Hayford08,169,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        vector<int> pref(n + 1);
        for (auto &query : queries){
            int l = query[0], r = query[1];
            pref[l]++;
            pref[r + 1]--;
        }
        if (nums[0] > pref[0]){
            return false;
        }
        for (int i = 1; i < n; i++){
            pref[i] += pref[i - 1];
            if (nums[i] > pref[i]){
                return false;
            }
        }
        return true;
    }
};",1454808298
Hayford08,Hayford08,169,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int l = 0, r = queries.size();
        int ans = INT_MAX;
        int n = nums.size();
        while (l <= r){
            int mid = l + (r - l) / 2;
            vector<int> pref(n + 1);
            for (int i = 0; i < mid; i++){
                int l = queries[i][0], r = queries[i][1], val = queries[i][2];
                pref[l] += val;
                pref[r + 1] -= val;
            }
            bool ok = pref[0] >= nums[0];
            for (int i = 1; i < n && ok; i++){
                pref[i] += pref[i - 1];
                ok &= pref[i] >= nums[i];
            }
            if (!ok){
                l = mid + 1;
            }
            else {
                ans = mid;
                r = mid - 1;
            }
        }
        return ans == INT_MAX ? -1 : ans;
    }
};",1454816535
Noob Master,dyslexic_kid,170,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int suff=accumulate(nums.begin(),nums.end(),0),pref=0,ans=0;
        for(auto& n:nums){
            suff-=n;
            if(n==0){
                if(abs(suff-pref)==0) ans+=2;
                else if(abs(suff-pref)==1) ans++;
            }
            pref+=n;
        }
        return ans;
    }
};",1454807137
Noob Master,dyslexic_kid,170,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n=nums.size();
        vector<int> v(n+2);
        for(auto& q:queries){
            v[q[0]+1]++;
            v[q[1]+2]--;
        }
        for(int i=0;i<n;++i){
            v[i+1]+=v[i];
            if(v[i+1]<nums[i]) return false;
        }
        return true;
    }
};",1454809298
Noob Master,dyslexic_kid,170,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int q=queries.size(),n=nums.size();
        if(accumulate(nums.begin(),nums.end(),0ll)==0) return 0;
        int low=0,high=q-1,mid,ans=-1;
        while(low<=high){
            mid=(low+high)>>1;
            vector<long long> v(n+2);
            for(int i=0;i<=mid;++i){
                v[queries[i][0]+1]+=queries[i][2];
                v[queries[i][1]+2]-=queries[i][2];
            }
            bool pos=true;
            for(int i=0;i<n;++i){
                v[i+1]+=v[i];
                if(nums[i]>v[i+1]){
                    pos=false;break;
                }
            }
            if(pos){
                ans=mid+1;
                high=mid-1;
            }
            else low=mid+1;
        }
        return ans;
    }
};",1454818987
bnlvv,bnlvv,171,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        ans = 0 
        n = len(nums)
        total = sum(nums)
        for i in range(n): 
            if nums[i] == 0: 
                left = nums[:]
                c = i
                d = -1
                val = total 
                while 0 <= c < n: 
                    if left[c]: 
                        left[c] -= 1
                        d *= -1 
                        val -= 1
                    c += d
                # print(i, left, val)
                if val == 0: ans += 1
                right = nums[:]
                c = i
                d = 1
                val = total
                while 0 <= c < n: 
                    if right[c]: 
                        right[c] -= 1
                        d *= -1 
                        val -= 1
                    c += d 
                if val == 0: ans += 1
            
        return ans ",1454825934
bnlvv,bnlvv,171,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        n = len(nums)
        prefix = [0]*n
        for x, y in queries: 
            prefix[x] += 1
            if y+1 < n: prefix[y+1] -= 1
        for i, x in enumerate(nums): 
            if i: prefix[i] += prefix[i-1]
            if prefix[i] < nums[i]: return False 
        return True ",1454809218
bnlvv,bnlvv,171,3643,python3,"class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        n = len(nums)
        
        def fn(mid): 
            """"""Return """"""
            prefix = [0]*n
            for x, y, v in queries[:mid]: 
                prefix[x] += v
                if y+1 < n: prefix[y+1] -= v
            for i, x in enumerate(nums): 
                if i: prefix[i] += prefix[i-1]
                if prefix[i] < x: return False 
            return True 
        
        
        lo, hi = 0, len(queries)
        if not fn(hi): return -1
        while lo < hi: 
            mid = lo + hi >> 1
            if fn(mid): hi = mid
            else: lo = mid + 1
        return lo",1454815381
svmh,SupervisorMayHap,172,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        total = sum(nums)
        cur = 0
        res = 0
        for num in nums:
            if num > 0:
                cur += num
                total -= num
            else:
                if cur == total:
                    res += 2
                elif abs(cur - total) <= 1:
                    res += 1
        return res",1454806612
svmh,SupervisorMayHap,172,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        n = len(nums)
        diff = [0] * (n + 1)
        for l, r in queries:
            diff[l] += 1
            diff[r + 1] -= 1
        cur = 0
        for i in range(n):
            cur += diff[i]
            if cur < nums[i]:
                return False
        return True
        ",1454808491
svmh,SupervisorMayHap,172,3643,python3,"class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        n = len(nums)
        def isZeroArray(q):
            diff = [0] * (n + 1)
            for l, r, v in q:
                diff[l] += v
                diff[r + 1] -= v
            cur = 0
            # print(diff)
            for i in range(n):
                cur += diff[i]
                if cur < nums[i]:
                    return False
            
            return True
        
        if not isZeroArray(queries):
            return -1
        
        left = 0
        right = len(queries)

        while left < right:
            mid = (left + right) // 2
            if isZeroArray(queries[:mid]):
                right = mid
            else:
                left = mid + 1
        return left",1454819062
PooyaZ,pooyaz,173,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& arr) {
        int n = arr.size();
        int cnt = 0;
        for(int i = 0; i < n; i++){
            if(arr[i] != 0) continue;
            int l = 0, r = 0;
            for(int j = 0; j < i; j++){
                l += arr[j];
            }
            for(int j = i + 1; j < n; j++){
                r += arr[j];
            }
            if(l == r) cnt += 2;
            if(l == r + 1 || l + 1 == r) cnt += 1;
        }
        return cnt;
    }
};",1454807065
PooyaZ,pooyaz,173,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& arr, vector<vector<int>>& q) {
        int n = arr.size();
        int m = q.size();
        int cnt[n + 1];
        memset(cnt, 0, sizeof cnt);
        for(int i = 0; i < m; i++){
            cnt[q[i][0]]++;
            cnt[q[i][1] + 1]--;
        }

        int sum = 0;
        for(int i = 0; i < n; i++){
            sum += cnt[i];
            if(arr[i] > sum) return false;
        }
        return true;
    }
};",1454810917
PooyaZ,pooyaz,173,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& arr, vector<vector<int>>& q) {
        int n = arr.size();
        int m = q.size();
        int l = 0, r = m + 1;
        int cnt[n + 1];
        while(l < r){
            int mid = (l + r) / 2;

            memset(cnt, 0, sizeof cnt);
            for(int i = 0; i < mid; i++){
                cnt[q[i][0]] += q[i][2];
                cnt[q[i][1] + 1] -= q[i][2];
            }
            int sum = 0;
            bool isOk = true;
            for(int i = 0; i < n; i++){
                sum += cnt[i];
                if(arr[i] > sum){
                    isOk = false;
                    break;
                }
            }

            if(isOk) r = mid;
            else l = mid + 1;
        }
        return l > m ? -1 : l;
    }
};",1454819063
Jing-You,mble6125,174,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        
        int res = 0;
        
        for (int i = 0; i < nums.size(); ++i) {
            
            if (nums[i] == 0) {
                int count1= 0, count2 = 0;
                
                for (int j = 0; j < i; ++j) {
                    count1 += nums[j];
                }
                
                for (int j = i + 1; j < nums.size(); ++j) {
                    count2 += nums[j];
                }
                
                if (count1 == count2) res += 2;
                else if (abs(count1 - count2) == 1) ++res;
            }
            
        }
        
        return res;
    }
};",1454808397
Jing-You,mble6125,174,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        vector<int> count(n + 1);
        
        for (auto& q : queries) {
            count[q[0]]++;
            count[q[1] + 1]--;
        }
        
        for (int i = 1; i < n; ++i) {
            count[i] += count[i - 1];
        }
        
        for (int i = 0; i < n; ++i) {
            if (count[i] < nums[i]) return false;
            
        }
        
        return true;
    }
};",1454810713
Jing-You,mble6125,174,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        long long sum = 0;
        for (int x : nums) {
            sum += x;
        }
        
        if (sum == 0) {
            return 0;
        }
        
        int l = 0, r = queries.size() - 1;
        
        while (l <= r) {
            int mid = ((l + r) >> 1);
            if (success(nums, queries, mid)) r = mid - 1;
            else l = mid + 1;
        }
        
        if (l == queries.size()) {
            return -1;
        }
        
        return l + 1;
    }
    
    bool success(vector<int>& nums, vector<vector<int>>& queries, int k) {
        int n = nums.size();
        vector<int> count(n + 1);
        
        for (int i = 0; i <= k; ++i) {
            auto& q = queries[i];
            count[q[0]] += q[2];
            count[q[1] + 1] -= q[2];
        }
        
        for (int i = 1; i < n; ++i) {
            count[i] += count[i - 1];
        }
        
        for (int i = 0; i < n; ++i) {
            if (count[i] < nums[i]) return false;
        }
        
        return true;
    }
};",1454819066
lol0lol,lol0lol,175,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        total = sum(nums)
        curr = 0
        r = 0
        for e in nums:
            curr += e
            if e != 0: 
                continue
            if curr * 2 == total:
                r += 2
            elif curr * 2 + 1 == total:
                r += 1
            elif curr * 2 - 1 == total:
                r += 1
        return r",1454808275
lol0lol,lol0lol,175,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        n = len(nums)
        adds = [0] * (n + 1)
        for l, r in queries:
            adds[l] += 1
            adds[r + 1] -= 1
        curr = 0
        for i in range(n):
            curr += adds[i]
            if curr < nums[i]:
                return False
        return True",1454813132
lol0lol,lol0lol,175,3643,python3,"class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        n = len(nums)
        def can_solve(k):
            adds = [0] * (n + 1)
            for i in range(k):
                l, r, val = queries[i]
                adds[l] += val
                adds[r + 1] -= val
            curr = 0
            for i in range(n):
                curr += adds[i]
                if curr < nums[i]:
                    return False
            return True

        m = len(queries)
        lo, hi = 0, m + 1
        while lo < hi:
            mid = (lo + hi) // 2
            if can_solve(mid):
                hi = mid
            else:
                lo = mid + 1
        return lo if lo <= m else -1",1454826067
HIMANSHU GUPTA,himanshu_btc,176,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int ans=0;
        for(int i=0; i<nums.size(); i++){
            
            
            if(nums[i]==0){
                int left=0, right=0;
                for(int j=i-1; j>=0; j--){
                    left+=nums[j];
                }
                
                for(int j=i+1; j<nums.size(); j++){
                    right+=nums[j];
                }
                
                int diff=abs(left-right);
                
                if(diff==0){
                  ans+=2;  
                } 
                else if(diff==1){
                    ans++;
                }
            }
            
        }
        
        return ans;
    }
};",1454812007
HIMANSHU GUPTA,himanshu_btc,176,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        
        vector<int> fr(nums.size()+2, 0);
        
        for(int i=0; i<queries.size(); i++){
            int l=queries[i][0], r=queries[i][1];
            
            fr[l]++;
            fr[r+1]--;
        }
        
        for(int i=1; i<fr.size(); i++){
            fr[i]+=fr[i-1];
        }
        
        for(int i=0; i<nums.size(); i++){
            int val=nums[i], red=fr[i];
            
            if(val>red){
                return false;
            }
        }
        
        return true;
    }
};",1454817369
HIMANSHU GUPTA,himanshu_btc,176,3643,cpp,"class Solution {
public:
    bool check(int mid, vector<int> &nums, vector<vector<int>> &queries){
        vector<int> fr(nums.size()+2, 0);
        
        for(int i=0; i<mid; i++){
            int l=queries[i][0], r=queries[i][1], val=queries[i][2];
            
            fr[l]+=val;
            fr[r+1]-=val;
        }
        
        for(int i=1; i<fr.size(); i++){
            fr[i]+=fr[i-1];
        }
        
        for(int i=0; i<nums.size(); i++){
            int val=nums[i], red=fr[i];
            
            if(val>red){
                return false;
            }
        }
        
        return true;
    }
    
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        
        int l=0, h=queries.size();
        int ans=-1;
        
        while(l<=h){
            int mid=(l+h)/2;
            
            if(check(mid, nums, queries)){
                ans=mid;
                h=mid-1;
            }
            else{
                l=mid+1;
            }
        }
        
        return ans;
    }
};",1454826130
GoodBoiRaju,itsraajjjuuuu,177,3616,cpp,"#include <bits/stdc++.h>
using namespace std;
 
typedef long long ll;
typedef unsigned long long ull;
typedef vector<int> vi;
typedef vector<ll> vll;
typedef pair<int, int> pii;
typedef pair<ll, ll> pll;
typedef priority_queue<int> pq;
typedef priority_queue<int, vector<int>, greater<int>> pqg;
 
#define fastio ios_base::sync_with_stdio(false); cin.tie(NULL);
#define all(x) (x).begin(), (x).end()
#define rall(x) (x).rbegin(), (x).rend()
#define pb push_back
#define mp make_pair
#define fi first
#define se second
#define sz(x) (int)(x).size()
#define rep(i, a, b) for(int i = a; i < b; ++i)
#define repr(i, a, b) for(int i = a; i >= b; --i)
#define deb(x) cout << #x << "" = "" << x << endl;
#define INF 1e9
#define LINF 1e18
#define MOD 1000000007
#define MOD2 998244353
#define endl '\n'
 
ll min(ll a, int b) { return (a < b) ? a : b; }
ll min(int a, ll b) { return (a < b) ? a : b; }
ll max(ll a, int b) { return (a > b) ? a : b; }
ll max(int a, ll b) { return (a > b) ? a : b; }
ll gcd(ll a, ll b) { return (b == 0) ? a : gcd(b, a % b); }
ll lcm(ll a, ll b) { return a / gcd(a, b) * b; }
class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int n = nums.size(), ans = 0;

        auto f = [&nums, n](int start, int dir) {
            vector<int> temp = nums;
            int curr = start, d = dir;
            while (curr >= 0 && curr < n) {
                if (temp[curr] == 0) {
                    curr += d;
                } else {
                    temp[curr]--;
                    d = -d;
                    curr += d;
                }
            }
            for (int i = 0; i < n; ++i) {
                if (temp[i] != 0) return false;
            }
            return true;
        };

        for (int i = 0; i < n; ++i) {
            if (nums[i] == 0) {
                if (f(i, 1)) ans++;
                if (f(i, -1)) ans++;
            }
        }
        return ans;
    }
};

",1454807834
GoodBoiRaju,itsraajjjuuuu,177,3639,cpp,"#include <bits/stdc++.h>
using namespace std;
 
typedef long long ll;
typedef unsigned long long ull;
typedef vector<int> vi;
typedef vector<ll> vll;
typedef pair<int, int> pii;
typedef pair<ll, ll> pll;
typedef priority_queue<int> pq;
typedef priority_queue<int, vector<int>, greater<int>> pqg;
 
#define fastio ios_base::sync_with_stdio(false); cin.tie(NULL);
#define all(x) (x).begin(), (x).end()
#define rall(x) (x).rbegin(), (x).rend()
#define pb push_back
#define mp make_pair
#define fi first
#define se second
#define sz(x) (int)(x).size()
#define rep(i, a, b) for(int i = a; i < b; ++i)
#define repr(i, a, b) for(int i = a; i >= b; --i)
#define deb(x) cout << #x << "" = "" << x << endl;
#define INF 1e9
#define LINF 1e18
#define MOD 1000000007
#define MOD2 998244353
#define endl '\n'
 
ll min(ll a, int b) { return (a < b) ? a : b; }
ll min(int a, ll b) { return (a < b) ? a : b; }
ll max(ll a, int b) { return (a > b) ? a : b; }
ll max(int a, ll b) { return (a > b) ? a : b; }
ll gcd(ll a, ll b) { return (b == 0) ? a : gcd(b, a % b); }
ll lcm(ll a, ll b) { return a / gcd(a, b) * b; }
class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        vector<int> choose(n+1,0);
        for(auto x : queries){
            choose[x[0]]++;
            choose[x[1]+1]--;
        }
        int r = choose[0];
        for(int i =1;i<=n;i++) {
            r+=choose[i];
            choose[i]=r;
        }
        for(int i =0;i<n;i++){
            // if(nums[i]==0) continue;
            nums[i]-=min(nums[i],choose[i]);
            if(nums[i]!=0) return false;
        }
        return true;
        
    }
};",1454813825
GoodBoiRaju,itsraajjjuuuu,177,3643,cpp,"#include <vector>
using namespace std;

class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size(), m = queries.size();
        vector<int> a = nums, diff(n + 1, 0);

        auto f = [&](int k) -> bool {
            fill(diff.begin(), diff.end(), 0);
            for (int i = 0; i < k; ++i) {
                int l = queries[i][0], r = queries[i][1], val = queries[i][2];
                diff[l] -= val;
                if (r + 1 < n) diff[r + 1] += val;
            }
            int curr = 0;
            for (int i = 0; i < n; ++i) {
                curr += diff[i];
                if ((a[i] + curr) > 0) return false;
            }
            return true;
        };

        int left = 0, right = m, ans= -1;
        while (left <= right) {
            int mid = left + (right - left) / 2;
            if (f(mid)) {
                ans = mid;
                right = mid - 1;
            } else {
                left = mid + 1;
            }
        }
        return ans;
    }
};
",1454826166
Farras Faddila,donbasta,178,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int n = nums.size();
        int tot = accumulate(nums.begin(), nums.end(), 0);
        int cur = 0, ans = 0;
        for (int i = 0; i < n; i++) {
            if (nums[i] == 0) {
                if (cur * 2 == tot) ans += 2;
                if (abs(cur - (tot - cur)) == 1) ans++;
            }
            cur += nums[i];
        }
        return ans;
    }
};",1454825832
Farras Faddila,donbasta,178,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        vector<int> T(n + 1);
        for (auto q : queries) {
            T[q[0]]++;
            T[q[1] + 1]--;
        }
        for (int i = 1; i < n; i++) {
            T[i] += T[i - 1];
        }
        for (int i = 0; i < n; i++) {
            if (nums[i] > T[i]) return false;
        }
        return true;
    }
};",1454825910
Farras Faddila,donbasta,178,3643,cpp,"struct Segtree {
    vector<int> tree, lz;
    Segtree(const vector<int>& T) {
        int sz = T.size();
        tree.resize(4 * sz + 5);
        lz.resize(4 * sz + 5);
        build(1, 0, sz - 1, T);
    }
    void build(int v, int s, int e, const vector<int>& T) {
        if (s == e) {
            tree[v] = T[s];
            return;
        }
        int mid = (s + e) >> 1;
        build(v << 1, s, mid, T);
        build(v << 1 | 1, mid + 1, e, T);
        tree[v] = max(tree[v << 1], tree[v << 1 | 1]);
    }
    void push(int v, int s, int e) {
        if (lz[v] == 0) return;
        tree[v << 1] += lz[v];
        lz[v << 1] += lz[v];
        tree[v << 1 | 1] += lz[v];
        lz[v << 1 | 1] += lz[v];
        lz[v] = 0;
    }
    void upd(int v, int s, int e, int l, int r, int val) {
        if (s == l && e == r) {
            lz[v] += val;
            tree[v] += val;
            return;
        }
        push(v, s, e);
        int mid = (s + e) >> 1;
        if (r <= mid) upd(v << 1, s, mid, l, r, val);
        else if (l >= mid + 1) upd(v << 1 | 1, mid + 1, e, l, r, val);
        else {
            upd(v << 1, s, mid, l, mid, val);
            upd(v << 1 | 1, mid + 1, e, mid + 1, r, val);
        }
        tree[v] = max(tree[v << 1], tree[v << 1 | 1]);
    }
};

class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        if (*max_element(nums.begin(), nums.end()) == 0) return 0;
        Segtree sgt(nums);
        int steps = 0;
        for (auto q : queries) {
            sgt.upd(1, 0, n - 1, q[0], q[1], -q[2]);
            steps++;
            if (sgt.tree[1] <= 0) {
                return steps;
            }
        }
        return -1;
    }
};",1454826324
Aniket More,an1ket_62,179,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& a) {
        int n=a.size();
        int ans=0;
        for (int i=0;i<n;i++){
            if (a[i]>0){
                continue;
            }
            // cout<<""start ""<<i<<endl;
            int curr=i;
            vector<int>b=a;
            int d=1;
            while(curr>=0 && curr<n){
                if (b[curr]==0){
                    curr+=d;
                }
                else{
                    b[curr]--;
                    d*=-1;
                    curr+=d;
                }
                // cout<<curr<<"" "";
            }
            // cout<<endl;
            bool f=1;
            for(int i=0;i<n;i++){
                if (b[i]>0){
                    f=0;
                    break;
                }
            }
            // if (f){
            //     cout<<i<<"" "";
            // }
            // cout<<endl;
            ans+=f;
            d=-1;
            b=a;
            curr=i;
            while(curr>=0 && curr<n){
                if (b[curr]==0){
                    curr+=d;
                }
                else{
                    b[curr]--;
                    d*=-1;
                    curr+=d;
                }
            }
            f=1;
            for(int i=0;i<n;i++){
                if (b[i]>0){
                    f=0;
                    break;
                }
            }
            // if (f){
            //     cout<<i<<endl;
            // }
            ans+=f;
            
        }
        return ans;
        
    }
};",1454810423
Aniket More,an1ket_62,179,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& a, vector<vector<int>>& q) {
        int n=a.size();
        vector<int>pf(n);
        for(int i=0;i<q.size();i++){
            int l=q[i][0];
            int r=q[i][1];
            pf[l]++;
            if (r+1<n){
                pf[r+1]--;
            }
        }
        for(int i=1;i<n;i++){
            pf[i]+=pf[i-1];
        }
        for(int i=0;i<n;i++){
            if(a[i]>pf[i]){
                return false;
            }
        }
        return true;
        
    }
};",1454812734
Aniket More,an1ket_62,179,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& a, vector<vector<int>>& q) {
        int low=0;
        int high=q.size();
        int ans=INT_MAX;
        int n=a.size();
        while(low<=high){
            int md=(low+high)/2;
            vector<long long>pf(n);
            for (int i=0;i<md;i++){
                int l=q[i][0];
                int r=q[i][1];
                int v=q[i][2];
                pf[l]+=v;
                if (r+1<n){
                    pf[r+1]-=v;
                }
            }
            bool f=1;
            for (int i=0;i<n;i++){
                if (i-1>=0){
                    pf[i]+=pf[i-1];
                }
                if (a[i]>pf[i]){
                    f=0;
                    break;
                }
            }
            if (f){
                ans=md;
                high=md-1;
            }
            else{
                low=md+1;
            }
            
        }
        if (ans==INT_MAX){
            ans=-1;
        }
        return ans;
        
    }
};",1454819538
dpdpdpp,dpdpdpp,180,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        N = len(nums)
        
        def ok(curr, dir):
            a = nums[:]
            while 0 <= curr < N:
                if a[curr] == 0:
                    curr += dir
                else:
                    a[curr] -= 1
                    dir = - dir
                    curr += dir
            return sum(a) == 0

        ans = 0
        for i in range(N):
            for j in [1, -1]:
                if nums[i] == 0 and ok (i, j):
                    ans += 1

        return ans",1454808441
dpdpdpp,dpdpdpp,180,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        N = len(nums)
        diff = [0] * (N+5)
        for s, e in queries:
            diff[s] += 1
            diff[e+1] -= 1

        ps = 0
        for i in range(N):
            ps += diff[i]
            if ps < nums[i]:
                return False

        return True",1454811176
dpdpdpp,dpdpdpp,180,3643,python3,"class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        N = len(nums)

        def ok(k):
            diff = [0] * (N+5)
            for s, e, val in queries[:k]:
                diff[s] += val
                diff[e+1] -= val
                
            ps = 0
            for i in range(N):
                ps += diff[i]
                if ps < nums[i]:
                    return False
            return True

        lo = 0
        hi = len(queries)
        while lo < hi:
            mid = (lo + hi) // 2
            if not ok(mid):
                lo = mid + 1
            else:
                hi = mid

        if not ok(lo):
            return -1

        return lo
        
",1454819718
dhakad_239,dhakad_239,181,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int i,j;
        int n=nums.size();
        int sum=0;
        for(i=0;i<n;i++){
            sum+=nums[i];
        }
        int to=0;
        int ans=0;
        for(i=0;i<n;i++){
            sum-=nums[i];
            to+=nums[i];
            if(nums[i]==0){
                if(to==sum){
                    ans+=2;
                }
                else if(abs(to-sum)==1){
                    ans+=1;
                }
            }
        }
        return ans;
    }
};",1454808410
dhakad_239,dhakad_239,181,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& q) {
        int i,j;
        int n=nums.size();
        int m=q.size();
        int dp[n];
        for(i=0;i<n;i++){
            dp[i]=0;
        }
        for(i=0;i<m;i++){
            int x=q[i][0];
            int y=q[i][1];
            dp[x]++;
            if(y+1<n){
                dp[y+1]--;
            }
        }
        int cur=0;
        for(i=0;i<n;i++){
            cur+=dp[i];
            if(nums[i]>cur){
                return 0;
            }
        }
        return 1;
    }
};",1454816064
dhakad_239,dhakad_239,181,3643,cpp,"class Solution {
public:

     bool check(int n,int m,int mi,vector<vector<int>>q,vector<int>nums){
         int i,j;
         int dp[n];
        for(i=0;i<n;i++){
            dp[i]=0;
        }
         for(i=0;i<mi;i++){
            int x=q[i][0];
            int y=q[i][1];
             int z=q[i][2];
            dp[x]+=z;
            if(y+1<n){
                dp[y+1]-=z;
            }
        }
         int cur=0;
        for(i=0;i<n;i++){
            cur+=dp[i];
            if(nums[i]>cur){
                return 0;
            }
        }
        return 1;
     }
    int minZeroArray(vector<int>& nums, vector<vector<int>>& q) {

      int i,j;
        int n=nums.size();
        int m=q.size();
        int l=0,r=m;
        int ans=m;
        int flag=0;
        while(l<=r){
            int mi=l+(r-l)/2;
            if(check(n,m,mi,q,nums)){
                flag=1;
                ans=min(ans,mi);
                r=mi-1;
            }
            else{
                l=mi+1;
            }
        }
        if(!flag){
            return -1;
        }
        else{
        return ans;
        }
        
    }
};",1454826691
abhisheq_,abhisheq_,183,3616,cpp,"class Solution {
public:
    bool helper(vector<int> nums, int start, int dir) {
        int n = nums.size(), i = start;
        while (i >= 0 && i < n) {
            if (nums[i] == 0) {
                i += dir;
            } else {
                nums[i]--;
                dir = -dir;
                i += dir;
            }
        }
        return all_of(nums.begin(), nums.end(), [](int x) { return x == 0; });
    }

    int countValidSelections(vector<int>& nums) {
        int n = nums.size(), res = 0;
        for (int i = 0; i < n; ++i) {
            if (nums[i] == 0) {
                if (helper(nums, i, -1)) res++;
                if (helper(nums, i, 1)) res++;
            }
        }
        return res;
    }
};
",1454811232
abhisheq_,abhisheq_,183,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        vector<long long>p(nums.size()+1);
        for(auto i: queries){
            p[i[0]]++;
            p[i[1]+1]--;
        }
        for(int i=1; i<p.size(); i++){
            p[i]+=p[i-1];
        }
        for(int i=0; i<nums.size(); i++){
            if(nums[i]>p[i]){
                return false;
            }
        }
        return true;
        
    }
};",1454815700
abhisheq_,abhisheq_,183,3643,cpp,"class Solution {
public:
    bool fun(vector<int>nums, vector<vector<int>>queries, int k){
        vector<long long>p(nums.size()+1);
        for(int i=0; i<k; i++){
            long long t=queries[i][2];
            p[queries[i][0]]+=t;
            p[queries[i][1]+1]-=t;
        }
        for(int i=1; i<p.size(); i++){
            p[i]+=p[i-1];
        }
        for(int i=0; i<nums.size(); i++){
            if(nums[i]>p[i]){
                return false;
            }
        }
        return true;
    }
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int l=0, r=queries.size(), ans=-1;
        while(l<=r){
            int mid=(l+r)/2;
            if(fun(nums, queries, mid)){
                ans=mid;
                r=mid-1;
            }else{
                l=mid+1;
            }
        }
        return ans;
        
    }
};",1454826809
pushkar kumar,qwertypushkar123,184,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int n=nums.size();
        int ans=0;
        for(int i=0;i<n;i++){
            if(nums[i]==0){
                int sum1=0,sum2=0;
                for(int j=i-1;j>=0;j--){
                    sum1+=nums[j];
                }
                for(int j=i+1;j<n;j++){
                    sum2+=nums[j];
                }
                // cout<<i<<"" ""<<sum1<<"" ""<<sum2<<endl;
                if(sum1==sum2){
                    ans+=2; 
                }
                if(abs(sum1-sum2)==1){
                    ans+=1;
                }
            }
        }
        return ans;
    }
};",1454810521
pushkar kumar,qwertypushkar123,184,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n=nums.size();
        vector<int>psum(n+1);
        int m=queries.size();
        for(int i=0;i<m;i++){
            psum[queries[i][0]]+=1;
            psum[queries[i][1]+1]-=1;
        }
        for(int i=1;i<n;i++){
            psum[i]=psum[i-1]+psum[i];
        }
        for(int i=0;i<n;i++){
            if(nums[i]-psum[i]>0){
                return false;
            }
        }
        return true;
    }
};",1454816226
pushkar kumar,qwertypushkar123,184,3643,cpp,"class Solution {
public:
    bool check(vector<int>&nums,vector<vector<int>>&queries,int mid){
        int n=nums.size();
        int m=queries.size();
        vector<int>psum(n+1);
        for(int i=0;i<mid;i++){
            int left=queries[i][0];
            int right=queries[i][1];
            int val=queries[i][2];
            psum[left]+=val;
            psum[right+1]-=val;
        }
        for(int i=1;i<n;i++){
            psum[i]=psum[i-1]+psum[i];
        }
        for(int i=0;i<n;i++){
            if(nums[i]-psum[i]>0){
                return false;
            }
        }
        return true;
    }
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n=nums.size();
        int m=queries.size();
        int s=0,e=m,res=-1;
        while(s<=e){
            int mid=s+(e-s)/2;
            if(check(nums,queries,mid)){
                res=mid;
                e=mid-1;
            }
            else{
                s=mid+1;
            }
        }
        return res;
    }
};",1454826811
Anshuman Tiwari,VoidX1107,185,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        vector<int> pref=nums;
        vector<int> suff=nums;
        int cnt=0;
        int n=nums.size();
        for(int i=1;i<n;i++){
            pref[i]+=pref[i-1];
        }
        for(int i=n-2;i>=0;i--){
            suff[i]+=suff[i+1];
        }
        for(int i=0;i<n;i++){
            if(nums[i]==0 && suff[i]==pref[i])cnt+=2;
            if(nums[i]==0 && (suff[i]==pref[i]+1 || pref[i]==suff[i]+1))cnt+=1;
        }
        return cnt;
    }
};",1454813006
Anshuman Tiwari,VoidX1107,185,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        vector<int> linesweep(n+1);
        for(auto& it : queries) {
            linesweep[it[0]]++;
            linesweep[it[1]+1]--;
        }

        for(int i = 1; i < linesweep.size(); i++) {
            linesweep[i] += linesweep[i-1];
        }
        
        for(int i = 0; i < n; i++) {
            if(nums[i] > linesweep[i]) return false;
        }
        return true;
    }
};",1454822217
Anshuman Tiwari,VoidX1107,185,3643,cpp,"class Solution {
public:
    bool solve(vector<int>& nums, vector<vector<int>>& queries, int k) {
        int n = nums.size();
        vector<long long> linesweep(n + 1);
        
        for(int i = 0; i < k; i++) {
            int left = queries[i][0];
            int right = queries[i][1];
            long long val = queries[i][2];
            linesweep[left] += val;
            linesweep[right + 1] -= val;
        }
    
        for(int i = 1; i < n; i++) {
            linesweep[i] += linesweep[i-1];
        }
        
        for(int i = 0; i < n; i++) {
            if(linesweep[i] < nums[i]) return false;
        }
        return true;
    }
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int left = 0, right = queries.size();
        int ans = -1;
        
        while(left <= right) {
            int mid = left + (right - left) / 2;
            
            if(solve(nums, queries, mid)) {
                ans = mid;
                right = mid - 1; 
            } else {
                left = mid + 1; 
            }
        }
        
        return ans;
    }
};",1454826812
ocavue,ocavue,186,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        nums_original = [*nums]

        def run(nums, curr: int, dir: int):
            n = len(nums)
            while 0 <= curr < n:
                
                if nums[curr] == 0:
                    curr += dir
                elif nums[curr] > 0:
                    nums[curr] -= 1
                    dir *= -1
                    curr += dir 
            return set(nums) == set([0])

        result = 0 
        for i in range(len(nums)):
            if nums[i] == 0:
                result += run([*nums_original], i, -1)
                result += run([*nums_original], i, +1)

        return result ",1454812427
ocavue,ocavue,186,3639,python3,"from typing import List


class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        n = len(nums)

        diffs = [0] * (n + 1)
        for l, r in queries:
            diffs[l] += 1
            diffs[r + 1] -= 1

        presum = [0]
        for d in diffs:
            presum.append(presum[-1] + d)

        for i in range(n):
            num = nums[i]
            sum = presum[i + 1]
            if num - sum > 0:
                return False
        return True
 ",1454822511
ocavue,ocavue,186,3643,python3,"from typing import List


class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        n = len(nums)
        if all(num == 0 for num in nums):
            return 0

        if not self.isZeroArray(nums, queries):
            return -1

        lo = 0
        hi = len(queries)

        while lo < hi:
            mi = (lo + hi) // 2
            q = queries[:mi]
            if self.isZeroArray(nums, q):
                hi = mi
            else:
                lo = mi + 1
        return lo

    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        n = len(nums)

        diffs = [0] * (n + 1)
        for l, r, val in queries:
            diffs[l] += val
            diffs[r + 1] -= val

        presum = [0]
        for d in diffs:
            presum.append(presum[-1] + d)

        for i in range(n):
            num = nums[i]
            sum = presum[i + 1]
            if num - sum > 0:
                return False
        return True
 ",1454826894
Ramakrishna Gaddam,ram0629,188,3616,java,"class Solution {
    public int countValidSelections(int[] nums) {

        int res = 0;

        for(int i = 0; i<nums.length;i++){
            if(nums[i]==0 && (valid(nums.clone(), i, 1))){
                res++;
            }
            if(nums[i]==0 && (valid(nums.clone(),i,-1))){
                res++;
            }
        }
        return res;
    }

    private boolean valid(int[] nums, int cur, int dir){

        int n = nums.length;
        while(cur>=0 && cur<n){

            int num = nums[cur];

            if(num==0){
                cur = cur+dir;
            }
            else{
                nums[cur]--;

                dir *=-1;
                cur = cur+dir;
            }
        }

        for(int i = 0; i<n;i++){
            if(nums[i]>0){
                return false;
            }
        }
        System.out.println(Arrays.toString(nums));
        return true;
    }
}",1454810388
Ramakrishna Gaddam,ram0629,188,3639,java,"class Solution {
    public boolean isZeroArray(int[] nums, int[][] queries) {


        int n = nums.length;

        long[] line = new long[n+1];

        for(int[] q : queries){
            line[q[0]]++;
            line[q[1]+1]--;
        }

        long sum =0;

        for(int i = 0; i<=n;i++){

            sum +=line[i];

            line[i] = sum;
        }

        int count = 0;
        for(int i =0; i<n;i++){
            if(line[i]>=nums[i]){
                count++;
            }
        }
        return count==n;
    }
}",1454821257
Ramakrishna Gaddam,ram0629,188,3643,java,"class Solution {
    public int minZeroArray(int[] nums, int[][] queries) { 
        int res = -1;

        int left = 0;
        int right = queries.length;

        while(left<=right){
            int mid = left+(right-left)/2;

            if(isValid(nums, queries, mid)){
                res = mid;
                right= mid-1;
            }
            else{
                left = mid+1;
            }
        }
        return res;
    }

    boolean isValid(int[] nums, int[][] queries, int k){
        
        int n = nums.length;

        long[] line = new long[n+1];

        for(int i = 0; i<k;i++){
            int[] q = queries[i];
            line[q[0]]+=q[2];
            line[q[1]+1]-=q[2];
        }

        long sum =0;

        for(int i = 0; i<=n;i++){

            sum +=line[i];

            line[i] = sum;
        }

        int count = 0;
        for(int i =0; i<n;i++){
            if(line[i]>=nums[i]){
                count++;
            }
        }
        return count==n;
    }
}",1454826993
midnight_simon,midnightsimon,189,3616,cpp,"class Solution {

    bool solve(vector<int> nums, int start, int dir) {

        bool should_continue = true;
        while(should_continue) {
            
            start += dir;
            if(start < 0 || start >= nums.size()) {
                break;
            }
            if(nums[start] == 0) {
                continue;
            }
            if(nums[start] > 0) {
                nums[start]--;
                dir *= -1;
            }
        }

        for(int x : nums) {
            if(x > 0) {
                return false;
            }
        }

        return true;
    }

public:
    int countValidSelections(vector<int>& nums) {
        int n = nums.size();
        int ans = 0;


        for(int i = 0; i < n; i++) {
            if(nums[i] == 0) {
                ans += solve(nums, i, -1);
                ans += solve(nums, i, +1);
            }
        }

        return ans;

        
    }
};",1454810243
midnight_simon,midnightsimon,189,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        vector<int> freq(n+1);
        for(auto& q : queries) {
            freq[q[0]]++;
            freq[q[1]+1]--;
        }
        
        vector<int> pre(n+1);
        int sum = 0;
        for(int i = 0; i < n; i++) {
            sum += freq[i];
            pre[i] = sum;
        }
        
        for(int i = 0; i < n; i++) {
            if(nums[i] > pre[i]) {
                return false;
            }
        }
        
        return true;
        
        
    }
};",1454819183
midnight_simon,midnightsimon,189,3643,cpp,"class Solution {
    
    
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        
        auto solve = [&](int k) -> bool {
            int n = nums.size();
            vector<int> freq(n+1);
            
            for(int i = 0; i < k; i++) {
                freq[queries[i][0]] += queries[i][2];
                freq[queries[i][1]+1]-= queries[i][2];
            }

            vector<int> pre(n+1);
            int sum = 0;
            for(int i = 0; i < n; i++) {
                sum += freq[i];
                pre[i] = sum;
            }

            for(int i = 0; i < n; i++) {
                if(nums[i] > pre[i]) {
                    return false;
                }
            }

            return true;
        };
        
        int L = 0;
        int R = queries.size();
        int best = INT_MAX;
        while(L <= R) {
            int M = L + (R - L) / 2;
            bool res = solve(M);
            if(res) {
                best = M;
                R = M - 1;
            } else {
                L = M + 1;
            }
        }
        if(best == INT_MAX) {
            return -1;
        }
        return best;
    }
};",1454827013
zokumyoin,zokumyoin,190,3616,java,"class Solution {
    public int countValidSelections(int[] arr) {
        int ans = 0;
        for (int i = 0; i < arr.length; i++) {
            if (arr[i] != 0) {
                continue;
            }
            if (valid(Arrays.copyOf(arr, arr.length), i, 1)) {
                ans++;
            }
            if (valid(Arrays.copyOf(arr, arr.length), i, -1)) {
                ans++;
            }
        }
        return ans;
    }
    
    private boolean valid(int[] arr, int cur, int dir) {
        // System.out.printf(""%s %d %d\n"", Arrays.toString(arr), cur, dir);
        if (cur < 0 || cur >= arr.length) {
            for (int v : arr) {
                if (v != 0) {
                    return false;
                }
            }
            return true;
        }
        if (arr[cur] == 0) {
            return valid(arr, cur + dir, dir);
        }
        if (arr[cur] > 0) {
            arr[cur]--;
            return valid(arr, cur - dir, -dir);
        }
        return false;
    }
}",1454818840
zokumyoin,zokumyoin,190,3639,java,"class Solution {
    public boolean isZeroArray(int[] arr, int[][] queries) {
        int[] d = new int[arr.length + 1];
        for (int[] q : queries) {
            int l = q[0], r = q[1];
            d[l]++;
            d[r + 1]--;
        }
        int sum = 0;
        for (int i = 0; i < arr.length; i++) {
            sum += d[i];
            if (sum < arr[i]) {
                return false;
            }
        }
        return true;
    }
}",1454821745
zokumyoin,zokumyoin,190,3643,java,"class Solution {
    public int minZeroArray(int[] nums, int[][] queries) {
        if (!willBeZero(nums, queries, queries.length)) {
            return -1;
        }
        int lo = 0, hi = queries.length;
        while (lo < hi) {
            int mid = lo + (hi - lo) / 2;
            if (willBeZero(nums, queries, mid)) {
                hi = mid;
            } else {
                lo = mid + 1;
            }
        }
        return hi;
    }
    
    private boolean willBeZero(int[] arr, int[][] queries, int k) {
        int[] d = new int[arr.length + 1];
        for (int i = 0; i < k; i++) {
            int[] q = queries[i];
            int l = q[0], r = q[1], val = q[2];
            d[l] += val;
            d[r + 1] -= val;
        }
        int sum = 0;
        for (int i = 0; i < arr.length; i++) {
            sum += d[i];
            if (arr[i] > sum) {
                return false;
            }
        }
        return true;
        
    }
}",1454827089
Shubham Maheshwari,sm_27,192,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        n = len(nums)
        s = sum(nums)
        curr = 0
        ans = 0
        for i in range(n):
            if nums[i] == 0:
                if abs((s-curr) - curr)==1:
                    ans += 1
                elif s-curr == curr:
                    ans += 2
            curr += nums[i]
        return ans",1454814178
Shubham Maheshwari,sm_27,192,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        q = []
        for query in queries:
            q.append((query[0], 1))
            q.append((query[1]+1, -1))
        q.sort(key = lambda x:(x[0],-x[1]))
        n = len(nums)
        m = len(q)
        j = 0
        curr = 0
        for i in range(n):
            while j<=m and q[j][0] <= i:
                curr += q[j][1]
                j += 1
            if curr < nums[i]:
                return False
        return True",1454809087
Shubham Maheshwari,sm_27,192,3643,python3,"class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        def check(m):
            q = []
            for query in queries[:m]:
                q.append((query[0], query[2]))
                q.append((query[1]+1, -query[2]))
            q.sort(key = lambda x:(x[0],-x[1]))
            n = len(nums)
            m = len(q)
            j = 0
            curr = 0
            for i in range(n):
                while j<m and q[j][0] <= i:
                    curr += q[j][1]
                    j += 1
                if curr < nums[i]:
                    return False
            return True
        m = len(queries)
        l = 0
        r = m
        ans = float(""inf"")
        while l<=r:
            mid = (l+r)//2
            if check(mid):
                ans = mid
                r = mid-1
            else:
                l = mid + 1
        if ans == float(""inf""):
            return -1
        return ans
        ",1454820185
Rohitaas Beri,rohitaas_beri,195,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {

        auto go = [&](int index, int dir, vector<int>& nums) -> bool {
            int i = index;
            while (i >= 0 && i < nums.size()) {
                if (nums[i] == 0) {
                    i += dir;
                } else {
                    nums[i]--;
                    if (dir == 1)
                        dir = -1;
                    else
                        dir = 1;
                    i += dir;
                }
            }

            for (auto i : nums) {
                if (i != 0)
                    return false;
            }
            return true;
        };

        int ans = 0;
        for (int i = 0; i < nums.size(); i++) {

            if (nums[i] == 0) {
                auto temp = nums;
                ans += go(i, 1, temp);
                temp = nums;
                ans += go(i, -1, temp);
                //cout << ans << endl;
            }
        }
        return ans;
    }
};",1454812562
Rohitaas Beri,rohitaas_beri,195,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        int f[n + 2];
        memset(f, 0, sizeof(f));

        for (auto i : queries) {
            f[i[0]]++;
            f[i[1] + 1]--;
        }

        int cur = 0;
        for (int i = 0; i < n; i++) {
            cur += f[i];
            if (cur < nums[i]) {
                return false;
            }
        }
        return true;
    }
};",1454818969
Rohitaas Beri,rohitaas_beri,195,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {

        int n = nums.size();

        int flag = 0;
        for (auto i : nums) {
            if (i != 0) {
                flag = 1;
                break;
            }
        }

        if (!flag)
            return 0;

        int high = queries.size() - 1, low = 0, mid, ans=-1;

        while (high >= low) {
            mid = (high + low) >> 1;

            if ([&]() -> bool {
                    int f[n + 2];
                    memset(f, 0, sizeof(f));

                    for (int i = 0; i <= mid; i++) {
                        f[queries[i][0]] += queries[i][2];
                        f[queries[i][1] + 1] -= queries[i][2];
                    }
                    int cur = 0;
                    for (int i = 0; i < n; i++) {
                        cur += f[i];
                        if (cur < nums[i]) {
                            return false;
                        }
                    }
                    return true;
                }()) {
                ans = mid;
                high = mid - 1;
            } else
                low = mid + 1;
        }

        if(ans==-1)return -1;
        return ans + 1;
    }
};",1454827320
Ayanokoji,TheEgoist_,196,3616,cpp,"class Solution {
public:
void check(vector<int> &nums, int ind, int dir) {
    for (int i = ind; i < nums.size() && i >= 0; i += dir) {
        if (nums[i] > 0) {
            nums[i]--;
            check(nums, i - dir, -dir);
            return;
        }
    }
}
    int countValidSelections(vector<int>& nums) {
        int n = nums.size();
        vector<int> curr;
        for (int i = 0; i < n; i++) {
            if (nums[i] == 0) {
                curr.push_back(i);
            }
        }

        int ans = 0;
        for (int i = 0; i < curr.size(); i++) {
            vector<int> temp = nums;
            check(temp, curr[i], 1);
            if (accumulate(temp.begin(), temp.end(), 0) == 0) ans++;
            temp = nums;
            check(temp, curr[i], -1);
            if (accumulate(temp.begin(), temp.end(), 0) == 0) ans++;
        }
        return ans;
    }
};",1454809574
Ayanokoji,TheEgoist_,196,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        vector<int> diff(n + 1);
        for (int i = 0; i < queries.size(); i++) {
            int l = queries[i][0];
            int r = queries[i][1];
            diff[l]++;
            diff[r + 1]--;
        }
        for (int i = 1; i <= n; i++) {
            diff[i] += diff[i - 1];
        }

        for (int i = 0; i < n; i++) {
            if (diff[i] < nums[i]) return false;
        }
        return true;
    }
};",1454814124
Ayanokoji,TheEgoist_,196,3643,cpp,"class Solution {
public:
    bool can(int sz, vector<int> &nums, vector<vector<int>> &queries) {
        int n = nums.size();
        vector<int> diff(n + 1, 0);
        for (int i = 0; i < sz; i++) {
            int l = queries[i][0];
            int r = queries[i][1];
            diff[l] += queries[i][2];
            diff[r + 1] -= queries[i][2];
        }
        // cout << sz << "": "";
        for (int i = 1; i <= n; i++) {
            diff[i] += diff[i - 1];
        }
        // for (int i = 0; i <= n; i++) {
        //     cout << diff[i] << ' ';
        // }
        // cout<<'\n';

        for (int i = 0; i < n; i++) {
            if (diff[i] < nums[i]) return false;
        }
        return true;
    }
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int s = 0;
        int e = queries.size();
        int ans = 0;
        if (!can(queries.size(), nums, queries)) return -1;
        while (s <= e) {
            int mid = (s + e) / 2;
            if (can(mid, nums, queries)) {
                e = mid - 1;
                ans = mid;
            }
            else s = mid + 1;
        }
        return ans;
    }
};",1454827338
Felix Yan,felixpek,197,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        n = len(nums)
        def simula(start, direction):
            ar = nums[:]
            cur = start
            step = 1 if direction == 1 else -1

            while 0 <= cur < n:
                if ar[cur] == 0:
                    cur += step
                elif ar[cur] > 0:
                    ar[cur] -= 1
                    step = -step 
                    cur += step

            return all(x == 0 for x in ar)

        validCount = 0

        for i in range(n):
            if nums[i] == 0:  
                if simula(i,1):  
                    validCount += 1
                if simula(i, 0):
                    validCount += 1

        return validCount",1454815803
Felix Yan,felixpek,197,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        n = len(nums)
        covr = [0] * (n + 1)

        for l, r in queries:
            covr[l] += 1
            if r + 1 < n:
                covr[r + 1] -= 1               
        for i in range(1, n):
            covr[i] += covr[i - 1]

        for i in range(n):
            if nums[i] > covr[i]:
                return False
        return True        ",1454819204
Felix Yan,felixpek,197,3643,python3,"class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        n = len(nums)
        m = len(queries)
        totalDiff = [0] * (n + 2)
        if all(x == 0 for x in nums):
            return 0


        for l, r, val in queries:
            totalDiff[l] += val
            if r + 1 < len(totalDiff):
                totalDiff[r + 1] -= val
        totalCapacity = [0] * n
        cumulative = 0
        for i in range(n):
            cumulative += totalDiff[i]
            totalCapacity[i] = cumulative
        for i in range(n):
            if totalCapacity[i] < nums[i]:
                return -1 

        lo, hi = 1, m
        result = -1
        while lo <= hi:
            mid = (lo + hi) // 2

            diff = [0] * (n + 2)
            for i in range(mid):
                l, r, val = queries[i]
                diff[l] += val
                if r + 1 < len(diff):
                    diff[r + 1] -= val
            capacity = [0] * n
            cumulative = 0
            possible = True
            for i in range(n):
                cumulative += diff[i]
                capacity[i] = cumulative
                if capacity[i] < nums[i]:
                    possible = False
                    break
            if possible:
                result = mid
                hi = mid - 1 
            else:
                lo = mid + 1 

        return result        ",1454827345
Sandeep P,Sandeep_P,198,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        r=sum(nums)
        ans=0
        l=0
        for i,x in enumerate(nums):
            if x==0 and l==r:
                ans+=2
            if x==0 and abs(l-r)==1:
                ans+=1
            l+=x
            r-=x
        return ans",1454810447
Sandeep P,Sandeep_P,198,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        n=len(nums)
        ops=[0]*(n+1)
        for l,r in queries:
            ops[l]-=1
            ops[r+1]+=1
        offset=0
        for i in range(n):
            offset+=ops[i]
            nums[i]+=offset
        return all(x<=0 for x in nums)",1454814980
Sandeep P,Sandeep_P,198,3643,python3,"class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        n=len(nums)
        def check(k):
            a=nums[::]
            ops=[0]*(n+1)
            for l,r,val in queries[:k]:
                ops[l]-=val
                ops[r+1]+=val
            offset=0
            for i in range(n):
                offset+=ops[i]
                a[i]+=offset
            return all(x<=0 for x in a)

        ans=bisect_left(range(len(queries)+1),True,key=check)
        if check(ans):
            return ans
        return -1",1454820365
Anupam Ghosh,anupam_ghosh,199,3616,cpp,"bool omk(vector<int> arr,int n,int idx,int dir){
    while(idx>=0 && idx<n){
        if(arr[idx]>0){
            arr[idx]--;
            dir*=-1;
            
        }
        idx+=dir;
    }
    for(auto &i:arr){
        if(i!=0){
            return 0;
        }
    }
    return 1;
}
class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int res=0,n=nums.size();
        for(int i=0;i<n;i++){
            if(nums[i]>0)continue ;
            res+=omk(nums,n,i,1);
            res+=omk(nums,n,i,-1);
        }
        return res;
    }
};",1454807659
Anupam Ghosh,anupam_ghosh,199,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n=nums.size();
        vector<int> arr(n+1,0);
        for(auto &i:queries){
            arr[i[0]]++;
            arr[i[1]+1]--;
        }
        int sum=0;
        for(int i=0;i<n;i++){
            sum+=arr[i];
            if(nums[i]>sum){
                return 0;
            }
        }
        return 1;
    }
};",1454809367
Anupam Ghosh,anupam_ghosh,199,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int l=0,h=queries.size(),m,n=nums.size();
        while(l<=h){
            m=(l+h)/2;
            vector<long long> arr(n+1,0);
            for(int i=0;i<m;i++){
                arr[queries[i][0]]+=queries[i][2];
                arr[queries[i][1]+1]-=queries[i][2];
            }
            long long sum=0;
            bool flag=1;
            for(int i=0;i<n;i++){
                sum+=arr[i];
                if(nums[i]>sum){
                    flag= 0;
                    break;
                }
            }
            if(flag){
                h=m-1;
            }
            else{
                l=m+1;
            }
        }
        if(l>queries.size()){
            return -1;
        }
        return l;
    }
};",1454820443
Hruday Pabbisetty,hrudaypabbisetty,200,3616,cpp,"class Solution {
    // Simulates the process from a starting position and direction
    bool simulate(vector<int>& nums, int start, bool goRight) {
        vector<int> temp = nums;  // Make a copy to not modify original
        int curr = start;
        
        while (curr >= 0 && curr < nums.size()) {
            if (temp[curr] == 0) {
                // Move in current direction
                curr = goRight ? curr + 1 : curr - 1;
            } else {
                // Decrement, reverse direction, and take a step
                temp[curr]--;
                goRight = !goRight;
                curr = goRight ? curr + 1 : curr - 1;
            }
        }
        
        // Check if all elements are zero
        for (int num : temp) {
            if (num != 0) return false;
        }
        return true;
    }
    
public:
    int countValidSelections(vector<int>& nums) {
        int n = nums.size();
        int validCount = 0;
        
        // Try all possible starting positions
        for (int i = 0; i < n; i++) {
            if (nums[i] != 0) continue;  // Must start at a zero
            
            // Try going left
            if (simulate(nums, i, false)) {
                validCount++;
            }
            
            // Try going right
            if (simulate(nums, i, true)) {
                validCount++;
            }
        }
        
        return validCount;
    }
};",1454820471
Hruday Pabbisetty,hrudaypabbisetty,200,3639,cpp,"class Solution {
public:
    int f(vector<int>& nums, vector<vector<int>>& queries, int idx)
    {
        int n = nums.size();
        vector<int>dp(n+1,0);
        for(int i=0;i<=idx;i++)
        {
            auto query = queries[i];
            int l = query[0];
            int r = query[1];
            int val = 1;
            dp[l]-=val;
            dp[r+1]+=val;
        }
        
        for(int i=1;i<n;i++)
        {
            dp[i]+=dp[i-1];
        }
        for(int i=0;i<n;i++)
        {
            if(dp[i] + nums[i] > 0)
            {
                return false;
            }
        }
        return true;
    }
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        if(f(nums, queries, queries.size()-1))
        {
            return true;
        }
        return false;
    }
};",1454816296
Hruday Pabbisetty,hrudaypabbisetty,200,3643,cpp,"class Solution {
public:
    int f(vector<int>& nums, vector<vector<int>>& queries, int idx)
    {
        int n = nums.size();
        vector<int>dp(n+1,0);
        for(int i=0;i<=idx;i++)
        {
            auto query = queries[i];
            int l = query[0];
            int r = query[1];
            int val = query[2];
            dp[l]-=val;
            dp[r+1]+=val;
        }
        
        for(int i=1;i<n;i++)
        {
            dp[i]+=dp[i-1];
        }
        for(int i=0;i<n;i++)
        {
            if(dp[i] + nums[i] > 0)
            {
                return false;
            }
        }
        return true;
    }
    bool allZero(vector<int>&v)
    {
        for(auto val:v)
        {
            if(val)
            {
                return false;
            }
        }
        return true;
    }
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        int ans = -2;
        int l = 0, r = queries.size()-1;
        if(allZero(nums))
        {
            return 0;
        }
        while(l<=r)
        {
            int mid = (l+r)/2;
            if(f(nums, queries, mid))
            {
                ans = mid;
                r = mid - 1;
            }
            else
            {
                l =  mid + 1;
            }
        }
        return ans+1;
    }
};",1454813081
Puneet Sheokand,Puneet7373,202,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& v) {
        int n = v.size();
        int count = 0;
        auto ok = [&](int start, int d) -> bool {
            vector<int> temp = v; 
            int curr = start;
            int dir = d;

            while (curr >= 0 && curr < n) {
                if (temp[curr] == 0) {
                    curr += dir;
                } else if (temp[curr] > 0) {
                    temp[curr]--; 
                    dir = -dir; 
                    curr += dir;
                }
            }
            return all_of(temp.begin(), temp.end(), [](int x) { return x == 0; });
        };

        for (int i = 0; i < n; i++) {
            if (v[i] == 0) {
                if (ok(i, 1)) count++; 
                if (ok(i, -1)) count++; 
            }
        }

        return count;
    }
};",1454820677
Puneet Sheokand,Puneet7373,202,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& v, vector<vector<int>>& q) {
        int n = v.size();
        vector<int> pref(n+1);
        for(auto x:q){
            pref[x[0]]++;
            pref[x[1]+1]--;
        }
        for(int i=1;i<=n;i++){
            pref[i] += pref[i-1];
        }
        for(int i=0;i<n;i++){
            if(v[i] > pref[i]){
                return 0;
            }
        }
        return 1;
    }
};",1454808369
Puneet Sheokand,Puneet7373,202,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& v, vector<vector<int>>& q) {
        int n = v.size();
        int l = 0, r= q.size()-1;
        int ans = -1;
        int z = count(v.begin(),v.end(),0);
        if(z == n){
            return 0;
        }
        while(l <= r){
            int mid = l + (r-l)/2;
            vector<long long int> pref(n+1);
            for(int i=0;i<=mid;i++){
                pref[q[i][0]]+=q[i][2];
                pref[q[i][1]+1]-=q[i][2];
            }
            for(int i=1;i<=n;i++){
                pref[i] += pref[i-1];
            }
            bool ok  = 1;
            for(int i=0;i<n;i++){
                if(v[i] > pref[i]){
                    ok = 0;
                    break;
                }
            }
            if(ok){
                r = mid-1;
                ans = mid+1;
            }else{
                l = mid+1;
            }
        }
        return ans;
    }
};",1454815519
Yi Yao,yaoyi92,203,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int sum = 0;
        int presum = 0;
        int ret = 0;
        for (int num: nums) sum += num;
        for (int num: nums) {
            presum += num;
            if (num == 0) {
                if (presum * 2 == sum) ret += 2;
                if (presum * 2 == sum + 1) ret += 1;
                if (presum * 2 == sum - 1) ret += 1;  
            }

        }
        return ret;
        
    }
};",1454810732
Yi Yao,yaoyi92,203,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        vector<int> diff(n+1, 0);
        for (vector<int>& query: queries) {
            int l = query[0];
            int r = query[1];
            diff[l] -= 1;
            diff[r+1] += 1;
        }
        int diff_now = 0;
        for (int i = 0; i < n; i++) {
            diff_now += diff[i];
            nums[i] += diff_now;
            if (nums[i] > 0) return false;
            //cout << nums[i] << "" "";
        }
        //cout << endl;
        return true;
        
    }
};",1454817629
Yi Yao,yaoyi92,203,3643,cpp,"class Solution {
    bool isZeroArray(vector<int> nums, vector<vector<int>>& queries, int k) {
        int n = nums.size();
        vector<int> diff(n+1, 0);
        for (int i = 0; i < k; i++) {
            vector<int>& query = queries[i];
            int l = query[0];
            int r = query[1];
            int val = query[2];
            diff[l] -= val;
            diff[r+1] += val;
        }
        int diff_now = 0;
        for (int i = 0; i < n; i++) {
            diff_now += diff[i];
            nums[i] += diff_now;
            if (nums[i] > 0) return false;
        }
        return true;
        
    }
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n_q = queries.size();
        if (!isZeroArray(nums, queries, n_q)) return -1;
        int low = 0;
        int high = n_q;
        while (low < high) {
            int mid = (high - low) / 2 + low;
            if (isZeroArray(nums, queries, mid)) {
                high = mid;
            } else {
                low = mid + 1;
            }
        }
        //cout << low << "" "" << high << endl;
        return low;
        
    }
};",1454827739
Conrad_123,Conrad_123,204,3616,cpp,"class Solution {
public:
    int countValidSelections(std::vector<int>& nums) {

        int result = 0;
        int left_sum = 0;
        int right_sum = std::accumulate(nums.begin(), nums.end(), 0);
        
        for(int i = 0; i < nums.size(); i++){
            
            left_sum += nums[i];
            right_sum -= nums[i];

            if(nums[i] == 0 && left_sum == right_sum){
                result += 2;
            }else if(nums[i] == 0 && std::abs(left_sum - right_sum) == 1){
                result++;
            }
            
        }

        return result;
    }
};",1454808517
Conrad_123,Conrad_123,204,3639,cpp,"class Solution {
public:
    bool isZeroArray(std::vector<int>& nums, std::vector<std::vector<int>>& queries) {

        std::vector<int> delta(nums.size()+1, 0);

        for(int i = 0; i < queries.size(); i++){
            delta[queries[i][0]]++;
            delta[queries[i][1]+1]--;
        }

        int current = 0;
        for(int i = 0; i < nums.size(); i++){

            current += delta[i];
            if(nums[i] > current) return false;
        }

        return true;
    }
};",1454812600
Conrad_123,Conrad_123,204,3643,cpp,"class Solution {
public:

    bool Is_Possible(std::vector<int>& nums, std::vector<std::vector<int>>& queries, int k){
        std::vector<int> delta(nums.size()+1, 0);

        for(int i = 0; i < queries.size() && i < k; i++){
            delta[queries[i][0]] += queries[i][2];
            delta[queries[i][1]+1] -= queries[i][2];
        }

        int current = 0;
        for(int i = 0; i < nums.size(); i++){

            current += delta[i];
            if(nums[i] > current) return false;
        }

        return true;
    }

    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {

        long long sum = std::accumulate(nums.begin(), nums.end(), 0LL);
        if(sum == 0) return 0;
        
        int low = 1;
        int high = queries.size()+1;
    
        while(low < high){

            int mid = (low + high)/2;

            if(Is_Possible(nums, queries, mid)){
                high = mid;
            }else{
                low = mid+1;
            }
        }


        return (high > queries.size()) ? -1 : high;
    }
};",1454820772
jqdai0815,jqdai0815,205,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        def sim(dx, start):
            n = nums.copy()
            curr = start
            dir = dx
            while curr >= 0 and curr < len(n):
                if n[curr] == 0:
                    curr += dir
                elif n[curr] > 0:
                    n[curr] -= 1
                    dir = -dir
                    curr += dir
            return all(y == 0 for y in n)
        def sim2(start):
            if nums[start] != 0:
                return False
            return int(sim(1, start)) + int(sim(-1, start))
        return sum(sim2(i) for i in range(len(nums)))",1454809125
jqdai0815,jqdai0815,205,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        maxapply = [0] * (len(nums) + 1)
        for s, e in queries:
            maxapply[s] += 1
            maxapply[e + 1] -= 1
        maxapply = list(accumulate(maxapply))
        for a, b in zip(nums, maxapply):
            if a > b:
                return False
        return True",1454814309
jqdai0815,jqdai0815,205,3643,python3,"class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        def can(k):
            maxapply = [0] * (len(nums) + 1)
            for ix in range(k):
                s, e, d = queries[ix]
                maxapply[s] += d
                maxapply[e + 1] -= d
            maxapply = list(accumulate(maxapply))
            for a, b in zip(nums, maxapply):
                if a > b:
                    return False
            return True
        lo = 0
        hi = len(queries)
        ans = -1
        while lo <= hi:
            mid = (lo + hi) // 2
            if can(mid):
                ans = mid
                hi = mid - 1
            else:
                lo = mid + 1
        return ans",1454820844
imglad,imglad,206,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int res = 0, n = nums.size();
        for (int i = 0; i < n; i++) {
            if (nums[i]) continue;
            if (helper(nums, i, 1)) res++;
            if (helper(nums, i, -1)) res++;
        }
        return res;
    }

    bool helper(vector<int> nums, int idx, int dir) {
        int n = nums.size();
        while (idx >= 0 && idx < n) {
            if (nums[idx] > 0) {
                nums[idx]--;
                dir = dir == 1 ? -1 : 1;
            }
            idx += dir;
        }
        for (auto x : nums) {
            if (x) return false;
        }
        return true;
    }
};",1454808901
imglad,imglad,206,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        vector<int> b(n + 1);
        for (auto q : queries) {
            int l = q[0], r = q[1];
            b[l]++;
            b[r + 1]--;
        }
        int cur = 0;
        for (int i = 0; i < n; i++) {
            cur += b[i];
            if (cur < nums[i]) return false; 
        }
        return true;
    }
};",1454821398
imglad,imglad,206,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int l = 0, r = queries.size();
        while (l < r) {
            int mid = l + r >> 1;
            if (check(nums, mid, queries)) r = mid;
            else l = mid + 1;
        } 
        return check(nums, l, queries) ? l : -1;
    }

    bool check(vector<int> nums, int mid, vector<vector<int>>& queries) {
        int n = nums.size();
        vector<int> b(n + 1);
        for (int i = 0; i < mid; i++) {
            int l = queries[i][0], r = queries[i][1], val = queries[i][2];
            b[l] += val;
            b[r + 1] -= val;
        }
        int cur = 0;
        for (int i = 0; i < n; i++) {
            cur += b[i];
            if (cur < nums[i]) return false;
        }
        return true;
    }
};",1454827963
LeetCoding_Pro,LeetCoding_Pro,207,3616,java,"class Solution
{
    public int countValidSelections(int[] as)
    {
        int count = 0;
        for (int i = 0; i < as.length; i++)
        {
            if (as[i] == 0)
            {
                if (helper(as.clone(), i, -1))
                {
                    count++;
                }
                if (helper(as.clone(), i, 1))
                {
                    count++;
                }
            }
        }
        return count;
    }
    
    private boolean helper(int[] as, int idx, int dir)
    {
        while (idx >= 0 && idx < as.length)
        {
            if (as[idx] == 0)
            {
                idx += dir;
            }
            else
            {
                as[idx]--;
                dir *= -1;
                idx += dir;
            }
        }
        for (int a : as)
        {
            if (a != 0)
            {
                return false;
            }
        }
        return true;
    }
}",1454810974
LeetCoding_Pro,LeetCoding_Pro,207,3639,java,"class Solution
{
    public boolean isZeroArray(int[] as, int[][] qs)
    {
        int[] table = new int[as.length + 1];
        for (int[] q : qs)
        {
            int l = q[0];
            int r = q[1];
            table[l]++;
            table[r + 1]--;
        }
        long curr = 0L;
        for (int i = 0; i < as.length; i++)
        {
            curr += table[i];
            if (curr < as[i])
            {
                return false;
            }
        }
        return true;
    }
}",1454818571
LeetCoding_Pro,LeetCoding_Pro,207,3643,java,"class Solution
{
    public int minZeroArray(int[] as, int[][] qs)
    {
        if (!isZeroArray(as, qs, qs.length))
        {
            return -1;
        }
        int left = 0;
        int right = qs.length;
        while (left <= right)
        {
            int mid = left + (right - left) / 2;
            if (isZeroArray(as, qs, mid))
            {
                right = mid - 1;
            }
            else
            {
                left = mid + 1;
            }
        }
        return left;
    }
    
    public boolean isZeroArray(int[] as, int[][] qs, int leng)
    {
        long[] table = new long[as.length + 1];
        for (int i = 0; i < leng; i++)
        {
            int[] q = qs[i];
            int l = q[0];
            int r = q[1];
            int v = q[2];
            table[l] += v;
            table[r + 1] -= v;
        }
        long curr = 0L;
        for (int i = 0; i < as.length; i++)
        {
            curr += table[i];
            if (curr < as[i])
            {
                return false;
            }
        }
        return true;
    }
}",1454828073
Andrew H. Pometta,apometta,208,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        rsum = sum(nums)
        valids = 0
        lsum = 0

        for i in range(len(nums)):
            rsum -= nums[i]
            if nums[i] == 0 and abs(rsum - lsum) <= 1:
                valids += 2 - abs(rsum - lsum)
            lsum += nums[i]

        return valids",1454807641
Andrew H. Pometta,apometta,208,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        queries.sort()
        stops = []
        q = 0

        for i in range(len(nums)):
            while len(stops) > 0 and stops[0] < i:
                heappop(stops)
            while q < len(queries) and queries[q][0] == i:
                heappush(stops, queries[q][1])
                q += 1
            if nums[i] > len(stops):
                return False

        return True",1454811436
Andrew H. Pometta,apometta,208,3643,python3,"class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        n, QUERIES = len(nums), len(queries)
        starts, ends = [0] * (n + 1), [0] * (n + 1)
        q = curr_change = 0

        for i in range(n):
            curr_change += starts[i]
            
            while q < QUERIES and curr_change < nums[i]:
                l, r, v = queries[q]
                q += 1
                starts[l] += v
                ends[r] += v
                if l <= i and i <= r: curr_change += v
                    
            if curr_change < nums[i]: return -1
            curr_change -= ends[i]

        return q",1454828172
haohao,cchao,209,3616,python3,"class Solution:
    def countValidSelections(self, a: List[int]) -> int:
        s = sum(a)
        t = 0
        ans = 0
        for x in a:
            if x == 0:
                tt = s - t
                if t == tt:
                    ans += 2
                elif abs(t - tt) == 1:
                    ans += 1
            t += x
        return ans",1454809448
haohao,cchao,209,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& a, vector<vector<int>>& queries) {
        const int n = a.size();
        vector<int> s(n + 1);
        for (auto& q : queries) {
            s[q[0]]++;
            s[q[1]+1]--;
        }
        partial_sum(s.begin(), s.end(), s.begin());
        for (int i = 0; i < n; ++i) {
            if (a[i] > s[i]) return false;
        }
        return true;
    }
};",1454815620
haohao,cchao,209,3643,cpp,"class Solution {
    bool solve(const vector<int> &a, vector<vector<int>>& queries, int k) {
        const int n = a.size();
        vector<int64_t> s(n + 1);
        for (int i = 0; i < k; ++i) {
            auto& q = queries[i];
            s[q[0]] += q[2];
            s[q[1]+1] -= q[2];
        }
        partial_sum(s.begin(), s.end(), s.begin());
        for (int i = 0; i < n; ++i) {
            if (a[i] > s[i]) return false;
        }
        return true;
    }
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int l = 0, r = queries.size(), ans = -1;
        while (l <= r) {
            const int m = (l + r) / 2;
            if (solve(nums, queries, m)) {
                r = m - 1;
                ans = m;
            } else {
                l = m + 1;
            }
        }
        return ans;
    }
};",1454821303
EPinonsense,liuxiaolinfk,210,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int ans = 0;
        for (int i = 0; i < nums.size(); i++){
            if (nums[i] == 0){
                if (check(nums, i, true)) ans++;
                if (check(nums, i, false)) ans++;
            }
        }

        return ans;
    }

    bool  check(vector<int> nums, int curr, bool left){
        while(curr >= 0 and curr < nums.size()){
            if(nums[curr] == 0){
            if (left) curr--;
            else curr++;
            } else if (nums[curr] > 0){
            nums[curr]--;
            left = !left;
            if (left) curr--;
            else curr++;
            }
        }

        for (auto num : nums) {
            if(num != 0) return false;
        }

        return true;
    }
};",1454809974
EPinonsense,liuxiaolinfk,210,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        vector<int> diff(nums.size(), 0);

        for (auto q : queries){
            diff[q[0]]++;
            if (q[1] + 1 < nums.size()) diff[q[1]+1]--;
        }

        vector<int> prefix(diff.size(), 0);
        prefix[0] = diff[0];
        for (int i = 1; i < diff.size(); i++) prefix[i] = prefix[i-1] + diff[i];

        for(int i = 0; i < diff.size(); i++){
            if(nums[i] > prefix[i]) return false;
        }

        return true;
    }
};",1454818866
EPinonsense,liuxiaolinfk,210,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int left = 0, right = queries.size() + 1;

        while(left < right){
            int mid = (left + right)/2;
            if (check(nums, queries, mid)) right = mid;
            else left = mid + 1;
        }
        if (left == queries.size() + 1) return -1;
        else return left;
    }

    bool check(const vector<int>& nums, const vector<vector<int>>& q, int k){
        vector<int> diff(nums.size(), 0);

        for (int i = 0; i < k; i++){
            diff[q[i][0]] += q[i][2];
            if (q[i][1] + 1 < nums.size()) diff[q[i][1]+1] -= q[i][2];
        }

        vector<int> prefix(diff.size(), 0);
        prefix[0] = diff[0];
        for (int i = 1; i < diff.size(); i++) prefix[i] = prefix[i-1] + diff[i];

        for(int i = 0; i < diff.size(); i++){
            if(nums[i] > prefix[i]) return false;
        }

        return true;
    }
};",1454828403
Shivam Shrivastava,shiv_314,211,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int ans = 0;
        int n = (int)nums.size();
        for(int i=0;i<n;i++){
            int lsum=0;
            int rsum=0;
            if(nums[i]==0){
                for(int j=0;j<i;j++)lsum+=nums[j];
                for(int j=i+1;j<n;j++)rsum+=nums[j];
                if(lsum==rsum)ans+=2;
                if(abs(lsum-rsum)==1)ans+=1;
            }
            
        }
        return ans;
    }
};",1454810892
Shivam Shrivastava,shiv_314,211,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = (int)nums.size();
        vector<int>ans(n);

        int m = (int)queries.size();
        for(int i=0;i<m;i++){
            ans[queries[i][0]]++;
            if(queries[i][1]+1<n){
                ans[queries[i][1]+1]--;
            }
        }
        for(int i=1;i<n;i++)ans[i]+=ans[i-1];
        bool yes=1;
        // for(auto it:ans){
        //     cout<<it<<"" "";
        // }
        // cout<<endl;
        for(int i=0;i<n;i++){
            if(nums[i] > ans[i])yes=0;
        }
        return yes;
    }
};",1454822598
Shivam Shrivastava,shiv_314,211,3643,cpp,"class Solution {
public:
    bool chk(int x,vector<int>& nums, vector<vector<int>>& queries){
        int n = (int)nums.size();
        vector<int>ans(n);

        
        for(int i=0;i<x;i++){
            ans[queries[i][0]]+=queries[i][2];
            if(queries[i][1]+1<n){
                ans[queries[i][1]+1]-=queries[i][2];
            }
        }
        for(int i=1;i<n;i++)ans[i]+=ans[i-1];
        bool yes=1;

        for(int i=0;i<n;i++){
            if(nums[i] > ans[i])yes=0;
        }
        return yes;
    }
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int ans = -1;
        int m = (int)queries.size();
        int lo=0;int hi=m;
        while(lo<=hi){
            int mid = (lo+hi)/2;
            if(chk(mid,nums,queries)){
                ans = mid;
                hi=mid-1;
            }else{
                lo=mid+1;
            }
        }
        return ans;
    }
};",1454828470
Agnibha Chakraborty,zanj0,212,3616,cpp,"/*
	JAI JAGANNATH!
*/
//@Author : zanj0

#include<bits/stdc++.h>
using namespace std;

#define ff              first
#define ss              second
#define pb              push_back
#define MOD             1000000007
#define inf             1e18

typedef long long int lli;


class Solution {
public:
	bool Ok(vector<int> nums, int idx, int dir) {
		int n = nums.size();
        // cout << idx << "" -- "" << endl;
		while (idx >= 0 && idx < n) {
            // cout << idx << "" "" << dir << "" "" << nums[idx] << endl;
			if (nums[idx] == 0) {
				idx += dir;
                continue;
			} else {
				nums[idx]--;
				dir = dir == 1 ? -1 : 1;
                idx += dir;
			}
            // for(auto& it : nums){
            //     cout << it << "" "";
            // }
            // cout << endl;
		}
		for (auto& it : nums) {
			if (it) return false;
		}
        // cout << idx << "" "" << dir << endl;
		return true;
	}
	int countValidSelections(vector<int>& nums) {
		int ret = 0;
        // cout << Ok(nums, 4, 1) << endl;
		for (int i = 0; i < nums.size(); i++) {
			// ret += Ok(nums, i, 1) + Ok(nums, i, -1);
            if(nums[i]) continue;
            if(Ok(nums, i, 1)){
                ret++;
                // cout << i << "" - "" << 1 << endl;
            }
            
            if(Ok(nums, i, -1)){
                ret++;
                // cout << i << "" - "" << -1 << endl;
            }
		}
		return ret;
	}
};


#ifdef LOCAL
int main() {
	freopen(""output.txt"", ""w"", stdout);
	cout << ""Compiled!"" << endl;
}
#endif",1454811383
Agnibha Chakraborty,zanj0,212,3639,cpp,"/*
	JAI JAGANNATH!
*/
//@Author : zanj0

#include<bits/stdc++.h>
using namespace std;

#define ff              first
#define ss              second
#define pb              push_back
#define MOD             1000000007
#define inf             1e18

typedef long long int lli;


class Solution {
public:
	bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
		int n = nums.size();
		vector<int> cnt(n);
		for (auto& it : queries) {
			cnt[it[0]]++;
			if (it[1] + 1 < n) cnt[it[1] + 1]--;
		}
		for (int i = 1; i < n; i++) {
			cnt[i] += cnt[i - 1];
		}
		for (int i = 0; i < n; i++) {
			if (nums[i] > cnt[i]) return false;
		}
		return true;
	}
};

#ifdef LOCAL
int main() {
	freopen(""output.txt"", ""w"", stdout);
	cout << ""Compiled!"" << endl;
}
#endif",1454813793
Agnibha Chakraborty,zanj0,212,3643,cpp,"/*
	JAI JAGANNATH!
*/
//@Author : zanj0

#include<bits/stdc++.h>
using namespace std;

#define ff              first
#define ss              second
#define pb              push_back
#define MOD             1000000007
#define inf             1e18

typedef long long int lli;


class Solution {
public:
	int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
		lli n = nums.size();
		lli ret = -1;
		lli q = queries.size();
		lli low = 0, high = q-1;
        bool all_zero = true;
    for(auto& it : nums){
        if(it) all_zero = false;
    }
        if(all_zero) return 0;
		while (low <= high) {
			lli mid = low + (high - low) / 2;
			vector<lli> cnt(n);
			for (lli i = 0; i <= mid; i++) {
				cnt[queries[i][0]] += queries[i].back();
				if (queries[i][1] + 1 < n)cnt[queries[i][1] + 1] -= queries[i].back();
			}
			bool ok = true;

			for (lli i = 1; i < n; i++) cnt[i] += cnt [i - 1];
            
			for (lli i = 0; i < n; i++) {
                // cout << i << "" "" << cnt[i] << "" "" << nums[i] << endl;
				if (cnt[i] < nums[i]) {
					ok = false;
					break;
				}
			}


			if (ok) {
				ret = mid + 1;
				high = mid - 1;
			} else low = mid + 1;

		}
		return ret;
	}
};

#ifdef LOCAL
int main() {
	freopen(""output.txt"", ""w"", stdout);
	cout << ""Compiled!"" << endl;
}
#endif",1454821421
Mayank Savaliya,MayankSavaliya,213,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int n=nums.size();
        vector<int> pre(n,0);
        for(int i=0;i<n;i++){
            pre[i]+=nums[i];
            if(i) pre[i]+=pre[i-1];
        }
        int ans=0,total=pre[n-1];
        for(int i=0;i<n;i++){
            if(nums[i]==0 && pre[i]==total-pre[i]) ans+=2;
            if(nums[i]==0 && abs(pre[i]-(total-pre[i]))==1) ans++;
        }
        return ans;
    }
};",1454807950
Mayank Savaliya,MayankSavaliya,213,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n=nums.size();
        vector<int> arr(n+2,0);
        for(auto it:queries){
            int st=it[0],end=it[1];
            arr[st]++,arr[end+1]--;
        }
        for(int i=1;i<n;i++){
            arr[i]+=arr[i-1];
        }
        for(int i=0;i<n;i++) if(arr[i]<nums[i]) return false;
        return true;
    }
};",1454810950
Mayank Savaliya,MayankSavaliya,213,3643,cpp,"class Solution {
public:
    static bool check(vector<int> &nums,int mid,vector<vector<int>>& queries){
            int n=nums.size();
            vector<int> arr(n+2,0);
            for(int i=0;i<mid;i++){
                int st=queries[i][0],end=queries[i][1],val=queries[i][2];
                arr[st]+=val,arr[end+1]-=val;
            }
            for(int i=1;i<n;i++){
                arr[i]+=arr[i-1];
            }
            for(int i=0;i<n;i++) if(arr[i]<nums[i]) return false;
            return true;
    }
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int sz=queries.size(),n=nums.size();
        bool f=1;
        for(int i=0;i<n;i++) if(nums[i]!=0) f=0;
        if(f) return 0;
        int lo=1,hi=sz;
        while(lo<hi){
            int mid=(lo+hi)/2;
            if(check(nums,mid,queries)) hi=mid;
            else lo=mid+1;
        }
        if(check(nums,lo,queries)) return lo;
        else return -1;
    }
};",1454821534
Only My Railgun,Quar,214,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        
        def validate(cur: int, delta: int) -> bool:
            xs = nums[:]
            while True:
                if cur < 0 or cur >= len(xs):
                    break                
                if xs[cur] == 0:                    
                    cur += delta
                elif xs[cur] > 0:
                    xs[cur] -= 1
                    delta = -delta
                    cur += delta
            return all(x == 0 for x in xs)
        
        
        ret = 0
        for i, x in enumerate(nums):
            if x == 0:
                ret += int(validate(i, 1)) + int(validate(i, -1))
        
        return ret
",1454813517
Only My Railgun,Quar,214,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        
        cap = [0] * (len(nums) + 1)
        
        for l, r in queries:
            cap[l] += 1
            cap[r + 1] -= 1
        
        cap = list(accumulate(cap))
        
        return all(x <= c for x, c in zip(nums, cap))
",1454817060
Only My Railgun,Quar,214,3643,python3,"class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        
        n = len(nums)
        
        # @cache
        def validate(k):
            cap = [0] * (n + 1)
            for l, r, v in queries[:k]:
                cap[l] += v
                cap[r + 1] -= v
            cap = list(accumulate(cap))
            # print(nums)
            # print(cap)
            ret = all(x <= c for x, c in zip(nums, cap))
            # print(f'validate({k}) = {ret}')
            return ret
        
        l, r = 0, len(queries)
        
        while l < r:
            c = (l + r) // 2
            if validate(c):
                r = c
            else:
                l = c + 1
        
        return r if validate(r) else -1
",1454828632
Yang,luyangg,215,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        x = nums.copy()
        n = len(x)
        ans = 0
        dirs = [-1, 1]
        for i in range(n):
            if x[i] == 0:
                for d in dirs:
                    nums = x.copy()
                    curr = i + d
                    while curr >= 0 and curr < n:
                        if nums[curr] == 0:
                            curr += d
                        elif nums[curr] > 0:
                            nums[curr] -= 1
                            d = -d
                            curr += d
                    ans += 1 if sum(nums) == 0 else 0
        return ans",1454810548
Yang,luyangg,215,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        n = len(nums)
        pref = [0]*n
        for l, r in queries:
            pref[l] += 1
            if r+1 < n:
                pref[r+1] -= 1
        curr = 0
        for i in range(n):
            curr += pref[i]
            if nums[i] > curr:
                return False
        return True",1454817069
Yang,luyangg,215,3643,python3,"class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        def check(x):
            pref = [0]*n
            for l, r, val in queries[:x]:
                pref[l] += val
                if r+1 < n:
                    pref[r+1] -= val
            curr = 0
            for i in range(n):
                curr += pref[i]
                if nums[i] > curr:
                    return False
            return True            
        n = len(nums)
        m = len(queries)
        l, r = 0, m
        while l < r:
            mid = (l+r)//2
            if check(mid):
                r = mid
            else:
                l = mid+1
        if check(l):
            return l
        else:
            return -1",1454828723
Lin,alexlin87,219,3616,java,"import java.util.*;

class Solution {
    public int countValidSelections(int[] a) {
        int ans = 0;
        int s = 0;
        for(int x : a) {
            s += x;
        }
        for(int i = 0; i < a.length; i++) {
            if(a[i] == 0) {
                int[] b = Arrays.copyOf(a, a.length);
                if(check(s, b, i, 1)) {
                    ans++;
                }
                b = Arrays.copyOf(a, a.length);
                if(check(s, b, i, -1)) {
                    ans++;
                }
            }
        }
        return ans;
    }
    private boolean check(int s, int[] b, int k, int d) {
        while(s > 0) {
            if(b[k] == 0) {
                k += d;
            }
            else {
                b[k]--;
                s--;
                d *= -1;
                k += d;
            }
            if(k < 0 || k >= b.length) {
                break;
            }
        }
        return s == 0;
    }
}",1454814862
Lin,alexlin87,219,3639,java,"import java.util.*;

class Solution {
    public boolean isZeroArray(int[] a, int[][] queries) {
        int n = a.length;
        int[] f = new int[n + 2];
        for(int[] q : queries) {
            f[q[0]]++;
            f[q[1] + 1]--;
        }
        for(int i = 1; i < f.length; i++) {
            f[i] += f[i - 1];
        }
        boolean ans = true;
        for(int i = 0; i < n; i++) {
            ans &= f[i] >= a[i];
        }
        return ans;
    }
}",1454821579
Lin,alexlin87,219,3643,java,"import java.util.*;

class Solution {
    public int minZeroArray(int[] a, int[][] queries) {
        int l = 0, r = queries.length;
        while(l < r - 1) {
            int m = (l + r) / 2;
            if(check(a, queries, m)) {
                r = m;
            }
            else {
                l = m + 1;
            }
        }
        if(check(a, queries, l)) {
            return l;
        } 
        else if(check(a, queries, r)) {
            return r;
        }
        return -1;
    }
    public boolean check(int[] a, int[][] queries, int k) {
        int n = a.length;
        int[] f = new int[n + 2];
        for(int i = 0; i < k; i++) {
            f[queries[i][0]] += queries[i][2];
            f[queries[i][1] + 1] -= queries[i][2];
        }
        for(int i = 1; i < f.length; i++) {
            f[i] += f[i - 1];
        }
        boolean ans = true;
        for(int i = 0; i < n; i++) {
            ans &= f[i] >= a[i];
        }
        return ans;
    }
}",1454828842
Mukul Jain,MukulJain98,220,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int n = nums.size(), res = 0;
        for (int i = 0; i < n; ++i) {
            if (nums[i] == 0) {
                for (int d : {-1, 1}) {
                    vector<int> temp = nums;
                    int curr = i;
                    int dir = d;

                    while (curr >= 0 && curr < n) {
                        if (temp[curr] == 0) {
                            curr += dir;
                        } else {
                            temp[curr]--;
                            dir = -dir;
                            curr += dir;
                        }
                    }

                    if (all_of(temp.begin(), temp.end(), [](int x) { return x == 0; })) {
                        res++;
                    }
                }
            }
        }

        return res;
    }
};
",1454807895
Mukul Jain,MukulJain98,220,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        vector<int> diff(n + 1, 0);

        for (const auto& q : queries) {
            int l = q[0], r = q[1];
            diff[l] -= 1;
            if (r + 1 < n) {
                diff[r + 1] += 1;
            }
        }

        int curr = 0;
        for (int i = 0; i < n; ++i) {
            curr += diff[i];
            nums[i] += curr;
            if (nums[i] > 0) return false;
        }

        return true;
    }
};
",1454814232
Mukul Jain,MukulJain98,220,3643,cpp,"class Solution {
public:
    bool verify(vector<int> nums, vector<int>& diff) {
        int curr = 0;
        for (int i = 0; i < nums.size(); ++i) {
            curr += diff[i];
            nums[i] += curr;
            if (nums[i] > 0) return false;
        }
        return true;
    }
    
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        int low = 0, high = queries.size();
        int answer = -1;

        while (low <= high) {
            int mid = low + (high - low) / 2;
            vector<int> diff(n + 1, 0);
            for (int i = 0; i < mid; ++i) {
                int l = queries[i][0], r = queries[i][1], val = queries[i][2];
                diff[l] -= val;
                if (r + 1 < n) {
                    diff[r + 1] += val;
                }
            }

            if (verify(nums, diff)) {
                answer = mid;
                high = mid - 1;
            } else {
                low = mid + 1;
            }
        }

        return answer;
    }
};
",1454828883
Haksell,Haksell,221,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        res = 0
        for i, n in enumerate(nums):
            if n == 0:
                a=sum(nums[:i])
                b=sum(nums[i+1:])
                if a==b: res += 2
                elif abs(a-b)==1: res += 1
        return res",1454806861
Haksell,Haksell,221,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        e=[0] * (len(nums) + 1)
        for l,r in queries:
            e[l] += 1
            e[r + 1] -= 1
        a = list(accumulate(e))
        # print(a, nums)
        return all(ai >= ni for ai, ni in zip(a, nums))",1454809627
Haksell,Haksell,221,3643,python3,"class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        def solve(nums, queries):
            e=[0] * (len(nums) + 1)
            for l,r,v in queries:
                e[l] += v
                e[r + 1] -= v
            a = list(accumulate(e))
            # print(queries, a)
            return all(ai >= ni for ai, ni in zip(a, nums))

        if all(n==0 for n in nums): return 0
        if not solve(nums, queries): return -1
        lo=0
        hi=len(queries)
        while lo<hi:
            mi=lo+hi>>1
            # print(lo,hi,mi, solve(nums, queries[:mi]))
            if solve(nums, queries[:mi]):
                hi=mi
            else:
                lo=mi+1
        return lo",1454829084
Harttle,harttle,222,3616,javascript,"/**
 * @param {number[]} nums
 * @return {number}
 */
var countValidSelections = function(nums) {
    const N = nums.length
    let ans = 0
    for (let i = 0; i < N; i++) {
        if (nums[i] !== 0) continue
        if (check(i, 1, [...nums])) ans++
        if (check(i, -1, [...nums])) ans++
    }
    return ans
    function check(i, dir, nums) {
        while (i >= 0 && i < N) {
            if (nums[i] === 0) i += dir
            else {
                --nums[i]
                dir = -dir
                i += dir
            }
        }
        return !nums.some(x => x !== 0)
    }
};",1454808989
Harttle,harttle,222,3639,javascript,"/**
 * @param {number[]} nums
 * @param {number[][]} queries
 * @return {boolean}
 */
var isZeroArray = function(nums, queries) {
    const N = nums.length
    const diffs = Array(N + 1).fill(0)
    for (const [l, r] of queries) {
        diffs[l]++
        diffs[r + 1]--
    }
    for (let i = 0, acc = 0; i < N; i++) {
        acc += diffs[i]
        if (nums[i] > acc) return false
    }
    return true
};",1454813389
Harttle,harttle,222,3643,javascript,"/**
 * @param {number[]} nums
 * @param {number[][]} queries
 * @return {number}
 */
var minZeroArray = function(nums, queries) {
    const N = nums.length
    const M = queries.length
    let lo = 0, hi = M
    while (lo <= hi) {
        const mi = Math.floor((lo + hi) / 2)
        if (check(mi)) { hi = mi - 1; }
        else { lo = mi + 1;}
    }
    return lo === M + 1 ? -1 : lo
    function check(K) {
        const diffs = Array(N + 1).fill(0)
        for (const [l, r, v] of queries.slice(0, K)) {
            diffs[l] += v
            diffs[r + 1] -= v
        }
        for (let i = 0, acc = 0; i < N; i++) {
            acc += diffs[i]
            if (nums[i] > acc) return false
        }
        return true
    }
};",1454822153
Ivan Vasilenko,8symbols,223,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        initial_zeros = [i for i, num in enumerate(nums) if num == 0]

        count = 0

        for initial_index in initial_zeros:
            for direction in [1, -1]:
                index = initial_index
                zeros = len(initial_zeros)
                tmp_nums = nums[:]

                while index != -1 and index != len(nums):
                    if tmp_nums[index]:
                        tmp_nums[index] -= 1
                        if tmp_nums[index] == 0:
                            zeros += 1
                        direction *= -1
                    index += direction

                if zeros == len(nums):
                    count += 1

        return count",1454815981
Ivan Vasilenko,8symbols,223,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        deltas = [0] * (len(nums) + 1)
        for l, r in queries:
            deltas[l] += 1
            deltas[r + 1] -= 1
            
        current = 0
        for i in range(len(nums)):
            current += deltas[i]
            if current < nums[i]:
                return False
            
        return True",1454821372
Ivan Vasilenko,8symbols,223,3643,python3,"class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        def is_possible(k):
            deltas = [0] * (len(nums) + 1)
            for i in range(k):
                l, r, val = queries[i]
                deltas[l] += val
                deltas[r + 1] -= val

            current = 0
            for i in range(len(nums)):
                current += deltas[i]
                if current < nums[i]:
                    return False

            return True

        if not is_possible(len(queries)):
            return -1

        left, right = 0, len(queries)
        while left != right:
            middle = (left + right) // 2
            if not is_possible(middle):
                left = middle + 1
            else:
                right = middle

        return left",1454829234
w0w0,w0w0,225,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        n = len(nums)

        def helper(i, d):
            arr = nums.copy()
            cur = i

            while 0 <= cur < n:
                if arr[cur]:
                    arr[cur] -= 1
                    d *= -1
                cur += d

            return sum(arr) == 0

        ans = 0
        for i in range(n):
            if nums[i] == 0:
                ans += helper(i, 1) + helper(i, -1)

        return ans",1454808790
w0w0,w0w0,225,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        n = len(nums)

        diff = [0] * (n + 1)
        for l, r in queries:
            diff[l] += 1
            diff[r + 1] -= 1

        cur = 0
        arr = []
        for x in diff:
            cur += x
            arr.append(cur)

        for x, y in zip(arr, nums):
            if x < y:
                return False

        return True",1454812981
w0w0,w0w0,225,3643,python3,"class SegmentTree:
    def __init__(self, l, r):
        self.l = l
        self.r = r

        self.info = None
        self.assign = None
        self.add = 0

        self.left = None
        self.right = None

    @staticmethod
    def build(nums, l=None, r=None):
        if l is None:
            l = 0
        if r is None:
            r = len(nums) - 1

        node = SegmentTree(l, r)
        if l < r:
            m = (l + r) // 2
            node.left = SegmentTree.build(nums, l, m)
            node.right = SegmentTree.build(nums, m + 1, r)
            node.info = max(node.left.info, node.right.info)
        else:
            node.info = nums[l]
        return node

    def update(self):
        if self.add:
            self.info += self.add
            if self.left:
                self.left.add += self.add
            if self.right:
                self.right.add += self.add
            self.add = 0

    def rangeAdd(self, l, r, val):
        self.update()

        if self.l == l and self.r == r:
            self.info += val
            if self.left:
                self.left.update()
                self.left.add += val
            if self.right:
                self.right.update()
                self.right.add += val
        else:
            m = (self.l + self.r) // 2
            if l > m:
                self.left.update()
                self.right.rangeAdd(l, r, val)
            elif r <= m:
                self.left.rangeAdd(l, r, val)
                self.right.update()
            else:
                self.left.rangeAdd(l, m, val)
                self.right.rangeAdd(m + 1, r, val)
            self.info = max(self.left.info, self.right.info)

    def query(self, l, r):
        self.update()

        if self.l == l and self.r == r:
            return self.info
        m = (self.l + self.r) // 2
        if l > m:
            return self.right.query(l, r)
        if r <= m:
            return self.left.query(l, r)
        return max(self.left.query(l, m), self.right.query(m + 1, r))

class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        n = len(nums)
        root = SegmentTree.build(nums)
        if root.query(0, n - 1) <= 0:
            return 0

        for i, (l, r, v) in enumerate(queries):
            root.rangeAdd(l, r, -1 * v)
            if root.query(0, n - 1) <= 0:
                return i + 1

        return -1",1454822242
Sanjay Grover,SanjayGrover,226,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:

        def is_valid(start, direction):
            n = len(nums)
            temp_nums = nums[:]
            curr = start
            while 0 <= curr < n:
                if temp_nums[curr] == 0:
                    curr += direction
                else:
                    temp_nums[curr] -= 1
                    direction *= -1
                    curr += direction
            return all(x == 0 for x in temp_nums)
        
        count = 0
        for i in range(len(nums)):
            if nums[i] == 0:
                if is_valid(i, 1):
                    count += 1
                if is_valid(i, -1):
                    count += 1
        
        return count",1454814451
Sanjay Grover,SanjayGrover,226,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:

        n = len(nums)
        capacity = [0] * (n + 1)
    
        for li, ri in queries:
            capacity[li] += 1
            if ri + 1 < n:
                capacity[ri + 1] -= 1
    
        for i in range(1, n):
            capacity[i] += capacity[i - 1]
    
        for i in range(n):
            if nums[i] > capacity[i]:
                return False
    
        return True",1454821343
Sanjay Grover,SanjayGrover,226,3643,python3,"class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:

        n = len(nums)
    
        def helper(k):
            diff = [0] * (n + 1)
    
            for i in range(k):
                li, ri, vali = queries[i]
                diff[li] += vali
                if ri + 1 < n:
                    diff[ri + 1] -= vali
    
            decrement = [0] * n
            curr = 0
            for i in range(n):
                curr += diff[i]
                decrement[i] = curr
    
            for i in range(n):
                if nums[i] > decrement[i]:
                    return False
    
            return True
    
        left, right = 0, len(queries)
        result = -1
        while left <= right:
            mid = (left + right) // 2
            if helper(mid):
                result = mid
                right = mid - 1
            else:
                left = mid + 1
    
        return result",1454829341
Shashwat Tripathi,Fkaiser7,228,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int s=0;
        for(int i=0;i<nums.size();i++){
            s+=nums[i];
        }
        int s1=0;
        int c=0;
        for(int i=0;i<nums.size();i++){
            if(nums[i]==0&&s-s1==s1){
                c+=2;
            }
            if(nums[i]==0&&(abs(2*s1-s)==1||abs(s-2*s1)==1)){
                c++;
            }
            s1+=nums[i];
        }
        return c;
    }
};",1454812328
Shashwat Tripathi,Fkaiser7,228,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n=nums.size();
        vector<int>v(n+1);
        for(int i=0;i<queries.size();i++){
            v[queries[i][0]]++;
            v[queries[i][1]+1]--;
        }
        int s=0;
        for(int i=0;i<n;i++){
            s+=v[i];
            if(s<nums[i]){
                return false;
            }
        }
        return true;
    }
};",1454816839
Shashwat Tripathi,Fkaiser7,228,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int lo=0,hi=queries.size();
        int ans=-1;
        int n=nums.size();
        while(lo<=hi){
            int mid=(lo+hi)/2;
            vector<int>v(n+1);
            for(int i=0;i<mid;i++){
                v[queries[i][0]]+=queries[i][2];
                v[queries[i][1]+1]-=queries[i][2];
            }
            int c=0;
            int s=0;
            for(int i=0;i<n;i++){
                s+=v[i];
                if(s<nums[i]){
                    c++;
                    break;
                }
            }
            if(c==0){
                ans=mid;
                hi=mid-1;
            }
            else{
                lo=mid+1;
            }
        }
        return ans;
    }
};",1454822338
Nguyễn Thảo,nguyenquocthao00,229,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        s=sum(nums)
        res,cur=0,0
        for v in nums:
            cur+=v
            if v==0:
                if 2*cur==s: res+=2
                elif abs(2*cur-s)==1: res+=1
        return res

            

        ",1454814284
Nguyễn Thảo,nguyenquocthao00,229,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        n=len(nums)
        prefix=[0]*(n+1)
        for i,j in queries:
            prefix[i]+=1
            prefix[j+1]-=1
        cur=0
        for i in range(n):
            cur+=prefix[i]
            if cur<nums[i]: return False
        return True
        ",1454817779
Nguyễn Thảo,nguyenquocthao00,229,3643,python3,"class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        n=len(nums)
        def feasible(k):
            prefix=[0]*(n+1)
            for i,j,val in queries[:k]:
                prefix[i]+=val
                prefix[j+1]-=val
            cur=0
            for i in range(n):
                cur+=prefix[i]
                if cur<nums[i]: return False
            return True
        l,r,res = 0,len(queries),-1
        while l<=r:
            mid=(l+r)//2
            if feasible(mid): res, r = mid,mid-1
            else: l=mid+1
        return res
        
        ",1454822455
Rajat,log1,230,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int n=nums.size();
        int ans=0;
        for(int i=0;i<n;++i)
        {
            if(nums[i]==0)
            {
                for(auto& it:{-1,1})
                {
                    vector<int>tmp=nums;
                    int curr=i,dir=it,ok=1;
                    while(curr>=0 && curr<n)
                    {
                        if(tmp[curr]==0)curr+=dir;
                        else if(tmp[curr]>=1)
                        {
                            //inc->then->exc(Repeat)
                            tmp[curr]--,dir=-dir,curr+=dir;
                        }
                        else break;
                    }
                    for(auto &it:tmp)
                    {
                        if(it!=0)
                        {
                            ok=0;
                            break;
                        }
                    }
                    if(ok)ans++;
                }
            }
        }
        return ans;
    }
};",1454822490
Rajat,log1,230,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n=nums.size(),m=queries.size();
        vector<int>arr(n+1,0);
        for(int i=0;i<m;++i)
        {
            int l=queries[i][0],r=queries[i][1],val=queries[i][2];
            arr[l]++;
            if(r+1<=n)arr[r+1]--;
        }
        for(int i=1;i<n;++i)arr[i]+=arr[i-1];
        for(int i=0;i<n;++i)if(arr[i]<nums[i])return false;
        return true;
    }
};",1454816184
Rajat,log1,230,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n=nums.size(),m=queries.size(),l=0,r=m,res=-1;
        auto check=[&](int k)->bool
        {
            vector<long long>arr(n+1,0);
            for(int i=0;i<k;++i)
            {
                int l=queries[i][0],r=queries[i][1],val=queries[i][2];
                arr[l]+=val;
                if(r+1<=n)arr[r+1]-=val;
            }
            long long ans=0;
            for(int i=0;i<n;++i)
            {
                ans+=arr[i];
                if(ans<nums[i])return false;
            }
            return true;
        };
        while(l<=r)
        {
            int mid=l+(r-l)/2;
            if(check(mid))res=mid,r=mid-1;else l=mid+1;
        }
        return res;
    }
};",1454812444
Nutty Professor,varkatkl,234,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        N = len(nums)
        
        def simulate(pos, dir):
            arr = nums[:]
            total = sum(arr)
            if arr[pos] != 0:
                return 0
            while 0 <= pos < N:
                if arr[pos] == 0:
                    pos += dir
                else:
                    arr[pos] -= 1
                    total -= 1
                    if total == 0:
                        break
                    dir = -dir
                    pos += dir
            return int(total == 0)

        return sum(simulate(i, 1) + simulate(i, -1) for i in range(N))
",1454815954
Nutty Professor,varkatkl,234,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        N = len(nums)
        incr = [0] * (N + 1)
        for l, r in queries:
            incr[l] += 1
            incr[r + 1] -= 1

        intervals = 0
        for i in range(N):
            intervals += incr[i]
            if intervals < nums[i]:
                return False
        return True
",1454821658
Nutty Professor,varkatkl,234,3643,python3,"class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        N = len(nums)

        incr = [0] * (N + 1)
        def check(k):
            for i in range(N + 1):
                incr[i] = 0
            for i in range(k):
                l, r, v = queries[i]
                incr[l] += v
                incr[r + 1] -= v

            total = 0
            for i in range(N):
                total += incr[i]
                if total < nums[i]:
                    return False
            return True

        if not check(len(queries)):
            return -1
        if check(0):
            return 0
        lo, hi = 0, len(queries)
        while hi - lo > 1:
            mid = (lo + hi) // 2
            if check(mid):
                hi = mid
            else:
                lo = mid
        return hi
",1454829731
Meng-Hsuan Wu,meng-hsuan,235,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        n = len(nums)
        ans = 0
        
        ttl = sum(nums)
        l_ttl = 0
        
        for i in range(n):
            l_ttl += nums[i]
            r_ttl = ttl - l_ttl
            if nums[i] == 0:
                if (a := abs(l_ttl - r_ttl)) == 0:
                    ans += 2
                elif a == 1:
                    ans += 1
        
        return ans
    ",1454810708
Meng-Hsuan Wu,meng-hsuan,235,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        n = len(nums)
        delta = [0] * (n + 1)
        
        for l, r in queries:
            delta[l] += 1
            delta[r + 1] -= 1
            
        for i in range(1, n + 1):
            delta[i] += delta[i - 1]
        
        return all(nums[i] <= delta[i] for i in range(n))
    ",1454818377
Meng-Hsuan Wu,meng-hsuan,235,3643,python3,"class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        n = len(nums)
        nq = len(queries)
        
        lb = 0
        ub = nq + 1
        
        def check(used: int) -> bool:
            delta = [0] * (n + 1)

            for l, r, v in queries[:used]:
                delta[l] += v
                delta[r + 1] -= v

            for i in range(1, n + 1):
                delta[i] += delta[i - 1]
            #print(used, delta)
            
            return all(nums[i] <= delta[i] for i in range(n))
        
        while lb < ub:
            mid = lb + ((ub - lb) >> 1)
            if check(mid):
                ub = mid
            else:
                lb = mid + 1
        #print()
        
        return lb if lb <= nq else -1
    ",1454829732
2499370956,2499370956,236,3616,java,"class Solution {
    public int countValidSelections(int[] nums) {
        int out = 0;
        for (int start = 0; start < nums.length; start++) {
            if (nums[start] != 0) {
                continue;
            }
            for (int direction : new int[] {-1, +1}) {
                int[] a = Arrays.copyOf(nums, nums.length);
                if (valid(a, start, direction)) {
                    out++;
                }
            }
        }
        return out;
    }

    private boolean valid(int[] nums, int start, int direction) {
        int current = start + direction;
        while (current >= 0 && current < nums.length) {
            if (nums[current] == 0) {
                current += direction;
            } else {
                nums[current]--;
                direction = -direction;
                current += direction;
            }
        }

        for (int i : nums) {
            if (i != 0) {
                return false;
            }
        }
        return true;
    }
}",1454811362
2499370956,2499370956,236,3639,java,"class Solution {
    public boolean isZeroArray(int[] nums, int[][] queries) {
        int[][] queries2 = new int[queries.length][3];
        for (int i = 0; i < queries.length; i++) {
            queries2[i][0] = queries[i][0];
            queries2[i][1] = queries[i][1];
            queries2[i][2] = 1;
        }
        return minZeroArray(nums, queries2) != -1;
    }

    public int minZeroArray(int[] nums, int[][] queries) {
        if (!valid(nums, queries, queries.length)) {
            return -1;
        }

        int low = 0;
        int high = queries.length;
        while (low < high) {
            int mid = (low + high) / 2;
            if (valid(nums, queries, mid)) {
                high = mid;
            } else {
                low = mid + 1;
            }
        }
        return low;
    }

    private boolean valid(int[] nums, int[][] queries, int k) {
        int n = nums.length;
        long[] diff = new long[n + 1];
        for (int i = 0; i < k && i < queries.length; i++) {
            int[] q = queries[i];
            int s = q[0];
            int e = q[1];
            int v = q[2];
            diff[s] += v;
            diff[e + 1] -= v;
        }
        long[] sum = new long[n];
        sum[0] = diff[0];
        for (int i = 1; i < n; i++) {
            sum[i] = sum[i - 1] + diff[i];
        }

        for (int i = 0; i < n; i++) {
            if (sum[i] < nums[i]) {
                return false;
            }
        }
        return true;
    }
}",1454829761
2499370956,2499370956,236,3643,java,"class Solution {
    public int minZeroArray(int[] nums, int[][] queries) {
        if (!valid(nums, queries, queries.length)) {
            return -1;
        }

        int low = 0;
        int high = queries.length;
        while (low < high) {
            int mid = (low + high) / 2;
            if (valid(nums, queries, mid)) {
                high = mid;
            } else {
                low = mid + 1;
            }
        }
        return low;
    }

    private boolean valid(int[] nums, int[][] queries, int k) {
        int n = nums.length;
        long[] diff = new long[n + 1];
        for (int i = 0; i < k && i < queries.length; i++) {
            int[] q = queries[i];
            int s = q[0];
            int e = q[1];
            int v = q[2];
            diff[s] += v;
            diff[e + 1] -= v;
        }
        long[] sum = new long[n];
        sum[0] = diff[0];
        for (int i = 1; i < n; i++) {
            sum[i] = sum[i - 1] + diff[i];
        }

        for (int i = 0; i < n; i++) {
            if (sum[i] < nums[i]) {
                return false;
            }
        }
        return true;
    }
}",1454826057
Md Nihal,mdnihal05,239,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int n=nums.size(),ans=0;
        for(int i=0;i<n;i++){
            if(nums[i]) continue;
            auto a=nums,b=nums;
            int da=0,db=1,ia=i,ib=i;
            while(ia>=0 and ia<n){
                if(a[ia]==0){
                    if(da) ia--;
                    else ia++;
                }else{
                    da^=1;
                    a[ia]--;
                    if(da) ia--;
                    else ia++;
                }
            }
            while(ib>=0 and ib<n){
                if(b[ib]==0){
                    if(db) ib--;
                    else ib++;
                }else{
                    db^=1;
                    b[ib]--;
                    if(db) ib--;
                    else ib++;
                }
            }
            
            if(count(a.begin(),a.end(),0)==n) ans++;
            if(count(b.begin(),b.end(),0)==n) ans++;
        }
        return ans;
    }
};",1454814257
Md Nihal,mdnihal05,239,3639,cpp,"#define ll long long
class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n=nums.size();
        vector<ll>dif(n+1);
        for(auto &v:queries){
             int i=v[0],j=v[1];
             dif[i]++;
             dif[j+1]--;
        }
        partial_sum(dif.begin(),dif.end(),dif.begin());
        bool valid=1;
        for(int i=0;i<n;i++){
            if(nums[i]>dif[i]) valid=false;
        }
        
        return valid;
    }
};",1454821885
Md Nihal,mdnihal05,239,3643,cpp,"#define all(x) x.begin(),x.end()
#define ll long long
class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n=nums.size();
        auto solve=[&](int mid)->bool{
            vector<int>dif(n+1);
            for(int i=0;i<mid;i++){
                auto v=queries[i];
                int l=v[0],r=v[1],d=v[2];
                dif[l]+=d;
                dif[r+1]-=d;
            }
            partial_sum(all(dif),dif.begin());
            bool valid=1;
            for(int i=0;i<n;i++){
                if(nums[i]>dif[i]) valid=0;
            }
            return valid;  
        };
        ll low=0,high=queries.size(),res=-1;
        while(low<=high){
            ll mid=(low+high)/2;
            if(solve(mid)){
                high=mid-1;
                res=mid;
            }else low=mid+1;
        }
        return res;
    }
};",1454829912
Sayan Das,Cp_worm,240,3616,cpp,"class Solution {
public:
     bool simulate(vector<int>& nums, int start, bool goRight) {
        vector<int> t = nums;
        int c = start;
        int n = nums.size();
        while (c >= 0 && c < n) {
            if (t[c] == 0) {
                c = goRight ? c + 1 : c - 1;
            } else {
                t[c]--;
                goRight = !goRight;
                c = goRight ? c + 1 : c - 1;
            }
        }
        for (int num : t) {
            if (num != 0) return false;
        }
        return true;
    }
    int countValidSelections(vector<int>& nums) {
         int count = 0;
        int n = nums.size();
        for (int i = 0; i < n; i++) {
            if (nums[i] == 0) {
                if (simulate(nums, i, true)) count++;
                if (simulate(nums, i, false)) count++;
            }
        }
        
        return count;
    }
};",1454807039
Sayan Das,Cp_worm,240,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
         int n = nums.size();
        vector<int> c(n + 1, 0);
        for (const auto& q : queries) {
            c[q[0]]++;
            c[q[1] + 1]--;
        }
        int  total=0;
        for (int i = 0; i < n; i++) {
            total += c[i];
            if (total < nums[i]) {
                return false;
            }
        }
        return true;
    }
};",1454822801
Sayan Das,Cp_worm,240,3643,cpp,"class Solution {
public:
    int canZero(vector<int>& nums, vector<vector<int>>& queries, int k) {
        int n = nums.size();
        vector<int> c = nums;
        vector<long long> prefix(n + 1, 0);
        for (int i = 0; i < k; i++) {
            int l = queries[i][0];
            int r = queries[i][1];
            int val = queries[i][2];
            prefix[l] += val;
            prefix[r + 1] -= val;
        }
        long long sum = 0;
        vector<int> z(n);
        for (int i = 0; i < n; i++) {
            sum += prefix[i];
            if (sum < c[i]) return false;
            z[i] = c[i];
        }
        
        return true;
    }
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
         int left = 1, right = queries.size();
        int ans = -1;
        bool allZero = true;
        for (int num : nums) {
            if (num != 0) {
                allZero = false;
                break;
            }
        }
        if (allZero) return 0;
        while (left <= right) {
            int mid = left + (right - left) / 2;
            
            if (canZero(nums, queries, mid)) {
                ans = mid;
                right = mid - 1;
            } else {
                left = mid + 1;
            }
        }
        return ans;
    }
};",1454817451
Saurabh,Saurabh_1602,241,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int n = nums.size();
        int ct = 0;

        for (int i = 0; i < n; ++i) {
            if (nums[i] != 0)
                continue;
            for (int dxy : {-1, 1}) {
                vector<int> vt(nums);
                int yd = i;
                int xd = dxy;

                while (yd >= 0 && yd < n) {
                    if (vt[yd] == 0) {
                        yd += xd;
                    } else {
                        vt[yd]--;
                        xd = -xd;
                        yd += xd;
                    }
                }

                if (all_of(vt.begin(), vt.end(),
                           [](int val) { return val == 0; })) {
                    ct++;
                }
            }
        }

        return ct;
    }
};
",1454806864
Saurabh,Saurabh_1602,241,3639,cpp,"
class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        vector<int> diff(n + 1, 0);
        for (const auto& its : queries) {
            int l = its[0];
            int r = its[1];

            if (l >= 0)
                diff[l]--;

            if (r + 1 < n)
                diff[r + 1]++;
        }

        int ct = 0;
        for (int i = 0; i < n; ++i) {
            ct += diff[i];
            nums[i] += ct;
            if (nums[i] > 0) {
                return false;
            }
        }

        return true;
    }
};
",1454815930
Saurabh,Saurabh_1602,241,3643,cpp,"
class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        int m = queries.size();
          bool bol = true;
        for (int num : nums) {
            if (num != 0) {
                bol = false;
                break;
            }
        }
        if (bol) {
            return 0;
        }
        auto solve = [&](int k) -> bool {
            vector<int> pre(n + 1, 0);
            vector<int> suff = nums;  
            
            for (int i = 0; i < k; i++) {
                int l = queries[i][0];
                int r = queries[i][1];
                int sum = queries[i][2];
                
                pre[l] -= sum;
                if (r + 1 < n) {
                    pre[r + 1] += sum;
                }
            }
            
            int ct = 0;
            for (int i = 0; i < n; i++) {
                ct += pre[i];
                suff[i] += ct;
                suff[i] = max(0, suff[i]);
                
                if (suff[i] != 0) {
                    return false;
                }
            }
            return true;
        };
        
        int l = 1, r = m, res = -1;
        while (l <= r) {
            int mid = l + (r - l) / 2;
            if (solve(mid)) {
                res = mid;
                r = mid - 1;
            } else {
                l = mid + 1;
            }
        }
        
        return res;
    }
};
",1454810039
derrick2001,derrick2001,242,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        cans = [i for i,v in enumerate(nums) if v ==0]
        DIR = [-1,1]
        n = len(nums)
        ans =0
        for x in cans:
            for d in DIR:
                curd = d
                cpy = nums.copy()
                curx = x
                while 0<=curx<n:
                    if cpy[curx] == 0:
                        curx += curd
                    else:
                        cpy[curx] -= 1
                        curd *= -1
                        curx += curd

           
                if all(val == 0 for val in cpy):
                    ans += 1
        return ans
                    ",1454829979
derrick2001,derrick2001,242,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        n = len(nums)
        diff = [0] * (n + 1)

        for li, ri in queries:
            diff[li] += 1
            if ri + 1 < len(diff):
                diff[ri + 1] -= 1
        pre = [0] * n
        cur = 0
        for i in range(n):
            cur += diff[i]
            pre[i] = cur

        
        for i in range(n):
            if pre[i] < nums[i]:
                return False
        return True
        ",1454811142
derrick2001,derrick2001,242,3643,python3,"class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        n = len(nums)
        m = len(queries)
    
        def ok(k):
            # Initialize difference array
            diff = [0] * (n + 1)


            for i in range(k):
                li, ri, vali = queries[i]
                diff[li] += vali
                if ri + 1 < n:
                    diff[ri + 1] -= vali

    
            pre = [0] * n
            cur = 0
            for i in range(n):
                cur += diff[i]
                pre[i] = cur

            
            for i in range(n):
                if pre[i] < nums[i]:
                    return False
            return True


        if all(num == 0 for num in nums):
            return 0

    
        left, right = 1, m
    

        while left < right:
            mid = (left + right) // 2
            if ok(mid):
                right = mid
            else:
                left = mid + 1  #

        return left if ok(left) else -1
",1454817088
Shreyash Yadav,sy3166,243,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int sum = 0;
        for(auto x : nums){
            sum+=x;
        }
        int sum2 = 0;
        int k = 0;
        for(auto p : nums){
            if(p == 0){
                if(abs(sum-2*sum2)<=1){
                    k++;
                }
                if(sum==2*sum2){
                    k++;
                }
            }
            sum2+=p;
            // k++;
        }
        return k;
    }
};",1454808589
Shreyash Yadav,sy3166,243,3639,cpp,"typedef long long ll;
class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        ll n = nums.size();
        vector <ll> A(n+1,0);
        for(auto x : queries){
            A[x[0]]++;
            A[x[1]+1]--;
        }
        for(ll i=1;i<n;i++){
            A[i]+=A[i-1];
        }
        for(ll i=0;i<n;i++){
            if(A[i]<nums[i]){
                return false;
            }
        }
        return true;
    }
};",1454815520
Shreyash Yadav,sy3166,243,3643,cpp,"class Solution {
public:
    #define ll long long
    
    bool check(int m, vector<vector<int>>& q, vector<int>& nums) {
        int n = nums.size();
        vector<ll> d(n+1, 0);
        
        ll tmp = 0;
        for(int i=0;i<m;i++) {
            d[q[i][0]] += q[i][2];
            if(q[i][1]+1<n) d[q[i][1]+1] -= q[i][2];
        }
        
        bool jh = 1;
        for(int i=0;i<n;i++) {
            tmp += d[i];
            if(tmp<nums[i]) jh = 0;
        }
        
        return jh;
    }
    
    int minZeroArray(vector<int>& nums, vector<vector<int>>& q) {
        vector<int> v = nums;
        int n = nums.size(), k = q.size();
        
        int jh = 1;
        
        for(int i=0;i<n;i++) {
            if(nums[i]!=0) jh = 0;
        }
        
        if(jh) return 0;
        
        int lo=1,hi=k,ans=-1;
        
        while(lo<=hi) {
            int m = (lo+hi)/2;
            if(check(m, q, nums)) {
                ans = m, hi = m-1;
            } else lo = m+1;
        }
        
        if(ans != -1) {
            return ans;
        }
        
        if(check(k, q, nums)) {
            ans = k;
        } else ans = -1;
        
        
        return ans;
    }
};",1454829990
rohan0910,rohan0910,245,3616,cpp,"class Solution {
public:
    bool valid(int curr, int dir, vector<int>nums){
        int n = nums.size();
        while(curr>=0 && curr<n){
            // cout<<curr<<"" ""<<dir<<endl;
            if(nums[curr]==0){
                if(dir==1)
                    curr++;
                else if (dir==-1)
                    curr--;
            }
            else{
                nums[curr]--;
                dir = -dir;
                curr += dir;
            }
        }
                // cout<<endl;
        for(int x : nums){
            if(x)
                return false;
        }

        return true;
    }
    int countValidSelections(vector<int>& nums) {
        int ans = 0;
        for(int i = 0;i<nums.size();i++){
            if(nums[i]==0){
                ans += valid(i, +1, nums);
                ans += valid(i, -1, nums);
            }
        }
        return ans;
    }
};",1454813612
rohan0910,rohan0910,245,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        vector<int>pre(n+1, 0);
        for(auto q : queries){
            int l = q[0], r = q[1];
            pre[l]++;
            pre[r+1]--;
        }
        for(int i = 1;i<=n;i++){
            pre[i] += pre[i-1];
            
        }
        // for(int i = 0;i<n;i++)
            // cout<<pre[i]<<"" "";
        for(int i = 0;i<n;i++){
            
            if(nums[i]>pre[i])
                return false;
        }
        return true;
    }
};",1454820775
rohan0910,rohan0910,245,3643,cpp,"class Solution {
public:
    bool valid(vector<int>& nums, vector<vector<int>>& queries, int m) {
        int n = nums.size();
        vector<int>pre(n+1, 0);
        for(int i = 0;i<m;i++){
            int l = queries[i][0], r = queries[i][1];
            int val = queries[i][2];
            pre[l]+=val;
            pre[r+1]-=val;
        }
        for(int i = 1;i<=n;i++){
            pre[i] += pre[i-1];
            
        }
        // cout<<m<<endl;
        // for(int i = 0;i<n;i++)
        //     cout<<pre[i]<<"" "";
        // cout<<endl;
        for(int i = 0;i<n;i++){
            
            if(nums[i]>pre[i])
                return false;
        }
        return true;
    }
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int h = queries.size();
        int l = 0;
        int ans = -1;
        while(l<=h){
            int m = (l+h)/2;
            if(valid(nums, queries, m)){
                ans = m;
                h = m-1;
            }
            else
                l = m+1;
        }
        return ans;
    }
};",1454830034
Mohammad Amanullah,m_amanullah7,246,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        auto simulate = [](vector<int> numsCopy, int start, int direction) -> bool{
            int n=numsCopy.size();
            int curr=start;
            while(curr>=0 && curr < n){
                if(numsCopy[curr]==0){
                    curr+=direction;
                } else {
                    numsCopy[curr] -= 1;
                    direction = -direction;
                    curr += direction;
                }
            }
            return all_of(numsCopy.begin(), numsCopy.end(), [](int x) { return x == 0; });
        };
        int ans=0;
        for(int i =0;i<nums.size();++i){
            if(nums[i]==0) {
                if(simulate(nums, i, -1)){
                    ++ans;
                }
                if(simulate(nums,i,1)){
                    ++ans;
                }
            }
        }
        return ans;
    }
};

",1454810429
Mohammad Amanullah,m_amanullah7,246,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n=nums.size();
        vector<int> counts(n, 0);

        for(const auto &q : queries){
            int li=q[0];
            int ri=q[1];
            counts[li]+=1;
            if(ri+1<n){
                counts[ri+1]-=1;
            }
        }
        for(int i=1; i<n;++i){
            counts[i] +=counts[i-1];
        }

        for(int i =0;i<n;++i){
            if(counts[i]<nums[i]){
                return false;
            }
        }
        return true;
    }
};",1454818788
Mohammad Amanullah,m_amanullah7,246,3643,cpp,"class Solution {
public:
    bool canMakeZero(int k, const vector<int>& nums, const vector<vector<int>>& queries) {
        int n =nums.size();
        vector<long long> arr(n +1,0);
        
        for(int i=0;i<k;++i){
            int li=queries[i][0];
            int ri=queries[i][1];
            int vali =queries[i][2];
            arr[li] +=vali;
            if(ri+1<n){
                arr[ri +1]-= vali;
            }
        }
        for(int i=1;i<n;++i){
            arr[i] +=arr[i -1];
        }
        
        for(int i =0;i<n;++i){
            if(arr[i] <nums[i]){
                return false;
            }
        }
        return true;
    }
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int left =1;
        int right =queries.size();
        int result =-1;
        bool zeroPossible = true;
        for(auto &num: nums){
            if(num !=0){
                zeroPossible =false;
                break;
            }
        }
        if(zeroPossible){
            return 0;
        }
        while(left<=right){
            int mid =left +(right-left)/ 2;
            if(canMakeZero(mid, nums, queries)){
                result=mid;
                right= mid-1;
            }
            else{
                left =mid+1;
            }
        }
        return result;
    }
};",1454830085
Ryan,ryanwong0127,248,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        n, res = len(nums), 0

        def helper(start, d):
            arr, cur, mv = nums[:],start,d
            while 0 <= cur < n:
                if arr[cur] == 0:
                    cur += mv
                else:
                    arr[cur] -= 1 
                    mv = -mv
                    cur += mv
            return all(x == 0 for x in arr)

        for i in range(n):
            if nums[i] == 0:
                if helper(i, 1):
                    res += 1
                if helper(i, -1):
                    res += 1

        return res",1454806563
Ryan,ryanwong0127,248,3639,python3,"class Solution:
    def isZeroArray(self, a: List[int], queries: List[List[int]]) -> bool:
        n = len(a)
        diff = [0] * (n + 1)

        for q in queries:
            l, r = q
            diff[l] += 1
            if r + 1 < n:
                diff[r + 1] -= 1

        cover = 0
        for i in range(n):
            cover += diff[i]
            if cover < a[i]:
                return False 

        return True ",1454809190
Ryan,ryanwong0127,248,3643,cpp,"#include <bits/stdc++.h>
#pragma GCC optimize(2)
#define rep(i, a, b) for (int i = (a); i < (b); ++i)
#define rep_(i, a, b) for (int i = (a); i > (b); i--)
#define CEIL_DIV(a, b) ((b) == 0 ? 0 : (((a) >= 0) ? ((a) + (b) - 1) / (b) : (a) / (b)))
#define FLOOR_DIV(a, b) (((a) / (b)) - ((a) % (b) != 0 &&(((a) < 0) != ((b) < 0))))
#define mst(x, a) memset(x, a, sizeof(x))
#define all(a) begin(a), end(a)
#define lowbit(x) ((x) & (-(x)))
#define bitcnt(x) (__builtin_popcountll(x))
#define se second
#define fi first
#define pb push_back
#define maxe max_element
#define mine min_element
using namespace std;
typedef long long ll;
typedef unsigned long long ull;
typedef pair<ll, ll> pll;
typedef pair<int, ll> pil;
typedef pair<int, int> pii;
typedef vector<int> vi;
typedef vector<ll> vll;
typedef vector<vi> vvi;
constexpr static int dirs[4][2] = {{0, -1}, {0, 1}, {-1, 0}, {1, 0}};
constexpr static int inf = 0x3f3f3f3f, mod = 1e9 + 7;
const ll infl = 0x3f3f3f3f3f3f3f3fll;
template<class T> bool chmax(T &a, T b) {
    if (a >= b) return false;
    a = b; return true;
}
template<class T> bool chmin(T &a, T b) {
    if (a <= b) return false;
    a = b; return true;
}
template<class T> bool chsum(T &a, T b) {
    a = (a + b + mod) % mod;
    return 0;
}
class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        const int n = nums.size(), q = queries.size();
        int left = 0, right = q, res = -1;
        while(left <= right){
            int m = left + (right - left) / 2;
            vi diff(n+1, 0);
            rep(i, 0, m){
                int L = queries[i][0];
                int R = queries[i][1];
                int val = queries[i][2];
                diff[L] += val;
                if(R + 1 < n) diff[R+1] -= val;
            }
            bool valid = true;
            int current = 0;
            rep(i, 0, n){
                current += diff[i];
                if(current < nums[i]){
                    valid = false;
                    break;
                }
            }
            if(valid){
                res = m;
                right = m - 1;
            } else {
                left = m + 1;
            }
        }
        return res;
    }
};",1454822964
Wangwang Yang,Jigcecile,249,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int count = 0;
        int n = nums.size();

        for (int i = 0; i < n; i++) {
            if (nums[i] == 0) {
                for (int dir = -1; dir <= 1; dir += 2) {
                    vector<int> copyNums = nums;
                    int curr = i;
                    int direction = dir;

                    while (curr >= 0 && curr < n) {
                        if (copyNums[curr] == 0) {
                            curr += direction;
                        } else {
                            copyNums[curr] -= 1;
                            direction = -direction;
                            curr += direction;
                        }
                    }

                    bool allZero = true;
                    for (int num : copyNums) {
                        if (num != 0) {
                            allZero = false;
                            break;
                        }
                    }

                    if (allZero) {
                        count++;
                    }
                }
            }
        }

        return count;
    }
};",1454807434
Wangwang Yang,Jigcecile,249,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        vector<int> diff(n + 1, 0);

        for (auto& query : queries) {
            int l = max(0, min(query[0], n - 1));
            int r = max(0, min(query[1], n - 1));
            diff[l]++;
            diff[r + 1]--;
        }

        int count = 0;
        for (int i = 0; i < n; i++) {
            count += diff[i];
            if (count < nums[i]) {
                return false;
            }
        }

        return true;
    }
};",1454811035
Wangwang Yang,Jigcecile,249,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        int q = queries.size();

        int left = 0;
        int right = q;
        int result = -1;

        while (left <= right) {
            int mid = left + (right - left) / 2;
            if (isPossible(mid, nums, queries)) {
                result = mid;
                right = mid - 1;
            } else {
                left = mid + 1;
            }
        }

        if (result != -1 && result <= q && isPossible(result, nums, queries)) {
            return result;
        }
        return -1;
    }

private:
    bool isPossible(int k, const vector<int>& nums,
                    const vector<vector<int>>& queries) {
        int n = nums.size();
        vector<long long> diff(n + 1, 0);

        for (int j = 0; j < k; ++j) {
            int l = queries[j][0];
            int r = queries[j][1];
            int val = queries[j][2];

            l = max(0, min(l, n - 1));
            r = max(0, min(r, n - 1));

            diff[l] += val;
            if (r + 1 < n) {
                diff[r + 1] -= val;
            }
        }

        long long current = 0;
        for (int i = 0; i < n; ++i) {
            current += diff[i];
            if (current < nums[i]) {
                return false;
            }
        }

        return true;
    }
};",1454822978
vivaan_77,vivaan_77,250,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int n = nums.size();
        int sum = accumulate(nums.begin(), nums.end(), 0);
        int curr = 0;
        int ans =0;
        for(int i=0; i<n; i++)
        {
            curr += nums[i];
            if(nums[i] == 0)
            {
                if(curr == sum - curr )
                {
                    ans += 2;
                }
                if( curr + 1 == sum - curr || curr - 1 == sum - curr) ans++;
            }
        }
        return ans;
    }
};",1454810130
vivaan_77,vivaan_77,250,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        vector<int> pf(n+1);
        for(int i=0; i<queries.size(); i++)
        {
            pf[queries[i][0]]++;
            pf[queries[i][1] + 1]--;
        }
        for(int i=1; i<n; i++)
        {
            pf[i] += pf[i-1];
        }
        for(int i=0; i<n; i++)
        {
            if(pf[i] < nums[i]) return 0;
        }
        return 1;
    }
};",1454815084
vivaan_77,vivaan_77,250,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        int low = 0, high = queries.size();
        auto p = [&](int mid)
        {
          vector<int> pf(n+1);
        for(int i=0; i<mid; i++)
        {
            pf[queries[i][0]]+= queries[i][2];
            pf[queries[i][1] + 1]-= queries[i][2];
        }
        for(int i=1; i<n; i++)
        {
            pf[i] += pf[i-1];
        }
        for(int i=0; i<n; i++)
        {
            if(pf[i] < nums[i]) return 0;
        }
        return 1;  
        };
        int ans = -1;
        while(low <= high)
        {
            int mid = low + (high - low)/2;
            if(p(mid))
            {
                ans = mid;
                high = mid - 1;
            }
            else
            {
                low = mid  +1;
            }
        }
        return ans;
    }
};",1454822990
yashwanth73,yashwanth73,251,3616,java,"class Solution {
    public int countValidSelections(int[] nums) {
        int ans = 0;
        int sum = 0;
        for(int num : nums)
            sum += num;
        int curr = 0;
        for(int num : nums) {
            curr += num;
            if((sum-curr == sum/2 || curr == sum/2) && num == 0) {
                if(sum%2 == 0)
                    ans+=2;
                else 
                    ans+=1;
            }
        }
        return ans;
    }
}",1454809500
yashwanth73,yashwanth73,251,3639,java,"class Solution {
    public boolean isZeroArray(int[] nums, int[][] queries) {
        int n = nums.length, m = queries.length;
        int[] arr = new int[n];
        for(int i=0;i<m;i++) {
            int start = queries[i][0], end = queries[i][1];
            arr[start]-=1;
            if(end<n-1)
                arr[end+1]+=1;
        }
        int curr = 0;
        for(int i=0;i<n;i++) {
            curr+=arr[i];
            if(nums[i]+curr>0)
                return false;
        }
        return true;
    }
}",1454815122
yashwanth73,yashwanth73,251,3643,java,"class Solution {
    public int minZeroArray(int[] nums, int[][] queries) {
        int sum = 0;
        for(int num : nums)
            sum+=num;
        if(sum == 0)
            return 0;
        int m = queries.length;
        int low = 0, high = m-1;
        while(low<=high) {
            int mid = (low+high)>>1;
            if(isPossible(mid, nums, queries))
                high = mid-1;
            else
                low = mid+1;
        }
        if(low == m)
            return -1;
        return low+1;
    }

    private boolean isPossible(int ind, int[] nums, int[][] queries) {
        int n = nums.length, m = queries.length;
        int[] arr = new int[n];
        for(int i=0;i<=ind;i++) {
            int start = queries[i][0], end = queries[i][1], val = queries[i][2];
            arr[start]-=val;
            if(end<n-1)
                arr[end+1]+=val;
        }
        int curr = 0;
        for(int i=0;i<n;i++) {
            curr+=arr[i];
            if(nums[i]+curr>0)
                return false;
        }
        return true;
    }
}",1454823023
chinesedfan,chinesedfan,253,3616,javascript,"/**
 * @param {number[]} nums
 * @return {number}
 */
var countValidSelections = function(nums) {
    const n = nums.length
    let c = 0
    for (let i = 0; i < n; i++) {
        if (!nums[i]) {
            if (check(i, 1)) c++
            if (check(i, -1)) c++
                // console.log(i, c)
        }
    }
    return c

    function check(i, d) {
        const arr = nums.slice()
        while (i >= 0 && i < n) {
            if (arr[i]) {
                arr[i]--
                d = -d
            }
            i += d
        }
        for (let i = 0; i < n; i++) {
            if (arr[i]) return 0
        }
        return 1
    }
};",1454809272
chinesedfan,chinesedfan,253,3639,javascript,"/**
 * @param {number[]} nums
 * @param {number[][]} queries
 * @return {boolean}
 */
var isZeroArray = function(nums, queries) {
    const n = nums.length
    const diff = Array(n + 1).fill(0)
    for (let i = 0; i < n; i++) {
        diff[i] = nums[i] - (nums[i - 1] || 0)
    }
    // console.log(diff)
    for (let [l, r] of queries) {
        diff[l] -= 1
        diff[r + 1] += 1
    }
    // console.log(diff)
    let now = 0
    for (let i = 0; i < n; i++) {
        now += diff[i]
        if (now > 0) return false
    }
    return true
};",1454815131
chinesedfan,chinesedfan,253,3643,javascript,"/**
 * @param {number[]} nums
 * @param {number[][]} queries
 * @return {number}
 */
var minZeroArray = function(nums, queries) {
    const n = nums.length
    const odiff = Array(n + 1).fill(0)
    for (let i = 0; i < n; i++) {
        odiff[i] = nums[i] - (nums[i - 1] || 0)
    }
    // console.log(diff)
    // console.log(check(1))
    const r = binarySearch(0, queries.length, k => !check(k)) + 1
    return r > queries.length ? -1 : r

    function check(k) {
        const diff = odiff.slice()
        for (let i = 0; i < k; i++) {
            const [l, r, x] = queries[i]
        // }
        // for (let [l, r] of queries) {
            diff[l] -= x
            diff[r + 1] += x
        }
        // console.log(diff)
        let now = 0
        for (let i = 0; i < n; i++) {
            now += diff[i]
            if (now > 0) return false
        }
        return true
    }
};
function binarySearch(l, r, fn) {
    while (l <= r) {
        const m = Math.floor((l + r) / 2)
        if (fn(m)) {
            l = m + 1
        } else {
            r = m - 1
        }
    }
    return r
}",1454823052
nickee1942,nickee1942,254,3616,java,"class Solution {
    int n;
    public int countValidSelections(int[] nums) {
        int res = 0;
        n = nums.length;
        for(int i = 0; i < n; i++){
            if(nums[i] == 0){
                if(check(nums, i, -1))
                   res++;
                if(check(nums, i, 1))
                    res++;
            }
        }
        return res;
    }
    boolean check(int[] nums, int idx, int dir){
        int[] arr = new int[n];
        for(int i = 0; i < n; i++){
            arr[i] = nums[i];
        }
        while(true){
            if(idx < 0 || idx == n)
                break;
            if(arr[idx] == 0){
                idx += dir;
            }else if(arr[idx] > 0){
                arr[idx] --;
                dir *= -1;
                idx += dir;
            }
        }
        for(int i = 0; i < n; i++){
            if(arr[i] != 0){
                return false;
            }
        }
        return true;
    }
}",1454812171
nickee1942,nickee1942,254,3639,java,"class Solution {
    public boolean isZeroArray(int[] nums, int[][] queries) {
        int n = nums.length;
        int[] arr = new int[n + 1];
        for(int[] q : queries){
            int l = q[0];
            int r = q[1];
            arr[l] --;
            arr[r + 1] ++;
        }
        int curr = 0;
        for(int i = 0; i < n; i++){
            curr += arr[i];
            if(nums[i] + curr > 0)
                return false;
        }
        return true;
    }
}",1454818521
nickee1942,nickee1942,254,3643,java,"class Solution {
    int n, m;
    public int minZeroArray(int[] nums, int[][] queries) {
        n = nums.length;
        m = queries.length;
        int[] arr = new int[n + 1];
        int l = 0;
        int r = m;
        while(l < r){
            int mid = l + r >> 1;
            if(check(nums, queries, mid)){
                r = mid;
            }else{
                l = mid + 1;
            }
        }
        if(l == m)
            return check(nums, queries, m) ? m : -1;
        return l;
    }
    boolean check(int[] nums, int[][] q, int k){
        int[] arr = new int[n + 1];
        for(int i = 0; i < k; i++){
            int l = q[i][0];
            int r = q[i][1];
            int val = q[i][2];
            arr[l] -= val;
            arr[r + 1] += val;
        }
        int curr = 0;
        for(int i = 0; i < n; i++){
            curr += arr[i];
            if(nums[i] + curr > 0)
                return false;
        }
        return true;
    }
}",1454830232
Samay_OP69,Samay_OP69,255,3616,cpp,"class Solution {
public:
    bool isValid(vector<int> nums, int start, int direction) {
    int n = nums.size();
    int curr = start;

    while (curr >= 0 && curr < n) {
        if (nums[curr] == 0) {
            curr += direction; // Move in the current direction
        } else if (nums[curr] > 0) {
            nums[curr]--;        // Decrement the value
            direction = -direction; // Reverse direction
            curr += direction;  // Move in the new direction
        }
    }

    // Check if all elements are 0
    for (int num : nums) {
        if (num != 0) return false;
    }
    return true;
}

int countValidSelections(vector<int>& nums) {
    int n = nums.size();
    int ans = 0;

    for (int i = 0; i < n; ++i) {
        if (nums[i] == 0) {
            // Test both directions (left and right)
            if (isValid(nums, i, -1)) {
                ans++;
            }
            if( isValid(nums, i, 1)) ans++;
        }
    }

    return ans;
}

    
};",1454823134
Samay_OP69,Samay_OP69,255,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        vector<int> diff(n + 1, 0); // Difference array for sweep line

        // Apply each query to the difference array
        for (const auto& q : queries) {
            int l = q[0], r = q[1];
            diff[l] -= 1;            // Start decrement at index l
            if (r + 1 < n) {
                diff[r + 1] += 1;    // End decrement after index r
            }
        }

        // Apply the difference array to nums
        for (int i = 0, decrement = 0; i < n; ++i) {
            decrement += diff[i];
            nums[i] += decrement;
        }
        // for(auto i:nums) cout<<i<<"" "";
        // cout<<endl;
        // Check if all elements are zero
        for (int num : nums) {
            if (num > 0) return false;
        }
        return true;
    }
};",1454810048
Samay_OP69,Samay_OP69,255,3643,cpp,"class Solution {
public:
    bool canTransform(vector<int>& nums, vector<vector<int>>& queries, int k) {
        int n = nums.size();
        vector<int> diff(n + 1, 0); // Difference array for sweep line

        // Apply the first k queries to the difference array
        for (int i = 0; i < k; ++i) {
            int l = queries[i][0], r = queries[i][1], val = queries[i][2];
            diff[l] -= val;           // Start decrementing by val at index l
            if (r + 1 < n) {
                diff[r + 1] += val;   // End decrementing after index r
            }
        }

        // Apply the difference array and check if nums can become a Zero Array
        vector<int> vec(nums); // Store the array for debugging midway
        for (int i = 0, decrement = 0; i < n; ++i) {
            decrement += diff[i];     // Accumulate the effect of difference array
            vec[i] += decrement;
            if (vec[i] < 0) vec[i] = 0; // Cap values to non-negative
        }
        
        // for (int num : nums) {
            // if (num > 0) return false;
        // }
        // return true;
        // Check if all elements are zero
        return all_of(vec.begin(), vec.end(), [](int x) { return x == 0; });
    }
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
         int left = 0, right = queries.size();
        int n = nums.size();
        int result = -1;

        while (left <= right) {
            int mid = left + (right - left) / 2;
            if (canTransform(nums, queries, mid)) {
                result = mid;         // Found a valid k
                right = mid - 1;      // Try for a smaller k
            } else {
                left = mid + 1;       // Increase k
            }
        }

        return result;
    }
};",1454816391
sherlock,harry_8,256,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:

        import copy as cp
        ans=0
        n=len(nums)
        for i in range(n):
            if nums[i]:
                continue
            m=-1
            j=i
            temp=cp.copy(nums)
            while j>-1 and j<n:
                if temp[j]>0:
                    temp[j]-=1
                    if m==-1:
                        m=1
                    else:
                        m=-1
                j+=m
            ct=temp.count(0)
            if ct==n:
                ans+=1
            m=1
            j=i
            temp=cp.copy(nums)
            while j>-1 and j<n:
                if temp[j]>0:
                    temp[j]-=1
                    if m==-1:
                        m=1
                    else:
                        m=-1
                j+=m
            ct=temp.count(0)
            if ct==n:
                ans+=1
        return ans
            ",1454812786
sherlock,harry_8,256,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:

        n=len(nums)
        pr=[0]*(n+1)
        for i in range(len(queries)):
            pr[queries[i][0]]+=1
            pr[queries[i][1]+1]-=1
        # print(pr)
        for i in range(1,n+1):
            pr[i]+=pr[i-1]
        # print(pr)
        for i in range(n):
            if nums[i]>pr[i]:
                return False
        return True",1454822647
sherlock,harry_8,256,3643,python3,"class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:

        def check(m):
            n=len(nums)
            pr=[0]*(n+1)
            for i in range(m):
                pr[queries[i][0]]+=queries[i][2]
                pr[queries[i][1]+1]-=queries[i][2]
            # print(pr)
            for i in range(1,n+1):
                pr[i]+=pr[i-1]
            # print(pr)
            for i in range(n):
                if nums[i]>pr[i]:
                    return False
            return True

        l,r=0,len(queries)
        ans=-1
        while l<=r:
            m=(l+r)//2
            if check(m):
                ans=m
                r=m-1
            else:
                l=m+1
        return ans",1454830280
czjnbb,czjnbb,257,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        
        sums = sum(nums)
        res = 0
        cur = 0
        
        for i, n in enumerate(nums):
            
            cur += n
            if n == 0:
                if cur == sums - cur:
                    res += 2
                elif abs(cur * 2 - sums) == 1:
                    res += 1
        
        return res",1454811410
czjnbb,czjnbb,257,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        
        d = defaultdict(int)
        for l,r in queries:
            d[l] += 1
            d[r + 1] -= 1
            
        leng = len(nums)
        cur = 0
        
        for i,n in enumerate(nums):
            cur += d[i]
            if n > cur:
                return False
            
        return True",1454806566
czjnbb,czjnbb,257,3643,python3,"class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        
        def check(m):
            
            d = defaultdict(int)
            for l,r,v in queries[:m]:
                d[l] += v
                d[r + 1] -= v
                
            cur = 0
        
            for i,n in enumerate(nums):
                cur += d[i]
                if n > cur:
                    return False
            
            return True
            
            
            
        leng = len(queries)
        l = 0
        r = leng
        
        while l <= r:
            m = (l + r) // 2
            if check(m):
                r = m - 1
            else:
                l = m + 1
                
        return r + 1 if r + 1 <= leng else -1
        
            
        
        ",1454816320
pikapika,pikapika123,258,3616,python3,"from typing import List


class Solution:
    def countValidSelections(self, a: List[int]) -> int:
        n = len(a)
        ans = 0

        def valid(cur, d):
            arr = a[::]
            while 0 <= cur < n:
                if arr[cur] == 0:
                    cur += d
                else:
                    arr[cur] -= 1
                    d *= -1
                    cur += d
            return all(x == 0 for x in arr)

        for i in range(n):
            if a[i] != 0:
                continue
            if valid(i, -1):
                ans += 1
            if valid(i, 1):
                ans += 1
        return ans",1454816549
pikapika,pikapika123,258,3639,python3,"from typing import List


class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        n = len(nums)
        a = [0] * (n + 1)
        for l, r in queries:
            a[l] += 1
            a[r + 1] -= 1
        for i in range(1, n + 1):
            a[i] += a[i - 1]
        return all(nums[i] <= a[i] for i in range(n))
",1454822382
pikapika,pikapika123,258,3643,python3,"from typing import List


class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        n = len(nums)

        def valid(k):
            a = [0] * (n + 1)
            for i in range(k):
                l, r, v = queries[i]
                a[l] += v
                a[r + 1] -= v
            for i in range(1, n + 1):
                a[i] += a[i - 1]
            return all(nums[i] <= a[i] for i in range(n))

        left, right = 0, len(queries) + 1
        while left < right:
            m = (left + right) // 2
            if valid(m):
                right = m
            else:
                left = m + 1
        return left if left <= len(queries) else -1",1454830412
Vladislav,timetoai,259,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        s = sum(nums)
        cur = 0
        ret = 0
        for st in range(len(nums)):
            cur += nums[st]
            if nums[st] == 0:
                l, r = cur, s - cur
                ret += int(l == r) * 2 + int(l + 1 == r) + int(l == r + 1)
        return ret",1454807457
Vladislav,timetoai,259,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        n = len(nums)
        dec = [0] * (n + 1)
        for l, r in queries:
            dec[l] += 1
            dec[r + 1] -= 1
        cur = 0
        for i in range(n):
            cur += dec[i]
            nums[i] -= cur
            if nums[i] > 0:
                return False
        return True",1454810472
Vladislav,timetoai,259,3643,python3,"class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        def check(qnum):
            dec = [0] * (n + 1)
            for l, r, v in queries[:qnum]:
                dec[l] += v
                dec[r + 1] -= v
            cur = 0
            for i in range(n):
                cur += dec[i]
                if nums[i] - cur > 0:
                    return False
            return True
            
        n = len(nums)
        lq, rq = 0, len(queries)
        while lq < rq:
            mq = (lq + rq) // 2
            if check(mq):
                rq = mq
            else:
                lq = mq + 1
        return lq if check(lq) else - 1",1454816426
Ruoqi,ruoqihuang,261,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        s = sum(nums)
        c = 0
        ans = 0
        for i in nums:
            c += i
            if i == 0:
                if c == s - c:
                    ans += 2
                elif abs(s - c - c)==1:
                    ans += 1
        return ans
                
            ",1454808534
Ruoqi,ruoqihuang,261,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        n = len(nums)
        qq = [0] * n
        for l, r in queries:
            qq[l] += 1
            if r < n-1:
                qq[r+1] -= 1
        c = 0
        for i in range(n):
            c += qq[i]
            if c < nums[i]:
                return False
        return True
                
            
        ",1454820156
Ruoqi,ruoqihuang,261,3643,python3,"class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        n = len(nums)
        def check(k):
            qq = [0] * n
            for i in range(k):
                l, r, v = queries[i]
                qq[l] += v
                if r < n-1:
                    qq[r+1] -= v
            c = 0
            for i in range(n):
                c += qq[i]
                if c < nums[i]:
                    return False
            return True

        l, r = 0, len(queries)
        ans = -1
        while l <= r:
            m = (l + r)//2
            if check(m):
                ans = m
                r = m - 1
            else:
                l = m + 1
        return ans",1454830487
SayA,usaya,262,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        n = len(nums)
        pre = [0] * (n + 1)
        for i in range(n):
            pre[i + 1] = pre[i] + nums[i]
        suf = [0] * (n + 1)
        for i in range(n - 1, -1, -1):
            suf[i] = suf[i + 1] + nums[i]
        ans = 0
        for i, x in enumerate(nums):
            if x == 0:
                if pre[i] == suf[i]:
                    ans += 2
                elif abs(pre[i] - suf[i]) == 1:
                    ans += 1
        return ans",1454807424
SayA,usaya,262,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        n = len(nums)
        diff = [0] * n

        for l, r in queries:
            diff[l] += 1
            if r + 1 < n:
                diff[r + 1] -= 1
        
        cnt = [0] * n
        cur = 0
        for i in range(n):
            cur += diff[i]
            cnt[i] = cur
        
        return all(x <= y for x, y in zip(nums, cnt))",1454817051
SayA,usaya,262,3643,python3,"class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        n, m = len(nums), len(queries)

        def check(k):
            diff = [0] * (n + 1)
            for l, r, val in queries[:k]:
                diff[l] += val
                diff[r + 1] -= val
            tot = 0
            for i in range(n):
                tot += diff[i]
                if tot < nums[i]:
                    return False
            return True

        left, right = 0, m
        while left <= right:
            mid = (left + right) // 2
            if check(mid):
                right = mid - 1
            else:
                left = mid + 1
        return left if left <= m else -1",1454823453
Irfan Ukani,irfanukani,265,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int n = nums.size();
        vector<int> prefix(n + 1, 0);
        for(int i = 1; i <= n; i++) {
            prefix[i] = prefix[i - 1] + nums[i - 1];
        }

        // 1 0 2 0 3
        // 0 1 1 3 3 6
        int ans = 0;
        for(int i = 1; i <= n; i++) {
            if(nums[i - 1] == 0) {
                int left = prefix[i];
                int right = prefix.back() - prefix[i];
                if(left == right) {
                    ans += 2;
                }
                if(abs(right - left) == 1) {
                    ans += 1;
                }
            }
        }
        return ans;
    }
};",1454809527
Irfan Ukani,irfanukani,265,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        vector<int> maxSub(n + 1, 0);
        for(auto q : queries) {
            maxSub[q[0]] += 1;
            maxSub[q[1] + 1] -= 1;
        }
        for(int i = 1; i <= n; i++) {
            maxSub[i] += maxSub[i - 1];
        }
        for(int i = 0; i < nums.size(); i++) {
            if(nums[i] > maxSub[i]) return false;
        }
        return true;
    }
};",1454813240
Irfan Ukani,irfanukani,265,3643,cpp,"class Solution {
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries, int k) {
        int n = nums.size();
        vector<int> maxSub(n + 1, 0);
        for (int j = 0; j <= (k); j++) {
            vector<int> q = queries[j];
            maxSub[q[0]] += q[2];
            maxSub[q[1] + 1] -= q[2];
        }
        for (int i = 1; i <= n; i++) {
            maxSub[i] += maxSub[i - 1];
        }
        for (int i = 0; i < nums.size(); i++) {
            if (nums[i] > maxSub[i])
                return false;
        }
        return true;
    }

public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = queries.size();
        bool ok = true;
        for(auto &x : nums) {
            if(x != 0) ok = false;
        }
        if(ok) return 0;
        
        int left = 0, right = n - 1, ans = -1;
        while(left <= right) {
            int mid = (left + right) >> 1;
            if(isZeroArray(nums, queries, mid)) {
                ans = mid;
                right = mid - 1;
            }else{
                left = mid + 1;
            }
        }
        if(ans == -1) return -1;
        return ans + 1;
    }
};",1454823738
ohnoaibano,ohnoaibano,267,3616,python,"class Solution(object):
    def countValidSelections(self, nums):
        """"""
        :type nums: List[int]
        :rtype: int
        """"""
        n = len(nums)
        
        acc = []
        cur = 0
        for i in nums:
            cur += i
            acc.append(cur)
        asum = sum(nums)
        total = 0
        for i in range(n):
            if nums[i] == 0:
                left = acc[i]
                right = asum - left
                if left == right:
                    total += 2
                elif abs(left-right) == 1:
                    total += 1
        
        return total",1454815622
ohnoaibano,ohnoaibano,267,3639,python,"class Solution(object):
    def isZeroArray(self, nums, queries):
        """"""
        :type nums: List[int]
        :type queries: List[List[int]]
        :rtype: bool
        """"""
        
        amap = {}
        for a,b in queries:
            if not a in amap:
                amap[a] = 0
            if not b+1 in amap:
                amap[b+1] = 0
            amap[a] += 1
            amap[b+1] -= 1
        
        acc = 0
        
        n = len(nums)
        alist = []
        for i in range(n):
            if i in amap:
                acc += amap[i]
            
            alist.append(acc)
            if acc < nums[i]:
                return False
        
        return True
        # for i in range(n)",1454824057
ohnoaibano,ohnoaibano,267,3643,python,"class Solution(object):
    def minZeroArray(self, nums, queries):
        """"""
        :type nums: List[int]
        :type queries: List[List[int]]
        :rtype: int
        """"""
        
        start = 0
        end = len(queries)
        
        while(start+1<end):
            mid = (start+end)//2
            if self.h(nums, queries, mid):
                end = mid
            else:
                start = mid
        
        if self.h(nums, queries, start):
            return start
        if self.h(nums, queries, end):
            return end
        return -1
        
    
    def h(self, nums, queries, k):
        amap = {}
        
        for i in range(k):
            a,b,val = queries[i]
        # for a,b,val in queries:
            if not a in amap:
                amap[a] = 0
            if not b+1 in amap:
                amap[b+1] = 0
            amap[a] += val
            amap[b+1] -= val
        
        acc = 0
        
        n = len(nums)
        alist = []
        for i in range(n):
            if i in amap:
                acc += amap[i]
            
            alist.append(acc)
            if acc < nums[i]:
                return False
        
        return True",1454831021
Arnab,arnab_97,268,3616,java,"class Solution {
    public int countValidSelections(int[] nums) {
       int n = nums.length;
        int count = 0;
        
       
        for(int i=0; i<n; i++) {
            if(nums[i] !=0) continue;
            
            for(int dir = -1; dir <=1; dir +=2) { 
              
                int[] temp = nums.clone();
                
                int curr = i;
                int currentDir = dir;
                
                while(curr >=0 && curr <n) {
                    if(temp[curr] ==0) {
                        // Move in current direction
                        curr += currentDir;
                    }
                    else if(temp[curr] >0){
                        // Decrement and reverse direction
                        temp[curr]--;
                        currentDir = -currentDir;
                        curr += currentDir;
                    }
                }
                
                boolean allZero = true;
                for(int val : temp) {
                    if(val !=0) {
                        allZero = false;
                        break;
                    }
                }
                if(allZero) count++;
            }
        }
        
        return count; 
    }
}",1454825032
Arnab,arnab_97,268,3639,java,"class Solution {
    public boolean isZeroArray(int[] nums, int[][] queries) {
        int n = nums.length;
        int[] coverage = new int[n + 1];
        
        for (int[] query : queries) {
            int li = query[0];
            int ri = query[1];
            coverage[li] += 1;
            if (ri + 1 < coverage.length) {
                coverage[ri + 1] -= 1;
            }
        }
        for (int i = 1; i < n; i++) {
            coverage[i] += coverage[i - 1];
        }
        for (int i = 0; i < n; i++) {
            if (coverage[i] < nums[i]) {
                return false;
            }
        }
        
        return true;
    }
}",1454828048
Arnab,arnab_97,268,3643,java,"class Solution {
    public int minZeroArray(int[] nums, int[][] queries) {
        int n = nums.length;
        int q = queries.length;
        int[] l = new int[q];
        int[] r = new int[q];
        int[] val = new int[q];
        for(int i=0;i<q;i++) {
            l[i] = queries[i][0];
            r[i] = queries[i][1];
            val[i] = queries[i][2];
        }
        
        int left = 0;
        int right = q;
        int answer = -1;
        while(left <= right){
            int mid = left + (right - left)/2;
            if(canZero(mid, nums, l, r, val, n)){
                answer = mid;
                right = mid -1;
            }
            else{
                left = mid +1;
            }
        }
        return answer;
    }
    
    private boolean canZero(int k, int[] nums, int[] l, int[] r, int[] val, int n){
        if(k ==0){
            for(int num : nums){
                if(num >0) return false;
            }
            return true;
        }
        int[] diff = new int[n+1];
        for(int i=0;i<k;i++){
            diff[l[i]] += val[i];
            if(r[i]+1 < n){
                diff[r[i]+1] -= val[i];
            }
        }
        long sum =0;
        for(int i=0;i<n;i++){
            sum += diff[i];
            if(sum < nums[i]){
                return false;
            }
        }
        return true;
    }
}",1454831043
Vihari Vemuri,TheZwischenzug,269,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        def is_valid(arr, curr, sgn):
            arr = list(arr)
            while curr >= 0 and curr < len(arr):
                if arr[curr] == 0:
                    curr = curr+sgn
                else:
                    arr[curr] -= 1
                    sgn = -1*sgn
                    curr = curr+sgn
                    
            return sum(arr) == 0
        cnt = 0
        for i in range(len(nums)):
            if nums[i] != 0:
                continue
            for sgn in [-1, 1]:
                if is_valid(nums, i, sgn):
                    cnt += 1
        return cnt
                    ",1454811382
Vihari Vemuri,TheZwischenzug,269,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        def canMakeZero(nums, queries):
            n = len(nums)
            arr = [0]*(n+1)
            for l,r,v in queries:
                arr[l] += v
                arr[r+1] -= v
            for i in range(1,n):
                arr[i] += arr[i-1]

            for i in range(n):
                if arr[i] < nums[i]:
                    return False
            return True

        q_new = [ (l, r, 1) for (l,r) in queries]
        return canMakeZero(nums, q_new)",1454823889
Vihari Vemuri,TheZwischenzug,269,3643,python3,"class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        if sum(nums) == 0:
            return 0
        def canMakeZero(nums, queries):
            n = len(nums)
            arr = [0]*(n+1)
            for l,r,v in queries:
                arr[l] += v
                arr[r+1] -= v
            for i in range(1,n):
                arr[i] += arr[i-1]

            for i in range(n):
                if arr[i] < nums[i]:
                    return False
            return True

        left = 1
        right = len(queries)
        k = None
        while left <= right:
            mid = (left+right)//2
            if canMakeZero(nums, queries[0:mid]):
                k = mid
                right = mid-1
            else:
                left = mid+1
        if k is None:
            return -1
        else:
            return k
",1454822309
Suyash Mishra,suyasho786,270,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& a) {
        int n = a.size(), c = 0;
        auto f = [&](int p, int d) {
            vector<int> b = a;
            while (p >= 0 && p < n) {
                if (b[p] == 0) p += d;
                else b[p]--, d = -d, p += d;
            }
            return count(b.begin(), b.end(), 0) == n;
        };
        for (int i = 0; i < n; i++) if (a[i] == 0) c += f(i, 1) + f(i, -1);
        return c;
    }
};",1454805417
Suyash Mishra,suyasho786,270,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& a, vector<vector<int>>& q) {
        int n = a.size();
        vector<int> d(n + 1, 0);
        for (auto& x : q) d[x[0]]++, d[x[1] + 1]--;
        for (int i = 1; i < n; i++) d[i] += d[i - 1];
        for (int i = 0; i < n; i++) if (a[i] > d[i]) return 0;
        return 1;
    }
};",1454807526
Suyash Mishra,suyasho786,270,3643,cpp,"class Solution {
public:
    int n, m;
    bool isValid(int k, vector<int> &a, vector<vector<int>> &q){
        
        vector<long long> temp_d(n + 1, 0); 
        for (int i = 0; i < k; i++) {
            int l = q[i][0], r = q[i][1], v = q[i][2];
            temp_d[l] += v;
            if (r + 1 < n) temp_d[r + 1] -= v;
        }
        
        long long curr_sum = 0;
        vector<int> temp_a = a;
        for (int i = 0; i < n; i++) {
            curr_sum += temp_d[i];
            if (curr_sum < temp_a[i]) return 0;
            temp_a[i] -= curr_sum;
        }

        return all_of(temp_a.begin(), temp_a.end(), [](int x) { return x <= 0; });
    }
    int minZeroArray(vector<int>& a, vector<vector<int>>& q) {
        n = a.size(), m = q.size();
        bool f = 1;
        for(auto it : a){
            f &= (it == 0);
        }
        if(f)return 0;
        int low = 1, high = m, ans = -1;
        while (low <= high) {
            int mid = low + (high - low) / 2;
            if (isValid(mid, a, q)) {
                ans = mid;
                high = mid - 1;
            } else {
                low = mid + 1;
            }
        }

        return ans;
    }
};",1454823896
thedude7181,thedude7181,272,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        res = 0
        prefix = 0
        suffix = sum(nums)
        for num in nums:
            suffix -= num
            if num == 0 and prefix == suffix:
                res += 2
            if num == 0 and abs(prefix - suffix) == 1:
                res += 1
            prefix += num
        return res ",1454817434
thedude7181,thedude7181,272,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        ranges = [0] * (len(nums) + 1)
        for l, r in queries:
            ranges[l] += 1
            ranges[r + 1] -= 1
        cur = 0
        for i in range(len(nums)):
            cur += ranges[i]
            if cur < nums[i]:
                return False
        return True",1454824325
thedude7181,thedude7181,272,3643,python3,"class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        def isZeroArray(nums: List[int], queries: List[List[int]]) -> bool:
            ranges = [0] * (len(nums) + 1)
            for l, r, val in queries:
                ranges[l] += val
                ranges[r + 1] -= val
            cur = 0
            for i in range(len(nums)):
                cur += ranges[i]
                if cur < nums[i]:
                    return False
            return True
        
        if not isZeroArray(nums, queries):
            return -1
        
        lo = 0 
        hi = len(queries)
        while lo < hi:
            mid = (lo + hi) // 2
            if isZeroArray(nums, queries[:mid]):
                hi = mid
            else:
                lo = mid + 1
        return lo",1454831178
Kush Gosalia,kush223,273,3616,cpp,"class Solution {
public:
    bool fun(vector<int> nums, int side, int pos){
        while(1){
            if(pos<0 || pos==nums.size()) break;
            if(nums[pos]==0){
                if(side==0) pos--;
                else pos++;
            }
            else{
                nums[pos]--;
                if(side==0) pos++;
                else pos--;
                side=1-side;
            }
        }
        int f=0;
        for(int i=0;i<nums.size();i++){
            // cout<<nums[i]<<"" "";
            if(nums[i]!=0){
                f=1;
                break;
            }
        }
        // cout<<endl;
        if(f==1) return 0;
        return 1;
    }
    int countValidSelections(vector<int>& nums) {
        int ans=0;
        for(int i=0;i<nums.size();i++){
            if(nums[i]==0){
                bool o1= fun(nums,0,i);
                bool o2= fun(nums,1,i);
                if(o1) ans++;
                if(o2) ans++;
            }
        }
        return ans;
    }
};",1454817194
Kush Gosalia,kush223,273,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        vector<int> v(nums.size()+1,0);
        for(int i=0;i<queries.size();i++){
            v[queries[i][0]]++;
            v[queries[i][1]+1]--;
        }
        for(int i=1;i<nums.size();i++){
            v[i]+=v[i-1];
        }
        
        for(int i=0;i<nums.size();i++){
            if(nums[i]-v[i]>0) return false;
        }
        return true;
    }
};",1454824026
Kush Gosalia,kush223,273,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        
        int l=0, r=queries.size(),ans=-1;
        while(l<=r){
            int mid=(l+r)/2;
            vector<int> v(nums.size()+1,0);
            for(int i=0;i<mid;i++){
                v[queries[i][0]]+=queries[i][2];
                v[queries[i][1]+1]-=queries[i][2];
            }
            for(int i=1;i<nums.size();i++){
                v[i]+=v[i-1];
            }
            int f=0;
            for(int i=0;i<nums.size();i++){
                if(nums[i]-v[i]>0){
                    f=1;
                    break;
                }
            }
            if(f==1){
                l=mid+1;
            }
            else{
                ans=mid;
                r=mid-1;
            }
        }
        return ans;
    }
};",1454831200
Atul,coderchamp07,275,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int n = nums.size();
        vector<int> rSum(n, 0);
        for(int i = n - 1; i >= 0; i--)
            rSum[i] = (i + 1 < n ? rSum[i + 1] : 0) + nums[i];

        int ans = 0;
        int lSum = 0;
        for(int i = 0; i < n; i++) {
            if(nums[i] == 0) {
                if(lSum == rSum[i])
                    ans += 2;
                else if(abs(lSum - rSum[i]) == 1)
                    ans++;
            }
            lSum += nums[i];
        }
        return ans;
    }
};",1454808558
Atul,coderchamp07,275,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        vector<int> ops(n + 1, 0);

        for(auto& q : queries)
            ops[q[0]]++, ops[q[1] + 1]--;

        int cur = 0;
        for(int i = 0; i < n; i++) {
            cur += ops[i];
            if(nums[i] > cur)
                return false;
        }
        return true;
    }
};",1454811273
Atul,coderchamp07,275,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        int q = queries.size();

        auto poss = [&](int M) -> bool {
            vector<int> ops(n + 1, 0);
            for(int i = 0; i < M; i++)
                ops[queries[i][0]]+=queries[i][2], ops[queries[i][1] + 1]-=queries[i][2];
    
            int cur = 0;
            for(int i = 0; i < n; i++) {
                cur += ops[i];
                if(nums[i] > cur)
                    return false;
            }
            return true;
        };

        int l = 0;
        int r = q;
        while(l <= r) {
            int m = (l + r) / 2;
            if(poss(m))
                r = m - 1;
            else
                l = m + 1;
        }
        if(l == q + 1)
            l = -1;
        return l;
    }
};",1454817220
Shuqi Shang,sshang,276,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        
        total = sum(nums)
        
        cur = 0
        res = 0
        for i, num in enumerate(nums):
            cur += num
            if num == 0:
                if total - cur == cur:
                    res += 2
                elif abs(total - cur * 2) == 1:
                    res += 1
        return res",1454810500
Shuqi Shang,sshang,276,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        
        n = len(nums)
        diff = [0] * (n + 1)
        
        for l, r in queries:
            diff[l] += 1
            diff[r + 1] -= 1
            
        cur = 0
        for i, num in enumerate(nums):
            cur += diff[i]
            if num > cur:
                return False
            
        return True",1454815679
Shuqi Shang,sshang,276,3643,python3,"class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        
        total = sum(nums)
        if total == 0:
            return 0
        
        n = len(nums)
        diff = [0] * (n + 1)
        
        i, cur = 0, 0
        for j in range(len(queries)):
            l, r, val = queries[j]
            
            diff[l] += val
            diff[r + 1] -= val
            
            if l <= i:
                cur += val
                if r < i:
                    cur -= val
            
            while i < n and cur >= nums[i]:
                i += 1
                cur += diff[i]
                
            if i == n:
                return j + 1
        return -1",1454831317
Orz,retired_kid,277,3616,java,"class Solution {
    public int countValidSelections(int[] nums) {
        int n = nums.length, ans = 0;
        int[] dr = new int[] {-1, 1};
        for (int i = 0; i < n; i++) {
            if (nums[i] != 0) continue;
            for (int k = 0; k < 2; k++) {
                int d = k;
                int j = i;
                int[] a = Arrays.copyOf(nums, n);
                while (j >= 0 && j < n) {
                    if (a[j] == 0) {
                        j += dr[d];
                    } else if (a[j] > 0) {
                        a[j]--;
                        d ^= 1;
                        j += dr[d];
                    }
                }
                if (Arrays.stream(a).max().getAsInt() == 0) {
                    ans++;
                }
            }
        }
        return ans;
    }
}",1454808762
Orz,retired_kid,277,3639,java,"class Solution {
    public boolean isZeroArray(int[] nums, int[][] queries) {
        int n = nums.length;
        int[] dif = new int[n + 5];
        for (int[] q : queries) {
            int l = q[0] + 1, r = q[1] + 1;
            dif[l]++; dif[r + 1]--;
        }
        for (int i = 1; i <= n; i++) {
            dif[i] += dif[i - 1];
            if (dif[i] < nums[i - 1]) return false;
        }
        return true;
    }
}",1454811100
Orz,retired_kid,277,3643,java,"class Solution {
    public int minZeroArray(int[] nums, int[][] queries) {
        int n = nums.length;
        int lo = 0, hi = queries.length, res = -1;
        while (lo <= hi) {
            int mid = lo + hi >> 1;
            int[] dif = new int[n + 5];
            for (int i = 0; i < mid; i++) {
                int l = queries[i][0] + 1, r = queries[i][1] + 1, v = queries[i][2];
                dif[l] += v; dif[r + 1] -= v;
            }
            boolean flg = true;
            for (int i = 1; i <= n; i++) {
                dif[i] += dif[i - 1];
                // System.out.println(dif[i]);
                if (dif[i] < nums[i - 1]) {
                    flg = false; break;
                }
            }
            if (flg) {
                res = mid; hi = mid - 1;
            } else {
                lo = mid + 1;
            }
        }
        return res;
    }
}",1454817294
Jonowo,jonowo,278,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        ans = 0
        n = len(nums)
        for i in range(n):
            if nums[i] == 0:
                l = sum(nums[:i])
                r = sum(nums[i + 1:])
                if l in (r, r + 1):
                    ans += 1
                if r in (l, l + 1):
                    ans += 1
        return ans",1454808400
Jonowo,jonowo,278,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        n = len(nums)
        d = [0] * (n + 1)
        for l, r in queries:
            d[l] -= 1
            d[r + 1] += 1
        d = list(accumulate(d))[:-1]
        for i in range(n):
            nums[i] += d[i]
            if nums[i] > 0:
                return False
        return True
",1454812356
Jonowo,jonowo,278,3643,python3,"class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        n = len(nums)
        q = len(queries)

        def ok(k):
            diff = [0] * (n + 1)
            for l, r, val in queries[:k]:
                diff[l] -= val
                diff[r + 1] += val
            diff = list(accumulate(diff))
            for i in range(n):
                if nums[i] + diff[i] > 0:
                    return False
            return True

        if not ok(q):
            return -1

        left = 0
        right = q
        while left < right:
            mid = (left + right) // 2
            if ok(mid):
                right = mid
            else:
                left = mid + 1
        return left
        ",1454824213
Ayush Saluja,ayuchitsaluja8,279,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int sum = 0 , pre = 0 , ret = 0;
        for(int d: nums) sum += d;
        for(int d: nums){
            pre +=d;
            if(d==0){
                int left = pre, right = sum - pre;
                if(left == right)ret += 2;
                else if(abs(right-left)==1) ret += 1;
            }
        }
        return ret;
    }
};",1454807091
Ayush Saluja,ayuchitsaluja8,279,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        const int n = nums.size();
        vector<int> pre(n+1,0);
        for(vector<int> &query: queries){
            int l = query[0], r = query[1] + 1;
            pre[r]--;
            pre[l]++;
        }
        for(int i=1;i<=n;++i)pre[i] += pre[i-1];
        for(int i=0;i<n;++i)if(nums[i]>pre[i])return false;
        return true;
    }
};",1454809169
Ayush Saluja,ayuchitsaluja8,279,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int low = 0 , high = queries.size(), mid , ans = -1;
        const int n = nums.size();
        vector<long long> pre(n+1,0);
        for(;low<=high;){
            mid = (low + high)/2;
            pre[n] = 0;
            for(int i=0;i<mid;++i)pre[queries[i][0]]+=queries[i][2],pre[queries[i][1]+1]-=queries[i][2];
            bool ok = true;
            for(int i=1;i<=n;++i)pre[i]+=pre[i-1];
            for(int i=0;i<n;++i){
                ok &= pre[i]>=nums[i];
                pre[i] = 0;
            }

            if(ok) ans = mid , high = mid - 1;
            else low = mid + 1;
        }
        return ans;
    }
};",1454817408
Sarthak Goyal,SoarerEternal,280,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
         int n = nums.size();
    int valid_count = 0;
    auto simulate = [&](int start, int direction) {
    vector<int> arr = nums;
    int curr = start;
    while (curr >= 0 && curr < n) {
    if (arr[curr] == 0) {
    curr += direction;
     } else {
      arr[curr]--;
     direction = -direction; 
      curr += direction;
    }}
for (int x : arr) {
            if (x != 0) return false;
        }
        return true;
    };
        for (int i = 0; i < n; ++i) {
        if (nums[i] == 0) {
          
            if (simulate(i, 1)) valid_count++;
            if (simulate(i, -1)) valid_count++;
        }
    }

    return valid_count;
}

};",1454808839
Sarthak Goyal,SoarerEternal,280,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
     vector<int>arr(n,0);
        for(auto it :queries){
            arr[it[0]]--;
            if(it[1]+1 <n)arr[it[1]+1]++;
        }
        for(int i =1;i<n;i++){
            arr[i]=arr[i-1]+arr[i];
        }
        for(int i =0;i<n;i++){
            if(arr[i]+nums[i]>0)return false;
        }
        return true;
    }
};",1454818211
Sarthak Goyal,SoarerEternal,280,3643,cpp,"class Solution {
public:
    bool check(vector<int>&nums,vector<vector<int>>&queries,int mid){
         int n = nums.size();  
     vector<int>arr(n,0);
        for(int i =0;i<mid;i++){
            arr[queries[i][0]]=arr[queries[i][0]]-queries[i][2];
            if(queries[i][1]+1 <n)arr[queries[i][1]+1]+=queries[i][2];
        }
        for(int i =1;i<n;i++){
            arr[i]=arr[i-1]+arr[i];
        }
        for(int i =0;i<n;i++){
            if(arr[i]+nums[i]>0)return false;
        }
        return true;
    }
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
           int n = nums.size();
     int low =0 , high = queries.size();
        int ans =-1;
        while(low<=high){
            int mid = low +(high-low)/2;
            if(check(nums,queries,mid)){
                ans = mid;
                high = mid-1;
            }
            else low = mid+1;
        }
        return ans;
    }
};",1454831546
usualr,timetravel_,282,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int validSelections = 0;
        int n = nums.size();
        
        for (int i = 0; i < n; ++i) {
            if (nums[i] == 0) {
                if (simulate(nums, i, -1)) validSelections++;
                if (simulate(nums, i, 1)) validSelections++;
            }
        }
        
        return validSelections;
    }
    
    bool simulate(vector<int> nums, int curr, int dir) {
        int n = nums.size();
        
        while (curr >= 0 && curr < n) {
            if (nums[curr] == 0) {
                curr += dir;
            } else {
                nums[curr]--;
                dir = -dir;
                curr += dir;
            }
        }
        
        for (int num : nums) {
            if (num != 0) return false;
        }
        
        return true;
    }
};",1454805796
usualr,timetravel_,282,3639,cpp,"#include <vector>
using namespace std;

class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        vector<int> diff(n + 1, 0);
        
        for (const auto& query : queries) {
            int li = query[0];
            int ri = query[1];
            diff[li] -= 1;
            if (ri + 1 < n) {
                diff[ri + 1] += 1;
            }
        }
        
        for(int i=1;i<diff.size();i++)diff[i]+=diff[i-1];
        
        int current = 0;
        for (int i = 0; i < n; ++i) {
            nums[i] += diff[i];
            // cout<<nums[i]<<"" "";
            if (nums[i] > 0) {
                return false;
            }
        }
        // cout<<""\n"";
        
        return true;
    }
};
",1454812979
usualr,timetravel_,282,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& q) {
        
        long long sss = 0;
        for(int i=0;i<nums.size();i++){
            sss += nums[i];
        }
        if(sss == 0) return 0;
        
        int n = nums.size(), l = 1, r = q.size(), res = -1;

        while (l <= r) {
            int m = l + (r - l) / 2;
            if (canZeroArray(nums, q, m)) {
                res = m;
                r = m - 1;
            } else {
                l = m + 1;
            }
        }

        return res;
    }

    bool canZeroArray(const vector<int>& nums, const vector<vector<int>>& q, int k) {
        int n = nums.size();
        vector<int> diff(n + 1, 0);

        for (int i = 0; i < k; ++i) {
            int li = q[i][0], ri = q[i][1], v = q[i][2];
            diff[li] -= v;
            if (ri + 1 < n) diff[ri + 1] += v;
        }

        int cum = 0;
        for (int i = 0; i < n; ++i) {
            cum += diff[i];
            if (nums[i] + cum > 0) return false;
        }

        return true;
    }
};
",1454824403
Rishabh Tiwari,rishabhtwr07,284,3616,java,"class Solution {
    public int countValidSelections(int[] nums) {
        int sum = 0;
        for(int n: nums) {
            sum += n;
        }
        int n = nums.length;
        int curSum = 0;
        int ret = 0;
        for(int i = 0; i < n; ++i) {
            if(nums[i] == 0) {
                if(sum == curSum + curSum)
                    ret += 2;
                else if(Math.abs(sum - curSum - curSum) == 1)
                    ret++;
            }
            curSum += nums[i];
        }
        return ret;
    }
}",1454810496
Rishabh Tiwari,rishabhtwr07,284,3639,java,"class Solution {
    public boolean isZeroArray(int[] nums, int[][] queries) {
        int bit[] = new int[100004];
        Arrays.fill(bit, 0);
        for(int []q: queries) {
            bit[q[0]]++;
            bit[q[1] + 1]--;
        }
        int val = 0;
        int n = nums.length;
        for(int i = 0; i < n; ++i) {
            val += bit[i];
            if(val < nums[i])
                return false;
        }
        return true;

        
    }
    
}",1454816015
Rishabh Tiwari,rishabhtwr07,284,3643,java,"class Solution {
    int n, q;
    int nums[];
    int queries[][];
    private boolean fnc(int x) {
        int bit[] = new int[n + 5];
        Arrays.fill(bit, 0);
        for(int i = 0; i < x; ++i) {
            bit[queries[i][0]] += queries[i][2];
            bit[queries[i][1] + 1] -= queries[i][2];
        }
        int val = 0;
        for(int i = 0; i < n; ++i) {
            val += bit[i];
            if(val < nums[i])
                return false;
        }
        return true;
    }
    
    public int minZeroArray(int[] nums, int[][] queries) {
        n = nums.length;
        q = queries.length;
        this.nums = nums;
        this.queries = queries;
        
        int l = 0;
        int r = q;
        int mid;

        while(r - l > 1) {
            mid = (l + r) / 2;
            if(fnc(mid))
                r = mid;
            else 
                l = mid + 1;
        }
        if(fnc(l))
            return l;
        if(fnc(r))
            return r;
        return -1;
    }
}",1454824422
jenineeuq,JENIFA_S_JOANNA,285,3616,python3,"from typing import List

class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        n = len(nums)
        valid_count = 0
        
        # Function to simulate the process
        def simulate(start: int, direction: int) -> bool:
            nums_copy = nums[:]
            curr = start
            
            while 0 <= curr < n:
                if nums_copy[curr] == 0:
                    curr += direction  
                else:
                    nums_copy[curr] -= 1  
                    direction = -direction  
                    curr += direction  
            return all(x == 0 for x in nums_copy)

        for i in range(n):
            if nums[i] == 0:
                if simulate(i, 1):  
                    valid_count += 1
                if simulate(i, -1):  
                    valid_count += 1
        
        return valid_count

",1454812250
jenineeuq,JENIFA_S_JOANNA,285,3639,python3,"from typing import List

class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        n = len(nums)
        decrement_count = [0] * (n + 1)
        
        for li, ri in queries:
            decrement_count[li] += 1
            if ri + 1 < n:
                decrement_count[ri + 1] -= 1
        
        for i in range(1, n):
            decrement_count[i] += decrement_count[i - 1]
        
        for i in range(n):
            if nums[i] > decrement_count[i]:
                return False
        
        return True

",1454816963
jenineeuq,JENIFA_S_JOANNA,285,3643,python3,"from typing import List

class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        n = len(nums)
        
        def canAchieveZeroArray(k: int) -> bool:
            d = [0] * (n + 1)  
            for i in range(k):
                li, ri, vali = queries[i]
                d[li] += vali
                if ri + 1 < n:
                    d[ri + 1] -= vali
            current_decrement = 0
            for i in range(n):
                current_decrement += d[i]
                if nums[i] > current_decrement:
                    return False
            return True

        l, r = 0, len(queries)
        answer = -1
        
        while l <= r:
            mid = (l + r) // 2
            if canAchieveZeroArray(mid):
                answer = mid  
                r = mid - 1  
            else:
                l = mid + 1  
        
        return answer
",1454824439
acebenson0704,acebenson0704,287,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        res = 0
        for i, num in enumerate(nums):
            if num != 0:
                continue
            if sum(nums[:i]) == sum(nums[i+1:]):
                res += 2
            if sum(nums[:i])+1 == sum(nums[i+1:]):
                res += 1
            if sum(nums[:i]) == sum(nums[i+1:])+1:
                res += 1
        return res",1454811315
acebenson0704,acebenson0704,287,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        n = len(nums)
        record = [0] * n
        for l, r in queries:
            record[l] += 1
            if r+1 < n:
                record[r+1] -= 1
        cur = 0
        for i in range(n):
            cur += record[i]
            if cur < nums[i]:
                return False
        return True
            ",1454815093
acebenson0704,acebenson0704,287,3643,python3,"class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        def isFeasible(k):
            record = [0] * n
            for l, r, val in queries[:k]:
                record[l] += val
                if r+1 < n:
                    record[r+1] -= val
            cur = 0
            for i in range(n):
                cur += record[i]
                if cur < nums[i]:
                    return False
            return True
        n = len(nums)
        left, right = 0, len(queries)+1
        while left < right:
            mid = (left + right) // 2
            if isFeasible(mid):
                right = mid
            else:
                left = mid+1
        return left if left <= len(queries) else -1
        ",1454824545
consistentNotmotivated,consistentNotmotivated,288,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        n = len(nums)
        ans = 0
    
        def fun(c, d):
            nums_copy = nums[:] 
            while 0 <= c < n:
                if nums_copy[c] == 0:
                    c += 1 if d == ""right"" else -1
                else:
                    nums_copy[c] -= 1
                    d = ""left"" if d == ""right"" else ""right""
                    c += 1 if d == ""right"" else -1

            return all(val == 0 for val in nums_copy)
    
        for i in range(n):
            if nums[i] == 0:
                if fun(i, ""left""):
                    ans += 1
                if fun(i, ""right""):
                    ans += 1
    
        return ans",1454818534
consistentNotmotivated,consistentNotmotivated,288,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        n = len(nums)
        dp = [0] * (n + 1)

        for query in queries:
            i, j = query
            dp[i] -= 1
            if j + 1 < n:
                dp[j + 1] += 1

        cd = 0
        for i in range(n):
            cd += dp[i]
            nums[i] += cd
            if nums[i] > 0:
                return False

        return True
",1454831888
consistentNotmotivated,consistentNotmotivated,288,3643,python3,"class Solution(object):
    def minZeroArray(self, nums, queries):
        n = len(nums)
        c = nums[:]

        if all(x == 0 for x in c):
            return 0

        def fun(k):
            diff = [0] * (n + 1)
            for i in range(k):
                li, ri, val = queries[i]
                diff[li] += val
                diff[ri + 1] -= val

            total = 0
            for i in range(n):
                total += diff[i]
                if total < c[i]:
                    return False
            return True

        l, r = 0, len(queries)
        ans = -1
        m = False

        while l <= r:
            mid = (l + r) // 2

            if fun(mid):
                ans = mid
                r = mid - 1
            else:
                l = mid + 1

            if not m and mid == len(queries) // 2:
                diff = [0] * (n + 1)
                for i in range(mid):
                    li, ri, val = queries[i]
                    diff[li] += val
                    diff[ri + 1] -= val

                state = c[:]
                total = 0
                for i in range(n):
                    total += diff[i]
                    state[i] = max(0, c[i] - total)
                m = True

        return ans if ans != -1 else -1
",1454830224
parallel_stream,parallel_stream,293,3616,java,"class Solution {
  public int countValidSelections(int[] nums) {
    int n = nums.length;
    return IntStream.range(0, n)
        .filter(i -> nums[i] == 0)
        .flatMap(i -> IntStream.of(-1, 1)
            .map(d -> isValid(nums.clone(), i, d) ? 1 : 0))
        .sum();
  }

  private boolean isValid(int[] nums, int idx, int dir) {
    while (idx >= 0 && idx < nums.length) {
      if (nums[idx] != 0) {
        if (--nums[idx] < 0) {
          return false;
        }
        dir = -dir;
      }
      idx += dir;
    }
    return IntStream.of(nums).allMatch(x -> x == 0);
  }
}",1454805958
parallel_stream,parallel_stream,293,3639,java,"class Solution {
  public boolean isZeroArray(int[] nums, int[][] queries) {
    int n = nums.length;
    int[] c = new int[n + 1];
    for (int[] q : queries) {
      c[q[0]] += 1;
      if (q[1] + 1 < n) {
        c[q[1] + 1] -= 1;
      }
    }
    int sum = 0;
    for (int i = 0; i < n; i++) {
      sum += c[i];
      if (sum < nums[i]) {
        return false;
      }
    }
    return true;
  }
}",1454812520
parallel_stream,parallel_stream,293,3643,java,"class Solution {
  public int minZeroArray(int[] nums, int[][] queries) {
    int n = nums.length;
    int q = queries.length;
    int low = 0;
    int high = q;
    int ans = -1;
    while (low <= high) {
      int mid = low + (high - low) / 2;
      long[] c = new long[n + 1];
      IntStream.range(0, mid).forEach(i -> {
        c[queries[i][0]] += queries[i][2];
        if (queries[i][1] + 1 < n) {
          c[queries[i][1] + 1] -= queries[i][2];
        }
      });
      long sum = 0;
      boolean ok = true;
      for (int i = 0; i < n; i++) {
        sum += c[i];
        if (sum < nums[i]) {
          ok = false;
          break;
        }
      }
      if (ok) {
        ans = mid;
        high = mid - 1;
      } else {
        low = mid + 1;
      }
    }
    return ans;
  }
}",1454824879
santhoshsai85,santhoshsai85,294,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int sum = accumulate(nums.begin(), nums.end(), 0), cur = 0, ans = 0;
        for(int i : nums) {
            cur += i;
            if(!i) {
                if(cur == sum - cur) ans += 2;
                if(abs(sum - 2 * cur) == 1) ans += 1;
            }
        }
        return ans;
    }
};",1454813208
santhoshsai85,santhoshsai85,294,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        vector<int> diff(n + 1);
        for(auto i: queries) {
            diff[i[0]] += 1;
            diff[i[1] + 1] -= 1;
        }
        for(int i = 1; i <= n; i++) diff[i] += diff[i - 1];
        for(int i = 0; i < n; i++) {
            if(nums[i] > diff[i]) return false;
        }
        return true;
    }
};",1454821452
santhoshsai85,santhoshsai85,294,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& q) {
        int n = nums.size();
        
        
        auto check = [&](int k) {
            vector<int> diff(n + 1);
            for(int i = 0; i < k; i++) {
                
                diff[q[i][0]] += q[i][2];
                diff[q[i][1] + 1] -= q[i][2];
            }
            for(int i = 1; i <= n; i++) diff[i] += diff[i - 1];
            for(int i = 0; i < n; i++) {
                if(nums[i] > diff[i]) return false;
            }
            return true;
        };
        
        int l = 0, r = q.size(), ans = -1;
        while(l <= r) {
            int m = l + (r - l) / 2;
            if(check(m)) {
                ans  = m;
                r = m - 1;
            }
            else l = m + 1;
        }
        return ans;
    }
};",1454832108
Raihanul Bari Tanvir,rbtanvir142,295,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        n = len(nums)  # Length of the nums array
        valid_count = 0  # Counter for valid initial selections

        # Helper function to simulate the process
        def simulate(start, direction):
            # Make a copy of the nums array
            arr = nums[:]
            curr = start  # Current position
            move_dir = direction  # Current direction (1 for right, -1 for left)
            
            while 0 <= curr < n:  # While in bounds
                if arr[curr] == 0:  # If the current value is 0, move in the same direction
                    curr += move_dir
                else:  # If the current value is greater than 0
                    arr[curr] -= 1  # Decrement the current value
                    move_dir *= -1  # Reverse the direction
                    curr += move_dir  # Take a step in the new direction
            
            # Return True if all elements in the array are reduced to 0
            return all(val == 0 for val in arr)

        # Iterate over all positions in nums where nums[curr] == 0
        for start in range(n):
            if nums[start] == 0:
                # Simulate for both directions: left (-1) and right (+1)
                if simulate(start, 1):  # Moving right
                    valid_count += 1
                if simulate(start, -1):  # Moving left
                    valid_count += 1

        return valid_count",1454808196
Raihanul Bari Tanvir,rbtanvir142,295,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        n = len(nums)
        # Create a difference array to track range updates
        diff = [0] * (n + 1)

        # Process each query to update the difference array
        for l, r in queries:
            diff[l] += 1
            if r + 1 < n:
                diff[r + 1] -= 1

        # Apply the difference array to compute decrements for each index
        decrements = [0] * n
        running_sum = 0
        for i in range(n):
            running_sum += diff[i]
            decrements[i] = running_sum

        # Check if the decrements match the required values in nums
        for i in range(n):
            if decrements[i] < nums[i]:
                return False

        return True",1454820440
Raihanul Bari Tanvir,rbtanvir142,295,3643,python3,"class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        n = len(nums)
        m = len(queries)
        
        def can_zero_out(k):
            # Check if nums can be zeroed out with the first k queries
            needs = nums[:]
            difference = [0] * (n + 1)  # Difference array to track decrements
            
            for i in range(k):
                li, ri, vali = queries[i]
                difference[li] += vali
                if ri + 1 < n:
                    difference[ri + 1] -= vali
            
            # Apply the difference array to calculate the actual decrements
            current_decrement = 0
            for j in range(n):
                current_decrement += difference[j]
                needs[j] -= current_decrement
                if needs[j] > 0:  # If we can't zero out this index
                    return False
            
            return True
    
        # Binary search on the number of queries
        left, right = 0, m
        result = -1
        while left <= right:
            mid = (left + right) // 2
            if can_zero_out(mid):
                result = mid
                right = mid - 1
            else:
                left = mid + 1
    
        return result",1454824934
KalinaShell,Cobalt_3902,296,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        # bisect equal parts
        s=sum(nums)
        c=0
        res=0
        for i in nums:
            c+=i
            if (c==s//2 or ((s%2)==1 and (c*2-1)==s)) and i==0:
                # print(s)
                res+= 2 if ((s%2)==0) else 1
        return res",1454812680
KalinaShell,Cobalt_3902,296,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        # construct psudo decrease
        n=len(nums)
        pfx=[0]*(n+1)
        for s,e in queries:
            pfx[s]+=1
            pfx[e+1]-=1
        c=pfx[0]
        # print(pfx,nums)
        for i in range(n):
            if nums[i]>c:
                return False
            c+=pfx[i+1]
        return True",1454817845
KalinaShell,Cobalt_3902,296,3643,python3,"class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        # construct psudo decrease
        n=len(nums)
        def canDone(t):
            pfx=[0]*(n+1)
            for s,e,v in queries[:t]:
                pfx[s]+=v
                pfx[e+1]-=v
            c=pfx[0]
            # print(pfx,nums)
            for i in range(n):
                if nums[i]>c:
                    return False
                c+=pfx[i+1]
            return True
        if not canDone(len(queries)): return -1
        lo,hi=0,len(queries)
        while lo<hi:
            mid=(lo+hi)//2
            if canDone(mid):
                hi=mid;
            else:
                lo=mid+1
        return lo
        ",1454825008
sguaaa,sguaaa,297,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        total = sum(nums)
        low = total // 2
        high = (total + 1) // 2
        curr = 0
        res = 0
        for x in nums:
            if x == 0:
                if curr == low:
                    res += 1
                if curr == high:
                    res += 1
            
            curr += x
            if curr > high:
                break
        return res
        ",1454810264
sguaaa,sguaaa,297,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        starts = [x[0] for x in queries]
        ends = [x[1] for x in queries]
        starts.sort(key=lambda x: -x)
        ends.sort(key=lambda x: -x)
        
        moves = 0
        for i, x in enumerate(nums):
            while starts and starts[-1] == i:
                starts.pop()
                moves += 1
            
            if x > moves:
                return False
            
            while ends and ends[-1] == i:
                ends.pop()
                moves -= 1
                
        return True
            ",1454818052
sguaaa,sguaaa,297,3643,python3,"class Solution:
    def helper(self, nums, queries, m):
        starts = [(x[0], x[2]) for x in queries[:m]]
        ends = [(x[1], x[2]) for x in queries[:m]]
        starts.sort(key=lambda x: -x[0])
        ends.sort(key=lambda x: -x[0])

        moves = 0
        for i, x in enumerate(nums):
            while starts and starts[-1][0] == i:
                _, v = starts.pop()
                moves += v

            if x > moves:
                return False

            while ends and ends[-1][0] == i:
                _, v = ends.pop()
                moves -= v
                
        return True
    
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        l, r = 0, len(queries) + 1
        
        while l < r:
            m = (l + r) // 2
            res = self.helper(nums, queries, m)
            # print(m, res)
            if res:
                r = m
            else:
                l = m + 1
                
        if l > len(queries):
            return -1
        else:
            return l
        
            
                
        
        ",1454832202
Xiaoyang Liu,monoid_coda,298,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        def sim(init, dir):
            new_nums = nums[:]
            curr = init
            while 0 <= curr < len(new_nums):
                if new_nums[curr] > 0:
                    new_nums[curr] -= 1
                    dir = not dir

                if dir:
                    curr += 1
                else:
                    curr -= 1
            return sum(new_nums) == 0
    
        result = 0
        for i in range(len(nums)):
            if nums[i] != 0:
                continue
            if sim(i, False):
                result += 1
            if sim(i, True):
                result += 1
        return result",1454816000
Xiaoyang Liu,monoid_coda,298,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        diffs = [nums[0]]
        for i in range(1, len(nums)):
            diffs.append(nums[i] - nums[i - 1])
        diffs.append(0)
        for i, j in queries:
            diffs[i] -= 1
            diffs[j + 1] += 1
        prefix = list(accumulate(diffs[:-1]))
        for i in prefix:
            if i > 0:
                return False
        return True",1454826163
Xiaoyang Liu,monoid_coda,298,3643,python3,"class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        @cache
        def solve(k):
            diffs = [nums[0]]
            for i in range(1, len(nums)):
                diffs.append(nums[i] - nums[i - 1])
            diffs.append(0)
            for i, j, val in queries[:k]:
                diffs[i] -= val
                diffs[j + 1] += val
            for i in accumulate(diffs[:-1]):
                if i > 0:
                    return False
            return True

        if not solve(len(queries)):
            return -1

        lo = 0
        hi = len(queries)
        result = hi
        while lo < hi:
            mid = (lo + hi) // 2
            if solve(mid):
                hi = mid
                result = min(result, mid)
            else:
                lo = mid + 1
        return lo
    ",1454832285
killer-whale,killer-whale,301,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        n = len(nums)
        def can(i, dx):
            x = nums[:]
            while 0 <= i < n:
                if x[i] == 0:
                    i += dx
                else:
                    dx *= -1
                    x[i] -= 1
                    i += dx
            return sum(x) == 0
        res = 0
        for i in range(len(nums)):
            if nums[i] == 0:
                for dx in -1, 1:
                    res += can(i, dx)
        return res",1454823011
killer-whale,killer-whale,301,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        st = LazySegmentTree(nums)
        for i, (l, r) in enumerate(queries):
            st.add(l, r + 1, -1)
        return st.query(0, len(nums)) <= 0
        
class LazySegmentTree:
    def __init__(self, data, default=0, func=max):
        """"""initialize the lazy segment tree with data""""""
        self._default = default
        self._func = func

        self._len = len(data)
        self._size = _size = 1 << (self._len - 1).bit_length()
        self._lazy = [0] * (2 * _size)

        self.data = [default] * (2 * _size)
        self.data[_size:_size + self._len] = data
        for i in reversed(range(_size)):
            self.data[i] = func(self.data[i + i], self.data[i + i + 1])

    def __len__(self):
        return self._len

    def _push(self, idx):
        """"""push query on idx to its children""""""
        # Let the children know of the queries
        q, self._lazy[idx] = self._lazy[idx], 0

        self._lazy[2 * idx] += q
        self._lazy[2 * idx + 1] += q
        self.data[2 * idx] += q
        self.data[2 * idx + 1] += q

    def _update(self, idx):
        """"""updates the node idx to know of all queries applied to it via its ancestors""""""
        for i in reversed(range(1, idx.bit_length())):
            self._push(idx >> i)

    def _build(self, idx):
        """"""make the changes to idx be known to its ancestors""""""
        idx >>= 1
        while idx:
            self.data[idx] = self._func(self.data[2 * idx], self.data[2 * idx + 1]) + self._lazy[idx]
            idx >>= 1

    def add(self, start, stop, value):
        """"""lazily add value to [start, stop)""""""
        start = start_copy = start + self._size
        stop = stop_copy = stop + self._size
        while start < stop:
            if start & 1:
                self._lazy[start] += value
                self.data[start] += value
                start += 1
            if stop & 1:
                stop -= 1
                self._lazy[stop] += value
                self.data[stop] += value
            start >>= 1
            stop >>= 1

        # Tell all nodes above of the updated area of the updates
        self._build(start_copy)
        self._build(stop_copy - 1)

    def query(self, start, stop, default=0):
        """"""func of data[start, stop)""""""
        start += self._size
        stop += self._size

        # Apply all the lazily stored queries
        self._update(start)
        self._update(stop - 1)

        res = default
        while start < stop:
            if start & 1:
                res = self._func(res, self.data[start])
                start += 1
            if stop & 1:
                stop -= 1
                res = self._func(res, self.data[stop])
            start >>= 1
            stop >>= 1
        return res

    def __repr__(self):
        return ""LazySegmentTree({0})"".format(self.data)",1454823470
killer-whale,killer-whale,301,3643,python3,"class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        st = LazySegmentTree(nums)
        if st.query(0, len(nums)) <= 0:
            return 0
        for i, (l, r, val) in enumerate(queries):
            st.add(l, r + 1, -val)
            if st.query(0, len(nums)) <= 0:
                return i + 1
        return -1

class LazySegmentTree:
    def __init__(self, data, default=0, func=max):
        """"""initialize the lazy segment tree with data""""""
        self._default = default
        self._func = func

        self._len = len(data)
        self._size = _size = 1 << (self._len - 1).bit_length()
        self._lazy = [0] * (2 * _size)

        self.data = [default] * (2 * _size)
        self.data[_size:_size + self._len] = data
        for i in reversed(range(_size)):
            self.data[i] = func(self.data[i + i], self.data[i + i + 1])

    def __len__(self):
        return self._len

    def _push(self, idx):
        """"""push query on idx to its children""""""
        # Let the children know of the queries
        q, self._lazy[idx] = self._lazy[idx], 0

        self._lazy[2 * idx] += q
        self._lazy[2 * idx + 1] += q
        self.data[2 * idx] += q
        self.data[2 * idx + 1] += q

    def _update(self, idx):
        """"""updates the node idx to know of all queries applied to it via its ancestors""""""
        for i in reversed(range(1, idx.bit_length())):
            self._push(idx >> i)

    def _build(self, idx):
        """"""make the changes to idx be known to its ancestors""""""
        idx >>= 1
        while idx:
            self.data[idx] = self._func(self.data[2 * idx], self.data[2 * idx + 1]) + self._lazy[idx]
            idx >>= 1

    def add(self, start, stop, value):
        """"""lazily add value to [start, stop)""""""
        start = start_copy = start + self._size
        stop = stop_copy = stop + self._size
        while start < stop:
            if start & 1:
                self._lazy[start] += value
                self.data[start] += value
                start += 1
            if stop & 1:
                stop -= 1
                self._lazy[stop] += value
                self.data[stop] += value
            start >>= 1
            stop >>= 1

        # Tell all nodes above of the updated area of the updates
        self._build(start_copy)
        self._build(stop_copy - 1)

    def query(self, start, stop, default=0):
        """"""func of data[start, stop)""""""
        start += self._size
        stop += self._size

        # Apply all the lazily stored queries
        self._update(start)
        self._update(stop - 1)

        res = default
        while start < stop:
            if start & 1:
                res = self._func(res, self.data[start])
                start += 1
            if stop & 1:
                stop -= 1
                res = self._func(res, self.data[stop])
            start >>= 1
            stop >>= 1
        return res

    def __repr__(self):
        return ""LazySegmentTree({0})"".format(self.data)",1454825224
res,Res1StAnce7,305,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        n = len(nums)
        zeros = [i for i, x in enumerate(nums) if x == 0]
        cnt = 0
        for z in zeros:
            for d in [1, -1]:
                arr = nums.copy()
                c, dir = z, d
                while 0 <= c < n:
                    if arr[c] == 0:
                        c += dir
                    elif arr[c] > 0:
                        arr[c] -=1
                        dir *= -1
                        c += dir
                if all(x == 0 for x in arr):
                    cnt +=1
        return cnt",1454806493
res,Res1StAnce7,305,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        n = len(nums)
        count = [0]*(n+1)
        for l, r in queries:
            count[l] +=1
            if r+1 < n:
                count[r+1] -=1
        for i in range(1, n):
            count[i] += count[i-1]
        for i in range(n):
            if count[i] < nums[i]:
                return False
        return True",1454807381
res,Res1StAnce7,305,3643,python3,"class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        n, m = len(nums), len(queries)
        def possible(k):
            acc = [0]*(n+1)
            for i in range(k):
                l, r, v = queries[i]
                acc[l] += v
                if r+1 < n:
                    acc[r+1] -= v
            total = 0
            for i in range(n):
                total += acc[i]
                if total < nums[i]:
                    return False
            return True
        low, high, res = 0, m, -1
        while low <= high:
            mid = (low + high) // 2
            if possible(mid):
                res, high = mid, mid -1
            else:
                low = mid +1
        return res",1454818408
Jaydatt Dholakiya,Jaydatt_D,306,3616,cpp,"class Solution {
public:
    int calc(int curr, vector<int>&nums, int flg){
        vector<int> temp = nums;
        int n = temp.size();
        int dir = (flg == 1) ? 1 : -1;
        
        while (curr >= 0 && curr < n) {
            if (temp[curr] == 0) {
                curr += dir;
            } else {
                temp[curr]--;
                dir = -dir; 
                curr += dir;
            }
        }
        
        for (int x : temp) {
            if (x != 0) return 0;
        }
        return 1;
    }
    int countValidSelections(vector<int>& nums) {
        int ans = 0;
        for(int i = 0; i < nums.size(); i++){
            if(nums[i] == 0){
                ans += calc(i, nums, 1);
                ans += calc(i, nums, 0);
            }
        }
        return ans;
    }
};",1454814456
Jaydatt Dholakiya,Jaydatt_D,306,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        vector<int> hsh(n + 1, 0);
        for(auto it : queries){
            int l = it[0], r = it[1] + 1;
            hsh[l]++, hsh[r]--;
        }
        for(int i = 1; i < n; i++) hsh[i] += hsh[i - 1];
        for(int i = 0; i < n; i++){
            if(hsh[i] < nums[i]) return false;
        }
        return true;
    }
};",1454818528
Jaydatt Dholakiya,Jaydatt_D,306,3643,cpp,"class Solution {
public:
    bool check(int k, vector<int>&nums, vector<vector<int>>& queries, int n){
        vector<int> hsh(n + 1, 0);
        for(int i = 0; i < k; i++){
            int l = queries[i][0], r = queries[i][1] + 1;
            hsh[l] += queries[i][2], hsh[r] -= queries[i][2];
        }
        for(int i = 1; i < n; i++) hsh[i] += hsh[i - 1];
        for(int i = 0; i < n; i++) if(hsh[i] < nums[i]) return false;
        return true;
    }
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int ans = -1;
        int n = nums.size();
        int lo = 0, hi = queries.size();
        while(lo <= hi){
            int mid = (lo + hi) / 2;
            bool ok = check(mid, nums, queries, n);
            if(ok){
                ans = mid;
                hi = mid - 1;
            }else{
                lo = mid + 1;
            }
        }
        return ans;
    }
};",1454825399
JuneChain,JuneChain,307,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int n(nums.size());
        vector<int> cum(n+1);
        cum[n] = 0;
        partial_sum(nums.crbegin(), nums.crend(), cum.rbegin()+1);
        int ans(0);
        for (int i = 0; i < n; i ++) {
            if (nums[i] != 0) {
                continue;
            }
            int nL = cum[0] - cum[i];
            int nR = cum[i+1] - cum[n];
            if (nL == nR) {
                ans += 2;
            } else if (nL - nR == 1 || nR - nL == 1) {
                ans ++;
            }
        }
        return ans;
    }
};",1454812646
JuneChain,JuneChain,307,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n(nums.size());
        vector<int> diff(n+1);
        for (auto & q : queries) {
            int l = q[0];
            int r = q[1]+1;
            diff[l] --;
            diff[r] ++;
        }
        partial_sum(diff.begin(), diff.end(), diff.begin());
        for (int i = 0; i < n; i ++) {
            if (nums[i] + diff[i] > 0) {
                return false;
            }
        }
        return true;
    }
};",1454819346
JuneChain,JuneChain,307,3643,cpp,"class Solution {
private:
    bool isZeroArray(const vector<int>& nums, const vector<vector<int>>& queries, int k) {
        int n(nums.size());
        vector<int> diff(n+1);
        for (int i = 0; i < k; i ++) {
            int l = queries[i][0];
            int r = queries[i][1]+1;
            diff[l] -= queries[i][2];
            diff[r] += queries[i][2];
        }
        partial_sum(diff.begin(), diff.end(), diff.begin());
        for (int i = 0; i < n; i ++) {
            if (nums[i] + diff[i] > 0) {
                return false;
            }
        }
        return true;
    }
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int l(0), r(queries.size());
        if (!isZeroArray(nums, queries, r)) {
            return -1;
        }
        while (r - l > 1) {
            int m = (l + r) / 2;
            if (!isZeroArray(nums, queries, m)) {
                l = m;
            } else {
                r = m;
            }
        }
        if (isZeroArray(nums, queries, l)) {
            return l;
        } else {
            return r;
        }
    }
};",1454832709
hulot,hulot,309,3616,java,"class Solution {
    public int countValidSelections(int[] nums) {
        int res = 0, n = nums.length;
        for (int i = 0; i < n; i++) {
            if (nums[i] == 0) {
                res += check(Arrays.copyOf(nums, n), i, 1) ? 1 : 0;
                res += check(Arrays.copyOf(nums, n), i, -1) ? 1: 0;
            }
        }
        return res;
    }
    
    private boolean check(int[] nums, int curr, int dir) {
        int n = nums.length;
        while (curr >= 0 && curr < n) {
            if (nums[curr] > 0) {
                nums[curr]--;
                dir = -dir;
            }
            curr += dir;
        }
        return Arrays.equals(nums, new int[n]);
    }
}",1454815307
hulot,hulot,309,3639,java,"class Solution {
    public boolean isZeroArray(int[] nums, int[][] queries) {
        int n = nums.length;
        int[] diff = new int[n];
        for (int[] q : queries) {
            diff[q[0]]--;
            if (q[1] < n-1)
            diff[q[1]+1]++;
        }
        long currDiff = 0;
        for (int i = 0; i < n; i++) {
            currDiff += diff[i];
            if (nums[i] + currDiff > 0) return false;
        }
        return true;
    }
}",1454823907
hulot,hulot,309,3643,java,"class Solution {
    public int minZeroArray(int[] nums, int[][] queries) {
        if (!isZeroArray(nums, queries, queries.length)) return -1;
        int lo = 0, hi = queries.length;
        while (lo < hi) {
            int mid = lo + (hi - lo) / 2;
            if (isZeroArray(nums, queries, mid)) {
                hi = mid;
            } else {
                lo = mid + 1;
            }
        }
        return lo;
    }
    
    private boolean isZeroArray(int[] nums, int[][] queries, int k) {
        int n = nums.length;
        int[] diff = new int[n];
        for (int i = 0; i < k; i++) {
            int[] q = queries[i];
            diff[q[0]] -= q[2];
            if (q[1] < n-1)
            diff[q[1]+1] += q[2];
        }
        long currDiff = 0;
        for (int i = 0; i < n; i++) {
            currDiff += diff[i];
            if (nums[i] + currDiff > 0) return false;
        }
        return true;
    }

}",1454832758
Jayant Sharma,thedark_JS,310,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int n = nums.size();
        vector<int> zero_pos;
        
        for(int i = 0 ; i < n ; i++){
            if(nums[i] == 0){
                zero_pos.push_back(i);
            }
        }
        
        int ans = 0;
        for(int i = 0 ; i < zero_pos.size() ; i++){
            int ind = zero_pos[i];
            for(int dir = 0 ; dir < 2 ; dir++){
                
                // start with an ind and dir;
                vector<int> curr = nums;
                int cur_ind = ind;
                int cur_dir = dir;
                //cout<<""okay ""<<cur_ind<<""  ""<<cur_dir<<endl;
                while(1){
                    if(cur_ind >= n || cur_ind < 0) break;
                    if(curr[cur_ind] == 0){
                        if(cur_dir == 0){
                            cur_ind--;
                        }
                        else{
                            cur_ind++;
                        }
                    }
                    else{
                        curr[cur_ind]--;
                        
                        //cout<<""okay noe ""<<cur_ind<<"" ""<<curr[cur_ind]<<endl;
                        cur_dir = 1 - cur_dir;
                        if(cur_dir == 0){
                            cur_ind--;
                        }
                        else{
                            cur_ind++;
                        }
                    }
                }
                bool ok = true;
                for(int z = 0 ; z < n ; z++){
                    if(curr[z] != 0){
                        ok = false;
                        //cout<<""breaks at ""<<z<<endl;
                        break;
                    }
                }
                if(ok) ans++;
                
            }
        }
        
        return ans;
        
    }
};",1454832791
Jayant Sharma,thedark_JS,310,3639,cpp,"class Solution {
public:
     const int M = 2e5 + 5;
int MINN = -1;
int segTree[2000004], lazy[2000004] , arr[500002];


void merge(int node){
    segTree[node] = max(segTree[2*node] , segTree[2*node + 1]);
}

void pushDown(int node , int l , int r){
    segTree[node] += lazy[node];
    if(l != r){
        lazy[2*node] += lazy[node];
        lazy[2*node + 1] += lazy[node];
    }
    lazy[node] = 0;
}

void build(int node , int l , int r){
    if(l > r) return;
    if(l == r) {
        segTree[node] = arr[l];
        return;
    }
    int mid = (l + r)/2;

    build(2*node , l , mid);
    build(2*node + 1 , mid + 1 , r);

    merge(node);
}

void update(int node , int l , int r , int ql , int qr , int add){
    if(l > r) return;
    pushDown(node , l , r);
    if(ql > qr || l > qr || ql > r) return;
    if(l >= ql && r <= qr){
        lazy[node] += add;
        pushDown(node , l , r);
        return;
    }
    int mid = (l + r)/2;

    update(2*node , l , mid , ql , qr , add);
    update(2*node + 1 , mid + 1 , r , ql , qr , add);

    merge(node);
}

int query(int node , int l , int r , int ql , int qr){
    if(l > r || ql > qr || l > qr || ql > r) return MINN;
    pushDown(node , l , r);
    if(l >= ql && r <= qr){
        return segTree[node];
    }

    int mid = (l + r)/2;
    int one = query(2*node , l , mid , ql , qr);
    int two = query(2*node + 1 , mid + 1 , r , ql , qr);

    return max(one , two);
}

    
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        for(int i = 0 ; i < n ; i++){
            arr[i + 1] = nums[i];
        }
        
        build(1, 1, n);
        int ans = -1;
        
        for(int i = 0 ; i < queries.size() ; i++){
            
            //cout<<""so at ""<<i<<"" ""<<query(1, 1, n, 1, n)<<endl;
            if(query(1, 1, n, 1, n) <= 0){
                ans = i;
                break;
            }
            
            int l = queries[i][0] + 1;
            int r = queries[i][1] + 1;
            int v = 1;
            
            update(1, 1, n, l, r, -v);
        }
        
        if(ans == -1 && query(1, 1, n, 1, n) <= 0){
                ans = queries.size();
            }
        if(ans == -1) return false;
        return true;
    }
};",1454815272
Jayant Sharma,thedark_JS,310,3643,cpp,"class Solution {
public:
    
    const int M = 2e5 + 5;
int MINN = -1;
int segTree[2000004], lazy[2000004] , arr[500002];


void merge(int node){
    segTree[node] = max(segTree[2*node] , segTree[2*node + 1]);
}

void pushDown(int node , int l , int r){
    segTree[node] += lazy[node];
    if(l != r){
        lazy[2*node] += lazy[node];
        lazy[2*node + 1] += lazy[node];
    }
    lazy[node] = 0;
}

void build(int node , int l , int r){
    if(l > r) return;
    if(l == r) {
        segTree[node] = arr[l];
        return;
    }
    int mid = (l + r)/2;

    build(2*node , l , mid);
    build(2*node + 1 , mid + 1 , r);

    merge(node);
}

void update(int node , int l , int r , int ql , int qr , int add){
    if(l > r) return;
    pushDown(node , l , r);
    if(ql > qr || l > qr || ql > r) return;
    if(l >= ql && r <= qr){
        lazy[node] += add;
        pushDown(node , l , r);
        return;
    }
    int mid = (l + r)/2;

    update(2*node , l , mid , ql , qr , add);
    update(2*node + 1 , mid + 1 , r , ql , qr , add);

    merge(node);
}

int query(int node , int l , int r , int ql , int qr){
    if(l > r || ql > qr || l > qr || ql > r) return MINN;
    pushDown(node , l , r);
    if(l >= ql && r <= qr){
        return segTree[node];
    }

    int mid = (l + r)/2;
    int one = query(2*node , l , mid , ql , qr);
    int two = query(2*node + 1 , mid + 1 , r , ql , qr);

    return max(one , two);
}

    
    
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        
        int n = nums.size();
        for(int i = 0 ; i < n ; i++){
            arr[i + 1] = nums[i];
        }
        
        build(1, 1, n);
        int ans = -1;
        
        for(int i = 0 ; i < queries.size() ; i++){
            
            //cout<<""so at ""<<i<<"" ""<<query(1, 1, n, 1, n)<<endl;
            if(query(1, 1, n, 1, n) <= 0){
                ans = i;
                break;
            }
            
            int l = queries[i][0] + 1;
            int r = queries[i][1] + 1;
            int v = queries[i][2];
            
            update(1, 1, n, l, r, -v);
        }
        
        if(ans == -1 && query(1, 1, n, 1, n) <= 0){
                ans = queries.size();
            }
        
        return ans;
        
    }
};",1454812990
rip.nsk,rip,312,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& X) {
        int RR=0;
        for(int b=0;b<X.size();++b)if(!X[b]){
            for(int d:{-1,1}){
                auto x=X;
                for(int p=b;;){
                    p+=d;if(p<0||p==x.size())break;
                    if(x[p]){--x[p];d=-d;}
                }
                RR+=accumulate(x.begin(),x.end(),0)==0;
            }
        }
        return RR;
    }
};",1454812416
rip.nsk,rip,312,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& X, vector<vector<int>>& Q) {
        vector<int>D(X.size()+1);
        for(int q=0;q<Q.size();++q){
            D[Q[q][0]]+=1;
            if(Q[q][1]<X.size())D[Q[q][1]+1]-=1;
        }
        int d=0;
        for(int i=0;i<X.size();++i){
            d+=D[i];if(X[i]>d)return-0;
        }
        return+1;
    }
};
",1454832829
rip.nsk,rip,312,3643,cpp,"template<typename f_t, typename i_t>pair<i_t, int>BS(i_t l, i_t r, f_t f) {
    while(1) {
        if(l>r)return{l,0};auto m=l+(r-l)/2;auto c=f(m);
        if(c>0)l=m+1;else if(c<0)r=m-1;else return{m,1};
    }
}
class Solution {
public:
    int minZeroArray(vector<int>&X, vector<vector<int>>& Q) {
        uint RR=-1;int S=Q.size();
        BS(0,S,[&](uint s){
            vector<int>D(X.size()+1);
            for(int q=0;q<s;++q){
                D[Q[q][0]]+=Q[q][2];
                if(Q[q][1]<X.size())D[Q[q][1]+1]-=Q[q][2];
            }
            int d=0;
            for(int i=0;i<X.size();++i){
                d+=D[i];if(X[i]>d)return+1;
            }
            RR=min(RR,s);return-1;
        });
        return RR;
    }
};",1454828066
HarshaNP,NastyWaterEspresso,313,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int n = nums.size();
        int validCount = 0;

        auto simulate = [&](int start, int direction) -> bool {
            vector<int> numsCopy = nums;
            int curr = start;

            while (curr >= 0 && curr < n) {
                if (numsCopy[curr] == 0) {
                    curr += direction;
                } else {
                    numsCopy[curr]--;
                    direction = -direction;
                    curr += direction;
                }
            }

            for (int num : numsCopy) {
                if (num != 0) return false;
            }
            return true;
        };

        for (int i = 0; i < n; i++) {
            if (nums[i] == 0) {
                if (simulate(i, 1)) validCount++;
                if (simulate(i, -1)) validCount++;
            }
        }

        return validCount;
    }
};
",1454809709
HarshaNP,NastyWaterEspresso,313,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        vector<int> diff(n + 1, 0);
        
        for (const auto& query : queries) {
            int l = query[0];
            int r = query[1];
            diff[l]--;
            if (r + 1 < n) {
                diff[r + 1]++;
            }
        }
        
        int current = 0;
        for (int i = 0; i < n; ++i) {
            current += diff[i];
            nums[i] += current;
            if (nums[i] > 0) {
                return false;
            }
        }
        return true;
    }
};
",1454813753
HarshaNP,NastyWaterEspresso,313,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        int allZero=1; for(int num:nums) if(num>0) allZero=0;
        if(allZero) return 0;
        auto isPossible = [&](int k) {
            vector<int> diff(n + 1, 0);
            for (int i = 0; i < k; i++) {
                int l = queries[i][0], r = queries[i][1], val = queries[i][2];
                diff[l] -= val;
                if (r + 1 < n) {
                    diff[r + 1] += val;
                }
            }
            int curr = 0;
            for (int i = 0; i < n; i++) {
                curr += diff[i];
                if (nums[i] + curr > 0) {
                    return false;
                }
            }
            return true;
        };
        
        int left = 1, right = queries.size(), result = -1;
        
        while (left <= right) {
            int mid = (left + right) / 2;
            if (isPossible(mid)) {
                result = mid;
                right = mid - 1;
            } else {
                left = mid + 1;
            }
        }
        
        return result;
    }
};
",1454818635
Sushanth,sushanth24,314,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int n = nums.size();
        vector<int> suff(n,0);
        suff[n-1] = nums[n-1];
        for(int i = n-2;i>=0;i--) {
            suff[i] = suff[i+1]+nums[i];
        }
        int preff = 0 , ans = 0;
        for(int i = 0;i<n;i++) {
            
            if(nums[i] == 0) {
                if(preff == suff[i]) {
                    ans+=2;
                }
                if(abs(suff[i]-preff) == 1) {
                    ans+=1;
                }
            }
            preff+=nums[i];
        }
        return ans;
    }
};",1454810839
Sushanth,sushanth24,314,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& qu) {
        int n = nums.size();
        vector<int> temp(n+1,0);
        for(int i = 0;i<qu.size();i++) {
            temp[qu[i][0]]++;
            temp[qu[i][1]+1]--;
        }
        for(int i = 1;i<=n;i++) {
            temp[i]+=temp[i-1];
        }
        for(int i = 0;i<n;i++) {
            if(nums[i]>temp[i]) return false;
        }
        return true;
        
    }
};",1454817170
Sushanth,sushanth24,314,3643,cpp,"class Solution {
public:
    int check(int k,vector<int>& nums, vector<vector<int>>& qu) {
        int n = nums.size();
        vector<long long> temp(n+1,0);
        for(int i = 0;i<k;i++) {
            temp[qu[i][0]]+=qu[i][2];
            temp[qu[i][1]+1]-=qu[i][2];
        }
        for(int i = 1;i<=n;i++) {
            temp[i]+=temp[i-1];
        }
        for(int i = 0;i<n;i++) {
            if(nums[i]>temp[i]) return false;
        }
        return true;
    }
    int minZeroArray(vector<int>& nums, vector<vector<int>>& qu) {
        int n = qu.size();
        int l = 0, r = n;
        while(r-l>1) {
            int mid = l+(r-l)/2;
            if(check(mid,nums,qu)) {
                r = mid;
            } else {
                l = mid+1;
            }
        }
        if(check(l,nums,qu)) return l;
        if(check(r,nums,qu)) return r;
        
        return -1;
        
    }
};",1454832847
Rachana Chukala,rachanachukala,316,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        fp = [0]*(len(nums)+1)
        bp = [0]*(len(nums)+1)
        for i in range(len(nums)):
            fp[i+1] = fp[i] + nums[i]
        for i in range(len(nums)-1, -1, -1):
            bp[i] = bp[i+1]+nums[i]
        cou = 0
        for i in range(len(nums)):
            v = abs(fp[i]-bp[i])
            if nums[i]==0 and v<=1:
                cou += 1 if v==1 else 2
        return cou",1454812609
Rachana Chukala,rachanachukala,316,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        diff = [0]*(len(nums)+1)
        for l, r in queries:
            diff[l] -= 1
            diff[r+1] += 1
        cs = 0
        for i in range(len(nums)):
            cs += diff[i]
            nums[i] += cs
            if nums[i]>0:
                return False
        return True",1454825299
Rachana Chukala,rachanachukala,316,3643,python3,"class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        def ispos(n):
            diff = [0]*(len(nums)+1)
            for i in range(n):
                diff[queries[i][0]] -= queries[i][2]
                diff[queries[i][1]+1] += queries[i][2]
            cs = 0
            for i in range(len(nums)):
                cs += diff[i]
                if nums[i]+cs>0:
                    return False
            return True
        if not ispos(len(queries)):
            return -1
        low, high = 0, len(queries)
        ans = high
        while low<=high:
            mid = (low+high)//2
            if ispos(mid):
                ans = mid
                high = mid-1
            else:
                low = mid+1
        return ans",1454833188
Sandeep Maurya,sandeep413,317,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int pre = 0;
        for(auto a:nums)
        {
            pre+=a;
        }
        int ans =0;
        int p=0;
        for(auto a:nums)
        {
            p+=a;
            pre-=a;
            if(a==0 && pre==p)
            {
                ans+=2;
            }
            if(a==0 && abs(pre-p)==1)
            {
                ans+=1;
            }
        }
        return ans;
    }
};",1454808540
Sandeep Maurya,sandeep413,317,3639,cpp,"typedef long long ll;
typedef vector<int> vi;
typedef vector<ll> vl;
typedef vector<string> vs;
typedef pair<int, int> pi;
typedef vector<vector<int>> vvi;
typedef vector<vector<ll>> vvl;
typedef vector<pair<int, int>> vpi;
typedef vector<pair<ll, ll>> vpl;
#define pb push_back
#define pp pop_back
#define fori(i, a, b) for (int i = a; i < b; i++)
#define forl(i, a, b) for (ll i = a; i < b; i++)
#define asc(v) sort(v.begin(), v.end())
#define dsc(v) sort(v.rbegin(), v.rend())
#define rev(v) reverse(v.begin(), v.end())
#define print(v)     \
    for (auto a : v) \
        cout << a << "" "";
ll __lcm(ll a, ll b)
{
    return (a / __gcd(a, b)) * b;
}
ll mod = 1e9 + 7;
class Solution {
public:
    bool check(vector<int>& nums, vector<vector<int>>& q,int mid)
    {
        vector<ll> curr(nums.size(),0);
        for(int i=0;i<mid;i++)
        {
            int x=q[i][0],y=q[i][1],val=1;
            curr[x]+=val;
            if(y<nums.size()-1) curr[y+1]-=val;
        }
        fori(i,1,nums.size()) curr[i]+=curr[i-1];
        // cout<<mid<<endl;
        // print(curr); cout<<endl;
        fori(i,0,nums.size())
        {
            if(1ll*nums[i]>curr[i]) return false;
        }
        return true;
    }
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& q) {
        int ans = -1,low=0,high=q.size();
        
        while(low<=high)
        {
            int mid = (low+high)/2;
            if(check(nums,q,mid))
            {
                ans = mid; high =mid-1;
            }
            else{
                low = mid+1;
            }
        }
        return ans>=0;
    }
};",1454825857
Sandeep Maurya,sandeep413,317,3643,cpp,"typedef long long ll;
typedef vector<int> vi;
typedef vector<ll> vl;
typedef vector<string> vs;
typedef pair<int, int> pi;
typedef vector<vector<int>> vvi;
typedef vector<vector<ll>> vvl;
typedef vector<pair<int, int>> vpi;
typedef vector<pair<ll, ll>> vpl;
#define pb push_back
#define pp pop_back
#define fori(i, a, b) for (int i = a; i < b; i++)
#define forl(i, a, b) for (ll i = a; i < b; i++)
#define asc(v) sort(v.begin(), v.end())
#define dsc(v) sort(v.rbegin(), v.rend())
#define rev(v) reverse(v.begin(), v.end())
#define print(v)     \
    for (auto a : v) \
        cout << a << "" "";
ll __lcm(ll a, ll b)
{
    return (a / __gcd(a, b)) * b;
}
ll mod = 1e9 + 7;
class Solution {
public:
    bool check(vector<int>& nums, vector<vector<int>>& q,int mid)
    {
        vector<ll> curr(nums.size(),0);
        for(int i=0;i<mid;i++)
        {
            int x=q[i][0],y=q[i][1],val=q[i][2];
            curr[x]+=val;
            if(y<nums.size()-1) curr[y+1]-=val;
        }
        fori(i,1,nums.size()) curr[i]+=curr[i-1];
        // cout<<mid<<endl;
        // print(curr); cout<<endl;
        fori(i,0,nums.size())
        {
            if(1ll*nums[i]>curr[i]) return false;
        }
        return true;
    }
    int minZeroArray(vector<int>& nums, vector<vector<int>>& q) {
        int ans = -1,low=0,high=q.size();
        
        while(low<=high)
        {
            int mid = (low+high)/2;
            if(check(nums,q,mid))
            {
                ans = mid; high =mid-1;
            }
            else{
                low = mid+1;
            }
        }
        return ans;
    }
};",1454822504
wisdompeak,wisdompeak,318,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) 
    {
        int ret = 0;
        for (int i=0; i<nums.size(); i++)
        {
            if (nums[i]==0 && isOK(nums, i, 1))
                ret++;
            if (nums[i]==0 && isOK(nums, i, 0))
                ret++;
        }
            
        
        return ret;        
    }
    
    bool isOK(vector<int> nums, int start, int dir) 
    {
        int i = start;
        int n =  nums.size();        
        while (i>=0 && i<n)
        {
            if (nums[i]==0)
            {
                if (dir == 1)
                    i++;
                else
                    i--;
            }
            else
            {
                nums[i]--;
                dir = 1-dir;
                if (dir==1) i++;
                else i--;
            }
        }
        for (int i=0; i<n; i++)
            if (nums[i]!=0)
                return false;
        // cout<<start<<endl;
        return true;
    }
};",1454810931
wisdompeak,wisdompeak,318,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) 
    {
        int n = nums.size();
        vector<int>diff(n+1);
        for (auto q: queries)
        {
            int a = q[0], b = q[1];
            diff[a]-=1;
            diff[b+1]+=1;
        }
        int sum = 0;
        for (int i=0; i<n; i++)
        {
            sum += diff[i];
            if (sum + nums[i]>0)
                return false;
        }
        return true;
    }
};",1454816661
wisdompeak,wisdompeak,318,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) 
    {
        int m = queries.size();
        int left=0, right=m;
        while (left < right)
        {
            int mid = left+(right-left)/2;
            if (isOK(nums, queries, mid))
                right = mid;
            else
                left = mid+1;
        }
        if (isOK(nums, queries, left))
            return left;
        else
            return -1;
    }
    
    bool isOK(vector<int>& nums, vector<vector<int>>& queries, int m)
    {
        int n = nums.size();
        vector<int>diff(n+1);
        for (int i=0; i<m; i++)
        {
            auto q = queries[i];
            int a = q[0], b = q[1], v = q[2];
            diff[a]-=v;
            diff[b+1]+=v;
        }
        int sum = 0;
        for (int i=0; i<n; i++)
        {
            sum += diff[i];
            if (sum + nums[i]>0)
                return false;
        }
        return true;
    }
};",1454825932
Codewithnav,navpreetsingh951818,319,3616,java,"class Solution {
    public int countValidSelections(int[] nums) {
        int res = 0;
        int n = nums.length;
        for(int i = 0;i<n;i++){
            if(nums[i] != 0) continue;
            if(poss(nums,i,1)  ) res++;
            if(poss(nums,i,-1)) res++;
            
            
        }
        
        return res;
    }
    
    private boolean poss(int[] nums,int i,int d){
        
        int[] c = Arrays.copyOf(nums,nums.length);
        
        
        
        
        while(i >= 0 && i < nums.length){
            if(c[i] == 0){
                i+=d;
            }else{
                c[i]--;
                d = (d == -1) ? 1 : -1;
                i+= d;
            }
            
        }
        for(int e : c){
            if(e != 0) return false;
        }
        
        return true;
        
    }
    
    
    
    
    
}",1454833342
Codewithnav,navpreetsingh951818,319,3639,java,"class Solution {
    public boolean isZeroArray(int[] nums, int[][] q) {
        List<int[]> arr = new ArrayList<>();
        
        
        for(int[] e : q){
            arr.add(new int[]{e[0],1});
            arr.add(new int[]{e[1],-1});
        }
        int n = nums.length;
        Collections.sort(arr,(a,b)->{
            if(a[0] == b[0]) return b[1] - a[1];
            
            return a[0] - b[0];
        });
        
        long[] count = new long[n+1];
        
        for(int[] e : q){
            
            count[e[0]]++;
            count[e[1]+1]--;
        }
        
        
        for(int i = 1;i<n;i++){
            count[i]+= count[i-1];
        }
        
        
        for(int i = 0;i<n;i++){
            if(count[i] <nums[i]) return false;
        }
        
        return true;
        
    }
} ",1454816057
Codewithnav,navpreetsingh951818,319,3643,java,"class Solution {
    public int minZeroArray(int[] nums, int[][] q) {
        
        
        int l = 0;
        int r = q.length;
        
        int res = -1;
        while(l <= r){
            int mid=  ((r - l) >> 1) + l;
            
            
            if(poss(nums,q,mid)){
                res = mid;
                r = mid - 1;
            }else{
                l = mid + 1;
            }
        } 
        
        return res;
    }
    
    public boolean poss(int[] nums, int[][] q,int k) {
        List<int[]> arr = new ArrayList<>();
        int n = nums.length;
       
        long[] count = new long[n+1];
        
        for(int i =0;i<k;i++){
            int[] e = q[i];
            count[e[0]]+= e[2];
            count[e[1]+1]-= e[2];
        }
        
        
        for(int i = 1;i<n;i++){
            count[i]+= count[i-1];
        }
        
        
        for(int i = 0;i<n;i++){
            if(count[i] <nums[i]) return false;
        }
        
        return true;
        
    } 
}",1454821674
prayoffer,prayoffer,320,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        result = 0
        for i in range(len(nums)):
            if nums[i] == 0:
                if sum(nums[:i]) == sum(nums[(i+1):]):
                    result += 2
                if abs(sum(nums[:i])-sum(nums[(i+1):]))==1:
                    result += 1
        return result",1454808000
prayoffer,prayoffer,320,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        array = [0 for _ in range(len(nums))]
        for l, r in queries:
            array[l] += 1
            if r+1 < len(array):
                array[r+1] -= 1
        for i in range(1, len(array)):
            array[i] += array[i-1]
        for num, upper in zip(nums, array):
            if num > upper:
                return False
        return True",1454820055
prayoffer,prayoffer,320,3643,python3,"class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        def check(k):
            array = [0 for _ in range(len(nums))]
            for l, r, val in queries[:k]:
                array[l] += val
                if r+1 < len(array):
                    array[r+1] -= val
            for i in range(1, len(array)):
                array[i] += array[i-1]
            for num, upper in zip(nums, array):
                if num > upper:
                    return False
            return True
        l = -1
        r = len(queries)+1
        while l + 1 != r:
            m = (l+r)//2
            if check(m):
                r = m
            else:
                l = m
        if r == len(queries)+1:
            return -1
        else:
            return r",1454825987
Micheal Huang,michealhuang7,321,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        ans = 0
        for i in range(len(nums)):
            if nums[i] != 0: continue
            for odir in [-1, 1]:
                nn = nums[:]
                dir = odir
                curr = i
                while True:
                    if curr < 0 or curr > len(nums) - 1: break
                    if nn[curr] == 0: curr += dir
                    else:
                        nn[curr] -= 1
                        dir *= -1
                        curr += dir
                if sum(nn) == 0:
                    ans += 1
        return ans",1454816626
Micheal Huang,michealhuang7,321,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        l = [0] * len(nums)
        r = [0] * (len(nums) + 1)
        for a, b in queries:
            l[a] += 1
            r[b + 1] += 1
        curr = 0
        for i in range(len(nums)):
            curr += l[i]
            curr -= r[i]
            if curr < nums[i]: return False
        return True",1454820581
Micheal Huang,michealhuang7,321,3643,python3,"class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        low = 0
        high = len(queries)
        
        l = [0] * len(nums)
        r = [0] * (len(nums) + 1)
        for a, b, v in queries:
            l[a] += v
            r[b + 1] += v
        curr = 0
        for i in range(len(nums)):
            curr += l[i]
            curr -= r[i]
            if curr < nums[i]: return -1
                
        while low <= high:
            print(f'{low}, {high}')
            mid = low + (high - low) // 2
            l = [0] * len(nums)
            r = [0] * (len(nums) + 1)
            for a, b, v in queries[:mid]:
                l[a] += v
                r[b + 1] += v
            curr = 0
            for i in range(len(nums)):
                curr += l[i]
                curr -= r[i]
                if curr < nums[i]: break
            else:
                high = mid - 1
                continue
            low = mid + 1
            
        # print(f'{low}, {high}')
        return low",1454833365
cm_fast,cm_fast,322,3616,cpp,"class Solution
{
public:
    int countValidSelections(vector<int> &a)
    {
        int n = a.size();
        int ans = 0;
        for (int i = 0; i < n; ++i)
        {
            if (a[i] != 0)
            {
                continue;
            }
            int add = -1;
            int idx = i;
            vector<int> temp = a;
            while (idx >= 0 && idx < n)
            {
                if (temp[idx] == 0)
                {
                    idx += add;
                }
                else
                {
                    temp[idx] -= 1;
                    add = -add;
                    idx += add;
                }
            }
            bool flag = true;
            for (int  j = 0; j < n; j++)
            {
                if (temp[j] != 0)
                {
                    flag = false;
                    break;
                }
            }
            if (flag)
            {
                ans++;
            }
            add = 1;
            idx = i;
            temp = a;
            while (idx >= 0 && idx < n)
            {
                if (temp[idx] == 0)
                {
                    idx += add;
                }
                else
                {
                    temp[idx] -= 1;
                    add = -add;
                    idx += add;
                }
            }
             flag = true;
            for (int j = 0; j < n; j++)
            {
                if (temp[j] != 0)
                {
                    flag = false;
                    break;
                }
            }
            if (flag)
            {
                ans++;
            }
        }
        return ans;
    }
};
",1454833377
cm_fast,cm_fast,322,3639,cpp,"#include <bits/stdc++.h>
using namespace std;

class Solution
{
public:
    bool isZeroArray(vector<int> &a, vector<vector<int>> &q)
    {
        int n = a.size();
        vector<long long> pref(n + 10, 0);
        for (int i = 0; i < (int)(q.size()); i++)
        {
            pref[q[i][0]] += 1;
            pref[q[i][1]+1] -= 1;
        }
        for (int i = 1; i < n; i++)
        {
            pref[i] += pref[i - 1];
        }
        for (int i = 0; i < n; i++)
        {
            if (pref[i] < (long long)a[i])
            {
                return false;
            }
        }
        return true;
    }
};
",1454821835
cm_fast,cm_fast,322,3643,cpp,"
class Solution
{
public:
    const int mod = 1e9 + 7;
    int gcd(int a, int b)
    {
        if (b == 0)
            return a;
        return gcd(b, a % b);
    }
    int add(int x, int y)
    {
        x += y;
        while (x >= mod)
            x -= mod;
        while (x < 0)
            x += mod;
        return x;
    }

    int mul(int x, int y)
    {
        return (x * y) % mod;
    }

    int binpow(int x, int y)
    {
        int z = 1;
        while (y)
        {
            if (y & 1)
            {
                z = mul(z, x);
            }
            x = mul(x, x);
            y >>= 1;
        }
        return z;
    }

    int inv(int x)
    {
        return binpow(x, mod - 2);
    }

    int divide(int x, int y)
    {
        return mul(x, inv(y));
    }
    int minZeroArray(vector<int> &a, vector<vector<int>> &q)
    {

        int n = a.size();
        int low = 0, high = (int)(q.size());
        int ans = -1;
        while (low <= high)
        {
            int mid = low + (high - low) / 2;
            vector<long long> pref(n + 10, 0);
            // vector<long long> pref(n + 10, 0);
            for (int i = 0; i < mid; i++)
            {
                pref[q[i][0]] += q[i][2];
                pref[q[i][1] + 1] -= q[i][2];
            }
            bool flag = true;
            for (int i = 1; i < n; i++)
            {
                pref[i] += pref[i - 1];
            }
            for (int i = 0; i < n; i++)
            {
                if (pref[i] < a[i])
                {
                    flag = false;
                    break;
                }
            }
            if (flag)
            {
                ans = mid;
                high = mid - 1;
            }
            else
            {
                low = mid + 1;
            }
        }
        return ans;
    }
};
",1454813631
Beat The Sky,Beat_The_Sky,324,3616,java,"class Solution {
    public int countValidSelections(int[] nums) {
        int[] pre = new int[nums.length+1];
        for (int i = 1;i<pre.length;i++)pre[i]=pre[i-1]+nums[i-1];
        int[] s = new int[nums.length+1];
        for (int i= nums.length-1;i>=0;i--){
            s[i]=s[i+1]+nums[i];
        }
        int res = 0;
        //System.out.println(Arrays.toString(pre));
        //System.out.println(Arrays.toString(s));
        for (int i = 0 ;i<nums.length;i++){
            if (nums[i]==0){
            if (pre[i]==s[i+1])res+=2;
            else if (Math.abs(pre[i]-s[i+1])==1)res+=1;
            }
        }
        return res;
    }
}",1454814587
Beat The Sky,Beat_The_Sky,324,3639,java,"class Solution {
    public boolean isZeroArray(int[] nums, int[][] q) {
        int[] count = new int[nums.length+1];
        for (int i = 0 ;i<q.length;i++){
            count[q[i][0]]+=1;
            count[q[i][1]+1] -=1;
        }
        for (int i = 1;i<count.length;i++)count[i]+= count[i-1];
        for (int i= 0;i<nums.length;i++){
            if (nums[i]>count[i])return false;
        }
        return true;
    }
}",1454823807
Beat The Sky,Beat_The_Sky,324,3643,java,"class Solution {
    public int minZeroArray(int[] nums, int[][] queries) {
        int lo = 0 ;
        int hi = queries.length;
        int res = -1;
        while (lo<=hi){
            int mid = (lo+hi)/2;
            if (check(nums,queries,mid)){
                res = mid;
                hi  = mid-1;
            }
            else lo = mid+1;
        }
        return res ;
    }
    public boolean check(int[] nums, int[][] q , int mid){
        int[] count = new int[nums.length+1];
        for (int i = 0 ;i<mid;i++){
            count[q[i][0]]+= q[i][2];
            count[q[i][1]+1] -=q[i][2];
        }
        for (int i = 1;i<count.length;i++)count[i]+= count[i-1];
        for (int i= 0;i<nums.length;i++){
            if (nums[i]>count[i])return false;
        }
        return true;
    }
}",1454833464
Ali,changeme,325,3616,java,"class Solution {
    public int countValidSelections(int[] a) {
        int res = 0;
        for (int i = 0; i < a.length; i++) {
            if (a[i] == 0) {
                res += get(a, i, 1) + get(a, i, -1);
            }
        }        
        return res;
    }
    private int get(int[] aa, int i, int d) {
        var a = Arrays.copyOf(aa, aa.length);
        int c = 0;
        for (int j : a) {
            c += j;
        }
        while (true) {
            i += d;
            if (i == aa.length || i < 0) {
                return c == 0 ? 1 : 0;
            }
            if (a[i] > 0) {
                a[i]--;
                c--;
                d = -d;
            }
        }
    }
}",1454810927
Ali,changeme,325,3639,java,"class Solution {
    public boolean isZeroArray(int[] nums, int[][] queries) {
        var m = new int[nums.length + 1];
        for (var q : queries) {
            m[q[0]]++;
            m[q[1] + 1]--;
        }
        int c = 0;
        for (int i = 0; i < nums.length; i++) {
            c += m[i];
            if (nums[i] > c) {
                return false;
            }
        }
        
        return true;
    }
}",1454815553
Ali,changeme,325,3643,java,"class Solution {
    public int minZeroArray(int[] nums, int[][] queries) {
        int j = 0;
        int c = 0;
        var m = new int[nums.length + 1];
        for (int i = 0; i < nums.length; i++) {
            c += m[i];
            while (nums[i] > c && j < queries.length) {
                var q = queries[j];
                if (q[1] >= i) {
                    m[q[0]] += q[2];
                    m[q[1] + 1] -= q[2];
                    if (q[0] <= i) {
                        c += q[2];
                    }
                }
                j++;
            }
            if (nums[i] > c) {
                return -1;
            }
        }
        return j;
    }
}",1454826139
Akhil Rautela 1DS18CS146,akhil_rautela,326,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int n = nums.size();
        vector <int> pref(n + 1);
        int ans = 0;
        for (int i = 0; i < n; i++) {
            pref[i + 1] = pref[i] + nums[i];
        }
        for (int i = 0; i < n; i++) {
            if (nums[i] != 0) continue;
            int suf = pref[n] - pref[i];
            if (pref[i] == suf) {
                ans += 2;
            }
            else if (abs(pref[i] - suf) == 1) {
                ans += 1;
            }
        }
        return ans;
    }
};",1454812368
Akhil Rautela 1DS18CS146,akhil_rautela,326,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        vector <int> toDo(n + 1);
        for (auto z: queries) {
            toDo[z[0]] -= 1;
            toDo[z[1] + 1] += 1;
        }
        int cur = 0;
        for (int i = 0; i < n; i++) {
            cur += toDo[i];
            if (nums[i] + cur > 0) {
                return false;
            }
        }
        return true;
    }
};",1454821472
Akhil Rautela 1DS18CS146,akhil_rautela,326,3643,cpp,"class Solution {
public:
    bool pos(int mid, vector <int> &nums, vector <vector<int>> & queries) {
        int n = nums.size();
        vector <int> toDo(n + 1);
        for (int i = 0; i < mid; i++) {
            toDo[queries[i][0]] -= queries[i][2];
            toDo[queries[i][1] + 1] += queries[i][2];
        }
        int cur = 0;
        for (int i = 0; i < n; i++) {
            cur += toDo[i];
            if (nums[i] + cur > 0) {
                return false;
            }
        }
        return true;
    }
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int low = 0;
        int high = queries.size();
        int ans = -1;
        while (low <= high) {
            int mid = (low + high) / 2;
            if (pos(mid, nums, queries)) {
                high = mid - 1;
                ans = mid;
            }
            else {
                low = mid + 1;
            }
        }
        return ans;
    }
};",1454833496
German Andosov,randle999,328,3616,kotlin,"class Solution {
    fun countValidSelections(nums: IntArray): Int {
        var ans = 0

        for (start in 0..<nums.size) {
            if (nums[start] != 0) continue
            var dir = 1
            var cur = start
            var testNums = IntArray(nums.size) { nums[it] }
            while (cur >= 0 && cur < nums.size) {
                if (testNums[cur] == 0) {
                    cur += dir
                } else {
                    testNums[cur]--
                    dir *= -1
                    cur += dir
                }
            }
            if (testNums.count { it == 0} == nums.size) {
                ans++
            }
            println(testNums.toList())

            dir = -1
            cur = start
            testNums = IntArray(nums.size) { nums[it] }
            while (cur >= 0 && cur < nums.size) {
                if (testNums[cur] == 0) {
                    cur += dir
                } else {
                    testNums[cur]--
                    dir *= -1
                    cur += dir
                }
            }
            if (testNums.count { it == 0} == nums.size) {
                ans++
            }
            println(testNums.toList())
        }
        
        return ans
    }
}",1454814367
German Andosov,randle999,328,3639,kotlin,"class Solution {
    fun isZeroArray(nums: IntArray, queries: Array<IntArray>): Boolean {
        val pref = MutableList(nums.size + 1) { 0 }
        for ((l, r) in queries) {
            pref[l]++
            pref[r + 1]--
        }

        var acc = 0
        for (i in 0..<nums.size) {
            acc += pref[i]
            if (nums[i] > acc) {
                return false
            }
        }

        return true
    }
}",1454833536
German Andosov,randle999,328,3643,kotlin,"class Solution {
    fun minZeroArray(nums: IntArray, queries: Array<IntArray>): Int {
        var (l, r) = -1 to queries.size + 1

        val pref = MutableList(nums.size + 1) { 0 }
        while (r - l > 1) {
            val mid = (l + r) / 2
            var ok = true
            (0..<pref.size).forEach { pref[it] = 0 }

            for (q in 0..<mid) {
                val (segLeft, segRight, segVal) = queries[q]
                pref[segLeft] += segVal
                pref[segRight + 1] -= segVal
            }

            var acc = 0
            for (i in 0..<nums.size) {
                acc += pref[i]
                if (nums[i] > acc) {
                    ok = false
                    break
                }
            }
            
            if (ok) {
                r = mid
            } else {
                l = mid
            }
        }

        return if (r == queries.size + 1) {
            -1
        } else {
            r
        }
    }
}",1454829636
jfantasy90,jfantasy90,329,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        const int n = nums.size();
        int res = 0;
        for (int i = 0; i < n; ++i) {
            if (nums[i] > 0) continue;
            for (int j = 0; j < 2; ++j) {
                vector<int> cur = nums;
                int idx = i, dir = (j == 0 ? -1 : 1);
                while (idx >= 0 && idx < n) {
                    if (cur[idx] == 0) idx += dir;
                    else {
                        cur[idx]--;
                        dir *= -1;
                        idx += dir;
                    }
                }
                
                int t = 1;
                for (int h = 0; h < n && t; ++h) {
                    if (cur[h] != 0) t = 0;
                }
                //if (t > 0) cout << i << "" "" << j << endl;
                res += t;
            }
        }
        return res;
    }
};",1454811415
jfantasy90,jfantasy90,329,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        const int n = nums.size();
        vector<int> cnt(n + 1, 0);
        for (vector<int> query : queries) {
            cnt[query[0]] += 1;
            cnt[query[1] + 1] -= 1;
        }
        
        int s = 0;
        for (int i = 0; i < n; ++i) {
            s += cnt[i];
            if (s < nums[i]) return false;
        }
        return true;
    }
};",1454816390
jfantasy90,jfantasy90,329,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        const int m = queries.size();
        int s = 1;
        for (int i : nums) {
            if (i > 0) s = 0;
        }
        if (s == 1) return 0;
        
        int l = 1, r = m, res = -1;
        while (l <= r) {
            int mid = (l + r) / 2;
            if (check(nums, queries, mid)) {
                res = mid;
                r = mid - 1;
            } else l = mid + 1;
        }
        return res;
    }
    
private:
    bool check(const vector<int>& nums, const vector<vector<int>>& queries, int k) {
        const int n = nums.size();
        const int m = queries.size();
        vector<int> cnt(n + 1, 0);
        for (int i = 0; i < k; ++i) {
            int l = queries[i][0], r = queries[i][1], v = queries[i][2];
            cnt[l] += v;
            cnt[r + 1] -= v;
        }
        int s = 0;
        for (int i = 0; i < n; ++i) {
            s += cnt[i];
            if (nums[i] > s) return false;
        }
        return true;
    }
};",1454826188
Spryzen,Spryzen,330,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        // wantto 
        int ans=0;

        for(int i=0;i<nums.size();i++){
            if (nums[i]==0){
                ans+=(simulate(nums,i,0)+simulate(nums,i,1));
            }
        }
        return ans;
    }
    bool simulate(vector<int>& a,int i,bool dir){
        vector<int> nums;
        for(int j:a)
            nums.emplace_back(j);
        int j=i;
        while (1){
            if (j<0 || j>=nums.size())
                break;
            if (nums[j]){
                nums[j]--;
                dir^=1;
                j+=(dir?1:-1);
            }
            else
                j+=(dir?1:-1);
                
            
        }
        for(int num:nums){
            if (num)
                return 0;
        }
        return 1;
    }
};",1454809727
Spryzen,Spryzen,330,3639,cpp,"

class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        // want to find the 
        vector<int> prefix_sum(nums.size()+1);

        for(vector<int> &q:queries){
            prefix_sum[q[0]]++;
            prefix_sum[q[1]+1]--;
        }

        for(int j=1;j<=nums.size();j++){
            prefix_sum[j]+=prefix_sum[j-1];
        }

        for(int j=1;j<=nums.size();j++){
            if (prefix_sum[j-1]<nums[j-1])
                return 0;
        }
        return 1;

        
        
        
    }
};",1454821347
Spryzen,Spryzen,330,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {

        int lo=0;
        int hi=queries.size()+1;

        if (!isZeroArray(nums,queries,hi)) 
            return -1;
        
    	while (lo < hi) {
    		int mid = lo + (hi - lo) / 2;
    		if (isZeroArray(nums,queries,mid)) {
    			hi = mid;
    		} else {
    			lo = mid + 1;
    		}
    	}
        
    	return lo;
        
    }
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries,int k) {
        // want to find the 
        vector<int> prefix_sum(nums.size()+1);

        for(vector<int> &q:queries){
            if (k--==0)
                break;
            prefix_sum[q[0]]+=q[2];
            prefix_sum[q[1]+1]-=q[2];
        }

        for(int j=1;j<=nums.size();j++){
            prefix_sum[j]+=prefix_sum[j-1];
        }

        for(int j=1;j<=nums.size();j++){
            if (prefix_sum[j-1]<nums[j-1])
                return 0;
        }
        return 1;

        
        
        
    }
};",1454826283
washedup,rejudge_thiz,331,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int su = accumulate(nums.begin(),nums.end(),0),temp=0,re=0;
        for(int i:nums){
            su-=i;temp+=i;
            if(!i){
                if(abs(su-temp)==1) re++;
                else if(su==temp) re+=2;
            }
        }
        return re;
    }
};",1454808821
washedup,rejudge_thiz,331,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n=nums.size();
        vector<int> seg(2*n);
        auto add = [&](int l,int r){
            for(l+=n,r+=n;l<r;l>>=1,r>>=1){
                if(l&1) seg[l++]++;
                if(r&1) seg[--r]++;
            }
        };
        for(auto& v:queries){
            add(v[0],v[1]+1);
        }
        for(int i=0;i<n;i++) seg[i<<1]+=seg[i],seg[i<<1|1]+=seg[i];
        for(int i=0;i<n;i++) if(seg[i+n] < nums[i]) return false;
        return true;
    }
};",1454820346
washedup,rejudge_thiz,331,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n=nums.size();
        vector<int> seg(2*n);
        auto add = [&](int l,int r,int v){
            for(l+=n,r+=n;l<r;l>>=1,r>>=1){
                if(l&1) seg[l++]+=v;
                if(r&1) seg[--r]+=v;
            }
        };
        int l=0,r=queries.size() + 1;
        while(l<r){
            int m=(l+r)/2;
            for(int i=0;i<m;i++){
                add(queries[i][0],queries[i][1]+1,queries[i][2]);
            }
            for(int i=0;i<n;i++) seg[i<<1]+=seg[i],seg[i<<1|1]+=seg[i];
            // cout << l << ' ' << m << ' ' << r << '\n';
            // for(int i:seg) cout << i << ' ';
            // cout << '\n';
            bool good = true;
            for(int i=0;i<n;i++) if(seg[i+n] < nums[i]) good=false;
            fill(seg.begin(),seg.end(),0);
            if(!good) l=m+1;
            else r=m;
        }
        return l==queries.size() + 1 ? -1 : l;
    }
};",1454833753
Morampudi_Gopi_Prashanth_Raju,Morampudi_Gopi_Prashanth_Raju,332,3616,python3,"from typing import List

class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        def simulate(start: int, direction: int) -> bool:
            arr = nums[:]
            n = len(arr)
            curr = start
            
            while 0 <= curr < n:
                if arr[curr] == 0:
                    curr += direction
                else:
                    arr[curr] -= 1
                    direction *= -1
                    curr += direction
            return all(x == 0 for x in arr)
        valid_starts = [i for i, num in enumerate(nums) if num == 0]
        count = 0
        for start in valid_starts:
            if simulate(start, -1):  
                count += 1
            if simulate(start, 1):  
                count += 1
        
        return count
",1454807483
Morampudi_Gopi_Prashanth_Raju,Morampudi_Gopi_Prashanth_Raju,332,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        n=len(nums)
        dec=[0]*(n+1)
        for q in queries:
            i,j=q
            dec[i]+=1
            if j+1<n:
                dec[j+1]-=1
        d=0
        for i in range(len(nums)):
            d+=dec[i]
            if d<nums[i]:
                return False
        return True
        ",1454816155
Morampudi_Gopi_Prashanth_Raju,Morampudi_Gopi_Prashanth_Raju,332,3643,python3,"class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        n=len(nums)
        def h(k):
            dec=[0]*(n+1)
            for q in queries[:k]:
                i,j,val=q
                dec[i]+=val
                if j+1<n:
                    dec[j+1]-=val
            d=0
            for i in range(len(nums)):
                d+=dec[i]
                if d<nums[i]:
                    return False
            return True
        l=0
        r=len(queries)
        result=-1
        while l<=r:
            mid=(l+r)//2
            if h(mid):
                result=mid
                r=mid-1
            else:
                l=mid+1
        return result
                
        ",1454826401
Guddu Singh,guddusingh123,333,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& a) {
        int n = a.size();
        vector<int> pre(n + 1);
        for (int i = 0; i < n; i ++) {
            pre[i + 1] = pre[i] + a[i];
        }
        
        int res = 0;
        for (int i = 0; i < n; i++) {
            if (a[i] == 0) {
                int l = pre[i];
                int r = pre[n] - pre[i];
                if (l == r) {
                    res += 2;
                }
                else if(l == r + 1 || r == l + 1) res++;
            }
        }
        return res;
    }
};",1454807962
Guddu Singh,guddusingh123,333,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& a, vector<vector<int>>& q) {
        int n = a.size();
        vector<int> pre(n + 1);
        for(auto v: q) {
            int l = v[0];
            int r = v[1];
            pre[r + 1]--;
            pre[l]++;
        }
        for (int i = 1; i <= n; i++) {
            pre[i] += pre[i - 1];
        }
        
        for (int i = 0; i < n; i++) {
            if (a[i] > pre[i]) {
                return false;
            }
        }
        return true;
    }
};",1454813263
Guddu Singh,guddusingh123,333,3643,cpp,"class Solution {
public:
    
    int minZeroArray(vector<int>& a, vector<vector<int>>& q) {
        int n = a.size();
        int m = q.size();
        
        
        int l = 0, r = m, res = -1;
        while (l <= r) {
            int mid = (l + r) >> 1;
            vector<int> pre(n + 1);
            for (int i = 0; i < mid; i++) {
                auto v = q[i];
                int l = v[0];
                int r = v[1];
                int val = v[2];
                pre[r + 1] -= val;
                pre[l] += val;
            }
            for (int i = 1; i <= n; i++) {
                pre[i] += pre[i - 1];
            }
            bool f = true;
            for (int i = 0; i < n; i++) {
                if (a[i] > pre[i]) {
                    f = false;
                }
            }
            if (f) {
                res = mid;
                r = mid - 1;
            }
            else l = mid + 1;
        }
        return res;
    }
};",1454819532
hero777,hero777,334,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int s = accumulate(nums.begin(), nums.end(), 0);
        int ans = 0;
        int curr = 0;
        for(int n: nums){
            if(n == 0){
                if(2*curr == s)
                    ans += 2;
                if(abs(s - 2*curr) == 1)
                    ans += 1;
            }
            else{
                curr += n;
            }
        }
        return ans;
    }
};",1454809690
hero777,hero777,334,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        vector<int> x(nums.size(), 0);
        for(vector<int> q: queries){
            x[q[0]]++;
            if(q[1] != nums.size()-1)
                x[q[1]+1]--;
        }
        for(int i = 1; i < nums.size(); i++)
            x[i] += x[i-1];
        for(int i = 0; i < nums.size(); i++)
            if(x[i] < nums[i])
                return false;
        return true;
    }
};",1454814709
hero777,hero777,334,3643,cpp,"class Solution {
public:
    bool poss(vector<int> &nums, vector<vector<int>>& q, int m){
        vector<int> x(nums.size(), 0);
        for(int i = 0; i < m; i++){
            x[q[i][0]] += q[i][2];
            if(q[i][1] < nums.size() - 1)
                x[q[i][1] + 1] -= q[i][2];
        }
        if(x[0] < nums[0])
            return false;
        for(int i = 1; i < nums.size(); i++){
            x[i] += x[i-1];
            if(x[i] < nums[i])
                return false;
        }
        return true;
    }
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int l = 0;
        int r = queries.size() + 1;
        while((l < r) && l != queries.size() + 1){
            // cout << l << ' ' << r << '\n';
            int m = (l + r)/2;
            if(poss(nums, queries, m))
                r = m;
            else
                l = m+1;
        }
        if(l == queries.size() + 1)
            return -1;
        return l;
    }
};",1454833951
lihaicoder,lihaicoder,335,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        total = sum(nums)
        cur = 0
        ans = 0
        for i in range(len(nums)):
            if nums[i] == 0:
                if cur == total - cur:
                    ans += 2
                elif abs(cur - (total - cur)) == 1:
                    ans += 1
            else:
                cur += nums[i]
        return ans",1454808559
lihaicoder,lihaicoder,335,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        evts = []
        # 0: start
        # 1: end
        for l, r in queries:
            evts.append((l, 0))
            evts.append((r + 1, 1))
        evts.sort(reverse = True)
        cur = 0
        for i in range(len(nums)):
            while evts and evts[-1][0] <= i:
                _, action = evts.pop()
                if action == 0:
                    cur += 1
                else:
                    cur -= 1
            # print(i, cur)
            if nums[i] > cur:
                return False
        return True
                    
",1454817799
lihaicoder,lihaicoder,335,3643,python3,"class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        def test(k):
            evts = []
            # 0: start
            # 1: end
            for i in range(k):
                l, r, v = queries[i]
                evts.append((l, 0, v))
                evts.append((r + 1, 1, v))
            evts.sort(reverse = True)
            cur = 0
            for i in range(len(nums)):
                while evts and evts[-1][0] <= i:
                    _, action, v = evts.pop()
                    if action == 0:
                        cur += v
                    else:
                        cur -= v
                if nums[i] > cur:
                    return False
            return True
        # if not test(len(queries)):
        #     return -1
        l = 0
        r = len(queries)
        ans = -1
        while l <= r:
            mid = (l + r) // 2
            if test(mid):
                ans = mid
                r = mid - 1
            else:
                l = mid + 1
        return ans
                
        
        ",1454826569
Anshul Sharma,anshul7sh,338,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int totalSum = 0;
        for(auto x:nums) {
            totalSum+=x;
        }
        
        int res = 0;
        int currSum=0;
        
        for(auto x:nums) {
            currSum+=x;
            
            if(x==0) {
                int leftSum=totalSum-currSum;
                
                if(currSum==leftSum) {
                    res+=2;
                } else if(abs(currSum-leftSum)==1) {
                    res++;
                }
            }
        }
        
        return res;
    }
};",1454808029
Anshul Sharma,anshul7sh,338,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n=nums.size();
        vector<int> line(n+1,0);
        
        for(auto x:queries) {
            line[x[0]]++;
            line[x[1]+1]--;
        }
        
        int currDec=0;
        
        for(int i=0;i<n;i++) {
            currDec+=line[i];
            
            if(nums[i]-currDec>0)
                return false;
        }
        
        return true;
    }
};",1454811698
Anshul Sharma,anshul7sh,338,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int start=0,end=queries.size();
        
        int res = -1;
        
        while(start<=end) {
            int mid = start+(end-start)/2;
            
            if(isZeroArray(nums,queries,mid)) {
                res=mid;
                end=mid-1;
            } else {
                start=mid+1;
            }
        }
        
        return res;
    }
    
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries, int len1) {
        int n=nums.size();
        vector<int> line(n+1,0);
        
        for(int i=0;i<len1;i++) {
            auto x=queries[i];
            
            line[x[0]]+=x[2];
            line[x[1]+1]-=x[2];
        }
        
        int currDec=0;
        
        for(int i=0;i<n;i++) {
            currDec+=line[i];
            
            if(nums[i]-currDec>0)
                return false;
        }
        
        return true;
    }
};


/*

    7   6   8
    11   -2  0   -9

*/",1454819723
mdcoder123,mdcoder123,342,3616,cpp,"class Solution {
public:
    bool solve(vector<int> nums,int curr,int dir){
        int n = nums.size();
        while(curr>=0 && curr<=n-1){
            if(nums[curr]==0)
                curr+=dir;
            else{
                nums[curr]--;
                if(dir==1)
                    dir=-1;
                else
                    dir=1;
                curr+=dir;
            }
        }
        for(auto it:nums)
        {
            if(it!=0)
                return false;
        }
        return true;
    }
    int countValidSelections(vector<int>& nums) {
        int n = nums.size();
        int cnt = 0;
        for(int i=0;i<n;i++){
            if(nums[i]!=0)
                continue;
            if(solve(nums,i,1))
                cnt++;
            if(solve(nums,i,-1))
                cnt++;
        }
        return cnt;
    }
};",1454811389
mdcoder123,mdcoder123,342,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        vector<int> tmp(n+1,0);
        for(auto it:queries){
            tmp[it[0]]--;
            tmp[it[1]+1]++;
        }
        vector<int> prefix(n+1,0);
        prefix[0]=tmp[0];
        for(int i=1;i<n;i++)
        {
            prefix[i]=prefix[i-1]+tmp[i];
        }
        for(int i=0;i<n;i++){
            if(nums[i]+prefix[i]>0)
                return false;
        }
        return true;
    }
};",1454815846
mdcoder123,mdcoder123,342,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        int low = 0;
        int high = queries.size();
        int ans=-1;
        while(low<=high){
            int mid = (low+high)/2;
            vector<int> tmp(n+1,0);
            for(int i=0;i<mid;i++){
                tmp[queries[i][0]]-=queries[i][2];
                tmp[queries[i][1]+1]+=queries[i][2];
            }
            vector<int> prefix(n+1,0);
            prefix[0]=tmp[0];
            for(int i=1;i<n;i++)
            {
                prefix[i]=prefix[i-1]+tmp[i];
            }
            bool tp=true;
            for(int i=0;i<n;i++){
                if(nums[i]+prefix[i]>0)
                {
                    tp = false;
                    break;
                }
            }
            if(tp){
                ans=mid;
                high=mid-1;
            }
            else
                low=mid+1;
        }
        return ans;
    }
};",1454834274
aqxa2k,aqxa2k,343,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& a) {
        int cnt = 0; 
        int s = 0; 
        for (auto x: a) s += x; 
        int cur = 0; 
        for (int i = 0; i < a.size(); ++i) {
            if (a[i]) {
                cur += a[i]; 
                s -= a[i]; 
            } else {
                if (s == cur) cnt += 2; 
                else if (abs(s - cur) == 1) cnt++; 
            }
        }
        return cnt; 
    }
};",1454807532
aqxa2k,aqxa2k,343,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& a, vector<vector<int>>& b) {
        int n = a.size(), q = b.size(); 
        vector<int> p(n, 0); 
        for (auto x: b) {
            int l = x[0], r = x[1]; 
            p[l]++; 
            if (r + 1 < n) p[r + 1]--; 
        }
        for (int i = 1; i < n; ++i) p[i] += p[i - 1]; 
        bool ok = 1; 
        for (int i = 0; i < n; ++i) {
            ok &= p[i] >= a[i]; 
        }
        return ok; 
    }
};",1454809667
aqxa2k,aqxa2k,343,3643,cpp,"using ll = long long; 

class Solution {
public:
    int minZeroArray(vector<int>& a, vector<vector<int>>& b) {
        int n = a.size(); 

        if (*max_element(a.begin(), a.end()) == 0) return 0; 
                   
        vector<int> pp(n + 1, 0); 
        for (int i = 0; i < b.size(); ++i) {
            pp[b[i][0]] += b[i][2]; 
            pp[b[i][1] + 1] -= b[i][2]; 
        }
        for (int i = 0; i < n; ++i) pp[i + 1] += pp[i]; 
        int o = 1; 
        for (int i = 0; i < n; ++i) o &= pp[i] >= a[i]; 
        if (!o) return -1; 
        
        int lo = 0, hi = b.size() - 1; 
        while (lo < hi) {
            int md = (lo + hi) / 2; 
            vector<int> p(n + 1, 0); 
            for (int i = 0; i <= md; ++i) {
                p[b[i][0]] += b[i][2]; 
                p[b[i][1] + 1] -= b[i][2]; 
            }
            for (int i = 0; i < n; ++i) p[i + 1] += p[i]; 
            int ok = 1; 
            for (int i = 0; i < n; ++i) ok &= p[i] >= a[i]; 
            if (ok) {
                hi = md;
            } else {
                lo = md + 1; 
            }
        }

        return lo + 1; 
    }
};",1454819938
ToTea,ToTea,345,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        const int total = accumulate(nums.begin(), nums.end(), 0);
        int prefix = 0;
        int ans = 0;
        for (int i = 0; i < nums.size(); ++i) {
            prefix += nums[i];
            if (nums[i] != 0) continue;
            if (prefix == (total - prefix)+1) ans += 1;
            else if (prefix == (total - prefix)-1) ans += 1;
            else if (prefix == (total - prefix)) ans += 2;
        }
        return ans;
    }
};",1454817906
ToTea,ToTea,345,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        vector<int> runDiffs(nums.size()+1);
        for (const auto& query : queries) {
            runDiffs[query[0]] += 1;
            runDiffs[query[1]+1] -= 1;
        }
        int cur = 0;
        for (int i = 0; i < nums.size(); ++i) {
            cur += runDiffs[i];
            if (nums[i] > cur) return false;
        }
        return true;
    }
};",1454825010
ToTea,ToTea,345,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        vector<int> runDiffs(nums.size()+1);
        int needK = 0;
        int cur = 0;
        for (int i = 0; i < nums.size(); ++i) {
            cur += runDiffs[i];
            while (needK < queries.size() && nums[i] > cur) {
                const auto query = queries[needK++];
                runDiffs[query[0]] += query[2];
                if (query[0] <= i) cur += query[2];
                runDiffs[query[1]+1] -= query[2];
                if (query[1]+1 <= i) cur -= query[2];
            }
            if (nums[i] > cur) return -1;
        }
        return needK;
    }
};",1454834427
Ashutosh Krishna,ashu_2202,348,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& v) {
        int ans=0, n=v.size();
        for(int i=0;i<v.size();i++){
            if(v[i]==0){
                for(int j=0;j<2;j++){
                    // j==0 right
                    // j==1 left
                    vector<int> p;
                    for(auto&aa : v){
                        p.push_back(aa);
                    }
                    int idx = i, dir = j;
                    while(idx>=0 && idx<n){
                        if(p[idx]){
                            p[idx]--;
                            dir ^= 1;
                        }
                        if(!dir) idx++;
                        else idx--;
                    }
                    bool check=true;
                    for(int l=0;l<n;l++)
                        if(p[l] != 0){
                            check = false;
                            break;
                        }
                    if(check) ans++;
                }
            }
        }
        return ans;
    }
};",1454816865
Ashutosh Krishna,ashu_2202,348,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& v, vector<vector<int>>& q) {
        int n = v.size();
        vector<int> a(n+1, 0);
        for(auto&p : q){
            a[p[0]]--;
            a[p[1]+1]++;
        }
        int cur = 0;
        bool pos = true;
        for(int i=0;i<n;i++){
            cur += a[i];
            if(cur+v[i] > 0){
                pos = false;
                break;
            }
        }
        return pos;
    }
};",1454820220
Ashutosh Krishna,ashu_2202,348,3643,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& v, vector<vector<int>>& q, int k) {
        int n = v.size();
        vector<int> a(n+1, 0);
        for(int i=0;i<k;i++){
            a[q[i][0]] -= q[i][2];
            a[q[i][1]+1] += q[i][2];
        }
        int cur = 0;
        bool pos = true;
        for(int i=0;i<n;i++){
            cur += a[i];
            if(cur+v[i] > 0){
                pos = false;
                break;
            }
        }
        return pos;
    }
    int minZeroArray(vector<int>& v, vector<vector<int>>& q) {
        int n = v.size();
        if(isZeroArray(v,q,0))
            return 0;
        if(!isZeroArray(v,q,q.size()))
            return -1;
        
        int l=0, r= q.size();
        while(l+1 < r){
            int m = (l+r)/2;
            if(isZeroArray(v,q,m))
                r = m;
            else
                l = m;
        }
        return r;
    }
};",1454834532
Yucheng Dai,Rainingcity,352,3616,cpp,"class Solution {
private:
    int run(vector<int> nums, int st, bool dir) {
        int n = nums.size();
        int l = st - 1, r = st + 1, cur = st, cnt = 0;
        while(cur != n && cur != -1) {
            if (nums[cur] == 0) {
                if (dir) {
                    // right
                    if (cur == r) {
                        cur++;
                        r++;
                    } else {
                        cur = r;
                    }
                } else {
                    // left
                    if (cur == l) {
                        cur--;
                        l--;
                    } else {
                        cur = l;
                    }
                }
            } else {
                nums[cur]--;
                if (nums[cur] == 0) cnt++;
                dir = !dir;
                if (dir) cur++;
                else cur--;
            }
        }
        // cout << st << "" "" << dir << "" "" << cnt << endl;
        return cnt;
    }
public:
    int countValidSelections(vector<int>& nums) {
        int n = nums.size();
        int cnt = 0;
        for(int i = 0; i < n; i++) if (nums[i] != 0) cnt++;
        int ans = 0;
        for(int i = 0; i < n; i++) {
            if (nums[i] != 0) continue;
            if (run(nums, i, false) == cnt) ans++;
            if (run(nums, i, true) == cnt) ans++;
        }
        return ans;
    }
};",1454811134
Yucheng Dai,Rainingcity,352,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        vector<int> psum(n + 1, 0);
        for(auto& q: queries) {
            psum[q[0]]++;
            psum[q[1]+1]--;
        }
        for(int i = 1; i <= n; i++) psum[i] += psum[i - 1];
        for(int i = 0; i < n; i++) {
            if (nums[i] > psum[i]) return false;
        }
        return true;
    }
};",1454815745
Yucheng Dai,Rainingcity,352,3643,cpp,"class Solution {
private:
    bool run(vector<int>& nums, vector<vector<int>>& queries, int r) {
        int n = nums.size();
        vector<int> psum(n + 1, 0);
        for(int i = 0; i < r; i++) {
            psum[queries[i][0]]++;
            psum[queries[i][1]+1]--;
        }
        for(int i = 1; i <= n; i++) psum[i] += psum[i - 1];
        for(int i = 0; i < n; i++) {
            if (nums[i] > psum[i]) return false;
        }
        return true;
    }
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        bool flag = true;
        for(int x: nums) {
            if (x != 0) {
                flag = false;
                break;
            }
        }
        if (flag) return 0;
        int m = queries.size();
        vector<vector<int>> qqs{};
        for(int i = 0; i < m; i++) {
            vector<int>& q = queries[i];
            for(int c = 0; c < q[2]; c++) {
                qqs.push_back(vector<int>{q[0], q[1], i});
            }
        }
        if (!run(nums, qqs, qqs.size())) return -1;
        int l = 0, r = qqs.size() - 1;
        while(l < r) {
            int mid = (l + r) >> 1;
            if (run(nums, qqs, mid + 1)) r = mid;
            else l = mid + 1;
        }
        return qqs[r][2] + 1;
    }
};",1454834635
junbinliang,junbinliang,353,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& a) {
        int n = a.size();
        int ans = 0;
        for(int i = 0; i < a.size(); i++) {
            if(a[i] != 0) continue;
            vector<int> b(a.begin(), a.end());
            vector<int> c(a.begin(), a.end());
            
            int j = i;
            int d = 1;
            while(j < n && j >= 0) {
                if(b[j] == 0) {
                    j += d;
                    continue;
                }
                b[j]--;
                d = d * -1;
                j += d;
            }
            
            j = i;
            d = -1;
            while(j < n && j >= 0) {
                if(c[j] == 0) {
                    j += d;
                    continue;
                }
                c[j]--;
                d = d * -1;
                j += d;
                //cout << ""gg "" << i << "" "" << j << endl;
            }
              
            
            
            if(ok(b)) ans++;
            if(ok(c)) ans++;
            
        }
        
        return ans;
    }
    
    bool ok(vector<int>& a) {
        sort(a.begin(), a.end());
        return a[0] == 0 && a.back() == 0;
    }
};",1454812716
junbinliang,junbinliang,353,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& a, vector<vector<int>>& q) {
        int n = a.size();
        vector<int> line(n + 1);
        for(auto& p : q) {
            int l = p[0], r = p[1];
            line[l]++;
            line[r + 1]--;
        }
        
        int s = 0;
        for(int i = 0; i < n; i++) {
            s += line[i];
            if(s < a[i]) return false;
        }
        return true;
    }
};",1454807820
junbinliang,junbinliang,353,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& a, vector<vector<int>>& q) {
        int n = a.size();
        
        bool all = true;
        for(int x : a) {
            if(x != 0) all = false;
        }
        
        if(all) return 0;
        
        int l = 0, r = q.size() - 1;
        int ans = -1;
        while(l <= r) {
            int mid = l + (r - l) / 2;
            vector<long long> line(n + 1);
            for(int i = 0; i <= mid; i++) {
                int l = q[i][0], r = q[i][1], w = q[i][2];
                line[l] += w;
                line[r + 1] -= w;
            }
            
            long long s = 0;
            bool ok = true;
            for(int i = 0; i < n; i++) {
                s += line[i];
                if(s < a[i]) {
                    ok = false;
                    break;
                }
            }
            if(ok) {
                ans = mid + 1;
                r = mid - 1;
            } else {
                l = mid + 1;
            }
        }
        
        return ans;
    }
};

/*
[7,6,8]
[[0,0,2],[0,1,5],[2,2,5],[0,2,4]]
4
*/",1454820278
Rahul Anand,myrahulanand20,354,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int cnt =0;
        int su=0;
        for(int x:nums)su+=x;
        int kit=0;
        for(int x:nums){
            kit+=x;
            su-=x;
            if(x==0){
                int l=abs(su-kit);
                if(l==1)cnt++;
                if(l==0)cnt+=2;
                
            }
        }
        return cnt;
    }
};",1454809241
Rahul Anand,myrahulanand20,354,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        int m = queries.size();
        vector<int> cnt(100005,0);
        for(auto &x:queries){
            cnt[x[0]]++;
            cnt[x[1]+1]--;
        }
        for(int i=1;i<=100000;i++){
            cnt[i]+=cnt[i-1];
        }
        bool flag =true;
        for(int i=0;i<n;i++){
            if(nums[i]>cnt[i]){
                flag=false;
                break;
            }
        }
        return flag;
    }
};",1454815726
Rahul Anand,myrahulanand20,354,3643,cpp,"class Solution {
public:
    long long n,m;
    vector<vector<int>> queries;
    vector<int> nums;
    bool check(long long k){
        vector<long long> cnt(100005,0);
        long long ft=0;
        for(auto &x:queries){
            ft+=1;
            if(ft>k)break;
            cnt[x[0]]+=x[2];
            cnt[x[1]+1]-=x[2];
        }
        for(long long i=1;i<=n+1;i++){
            cnt[i]+=cnt[i-1];
        }
        bool flag =true;
        for(long long i=0;i<n;i++){
            if(nums[i]>cnt[i]){
                flag=false;
                break;
            }
        }
        return flag;
    }
    int minZeroArray(vector<int>& num, vector<vector<int>>& q) {
        nums=num;
        queries=q;
        n=num.size();
        m=q.size();
        long long l=0,r=m;
        long long ans=m+1;
        while(l<=r){
            long long mid = l+(r-l)/2;
            if(check(mid)){
                ans=min(ans,mid);
                r=mid-1;
            }
            else{
                l=mid+1;
            }
        }

        if(ans==m+1)ans=-1;
        return ans;
    }
};",1454827275
Yuwen Yan,yuwen-yan,355,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        total_sum = sum(nums)
        if total_sum == 0:
            return len(nums) * 2

        ans = 0
        
        curr_sum = 0
        for i in range(len(nums)):
            if nums[i] == 0:
                if total_sum == 2 * curr_sum:
                    ans += 2
                elif abs(total_sum - 2 * curr_sum) == 1:
                    ans += 1
            curr_sum += nums[i]
        return ans",1454809477
Yuwen Yan,yuwen-yan,355,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        counter = collections.Counter()
        for l, r in queries:
            counter[l] += 1
            counter[r + 1] -= 1

        current_count = 0
        for i in range(len(nums)):
            current_count += counter[i]
            if current_count < nums[i]:
                return False
        return True
            
            
        ",1454815398
Yuwen Yan,yuwen-yan,355,3643,python3,"class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        if sum(nums) == 0:
            return 0
            
        
        left = 0
        right = len(queries)

        while left < right:
            mid = (left + right) // 2
            def is_bad():
                counter = collections.Counter()
                for i in range(mid + 1):
                    counter[queries[i][0]] += queries[i][2]
                    counter[queries[i][1] + 1] -= queries[i][2]
        
                current_count = 0
                for i in range(len(nums)):
                    current_count += counter[i]
                    if current_count < nums[i]:
                        return True
                return False
            if is_bad():
                left = mid + 1
            else:
                right = mid
        return -1 if left == len(queries) else (left + 1)",1454827328
lol34,lol34,356,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        ind = []
        for i in range(len(nums)):
            if nums[i]==0:
                ind.append(i)
        ans = 0
        for j in range(len(ind)):
            left,right = 0,0
            for k in range(ind[j]):
                left+=nums[k]
            for k in range(ind[j]+1,len(nums)):
                right+=nums[k]
            if left==right:
                ans+=2
            elif abs(left-right)==1:
                ans+=1
        return ans",1454811148
lol34,lol34,356,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        arr = [0]*(len(nums)+1)
        for i,j in queries:
            arr[i]+=1
            arr[j+1]-=1
        arr = list(accumulate(arr))
        for i in range(len(nums)):
            if arr[i]>=nums[i]:
                True
            else:
                return False
        return True",1454814602
lol34,lol34,356,3643,python3,"class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        lo = 0
        hi = len(queries)
        ans = -1
        while(lo<=hi):
            mid = (lo+hi)//2
            def check(mid):
                arr = [0]*(len(nums)+1)
                for i,j,val in queries[:mid]:
                    arr[i]+=val
                    arr[j+1]-=val
                arr = list(accumulate(arr))
                # print(arr,mid)
                # print(nums)
                for i in range(len(nums)):
                    if arr[i]>=nums[i]:
                        True
                    else:
                        return False
                return True
            if check(mid):
                ans = mid
                hi = mid-1
            else:
                lo = mid+1
        return ans",1454820333
Balakrishnan Varadarajan,balakrishnan_v,358,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int n=nums.size();
        int ans=0;
        for(int i=0;i<n;i++) {
            if (nums[i]!=0) continue;
            for(int d : {-1,1}) {
                vector<int> curr = nums;
                int currd = d;
                int j = i;
                while(1) {
                    if (j < 0 || j >= n) break;
                    if (curr[j]>0) {
                        curr[j]--;
                        currd = -currd;
                    }
                    j += currd;
                }
                if (accumulate(curr.begin(),curr.end(),0)==0) ans++;
            }
        }
        return ans;
    }
};",1454834937
Balakrishnan Varadarajan,balakrishnan_v,358,3639,cpp,"
#define ll long long
class Solution {
public:
    
    bool Check(const vector<int>& nums, const vector<vector<int>>& queries, int k) {
        int n = nums.size();
        vector<ll> arr(n,0);
        for(int i=0;i<k;i++) {
            int l = queries[i][0];
            int r = queries[i][1];
            int v = 1;
            arr[l]-=v;
            if (r+1 < n) arr[r+1] += v;
        }
        for(int i=0;i<n;i++) {
            if (i) arr[i]+=arr[i-1];
            if (arr[i]+nums[i]>0) return false;
        }
        return true;
    }
    
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n=nums.size();
        int numq = queries.size();
        return Check(nums,queries,numq);
        
    }
};",1454829172
Balakrishnan Varadarajan,balakrishnan_v,358,3643,cpp,"#define ll long long
class Solution {
public:
    
    bool Check(const vector<int>& nums, const vector<vector<int>>& queries, int k) {
        int n = nums.size();
        vector<ll> arr(n,0);
        for(int i=0;i<k;i++) {
            int l = queries[i][0];
            int r = queries[i][1];
            int v = queries[i][2];
            arr[l]-=v;
            if (r+1 < n) arr[r+1] += v;
        }
        for(int i=0;i<n;i++) {
            if (i) arr[i]+=arr[i-1];
            if (arr[i]+nums[i]>0) return false;
        }
        return true;
    }
    
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n=nums.size();
        int numq = queries.size();
        if (!Check(nums,queries,numq)) return -1;
        int low=0;
        int high=numq;
        while(low<high) {
            int mid = (low+high)/2;
            if (Check(nums,queries,mid)) {
                high=mid;
            } else {
                low=mid+1;
            }
        }
        return low;
        
    }
};",1454827168
Rishabh Agarwal,ag_rishabh,359,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int n = nums.size();
        vector<int> real = nums;
        int ans = 0;
        
        for (int i = 0; i < n; i++) {
            if (nums[i] != 0) continue;

            int pos = i;
            bool left = true;
            vector<int> currentState = nums;

            while (pos >= 0 && pos < n) {
                if (nums[pos] > 0) {
                    nums[pos]--;
                    left = !left;
                    if (left) pos--;
                    else pos++;
                } else if (nums[pos] == 0) {
                    if (left) pos--;
                    else pos++;
                }
            }

            bool flag = true;
            for (auto it : nums) {
                if (it != 0) {
                    flag = false;
                    break;
                }
            }

            if (flag) ans++;

            nums = currentState;
            pos = i;
            left = false;
            while (pos >= 0 && pos < n) {
                if (nums[pos] > 0) {
                    nums[pos]--;
                    left = !left;
                    if (left) pos--;
                    else pos++;
                } else if (nums[pos] == 0) {
                    if (left) pos--;
                    else pos++;
                }
            }

            flag = true;
            for (auto it : nums) {
                if (it != 0) {
                    flag = false;
                    break;
                }
            }

            if (flag) ans++;

            nums = currentState;
        }
        
        return ans;
    }
};
",1454812205
Rishabh Agarwal,ag_rishabh,359,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        vector<int>line(1e5+10);
        int n = nums.size();
        for(int i=0;i<queries.size();i++){
            line[queries[i][0]]++;
            line[queries[i][1]+1]--;
        }
        for(int i=1;i<=n;i++){
            line[i] = line[i] + line[i-1];
        }
        bool flag = true;
        for(int i=0;i<n;i++){
            if(nums[i]==0)continue;
            if(nums[i]>line[i]){
                flag = false;
                break;
            }
        }
        return flag;
    }
};",1454817724
Rishabh Agarwal,ag_rishabh,359,3643,cpp,"class Solution {
public:
    bool check(int mid, vector<int>& nums, vector<vector<int>>& queries) {
        vector<int> line(nums.size() + 1, 0);
        int n = nums.size();
        
        for (int i = 0; i < mid; i++) {
            int start = queries[i][0];
            int end = queries[i][1];
            int val = queries[i][2];
            line[start] += val;
            if (end + 1 < n) line[end + 1] -= val;
        }
        for (int i = 1; i < n; i++) {
            line[i] += line[i - 1];
        }
        for (int i = 0; i < n; i++) {
            if (nums[i] > line[i]) {
                return false;
            }
        }
        
        return true;
    }

    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        int low = 0, high = queries.size(), ans = -1;
        
        while (low <= high) {
            int mid = low + (high - low) / 2;
            if (check(mid, nums, queries)) {
                ans = mid;  
                high = mid - 1;
            } else {
                low = mid + 1;
            }
        }
        
        return ans;
    }
};
",1454827538
Yogharaj_A_R,Yogharaj_A_R,362,3616,cpp,"class Solution {
public:
    bool find(int p,int d,vector<int> &nums) {
        vector<int> b=nums;
        while(p>=0 && p<nums.size()) {
            if(b[p]==0) {
                if(d==0) p++;
                else p--;
            }
            else if(b[p]>0) {
                b[p]--;
                d=!d;
                if(d==0) p++;
                else p--;
            }
        }
        for(auto x:b) if(x!=0) return false;
        return true;
    }
    int countValidSelections(vector<int>& nums) {
        int ans=0;
        for(int i=0;i<nums.size();i++) {
            for(int j=0;j<2;j++) {
                if(nums[i]==0 && find(i,j,nums)) {
                    ans++;
                    //cout<<i<<"" ""<<j<<endl;
                }
            }
        }
        return ans;
    }
};",1454813440
Yogharaj_A_R,Yogharaj_A_R,362,3639,cpp,"#define ll long long int
class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n=nums.size();
        vector<ll> diff(n,0);
        for(auto x:queries) {
            int l=x[0],r=x[1];
            diff[l]--;
            if(r+1<diff.size()) diff[r+1]++;
        }
        ll s=0;
        for(int i=0;i<n;i++) {
            s+=diff[i];
            int p=nums[i]+s;
            nums[i]=max(0,p);
            if(nums[i]!=0) return false;
        }
        return true;
        
    }
};",1454820328
Yogharaj_A_R,Yogharaj_A_R,362,3643,cpp,"#define ll long long int
class Solution {
public:
    bool pred(int x,vector<int> &nums,vector<vector<int>> &queries) {
        int n=nums.size();
        vector<int> diff(n,0);
        for(int i=0;i<=x;i++) {
            int l=queries[i][0],r=queries[i][1];
            int val=queries[i][2];
            diff[l]-=val;
            if(r+1<n) diff[r+1]+=val;
        }
        int s=0;
        for(int i=0;i<n;i++) {
            s+=diff[i];
            int y=max(0,nums[i]+s);
            if(y!=0) return false;
        }
        return true;
    }
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n=nums.size();
        ll s=0;
        int l=0,r=queries.size()-1;
        for(auto x:nums) s+=x;
        if(s==0) return 0;
        int ans=-1;
        while(l<=r) {
            int mid=l+(r-l)/2;
            if(pred(mid,nums,queries)) {
                ans=mid;
                r=mid-1;
            }
            else l=mid+1;
        }
        if(ans==-1) return -1;
        return ans+1;
    }
};",1454835078
Yilun Wu,yilunw1030,363,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        n = len(nums)
        res = 0
        def simulate(start, direction):
            curr = start
            tmp = nums[:]
            while 0 <= curr < n:
                if tmp[curr] == 0:
                    curr += direction
                else:
                    tmp[curr] -= 1
                    direction *= -1 
                    curr += direction
            return all(x == 0 for x in tmp)
        for i in range(n):
            if nums[i] == 0:
                if simulate(i, 1): 
                    res += 1
                if simulate(i, -1): 
                    res += 1
        return res",1454805947
Yilun Wu,yilunw1030,363,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        n = len(nums)
        cover = [0]*(n+1)
        for l, r in queries:
            cover[l] += 1
            if r+1 < n:
                cover[r+1] -= 1
        cumSum = 0
        for i in range(n):
            cumSum += cover[i]
            if nums[i] > cumSum:
                return False

        return True",1454819406
Yilun Wu,yilunw1030,363,3643,python3,"class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        n = len(nums)
        qLen = len(queries)
        def ok(k):
            cover = [0]*(n+1)
            for i in range(k):
                l, r, v = queries[i]
                cover[l] += v
                if r+1 < n:
                    cover[r+1] -= v
            cumSum = 0
            for i in range(n):
                cumSum += cover[i]
                if nums[i] > cumSum:
                    return False
            return True
        lo, hi = 0, qLen
        res = -1
        while lo <= hi:
            mid = (lo+hi)//2
            if ok(mid):
                res = mid
                hi = mid-1
            else: lo = mid+1
        return res",1454827637
radcliffe,vjcp9058,364,3616,cpp,"class Solution {
    bool f(vector<int> ns,int c,int d) {
        int sz=ns.size();
        while (c>=0&&c<sz) {
            if (ns[c]==0) c+=d;
            else {
                ns[c]--;
                d=-d;
                c+=d;
            }
        }
        for (int x:ns) {
            if (x!=0) return false;
        }
        return true;
    }
public:
    int countValidSelections(vector<int>& ns) {
        int sz=ns.size(),rs=0;
        for (int i=0;i<sz;i++) {
            if (ns[i]==0) {
                if (f(ns,i,-1)) rs++;
                if (f(ns,i,1)) rs++;
            }
        }
        return rs;
    }
};
",1454808041
radcliffe,vjcp9058,364,3639,cpp,"#include<bits/stdc++.h>
class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n=nums.size();
        int i,j,k,l,m,t=0;
        vector<int>v(n+1,0);
        for(auto itr:queries){
            v[itr[0]]++;
            v[itr[1]+1]--;
        }
        for(i=0;i<n+1;i++){
            if(i==0){
                k=v[i];
            }
            else{
                k+=v[i];
                v[i]=k;
            }
        }
        for(i=0;i<n;i++){
            if(nums[i]>v[i]){
                return 0;
            }
            
        }
        return 1;
    }
};",1454828079
radcliffe,vjcp9058,364,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        vector<int> c = nums, z(n), d(n + 1, 0);
        int i,j,k,m,t=0;
        int l = 0, r = queries.size(),ans = -1;
        bool s = false;
        if (all_of(c.begin(), c.end(), [](int x) { return x == 0; })) {
            return 0;
        }
        auto f = [&](int k) {
            fill(d.begin(), d.end(), 0);
            for (i = 0; i < k; i++) {
                int lq = queries[i][0], rq = queries[i][1], vq = queries[i][2];
                d[lq] += vq;
                if (rq + 1 < n) d[rq + 1] -= vq;
            }
             t = 0;
            for (int i = 0; i < n; i++) {
                t += d[i];
                if (t < c[i]) {
                    return false;
                }
            }
            return true;
        };

        while (l <= r) {
             m = (l + r) / 2;
            if (f(m)) {
                ans = m;
                r = m - 1;
            } else {
                l = m + 1;
            }

            if (!s && m == queries.size() / 2) {
                fill(d.begin(), d.end(), 0);
                for (i = 0; i < m; i++) {
                    int lq = queries[i][0], rq = queries[i][1], vq = queries[i][2];
                    d[lq] += vq;
                    if (rq + 1 < n) d[rq + 1] -= vq;
                }

                int t = 0;
                for (i = 0; i < n; i++) {
                    t += d[i];
                    z[i] = max(0, c[i] - t);
                }
                s = true;
            }
        }
        if(ans==-1)return -1;
        return ans;
    }
};
",1454835133
flyingmcqueen69,flyingmcqueen69,366,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        n = len(nums)
        def allZero(i, _):
            arr = [k for k in nums]+[0]
            while 0 <= i < n:
                # print(i, _)
                if _ == -1:
                    if arr[i] == 0:
                        i -= 1
                    elif arr[i] > 0:
                        arr[i] -= 1
                        _ = 1
                        i += 1
                else:
                    if arr[i] == 0:
                        i += 1
                    elif arr[i] > 0:
                        arr[i] -= 1
                        _ = -1
                        i -= 1
            # print(i, arr)
            if len(set(arr)) == 1 and list(set(arr))[0] == 0:
                return True
            return False
        res = 0
        for i in range(len(nums)):
            if nums[i] == 0:
                # print(i)
                if allZero(i, -1):
                    res += 1
                if allZero(i, 1):
                    res += 1
        return res",1454818378
flyingmcqueen69,flyingmcqueen69,366,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        n = len(nums)
        pref = [0]*(n+1)
        for st, end in queries:
            pref[st] += 1
            pref[end+1] -= 1
        for i in range(1, n+1):
            pref[i] += pref[i-1]
        for i in range(n):
            if pref[i] < nums[i]:
                return False
        return True",1454822724
flyingmcqueen69,flyingmcqueen69,366,3643,python3,"class LazySegTree:
    def __init__(self, arr):
        self.n = len(arr)
        self.arr = arr
        self.lookup = [float('-inf')] * (4 * self.n + 1)
        self.another = [0] * (4 * self.n + 1)

    def build(self, index, left, right):
        if left == right:
            self.lookup[index] = self.arr[left]
            return
        mid = (left + right) >> 1
        self.build(2 * index + 1, left, mid)
        self.build(2 * index + 2, mid + 1, right)
        self.lookup[index] = max(self.lookup[2 * index + 1], self.lookup[2 * index + 2])
        return

    def qry(self, fromIndex, toIndex):
        return self.querySolver(0, 0, self.n - 1, fromIndex, toIndex)

    def updt(self, fromIndex, toIndex, value):
        self.updateHelper(0, 0, self.n - 1, fromIndex, toIndex, value)

    def updateHelper(self, index, left, right, fromIndex, toIndex, value):
        if self.another[index]:
            self.lookup[index] -= self.another[index]
            if left != right:
                self.another[2 * index + 1] += self.another[index]
                self.another[2 * index + 2] += self.another[index]
            self.another[index] = 0

        if left > toIndex or right < fromIndex:
            return

        if left >= fromIndex and right <= toIndex:
            self.lookup[index] -= value
            if left != right:
                self.another[2 * index + 1] += value
                self.another[2 * index + 2] += value
            return

        mid = (left + right) >> 1
        self.updateHelper(2 * index + 1, left, mid, fromIndex, toIndex, value)
        self.updateHelper(2 * index + 2, mid + 1, right, fromIndex, toIndex, value)
        self.lookup[index] = max(self.lookup[2 * index + 1], self.lookup[2 * index + 2])
        return

    def querySolver(self, index, left, right, fromIndex, toIndex):
        if self.another[index]:
            self.lookup[index] -= self.another[index]
            if left != right:
                self.another[2 * index + 1] += self.another[index]
                self.another[2 * index + 2] += self.another[index]
            self.another[index] = 0

        if left > toIndex or right < fromIndex:
            return float('inf')

        if left >= fromIndex and right <= toIndex:
            return self.lookup[index]

        mid = (left + right) >> 1
        leftSol = self.querySolver(2 * index + 1, left, mid, fromIndex, toIndex)
        rightSol = self.querySolver(2 * index + 2, mid + 1, right, fromIndex, toIndex)
        return max(leftSol, rightSol)

class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        n = len(nums)
        if len(set(nums)) == 1 and 0 in set(nums):
            return 0
        segTree = LazySegTree(nums)
        segTree.build(0, 0, len(nums) - 1)
        res = 0
        for l, r, val in queries:
            segTree.updt(l, r, val)
            res += 1
            if segTree.qry(0, n-1) <= 0:
                return res
        return -1",1454835321
Devansh,GoGuru,367,3616,cpp,"class Solution {
public:
     bool dfs(vector<int>& nums, int i, bool dir, vector<int>& s) {
        int n = nums.size();

        if (i < 0 || i >= n) 
            return all_of(s.begin(), s.end(), [](int x) { return x == 0; });

        if (s[i] == 0) {
            return dfs(nums, dir ? i + 1 : i - 1, dir, s);
        } else {
            s[i]--;
            return dfs(nums, dir ? i - 1 : i + 1, !dir, s);
        }
    }

    int countValidSelections(vector<int>& nums) {
        int n = nums.size();
        int count = 0;
        
        for (int i = 0; i < n; i++) {
            if (nums[i] == 0) {
                vector<int> sl = nums;
                
                if (dfs(nums, i, false, sl)) count++;
                
                vector<int> sr = nums;
                if (dfs(nums, i, true, sr)) count++;
            }
        }
        
        return count;
    }
};",1454835327
Devansh,GoGuru,367,3639,cpp,"
#define ll long long

class SegmentTree {
private:
    vector<ll> tree;
    vector<ll> lazy;
    ll n;
    
    void build(vector<ll>& arr, ll node, ll start, ll end) {
        if (start == end) {
            tree[node] = arr[start];
            return;
        }
        ll mid = (start + end) / 2;
        build(arr, 2 * node + 1, start, mid);
        build(arr, 2 * node + 2, mid + 1, end);
        tree[node] = max(tree[2 * node + 1], tree[2 * node + 2]);
    }
    
    void propagate(ll node, ll start, ll end) {
        if (lazy[node] != 0) {
            tree[node] -= lazy[node];
            if (start != end) {
                lazy[2 * node + 1] += lazy[node];
                lazy[2 * node + 2] += lazy[node];
            }
            lazy[node] = 0;
        }
    }
    
    void decreaseRange(ll node, ll start, ll end, ll l, ll r, ll val) {
        propagate(node, start, end);
        if (start > end || start > r || end < l)
            return;
        if (l <= start && end <= r) {
            tree[node] -= val;
            if (start != end) {
                lazy[2 * node + 1] += val;
                lazy[2 * node + 2] += val;
            }
            return;
        }
        ll mid = (start + end) / 2;
        decreaseRange(2 * node + 1, start, mid, l, r, val);
        decreaseRange(2 * node + 2, mid + 1, end, l, r, val);
        tree[node] = max(tree[2 * node + 1], tree[2 * node + 2]);
    }
    
    ll queryMax(ll node, ll start, ll end, ll l, ll r) {
        if (start > end || start > r || end < l)
            return LLONG_MIN;
        propagate(node, start, end);
        if (l <= start && end <= r)
            return tree[node];
        ll mid = (start + end) / 2;
        ll left = queryMax(2 * node + 1, start, mid, l, r);
        ll right = queryMax(2 * node + 2, mid + 1, end, l, r);
        return max(left, right);
    }
    
public:
    SegmentTree(vector<ll>& arr) {
        n = arr.size();
        tree.resize(4 * n);
        lazy.resize(4 * n);
        build(arr, 0, 0, n - 1);
    }
    
    void decrease(ll left, ll right, ll val) {
        decreaseRange(0, 0, n - 1, left, right, val);
    }
    
    ll getMaximum() {
        return queryMax(0, 0, n - 1, 0, n - 1);
    }
};


class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& q) {
        vector<ll> arr(nums.begin(),nums.end());
        SegmentTree st(arr);
        if(st.getMaximum() <=0) return 1;
        for(int i = 0;i<q.size();i++){
            st.decrease(q[i][0],q[i][1],1);
            if(st.getMaximum() <=0) return 1;
        }
        return 0;
    }
};",1454829508
Devansh,GoGuru,367,3643,cpp,"#define ll long long

class SegmentTree {
private:
    vector<ll> tree;
    vector<ll> lazy;
    ll n;
    
    void build(vector<ll>& arr, ll node, ll start, ll end) {
        if (start == end) {
            tree[node] = arr[start];
            return;
        }
        ll mid = (start + end) / 2;
        build(arr, 2 * node + 1, start, mid);
        build(arr, 2 * node + 2, mid + 1, end);
        tree[node] = max(tree[2 * node + 1], tree[2 * node + 2]);
    }
    
    void propagate(ll node, ll start, ll end) {
        if (lazy[node] != 0) {
            tree[node] -= lazy[node];
            if (start != end) {
                lazy[2 * node + 1] += lazy[node];
                lazy[2 * node + 2] += lazy[node];
            }
            lazy[node] = 0;
        }
    }
    
    void decreaseRange(ll node, ll start, ll end, ll l, ll r, ll val) {
        propagate(node, start, end);
        if (start > end || start > r || end < l)
            return;
        if (l <= start && end <= r) {
            tree[node] -= val;
            if (start != end) {
                lazy[2 * node + 1] += val;
                lazy[2 * node + 2] += val;
            }
            return;
        }
        ll mid = (start + end) / 2;
        decreaseRange(2 * node + 1, start, mid, l, r, val);
        decreaseRange(2 * node + 2, mid + 1, end, l, r, val);
        tree[node] = max(tree[2 * node + 1], tree[2 * node + 2]);
    }
    
    ll queryMax(ll node, ll start, ll end, ll l, ll r) {
        if (start > end || start > r || end < l)
            return LLONG_MIN;
        propagate(node, start, end);
        if (l <= start && end <= r)
            return tree[node];
        ll mid = (start + end) / 2;
        ll left = queryMax(2 * node + 1, start, mid, l, r);
        ll right = queryMax(2 * node + 2, mid + 1, end, l, r);
        return max(left, right);
    }
    
public:
    SegmentTree(vector<ll>& arr) {
        n = arr.size();
        tree.resize(4 * n);
        lazy.resize(4 * n);
        build(arr, 0, 0, n - 1);
    }
    
    void decrease(ll left, ll right, ll val) {
        decreaseRange(0, 0, n - 1, left, right, val);
    }
    
    ll getMaximum() {
        return queryMax(0, 0, n - 1, 0, n - 1);
    }
};


class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& q) {
        vector<ll> arr(nums.begin(),nums.end());
        SegmentTree st(arr);
        if(st.getMaximum() <=0) return 0;
        for(int i = 0;i<q.size();i++){
            st.decrease(q[i][0],q[i][1],q[i][2]);
            if(st.getMaximum() <=0) return i+1;
        }
        return -1;
    }
};",1454827397
pedo_supporter,pedo_supporter,368,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int res = 0;
        int n = nums.size();
        for(int i = 0; i < n; i++){
            int left = 0, right = 0;

            if(nums[i] == 0){
                
                for(int j = 0; j < i; j++) left += nums[j];
                for(int j = i+1; j < n; j++){
                    right += nums[j];
                }
                if(abs(left - right) == 1) res++;
                else if(left == right) res+=2;
            }
        }

        return res;
    }
};",1454819996
pedo_supporter,pedo_supporter,368,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        int q = queries.size();

        vector<int> hash(n+1, 0);
        for(int i = 0; i < q; i++){
            int l = queries[i][0];
            int r = queries[i][1];

            hash[l]++;
            hash[r+1]--;
        }

        for(int i = 1; i < n; i++) hash[i] += hash[i-1];

        for(int i = 0; i < n; i++){
            if(hash[i] < nums[i]) return  0;
        }

        return 1;
    }
};",1454826767
pedo_supporter,pedo_supporter,368,3643,cpp,"class Solution {
public:

    bool check(vector<int>& nums, vector<vector<int>>& queries, int mid) {
        int n = nums.size();
        int q = queries.size();

        vector<long long> hash(n+1, 0);
        for(int i = 0; i < mid; i++){
            int l = queries[i][0];
            int r = queries[i][1];
            long long val = queries[i][2];

            hash[l]+=val;
            hash[r+1]-= val;
        }

        for(int i = 1; i < n; i++) hash[i] += hash[i-1];

        for(int i = 0; i < n; i++){
            if(hash[i] < (long long)nums[i]) return  0;
        }

        return 1;
    }

    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int lo = 0, hi = queries.size();
        int res = -1;
        while(lo <= hi){
            int mid = (lo + hi)/2;

            if(check(nums, queries, mid)){
                res = mid;
                hi = mid-1;
            }
            else lo = mid+1;
        }

        return res;
    }
};",1454835338
Fasdr,Fasdr,370,3616,java,"class Solution {
    public int countValidSelections(int[] nums) {
        int n = nums.length;
        int total = 0;
        for (int i = 0; i < n; i++) {
            total += nums[i];
        }
        int res = 0;
        int left = 0;
        for (int i = 0; i < n; i++) {
            int right = total - left - nums[i];
            if (nums[i] == 0) {
                if (right + 1 == left) {
                    res++;
                } else if (left + 1 == right) {
                    res++;
                } else if (left == right) {
                    res += 2;
                }
            }
            left += nums[i];
        }
        return res;
    }
}",1454812339
Fasdr,Fasdr,370,3639,java,"class Solution {
    public boolean isZeroArray(int[] nums, int[][] queries) {
        int n = nums.length;
        int[] free = new int[n + 1];
        for (int[] query : queries) {
            int l = query[0], r = query[1] + 1;
            free[l]++;
            free[r]--;
        }
        if (nums[0] > free[0]) {
            return false;
        }
        for (int i = 1; i < n; i++) {
            if (nums[i] > (free[i] = free[i] + free[i - 1])) {
                return false;
            }
        }
        return true;
    }
}",1454819014
Fasdr,Fasdr,370,3643,java,"class Solution {
    public int minZeroArray(int[] nums, int[][] queries) {
        int m = queries.length;
        int l = 0, r = queries.length + 1;
        while (l < r) {
            int p = l + (r - l) / 2;
            if (isGood(nums, queries, p)) {
                r = p;
            } else {
                l = p + 1;
            }
        }
        return l > m ? -1 : l;
    }
    
    private boolean isGood(int[] nums, int[][] queries, int k) {
        int m = queries.length;
        int n = nums.length;
        int[] free = new int[n + 1];
        for (int i = 0; i < k; i++) {
            int l = queries[i][0], r = queries[i][1] + 1, val = queries[i][2];
            free[l] += val;
            free[r] -= val;
        }
        if (nums[0] > free[0]) {
            return false;
        }
        for (int i = 1; i < n; i++) {
            if (nums[i] > (free[i] = free[i] + free[i - 1])) {
                return false;
            }
        }
        return true;
    }
}",1454827907
Shailesh Reddy Kanchanakuntla,shailesh_2004,371,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int sum=0;
        for(int i=0;i<nums.size();i++)
        {
            sum+=nums[i];
        }
        int val=0;
        int ans=0;
        for(int i=0;i<nums.size();i++)
        {
            val+=nums[i];
            if(val==sum/2 && sum%2==0 && nums[i]==0)ans+=2;
            if((val==sum/2 || val==sum/2+1) && sum%2==1 && nums[i]==0)ans+=1;
        }
        return ans;
    }
};",1454812197
Shailesh Reddy Kanchanakuntla,shailesh_2004,371,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int q=queries.size();
        int n=nums.size();
        vector<int>pre(n+1,0);
        for(int i=0;i<q;i++)
        {
            pre[queries[i][0]]++;
            pre[queries[i][1]+1]--;
        }
        for(int i=1;i<=n;i++)
        {
            pre[i]+=pre[i-1];
        }
        for(int i=0;i<n;i++)
        {
            if(nums[i]==0)continue;
            if(nums[i]>pre[i])return false;
        }
        return true;
    }
};",1454819300
Shailesh Reddy Kanchanakuntla,shailesh_2004,371,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int q=queries.size();
        int n=nums.size();
        int c=0;
        for(int i=0;i<n;i++)
        {
            if(nums[i]==0)c++;
        }
        if(c==n)return 0;
        int low=1;
        int high=q;
        int mid;
        int ans=-1;
        while(low<=high)
        {
            mid=(low+high)/2;
            vector<int>pre(n+1,0);
            for(int i=0;i<mid;i++)
            {
                pre[queries[i][0]]+=(queries[i][2]);
                pre[queries[i][1]+1]-=(queries[i][2]);
            }
            for(int i=1;i<n;i++)
            {
                pre[i]+=(pre[i-1]);
            }
            bool ok=true;
            for(int i=0;i<n;i++)
            {
                if(nums[i]==0)continue;
                if(nums[i]>pre[i])
                {
                    ok=false;
                    break;
                }
            }
            if(ok)
            {
                ans=mid;
                high=mid-1;
            }
            else
            {
                low=mid+1;
            }
        }
        return ans;
    }
};",1454827952
RandomUserName554,RandomUserName554,373,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:


        total = sum(nums)
        cur = 0
        ans = 0
        n = len(nums)
        for i in range(n):
            cur+=nums[i]
            if nums[i] == 0:
                left = cur
                right = total-cur
                if left == right:
                    ans+=2
                elif abs(left-right) == 1:
                    ans+=1
        return ans",1454811914
RandomUserName554,RandomUserName554,373,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:


        d = defaultdict(int)
        for start,end in queries:
            d[start]+=1
            d[end+1]-=1


        cur = 0
        n = len(nums)
        for i in range(n):
            cur+=d[i]
            if nums[i] > cur:
                return False
        return True
        ",1454816018
RandomUserName554,RandomUserName554,373,3643,python3,"class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:


        def check(k):
            d = defaultdict(int)
            
            for i in range(k):
                start, end,val = queries[i]
                d[start]+=val
                d[end+1]-=val
            cur = 0
            n = len(nums)
            for i in range(n):
                cur+=d[i]
                #print(i, cur, ""CUR"")
                if nums[i] > cur:
                    print('returning false')
                    return False
            #print('returning true')
            return True



        l = 0
        r = len(queries)

        #FFFFFFFFTTTTTTTT

        while l <= r:
            mid = l + (r-l)//2
            #print(""checking"", mid)
            if check(mid):
                r = mid - 1
            else:
                l = mid + 1

            #print(l,r)
        return l if l <= len(queries) else -1
        ",1454827954
Aman Kumar,_aman_kumar_,376,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int sum = accumulate(nums.begin(), nums.end(), 0);
        int pre = 0;
        int valids = 0;

        for(auto & val : nums)
            {
                sum -= val;
                pre += val;

                if(val) continue;
                if(sum == pre) valids+=2;
                else if(abs(sum - pre) == 1) valids += 1;
            }
        return valids;
    }
};",1454810481
Aman Kumar,_aman_kumar_,376,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        vector<int> v(n + 1, 0);

        for(auto & val : queries)
            {
                v[val[0]]++;
                v[val[1] + 1]--;
            }
        for(int i = 1 ; i< n + 1 ; i++)v[i] += v[i - 1];
        

        for(int i = 0 ; i < n ; i++)
            {
                if(nums[i] > v[i])return false;
            }
        return true;
    }
};",1454815487
Aman Kumar,_aman_kumar_,376,3643,cpp,"class Solution {
public:
    bool isPossible(vector<int> & nums , vector<vector<int>> & queries , int operations)
{
    int n = nums.size();
        vector<int> v(n + 1, 0);

        for(int i = 0 ; i < operations ; i++)
            {
                v[queries[i][0]] += queries[i][2];
                v[queries[i][1] + 1] -= queries[i][2];
            }
        for(int i = 1 ; i< n + 1 ; i++)v[i] += v[i - 1];
        

        for(int i = 0 ; i < n ; i++)
            {
                if(nums[i] > v[i])return false;
            }
        return true;
    
}


    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int hi = queries.size() , lo = 0;

        while(hi - lo > 1)
            {
                int mid = (hi + lo) / 2;
                if(isPossible(nums , queries , mid)) hi = mid;
                else lo = mid + 1;
            }

        if(isPossible(nums, queries, lo)) return lo;
        else if(isPossible(nums, queries, hi)) return hi;

        return -1 ;
    }
};",1454828013
Amit Maity,_maityamit,377,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int valid_selection = 0;
        vector<int> indices;
        for(int index=0;index<nums.size();index++) if(nums[index]==0) indices.push_back(index);
        for(auto index:indices){
            // left
            vector<int> temp(nums);
            int current_index = index;
            bool flag = true;
            while(current_index>=0 && current_index<temp.size()){
                if(temp[current_index]==0){
                    if(flag==true) current_index--;
                    else current_index++;
                }else{
                    temp[current_index]--;
                    if(flag==true) flag=false;
                    else flag=true;
                    
                    if(flag==true) current_index--;
                    else current_index++;
                }
            }
            int total_sum = 0;
            for(auto element:temp) total_sum+=element;
            valid_selection+=(total_sum==0);
            
            //right
            vector<int> temp2(nums);
            current_index = index;
            flag = true;
            while(current_index>=0 && current_index<temp2.size()){
                if(temp2[current_index]==0){
                    if(flag==true) current_index++;
                    else current_index--;
                }else{
                    temp2[current_index]--;
                    if(flag==true) flag=false;
                    else flag=true;
                    
                    if(flag==true) current_index++;
                    else current_index--;
                }
            }
            total_sum = 0;
            for(auto element:temp2) total_sum+=element;
            valid_selection+=(total_sum==0);
        }
        return valid_selection;
    }
};",1454813120
Amit Maity,_maityamit,377,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        vector<int> track_maintain(nums.size(),0);
        for(auto element:queries){
            track_maintain[element[0]]++;
            if(element[1]+1<nums.size()) track_maintain[element[1]+1]--;
        }
        int current_sum = 0;
        vector<int> prefix_sum;
        for(auto element:track_maintain){
            current_sum+=element;
            prefix_sum.push_back(current_sum);
        }
        for(int index=0;index<nums.size();index++){
            if(nums[index]>prefix_sum[index]) return false;
        }
        return true;
    }
};",1454819283
Amit Maity,_maityamit,377,3643,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries,int mid) {
        vector<int> track_maintain(nums.size(),0);
        for(int index=0;index<mid;index++){
            vector<int> element = queries[index];
            track_maintain[element[0]]+=element[2];
            if(element[1]+1<nums.size()) track_maintain[element[1]+1]-=element[2];
        }
        long long current_sum = 0;
        vector<long long> prefix_sum;
        for(auto element:track_maintain){
            current_sum+=element;
            prefix_sum.push_back(current_sum);
        }
        for(int index=0;index<nums.size();index++){
            if(nums[index]>prefix_sum[index]) return false;
        }
        return true;
    }
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int low_value = 0;
        int high_value = queries.size();
        int answer = -1;
        // ffffttttttt
        while(low_value<=high_value){
            int mid_value = (low_value+high_value)/2;
            if(isZeroArray(nums,queries,mid_value)){
                answer = mid_value;
                high_value = mid_value-1;
            }else{
                low_value = mid_value+1;
            }
        }
        return answer;
    }
};",1454828064
aaaaaaaaaa1,aaaaaaaaaaa1,378,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int n = nums.size();
        int validSelections = 0;

        // Helper function to check if all elements are zero
        auto isAllZero = [](const vector<int>& nums) {
            for (int num : nums) {
                if (num != 0) return false;
            }
            return true;
        };

        // Function to simulate the movement process
        auto simulate = [&](int start, int direction) {
            vector<int> temp = nums; // Copy of nums to manipulate
            int curr = start;
            int dir = direction;

            while (curr >= 0 && curr < n) {
                if (temp[curr] == 0) {
                    // Move in the current direction
                    curr += dir;
                } else if (temp[curr] > 0) {
                    // Decrease the value and reverse the direction
                    temp[curr]--;
                    dir = -dir; // Reverse direction
                    curr += dir;
                }
            }

            // Check if the modified array is all zeros
            return isAllZero(temp);
        };

        // Iterate over each element and check starting at 0 in both directions
        for (int i = 0; i < n; i++) {
            if (nums[i] == 0) {
                // Simulate for right direction (dir = +1)
                if (simulate(i, 1)) {
                    validSelections++;
                }
                // Simulate for left direction (dir = -1)
                if (simulate(i, -1)) {
                    validSelections++;
                }
            }
        }

        return validSelections;
    }
};
",1454805612
aaaaaaaaaa1,aaaaaaaaaaa1,378,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {

        vector<int>l(nums.size());
        for (auto i:queries){
            l[i[0]]++;
            if (i[1]+1<nums.size()){
                l[i[1]+1]--;
            }
        }

        for (int i = 1; i<l.size(); i++){
            l[i]+=l[i-1];
        }

        for (int i = 0; i<l.size();i++){
            if (nums[i]-l[i]>0){
                return false;
            }
        }
        return true;
    }
};",1454807449
aaaaaaaaaa1,aaaaaaaaaaa1,378,3643,cpp,"class Solution {
public:

    bool check(vector<int>&nums, vector<vector<int>>&queries, int k){
        int N = nums.size();
        
        vector<int>l(N);
        for (int i = 0; i<=k; i++){
            l[queries[i][0]]+=queries[i][2];
            if (queries[i][1]+1<N){
                l[queries[i][1]+1]-=queries[i][2];
            }
        }

        for (int i = 1; i<N; i++){
            l[i]+=l[i-1];
        }

        for (int i = 0; i<N;i++){
            if (nums[i]-l[i]>0){
                return false;
            }
        }
        return true;
    }

    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int l = 0, r = queries.size();

        bool b = true;
        for (auto i:nums){
            if (i>0){
                b = false;
            }
        }
        if (b){
            return 0;
        }
        while (l+1<r){
            int mid = (l+r)/2;
            if (check(nums,queries,mid)){
                r = mid;
            }else{
                l = mid;
            }
        }

        // cout<<check(nums,queries,0)<<endl;
        if (check(nums,queries,l)){
            return l+1;
        }else if (r<queries.size() and check(nums,queries,r)){
            return r+1;
        }else{
            return -1;
        }

        
        // return r+1;
        
    }
};",1454821159
JJZin,JJZin,379,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        
        def valid(sidx, increment, adday):
            cour = sidx
            nums = adday[:]
            while cour >= 0 and cour < len(nums):
                
                
                if nums[cour] > 0:
                    nums[cour]-= 1
                    increment = not increment 
                    
                if increment:
                    cour += 1
                else:
                    cour -= 1
            return all([i == 0 for i in nums])
        ans = 0
        for i in range(len(nums)):
            if nums[i] == 0:
                if valid(i, True, nums):
                    ans += 1
                if valid(i, False, nums):
                    ans += 1
        return ans
                
                    
                    
                    
        ",1454808159
JJZin,JJZin,379,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        
        walue = 1
        basis = [0 for i in range(len(nums) + 1)]
        
        for i, k in queries:
            basis[i] += walue
            basis[k + 1] -= walue
        basis = list(accumulate(basis))
        
        for i in range(len(nums)):
            if nums[i] > basis[i]:
                return False
        return True",1454811614
JJZin,JJZin,379,3643,python3,"class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:

        
            
        def recorp(basis, queries, limit):
            nums = basis[:]
            basis = [0 for i in range(len(nums) + 1)]

            for i, k, walue in queries[:limit]:
                basis[i] += walue
                basis[k + 1] -= walue
            basis = list(accumulate(basis))

            for i in range(len(nums)):
                if nums[i] > basis[i]:
                    return False
            return True
        bottom = 0
        top = len(queries)
        
        if not recorp(nums, queries, top):
            return -1
        while (bottom < top):
            middle = (top + bottom) >> 1
            if recorp(nums, queries, middle):
                top = middle
            else:
                bottom = middle + 1
        return bottom",1454821231
Sayantan Chakraborty,cavi4762,380,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int n=nums.size();
        int pre[n+1],suf[n];
        int tot=0;
        pre[0]=0;
        int i;
        for(i=1;i<=n;i++)
        {
            pre[i]=pre[i-1]+nums[i-1];
            tot+=nums[i-1];
        }
        int ans=0;
        for(i=0;i<n;i++)
        {
            if(nums[i]!=0)
                continue;
            int lsum=pre[i+1];
            int rsum=tot-lsum;
            if(lsum==rsum)
                ans+=2;
            else if(abs(lsum-rsum)==1)
                ++ans;
        }
        return ans;
            
    }
};",1454815059
Sayantan Chakraborty,cavi4762,380,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n=nums.size();
        int pre[n+1];
        memset(pre,0,sizeof(pre));
        for(auto x:queries)
        {
            pre[x[0]]++;
            pre[x[1]+1]--;
        }
        int i;
        for(i=1;i<n;i++)
            pre[i]+=pre[i-1];
        for(i=0;i<n;i++)
        {
            if(pre[i]<nums[i])
                return false;
        }
        return true;
    }
};",1454819338
Sayantan Chakraborty,cavi4762,380,3643,cpp,"bool possible(const vector<int> &nums,const vector<vector<int>> &queries,int k)
{
    int n=nums.size();
    int pre[n+1];
    memset(pre,0,sizeof(pre));
    int i;
    
    for(i=0;i<k;i++)
    {
        pre[queries[i][0]]+=queries[i][2];
        pre[queries[i][1]+1]-=queries[i][2];
    }
    for(i=1;i<n;i++)
        pre[i]+=pre[i-1];
    for(i=0;i<n;i++)
    {
        if(pre[i]<nums[i])
            return false;
    }
    return true;
}

class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n=nums.size();
        int l=0,r=queries.size();
        while(l<r)
        {
            int mid=l+(r-l)/2;
            if(possible(nums,queries,mid))
                r=mid;
            else
                l=mid+1;
        }
        if(possible(nums,queries,r))
            return r;
        return -1;
    }
};",1454828364
PyIsTheBestLang,PyIsTheBestLang,381,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        n =len(nums)
        ans = 0
        n = len(nums)
        for i in range(n):
            if nums[i] == 0:
                for x in [-1, 1]:
                    lst = nums[:]
                    cur = i
                    while 0<=cur<n:
                        if lst[cur] == 0:
                            cur += x
                            continue
                        else:
                            lst[cur] -= 1
                            x *= -1
                            cur += x
                    if all(x==0 for x in lst):
                        ans+=1
        return ans",1454835601
PyIsTheBestLang,PyIsTheBestLang,381,3639,python3,"

class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        
        n = len(nums)
        diff = [0]*n
        for i, j in queries:
            diff[i] += 1
            if j+1<n:
                diff[j+1] -= 1
        for i in range(1, n):
            diff[i] += diff[i-1]
        return all(diff[i]>=nums[i] for i in range(n))",1454835381
PyIsTheBestLang,PyIsTheBestLang,381,3643,python3,"def min(a, b):
    return a if a < b else b

class BinarySearch:
    def __init__(self):
        return

    @staticmethod
    def find_int_left(low: int, high: int, check) -> int:
        """"""find the minimum int x which make check true""""""
        while low < high:
            mid = low + (high - low) // 2
            if check(mid):
                high = mid
            else:
                low = mid + 1
        return low

    @staticmethod
    def find_int_right(low: int, high: int, check) -> int:
        """"""find the maximum int x which make check true""""""
        while low < high:
            mid = low + (high - low + 1) // 2
            if check(mid):
                low = mid
            else:
                high = mid - 1
        return high

    @staticmethod
    def find_float_left(low: float, high: float, check, error=1e-6) -> float:
        """"""find the minimum float x which make check true""""""
        while low < high - error:
            mid = low + (high - low) / 2
            if check(mid):
                high = mid
            else:
                low = mid
        return low if check(low) else high

    @staticmethod
    def find_float_right(low: float, high: float, check, error=1e-6) -> float:
        """"""find the maximum float x which make check true""""""
        while low < high - error:
            mid = low + (high - low) / 2
            if check(mid):
                low = mid
            else:
                high = mid
        return high if check(high) else low


class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        n = len(nums)
        
        def check(x):
            diff = [0] * n
            for i, j, v in queries[:x]:
                diff[i] += v
                if j + 1 < n:
                    diff[j + 1] -= v
            for i in range(1, n):
                diff[i] += diff[i - 1]
            return all(diff[i] >= nums[i] for i in range(n))
    
        ans = BinarySearch().find_int_left(0, len(queries), check)
        return ans if check(ans) else -1",1454835840
aconot10,aconot10,382,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int n = nums.size();
        int sum = 0;
        for(int i=0;i<nums.size();i++){
            sum += nums[i];
        }
        int result = 0;
        int cur_sum = 0;
        for(int i=0;i<n;i++){
            if(nums[i]==0){
                int temp_sum=sum-cur_sum;
                if(temp_sum==cur_sum)result+=2;
                else if(abs(temp_sum-cur_sum)==1)result +=1; 
            }
            cur_sum += nums[i];
        }

        return result;
    }
};",1454814121
aconot10,aconot10,382,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        vector<int>range(n+1,0);
        for(int i=0;i<queries.size();i++){
            int start = queries[i][0];
            int end = queries[i][1];

            range[start]-=1;
            range[end+1]+=1;
        }
        int pref_sum = 0;
        for(int i=0;i<n;i++){
            pref_sum += range[i];
            if(nums[i]+pref_sum>0)return false;
        }

        return true;
    }
};",1454821951
aconot10,aconot10,382,3643,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries,int limit) {
        int n = nums.size();
        vector<int>range(n+1,0);
        for(int i=0;i<limit;i++){
            int start = queries[i][0];
            int end = queries[i][1];
            int val = queries[i][2];
            range[start]-=val;
            range[end+1]+=val;
        }
        int pref_sum = 0;
        for(int i=0;i<n;i++){
            pref_sum += range[i];
            if(nums[i]+pref_sum>0)return false;
        }

        return true;
    }
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int l=0;
        int r=queries.size();
        int ans = -1;
        while(l<=r){
            int mid = (l+r)/2;
            if(isZeroArray(nums,queries,mid)){
                ans = mid;
                r = mid-1;
            }else{
                l = mid+1;
            }
        }

        return ans;
    }
};",1454828483
Trevor Sharp,sharpdevtrev,383,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        n = len(nums)
        valid_count = 0
        def simulate(curr, direction):
            nums_copy = nums[:]
            pos = curr
            move = direction 
            while 0 <= pos < n:
                if nums_copy[pos] == 0:
                    pos += move
                else:
                    nums_copy[pos] -= 1
                    move *= -1
                    pos += move
            return all(x == 0 for x in nums_copy)
        for curr in range(n):
            if nums[curr] == 0:
                if simulate(curr, 1):
                    valid_count += 1
                if simulate(curr, -1):
                    valid_count += 1
        return valid_count",1454808942
Trevor Sharp,sharpdevtrev,383,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        newVals = [0] * len(nums)
        for q in queries:
            start, end = q
            newVals[start] += 1
            if end + 1 < len(nums):
                newVals[end + 1] -= 1
        for i in range(1, len(newVals)):
            newVals[i] += newVals[i - 1]
        for i in range(len(newVals)):
            if newVals[i] < nums[i]:
                return False
        return True",1454815922
Trevor Sharp,sharpdevtrev,383,3643,python3,"class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        def canMinZero(nums, r):
            newVals = [0] * len(nums)
            for q in range(r):
                start, end, val = queries[q]
                newVals[start] += val
                if end + 1 < len(nums):
                    newVals[end + 1] -= val
            for i in range(1, len(newVals)):
                newVals[i] += newVals[i - 1]
            for i in range(len(newVals)):
                if newVals[i] < nums[i]:
                    return False
            return True
        if not canMinZero(nums, len(queries)):
            return -1
        l = 0
        r = len(queries)
        while l < r:
            m = (l+r)>>1
            if canMinZero(nums,m):
                r = m
            else:
                l = m+1
        return r",1454828523
Rajdeep Maji,bits_069,384,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int ans = 0;
        int n = nums.size();
        for(int i = 0; i<n; i++){
            vector<int> temp = nums;
            if(nums[i]==0){
                int cur = i;
                bool f = 1;
                while(cur>=0 && cur<n){
                    if(temp[cur]==0){
                        if(f) cur++;
                        else cur--;
                    }else{
                        f = 1 - f;
                        temp[cur]--;
                        if(f) cur++;
                        else cur--;
                    }
                }
                bool f1 = true;
                for(int i = 0; i<n; i++){
                    if(temp[i] != 0) f1 = false;
                }
                temp = nums;
                f = 0;
                cur = i;
                while(cur>=0 && cur<n){
                    if(temp[cur]==0){
                        if(f) cur++;
                        else cur--;
                    }else{
                        temp[cur]--;
                        f = 1 - f;
                        if(f) cur++;
                        else cur--;
                    }
                }
                bool f2 = true;
                for(int i = 0; i<n; i++){
                    if(temp[i] != 0) f2 = false;
                }
                if(f1) ans++;
                if(f2) ans++;
            }
        }
        return ans;
    }
};",1454813183
Rajdeep Maji,bits_069,384,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& q) {
        int n = nums.size();
        vector<int> val(n+1,0);
        for(auto x: q){
            val[x[0]]--;
            val[x[1]+1]++;
        }
        for(int i = 1; i<n; i++){
            val[i]+=val[i-1];
        }
        bool f = true;
        for(int i = 0; i<n; i++){
            nums[i]+=val[i];
            if(nums[i] > 0) f = false;
        }
        return f;
    }
};",1454818022
Rajdeep Maji,bits_069,384,3643,cpp,"class Solution {
public:
    bool check(vector<int> &nums, vector<vector<int>> &q, int mid){
        int n = nums.size();
        vector<int> val(n+1,0);
        for(int i = 0; i<=mid; i++){
            val[q[i][0]]-=q[i][2];
            val[q[i][1]+1]+=q[i][2];
        }
        for(int i = 1; i<n; i++){
            val[i]+=val[i-1];
        }
        bool f = true;
        for(int i = 0; i<n; i++){
            if(nums[i]+val[i]>0){
                return false;
            }
        }
        return true;
    }
    int minZeroArray(vector<int>& nums, vector<vector<int>>& q) {
        int n = nums.size();
        int m = q.size();
        bool f = true;
        for(int i = 0; i<n; i++){
            if(nums[i]) f = false;
        }
        if(f) return 0;
        int lo = 0, hi = m-1;
        int ans = -2;
        while(lo<=hi){
            int mid = (lo+hi)/2;
            if(check(nums,q,mid)){
                ans = mid;
                hi = mid-1;
            }else{
                lo = mid+1;
            }
        }
        return ans+1;
    }
};",1454828574
Mridul Pandey,mridul_cr7,386,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int n=nums.size();
        vector<int> pf(n+2),sf(n+2);
        for(int i=1;i<n;i++)
        {
            pf[i]+=pf[i-1]+nums[i-1];
        }
        for(int i=n;i>=1;i--)
        {
            sf[i]+=sf[i+1]+nums[i-1];
        }
        int ans=0;
        for(int i=1;i<=n;i++)
        {
            if(nums[i-1]==0)
            {
                if(pf[i-1]==sf[i+1])
                    ans+=2;
                else if(abs(pf[i-1]-sf[i+1])==1)
                    ans++;
            }
        }
        return ans;
    }
};",1454828654
Mridul Pandey,mridul_cr7,386,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& q) {
        int n=nums.size();
        int m=q.size();
        int ans=-1;
       int tell=1;
          
            vector<int> pf(n+2,0);
            for(int i=0;i<m;i++)
            {
                pf[q[i][0]]+=1;
                pf[q[i][1]+1]-=1;
            }
            for(int i=1;i<=n;i++)
            {
                pf[i]+=pf[i-1];
            }
            for(int i=0;i<n;i++)
            {
                if(pf[i]<nums[i])
                    return false;
            }
            
        return true;
    }
};",1454814901
Mridul Pandey,mridul_cr7,386,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& q) {
        int n=nums.size();
        int m=q.size();
        int ans=-1;
        int l=0,h=m;
        while(l<=h)
        {
            int mid=(l+h)/2;
            int tell=1;
          
            vector<int> pf(n+2,0);
            for(int i=0;i<mid;i++)
            {
                pf[q[i][0]]+=q[i][2];
                pf[q[i][1]+1]-=q[i][2];
            }
            for(int i=1;i<=n;i++)
            {
                pf[i]+=pf[i-1];
            }
            for(int i=0;i<n;i++)
            {
                if(pf[i]<nums[i])
                    tell=0;
            }
            if(tell)
            {
                ans=mid;
                h=mid-1;
            }
            else
            {
                l=mid+1;
            }
                
        }
        return ans;
    }
};",1454811981
Chuan-Chih Chou,chuan-chih,387,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        n = len(nums)
        
        def check(i, delta):
            l = list(nums)
            if l[i]:
                return False
            while True:
                i += delta
                if i >= n or i < 0:
                    break
                if l[i]:
                    l[i] -= 1
                    delta *= -1
            return not any(l)
        
        return sum(check(i, 1) + check(i, -1) for i in range(n))
                
            ",1454813059
Chuan-Chih Chou,chuan-chih,387,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        n = len(nums)
        acc = [0] * n
        for l, r in queries:
            acc[l] += 1
            if r + 1 < n:
                acc[r + 1] -= 1
        acc[:] = accumulate(acc)
        return all(x <= y for x, y in zip(nums, acc))",1454819710
Chuan-Chih Chou,chuan-chih,387,3643,python3,"class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        def check(k):
            n = len(nums)
            acc = [0] * n
            for l, r, v in queries[:k]:
                acc[l] += v
                if r + 1 < n:
                    acc[r + 1] -= v
            acc[:] = accumulate(acc)
            return all(x <= y for x, y in zip(nums, acc))
        low = 0
        high = len(queries)
        while low < high:
            mid = (low + high) // 2
            if check(mid):
                high = mid
            else:
                low = mid + 1
        return low if check(low) else -1",1454836168
Sarthak Jha,SarthakkJha,389,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int n = nums.size();
        int count = 0;

        for (int i = 0; i < n; i++) {
            if (nums[i] == 0) {
                vector<int> tempLeft = nums;
                int curr = i;
                int direction = -1;
                while (curr >= 0 && curr < n) {
                    if (tempLeft[curr] == 0) {
                        curr += direction;
                    } else {
                        tempLeft[curr]--;
                        direction = -direction;
                        curr += direction;
                    }
                }
                bool f = true;
                for (int num : tempLeft) {
                    if (num != 0) {
                        f = false;
                        break;
                    }
                }
                if (f) {
                    count++;
                }

                vector<int> tempRight = nums;
                curr = i;
                direction = 1;
                while (curr >= 0 && curr < n) {
                    if (tempRight[curr] == 0) {
                        curr += direction;
                    } else {
                        tempRight[curr]--;
                        direction = -direction;
                        curr += direction;
                    }
                }
                bool ff = true;
                for (int num : tempRight) {
                    if (num != 0) {
                        ff = false;
                        break;
                    }
                }
                if (ff) {
                    count++;
                }
            }
        }

        return count;
    }
};
",1454823955
Sarthak Jha,SarthakkJha,389,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        vector<int> pref(n + 1, 0); 

        for (auto it : queries) {
            int l = it[0], r = it[1];
            pref[l]++;
            if (r + 1 < n) pref[r + 1]--;
        }

        for (int i = 1; i < n; ++i) {
            pref[i] += pref[i - 1];
        }

        for (int i = 0; i < n; ++i) {
            if (nums[i] > pref[i]) return false;
        }

        return true; 
    }
};
",1454823798
Sarthak Jha,SarthakkJha,389,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        int m = queries.size();

        int left = 0, right = m;
        int ans = 1e9;

        while (left <= right) {
            int mid = left + (right - left) / 2;
            if (isPoss(nums, queries, mid)) {
                ans = min(ans, mid);
                right = mid - 1; 
            } else {
                left = mid + 1;
            }
        }

        return ans == 1e9 ? -1 : ans;
    }

    bool isPoss(vector<int> nums, vector<vector<int>>& queries, int k) {
        int n = nums.size();
        vector<int> diff(n + 1, 0);

        for (int i = 0; i < k; i++) {
            int l = queries[i][0];
            int r = queries[i][1];
            int val = queries[i][2];
            diff[l] -= val;
            if (r + 1 < n) diff[r + 1] += val;
        }

        vector<int> pref(n, 0);
        int sum = 0;
        for (int i = 0; i < n; i++) {
            sum += diff[i];
            pref[i] = sum; 
        }

        for (int i = 0; i < n; i++) {
            nums[i] += pref[i];
            if (nums[i] > 0) return false;
        }

        return true;
    }
};
",1454836241
u50UoHd3Oy,u50UoHd3Oy,390,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int sum = 0;
        for (auto x : nums) {
            sum += x;
        }

        int cur_sum = 0;
        int ans = 0;
        for (auto x : nums) {
            if (x == 0) {
                if (cur_sum == sum - cur_sum) {
                    ans += 2;
                } else if (abs(cur_sum - (sum - cur_sum)) == 1) {
                    ans += 1;
                }
            }

            cur_sum += x;
        }

        return ans;
    }
};",1454809937
u50UoHd3Oy,u50UoHd3Oy,390,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        vector<int> cnt(n + 1, 0);

        for (auto x : queries) {
            int l = x[0];
            int r = x[1];
            int v = 1;

            cnt[l] += v;
            cnt[r + 1] -= v;
        }

        for (int i = 1; i < n; i++) {
            cnt[i] += cnt[i - 1];

            if (nums[i] > cnt[i]) {
                return false;
            }
        }

        return nums[0] <= cnt[0];
    }
};",1454821048
u50UoHd3Oy,u50UoHd3Oy,390,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();

        int beg = 0, end = queries.size();
        int ans = -1;
        while (beg <= end) {
            int mid = (beg + end) / 2;
            vector<int> cnt(n + 1, 0);
    
            for (int i = 0; i < mid; i++) {
                auto x = queries[i];
                int l = x[0];
                int r = x[1];
                int v = x[2];
    
                cnt[l] += v;
                cnt[r + 1] -= v;
            }

            bool good = true;
            for (int i = 1; i < n; i++) {
                cnt[i] += cnt[i - 1];
    
                if (nums[i] > cnt[i]) {
                    good =  false;
                }
            }

            good &= (nums[0] <= cnt[0]);

            if (good) {
                ans = mid;
                end = mid - 1;
            } else {
                beg = mid + 1;
            }
        }

        return ans;
    }
};",1454828833
Sydney Burgess,sydneyb,391,3616,java,"class Solution {
    public static void main(String[] args) {
        System.out.println(new Solution().countValidSelections(new int[]{1, 0, 2, 0, 3}));
    }

    public int countValidSelections(int[] nums) {

        int ans = 0;
        int left = 0;
        int right = 0;
        for (int i = 1; i < nums.length; i++) {
            right += nums[i];
        }
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] == 0) {
                if (left == right) ans += 2;
                else if (left == right - 1 || left - 1 == right) ans += 1;
            }

            left += nums[i];
            if (i + 1 < nums.length) {
                right -= nums[i + 1];
            }
        }
        return ans;
    }

}",1454815966
Sydney Burgess,sydneyb,391,3639,java,"class Solution {
    public boolean isZeroArray(int[] nums, int[][] queries) {
        int[] mem = new int[nums.length];
        for (int i = 0; i < queries.length; i++) {
            int l = queries[i][0];
            int r = queries[i][1];
            int val = 1;

            mem[l] += val;
            if (r + 1 < nums.length) {
                mem[r + 1] -= val;
            }
        }

        int acc = 0;
        for (int i = 0; i < nums.length; i++) {
            acc += mem[i];
            if (acc < nums[i]) {
                return false;
            }
        }
        return true;
    }
}",1454829026
Sydney Burgess,sydneyb,391,3643,java,"class Solution {
    public int minZeroArray(int[] nums, int[][] queries) {
        int low = 0;
        int high = queries.length;
        while (low < high) {
            int mid = Math.floorDiv(low + high, 2);
            if (test(nums, queries, mid)) {
                high = mid;
            } else {
                low = mid + 1;
            }
        }

        if (test(nums, queries, low)) {
            return low;
        } else {
            return -1;
        }
    }

    boolean test(int[] nums, int[][] queries, int k) {
        int[] mem = new int[nums.length];
        for (int i = 0; i < k; i++) {
            int l = queries[i][0];
            int r = queries[i][1];
            int val = queries[i][2];

            mem[l] += val;
            if (r + 1 < nums.length) {
                mem[r + 1] -= val;
            }
        }

        int acc = 0;
        for (int i = 0; i < nums.length; i++) {
            acc += mem[i];
            if (acc < nums[i]) {
                return false;
            }
        }
        return true;
    }
}",1454836326
Jose Coves,jcoves,392,3616,cpp,"
#ifdef LOCAL_RUN
#include ""debug_leet.h""
    #else
    #define trace(...) ;
    #define dbg(...) ;
    #define dbgc(...) ;
    #define debug(x) ;
    #define debuga(a, n) ;
    #define debug2(x, y) ;
    #define debug3(x, y, z) ;
    #define debug4(x, y, z, w) ;
    #define debug5(a,b,c,d,e) ;
    #define lassert(x) ;
    #define dassert(x, ...) ;
    int recur_depth = 0; bool rec_indent = true;
    const bool isLocal = false;
    template <typename Arg, typename... Args>
    void display(TreeNode* root) {}
    #endif

    #define pb push_back
    #define eb emplace_back
    #define popb pop_back
    #define all(v) begin(v), end(v)
    #define rall(v) (v).rbegin(),(v).rend()
    #define make_unique(v) (v).erase(unique(all(v)), (v).end())
    #define sz(c) ((int) c.size())
    #define forn(i,n) for(auto i=(n)-(n);i<(n);i++)
    #define fornn(i,s,n) for(auto i=(n)-(n)+(s);i<(n);i++)
    #define forb(i,n) for(auto i=(n)-1;i>=0;i--)
    #define forbn(i,s,n) for(auto i=(n)-1;i>=(s);i--)
    #define forit(it, c) for(auto it = (c).begin(); it != (c).end(); ++it)
    #define mem(a,b) memset(a,b,sizeof(a))
    #define abs(x) (((x) < 0) ? -(x) : (x))
    #define sqr(x) ((x) * (x))
    #define sqrt(x) sqrt(abs(x))
    #define has(c,x) (c.find(x) != c.end())
    #define pw(x) (1LL << (x))
    #define ibit(x,i) (((x) >> (i)) & 1)
    #define data(v) v.data(), sz(v) // vi -> vai
    #define gtime() ((double(clock()) - 0)/CLOCKS_PER_SEC)

    typedef stringstream sstr;
    typedef long long ll;
    typedef long double ld;
    typedef pair<int, int> pii;
    typedef pair<ll,ll> pll;
    typedef pair<ld,ld> pdd;
    typedef vector<int> vi;
    typedef vector<ll> vll;
    typedef vector<pii> vpii;
    typedef vector<vi> vvi;
    typedef vector<vll> vvll;
    typedef valarray<int> vai;
    template <class T>
    using min_pq = priority_queue<T, vector<T>, greater<T>>;
    template <class T>
    using vc = vector<T>;
    template <class T>
    using vvc = vector<vc<T>>;
    template <class T>
    using vvvc = vector<vvc<T>>;
    template <class T>
    using vvvvc = vector<vvvc<T>>;
    template <class T>
    using vvvvvc = vector<vvvvc<T>>;

    template<class F>
    struct y_comb{
        F f;
        template<class T> explicit y_comb(T &&f_in): f(forward<T>(f_in)){ }
        template<class ...Args> decltype(auto) operator()(Args &&...args){ return f(ref(*this), forward<Args>(args)...); }
    };
    template<class F>
    decltype(auto) yf(F &&f){
        return y_comb<decay_t<F>>(forward<F>(f));
    }

    inline int ni(){ int x; cin >> x;   return x; }
    inline ll  nl() { ll  x; cin >> x; return x; }

    template <class T> void mmin(T& a, const T& b) {
        a = (a) < (b) ? (a) : (b);
    }
    template <class T> void mmax(T& a, const T& b) {
        a = (a) > (b) ? (a) : (b);
    }
    template <class T> int LB(vc<T> &a, T x){
        return int(lower_bound(all(a), x) - a.begin());
    }
    template <class T> int UB(vc<T> &a, T x){
        return int(upper_bound(all(a), x) - a.begin());
    }
    template <class T> T MAX(vc<T> &a, int l=0, int r=-1){
        if(r < 0) r = sz(a);
        return *max_element(a.begin()+l, a.begin()+r);
    }
    template <class T> T MIN(vc<T> &a, int l=0, int r=-1){
        if(r < 0) r = sz(a);
        return *min_element(a.begin()+l, a.begin()+r);
    }
    template <class T> auto vv(int d1, T x){
        return vc<T>(d1, x);
    }
    template <class T> auto vv(int d1, int d2, T x){
        return vc<vc<T>>(d1, vc<T>(d2, x));
    }
    template <class T> auto vv(int d1, int d2, int d3, T x){
        return vc<vc<vc<T>>>(d1, vv(d2, d3, x));
    }
    template <class T> auto vv(int d1, int d2, int d3, int d4, T x){
        return vc<vc<vc<vc<T>>>>(d1, vv(d2, d3, d4, x));
    }
    void outv(auto &v){
        for(auto &x: v) {cout<< x <<"" "";} cout<<endl;
    }
    void rvec(int &n, auto &v){
        cin >> n; v.resize(n); for(auto &x: v) cin >> (x);
    }
    template <typename Arg, typename... Args>
    void read(Arg&& arg, Args&&... args){
        cin >> std::forward<Arg>(arg); using expander = int[];
        (void)expander{0, (void(cin >> std::forward<Args>(args)),0)...};
    }
    template <typename Arg, typename... Args>
    void out(Arg&& arg, Args&&... args){
        cout << std::forward<Arg>(arg); using expander = int[];
        (void)expander{0, (void(cout << "" "" << std::forward<Args>(args)),0)...};
        cout << endl;
    }
    template <class Integer, class F>
    Integer find_first_false(Integer l, Integer r, F&& f) {
        --l; // ++r;
        while (r - l > 1) {
            Integer m = midpoint(l, r);
            if (f(m)) l = m;
            else r = m;
        }
        return r;
    }
    template <class Integer, class F>
    Integer find_last_true(Integer l, Integer r, F &&f) {
        return find_first_false(l, r, [&f](Integer i) { return f(i); }) - 1;
    }
    template <class Integer, class F>
    Integer find_first_true(Integer l, Integer r, F &&f) {
        return find_first_false(l, r, [&f](Integer i) { return !f(i); });
    }
    template <class T, class F>
    T last_true(T lo, T hi, F&& f) { 
        lo--; // if all are false, return lo-1
        while(lo < hi){
            T mid = lo + (hi - lo + 1) / 2;
            if(f(mid)) lo = mid; 
            else hi = mid - 1;
        }
        return lo;
    }
    template <class T, class F>
    T first_true(T lo, T hi, F&& f) { 
        // return last_true(lo, hi, [&](T x){ return !f(x); }) + 1;
        hi++; // if all are false, return hi+1
        while(lo < hi){
            T mid = lo + (hi - lo) / 2;
            if(f(mid)) hi = mid; 
            else lo = mid + 1;
        }
        return lo;
    }
    auto init = []() {
        ios::sync_with_stdio(0); cin.tie(NULL); cout.tie(NULL); return 'c';
    }();

    ll pwr(ll base, ll p, ll mod){
        ll ans=1; while(p) {if(p&1) ans=(ans*base)%mod;
            base=(base*base)%mod; p/=2;}
        return ans;
    }
    ll gcd(ll a, ll b) {  return b == 0 ? a : gcd(b,a%b); }
    ll lcm(ll a, ll b) {  return a*(b/gcd(a,b)); }

    const long double PI = (long double)(3.1415926535897932384626433832795);
    const ll  mx_ll   = numeric_limits<ll> :: max();
    const int mx_int  = numeric_limits<int> :: max();

    const int oo = 0x3f3f3f3f;
    const ll  OO = 0x3f3f3f3f3f3f3f3fll;
    const double eps = 1e-9;
    const int DX[8]={0,1, 0,-1,-1,1,-1, 1};
    const int DY[8]={1,0,-1, 0,-1,1, 1,-1};

const int maxn = 1e5 + 3;
const int mod = 1e9+7;
class Solution {
public:
    int countValidSelections(vector<int>& a) {
        int n = sz(a);
        int r = 0; for(int x: a) r += x;
        int l = 0, ans = 0;
        forn(i, n) {
            l += a[i];
            r -= a[i];
            if(a[i] == 0) {
                if(l == r) ans += 2;
                if(l-r == 1) ans++;
                if(r-l == 1) ans++;
            }
        }
        return ans;
    }
};

#ifdef LOCAL_RUN
void _solve(){
    Solution sol;

}


/*************************************************************************/
int main(){
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    //cout.precision(15);
    // return 0;
    while(cin.peek() == 32 or cin.peek() == 10) cin.get();
    while(cin.peek() != EOF){
        _solve();
        while(cin.peek() == 32 or cin.peek() == 10) cin.get();
    }
}
#endif
",1454807458
Jose Coves,jcoves,392,3639,cpp,"
#ifdef LOCAL_RUN
#include ""debug_leet.h""
    #else
    #define trace(...) ;
    #define dbg(...) ;
    #define dbgc(...) ;
    #define debug(x) ;
    #define debuga(a, n) ;
    #define debug2(x, y) ;
    #define debug3(x, y, z) ;
    #define debug4(x, y, z, w) ;
    #define debug5(a,b,c,d,e) ;
    #define lassert(x) ;
    #define dassert(x, ...) ;
    int recur_depth = 0; bool rec_indent = true;
    const bool isLocal = false;
    template <typename Arg, typename... Args>
    void display(TreeNode* root) {}
    #endif

    #define pb push_back
    #define eb emplace_back
    #define popb pop_back
    #define all(v) begin(v), end(v)
    #define rall(v) (v).rbegin(),(v).rend()
    #define make_unique(v) (v).erase(unique(all(v)), (v).end())
    #define sz(c) ((int) c.size())
    #define forn(i,n) for(auto i=(n)-(n);i<(n);i++)
    #define fornn(i,s,n) for(auto i=(n)-(n)+(s);i<(n);i++)
    #define forb(i,n) for(auto i=(n)-1;i>=0;i--)
    #define forbn(i,s,n) for(auto i=(n)-1;i>=(s);i--)
    #define forit(it, c) for(auto it = (c).begin(); it != (c).end(); ++it)
    #define mem(a,b) memset(a,b,sizeof(a))
    #define abs(x) (((x) < 0) ? -(x) : (x))
    #define sqr(x) ((x) * (x))
    #define sqrt(x) sqrt(abs(x))
    #define has(c,x) (c.find(x) != c.end())
    #define pw(x) (1LL << (x))
    #define ibit(x,i) (((x) >> (i)) & 1)
    #define data(v) v.data(), sz(v) // vi -> vai
    #define gtime() ((double(clock()) - 0)/CLOCKS_PER_SEC)

    typedef stringstream sstr;
    typedef long long ll;
    typedef long double ld;
    typedef pair<int, int> pii;
    typedef pair<ll,ll> pll;
    typedef pair<ld,ld> pdd;
    typedef vector<int> vi;
    typedef vector<ll> vll;
    typedef vector<pii> vpii;
    typedef vector<vi> vvi;
    typedef vector<vll> vvll;
    typedef valarray<int> vai;
    template <class T>
    using min_pq = priority_queue<T, vector<T>, greater<T>>;
    template <class T>
    using vc = vector<T>;
    template <class T>
    using vvc = vector<vc<T>>;
    template <class T>
    using vvvc = vector<vvc<T>>;
    template <class T>
    using vvvvc = vector<vvvc<T>>;
    template <class T>
    using vvvvvc = vector<vvvvc<T>>;

    template<class F>
    struct y_comb{
        F f;
        template<class T> explicit y_comb(T &&f_in): f(forward<T>(f_in)){ }
        template<class ...Args> decltype(auto) operator()(Args &&...args){ return f(ref(*this), forward<Args>(args)...); }
    };
    template<class F>
    decltype(auto) yf(F &&f){
        return y_comb<decay_t<F>>(forward<F>(f));
    }

    inline int ni(){ int x; cin >> x;   return x; }
    inline ll  nl() { ll  x; cin >> x; return x; }

    template <class T> void mmin(T& a, const T& b) {
        a = (a) < (b) ? (a) : (b);
    }
    template <class T> void mmax(T& a, const T& b) {
        a = (a) > (b) ? (a) : (b);
    }
    template <class T> int LB(vc<T> &a, T x){
        return int(lower_bound(all(a), x) - a.begin());
    }
    template <class T> int UB(vc<T> &a, T x){
        return int(upper_bound(all(a), x) - a.begin());
    }
    template <class T> T MAX(vc<T> &a, int l=0, int r=-1){
        if(r < 0) r = sz(a);
        return *max_element(a.begin()+l, a.begin()+r);
    }
    template <class T> T MIN(vc<T> &a, int l=0, int r=-1){
        if(r < 0) r = sz(a);
        return *min_element(a.begin()+l, a.begin()+r);
    }
    template <class T> auto vv(int d1, T x){
        return vc<T>(d1, x);
    }
    template <class T> auto vv(int d1, int d2, T x){
        return vc<vc<T>>(d1, vc<T>(d2, x));
    }
    template <class T> auto vv(int d1, int d2, int d3, T x){
        return vc<vc<vc<T>>>(d1, vv(d2, d3, x));
    }
    template <class T> auto vv(int d1, int d2, int d3, int d4, T x){
        return vc<vc<vc<vc<T>>>>(d1, vv(d2, d3, d4, x));
    }
    void outv(auto &v){
        for(auto &x: v) {cout<< x <<"" "";} cout<<endl;
    }
    void rvec(int &n, auto &v){
        cin >> n; v.resize(n); for(auto &x: v) cin >> (x);
    }
    template <typename Arg, typename... Args>
    void read(Arg&& arg, Args&&... args){
        cin >> std::forward<Arg>(arg); using expander = int[];
        (void)expander{0, (void(cin >> std::forward<Args>(args)),0)...};
    }
    template <typename Arg, typename... Args>
    void out(Arg&& arg, Args&&... args){
        cout << std::forward<Arg>(arg); using expander = int[];
        (void)expander{0, (void(cout << "" "" << std::forward<Args>(args)),0)...};
        cout << endl;
    }
    template <class Integer, class F>
    Integer find_first_false(Integer l, Integer r, F&& f) {
        --l; // ++r;
        while (r - l > 1) {
            Integer m = midpoint(l, r);
            if (f(m)) l = m;
            else r = m;
        }
        return r;
    }
    template <class Integer, class F>
    Integer find_last_true(Integer l, Integer r, F &&f) {
        return find_first_false(l, r, [&f](Integer i) { return f(i); }) - 1;
    }
    template <class Integer, class F>
    Integer find_first_true(Integer l, Integer r, F &&f) {
        return find_first_false(l, r, [&f](Integer i) { return !f(i); });
    }
    template <class T, class F>
    T last_true(T lo, T hi, F&& f) { 
        lo--; // if all are false, return lo-1
        while(lo < hi){
            T mid = lo + (hi - lo + 1) / 2;
            if(f(mid)) lo = mid; 
            else hi = mid - 1;
        }
        return lo;
    }
    template <class T, class F>
    T first_true(T lo, T hi, F&& f) { 
        // return last_true(lo, hi, [&](T x){ return !f(x); }) + 1;
        hi++; // if all are false, return hi+1
        while(lo < hi){
            T mid = lo + (hi - lo) / 2;
            if(f(mid)) hi = mid; 
            else lo = mid + 1;
        }
        return lo;
    }
    auto init = []() {
        ios::sync_with_stdio(0); cin.tie(NULL); cout.tie(NULL); return 'c';
    }();

    ll pwr(ll base, ll p, ll mod){
        ll ans=1; while(p) {if(p&1) ans=(ans*base)%mod;
            base=(base*base)%mod; p/=2;}
        return ans;
    }
    ll gcd(ll a, ll b) {  return b == 0 ? a : gcd(b,a%b); }
    ll lcm(ll a, ll b) {  return a*(b/gcd(a,b)); }

    const long double PI = (long double)(3.1415926535897932384626433832795);
    const ll  mx_ll   = numeric_limits<ll> :: max();
    const int mx_int  = numeric_limits<int> :: max();

    const int oo = 0x3f3f3f3f;
    const ll  OO = 0x3f3f3f3f3f3f3f3fll;
    const double eps = 1e-9;
    const int DX[8]={0,1, 0,-1,-1,1,-1, 1};
    const int DY[8]={1,0,-1, 0,-1,1, 1,-1};

const int maxn = 1e5 + 3;
const int mod = 1e9+7;
class Solution {
public:
    bool isZeroArray(vector<int>& a, vector<vector<int>>& queries) {
        int n = sz(a);
        vi f(n+2);
        for(auto &v: queries){
            int l = v[0], r = v[1];
            f[l]++; f[r+1]--;
        }
        int now = 0;
        forn(i, n){
            now += f[i];
            if(a[i] > now) return false;
        }
        return true;
    }
};

#ifdef LOCAL_RUN
void _solve(){
    Solution sol;

}


/*************************************************************************/
int main(){
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    //cout.precision(15);
    // return 0;
    while(cin.peek() == 32 or cin.peek() == 10) cin.get();
    while(cin.peek() != EOF){
        _solve();
        while(cin.peek() == 32 or cin.peek() == 10) cin.get();
    }
}
#endif
",1454809657
Jose Coves,jcoves,392,3643,cpp,"
#ifdef LOCAL_RUN
#include ""debug_leet.h""
    #else
    #define trace(...) ;
    #define dbg(...) ;
    #define dbgc(...) ;
    #define debug(x) ;
    #define debuga(a, n) ;
    #define debug2(x, y) ;
    #define debug3(x, y, z) ;
    #define debug4(x, y, z, w) ;
    #define debug5(a,b,c,d,e) ;
    #define lassert(x) ;
    #define dassert(x, ...) ;
    int recur_depth = 0; bool rec_indent = true;
    const bool isLocal = false;
    template <typename Arg, typename... Args>
    void display(TreeNode* root) {}
    #endif

    #define pb push_back
    #define eb emplace_back
    #define popb pop_back
    #define all(v) begin(v), end(v)
    #define rall(v) (v).rbegin(),(v).rend()
    #define make_unique(v) (v).erase(unique(all(v)), (v).end())
    #define sz(c) ((int) c.size())
    #define forn(i,n) for(auto i=(n)-(n);i<(n);i++)
    #define fornn(i,s,n) for(auto i=(n)-(n)+(s);i<(n);i++)
    #define forb(i,n) for(auto i=(n)-1;i>=0;i--)
    #define forbn(i,s,n) for(auto i=(n)-1;i>=(s);i--)
    #define forit(it, c) for(auto it = (c).begin(); it != (c).end(); ++it)
    #define mem(a,b) memset(a,b,sizeof(a))
    #define abs(x) (((x) < 0) ? -(x) : (x))
    #define sqr(x) ((x) * (x))
    #define sqrt(x) sqrt(abs(x))
    #define has(c,x) (c.find(x) != c.end())
    #define pw(x) (1LL << (x))
    #define ibit(x,i) (((x) >> (i)) & 1)
    #define data(v) v.data(), sz(v) // vi -> vai
    #define gtime() ((double(clock()) - 0)/CLOCKS_PER_SEC)

    typedef stringstream sstr;
    typedef long long ll;
    typedef long double ld;
    typedef pair<int, int> pii;
    typedef pair<ll,ll> pll;
    typedef pair<ld,ld> pdd;
    typedef vector<int> vi;
    typedef vector<ll> vll;
    typedef vector<pii> vpii;
    typedef vector<vi> vvi;
    typedef vector<vll> vvll;
    typedef valarray<int> vai;
    template <class T>
    using min_pq = priority_queue<T, vector<T>, greater<T>>;
    template <class T>
    using vc = vector<T>;
    template <class T>
    using vvc = vector<vc<T>>;
    template <class T>
    using vvvc = vector<vvc<T>>;
    template <class T>
    using vvvvc = vector<vvvc<T>>;
    template <class T>
    using vvvvvc = vector<vvvvc<T>>;

    template<class F>
    struct y_comb{
        F f;
        template<class T> explicit y_comb(T &&f_in): f(forward<T>(f_in)){ }
        template<class ...Args> decltype(auto) operator()(Args &&...args){ return f(ref(*this), forward<Args>(args)...); }
    };
    template<class F>
    decltype(auto) yf(F &&f){
        return y_comb<decay_t<F>>(forward<F>(f));
    }

    inline int ni(){ int x; cin >> x;   return x; }
    inline ll  nl() { ll  x; cin >> x; return x; }

    template <class T> void mmin(T& a, const T& b) {
        a = (a) < (b) ? (a) : (b);
    }
    template <class T> void mmax(T& a, const T& b) {
        a = (a) > (b) ? (a) : (b);
    }
    template <class T> int LB(vc<T> &a, T x){
        return int(lower_bound(all(a), x) - a.begin());
    }
    template <class T> int UB(vc<T> &a, T x){
        return int(upper_bound(all(a), x) - a.begin());
    }
    template <class T> T MAX(vc<T> &a, int l=0, int r=-1){
        if(r < 0) r = sz(a);
        return *max_element(a.begin()+l, a.begin()+r);
    }
    template <class T> T MIN(vc<T> &a, int l=0, int r=-1){
        if(r < 0) r = sz(a);
        return *min_element(a.begin()+l, a.begin()+r);
    }
    template <class T> auto vv(int d1, T x){
        return vc<T>(d1, x);
    }
    template <class T> auto vv(int d1, int d2, T x){
        return vc<vc<T>>(d1, vc<T>(d2, x));
    }
    template <class T> auto vv(int d1, int d2, int d3, T x){
        return vc<vc<vc<T>>>(d1, vv(d2, d3, x));
    }
    template <class T> auto vv(int d1, int d2, int d3, int d4, T x){
        return vc<vc<vc<vc<T>>>>(d1, vv(d2, d3, d4, x));
    }
    void outv(auto &v){
        for(auto &x: v) {cout<< x <<"" "";} cout<<endl;
    }
    void rvec(int &n, auto &v){
        cin >> n; v.resize(n); for(auto &x: v) cin >> (x);
    }
    template <typename Arg, typename... Args>
    void read(Arg&& arg, Args&&... args){
        cin >> std::forward<Arg>(arg); using expander = int[];
        (void)expander{0, (void(cin >> std::forward<Args>(args)),0)...};
    }
    template <typename Arg, typename... Args>
    void out(Arg&& arg, Args&&... args){
        cout << std::forward<Arg>(arg); using expander = int[];
        (void)expander{0, (void(cout << "" "" << std::forward<Args>(args)),0)...};
        cout << endl;
    }
    template <class Integer, class F>
    Integer find_first_false(Integer l, Integer r, F&& f) {
        --l; // ++r;
        while (r - l > 1) {
            Integer m = midpoint(l, r);
            if (f(m)) l = m;
            else r = m;
        }
        return r;
    }
    template <class Integer, class F>
    Integer find_last_true(Integer l, Integer r, F &&f) {
        return find_first_false(l, r, [&f](Integer i) { return f(i); }) - 1;
    }
    template <class Integer, class F>
    Integer find_first_true(Integer l, Integer r, F &&f) {
        return find_first_false(l, r, [&f](Integer i) { return !f(i); });
    }
    template <class T, class F>
    T last_true(T lo, T hi, F&& f) { 
        lo--; // if all are false, return lo-1
        while(lo < hi){
            T mid = lo + (hi - lo + 1) / 2;
            if(f(mid)) lo = mid; 
            else hi = mid - 1;
        }
        return lo;
    }
    template <class T, class F>
    T first_true(T lo, T hi, F&& f) { 
        // return last_true(lo, hi, [&](T x){ return !f(x); }) + 1;
        hi++; // if all are false, return hi+1
        while(lo < hi){
            T mid = lo + (hi - lo) / 2;
            if(f(mid)) hi = mid; 
            else lo = mid + 1;
        }
        return lo;
    }
    auto init = []() {
        ios::sync_with_stdio(0); cin.tie(NULL); cout.tie(NULL); return 'c';
    }();

    ll pwr(ll base, ll p, ll mod){
        ll ans=1; while(p) {if(p&1) ans=(ans*base)%mod;
            base=(base*base)%mod; p/=2;}
        return ans;
    }
    ll gcd(ll a, ll b) {  return b == 0 ? a : gcd(b,a%b); }
    ll lcm(ll a, ll b) {  return a*(b/gcd(a,b)); }

    const long double PI = (long double)(3.1415926535897932384626433832795);
    const ll  mx_ll   = numeric_limits<ll> :: max();
    const int mx_int  = numeric_limits<int> :: max();

    const int oo = 0x3f3f3f3f;
    const ll  OO = 0x3f3f3f3f3f3f3f3fll;
    const double eps = 1e-9;
    const int DX[8]={0,1, 0,-1,-1,1,-1, 1};
    const int DY[8]={1,0,-1, 0,-1,1, 1,-1};

const int maxn = 1e5 + 3;
const int mod = 1e9+7;
class Solution {
public:
    int minZeroArray(vector<int>& a, vector<vector<int>>& queries) {
        int n = sz(a), Q = sz(queries);
        debug(a);
        vc<array<int, 3>> qs(Q);
        forn(i, Q)  qs[i] = {queries[i][0], queries[i][1], queries[i][2]};
        debug(qs);
        int ans = first_true(0, Q, [&](int q){
            // auto qs = fullqs; qs.resize(q);
            vi f(n+2);
            forn(i, q) {
                auto [l, r, val] = qs[i];
                f[l] += val; f[r+1] -= val;
            }
            debug2(q, f);
            int now = 0;
            forn(i, n){
                now += f[i];
                if(a[i] > now) return false;
            }
            return true;
        });
        return ans <= Q ? ans : -1;
        
        // sort(rall(qs));
        // vi f(n+2);
        // int now = 0;
        // forn(i, n){
        //     // int x = a[i] + now;
        //     if(a[i] + now < 0) return false;
        //     if(a[i] + now == 0) continue;
        //     while(a[i] + now > 0) {
        //         auto [l, r, val] = qs.back(); qs.pop_back();
        //         if(l < i) continue;
        //         if(l > i) return false;
        //         int d = min(val, a[i] + now);
        //         now -= d;
        //         f[r+1] += d;
        //     }
        //     if(a[i] + now != 0) return false;
        // }
        // return true;
    }
};

#ifdef LOCAL_RUN
void _solve(){
    Solution sol;
    vi a; vvi q; read(a, q);
    out(sol.minZeroArray(a, q));
}


/*************************************************************************/
int main(){
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    //cout.precision(15);
    // return 0;
    while(cin.peek() == 32 or cin.peek() == 10) cin.get();
    while(cin.peek() != EOF){
        _solve();
        while(cin.peek() == 32 or cin.peek() == 10) cin.get();
    }
}
#endif
",1454836381
rajanand18,rajanand18,393,3616,cpp,"class Solution {
public:
    
    bool fun(vector<int> nums, int curr, int direction) {
        int n = nums.size();

        while (true) {
            if (curr < 0 || curr >= n) {
                break;
            }
            if (nums[curr] == 0) {
                curr += direction;
            } else { 
                nums[curr]--; 
                direction = -direction; 
                curr += direction;
            }
        }
        for (int num : nums) {
            if (num != 0) {
                return false;
            }
        }
        return true;
    }
    
    int countValidSelections(vector<int>& nums) {
        int n = nums.size();
        int ans = 0;

        for (int start = 0; start < n; ++start) {
            if (nums[start] == 0) {
                if (fun(nums, start, -1)) {
                    ans++;
                }
                if (fun(nums, start, 1)) {
                    ans++;
                }
            }
        }

        return ans;
    }
};",1454806777
rajanand18,rajanand18,393,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        vector<int> dc(n + 1, 0);

        for (const auto& query : queries) {
            int l = query[0];
            int r = query[1];
            dc[l]++;         
            if (r + 1 < n) {
                dc[r + 1]--; 
            }
        }

        for (int i = 1; i < n; ++i) {
            dc[i] += dc[i - 1];
        }
        for (int i = 0; i < n; ++i) {
            if (dc[i] < nums[i]) {
                return false;
            }
        }

        return true;
    }
};",1454811609
rajanand18,rajanand18,393,3643,cpp,"
class SegmentTree {
private:
    vector<int> tree;
    vector<int> lazy;
    int size;

    void build(const std::vector<int>& arr, int node, int start, int end) {
        if (start == end) {
            tree[node] = arr[start];
        } else {
            int mid = (start + end) / 2;
            build(arr, 2 * node + 1, start, mid);
            build(arr, 2 * node + 2, mid + 1, end);
            tree[node] = max(tree[2 * node + 1], tree[2 * node + 2]);
        }
    }

    void updateRangeUtil(int node, int start, int end, int l, int r, int val) {
        if (lazy[node] != 0) {
            tree[node] += lazy[node];
            if (start != end) {
                lazy[2 * node + 1] += lazy[node];
                lazy[2 * node + 2] += lazy[node];
            }
            lazy[node] = 0;
        }

        if (start > end || start > r || end < l) return;

        if (start >= l && end <= r) {
            tree[node] += val; 
            if (start != end) { 
                lazy[2 * node + 1] += val; 
                lazy[2 * node + 2] += val;
            }
            return;
        }

        int mid = (start + end) / 2;
        updateRangeUtil(2 * node + 1, start, mid, l, r, val);
        updateRangeUtil(2 * node + 2, mid + 1, end, l, r, val);

        tree[node] = max(tree[2 * node + 1], tree[2 * node + 2]);
    }

    int queryMaxUtil(int node, int start, int end, int l, int r) {
        if (lazy[node] != 0) {
            tree[node] += lazy[node]; 
            if (start != end) {
                lazy[2 * node + 1] += lazy[node];
                lazy[2 * node + 2] += lazy[node];
            }
            lazy[node] = 0; 
        }

        if (start > end || start > r || end < l) return INT_MIN;
        if (start >= l && end <= r) {
            return tree[node];
        }
        int mid = (start + end) / 2;
        int leftMax = queryMaxUtil(2 * node + 1, start, mid, l, r);
        int rightMax = queryMaxUtil(2 * node + 2, mid + 1, end, l, r);
        
        return max(leftMax, rightMax);
    }

public:
    SegmentTree(const vector<int>& arr) {
        size = arr.size();
        tree.resize(4 * size);
        lazy.resize(4 * size);
        build(arr, 0, 0, size - 1);
    }

    void updateRange(int l, int r, int val) {
        updateRangeUtil(0, 0, size - 1, l, r, val);
    }

    int queryMax(int l, int r) {
        return queryMaxUtil(0, 0, size - 1, l, r);
    }
};



class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        bool allZero=true;
        for (int i = 0; i < nums.size(); ++i) {
            if (nums[i]>0) {
                allZero = false;
                break;
            }
        }
        if(allZero){
            return 0;
        }
        SegmentTree segTree(nums);
    
        for (int k = 0; k < queries.size(); ++k) {
            int li = queries[k][0];
            int ri = queries[k][1];
            int vali = queries[k][2];

            segTree.updateRange(li, ri, -vali); 

            if (segTree.queryMax(0, nums.size() - 1) <= 0) {
                return k + 1;
            }
        }

        return -1;
    }
};",1454828958
orz,itzmytym,394,3616,python3,"class Solution:
  def countValidSelections(self, nums: List[int]) -> int:
    n = len(nums)
    dirs = [-1, 1]
    def travel(i, d, arr):
      while 0 <= i < n:
        # print(arr)
        if arr[i] == 0:
          i += dirs[d]
        elif arr[i] > 0:
          arr[i] -= 1
          d = 1-d
          i += dirs[d]
      return all(x == 0 for x in arr)
    return sum(travel(i, 0, list(nums)) + travel(i, 1, list(nums)) for i in range(n) if nums[i] == 0)
      
        ",1454813813
orz,itzmytym,394,3639,python3,"class Solution:
  def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
    deltas = defaultdict(int)
    for l, r in queries:
      deltas[l] -= 1
      deltas[r+1] += 1
    c = 0
    n = len(nums)
    for i in range(n):
      c += deltas[i]
      nums[i] = max(0, nums[i] + c)
      if nums[i] != 0:
        return False
    return True
        ",1454821631
orz,itzmytym,394,3643,python3,"class Solution:
  def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
    n = len(nums)
    def check(k):
      deltas = defaultdict(int)
      for i in range(k):
        l, r, val = queries[i]
        deltas[l] -= val
        deltas[r+1] += val
      c = 0
      arr = list(nums)
      for i in range(n):
        c += deltas[i]
        arr[i] = max(0, arr[i] + c)
        if arr[i] != 0:
          return False
      return True
    lo, hi = 0, len(queries)
    ans = inf
    while lo <= hi:
      k = lo + (hi-lo)//2
      res = check(k)
      # print(k, res)
      if res:
        ans = min(ans, k)
        hi = k-1
      else:
        lo = k+1
    return -1 if ans == inf else ans",1454836452
DARSHAN,codeWithDarshan123,396,3616,java,"class Solution {
    
    public int helper(int arr[] , int nums[] , int valid , int in){
        
     
            
            int j = in;
            
            while(j>=0 && j < nums.length){
                
                if(nums[j] == 0){
                    
                    if(valid ==1)j--;
                    else j++;
                    
                }else{
                    
                    nums[j] = nums[j]-1;
                    
                    valid = 1 - valid;
                    
                    if(valid ==1)j--;
                    else j++;
                    
                }
                
                
            }
            
            
            
            int count = 0;
            for(int i = 0 ; i < nums.length; i++){
                if(nums[i] != 0)count++;
            }
        
        
        return count;
        
    }
    
    public int countValidSelections(int[] nums) {
        
        int ans = 0;
        int arr[] = Arrays.copyOf(nums , nums.length);
        
        for(int i = 0 ; i  < nums.length; i++){
            
              nums = Arrays.copyOf(arr , arr.length);
            
            if(nums[i] != 0)continue;
            
            int count = helper(arr , nums , 1 , i);
           
            
            if(count == 0){
                ans++;
            }
            
            
              nums = Arrays.copyOf(arr ,  arr.length);
             count = helper(arr , nums , 0 , i);
            
            
            if(count == 0)ans++;
            
            
            
            
            
        }
        
        
        return ans;
    }
}",1454814123
DARSHAN,codeWithDarshan123,396,3639,java,"class Solution {
    public boolean isZeroArray(int[] nums, int[][] queries) {
        
        int n = nums.length;
        int prefix[] = new int[n];
        
        for(int temp[] : queries){
            
            int l = temp[0];
            int r = temp[1];
            
            prefix[l]++;
            
            if(r+1 < n)prefix[r+1]--;
            
        }
        
        int ans = 0;
        
        for(int i = 1;i<n; i++){
            prefix[i]+=prefix[i-1];
        }
        
        for(int i = 0 ; i < n; i++){
            
            
            if(prefix[i] < nums[i])return false;
            
        }
        return true;
        
    }
}",1454822976
DARSHAN,codeWithDarshan123,396,3643,java,"class Solution {
    
  class LazySegmentTree {
        long[] tree, lazy;
        int n;
        long[] arr;

        public LazySegmentTree(long[] arr) {
            this.n = arr.length;
            this.arr = arr;
            tree = new long[4 * n];
            lazy = new long[4 * n];
            build(0, 0, n - 1);
        }

        private void build(int node, int start, int end) {
            if (start == end) {
                tree[node] = arr[start];
            } else {
                int mid = (start + end) / 2;
                build(2 * node + 1, start, mid);
                build(2 * node + 2, mid + 1, end);
                tree[node] = Math.max(tree[2 * node + 1], tree[2 * node + 2]);
            }
        }

        private void propagate(int node, int start, int end) {
            if (lazy[node] != 0) {
                tree[node] += lazy[node];
                if (start != end) {
                    lazy[2 * node + 1] += lazy[node];
                    lazy[2 * node + 2] += lazy[node];
                }
                lazy[node] = 0;
            }
        }

        public void updateRange(int l ,int r ,  long  val){

            updateRange(0, 0, arr.length - 1, l, r, val);
        }
       private  void updateRange(int node, int start, int end, int l, int r, long val) {
            propagate(node, start, end);
            if (start > end || l > end || r < start)
                return;

            if (l <= start && end <= r) {
                tree[node] += val;
                if (start != end) {
                    lazy[2 * node + 1] += val;
                    lazy[2 * node + 2] += val;
                }
                return;
            }

            int mid = (start + end) / 2;
            updateRange(2 * node + 1, start, mid, l, r, val);
            updateRange(2 * node + 2, mid + 1, end, l, r, val);
            tree[node] = Math.max(tree[2 * node + 1], tree[2 * node + 2]);
        }

        public long queryRange(int l , int r){
            return queryRange(0, 0, arr.length - 1,  l ,r);
        }


        private  long queryRange(int node, int start, int end, int l, int r) {
            propagate(node, start, end);
            if (start > end || l > end || r < start)
                return -(long)(1e13);

            if (l <= start && end <= r)
                return tree[node];

            int mid = (start + end) / 2;
           long  p1 = queryRange(2 * node + 1, start, mid, l, r);
            long  p2 = queryRange(2 * node + 2, mid + 1, end, l, r);
            return Math.max(p1, p2);
        }

//        public static void main(String[] args) {
//            int[] arr = {1, 3, 5, 7, 9};
//            LazySegmentTree st = new LazySegmentTree(arr);
//
//            // Example usage:
//            st.updateRange(0, 0, arr.length - 1, 0, 1, 2); // Add 2 to elements in range [1, 3]
//            System.out.println(st.queryRange(0, 0, arr.length - 1, 0, 1)); // Query for max value at index 2
//        }
    }
    
    
    public int minZeroArray(int[] nums, int[][] queries) {
        
        int n = nums.length;
        
        long arr[] = new long[n];
        for(int i = 0 ; i < n; i++)arr[i] = nums[i];
        
        
        LazySegmentTree  seg = new LazySegmentTree(arr);
        
        
        long a = seg.queryRange(0 , n-1);
        
        if(a<=0)return 0;
        
        int i = -1;
        
        for(int temp[] : queries){
            
            i++;
            int l = temp[0];
            int r = temp[1];
            long val = temp[2];
            
            seg.updateRange( l , r ,    -val);
            
            if(seg.queryRange(0 , n-1) <=0)return i+1;
            
            
        }
        
        
        
        return -1;
        
        
    }
}",1454836514
ptato_god,ptato_god,397,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        x = sum(nums)
        pref = 0
        out = 0
        for n in nums:
            if n == 0:
                if x == pref:
                    out += 2
                elif -1 <= pref - x <= 1:
                    out += 1
            pref += n
            x -= n
        return out",1454807279
ptato_god,ptato_god,397,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        queries.sort()
        active = []
        ind = 0
        for i, x in enumerate(nums):
            while active and i > active[0]:
                heappop(active)
            while ind < len(queries) and i == queries[ind][0]:
                heappush(active, queries[ind][1])
                ind += 1
            if x > len(active):
                return False
        return True",1454813802
ptato_god,ptato_god,397,3643,python3,"class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        n = len(queries)
        
        lo = 0
        hi = n + 1
        while lo < hi:
            change = [0] * (len(nums) + 1)
            mid = (lo + hi) // 2
            for a, b, c in queries[:mid]:
                change[a] += c
                change[b + 1] -= c
            tally = 0
            good = True
            for i, x in enumerate(nums):
                tally += change[i]
                if x > tally:
                    good = False
            if good:
                hi = mid
            else:
                lo = mid + 1
        
        return lo if lo <= n else -1",1454829054
Citypop,Citypop,398,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int n = nums.size();
        int ans = 0;
        
        for(int i = 0; i < n; i++) {
            if(nums[i] == 0) {
                for(int d = -1; d <= 1; d += 2) {
                    std::vector<int> a(nums);
                    int p = i;
                    int k = d;
                    while(p >= 0 && p < n) {
                        if(a[p] == 0) {
                            p += k;
                        } else {
                            a[p] -= 1;
                            k *= -1;
                            p += k;
                        }
                    }
                    bool good = true;
                    for(int j = 0; j < n; j++) {
                        if(a[j] != 0) {
                            good = false;
                        }
                    }
                    if(good) {
                        ans += 1;
                    }
                }
            }
        }
        
        return ans;
    }
};",1454810134
Citypop,Citypop,398,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        int m = queries.size();
        std::vector<int> diff(n + 1, 0);
        
        for(int i = 0; i < m; i++) {
            int l = queries[i][0];
            int r = queries[i][1];
            diff[l] += 1;
            diff[r + 1] -= 1;
        }
        
        int64_t sum = 0;
        for(int i = 0; i < n; i++) {
            sum += diff[i];
            if(sum < nums[i]) {
                return false;
            }
        }
        
        return true;
    }
};",1454815376
Citypop,Citypop,398,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int ans = -1;
        int n = nums.size();
        int m = queries.size();
        
        int lo = 0;
        int hi = m;
        while(lo <= hi) {
            int mid = (lo + hi) >> 1;
            
            std::vector<int64_t> diff(n + 1, 0);
            for(int i = 0; i < mid; i++) {
                diff[queries[i][0]] += queries[i][2];
                diff[queries[i][1] + 1] -= queries[i][2];
            }
            
            int64_t sum = 0;
            bool ok = true;
            for(int i = 0; i < n; i++) {
                sum += diff[i];
                if(sum < nums[i]) {
                    ok = false;
                }
            }
            
            if(ok) {
                ans = mid;
                hi = mid - 1;
            } else {
                lo = mid + 1;
            }
        }
        
        return ans;
    }
};",1454822020
Long Le,lethanhlong582000,399,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int n = nums.size();
        vector<int> pre(n, 0);
        vector<int> suf(n, 0);
        pre[0] = nums[0];
        suf[n - 1] = nums[n - 1];

        for (int i = 1; i < n; i++) {
            pre[i] = pre[i - 1] + nums[i];
        }
        for (int i = n - 2; i >= 0; i--) {
            suf[i] = suf[i + 1] + nums[i];
        }

        int res = 0;
        for (int i = 0; i < n; i++) {
            if (nums[i] == 0) {
                if (pre[i] == suf[i]) res += 2;
                if (abs(pre[i] - suf[i]) == 1) res += 1;
            }
        }

        return res;
    }
};",1454811683
Long Le,lethanhlong582000,399,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        vector<int> ans(n + 1, 0);

        for (vector<int> q : queries) {
            int l = q[0];
            int r = q[1];
            ans[l]++;
            ans[r + 1]--;
        }

        for (int i = 1; i < n; i++) {
            ans[i] = ans[i] + ans[i - 1];
        }

        bool ok = true;
        for (int i = 0; i < n; i++) {
            // cout << ans[i] << ' ';
            if (ans[i] < nums[i]) {
                ok = false;
                break;
            }
        }

        return ok;
    }
};",1454819131
Long Le,lethanhlong582000,399,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int l = 0;
        int r = queries.size();

        int res = -1;
        while (l <= r) {
            int mid = (l + r) / 2;
            if (isValid(nums, queries, mid)) {
                res = mid;
                r = mid - 1;
            } else l = mid + 1;
        }

        return res;
    }

    bool isValid(vector<int>& nums, vector<vector<int>>& queries, int k) {
        int n = nums.size();
        vector<int> ans(n + 1, 0);

        for (int i = 0; i < k; i++) {
            vector<int> q = queries[i];
            int l = q[0];
            int r = q[1];
            int v = q[2];
            ans[l] += v;
            ans[r + 1] -= v;
        }

        for (int i = 1; i < n; i++) {
            ans[i] = ans[i] + ans[i - 1];
        }
        
        bool ok = true;
        for (int i = 0; i < n; i++) {
            // cout << ans[i] << ' ';
            if (ans[i] < nums[i]) {
                ok = false;
                break;
            }
        }

        return ok;
    }
};",1454836616
vectorLongLong,vectorLongLong,400,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int n=nums.size();
        int sum=accumulate(begin(nums),end(nums),0);
        int curr=0;
        int ans=0;
        for(int i=0;i<n;i++){
            curr+=nums[i];
            if(nums[i]==0 && curr==(sum-curr)) ans+=2;
            else if(nums[i]==0 && abs(curr-(sum-curr))==1) ans++;
        }
        return ans;
    }
};",1454807737
vectorLongLong,vectorLongLong,400,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n=nums.size();
        vector<int> diff(n+1,0);
        for(auto it:queries){
            diff[it[0]]++;
            diff[it[1]+1]--;
        }
        for(int i=1;i<n;i++) diff[i]+=diff[i-1];
        for(int i=0;i<n;i++){
            if(nums[i]>diff[i]) return 0;
        }
        return 1;
    }
};",1454809503
vectorLongLong,vectorLongLong,400,3643,cpp,"typedef long long ll;
class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int q=queries.size();
        int n=nums.size();
        if(accumulate(begin(nums),end(nums),0LL)==0) return 0;
        int low=0 , high=q-1 , ans=-1;
        auto check=[&](int mid){
            vector<ll> diff(n+1,0);
            for(int i=0;i<=mid;i++){
                auto it=queries[i];
                diff[it[0]]+=it[2];
                diff[it[1]+1]-=it[2];
            }
            for(int i=1;i<n;i++) diff[i]+=diff[i-1];
            for(int i=0;i<n;i++){
                if(nums[i]>diff[i]) return 0;
            }
            return 1;
        };
        while(low<=high){
            int mid=(low+high)/2;
            if(check(mid)){
                ans=mid+1;
                high=mid-1;
            }
            else low=mid+1;
        }
        return ans;
    }
};",1454822049
Edeeva,KYR4,401,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& a) {
        int n = a.size();
        vector<int> pref(n + 1);
        int ans = 0;
        for (int i = 1; i <= n; i++) pref[i] = pref[i - 1] + a[i - 1];
        for (int i = 1; i <= n; i++)
        {
            int valback = pref[i - 1];
            int valfront = pref[n] - pref[i];
            if (valback == valfront && a[i - 1] == 0 ){
                //cout << i << "" GOOD\n"";
                ans += 2;
            }
            else if (a[i - 1] == 0 && abs(valback - valfront) == 1) ans++;
        }
        return ans;
    }
};",1454813186
Edeeva,KYR4,401,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& a, vector<vector<int>>& qu) {
        int n = a.size();
        vector<int> diff(n + 2);
        int q = qu.size();
        for (int i = 0; i < q; i++)
        {
            int l = qu[i][0];
            int r = qu[i][1];
            diff[l]++;
            diff[r + 1]--;
        }
        for (int i = 1; i < n; i++) diff[i]+= diff[i - 1];
        for (int i = 0; i < n; i++) 
            {
                if (a[i] > diff[i]) return false;
            }
        return true;
    }
};",1454818601
Edeeva,KYR4,401,3643,cpp,"#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp> 
#include <ext/pb_ds/tree_policy.hpp>
#define rep(i,a,b) for (int i = a; i < b; i++)
#define mp make_pair
#define pii pair<int,int> 
#define pb push_back
#define pll pair<long long, long long>
#define fi first
#define se second
#define speedboost ios_base::sync_with_stdio(false); cin.tie(0); cout.tie(0)
using namespace std;
using namespace __gnu_pbds;
typedef tree<int,null_type,less<int>,rb_tree_tag,tree_order_statistics_node_update> ordered_set;
typedef tree<pair<int,int>, null_type,  less<pair<int,int>>, rb_tree_tag, tree_order_statistics_node_update> ordered_multiset;
typedef vector<int> vi;
typedef vector<string> vs;
typedef vector<long long> vll;
typedef long long ll;
typedef long double ld;
ll mod = 1000000007;
const int N = 200000;
const int dx[4]{1, 0, -1, 0}, dy[4]{0, 1, 0, -1};
const char dir[4]{'D','R','U','L'};
#define all(x) begin(x), end(x)
string yes = ""YES\n"";
string no = ""NO\n"";
int inf = 1e9;

class Solution {
public:
    int minZeroArray(vector<int>& a, vector<vector<int>>& qu) {
        int n = a.size();
        int q = qu.size();
        int low = 0;
        int high = q;
        int k = -1;
        while (low <= high)
        {
            vector<ll> diff(n + 2);
            int mid = (low + high) / 2;
            for (int i = 0; i < mid; i++)
            {
                int l = qu[i][0];
                int r = qu[i][1];
                ll val = qu[i][2];
                diff[l] += val;
                diff[r + 1] -= val;
            }
            for (int i = 1; i <= n; i++) diff[i] += diff[i - 1];
            bool valid = true;
            for (int i = 0; i < n; i++) 
            {
                if (a[i] > diff[i]) 
                {
                    valid = false;
                    break;
                }
            }
            if (valid)
            {
                k = mid;
                high = mid - 1;
            }
            else low = mid + 1;
        }
        return k;
    }
};",1454829192
pipipi,mopriestt,403,3616,cpp,"class Solution {
public:
    int n;

    bool tryPick(vector<int> &b, int x, int d) {
        vector<int> a = b;
        while (true) {
            if (x < 0 || x >= n) break;
            if (a[x] == 0) {
                x += d;
                continue;
            }

            a[x] --;
            d = -d;
            x += d;
        }
        for (int i : a) if (i != 0) return false;
        return true;
    }

    int countValidSelections(vector<int>& a) {
        int ans = 0;
        n = a.size();
        for (int i = 0; i < n; i ++) {
            if (a[i] != 0) continue;
            if (tryPick(a, i, 1)) ++ ans;
            if (tryPick(a, i, -1)) ++ ans;
        }

        return ans;
    }
};",1454812005
pipipi,mopriestt,403,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& a, vector<vector<int>>& que) {
        int n = a.size();
        vector<int> b(n + 1, 0);
        for (auto &q : que) {
            b[q[0]] ++;
            b[q[1] + 1] --;
        }

        int cur = 0;
        for (int i = 0; i < n; i ++) {
            cur += b[i];
            if (cur < a[i]) return false;
        }

        return true;;
    }
};",1454816557
pipipi,mopriestt,403,3643,cpp,"class Solution {
public:
    bool test(vector<int>& a, vector<vector<int>>& que, int k) {
        vector<int> b(a.size() + 1, 0);
        for (int i = 0; i < k; i ++) {
            b[que[i][0]] += que[i][2];
            b[que[i][1] + 1] -= que[i][2];
        }

        int cur = 0;
        for (int i = 0; i < a.size(); i ++) {
            cur += b[i];
            if (cur < a[i]) return false;
        }

        return true;
    }

    int minZeroArray(vector<int>& a, vector<vector<int>>& que) {
        int n = a.size(), m = que.size();
        int l = 0, r = m + 1;
        if (!test(a, que, m)) return -1;
        while (r > l) {
//            cout<<l<<' '<<r<<endl;
            int mid = (l + r) >> 1;
            if (test(a, que, mid)) r = mid;
            else l = mid + 1;
        }

        return l;
    }
};",1454836711
Joey Woodson,SaveVMK,405,3616,java,"class Solution {
    public int countValidSelections(int[] nums) {
        int n = nums.length;
        int ans = 0;
        for (int i = 0; i < n; ++i) {
            int left = 0;
            int exact = nums[i];
            if (exact!=0)
                continue;
            int right = 0;
            for (int j = 0; j < i; ++j)
                left+=nums[j];
            for (int j = i+1; j < n; ++j)
                right+=nums[j];
            int ld = left+exact-right;
            int rd = right+exact-left;
            if (ld==0||ld==1)
                ++ans;
            if (rd==0||rd==1)
                ++ans;
        }
        return ans;
    }
}",1454807276
Joey Woodson,SaveVMK,405,3639,java,"class Solution {
    public boolean isZeroArray(int[] nums, int[][] queries) {
        int n = nums.length;
        int ql = queries.length;
        int[] cts = new int[n+1];
        for (int[] q : queries) {
            cts[q[0]]++;
            cts[q[1]+1]--;
        }
        int curr = 0;
        for (int i = 0; i < n; ++i) {
            curr += cts[i];
            if (curr<nums[i])
                return false;
        }
        return true;
    }
}",1454809758
Joey Woodson,SaveVMK,405,3643,java,"class Solution {
    public int minZeroArray(int[] nums, int[][] queries) {
        int n = nums.length;
        int ql = queries.length;
        long[] cts = new long[n+1];
        int index = 0;
        long curr = 0;
        int ans = 0;
        for (int[] q : queries) {
            while (index<n&&curr>=nums[index]) {
                ++index;
                curr += cts[index];
            }
            if (index==n)
                return ans;
            ++ans;
            cts[q[0]]+=q[2];
            cts[q[1]+1]-=q[2];
            if (q[0]<=index)
                curr += q[2];
            if (q[1]<index)
                curr -= q[2];
            //System.out.println(cts[0]+"" ""+cts[1]+"" ""+cts[2]+"" ""+curr+"" ""+index+"" ""+ans);
        }
        while (index<n&&curr>=nums[index]) {
            ++index;
            curr += cts[index];
        }
        if (index==n)
            return ql;
        return -1;
    }
}",1454822306
Puspendra Singh Yadav,puspendra_09,406,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int n = nums.size();
        int ans = 0;
        for(int i = 0; i < n; i++) {
            if(nums[i] == 0) {
                int left = 0 , right = 0;
                for(int j = 0; j < i; j++) {
                    left += nums[j];
                }
                for(int j = i + 1; j < n; j++) {
                    right += nums[j];
                }
                if(left == right) {
                    ans += 2;
                }
                else if(abs(left - right) == 1) {
                    ans += 1;
                }
            }
        }
        return ans;
    }
};",1454836931
Puspendra Singh Yadav,puspendra_09,406,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& Q) {
        long long int n = nums.size();
        long long int q = Q.size();
        
        vector<long long int> arr(n);
        
        auto helper = [&](long long int mid) -> bool {
            for(long long int i = 0; i < n; i++) {
                arr[i] = 0;
            }
            for(long long int i = 0; i <= mid; i++) {
                
                long long int l = Q[i][0];
                long long int r = Q[i][1];
                long long int val = 1;
                
                arr[l] += val;
                if(r + 1 < n) {
                    arr[r + 1] -= val;
                }
            }
            
            for(long long int i = 1; i < n; i++) {
                arr[i] += arr[i - 1];
            }
            
            for(long long int i = 0; i < n; i++) {
                long long int res = nums[i] - arr[i];
                if(res > 0) return false;
            }
            return true;
        };
        
        return helper(q - 1);
        
    }
};",1454826576
Puspendra Singh Yadav,puspendra_09,406,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& Q) {
        long long int n = nums.size();
        long long int q = Q.size();
        
        vector<long long int> arr(n);
        
        auto helper = [&](long long int mid) -> bool {
            for(long long int i = 0; i < n; i++) {
                arr[i] = 0;
            }
            for(long long int i = 0; i <= mid; i++) {
                
                long long int l = Q[i][0];
                long long int r = Q[i][1];
                long long int val = Q[i][2];
                
                arr[l] += val;
                if(r + 1 < n) {
                    arr[r + 1] -= val;
                }
            }
            
            for(long long int i = 1; i < n; i++) {
                arr[i] += arr[i - 1];
            }
            
            for(long long int i = 0; i < n; i++) {
                long long int res = nums[i] - arr[i];
                if(res > 0) return false;
            }
            return true;
        };
        
        long long int ans = -1;
        if(count(nums.begin() , nums.end() , 0) == n) {
            return 0;
        }
        
        long long int low = 0 , high = q - 1;
        while(low <= high) {
            long long int mid = (low + high) >> 1;
            if(helper(mid)) {
                ans = mid + 1;
                high = mid - 1;
            }
            else {
                low = mid + 1;
            }
        }
        return ans;
    }
};",1454823009
Manyu,ManyuD,407,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:

        n = len(nums)
        res = 0

        def check(arr, i, d):

            vis = set()
            
            while sum(arr) > 0:
                if arr[i] == 0:
                   
                    if d:
                        i += 1
                    else:
                        i -= 1

                    if not (0 <= i < len(arr)):
                        return False
                else:
                    arr[i] -= 1

                    d = not d
                    
                    if d:
                        i += 1
                    else:
                        i -= 1

                    if not (0 <= i < len(arr)):
                        return False

            return True
                
        
        for start in range(n):
            if nums[start] == 0:
                # res += check(nums.copy(), start, True)
                # res += check(nums.copy(), start, False)

                l = sum(nums[:start])
                r = sum(nums[start + 1:])
                
                if l == r:
                    res += 2
                elif abs(l - r) == 1:
                    res += 1
            
        return res
            
            ",1454813268
Manyu,ManyuD,407,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:

        n = len(nums)
        pref = [0] * n

        for s, e in queries:

            pref[s] -= 1
            if e + 1 < n:
                pref[e + 1] += 1

        curr = 0
        # print(pref)

        for i in range(n):
            curr -= pref[i]
            
            if nums[i] - curr > 0:
                return False

        return True",1454817400
Manyu,ManyuD,407,3643,python3,"class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:


        def check(i):

            n = len(nums)
            pref = [0] * n
            # qe = queries[:i]
            
            for s, e, val in queries[:i]:
    
                pref[s] -= val
                if e + 1 < n:
                    pref[e + 1] += val
    
            curr = 0
    
            for i in range(n):
                curr -= pref[i]
                
                if nums[i] - curr > 0:
                    return False
    
            return True

        def bins(start, end):
            if start >= end:
                return math.inf
            if start + 1 == end:
                return start if check(start) else math.inf

            mid = (start + end) // 2

            if not check(mid):
                return bins(mid + 1, end)
            else:
                return min(mid, bins(start, mid))

        res = bins(0, len(queries) + 1)
        return res if res != math.inf else -1
            ",1454822397
jeremymacn,jeremymacn,408,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        res=0
        for ind,num in enumerate(nums):
            if num==0:
                l=sum(nums[:ind])
                r=sum(nums[ind+1:])
                if l==r: 
                    res+=2
                elif abs(l-r)==1:
                    res+=1
        return res",1454806810
jeremymacn,jeremymacn,408,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        heap=[]
        for l,r in queries:
            heapq.heappush(heap,(l,1))
            heapq.heappush(heap,(r+1,-1))
        cur=0
        for ind,num in enumerate(nums): 
            
            while heap[0][0]==ind:
                position,change=heapq.heappop(heap)
                cur+=change
            nums[ind]-=cur
            if nums[ind]>0:
                return False
       
        return True
                
            
            ",1454815209
jeremymacn,jeremymacn,408,3643,python3,"class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        def helper(q):
            heap=[]
            
            for l,r,val in q:
                heapq.heappush(heap,(l,val))
                heapq.heappush(heap,(r+1,-val))
            cur=0
            for ind,num in enumerate(nums): 
                
                while heap and heap[0][0]==ind:
                    position,change=heapq.heappop(heap)
                    cur+=change
                if nums[ind]-cur>0:
                    return False
           
            return True
        if not helper(queries):
            return -1
            
        l,r=0,len(queries)
        while l<=r:
            mid=(l+r)//2
            if helper(queries[:mid]):
                r=mid-1
            else:
                l=mid+1
        return l",1454829505
Miles Morales,red_spidey,409,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
            def simulate(start, direction):
                n = len(nums)
                nums_copy = nums[:]
                curr = start
                while 0 <= curr < n:
                    if nums_copy[curr] == 0:
                        curr += direction  # Move in the current direction
                    else:
                        nums_copy[curr] -= 1  # Decrement the value
                        direction = -direction  # Reverse direction
                        curr += direction  # Take a step in the new direction
                # Check if the array is all zeros
                return all(x == 0 for x in nums_copy)
            
            count = 0
            n = len(nums)
            for i in range(n):
                if nums[i] == 0:
                    # Check both left and right directions
                    if simulate(i, -1):  # Start moving left
                        count += 1
                    if simulate(i, 1):  # Start moving right
                        count += 1
            
            return count

                
                    
            
                
            ",1454818343
Miles Morales,red_spidey,409,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        n = len(nums)
        diff = [0] * (n + 1) 
        
        for li, ri in queries:
            diff[li] += 1
            if ri + 1 < n:
                diff[ri + 1] -= 1
        
        decrement = [0] * n
        running_sum = 0
        for i in range(n):
            running_sum += diff[i]
            decrement[i] = running_sum  
        
        for i in range(n):
            if nums[i] > decrement[i]:  
                return False
        return True

",1454826412
Miles Morales,red_spidey,409,3643,python3,"class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        def isZeroArray( nums: List[int], queries: List[List[int]]) -> bool:
            n = len(nums)
            diff = [0] * (n + 1) 
            
            for li, ri, val in queries:
                diff[li] += val
                if ri + 1 < n:
                    diff[ri + 1] -= val
            
            decrement = [0] * n
            running_sum = 0
            for i in range(n):
                running_sum += diff[i]
                decrement[i] = running_sum  
            
            for i in range(n):
                if nums[i] > decrement[i]:  
                    return False
            return True
        l = 0
        r = len(queries)
        if not isZeroArray(nums, queries[:r]): return -1
        while l<r:

            mid = (r+l)//2
            if isZeroArray(nums, queries[:mid]):
                r = mid
            else:
                l = mid+1
        return l
            ",1454837002
Likitha,LU9pWkWTSB,410,3616,python3,"from typing import List

class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        def simulate(curr, direction):
            nums_copy = nums[:]
            n = len(nums_copy)
            while 0 <= curr < n:
                if nums_copy[curr] == 0:
                    curr += direction
                else:
                    nums_copy[curr] -= 1
                    direction *= -1 
                    curr += direction
            return all(x == 0 for x in nums_copy)
        
        count = 0
        n = len(nums)
        
        for i in range(n):
            if nums[i] == 0:
                if simulate(i, -1):  
                    count += 1
                if simulate(i, 1):  
                    count += 1
        
        return count
",1454809145
Likitha,LU9pWkWTSB,410,3639,python3,"from typing import List

class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        n = len(nums)
        range_sums = [0] * (n + 1)  
        for l, r in queries:
            range_sums[l] += 1
            if r + 1 < n:
                range_sums[r + 1] -= 1
        decrements = [0] * n
        active_decrements = 0
        for i in range(n):
            active_decrements += range_sums[i]
            decrements[i] = active_decrements
        for i in range(n):
            if nums[i] > decrements[i]:
                return False

        return True
",1454826032
Likitha,LU9pWkWTSB,410,3643,python3,"from typing import List
class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        def can_process_k_queries(k: int) -> bool:
            n = len(nums)
            diff = [0] * (n + 1)  
            current = nums[:]  
            for i in range(k):
                l, r, val = queries[i]
                diff[l] += val
                if r + 1 < n:
                    diff[r + 1] -= val
            total_decrement = 0
            for i in range(n):
                total_decrement += diff[i]          
                current[i] = max(0, current[i] - total_decrement)
            return all(x == 0 for x in current)
        left, right = 0, len(queries)
        result = -1

        while left <= right:
            mid = (left + right) // 2
            if can_process_k_queries(mid):
                result = mid 
                right = mid - 1
            else:
                left = mid + 1
        
        return result
",1454837028
Deepak,Deepak_221,411,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int n = nums.size();
        int validCount = 0;

        // Simulate the process for a given start position and direction
        auto simulate = [&](int start, int direction) {
            vector<int> numsCopy = nums; // Create a copy of nums
            int curr = start;

            while (curr >= 0 && curr < n) {
                if (numsCopy[curr] == 0) {
                    curr += direction; // Move in the current direction
                } else {
                    numsCopy[curr]--;   // Decrement the value at the current position
                    direction = -direction; // Reverse direction
                    curr += direction; // Move in the reversed direction
                }
            }

            // Check if all elements are zero
            for (int x : numsCopy) {
                if (x != 0) return false;
            }
            return true;
        };

        // Iterate through all starting positions where nums[i] == 0
        for (int i = 0; i < n; ++i) {
            if (nums[i] == 0) {
                // Try both directions for the current starting position
                if (simulate(i, -1)) validCount++;
                if (simulate(i, 1)) validCount++;
            }
        }

        return validCount;
    }
};",1454806740
Deepak,Deepak_221,411,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        vector<int> delta(n + 1, 0); 

        for (const auto& query : queries) {
            int start = query[0], end = query[1];
            delta[start]--;          
            if (end + 1 < n) delta[end + 1]++; 
        }

        for (int i = 1; i < n; ++i) {
            delta[i] += delta[i - 1];
        }

       
        for (int i = 0; i < n; ++i) {
            if (nums[i] + delta[i] > 0) return false; 
        }

        return true; 
    }
};",1454832408
Deepak,Deepak_221,411,3643,cpp,"class Solution {
public:
    bool canZeroArray(vector<int>& nums, vector<vector<int>>& queries, int k) {
        int n = nums.size();
        vector<int> delta(n + 1, 0); // Difference array for range updates

        // Process the first k queries to update the difference array
        for (int i = 0; i < k; ++i) {
            int start = queries[i][0], end = queries[i][1], value = queries[i][2];
            delta[start] -= value;
            if (end + 1 < n) delta[end + 1] += value;
        }

        // Accumulate the range updates
        for (int i = 1; i < n; ++i) {
            delta[i] += delta[i - 1];
        }

        // Check if nums becomes a zero array after applying the updates
        for (int i = 0; i < n; ++i) {
            if (nums[i] + delta[i] > 0) {
                return false; // nums[i] is not zero or negative
            }
        }

        return true; // Successfully converted nums to a zero array
    }
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int left = 0, right = queries.size();
        int result = -1;

        while (left <= right) {
            int mid = (left + right) / 2;
            if (canZeroArray(nums, queries, mid)) {
                result = mid;      // Update result if successful
                right = mid - 1;   // Search in the lower half
            } else {
                left = mid + 1;    // Search in the upper half
            }
        }

        return result;
    }
};",1454837079
Wei Liu,nevergiveup,413,3616,java,"class Solution {

    private int[] prefix;
    private int[] suffix;

    public int countValidSelections(int[] nums) {
        int n = nums.length;
        prefix = new int[n];
        suffix = new int[n];
        for (int i = 0;i < n;i ++) {
            prefix[i] = nums[i];
            if (i > 0) {
                prefix[i] += prefix[i - 1];
            }
        }
        for (int i = n - 1;i >= 0;i --) {
            suffix[i] = nums[i];
            if (i + 1 < n) {
                suffix[i] += suffix[i + 1];
            }
        }
        // check all the zeros
        int ans = 0;
        for (int i = 0;i < n;i ++) {
            if (nums[i] == 0) {
                int leftSum = 0, rightSum = 0;
                if (i - 1 >= 0) {
                    leftSum = prefix[i - 1];
                }
                if (i + 1 < n) {
                    rightSum = suffix[i + 1];
                }
                if (leftSum == rightSum) {
                    ans += 2;
                } else {
                    int diff = Math.abs(leftSum - rightSum);
                    if (diff == 1) {
                        ans ++;
                    }
                }
            }
        }
        return ans;
    }

}",1454809267
Wei Liu,nevergiveup,413,3639,java,"class Solution {

    private int[] update = new int[100010];

    public boolean isZeroArray(int[] nums, int[][] queries) {
        for (int[] query : queries) {
            int l = query[0], r = query[1];
            update[l] ++;
            update[r + 1] --;
        }
        long acc = 0;
        for (int i = 0;i < nums.length;i ++) {
            acc += update[i];
            if (acc < nums[i]) {
                return false;
            }
        }
        return true;
    }

}",1454815295
Wei Liu,nevergiveup,413,3643,java,"class Solution {

    private boolean check(int[] nums, int[][] queries, int queryNum) {
        Arrays.fill(update, 0);
        long acc = 0;
        for (int i = 0;i < queryNum;i ++) {
            int[] query = queries[i];
            int l = query[0], r = query[1], val = query[2];
            update[l] += val;
            update[r + 1] -= val;
        }
        for (int i = 0;i < nums.length;i ++) {
            acc += update[i];
            if (acc < nums[i]) {
                return false;
            }
        }
        return true;
    }

    private int[] update = new int[100010];

    public int minZeroArray(int[] nums, int[][] queries) {
        int l = 0, r = queries.length + 1;
        while (l < r) {
            int mid = (l + r) / 2;
            if (check(nums, queries, mid)) {
                r = mid;
            } else {
                l = mid + 1;
            }
        }
        if (l == queries.length + 1) {
            return - 1;
        } else {
            return l;
        }
    }

}",1454829676
realstar,realstar,415,3616,java,"class Solution {
    public int countValidSelections(int[] nums) {
        int n = nums.length;
        int result = 0;
        int sum = 0;
        for (int num : nums)
        	sum += num;
        for (int i = 0; i < n; i++) {
        	if (nums[i] == 0) {
        		int[] clone = nums.clone();
        		if (valid(clone, n, i, sum, true))
        			result++;
        		int[] clone2 = nums.clone();
        		if (valid(clone2, n, i, sum, false))
        			result++;
        	}
        }
        return result;
    }

	
	private static boolean valid(int[] nums, int n, int index, int sum, boolean right) {
		int now = index;
		while (sum > 0) {
			if (right)
				now++;
			else
				now--;
			if (now < 0 || now >= n)
				return sum == 0;
			if (nums[now] > 0) {
				nums[now]--;
				sum--;
				right = !right;
			}
		}
		return sum == 0;
	}
}",1454816480
realstar,realstar,415,3639,java,"class Solution {
    public boolean isZeroArray(int[] nums, int[][] queries) {
        int n = nums.length;
        int[] changes = new int[n + 1];
        for (int[] query : queries) {
        	changes[query[0]]++;
        	changes[query[1] + 1]--;
        }
        if (nums[0] > changes[0])
        	return false;
        	
        for (int i = 1; i < n; i++) {
        	changes[i] += changes[i - 1];
        	if (nums[i] > changes[i])
        		return false;
        }
        return true;
    }
}",1454825912
realstar,realstar,415,3643,java,"class Solution {
    public int minZeroArray(int[] nums, int[][] queries) {
        int n = queries.length;
		if (isZeroArray(nums, 0, queries))
			return 0;
		if (!isZeroArray(nums, n, queries))
			return -1;
		int left = 0;
		int right = n;
		while (left + 1 < right) {
			int mid = left + (right - left) / 2;
			if (isZeroArray(nums, mid, queries))
				right = mid;
			else
				left = mid;
		}
		return right;
    }
	
	private static boolean isZeroArray(int[] nums, int k, int[][] queries) {
        int n = nums.length;
        int[] changes = new int[n + 1];
        for (int i = 0; i < k; i++) {
        	int[] query = queries[i];
        	changes[query[0]] += query[2];
        	changes[query[1] + 1] -= query[2];
        }
        if (nums[0] > changes[0])
        	return false;
        	
        for (int i = 1; i < n; i++) {
        	changes[i] += changes[i - 1];
        	if (nums[i] > changes[i])
        		return false;
        }
        return true;
    }
}",1454837249
Akhil,akh26,418,3616,cpp,"class Solution {
public:
    bool f(vector<int> nums, int start, int dir) {
        int curr = start;
        while (curr >= 0 && curr < nums.size()) {
            if (nums[curr] == 0) {
                curr += dir; 
            } else {
                nums[curr]--;       
                dir = -dir; 
                curr += dir; 
            }
        }
        for (int num : nums) {
            if (num != 0) return false;
        }
        return true;
    }
    int countValidSelections(vector<int>& nums) {
        int n = nums.size();
        int mx = 0;
        for (int i = 0; i < n; i++) {
            if (nums[i] == 0) {
                if (f(nums, i, -1)) mx++; 
                if (f(nums, i, 1)) mx++; 
            }
        }

        return mx;
    }
};",1454806601
Akhil,akh26,418,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        vector<int> diff(n+1,0);
        for (auto& query : queries) {
            int l = query[0], r = query[1];
            diff[l]++;          
            if (r+1<n) {
                diff[r+1]--; 
            }
        }
        int cur = 0;
        for (int i = 0; i < n; ++i) {
            cur += diff[i]; 
            if (cur < nums[i]) {
                return false; 
            }
        }

        return true; 
    }
};",1454823914
Akhil,akh26,418,3643,cpp,"class Solution {
public:
    bool f(int k,vector<int>& nums,vector<vector<int>>& queries) {
        int n = nums.size();
        vector<int> pref(n+1, 0);
        for (int i = 0; i < k; ++i) {
            int l = queries[i][0],r=queries[i][1], val=queries[i][2];
            pref[l]+=val;
            if (r+1<n) {
                pref[r+1] -= val;
            }
        }
        int sum = 0;
        for (int i = 0; i < n; ++i) {
            sum+=pref[i];
            if (sum<nums[i]){ 
                return false;
            }
        }
        return true;
    }
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        vector<int>v;
        v=nums;
        int flag=0;
        for (int i = 0; i < nums.size(); i++)
        {
            if (nums[i]!=0)
            {
                flag=1;
                break;
            }
        }
        if (flag==0)
        {
            return 0;
        }
        int lo = 0, hi = queries.size();
        int ans = -1;
        bool ok = false;
        while (lo<=hi) {
            int mid = lo+(hi-lo)/2;
            if (f(mid,nums,queries)) {
                ans=mid;
                hi=mid-1;
            }else{
                lo=mid+1;
            }
        }
        return ans;
    }
};",1454837305
Neil Chetty,neilchetty,422,3616,java,"class Solution {
    public int countValidSelections(int[] nums) {
        int right = 0, result = 0, n = nums.length;
        for(int i : nums) right += i;
        for(int i = 0, left = 0; i < n; i++) {
            right -= nums[i];
            if(nums[i] == 0) {
                if(Math.abs(left-right)==0) result += 2;
                else if(Math.abs(left - right) == 1) result += 1;
            }
            left += nums[i];
        }
        return result;
    }
}",1454815443
Neil Chetty,neilchetty,422,3639,java,"class Solution {
    public boolean isZeroArray(int[] nums, int[][] queries) {
        int n = nums.length;
        int[] ok = new int[n+1];
        for(int[] q : queries) {
            ok[q[0]]++;
            ok[q[1]+1]--;
        }
        for(int i = 0, sum = 0; i <= n; i++) {
            sum += ok[i];
            ok[i] = sum;
        }
        for(int i = 0; i < n; i++) {
            if(ok[i] < nums[i]) return false;
        }
        return true;
    }
}",1454807448
Neil Chetty,neilchetty,422,3643,java,"class Solution {
    public int minZeroArray(int[] nums, int[][] q) {
        int n = nums.length, m = q.length;
        int left = 0, right = m;
        while(left <= right) {
            int mid = left + (right - left)/2;
            if(verify(nums, q, mid)) right = mid - 1;
            else left = mid + 1;
        }
        return left > m ? -1 : left;
    }
    
    private boolean verify(int[] nums, int[][] q, int mid) {
        int n = nums.length;
        int[] ok = new int[n+1];
        for(int i = 0; i < mid; i++) {
            ok[q[i][0]] += q[i][2];
            ok[q[i][1]+1] -= q[i][2];
        }
        for(int i = 0, sum = 0; i <= n; i++) {
            sum += ok[i];
            ok[i] = sum;
        }
        for(int i = 0; i < n; i++) {
            if(ok[i] < nums[i]) return false;
        }
        return true;

    }
}",1454829992
Mohd Adil,ace_Coder121,423,3616,cpp,"class Solution {
public:
    int countValidSelections(std::vector<int>& a) {
        int v = 0, n = a.size();
        auto sim = [&](int s, int d) {
            std::vector<int> b = a;
            int p = s;
            while (p >= 0 && p < n) {
                if (b[p] == 0) p += d;
                else if (b[p] > 0) {
                    b[p]--;
                    d = -d;
                    p += d;
                }
            }
            return std::all_of(b.begin(), b.end(), [](int x) { return x == 0; });
        };
        for (int i = 0; i < n; ++i) {
            if (a[i] == 0) {
                if (sim(i, -1)) v++;
                if (sim(i, 1)) v++;
            }
        }
        return v;
    }
};
",1454806159
Mohd Adil,ace_Coder121,423,3639,cpp,"#define ll long long int
template <typename T>
class SegTree{
    void build(vector<T> &arr,int l,int r,int i){
        if(l==r){
            tree[i]=arr[l];
            return;
        }
        int mid = (l+r)/2;
        build(arr,l,mid,2*i+1);
        build(arr,mid+1,r,2*i+2);
        tree[i]=fn(tree[2*i+1],tree[2*i+2]);
    }

    void make_pure(int l,int r,int i){
    	if(is_del_update)make_pure_delta(l,r,i);
    	else make_pure_set(l,r,i);
    }


    void make_pure_set(int l,int r,int i){
    	if(lz[i]==0)return;
    	tree[i]=lz[i];
    	if(l!=r){
    		lz[2*i+1]=lz[i];
    		lz[2*i+2]=lz[i];
    	}
    	lz[i]=0;
    }

    void make_pure_delta(int l,int r,int i){
    	if(lz[i]==0)return;
    	tree[i]+=lz[i];
    	if(l!=r){
    		lz[2*i+1]+=lz[i];
    		lz[2*i+2]+=lz[i];
    	}
    	lz[i]=0;
    }

    void upd(int ql,int qr,int val,int l,int r,int i){
    	make_pure(l,r,i);
        if(ql>r || l>qr)return;
        if(ql<=l && r<=qr){
        	if(is_del_update)lz[i]+=val;
        	else lz[i]=val;
    		make_pure(l,r,i);
    		return;
        }
        int mid = (l+r)/2;
        upd(ql,qr,val,l,mid,2*i+1);
        upd(ql,qr,val,mid+1,r,2*i+2);
        tree[i]=fn(tree[2*i+1],tree[2*i+2]);
    }

    T qry(int ql,int qr,int l,int r,int i){
    	make_pure(l,r,i);
        if(ql>r || l>qr)return 0;
        if(ql<=l && r<=qr)return tree[i];
        int mid = (l+r)/2;
        return fn(qry(ql,qr,l,mid,2*i+1),qry(ql,qr,mid+1,r,2*i+2));
    }

    public:
    int n;
    function<T(T,T)> fn;
    vector<T> tree,lz;
    bool is_del_update;
    SegTree(int arr_size,function<T(T,T)> op,bool is_delta=false){
        tree.resize(4*arr_size);
        lz.resize(4*arr_size);
        n=arr_size;
        fn = op;
        is_del_update=is_delta;
    }
    void build(vector<T> &arr){
        build(arr,0,arr.size()-1,0);
    }

    void upd(int ql,int qr,T val){
        upd(ql,qr,val,0,n-1,0);
    }

    T qry(int ql,int qr){
        return qry(ql,qr,0,n-1,0);
    } 
};

class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& qr) {
        int n = nums.size();
        SegTree<ll> sg(n,[&](ll a,ll b){
            return a+b;
        },true);

        vector<ll> v;

        for(auto x:nums){
            v.push_back(x);
        }
        
        sg.build(v);


        for(auto q:qr){
            sg.upd(q[0],q[1],-1);
        }
        for(int i=0;i<n;i++){
            if(sg.qry(i,i)>0){
                return false;
            }            
        }
        return true;
    }
};",1454814092
Mohd Adil,ace_Coder121,423,3643,cpp,"#define ll long long int
template <typename T>
class SegTree{
    void build(vector<T> &arr,int l,int r,int i){
        if(l==r){
            tree[i]=arr[l];
            return;
        }
        int mid = (l+r)/2;
        build(arr,l,mid,2*i+1);
        build(arr,mid+1,r,2*i+2);
        tree[i]=fn(tree[2*i+1],tree[2*i+2]);
    }

    void make_pure(int l,int r,int i){
    	if(is_del_update)make_pure_delta(l,r,i);
    	else make_pure_set(l,r,i);
    }


    void make_pure_set(int l,int r,int i){
    	if(lz[i]==0)return;
    	tree[i]=lz[i];
    	if(l!=r){
    		lz[2*i+1]=lz[i];
    		lz[2*i+2]=lz[i];
    	}
    	lz[i]=0;
    }

    void make_pure_delta(int l,int r,int i){
    	if(lz[i]==0)return;
    	tree[i]+=lz[i];
    	if(l!=r){
    		lz[2*i+1]+=lz[i];
    		lz[2*i+2]+=lz[i];
    	}
    	lz[i]=0;
    }

    void upd(int ql,int qr,int val,int l,int r,int i){
    	make_pure(l,r,i);
        if(ql>r || l>qr)return;
        if(ql<=l && r<=qr){
        	if(is_del_update)lz[i]+=val;
        	else lz[i]=val;
    		make_pure(l,r,i);
    		return;
        }
        int mid = (l+r)/2;
        upd(ql,qr,val,l,mid,2*i+1);
        upd(ql,qr,val,mid+1,r,2*i+2);
        tree[i]=fn(tree[2*i+1],tree[2*i+2]);
    }

    T qry(int ql,int qr,int l,int r,int i){
    	make_pure(l,r,i);
        if(ql>r || l>qr)return 0;
        if(ql<=l && r<=qr)return tree[i];
        int mid = (l+r)/2;
        return fn(qry(ql,qr,l,mid,2*i+1),qry(ql,qr,mid+1,r,2*i+2));
    }

    public:
    int n;
    function<T(T,T)> fn;
    vector<T> tree,lz;
    bool is_del_update;
    SegTree(int arr_size,function<T(T,T)> op,bool is_delta=false){
        tree.resize(4*arr_size);
        lz.resize(4*arr_size);
        n=arr_size;
        fn = op;
        is_del_update=is_delta;
    }
    void build(vector<T> &arr){
        build(arr,0,arr.size()-1,0);
    }

    void upd(int ql,int qr,T val){
        upd(ql,qr,val,0,n-1,0);
    }

    T qry(int ql,int qr){
        return qry(ql,qr,0,n-1,0);
    } 
};

class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& qr) {
        int n = nums.size();
        SegTree<ll> sg(n,[&](ll a,ll b){
            return max(a,b);
        },true);

        vector<ll> v;

        for(auto x:nums){
            v.push_back(x);
        }
        
        sg.build(v);

        if(sg.qry(0,n-1)<=0){
            return 0;
        }

        int i=1;
        for(auto q:qr){
            sg.upd(q[0],q[1],-q[2]);
            if(sg.qry(0,n-1)<=0){
                return i;
            }
            i++;
        }
        return -1;
    }
};",1454822863
gjp4_,gjp4_,424,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int n = nums.size();
        auto simulate = [&](int start, int direction) {
            int cur = start;
            vector<int> tmp = nums;
            while(cur < n && cur >= 0) {
                if(tmp[cur] == 0)cur += direction;
                else if(tmp[cur] > 0) {
                    tmp[cur]--;
                    direction *= -1;
                    cur += direction;
                }
            }
            for(int i=0;i<n;i++) {
                if(tmp[i] > 0)return false;
            }
            return true;
        };
        int ans = 0;
        for(int i = 0;i<n;i++) {
            if(nums[i] == 0) {
                ans += simulate(i, 1);
                ans += simulate(i, -1);
            }
        }
        return ans;
    }
};",1454837463
gjp4_,gjp4_,424,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        vector<int> diff(n + 1, 0);
        for(auto q: queries) {
            diff[q[0]]++;
            diff[q[1] + 1]--;
        }
        for(int i=1;i<n+1;i++)diff[i] += diff[i-1];
        for(int i=0;i<n;i++)if(diff[i] < nums[i])return false;
        return true;
    }
};",1454821887
gjp4_,gjp4_,424,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size(), l = 0, r = queries.size(), mid, ans = -1;
        while(l <= r) {
            mid = (l+r)/ 2;
            vector<int> diff(n+1, 0);
            for(int i=0;i<mid;i++) {
                diff[queries[i][0]] += queries[i][2];
                diff[queries[i][1] + 1] -= queries[i][2];
            }
            for(int i=1;i<n+1;i++)diff[i] += diff[i-1];
            bool ok = true;
            for(int i=0;i<n;i++) {
                if(diff[i] < nums[i]) {
                    ok = false;
                    break;
                }
            }
            if(ok) {
                ans = mid;
                r = mid - 1;
            }
            else l = mid + 1;
        }
        return ans;
    }
};",1454821722
tomarin,tomarint,425,3616,rust,"impl Solution {
    pub fn count_valid_selections(nums: Vec<i32>) -> i32 {
        let n = nums.len();
        let mut lsum = vec![0; n+1];
        let mut rsum = vec![0; n+1];
        for i in 0..n {
            lsum[i+1] = lsum[i] + nums[i];
        }
        for i in (0..n).rev() {
            rsum[i] = rsum[i+1] + nums[i];
        }
        let mut ans = 0;
        for i in 0..n {
            if nums[i] == 0 {
                if lsum[i] == rsum[i+1] {
                    ans += 2;
                }
                else if lsum[i] == rsum[i+1] + 1 {
                    ans += 1;
                }
                else if lsum[i] + 1 == rsum[i+1] {
                    ans += 1;
                }
            }
        }
        ans
    }
}",1454808759
tomarin,tomarint,425,3639,rust,"#[derive(Clone)]
struct FenwickTree {
    n: usize,
    data: Vec<i64>,
}
impl FenwickTree {
    fn new(n: usize) -> FenwickTree {
        FenwickTree {
            n: n,
            data: vec![0; n + 1],
        }
    }
    fn add(&mut self, i: usize, x: i64) {
        let mut i = i + 1;
        while i <= self.n {
            self.data[i] += x;
            i += i & i.wrapping_neg();
        }
    }
    fn sum(&self, i: usize) -> i64 {
        let mut i = i + 1;
        let mut s = 0;
        while i > 0 {
            s += self.data[i];
            i -= i & i.wrapping_neg();
        }
        s
    }
}

impl Solution {
    pub fn is_zero_array(nums: Vec<i32>, queries: Vec<Vec<i32>>) -> bool {
        let n = nums.len();
        let mut ft = FenwickTree::new(n+1);
        for q in queries {
            let (l, r) = (q[0] as usize, q[1] as usize);
            ft.add(l, 1);
            ft.add(r + 1, -1);
        }
        for i in 0..n {
            if ft.sum(i) < nums[i] as i64 {
                return false;
            }
        }
        true
    }
}",1454815663
tomarin,tomarint,425,3643,rust,"#[derive(Clone)]
struct FenwickTree {
    n: usize,
    data: Vec<i64>,
}
impl FenwickTree {
    fn new(n: usize) -> FenwickTree {
        FenwickTree {
            n: n,
            data: vec![0; n + 1],
        }
    }
    fn add(&mut self, i: usize, x: i64) {
        let mut i = i + 1;
        while i <= self.n {
            self.data[i] += x;
            i += i & i.wrapping_neg();
        }
    }
    fn sum(&self, i: usize) -> i64 {
        let mut i = i + 1;
        let mut s = 0;
        while i > 0 {
            s += self.data[i];
            i -= i & i.wrapping_neg();
        }
        s
    }
}

impl Solution {
    pub fn min_zero_array(nums: Vec<i32>, queries: Vec<Vec<i32>>) -> i32 {
        let n = nums.len();
        // クエリをk個適用したときに、全部0になっているかどうかを判定する
        fn check(
            nums: &Vec<i32>,
            queries: &Vec<Vec<i32>>,
            k: usize,
        ) -> bool {
            let n = nums.len();
            let mut ft = FenwickTree::new(n+1);
            for q in queries.iter().take(k) {
                let (l, r, val) = (q[0] as usize, q[1] as usize, q[2] as i64);
                ft.add(l, val);
                ft.add(r + 1, -val);
            }
            for i in 0..n {
                if ft.sum(i) < nums[i] as i64 {
                    return false;
                }
            }
            true
        }
        if !check(&nums, &queries, queries.len()) {
            return -1;
        }
        else if check(&nums, &queries, 0) {
            return 0;
        }
        else {
            let mut ng = 0;
            let mut ok = queries.len();
            while ok - ng > 1 {
                let mid = (ok + ng) / 2;
                if check(&nums, &queries, mid) {
                    ok = mid;
                } else {
                    ng = mid;
                }
            }
            return ok as i32;
        }
    }
}",1454830074
Terror_404,Terror_404,428,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int n=nums.size();
      vector<int>pref(n+1,0);
        for(int i=0;i<n;i++) pref[i+1]=nums[i]+pref[i];
        vector<int>suff(n+2,0);
        for(int i=n-1;i>=0;i--) suff[i+1]=nums[i]+suff[i+2];
        int ans=0;
        for(int i=0;i<n;i++){
            if(nums[i]!=0) continue;
            if(abs(pref[i]-suff[i+1])==0)ans+=2;
            if(abs(pref[i]-suff[i+1])==1)ans++;
        }
        return ans;
    }
};",1454810836
Terror_404,Terror_404,428,3639,cpp,"class Solution {
public:
#define ll long long
class BIT {
    public:
    ll len;
    vector<ll> bit;
    BIT(ll k){
        bit.resize(k+1, 0);
        len = k;
    }
    ll sum(int i){
        ll ret = 0;
        for (; i > 0; i -= (i & (-i)))
            ret += bit[i];
            return ret;
    }
    void update(ll i, ll val){
        for (; i <= len; i += (i & (-i)))
            bit[i] += val;
    }
};
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
          int q=queries.size();
        int l=0; int r=q-1;
        int n=nums.size();
        int ans=-1; 
        
        while(l<=r){
            BIT Tr(n+5);
            int mid=(l+r)>>1;
            for(int i=0;i<=mid;i++){
                Tr.update(queries[i][0]+1,1);
                Tr.update(queries[i][1]+2,-1);
            }
            bool ok=true;
            for(int i=0;i<n;i++){
                if(Tr.sum(i+1)<nums[i]) ok=false;
            }
            if(ok){
                ans=mid+1;
                r=mid-1;
            }
            else l=mid+1;
        }
        
        sort(nums.begin(),nums.end());
        if(nums[n-1]==0) return true;
        if(ans==-1) return false;
        return true;
    }
};",1454830298
Terror_404,Terror_404,428,3643,cpp,"class Solution {
public:
#define ll long long
class BIT {
    public:
    ll len;
    vector<ll> bit;
    BIT(ll k){
        bit.resize(k+1, 0);
        len = k;
    }
    ll sum(int i){
        ll ret = 0;
        for (; i > 0; i -= (i & (-i)))
            ret += bit[i];
            return ret;
    }
    void update(ll i, ll val){
        for (; i <= len; i += (i & (-i)))
            bit[i] += val;
    }
};
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int q=queries.size();
        int l=0; int r=q-1;
        int n=nums.size();
        int ans=-1; 
        
        while(l<=r){
            BIT Tr(n+1);
            int mid=(l+r)>>1;
            for(int i=0;i<=mid;i++){
                Tr.update(queries[i][0]+1,queries[i][2]);
                Tr.update(queries[i][1]+2,-queries[i][2]);
            }
            bool ok=true;
            for(int i=0;i<n;i++){
                if(Tr.sum(i+1)<nums[i]) ok=false;
            }
            if(ok){
                ans=mid+1;
                r=mid-1;
            }
            else l=mid+1;
        }
        sort(nums.begin(),nums.end());
        if(nums[n-1]==0) return 0;
        return ans;
    }
};",1454824081
Ashwini D M,4MC22CS019,429,3616,c,"#include <stdbool.h>
#include <string.h>

// Function to check if all elements in nums are zero
bool allZeros(int* nums, int numsSize) {
    for (int i = 0; i < numsSize; i++) {
        if (nums[i] != 0) {
            return false;
        }
    }
    return true;
}

// Function to simulate the process
bool simulate(int* nums, int numsSize, int start, int direction) {
    int numsCopy[numsSize];
    memcpy(numsCopy, nums, numsSize * sizeof(int));
    int curr = start;
    
    while (curr >= 0 && curr < numsSize) {
        if (numsCopy[curr] == 0) {
            curr += direction; // Move in the current direction
        } else {
            numsCopy[curr] -= 1;  // Decrement the current element
            direction = -direction; // Reverse direction
            curr += direction; // Move in the new direction
        }
    }
    
    return allZeros(numsCopy, numsSize);
}

// Main function to count valid selections
int countValidSelections(int* nums, int numsSize) {
    int validCount = 0;
    
    for (int i = 0; i < numsSize; i++) {
        if (nums[i] == 0) {
            // Try both directions
            if (simulate(nums, numsSize, i, -1)) {
                validCount++;
            }
            if (simulate(nums, numsSize, i, 1)) {
                validCount++;
            }
        }
    }
    
    return validCount;
}
",1454824275
Ashwini D M,4MC22CS019,429,3639,c,"#include <stdbool.h>
#include <stdlib.h>
#include <string.h>

// Function to determine if nums can be transformed into a Zero Array
bool isZeroArray(int* nums, int numsSize, int** queries, int queriesSize, int* queriesColSize) {
    // Difference array for applying range updates
    int* diff = (int*)calloc(numsSize + 1, sizeof(int));

    // Process each query to apply range decrements
    for (int i = 0; i < queriesSize; i++) {
        int li = queries[i][0];
        int ri = queries[i][1];
        diff[li]++;
        if (ri + 1 < numsSize) {
            diff[ri + 1]--;
        }
    }

    // Apply the difference array to calculate decrements
    int* decrements = (int*)calloc(numsSize, sizeof(int));
    int currDecrement = 0;
    for (int i = 0; i < numsSize; i++) {
        currDecrement += diff[i];
        decrements[i] = currDecrement;
    }

    // Check if decrements meet or exceed the required values in nums
    for (int i = 0; i < numsSize; i++) {
        if (decrements[i] < nums[i]) {
            free(diff);
            free(decrements);
            return false;
        }
    }

    free(diff);
    free(decrements);
    return true;
}




",1454831118
Ashwini D M,4MC22CS019,429,3643,c,"#include <stdbool.h>
#include <stdlib.h>
#include <string.h>

bool isValid(int* nums, int numsSize, int** queries, int k, int* queriesColSize) {
    int* diff = (int*)calloc(numsSize + 1, sizeof(int)); // Difference array

    // Apply the first k queries
    for (int i = 0; i < k; i++) {
        int li = queries[i][0];
        int ri = queries[i][1];
        int val = queries[i][2];
        diff[li] -= val;
        if (ri + 1 < numsSize) {
            diff[ri + 1] += val;
        }
    }

    // Apply the difference array and validate the nums array
    int currDecrement = 0;
    bool isZero = true;
    for (int i = 0; i < numsSize; i++) {
        currDecrement += diff[i];
        if (nums[i] + currDecrement > 0) {
            isZero = false;
            break;
        }
    }

    free(diff);
    return isZero;
}

int minZeroArray(int* nums, int numsSize, int** queries, int queriesSize, int* queriesColSize) {
    int left = 0, right = queriesSize;
    int result = -1;

    // Binary search to find the minimum k
    while (left <= right) {
        int mid = left + (right - left) / 2;
        if (isValid(nums, numsSize, queries, mid, queriesColSize)) {
            result = mid;
            right = mid - 1; // Try smaller values of k
        } else {
            left = mid + 1; // Increase k
        }
    }

    return result;
}
",1454837770
Shashank Sharma,ShashankZobb,431,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int ans = 0, n = nums.size();
        int temp = 0, temp1 = 0;
        for(int i:nums)temp += i;
        for(int i=0;i<n;i++){
            temp -= nums[i];
            temp1 += nums[i];
            if(nums[i] == 0){
                if(temp == temp1)ans += 2;
                else if(abs(temp-temp1) == 1)ans++;
            }
        }
        return ans;
    }
};",1454807148
Shashank Sharma,ShashankZobb,431,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& qu) {
        int n = nums.size();
        vector<int>arr(n+1, 0);
        for(vector<int> &i:qu){
            arr[i[0]] += 1;
            arr[i[1]+1] -= 1;
        }
        for(int i=1;i<=n;i++)arr[i] += arr[i-1];
        for(int i=0;i<n;i++){
            if(nums[i] > arr[i])return false;
        }
        return true;
    }
};",1454813196
Shashank Sharma,ShashankZobb,431,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& q) {
        int t1 = 0, t2 = q.size()-1;
        int n = nums.size();
        int ans = -1;
        int f = 1;
        for(int i:nums){
            if(i != 0)f = 0;
        }
        if(f == 1)return 0;
        while(t1 <= t2){
            int mid = (t1+t2)/2;
            vector<long>arr(n+1, 0);
            for(int i=0;i<=mid;i++){
                arr[q[i][0]] += q[i][2];
                arr[q[i][1]+1] -= q[i][2];
            }
            for(int i=1;i<=n;i++)arr[i] += arr[i-1];
            int f = 1;
            for(int i=0;i<n;i++){
                // cout << arr[i] << ' ';
                if(nums[i] > arr[i])f = 0;
            }
            // cout << '\n';
            if(f == 1){
                ans = mid+1;
                t2 = mid-1;
            }
            else{
                t1 = mid+1;
            }
        }
        return ans;
    }
};",1454823307
monoidalcat,monoidalcat,432,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        idx = [j for j,i in enumerate(nums) if i == 0]

        res = 0
        prefix = [0]
        for i in nums:
            prefix.append(i+prefix[-1])

        for i in idx:
            if prefix[i+1] == prefix[-1]-prefix[i+1]:
                res+=2
            elif prefix[i+1] == prefix[-1]-prefix[i+1] +1:
                res +=1
            elif prefix[i+1] == prefix[-1]-prefix[i+1] -1:
                res+=1
        return res",1454809440
monoidalcat,monoidalcat,432,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        dp = [0]*len(nums)
        for i in queries:
            
            dp[i[0]] = dp[i[0]]+1
            if i[1]+1<len(dp):
                dp[i[1]+1] = dp[i[1]+1]-1

        prefix = [0]
        for i in dp:
            prefix.append(prefix[-1]+i)
        for j in range(len(nums)):
            if prefix[j+1]< nums[j]:
                return False
        return True",1454817199
monoidalcat,monoidalcat,432,3643,python3,"class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        def isOK(mid):
            dp = [0]*len(nums)
            for i in queries[:mid]:
                for _ in range(i[2]):
                    dp[i[0]] = dp[i[0]]+1
                    if i[1]+1<len(dp):
                        dp[i[1]+1] = dp[i[1]+1]-1
            prefix = [0]
            for i in dp:
                prefix.append(prefix[-1]+i)
            for j in range(len(nums)):
                if prefix[j+1]< nums[j]:
                    return False
            return True

        l = 0
        r = len(queries)

        if not isOK(r):
            return -1

        while l<r-1:
            mid = (l+r)//2
            if isOK(mid):
                r = mid
            else:
                l = mid

        if isOK(l):
            return l
        return r",1454823314
mustafiz05,mustafiz05,433,3616,cpp,"typedef int ll;
class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        
        
        ll total  = 0;
        for(ll i = 0; i < nums.size(); i++) {
            
            if(nums[i] != 0) continue;
            
            
            vector<int> newOne;
            for(ll j = 0; j < nums.size(); j++) newOne.push_back(nums[j]);
            ll currentDir = 0; // left
            ll pos = i - 1;
            while(pos >= 0 && pos < nums.size()) {
                if(newOne[pos] == 0 && currentDir == 0) {
                    pos--;
                }
                else if(newOne[pos] == 0 && currentDir == 1) {
                    pos++;
                }
                else if(currentDir == 0) {
                    newOne[pos]--;
                    pos++;
                    currentDir = 1;
                }
                else {
                    newOne[pos]--;
                    pos--;
                    currentDir = 0;
                }  
            }
            
            ll isIt = 0;
            for(ll j = 0; j < nums.size(); j++) if(newOne[j] >= 1) isIt = 1;
            
            if(isIt == 0) total++;
            
            
            
            for(ll j = 0; j < nums.size(); j++) newOne[j] = (nums[j]);
             currentDir = 1; // left
             pos = i + 1;
            while(pos >= 0 && pos < nums.size()) {
                if(newOne[pos] == 0 && currentDir == 0) {
                    pos--;
                }
                else if(newOne[pos] == 0 && currentDir == 1) {
                    pos++;
                }
                else if(currentDir == 0) {
                    newOne[pos]--;
                    pos++;
                    currentDir = 1;
                }
                else {
                    newOne[pos]--;
                    pos--;
                    currentDir = 0;
                }  
            }
            
             isIt = 0;
            for(ll j = 0; j < nums.size(); j++) if(newOne[j] >= 1) isIt = 1;
            
            if(isIt == 0) total++;
            
            
            
            
            
            
            
        }
        
        return total;
        
    }
};",1454816695
mustafiz05,mustafiz05,433,3639,cpp,"typedef int ll;
ll Csum[100009];
class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        
        for(ll i = 0; i < queries.size(); i++) {
            ll last = queries[i][1];
            ll fast = queries[i][0];
            Csum[last]+=1;
            if(fast > 0) Csum[fast - 1]-=1;
        }
        
        ll currentSum =  0;
        bool isPossible = true;
        for(ll i = nums.size() - 1; i >= 0; i--) {
            currentSum+=Csum[i];
            Csum[i] = 0;
            if(nums[i] > currentSum) isPossible = false;
        }
        
        
        return isPossible;
        
        
        
        
        
        
        
    }
};",1454827611
mustafiz05,mustafiz05,433,3643,cpp,"typedef int ll;
ll Csum[100009];
class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        
        
        ll lo = 0, hi = queries.size(), anss = queries.size() + 3;
        
        while(lo <= hi) {
            ll mid = (lo + hi)/2;
            
               for(ll i = 0; i < mid; i++) {
            ll last = queries[i][1];
            ll fast = queries[i][0];
            ll value =  queries[i][2]; 
            Csum[last]+=value;
            if(fast > 0) Csum[fast - 1]-=value;
        }
        
        ll currentSum =  0;
        bool isPossible = true;
        for(ll i = nums.size() - 1; i >= 0; i--) {
            currentSum+=Csum[i];
            Csum[i] = 0;
            if(nums[i] > currentSum) isPossible = false;
        }
            
            
            if(isPossible) hi = mid - 1, anss = min(anss, mid);
            else lo = mid + 1;
            
        }
        
        
        if(anss <= queries.size()) return anss;
        else return -1;
        
        
        
        
        
        
        
        
        
    }
};",1454837916
liyangzi6p626,liyangzi6p626,434,3616,java,"class Solution {
    void print(int[] a) {
        for (int x : a)
            System.out.printf("" %d"", x);
        System.out.println();
    }
    public int countValidSelections(int[] nums) {
        int n = nums.length, ans = 0;
        for (int i = 0; i < n; i++) {
            if (nums[i] != 0)
                continue;
            for (int j = -1; j <= 1; j += 2) {
                int[] a = new int[n];
                for (int k = 0; k < n; k++)
                    a[k] = nums[k];
                int p = i, d = j, c0 = 0;
                for (int x : a)
                    if (x == 0)
                        c0++;
                while (p >= 0 && p < n && c0 < n) {
                    if (a[p] > 0) {
                        a[p]--;
                        if (a[p] == 0)
                            c0++;
                        d = -d;
                    }
                    p += d;
                    //System.out.printf(""p = %d, d = %d, c0 = %d\n"", p, d, c0);
                    //print(a);
                }
                if (c0 == n)
                    ans++;
            }
        }
        return ans;
    }
}",1454818039
liyangzi6p626,liyangzi6p626,434,3639,java,"class Solution {
    public boolean isZeroArray(int[] nums, int[][] qs) {
        PriorityQueue<int[]> pq = new PriorityQueue<>((x, y) -> Integer.compare(x[0], y[0]));
        for (int[] q : qs) {
            int l = q[0], r = q[1];
            pq.add(new int[]{l, 1});
            pq.add(new int[]{r + 1, -1});
        }
        int b = 0;
        for (int i = 0; i < nums.length; i++) {
            while (!pq.isEmpty() && pq.peek()[0] <= i)
                b += pq.poll()[1];
            if (b < nums[i])
                return false;
        }
        return true;
    }
}",1454827132
liyangzi6p626,liyangzi6p626,434,3643,java,"class Solution {
    class STNode {
        long from, mid, to;
        STNode left, right;
        long maxVal;
        //parent marks have higher priority than children marks
        boolean setFlag;
        long setVal, incVal;
        STNode(long from, long to) {
            this.from = from;
            this.to = to;
            mid = from + (to - from) / 2;
            left = null;
            right = null;
            maxVal = 0;
            setFlag = false;
        }
        //for each modifying operation, it should be guarded by a pair of push and merge
        //push to clear the marks for the current node
        void push() {
            if (from == to) {
                if (setFlag) {
                    maxVal = setVal;
                    setFlag = false;
                }
                if (incVal != 0) {
                    maxVal += incVal;
                    incVal = 0;
                }
            } else {
                if (left == null)
                    left = new STNode(from, mid);
                if (right == null)
                    right = new STNode(mid + 1, to);
                if (setFlag) {
                    left.setFlag = true;
                    left.setVal = setVal;
                    left.incVal = 0;
                    right.setFlag = true;
                    right.setVal = setVal;
                    right.incVal = 0;
                    setFlag = false;
                }
                if (incVal != 0) {
                    left.incVal += incVal;
                    right.incVal += incVal;
                    incVal = 0;
                }
            }
        }
        //merge to keep data up-to-date
        void merge() {
            if (from < to) {
                long leftMax = (left.setFlag ? left.setVal : left.maxVal) + left.incVal;
                long rightMax = (right.setFlag ? right.setVal : right.maxVal) + right.incVal;
                maxVal = Math.max(leftMax, rightMax);
            }
        }
        void set(long p, long q, long val) {
            push();
            if (from == p && to == q) {
                setFlag = true;
                setVal = val;
                incVal = 0;
            } else {
                if (q <= mid)
                    left.set(p, q, val);
                else if (p > mid)
                    right.set(p, q, val);
                else {
                    left.set(p, mid, val);
                    right.set(mid + 1, q, val);
                }
            }
            merge();
        }
        void inc(long p, long q, long val) {
            push();
            if (from == p && to == q)
                incVal += val;
            else {
                if (q <= mid)
                    left.inc(p, q, val);
                else if (p > mid)
                    right.inc(p, q, val);
                else {
                    left.inc(p, mid, val);
                    right.inc(mid + 1, q, val);
                }
            }
            merge();
        }
        long max(long p, long q) {
            push();
            merge();
            if (from == p && to == q)
                return maxVal;
            else if (q <= mid)
                return left.max(p, q);
            else if (p > mid)
                return right.max(p, q);
            else
                return Math.max(left.max(p, mid), right.max(mid + 1, q));
        }
    }
    public int minZeroArray(int[] nums, int[][] qs) {
        int n = nums.length;
        STNode root = new STNode(0, n - 1);
        for (int i = 0; i < n; i++)
            root.set(i, i, nums[i]);
        if (root.max(0, n - 1) == 0)
            return 0;
        for (int i = 0; i < qs.length; i++) {
            root.inc(qs[i][0], qs[i][1], -qs[i][2]);
            if (root.max(0, n - 1) <= 0)
                return i + 1;
        }
        return -1;
    }
}",1454837978
wswatch,wswatch,435,3616,java,"class Solution {
    public int countValidSelections(int[] nums) {
        int res = 0;
        for(int i = 0; i < nums.length; ++i) {
            if (isValid(i, 1, nums)) {
                ++res;
            } 
            if (isValid(i, -1, nums)) {
                ++res;
            }
        }
        return res;
    }

    private boolean isValid(int st, int dir, int[] nums) {
        int[] road = nums.clone();
        if (road[st] != 0) {
            return false;
        } else {
            int cur = st;
            while(cur > -1 && cur < nums.length) {
                if (road[cur] > 0) {
                    road[cur] -= 1;
                    dir = -dir;
                }
                cur = cur + dir;
            }
            for(int i = 0; i < road.length; ++i) {
                if (road[i] > 0) {
                    return false;
                }
            }
            return true;
        }
    }
}",1454816012
wswatch,wswatch,435,3639,java,"class Solution {
    public boolean isZeroArray(int[] nums, int[][] queries) {
        int len = nums.length;
        int[] increase = new int[len];
        int[] decrease = new int[len];
        for(int[] query: queries) {
            increase[query[0]] += 1;
            decrease[query[1]] += 1;
        }
        int curMax = 0;
        for(int i = 0; i < nums.length; ++i) {
            curMax += increase[i];
            if (curMax < nums[i]) {
                return false;
            }
            curMax -= decrease[i];
        }
        return true;
    }
}",1454827993
wswatch,wswatch,435,3643,java,"class Solution {
    public int minZeroArray(int[] nums, int[][] queries) {
        int l = 0;
        int r = queries.length;
        int res = -1;
        while(l <= r) {
            int mid = (l + r) / 2;
            if (isZeroArray(nums, queries, mid)) {
                res = mid;
                r = mid - 1;
            } else {
                l = mid + 1;
            }
        }
        return res;
    }

    public boolean isZeroArray(int[] nums, int[][] queries, int n) {
        int len = nums.length;
        int[] increase = new int[len];
        int[] decrease = new int[len];
        for(int i = 0; i < n; ++i) {
            int[] query = queries[i];
            increase[query[0]] += query[2];
            decrease[query[1]] += query[2];
        }
        int curMax = 0;
        for(int i = 0; i < nums.length; ++i) {
            curMax += increase[i];
            if (curMax < nums[i]) {
                return false;
            }
            curMax -= decrease[i];
        }
        return true;
    }
}",1454838050
0xessam,0xessam,436,3616,cpp,"class Solution {
public:
    bool f (vector<int>a , int idx , int dir) {
        while(idx >= 0 && idx < a.size()) {
            if (a[idx] > 0) {
                a[idx]-- ; 
                dir*=-1;  
            }
            idx += dir ; 
        }
        return count(a.begin() , a.end() , 0) == a.size() ; 
    } 
    int countValidSelections(vector<int>& nums) {
        int ret = 0 ; 
        for(int i = 0 ; i < nums.size() ; ++i) {
            if (nums[i] == 0) {
                ret += f(nums , i + 1 , 1) ; 
                ret += f(nums , i - 1 , -1) ; 
            }
        }
        return ret;  
    }
};",1454809878
0xessam,0xessam,436,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size() ;
        int m = queries.size() ;
        vector<int> pref(n + 5) ;
        for(auto i : queries) {
            pref[i[0]] ++  ;
            pref[i[1] + 1] --;
        }
        for (int i = 1; i < n ; ++i) {
            pref[i] += pref[i - 1] ;
        }
        for(int i = 0 ; i < n ; ++i) {
            if (pref[i] < nums[i]) {
                return false ;
            }
        }
        return true ;
    }
};",1454816185
0xessam,0xessam,436,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size() ;
        int m = queries.size() ;
        vector<int> pref(n + 5) ;

        int l = 0 , r = m ;
        while (l <= r) {
            int mid = (l + r) / 2 ;
            bool ok = 1 ;
            pref.assign(n + 5, 0) ;
            for (int i = 0 ; i < mid ; ++i) {
                pref[queries[i][0]] += queries[i][2] ;
                pref[queries[i][1] + 1] -= queries[i][2] ;
            }
            for (int i = 0 ; i < n ; ++i) {
                if (i)
                pref[i] += pref[i - 1] ;
                if (pref[i] < nums[i]) {
                    ok = 0 ;
                    break ;
                }
            }
            if (ok) {
                r = mid - 1 ;
            }
            else {
                l = mid + 1 ;
            }
        }
        pref.assign(n + 5, 0) ;
        for (int i = 0 ; i < m ; ++i) {
            pref[queries[i][0]] += queries[i][2] ;
            pref[queries[i][1] + 1] -= queries[i][2] ;
        }
        for (int i = 0 ; i < n ; ++i) {
            if (i)
            pref[i] += pref[i - 1] ;
            if (pref[i] < nums[i]) {
                return -1 ;
            }
        }

        return l ;
    }
};",1454838118
Ashua,Night_shade_ii,437,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        n = len(nums)
        
        def check_validness(arr, idx, reverse):
            # print('start:',arr,idx)
            arr = copy.copy(arr)
            flag = True
            if reverse:
                arr = arr[::-1]
                idx = n - 1 - idx
            step = 1
            while 0<=idx<n:
                # print('step',arr,idx,arr[idx])
                if arr[idx] == 0:
                    idx += step
                else:
                    arr[idx] -= 1
                    step *= -1
                    idx += step
            return sum(arr) ==0
        
        cnt = 0
        for i in range(n):
            if(nums[i]!=0):
                continue
            if check_validness(nums,i,True):
                cnt += 1
            if check_validness(nums,i,False):
                cnt += 1
        return cnt
                
            
    
        ",1454812360
Ashua,Night_shade_ii,437,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        n = len(nums)
        
        def check_validness(k):
            
            diffArr = [0] * (n+1)
            for (l,r) in queries[:k]:
                diffArr[r+1] -= 1
                diffArr[l] += 1
            curSum = 0
            # print(k,diffArr)
            for i in range(n):
                curSum += diffArr[i]
                if curSum < nums[i]:
                    return False
            return True
        
        l = 0
        r = len(queries)
        return check_validness(r)
            ",1454830795
Ashua,Night_shade_ii,437,3643,python3,"# let us say if we fix k
# can we validate in O(n) time?
# 差分数组?
# b[i] = ai - a{i-1} (n>0) and a0 (n=0)
class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        n = len(nums)
        
        def check_validness(k):
            
            diffArr = [0] * (n+1)
            for (l,r,val) in queries[:k]:
                diffArr[r+1] -= val
                diffArr[l] += val
            curSum = 0
            # print(k,diffArr)
            for i in range(n):
                curSum += diffArr[i]
                if curSum < nums[i]:
                    return False
            return True
        
        l = 0
        r = len(queries)
        if not check_validness(r):
            return -1
        while l < r:
            mid = (l+r)//2
            if check_validness(mid):
                r = mid
            else:
                l = mid + 1
        return l
            
            
        ",1454829012
contest_taker_2134,contest_taker_2134,438,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int ans = 0;
        int n = nums.size();
        for (int i = 0; i < n; ++i) {
            if (nums[i] == 0 && simulate(nums, i, 1)) ++ans; 
            if (nums[i] == 0 && simulate(nums, i, -1)) ++ans; 
        }
        return ans;
    }

    bool simulate(vector<int> nums, int i, int dir) {
        int n = nums.size();
        while (i >= 0 && i < n) {
            if (nums[i] == 0) i += dir;
            else {
                --nums[i];
                dir = -dir;
                i += dir;
            }
        }
        for (int j : nums) if (j != 0) return false;
        return true;
    }
};",1454809560
contest_taker_2134,contest_taker_2134,438,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        vector<int> v(n+1, 0);
        for (auto& q : queries) {
            --v[q[0]];
            if (q[1] + 1 < n) ++v[q[1] + 1]; // in case i mess up lol
        }
        int cur = 0;
        for (int i = 0; i < n; ++i) {
            cur += v[i];
            if (nums[i] + cur > 0) return false;
        }
        return true;
    }
};",1454817874
contest_taker_2134,contest_taker_2134,438,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        int q = queries.size();
        vector<int> v(n + 1, 0);

        int left = 0;
        int right = q;
        int mid;
        int ans = INT_MAX;
        while (left <= right) {
            mid = left + (right - left) / 2;
            if (helper(mid, nums, queries, v)) {
                ans = min(ans, mid);
                right = mid - 1;
            } else left = mid + 1;
        }
        return ans == INT_MAX ? -1 : ans;
    }

    bool helper(int mid, vector<int>& nums, vector<vector<int>>& queries, vector<int>& v) {
        fill(v.begin(), v.end(), 0); // reset
        int n = nums.size();
        for (int i = 0; i < mid; ++i) {
            v[queries[i][0]] -= queries[i][2];
            if (queries[i][1] + 1 < n) v[queries[i][1] + 1] += queries[i][2];
        }
        int cur = 0;
        for (int i = 0; i < n; ++i) {
            cur += v[i];
            if (nums[i] + cur > 0) return false;
        }
        return true;
    }
};",1454838250
James Jialun Zhao,frixxxer,441,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        choices = 0
        ct_0 = nums.count(0)

        def simulate(arr, i, dir, ct_z):
            start = i
            
            while i >= 0 and i < len(arr):
                if arr[i] == 0:
                    i += dir
                elif arr[i] > 0:
                    arr[i] -= 1
                    if arr[i] == 0:
                        ct_z += 1
                    dir *= -1
                    i += dir
                else:
                    return False
            return ct_z == len(arr)
                
        for start in range(len(nums)):
            if nums[start] != 0:
                continue
            sim_1 = simulate(nums.copy(), start, 1, ct_0)
            sim_n1 = simulate(nums.copy(), start, -1, ct_0)
            choices += sim_1 + sim_n1
        return choices",1454814038
James Jialun Zhao,frixxxer,441,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        prefix = [0] * (len(nums) + 1)
        # [0 0 0 0]
        for a, b in queries:
            prefix[b + 1] += 1
            prefix[a] -= 1

        v = 0
        for i in range(len(nums)):
            v += prefix[-i-1]
            if v < nums[-i-1]:
                return False
        return True",1454825915
James Jialun Zhao,frixxxer,441,3643,python3,"class Solution:
    def solve(self, nums, queries, k):
        prefix = [0] * (len(nums) + 1)
        # [0 0 0 0]
        for a, b, v in queries[:k]:
            prefix[b + 1] += v
            prefix[a] -= v
        v = 0
        for i in range(len(nums)):
            v += prefix[-i-1]
            if v < nums[-i-1]:
                return False
        return True
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        lo, hi = 0, len(queries) + 1
        while lo < hi:
            mid = (lo + hi) // 2
            sol = self.solve(nums, queries, mid)
            if not sol:
                lo = mid + 1
            else:
                hi = mid
        return lo if lo <= len(queries) else -1",1454838325
boxlesscat,boxlesscat,444,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        const int size = nums.size();
        int ans = 0;
        vector<int> pfx(size + 1);
        vector<int> sfx(size + 1);
        for (int i = 0; i < size; ++i)
            pfx[i + 1] = pfx[i] + nums[i];
        for (int i = size - 1; i >= 0; --i)
            sfx[i] = sfx[i + 1] + nums[i];
        for (int i = 0; i < size; ++i)
            if (!nums[i] and abs(pfx[i] - sfx[i + 1]) == 1)
                ++ans;
            else if (!nums[i] and pfx[i] == sfx[i + 1])
                ans += 2;
        return ans;
    }
};",1454812191
boxlesscat,boxlesscat,444,3639,cpp,"using ll = long long;

class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        const int size = nums.size();
        vector<ll> sums(size + 1);
        for (auto& q: queries) {
            int l = q[0];
            int r = q[1];
            --sums[l];
            ++sums[r + 1];
        }
        for (int i = 1; i < size; ++i)
            sums[i] += sums[i - 1];
        for (int i = 0; i < size; ++i)
            if (sums[i] + nums[i] > 0)
                return false;
        return true;
    }
};",1454818137
boxlesscat,boxlesscat,444,3643,cpp,"using ll = long long;

class Solution {

    vector<vector<int>> queries;
    vector<int> nums;

    bool can(int k) {
        const int size = nums.size();
        vector<ll> sums(size + 1);
        for (int i = 0; i < k; ++i) {
            int l = queries[i][0];
            int r = queries[i][1];
            int val = queries[i][2];
            sums[l] -= val;
            sums[r + 1] += val;
        }
        for (int i = 1; i < size; ++i)
            sums[i] += sums[i - 1];
        for (int i = 0; i < size; ++i)
            if (sums[i] + nums[i] > 0)
                return false;
        return true;
    }

public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        const int q = queries.size();
        ll lo = 0;
        ll hi = q + 1;
        Solution::queries = move(queries);
        Solution::nums = move(nums);
        while (lo < hi) {
            ll md = lo + hi >> 1;
            if (can(md))
                hi = md;
            else
                lo = md + 1;
        }
        if (lo == q + 1)
            return -1;
        return lo;
    }
};",1454830956
CyberPunk,U_U,447,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {

      //  cout << Move(1, -1, nums) << endl;
      //  cout << Move(1, 1, nums) << endl;
       // return 0;
        
        int res = 0;
        for (int i = 0; i < nums.size(); ++i)
            {
                if (nums[i] == 0)
                {
                    vector<int> temp = nums;
                    if (Move(i, 1, temp))
                    {
                       // cout << i << "","" << i << endl;
                        ++res;
                    }
                    if (Move(i, -1, temp))
                    {
                        ++res;
                       // cout << i << "","" << -1 << endl;
                    }
                }
            }

        return res;
    }

    bool Move(int cur, int d, vector<int> temp)
    {
        int nonZero = 0;
        for(auto& item : temp)
            if (item > 0) nonZero++;
        
        for (; cur >= 0 && cur < temp.size(); )
            {
                if (temp[cur] == 0)
                {
                    cur += d;
                }
                else if (temp[cur] > 0)
                {
                    --temp[cur];
                    if (temp[cur] == 0) --nonZero;
                    if (d == 1) d = -1;
                            else d = 1;
                    cur += d;
                }
            }

        return nonZero == 0;
    }
};",1454813909
CyberPunk,U_U,447,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        vector<int> vec(n, 0);
        vec.push_back(0);

        for (auto& q : queries)
            {
                vec[q[0]] += 1;
                vec[q[1] + 1] -= 1;
            }

        int sum = 0;
        for (int i = 0; i < n; ++i)
            {
                sum += vec[i];
                //cout << i << "","" << sum << endl;
                if (sum < nums[i]) return false;
            }

        return true;
    }
};",1454818202
CyberPunk,U_U,447,3643,cpp,"class Solution {
public:
    int n, m;;
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        n = nums.size();
        m = queries.size();

        int lo = 0;
        int hi = m;
        vector<int> vec(n + 1, 0);
        while (lo < hi)
        {
            int mid = lo + (hi - lo) / 2;

           bool flag = Verify(vec, queries, nums, mid);
            //cout << mid << "","" << flag << endl;

            if (flag) hi = mid;
            else lo = mid + 1;
        }

        if (Verify(vec, queries, nums, lo)) return lo;
        return -1;
    }

    bool Verify(vector<int>& vec, vector< vector<int> > & queries, vector<int>& nums, int k)
    {
         vec.assign(n + 1, 0);
        for (int i = 0; i < k; ++i)            
            {
                vector<int>& q = queries[i];
                vec[q[0]] += q[2];
                vec[q[1] + 1] -= q[2];            
            }
            
            int sum = 0;
            for (int i = 0; i < n; ++i)
            {
                sum += vec[i];   
//                cout << k << "","" << i << "","" << sum << ""|"" << vec[i] << "","" << nums[i] << endl;
                if (sum < nums[i]) 
                {
                    return false;
                }
            }

        return true;
    }
};",1454831004
Pankaj Ghodla,PankajGhodla,448,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        total = sum(nums)
        ans = 0
        prefix = 0
        for i, num in enumerate(nums):
            prefix += num
            if num == 0:
                if total - prefix == prefix: ans += 2
                if total - prefix in [prefix+1, prefix-1]: ans += 1
                
        return ans",1454810987
Pankaj Ghodla,PankajGhodla,448,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        n = len(nums)
        arr = [0]*(n+1)
        for l, r in queries:
            arr[l] += 1
            arr[r+1] -= 1
        prev = 0
        for i in range(len(nums)):
            prev += arr[i]
            if prev < nums[i]:
                return False
        return True
            
        ",1454816663
Pankaj Ghodla,PankajGhodla,448,3643,python3,"class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        def canAchieve(m):
            n = len(nums)
            arr = [0]*(n+1)
            for i in range(m):
                l, r, val = queries[i]
                arr[l] += val
                arr[r+1] -= val
            prev = 0
            for i in range(len(nums)):
                prev += arr[i]
                if prev < nums[i]:
                    return False
            return True
        if not canAchieve(len(queries)): return -1
        if sum(nums) == 0: return 0
        l = 1
        r = len(queries)
        while l < r:
            m = (l+r)//2
            if canAchieve(m):
                r = m
            else:
                l = m+1
        return l",1454823839
D V Sushmanth Reddy,user2937Vz,450,3616,python3,"class Solution:
    def countValidSelections(self, a: List[int]) -> int:
        
        n = len(a)
        total , s , ans = sum(a) , 0 , 0
        for x in a:
            s += x
            if(x == 0):
                if(s == (total - s)):
                    ans += 2
                elif(abs(s - (total - s)) == 1):
                    ans += 1
        
        return ans
        ",1454808565
D V Sushmanth Reddy,user2937Vz,450,3639,python3,"class Solution:
    def isZeroArray(self, a: List[int], queries: List[List[int]]) -> bool:
        
        n = len(a)
        diff = [0 for i in range(n + 1)]
        for [l , r] in queries:
            diff[r + 1] -= 1
            diff[l] += 1
        
        for i in range(1 , n + 1):
            diff[i] += diff[i - 1]
        
        for i in range(n):
            if(diff[i] < a[i]):
                return False
        
        return True
        ",1454816223
D V Sushmanth Reddy,user2937Vz,450,3643,python3,"class Solution:
    def minZeroArray(self, a: List[int], queries: List[List[int]]) -> int:
        
        n = len(a)
        def check(x):
            
            diff = [0 for i in range(n + 1)]
            for i in range(x):
                l , r , val = queries[i]
                diff[l] += val
                diff[r + 1] -= val
            
            for i in range(1 , n + 1):
                diff[i] += diff[i - 1]
            
            for i in range(n):
                if(diff[i] < a[i]):
                    return False
            
            return True
        
        
        ans = -1
        l , h = 0 , len(queries)
        while(l <= h):
            mid = (l + h) // 2
            if(check(mid)):
                ans = mid
                h = mid - 1
            else:
                l = mid + 1
        
        
        return ans
        ",1454823848
SoulAdor,SoulAdor,451,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int sum = accumulate(nums.begin(), nums.end(), 0);
        int result = 0, left_sum = 0, right_sum;
        for(int n : nums) {
            if(n == 0) {
                right_sum = sum - left_sum;
                if(left_sum == right_sum) result += 2;
                else if(abs(left_sum - right_sum) == 1) result++;
            }
            left_sum += n;
        }
        return result;
    }
};",1454810394
SoulAdor,SoulAdor,451,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        vector<int> diff(nums.size() + 1);
        for(auto q: queries) diff[q[0]]++, diff[q[1]+1]--;
        for(int i = 1; i < diff.size(); i++) diff[i] += diff[i-1];
        
        for(int i = 0; i < nums.size(); i++) if(nums[i] > diff[i]) return false;
        return true;
    }
};",1454817270
SoulAdor,SoulAdor,451,3643,cpp,"class Solution {
    bool canZero(vector<int>& nums, vector<vector<int>>& queries, int taken) {
        vector<int> diff(nums.size() + 1);
        for(int i = 0; i < taken; i++) {
            int l = queries[i][0];
            int r = queries[i][1];
            int val = queries[i][2];
            diff[l]+=val;
            diff[r+1]-=val;
        }
        for(int i = 1; i < diff.size(); i++) diff[i] += diff[i-1];

        for(int i = 0; i < nums.size(); i++) if(nums[i] > diff[i]) return false;
        return true;
    }

public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int l = 0, r = queries.size(), m;
        while(l < r) {
            m = (l + r) / 2;
            if(canZero(nums, queries, m)) r = m;
            else l = m + 1;
        }
        if(canZero(nums, queries, l)) return l;
        return -1;
    }
};",1454831028
Ayush Gupta,ayush_gupta4,452,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int n = nums.size(), validSelections = 0;

        auto simulate = [&](int start, int direction) {
            vector<int> temp = nums;
            int curr = start;

            while (curr >= 0 && curr < n) {
                if (temp[curr] == 0) {
                    curr += direction;
                } else {
                    temp[curr]--;
                    direction = -direction;
                    curr += direction;
                }
            }
            return all_of(temp.begin(), temp.end(), [](int x) { return x == 0; });
        };

        for (int i = 0; i < n; ++i) {
            if (nums[i] == 0) {
                if (simulate(i, -1)) validSelections++;
                if (simulate(i, 1)) validSelections++;
            }
        }

        return validSelections;
    }
};
",1454808418
Ayush Gupta,ayush_gupta4,452,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& a, vector<vector<int>>& q) {
        int i, n=a.size();
        vector<int> dp(n+1, 0);
        for(auto x: q) {
            int lo=x[0], hi=x[1];
            dp[lo]++; dp[hi+1]--;
        }
        for(i=1;i<=n;i++) dp[i]+=dp[i-1];
        for(i=0;i<n;i++) {
            if(dp[i]<a[i]) return 0;
        }
        return 1;
    }
};",1454820575
Ayush Gupta,ayush_gupta4,452,3643,cpp,"class Solution {
public:
    // Helper function to check if the first `mid` queries can make `a` a Zero Array
    bool f(vector<int>& a, vector<vector<int>>& q, int mid) {
        int n = a.size();
        vector<int> dp(n + 1, 0); // Difference array to simulate range decrement operations
        
        // Apply the first `mid` queries
        for (int i = 0; i < mid; i++) {
            int lo = q[i][0], hi = q[i][1], val = q[i][2];
            dp[lo] += val;       // Add `val` at the start index
            if (hi + 1 < n) {
                dp[hi + 1] -= val; // Subtract `val` at the end+1 index
            }
        }

        // Propagate the effect of the difference array
        for (int i = 1; i < n; i++) {
            dp[i] += dp[i - 1];
        }

        // Check if `dp` satisfies the condition for making the array zero
        for (int i = 0; i < n; i++) {
            if (dp[i] < a[i]) return false; // Not enough decrements possible
        }
        return true;
    }

    // Main function to find the minimum `k`
    int minZeroArray(vector<int>& a, vector<vector<int>>& q) {
        int n = q.size(), lo = 0, hi = n, mid, ans = -1;

        while (lo <= hi) {
            mid = lo + (hi - lo) / 2;

            if (f(a, q, mid)) {
                ans = mid;  // Update the answer to the current valid `mid`
                hi = mid - 1; // Try for a smaller `k`
            } else {
                lo = mid + 1; // Try for a larger `k`
            }
        }

        return ans;
    }
};
",1454838548
5saken,5saken,453,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int res = 0,n=nums.size();
        vector<int> pre(n);
        pre[0] = nums[0];
        for(int i=1;i<n;i++) pre[i] = pre[i-1]+nums[i];
        for(int i=0;i<n;i++){
            // cout << pre[i] << "" "";
            if(nums[i]!=0) continue;
            int l=0,r=0;
            l = pre[i];
            r = pre[n-1] - pre[i];
            // cout << i<<""->""<<l << "" "" << r << endl;
            if(l==r) res += 2;
            if(abs(r-l)==1) res++;
        }
        return res;
    }
};",1454814885
5saken,5saken,453,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        vector<int> v(n);
        for(auto q: queries){
            int l=q[0], r = q[1];
            v[l]++;
            if(r+1<n) v[r+1]--;
        }
        for(int i=1;i<n;i++) v[i] += v[i-1];
        for(int i=0;i<n;i++) {
            // cout << v[i] << "" "";
            if(v[i] >= nums[i]) continue;
            return false;
        }
        return true;
    }
};",1454823396
5saken,5saken,453,3643,cpp,"class Solution {
public:
    
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        vector<int> v = nums;

        auto can = [&](int k){
            int n = nums.size();
            vector<int> diff(n + 1, 0);
            
            for (int i = 0; i < k; ++i) {
                int l = queries[i][0], r = queries[i][1], val = queries[i][2];
                diff[l] += val;
                if (r+1<n) diff[r + 1] -= val;
            }
            
            int total = 0;
            for (int i = 0; i < n; ++i) {
                total += diff[i];
                if (total < nums[i]) return false; 
            }
            return true;
        };
        
        bool f = true;
        for(int x : nums) {
            if (x != 0) {
                f = false;
                break;
            }
        }
        if(f) return 0;
        
        int l = 0, r = queries.size(), res = -1;
        bool flag = false;

        while (l <= r) {
            int mid = l + (r-l)/2;

            if (can(mid)) {
                res = mid;
                r = mid - 1;
            } else l = mid + 1;

            if (!flag && mid == queries.size() / 2) {
                vector<int> diff(n + 1, 0);
                for (int i = 0; i < mid; ++i) {
                    int l = queries[i][0], r = queries[i][1], val = queries[i][2];
                    diff[l] += val;
                    if (r+1<n) diff[r+1] -= val;
                }

                v = nums;
                int total = 0;
                for (int i = 0; i < n; i++) {
                    total += diff[i];
                    v[i] = max(0, nums[i] - total);
                }
                flag = true;
            }
        }

        if(res==-1) return -1;
        return res;
    }
};",1454838565
Ajay Singh Deopa,singh_deopa,454,3616,cpp,"class Solution {
    bool can(vector<int> arr, int& n, int pos, int dir) {
        // cout << pos << endl;

        while (pos >= 0 && pos < n) {
            if (arr[pos] != 0) {
                arr[pos]--;
                dir *= -1;
            }

            pos += dir;
        }

        for (int& i: arr) {
            if (i > 0) {
                return false;
            }
        }

        return true;
    }
public:
    int countValidSelections(vector<int>& nums) {
        int n = (int) nums.size();
        int res = 0;

        for (int i = 0; i < n; i++) {
            if (nums[i] != 0) continue;
            
            if (can(nums, n, i, -1)) {
                res++;
            }

            if (can(nums, n, i, 1)) {
                res++;
            }
        }

        return res;
    }
};",1454813203
Ajay Singh Deopa,singh_deopa,454,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = (int) nums.size();
        vector<int> cnt(n + 1);

        for (auto& query: queries) {
            int l = query[0];
            int r = query[1];

            cnt[l]++;
            cnt[r + 1]--;
        }

        for (int i = 0; i < n; i++) {
            if (i != 0) {
                cnt[i] += cnt[i - 1];
            }

            if (cnt[i] < nums[i]) {
                return false;
            }
        }

        return true;
    }
};",1454817379
Ajay Singh Deopa,singh_deopa,454,3643,cpp,"struct STree{
    vector<int> st, lazy;

    STree(int& n) {
        int sz = ceil(log2(1.0 * n));
        sz = 1 << (sz + 1);
        st = lazy = vector<int>(sz);
    }

    int mid(int& l, int& r) {
        return l + ((r - l) >> 1);
    }

    int lchild(int& i) {
        return i << 1 | 1;
    }

    void build(vector<int>& arr, int tl, int tr, int i) {
        if (tl == tr) {
            st[i] = arr[tl];
            return;
        }

        int mi = mid(tl, tr);
        int l = lchild(i);
        build(arr, tl, mi, l);
        build(arr, mi + 1, tr, l + 1);
        st[i] = max(st[l], st[l + 1]);
    }

    void lazy_prop(int& i, int& tl, int& tr) {
        if (lazy[i] == 0) {
            return;
        }

        st[i] -= lazy[i];

        if (tl != tr) {
            int l = lchild(i);
            lazy[l] += lazy[i];
            lazy[l + 1] += lazy[i];
        }

        lazy[i] = 0;
    }

    void update(int tl, int tr, int i, int ql, int qr, int val) {
        lazy_prop(i, tl, tr);

        if (ql > qr) {
            return;
        }

        if (ql <= tl && tr <= qr) {
            lazy[i] += val;
            lazy_prop(i, tl, tr);
            return;
        }

        int mi = mid(tl, tr);
        int l = lchild(i);

        update(tl, mi, l, ql, min(qr, mi), val);
        update(mi + 1, tr, l + 1, max(ql, mi + 1), qr, val);
        st[i] = max(st[l], st[l + 1]);
    }
};

class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = (int) nums.size();
        STree* stree = new STree(n);
        stree->build(nums, 0, n - 1, 0);
        int res = 0;

        for (auto& query: queries) {
            if (stree->st[0] <= 0) {
                break;
            }

            res++;
            int l = query[0];
            int r = query[1];
            stree->update(0, n - 1, 0, l, r, query[2]);
        }

        if (stree->st[0] > 0) {
            return -1;
        }

        return res;
    }
};",1454831190
yourleetcode,yourleetcode,455,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        s = sum(nums)
        left = 0
        answer = 0
        for i in range(len(nums)):
            if nums[i]==0:
                if left==s:
                    answer+=2
                if abs(s-left)==1:
                    answer+=1
            else:
                left += nums[i]
                s -= nums[i]

        return answer
            ",1454810128
yourleetcode,yourleetcode,455,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        sub = [0]*len(nums)
        for l,r in queries:
            sub[l]-=1
            if r+1<len(nums):
                sub[r+1]+=1
        v = 0
        # print(sub)
        for i in range(len(nums)):
            v+=sub[i]
            nums[i]+=v
            # print(nums[i])
            if nums[i]>0:
                return False
        return True",1454817707
yourleetcode,yourleetcode,455,3643,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]], k) -> bool:
        sub = [0]*len(nums)
        for l,r,v in queries[:k]:
            sub[l]-=v
            if r+1<len(nums):
                sub[r+1]+=v
        v = 0
        # print(sub)
        for i in range(len(nums)):
            v+=sub[i]
            # print(nums[i])
            if nums[i]+v>0:
                return False
        return True
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        if sum(nums)==0:
            return 0
        l = 1
        r = len(queries)
        if not self.isZeroArray(nums,queries,r):
            return -1
        while l<r:
            # print(l,r)
            m = (l+r)//2
            if self.isZeroArray(nums,queries,m):
                # print(""l"",m)
                r = m
            else:
                l = m+1
        return l",1454831209
KARTHIKEYAN S,karthikeya48,456,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int n = nums.size();
        auto simu = [&](int i, int flag) -> bool {
            vector<int> t = nums;
            while (i >= 0 && i < n) {
                if (t[i] == 0) {
                    i += flag;
                } else {
                    t[i]--;
                    flag *= -1;
                    i += flag;
                }
            }
            vector<int> c(n, 0);
            return c == t;
        };
        int ans = 0;
        for (int i = 0; i < n; i++) {
            if (nums[i] == 0) {
                if (simu(i, 1)) ans++;
                if (simu(i, -1)) ans++;
            }
        }
        return ans;
    }
};
",1454815410
KARTHIKEYAN S,karthikeya48,456,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        int q = queries.size();
        
        vector<int> diff(n + 1, 0);
        
        
        for(int i = 0; i < q; i++) {
            int l = queries[i][0];
            int r = queries[i][1];
            
            diff[l]++;
            diff[r + 1]--;
        }
        
        
        for(int i = 1; i < n; i++) {
            diff[i] += diff[i - 1];
        }
        
        int f = 0;
        
        for(int i = 0; i < n; i++) {
            if(nums[i] > diff[i]) return 0;
        }
        
        return 1;
    }
};",1454822017
KARTHIKEYAN S,karthikeya48,456,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        int q = queries.size();
        
        auto ok = [&](int x) -> bool {
            vector<int> diff(n + 1, 0);
        
            for(int i = 0; i < x; i++) {
                int l = queries[i][0];
                int r = queries[i][1];
                int val = queries[i][2];

                diff[l] += val;
                diff[r + 1] -= val;
            }


            for(int i = 1; i < n; i++) {
                diff[i] += diff[i - 1];
            }

            int f = 0;

            for(int i = 0; i < n; i++) {
                if(nums[i] > diff[i]) return 0;
            }

            return 1;
        };
        
        int l = 0, r = q;
        
        int ans = -1;
        
        while(l <= r) {
            int m = (l + r) / 2;
            if(ok(m)) {
                ans = m;
                r = m - 1;
            } else {
                l = m + 1;
            }
        }
        
        return ans;
    }
};",1454831214
Adi,ahimawan,457,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int sum = 0;
        for (auto &x: nums) {
            sum += x;
        }
        int lef = 0, rig = 0, ret = 0;
        for (auto &x: nums) {
            lef += x;
            rig = sum - lef;
            if (x == 0) {
                int a = abs(lef - rig);
                if (a == 1) ret++;
                else if (a == 0) ret += 2;
            }
        }
        return ret;
    }
};",1454810922
Adi,ahimawan,457,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& q) {
        map<int, int> m;
        int qi = 0;
        int qn = q.size();
        int cur = 0;
        for (int i = 0; i < nums.size(); i++) {
            while (nums[i] > cur && qi < qn) {
                int lef = q[qi][0];
                int rig = q[qi][1]+1;
                int v = 1;
                qi++;
                if (rig <= i) continue;
                m[rig] -= v;
                if (lef <= i) cur += v;
                else m[lef] += v;
            }
            if (nums[i] > cur && qi == qn) return false;
            auto it = m.find(i+1);
            if (it != m.end()) cur += it->second;
        }
        return true;
    }
};",1454838693
Adi,ahimawan,457,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& q) {
        map<int, int> m;
        int qi = 0;
        int qn = q.size();
        int cur = 0;
        for (int i = 0; i < nums.size(); i++) {
            while (nums[i] > cur && qi < qn) {
                int lef = q[qi][0];
                int rig = q[qi][1]+1;
                int v = q[qi][2];
                qi++;
                if (rig <= i) continue;
                m[rig] -= v;
                if (lef <= i) cur += v;
                else m[lef] += v;
            }
            if (nums[i] > cur && qi == qn) return -1;
            auto it = m.find(i+1);
            if (it != m.end()) cur += it->second;
        }
        return qi;
    }
};",1454835957
Aditya Kumar,adityakumar8068,458,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int n=nums.size();
        int ans=0;
        for(int i=0;i<n;i++){
            if(nums[i]==0){
                int a=0;
                int b=0;
                for(int j=0;j<i;j++){
                    a+=nums[j];
                }
                for(int j=i+1;j<n;j++){
                    b+=nums[j];
                }
                if(abs(a-b)==1){
                    ans+=1;
                }
                else if(abs(a-b)==0){
                    ans+=2;
                }
            }
        }
        return ans;
    }
};",1454811379
Aditya Kumar,adityakumar8068,458,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& q) {
        int n=nums.size();
        int m=q.size();
        vector<int>vec(n,0);
        for(int i=0;i<m;i++){
            vec[q[i][0]]++;
            if(q[i][1]<n-1){
                vec[q[i][1]+1]--;
            }
        }
        int a=0;
        for(int i=0;i<n;i++){
            a+=vec[i];
            vec[i]=a;
        }
        // for(auto it:vec){
        //     cout<<it;
        // }
        for(int i=0;i<n;i++){
            if(nums[i]>vec[i]){
                return false;
            }
        }
        return true;
    }
};",1454820106
Aditya Kumar,adityakumar8068,458,3643,cpp,"class Solution {
public:
    bool check(vector<vector<int>>&q,int mid,vector<int>&nums){
        int n=nums.size();
        int m=q.size();
        vector<long long>vec(n,0);
        for(int i=0;i<=mid;i++){
            vec[q[i][0]]+=q[i][2];
            if(q[i][1]<n-1){
                vec[q[i][1]+1]-=q[i][2];
            }
        }
        long long a=0;
        for(int i=0;i<n;i++){
            a+=vec[i];
            vec[i]=a;
        }
        for(int i=0;i<n;i++){
            if(nums[i]>vec[i]){
                return false;
            }
        }
        return true;
    }
    int minZeroArray(vector<int>& nums, vector<vector<int>>& q) {
        int n=nums.size();
        int m=q.size();
        int start=0;
        int end=m-1;
        int ans=-1;
        long long sum=0;
        for(int i=0;i<n;i++){
            sum+=nums[i];
        }
        if(sum==0)return 0;
        while(start<=end){
            int mid=start+(end-start)/2;
            if(check(q,mid,nums)){
                ans=mid+1;
                end=mid-1;
            }
            else{
                start=mid+1;
            }
        }
        return ans;
    }
};",1454831289
Harsh Yadav,Harsh_261,460,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int n = nums.size();
        vector<int> zeroPositions;

        for (int i = 0; i < n; ++i) {
            if (nums[i] == 0) zeroPositions.push_back(i);
        }

        auto isValid = [&](int start, int direction) -> bool {
            vector<int> temp = nums; 
            int curr = start;

            while (curr >= 0 && curr < n) {
                if (temp[curr] == 0) {
                    curr += direction;
                } else {
                    --temp[curr]; 
                    direction = -direction;
                    curr += direction;
                }
            }

            for (int val : temp) {
                if (val != 0) return false;
            }
            return true;
        };

        int validCount = 0;

        for (int pos : zeroPositions) {
            if (isValid(pos, -1)) ++validCount; 
            if (isValid(pos, 1)) ++validCount; 
        }

        return validCount;
    }
};",1454807569
Harsh Yadav,Harsh_261,460,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        vector<int> decrements(n + 1, 0);

        for (const auto& query : queries) 
        {
            int l = query[0], r = query[1];
            decrements[l] += 1;
            if (r + 1 < n) 
            {
                decrements[r + 1] -= 1;
            }
        }

        int currDecrement = 0;
        for (int i = 0; i < n; ++i) 
        {
            currDecrement += decrements[i];
            if (currDecrement < nums[i]) 
            {
                return false;
            }
        }

        return true;
    }
};",1454820608
Harsh Yadav,Harsh_261,460,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        int m = queries.size();

        if (all_of(nums.begin(), nums.end(), [](int x) { return x == 0; })) {
            return 0;
        }

        auto canMakeZero = [&](int k) -> bool {
            vector<int> decrements(n + 1, 0);

            for (int i = 0; i < k; ++i) {
                int l = queries[i][0], r = queries[i][1], val = queries[i][2];
                decrements[l] += val;
                if (r + 1 < n) decrements[r + 1] -= val;
            }

            int currDecrement = 0;
            for (int i = 0; i < n; ++i) {
                currDecrement += decrements[i];
                if (currDecrement < nums[i]) {
                    return false; 
                }
            }
            
            return true;
        };

        int left = 1, right = m, result = -1;
        while (left <= right) {
            int mid = left + (right - left) / 2;
            if (canMakeZero(mid)) 
            {
                result = mid;
                right = mid - 1;
            } 
            else {
                left = mid + 1;
            }
        }
        
        return result;
    }
};
",1454831315
Anav Prasad,vrangr,461,3616,cpp,"#define all(x) (x).begin(),(x).end()
#define rall(x) (x).rbegin(),(x).rend()
class Solution {
public:
    int countValidSelections(vector<int>& vals) {
        int n = vals.size();
        if (*max_element(all(vals)) == 0) return 2*n;
        vector<int> psum(n), rpsum(n);
        partial_sum(all(vals),psum.begin());
        partial_sum(rall(vals),rpsum.rbegin());
        int sol = 0;
        for (int i = 0; i < n; ++i) {
            if (vals[i] != 0) continue;
            if (i == 0) {
                if (rpsum[i] == 1) sol++;
                continue;
            }
            if (i == n-1) {
                if (psum[i] == 1) sol++;
                continue;
            }
            if (abs(rpsum[i]-psum[i]) == 1) sol++;
            if (rpsum[i] == psum[i]) sol += 2;
        }
        return sol;
    }
};",1454808800
Anav Prasad,vrangr,461,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& vals, vector<vector<int>>& qr) {
        int n = vals.size();
        vector<int> sum(n+1,0);
        for (auto &q : qr) {
            int l = q[0], r = q[1];
            sum[l]++;
            sum[r+1]--;
        }
        for (int i = 1; i < n; ++i)
            sum[i] += sum[i-1];
        for (int i = 0; i < n; ++i) {
            if (sum[i] < vals[i]) return false;
        }
        return true;
    }
};",1454815148
Anav Prasad,vrangr,461,3643,cpp,"typedef long long int ll;

#ifndef ATCODER_INTERNAL_BITOP_HPP
#define ATCODER_INTERNAL_BITOP_HPP 1

#ifdef _MSC_VER
#include <intrin.h>
#endif

#if __cplusplus >= 202002L
#include <bit>
#endif

namespace atcoder {

namespace internal {

#if __cplusplus >= 202002L

using std::bit_ceil;

#else

// @return same with std::bit::bit_ceil
unsigned int bit_ceil(unsigned int n) {
    unsigned int x = 1;
    while (x < (unsigned int)(n)) x *= 2;
    return x;
}

#endif

// @param n `1 <= n`
// @return same with std::bit::countr_zero
int countr_zero(unsigned int n) {
#ifdef _MSC_VER
    unsigned long index;
    _BitScanForward(&index, n);
    return index;
#else
    return __builtin_ctz(n);
#endif
}

// @param n `1 <= n`
// @return same with std::bit::countr_zero
constexpr int countr_zero_constexpr(unsigned int n) {
    int x = 0;
    while (!(n & (1 << x))) x++;
    return x;
}

}  // namespace internal

}  // namespace atcoder

#endif  // ATCODER_INTERNAL_BITOP_HPP


#ifndef ATCODER_LAZYSEGTREE_HPP
#define ATCODER_LAZYSEGTREE_HPP 1

#include <algorithm>
#include <cassert>
#include <functional>
#include <vector>

// #include ""atcoder/internal_bit""

namespace atcoder {

#if __cplusplus >= 201703L

template <class S,
          auto op,
          auto e,
          class F,
          auto mapping,
          auto composition,
          auto id>
struct lazy_segtree {
    static_assert(std::is_convertible_v<decltype(op), std::function<S(S, S)>>,
                  ""op must work as S(S, S)"");
    static_assert(std::is_convertible_v<decltype(e), std::function<S()>>,
                  ""e must work as S()"");
    static_assert(
        std::is_convertible_v<decltype(mapping), std::function<S(F, S)>>,
        ""mapping must work as S(F, S)"");
    static_assert(
        std::is_convertible_v<decltype(composition), std::function<F(F, F)>>,
        ""composition must work as F(F, F)"");
    static_assert(std::is_convertible_v<decltype(id), std::function<F()>>,
                  ""id must work as F()"");

#else

template <class S,
          S (*op)(S, S),
          S (*e)(),
          class F,
          S (*mapping)(F, S),
          F (*composition)(F, F),
          F (*id)()>
struct lazy_segtree {

#endif

  public:
    lazy_segtree() : lazy_segtree(0) {}
    explicit lazy_segtree(int n) : lazy_segtree(std::vector<S>(n, e())) {}
    explicit lazy_segtree(const std::vector<S>& v) : _n(int(v.size())) {
        size = (int)internal::bit_ceil((unsigned int)(_n));
        log = internal::countr_zero((unsigned int)size);
        d = std::vector<S>(2 * size, e());
        lz = std::vector<F>(size, id());
        for (int i = 0; i < _n; i++) d[size + i] = v[i];
        for (int i = size - 1; i >= 1; i--) {
            update(i);
        }
    }

    void set(int p, S x) {
        assert(0 <= p && p < _n);
        p += size;
        for (int i = log; i >= 1; i--) push(p >> i);
        d[p] = x;
        for (int i = 1; i <= log; i++) update(p >> i);
    }

    S get(int p) {
        assert(0 <= p && p < _n);
        p += size;
        for (int i = log; i >= 1; i--) push(p >> i);
        return d[p];
    }

    S prod(int l, int r) {
        assert(0 <= l && l <= r && r <= _n);
        if (l == r) return e();

        l += size;
        r += size;

        for (int i = log; i >= 1; i--) {
            if (((l >> i) << i) != l) push(l >> i);
            if (((r >> i) << i) != r) push((r - 1) >> i);
        }

        S sml = e(), smr = e();
        while (l < r) {
            if (l & 1) sml = op(sml, d[l++]);
            if (r & 1) smr = op(d[--r], smr);
            l >>= 1;
            r >>= 1;
        }

        return op(sml, smr);
    }

    S all_prod() { return d[1]; }

    void apply(int p, F f) {
        assert(0 <= p && p < _n);
        p += size;
        for (int i = log; i >= 1; i--) push(p >> i);
        d[p] = mapping(f, d[p]);
        for (int i = 1; i <= log; i++) update(p >> i);
    }
    void apply(int l, int r, F f) {
        assert(0 <= l && l <= r && r <= _n);
        if (l == r) return;

        l += size;
        r += size;

        for (int i = log; i >= 1; i--) {
            if (((l >> i) << i) != l) push(l >> i);
            if (((r >> i) << i) != r) push((r - 1) >> i);
        }

        {
            int l2 = l, r2 = r;
            while (l < r) {
                if (l & 1) all_apply(l++, f);
                if (r & 1) all_apply(--r, f);
                l >>= 1;
                r >>= 1;
            }
            l = l2;
            r = r2;
        }

        for (int i = 1; i <= log; i++) {
            if (((l >> i) << i) != l) update(l >> i);
            if (((r >> i) << i) != r) update((r - 1) >> i);
        }
    }

    template <bool (*g)(S)> int max_right(int l) {
        return max_right(l, [](S x) { return g(x); });
    }
    template <class G> int max_right(int l, G g) {
        assert(0 <= l && l <= _n);
        assert(g(e()));
        if (l == _n) return _n;
        l += size;
        for (int i = log; i >= 1; i--) push(l >> i);
        S sm = e();
        do {
            while (l % 2 == 0) l >>= 1;
            if (!g(op(sm, d[l]))) {
                while (l < size) {
                    push(l);
                    l = (2 * l);
                    if (g(op(sm, d[l]))) {
                        sm = op(sm, d[l]);
                        l++;
                    }
                }
                return l - size;
            }
            sm = op(sm, d[l]);
            l++;
        } while ((l & -l) != l);
        return _n;
    }

    template <bool (*g)(S)> int min_left(int r) {
        return min_left(r, [](S x) { return g(x); });
    }
    template <class G> int min_left(int r, G g) {
        assert(0 <= r && r <= _n);
        assert(g(e()));
        if (r == 0) return 0;
        r += size;
        for (int i = log; i >= 1; i--) push((r - 1) >> i);
        S sm = e();
        do {
            r--;
            while (r > 1 && (r % 2)) r >>= 1;
            if (!g(op(d[r], sm))) {
                while (r < size) {
                    push(r);
                    r = (2 * r + 1);
                    if (g(op(d[r], sm))) {
                        sm = op(d[r], sm);
                        r--;
                    }
                }
                return r + 1 - size;
            }
            sm = op(d[r], sm);
        } while ((r & -r) != r);
        return 0;
    }

  private:
    int _n, size, log;
    std::vector<S> d;
    std::vector<F> lz;

    void update(int k) { d[k] = op(d[2 * k], d[2 * k + 1]); }
    void all_apply(int k, F f) {
        d[k] = mapping(f, d[k]);
        if (k < size) lz[k] = composition(f, lz[k]);
    }
    void push(int k) {
        all_apply(2 * k, lz[k]);
        all_apply(2 * k + 1, lz[k]);
        lz[k] = id();
    }
};

}  // namespace atcoder

#endif  // ATCODER_LAZYSEGTREE_HPP


class S {
public:
    ll val;
    S() : val(0) {}
    S(ll v) : val(v) {}
};

S op(S a, S b) {
    return S(max(a.val,b.val));
}
    
S e() {
    return S(0);
}

class F {
public:
    ll val;
    F() : val(0) {}
    F(ll v) : val(v) {}
};

S mapping(F f, S x) {
    return S(x.val+f.val);
}

F comp(F f, F g) {
    return F(f.val+g.val);
}

F id() {
    return F();
}

class Solution {
public:
    int minZeroArray(vector<int>& vals, vector<vector<int>>& qr) {
        int n = vals.size();
        vector<S> a(n);
        for (int i = 0; i < n; ++i)
            a[i].val = vals[i];
        atcoder::lazy_segtree<S, op, e, F, mapping, comp, id> seg(a);
        if (seg.all_prod().val <= 0) return 0;
        for(int i = 0; i < qr.size(); ++i) {
            int l = qr[i][0], r = qr[i][1], val = qr[i][2];
            seg.apply(l,r+1,F(-val));
            if (seg.all_prod().val <= 0) return i+1;
        }
        return -1;
    }
};",1454838776
Gaurav Kholiya,AuRA_07,462,3616,cpp,"#include <vector>

class Solution 
{
public:
    int countValidSelections(vector<int>& nums) {
        int n = nums.size();
        int cnt = 0;
        auto solve = [&](int i, int ans) 
        {
            vector<int> temp = nums;
            int curr = i;
            while (curr >= 0 && curr < n) 
            {
                if (temp[curr] == 0) 
                {
                    curr += ans;
                } 
                else 
                {
                    temp[curr]--;
                    ans = -1* ans;
                    curr += ans;
                }
            }

            for (auto it : temp) 
            {
                if (it != 0) 
                {
                    return false;
                }
            }
            return true;
        };

        for (int i = 0; i < n; ++i) 
        {
            if (!nums[i]) 
            {
                if (solve(i, 1)) 
                {
                    cnt++;
                }
                if (solve(i, -1)) 
                {
                    cnt++;
                }
            }
        }

        return cnt;
    }
};
",1454810967
Gaurav Kholiya,AuRA_07,462,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        vector<int> prefix(n + 1, 0);
        for ( auto& it : queries) 
        {
            int i = it[0];
            int j = it[1];
            prefix[i] -= 1;
            if (j + 1 < n) 
            {
                prefix[j + 1] += 1;
            }
        }
        int cnt = 0;
        for (int i = 0; i < n; i++) 
        {
            cnt += prefix[i];
            nums[i] += cnt;
            if (nums[i] < 0) 
            {
                nums[i] = 0;
            }
            if (nums[i] != 0) 
            {
                return false;
            }
        }

        return true;
    }
};",1454821915
Gaurav Kholiya,AuRA_07,462,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& q) 
    {
        int n = nums.size();
        int m = q.size();
        auto solve = [&](int k) 
        {
            vector<int>temp(n + 1, 0);
            for (int i = 0; i < k; i++) 
            {
                int l = q[i][0];
                int r = q[i][1];
                int v = q[i][2];
                temp[l] += v;
                if (r + 1 < n) 
                {
                    temp[r + 1] -= v;
                }
            }

            int cnt = 0;
            for (int i = 0; i < n; i++)
            {
                cnt += temp[i];
                if (nums[i] > cnt) 
                {
                    return false; 
                }
            }
            return true; 
        };

        int l = 0;
        int r = m;
        int ans = -1;
        while (l <= r) 
        {
            int mid = (l + r)/2;
            if (solve(mid)) 
            {
                ans = mid;
                r = mid - 1;
            } 
            else 
            {
                l = mid + 1; 
            }
        }

        return ans;
    }
};",1454838784
Bhanu Negi,bhanunegi420,464,3616,cpp,"class Solution {
public:

bool f(vector<int> nums, int s, int direction) {
    int n = nums.size(),curr = s;
    
    while (curr >= 0 && curr < n) {
        if (nums[curr] > 0) {
            nums[curr]--;
            direction *= -1;  
        }
        curr += direction;
    }

    return all_of(nums.begin(), nums.end(), [](int x) { return x == 0; });
}

int countValidSelections(vector<int>& nums) {
    int ans = 0,n = nums.size();
    
    for (int i = 0; i < n; ++i) {
        if (nums[i] == 0) { 
            for (int dir : {-1, 1}) { 
                if (f(nums, i, dir)) {
                    ans++;
                }
            }
        }
    }
    
    return ans;
}
};",1454807642
Bhanu Negi,bhanunegi420,464,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size(),m=queries.size();
        vector<int> hash(n+1,0);
        for(auto it : queries){
            hash[it[0]]++;
            hash[it[1]+1]--;
        }
        for(int i=1; i<=n;i++){
            hash[i] += hash[i-1];
        }

        for(int i=0; i<n; i++){
            if(hash[i] - nums[i] < 0) return 0;
        }
        return 1;
    }
};",1454816505
Bhanu Negi,bhanunegi420,464,3643,cpp,"// Author : Bhanu Negi
#include <bits/stdc++.h>
#define Code ios_base::sync_with_stdio(0);
#define by cin.tie(0);
#define Bhanu cout.tie(0);
#define ll long long
#define pii pair<int,int>
#define PQ priority_queue<ll>
#define PQG priority_queue<ll,vector<ll>,greater<ll>>
#define pll pair<long long,long long>
#define F first
#define S second
#define pb push_back
#define mod 1000000007
#define inf 100000000000000000
using namespace std;

int dx[4] = {+1,-1,0,0};
int dy[4] = {0,0,+1,-1};
 
int _dx[8] = {+1,-1,0,0,+1,-1,+1,-1};
int _dy[8] = {0,0,+1,-1,+1,-1,-1,+1};

vector<pll> dxy = {{1,0},{-1,0},{0,1},{0,-1}};
vector<pll> _dxy = {{1,0},{-1,0},{0,1},{0,-1},{1,1},{-1,-1},{1,-1},{-1,1}};

class debug{
public: 
    template<class T>
    void print(vector<T>& arr){
        for(auto& it : arr) cout<<it<<"" "";
        cout<<endl;
    }
};

// Matrix Exponentiation
class Matrix{
public:
    vector<vector<ll>> mat;
    void multiply(vector<vector<ll>>& A,vector<vector<ll>>& B){
        int n = A.size();
        vector<vector<ll>> C(n, vector<ll>(n));
        for (int i = 0; i < n; i++) {
            for (int j = 0; j <n; j++) {
                for (int k = 0; k < n; k++) {
                    C[i][j] = (C[i][j] + ((A[i][k]) * (B[k][j]))%mod)%mod;
                }
            }
        }
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                A[i][j] = C[i][j];
            }
        }
    }
    vector<vector<ll>> identity(int n){
        vector<vector<ll>> ans(n,vector<ll>(n,0));
        for(int i=0; i<n; i++) ans[i][i] = 1;
        return ans;
    }
    vector<vector<ll>> exponentiate(vector<vector<ll>> M, ll expo){
        int n = M.size();
        vector<vector<ll>> ans = identity(n);
        while (expo) {
            if (expo & 1) multiply(ans, M);
            multiply(M, M);
            expo >>= 1;
        }
        return ans;
    }

};

/*****************************************************************************************************/

// Disjoint Set
class Disjoint{
public:
    vector<ll> parent,size,rank;
    Disjoint(int n){
        parent.resize(n+1);
        for(int i=0;i<=n; i++) parent[i] = i;
        size.resize(n+1,1);
        rank.resize(n+1,0);
    }

    int findUPar(int node){
        if(parent[node] == node) return node;
        return parent[node] = findUPar(parent[node]);
    }

    void union_by_rank(int u,int v){
        int ulp_u = findUPar(u);
        int ulp_v = findUPar(v);
        if(ulp_u == ulp_v) return;
        if(rank[ulp_u] > rank[ulp_v]){
            parent[ulp_v] =  ulp_u;
        }
        else if(rank[ulp_u] < rank[ulp_v]){
            parent[ulp_u] = ulp_v;
        }
        else{
            rank[ulp_u]++;
            parent[ulp_v] = ulp_u;
        }
    }

    void union_by_size(int u,int v){
        int ulp_u = findUPar(u);
        int ulp_v = findUPar(v);
        if(ulp_u == ulp_v) return;
        if(size[ulp_u] >= size[ulp_v]){
            size[ulp_u] += size[ulp_v];
            parent[ulp_v] = ulp_u;
        }
        else{
            size[ulp_v] += size[ulp_u];
            parent[ulp_u] = ulp_v;

        }
    }
};

/****************************************************************************************************/

//Trie 

struct Node {
    Node* links[26];
    bool flag = 0;
    bool containsKey(char ch){ return links[ch - 'a'] != NULL;}
    void put(char ch, Node* node) {links[ch - 'a'] = node;}
    Node* get(char ch) {return links[ch - 'a'];}
    void setEnd() {flag = 1;}
    bool isEnd() {return flag;}
    
};

class Trie {
private:
    Node* root;

public:
    Trie() {
        root = new Node();
    }
    void insert(string word) {
        Node* node = root;
        for (int i = 0; i < word.length(); i++) {
            if (!node->containsKey(word[i])) {
                node->put(word[i], new Node());
            }
            node = node->get(word[i]);
        }
        node->setEnd();
    }

    bool search(string word) {
        Node* node = root;
        for (int i = 0; i < word.length(); i++) {
            if (!node->containsKey(word[i])) {
                return 0;
            }
            node = node->get(word[i]);
        }
        return node->isEnd();
    }

    bool startsWith(string prefix) {
        Node* node = root;
        for (int i = 0; i < prefix.length(); i++) {
            if (!node->containsKey(prefix[i])) {
                return 0;
            }
            node = node->get(prefix[i]);
        }
        return 1;
    }
};

/*************************************************************************************************** */

auto bpsn = [](){
    Code by Bhanu
    return 'sk';
}();
/************************************************************************************************** */
class Solution {
public:
    vector<int> hash; 
    int minZeroArray(vector<int>& nums, vector<vector<int>>& q) {
        int n = nums.size();
        vector<int> curr = nums;  
        if (all_of(curr.begin(), curr.end(), [](int x) { return x == 0; })) {
            hash = curr;
            return 0;
        }
        
        auto f = [&](int k) -> bool {
            vector<int> diff(n + 1, 0);
            for (int i = 0; i < k; ++i) {
                int l = q[i][0], r = q[i][1], val = q[i][2];
                diff[l] += val;
                if (r + 1 < n) diff[r + 1] -= val;
            }
            
            int cnt = 0;
            for (int i = 0; i < n; ++i) {
                cnt += diff[i];
                if (cnt < curr[i]) {
                    return 0;  
                }
            }
            return 1;
        };
        
        int low = 0, high = q.size(), ans = -1;
        bool midi = 0;
        
        while (low <= high) {
            int mid = low + (high - low) / 2;
            if (f(mid)) {
                ans = mid;
                high = mid - 1;
            } else {
                low = mid + 1;
            }
            
            if (!midi && mid == q.size() / 2) {
                vector<int> diff(n + 1, 0);
                for (int i = 0; i < mid; ++i) {
                    int l = q[i][0], r = q[i][1], val = q[i][2];
                    diff[l] += val;
                    if (r + 1 < n) diff[r + 1] -= val;
                }
                
                hash = curr;
                int cnt = 0;
                for (int i = 0; i < n; ++i) {
                    cnt += diff[i];
                    hash[i] = max(0, curr[i] - cnt);
                }
                midi = 1;
            }
        }
        return ans;
    }
};",1454838804
Unicon,Unicon,465,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int ans = 0;
        int n = nums.size();
        vector<int> rsum(n + 1, 0);
        for (int i = n - 1; i >= 0; --i) {
            rsum[i] = rsum[i + 1] + nums[i];
        }
        int lsum = 0;
        for (int i = 0; i < n; ++i) {
            if (nums[i] == 0) {
                if (lsum == rsum[i + 1] || lsum - 1 == rsum[i + 1]) {
                    ++ans;
                }
                if (lsum == rsum[i + 1] || lsum == rsum[i + 1] - 1) {
                    ++ans;
                }
            }


            lsum += nums[i];
        }

        return ans;
    }
};",1454812644
Unicon,Unicon,465,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        vector<int> s(n, 0);
        vector<int> f(n, 0);
        for (int i = 0; i < queries.size(); ++i) {
            s[queries[i][0]]++;
            f[queries[i][1]]++;
        }

        int b = 0;
        for (int i = 0; i < n; ++i) {
            b += s[i];
            if (nums[i] > b) {
                return false;
            }
            b -= f[i];
        }

        return true;
    }
};",1454819947
Unicon,Unicon,465,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int l = -1, r = queries.size() + 1;
        while (l < r - 1) {
            int mid = (l + r) / 2;
            if (isZeroArray(nums, queries, mid)) {
                r = mid;
            } else {
                l = mid;
            }
        }

        if (r == queries.size() + 1) {
            return -1;
        }
        return r;
    }

private: 
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries, int k) {
        int n = nums.size();
        vector<int> s(n, 0);
        vector<int> f(n, 0);
        for (int i = 0; i < k; ++i) {
            s[queries[i][0]] += queries[i][2];
            f[queries[i][1]] += queries[i][2];
        }

        int b = 0;
        for (int i = 0; i < n; ++i) {
            b += s[i];
            if (nums[i] > b) {
                return false;
            }
            b -= f[i];
        }

        return true;
    }
};",1454831372
Chengyu Wu,dnuj4097,466,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        
        rsum = sum(nums)
        lsum = 0
        ans = 0
        for x in nums:
            if x == 0:
                if lsum == rsum: ans += 2
                elif abs(lsum - rsum) == 1:
                    ans += 1
            else:
                lsum += x
                rsum -= x
        return ans",1454810973
Chengyu Wu,dnuj4097,466,3639,python3,"from collections import defaultdict
class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        
        pts = defaultdict(int)
        for l,r in queries:
            pts[l] += 1
            pts[r + 1] -= 1

        cnt = 0
        for i,x in enumerate(nums):
            cnt += pts[i]
            if cnt < x: return False
        return True",1454815672
Chengyu Wu,dnuj4097,466,3643,python3,"from collections import defaultdict
class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        
        if sum(nums) == 0: return 0
        
        def helper(k):
            nonlocal nums, queries
            pts = defaultdict(int)
            for i in range(k):
                l,r,v = queries[i]
                pts[l] += v
                pts[r + 1] -= v
            v = 0
            for i,x in enumerate(nums):
                v += pts[i]
                if v < x: return False
            return True
        
        m = len(queries)
        if not helper(m): return -1
        lo, hi = 0, m
        while hi > lo + 1:
            k = (lo + hi) // 2
            if helper(k): hi = k
            else: lo = k
        return hi",1454831409
james-ryans,james-ryans,467,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int n = nums.size();
        vector<int> pref(n + 5), suff(n + 5);
        for (int i = 1; i <= n; i++) {
            pref[i] = pref[i - 1] + nums[i - 1];
        }
        for (int i = n; i >= 1; i--) {
            suff[i] = suff[i + 1] + nums[i - 1];
        }

        int ans = 0;
        for (int i = 1; i <= n; i++) {
            if (nums[i - 1] != 0) {
                continue;
            }

            // cout << pref[i] << ' ' << suff[i] << '\n';
            if (pref[i] == suff[i] || pref[i] - 1 == suff[i]) {
                ans++;
            }
            if (pref[i] == suff[i] || pref[i] == suff[i] - 1) {
                ans++;
            }
        }
        return ans;
    }
};",1454817415
james-ryans,james-ryans,467,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        int m = queries.size();
        vector<int> que(n);
        for (int i = 0; i < m; i++) {
            int l = queries[i][0];
            int r = queries[i][1];
            que[l]++;
            if (r + 1 < n) {
                que[r + 1]--;
            }
        }
        for (int i = 1; i < n; i++) {
            que[i] += que[i - 1];
        }

        for (int i = 0; i < n; i++) {
            if (que[i] < nums[i]) {
                return false;
            }
        }
        return true;
    }
};",1454823542
james-ryans,james-ryans,467,3643,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries, int m) {
        int n = nums.size();
        vector<int> que(n);
        for (int i = 0; i < m; i++) {
            int l = queries[i][0];
            int r = queries[i][1];
            int val = queries[i][2];
            que[l] += val;
            if (r + 1 < n) {
                que[r + 1] -= val;
            }
        }
        for (int i = 1; i < n; i++) {
            que[i] += que[i - 1];
        }

        for (int i = 0; i < n; i++) {
            if (que[i] < nums[i]) {
                return false;
            }
        }
        return true;
    }

    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        if (!isZeroArray(nums, queries, queries.size())) {
            return -1;
        }
        
        int lo = 0, hi = queries.size();
        while (lo < hi) {
            int mid = (lo + hi) / 2;
            if (isZeroArray(nums, queries, mid)) {
                hi = mid;
            } else {
                lo = mid + 1;
            }
        }
        return lo;
    }
};",1454831411
Madhav Gupta,mgups2002,470,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        n = len(nums)
        directions = [-1, 1]  # -1: left, 1: right
        count = 0

        for i in range(n):
            if nums[i] == 0:
                for dir in directions:
                    temp = nums.copy()
                    curr = i
                    direction = dir
                    while 0 <= curr < n:
                        if temp[curr] == 0:
                            curr += direction
                        else:
                            temp[curr] -= 1
                            direction = -direction
                            curr += direction
                    if all(x == 0 for x in temp):
                        count += 1
        return count",1454806882
Madhav Gupta,mgups2002,470,3639,cpp," class Solution {
 public:
     bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
         int n = nums.size();
         vector<int> diff(n + 1, 0);
         // line sweep
         for(auto& q : queries){
             int l = q[0];
             int r = q[1];
             diff[l] += 1;
             if(r + 1 < n)
                 diff[r + 1] -= 1;
         }
         vector<int> count(n, 0);
         count[0] = diff[0];
         for(int i = 1; i < n; i++)
             count[i] = count[i - 1] + diff[i];
         for(int i = 0; i < n; i++){
             if(nums[i] - count[i] > 0)
                 return false;
         }
         return true;
     }
 };",1454815029
Madhav Gupta,mgups2002,470,3643,cpp,"class Solution {
public:
    bool isPossible(vector<int>& nums, vector<vector<int>>& queries, int k, int n)
{
    vector<long long> diff(n+1, 0);
    for(int i=0; i<k; i++)
        {
            auto q=queries[i];
            int l=q[0];
            int r=q[1];
            int val=q[2];

            diff[l]+=val;
            if(r+1<n)
                diff[r+1]=diff[r+1]-val;
        }

         vector<long long> total(n, 0);
         total[0] = diff[0];
         if(total[0] < nums[0]) return false;
         for(int i = 1; i < n; i++) {
             total[i] = total[i - 1] + diff[i];
             if(total[i] < nums[i]) return false;
         }
         return true;
}
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n=nums.size();
        int m=queries.size();

        int l=0;
        int r=m;
        int ans=-1;

        while(l<=r)
            {
                int mid=l+(r-l)/2;

                if(isPossible(nums, queries, mid, n))
                {
                    ans=mid;
                    r=mid-1;
                }
                else
                    l=mid+1;
            }
        return ans;
    }


};",1454831634
tarunsingh,tarunsingh,471,3616,cpp,"class Solution {
public:

    bool check(vector<int> a){
        for(auto num: a){
            if(num != 0){
                return false;
            }
        }
        return true;
    }

    int func(vector<int> a, int n, int pos, int dir){
        if(a[pos] != 0){
            return 0;
        }
        while(pos < n && pos >= 0){
            if(a[pos] == 0){
                pos += dir;
            } else {
                a[pos]--;
                if(dir == -1){
                    dir = 1;
                } else {
                    dir = -1;
                }
                pos += dir;
            }
        }
        return check(a);
    }

    int countValidSelections(vector<int>& nums) {
        int ans = 0;
        int n = nums.size();
        for(int i = 0; i < n; i++){
            ans += func(nums, n, i, -1);
            ans += func(nums, n, i, 1);
        }
        return ans;
    }
};",1454819169
tarunsingh,tarunsingh,471,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int sum = 0;
        int n = nums.size();
        vector<int> temp(n+1, 0);
        for(auto q: queries){
            temp[q[0]]++;
            temp[q[1]+1]--;
        }
        for(int i = 0; i < n; i++){
            sum += temp[i];
            nums[i] -= sum;
        }
        for(auto num: nums){
            if(num > 0){
                return false;
            }
        }
        return true;
    }
};",1454827405
tarunsingh,tarunsingh,471,3643,cpp,"class Solution {
public:
    bool check(vector<int> a, int n, int k, vector<vector<int>> &q){
        long long sum = 0;
        vector<long long> temp(n+1, 0);
        for(int i = 0; i <= k; i++){
            temp[q[i][0]]+=q[i][2];
            temp[q[i][1]+1]-=q[i][2];
        }
        for(int i = 0; i < n; i++){
            sum += temp[i];
            a[i] -= sum;
        }
        for(auto num: a){
            if(num > 0){
                return false;
            }
        }
        return true;
    }
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        bool flag = 1;
        for(auto num: nums){
            if(num > 0){
                flag = 0;
                break;
            }
        }
        if(flag){
            return 0;
        }
        int l = 0, r = queries.size()-1;
        int ans = -1;
        int n = nums.size();
        while(l <= r){
            int mid = (l+r)/2;
            if(check(nums,n,mid,queries)){
                ans = mid;
                r = mid-1;
            } else {
                l = mid+1;
            }
        }
        if(ans != -1){
            return ans+1;
        }
        return ans;
    }
};",1454839133
congthanh2000,congthanh2000,472,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        auto ok = [&](int start, int d) {
            vector<int> nums_cur = nums;
            int sum = 0;
            for (int x : nums) sum += x;
            while (start >= 0 && start < nums.size() && sum > 0) {
                if (nums_cur[start] > 0) {
                    sum--;
                    nums_cur[start]--;
                    d *= -1;
                }
                start += d;
            }
            return sum == 0;
        };
        int ans = 0;
        for (int i = 0; i < nums.size(); i++) {
            if (nums[i] == 0) {
                ans += ok(i, -1);
                ans += ok(i, 1);
            }
        }
        return ans;
    }
};",1454814633
congthanh2000,congthanh2000,472,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        vector<int> prefix_sum(n + 1, 0);
        for (auto it : queries) {
            int L = it[0], R = it[1];
            prefix_sum[L] += 1;
            prefix_sum[R + 1] -= 1;
        }
        for (int i = 1; i <= n; i++) prefix_sum[i] += prefix_sum[i - 1];
        for (int i = 0; i < n; i++) {
            if (nums[i] > prefix_sum[i]) {
                return false;
            }
        }
        return true;
    }
};",1454819061
congthanh2000,congthanh2000,472,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        auto ok = [&](int k) {
            vector<long long> prefix_sum(n + 1, 0);
            for (int i = 0; i < k; i++) {
                int L = queries[i][0], R = queries[i][1], value = queries[i][2];
                prefix_sum[L] += value;
                prefix_sum[R + 1] -= value;
            }
            for (int i = 1; i <= n; i++) prefix_sum[i] += prefix_sum[i - 1];
            for (int i = 0; i < n; i++) {
                if (nums[i] > prefix_sum[i]) {
                    return false;
                }
            }
            return true;
        };
        int L = 0, R = queries.size(), ans = -1;
        while (L <= R) {
            int mid = (L + R) >> 1;
            if (ok(mid)) {
                ans = mid;
                R = mid - 1;
            } else {
                L = mid + 1;
            }
        }
        return ans;
    }
};",1454824508
the_average_guy,pgthakur,473,3616,cpp,"class Solution {
public:
    bool simulate(int start, int direction, vector<int> nums) {
        int n = nums.size();
        int curr = start;

        while (curr >= 0 && curr < n) {
            if (nums[curr] == 0) {
                curr += direction; 
            } else {
                nums[curr]--;     
                direction *= -1;   
                curr += direction; 
            }
        }
        return all_of(nums.begin(), nums.end(), [](int x) { return x == 0; });
    }

    int countValidSelections(vector<int>& nums) {
        int validCount = 0;
        int n = nums.size();

        for (int i = 0; i < n; ++i) {
            if (nums[i] == 0) {
                if (simulate(i, -1, nums)) {
                    validCount++;
                }
                if (simulate(i, 1, nums)) { 
                    validCount++;
                }
            }
        }

        return validCount;
    }
};",1454839170
the_average_guy,pgthakur,473,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        vector<int> v(nums.size()+1,0);
        for(auto it:queries)
            {
                v[it[0]]--;
                v[it[1]+1]++;
            }

        for(int i=1;i<v.size();i++)
            {
                v[i] = (v[i]+v[i-1]);
            }

        // for(auto it:v)
        //     {
        //         cout<<it<<"" "";
        //     }

        for(int i=0;i<nums.size();i++)
            {
                //cout<<nums[i]<<"" ""<<v[i]<<endl;
                if(nums[i]+v[i]>0)
                {
                    //cout<<i<<endl;
                    return false;
                }
            }

        return true;
    }
};",1454813998
the_average_guy,pgthakur,473,3643,cpp,"class Solution {
public:
    bool poss(vector<vector<int>>& q,vector<int>& nums,int mid){
        vector<int> v(nums.size()+1,0);
        for(int i=0;i<mid;i++)
            {
                v[q[i][0]] -= q[i][2];
                v[q[i][1]+1]+= q[i][2];
            }


        // for(auto it:v){
        //     cout<<it<<"" "";
        // }
        //cout<<endl;
        for(int i=1;i<v.size();i++)
            {
                v[i] = (v[i]+v[i-1]);
            }
        for(int i=0;i<nums.size();i++)
            {
                //cout<<nums[i]<<"" ""<<v[i]<<endl;
                if(nums[i]+v[i]>0)
                {
                    //cout<<i<<"" ""<<mid<<endl;
                    return false;
                }
            }

        return true;
    }
    int minZeroArray(vector<int>& nums, vector<vector<int>>& q) {
        int low = 0;
        int high = q.size();
        int ans = -1;

        while(low<=high)
            {
                int mid = low+(high-low)/2;
                if(poss(q,nums,mid))
                {
                    ans = mid;
                    high = mid-1;
                }
                else
                {
                    low = mid+1;
                }
            }
        return ans;
    }
};",1454829203
Keerthi Vasan S A,keerthivasansa,475,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int ans = 0;
        for (int i = 0; i < nums.size(); i++) {
            if (nums[i] == 0) {
                if (works(i, nums, 0))
                    ans++;
                if (works(i, nums, 1))
                    ans++; 
            }
        }
        return ans;
    }

    bool works(int curr, vector<int> nums, int dir) {
        int c = curr;
        while (c >= 0 && c < nums.size()) {
            if (nums[c]) {
                dir = 1 - dir;
                nums[c]--;
            }
            if (dir)
                c++;
            else
                c--;
        }
        for (int i = 0; i < nums.size(); i++)
            if (nums[i] != 0)
                return false;
        return true;
    }
};",1454815774
Keerthi Vasan S A,keerthivasansa,475,3639,cpp,"#define ll long long 

class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        vector<ll> pref(n + 1, 0);

        for (vector<int> &q: queries) {
            int l = q[0], r = q[1];
            pref[l]--;
            pref[r + 1]++;
        }

        ll p = 0;
        for (int i = 0; i < n; i++) {
            p += pref[i];
            if (p + nums[i] > 0)
                return false;
        }
        return true;
    }
};",1454821123
Keerthi Vasan S A,keerthivasansa,475,3643,cpp,"#define ll long long

class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        int low = 0, high = queries.size();
        while (low <= high) {
            int mid = (low + high) / 2;
            if (!works(mid, nums, queries))
                low = mid + 1;
            else
                high = mid - 1;
        }
        if (low == queries.size() + 1)
            return -1;
        return low;
    }

    bool works(int k, vector<int> &nums, vector<vector<int>> &queries) {
        int n = nums.size();
        vector<ll> pref(n + 1, 0);

        for (int i = 0; i < k; i++) {
            int l = queries[i][0], r = queries[i][1], val = queries[i][2];
            pref[l] -= val;
            pref[r + 1] += val;
        }
        
        ll p = 0;
        for (int i = 0; i < n; i++) {
            p += pref[i];
            if (p + nums[i] > 0)
                return false;
        }
        return true;
    }
};",1454831837
huzy,user2349xl,476,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int n = nums.size();
        int sum = accumulate(nums.begin(), nums.end(), 0);
        int left = 0;
        int ans = 0;
        
        for (int i = 0; i < n; i++) {
            left += nums[i];
            sum -= nums[i];
            if (nums[i] == 0) {
                if (left == sum) {
                    ans += 2;
                } else if (left + 1 == sum) {
                    ans += 1;
                } else if (left == sum + 1) {
                    ans += 1;
                }
            }
        }
        
        return ans;
    }
};",1454808220
huzy,user2349xl,476,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        
        int n = nums.size();
        vector<int> line(n+1, 0);
        
        for (auto &q : queries) {
            line[q[0]] += 1;
            line[q[1]+1] -= 1;
        }
        
        int curr = 0;
        for (int i = 0; i < n; i++) {
            curr += line[i];
            
            if (curr < nums[i]) {
                return false;
            }
        }
        
        return true;
    }
};",1454812531
huzy,user2349xl,476,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        vector<vector<int>> show(n+1);
        vector<vector<int>> leave(n+1);
        
        for (int i = 0; i < queries.size(); i++) {
            show[queries[i][0]].push_back(i);
            leave[queries[i][1]+1].push_back(i);
        }
        
        auto test = [&](int m) {
            int curr = 0;
            for (int i = 0; i < n; i++) {
                for (auto id : show[i]) {
                    if (id >= m) break;
                    curr += queries[id][2];
                }

                for (auto id : leave[i]) {
                    if (id >= m) break;
                    curr -= queries[id][2];
                }

                if (curr < nums[i]) {
                    return false;
                }
            }
            
            return true;
        };
        
        int l = 0;
        int r = queries.size();
        int ans = -1;
        
        while (l <= r) {
            int md = l + (r - l) / 2;
            
            if (test(md)) {
                ans = md;
                r = md - 1;
            } else {
                l = md + 1;
            }
        }
        
        return ans;
    }
};",1454831852
darkKnight,nikhil94147,479,3616,cpp,"class Solution {
public:
    
    bool simulate(vector<int> nums, int start, int direction) {
        int n = nums.size();
        int curr = start;

        while (curr >= 0 && curr < n) {
            if (nums[curr] == 0) {
                curr += direction; 
            } else {
                nums[curr] -= 1;   
                direction *= -1;   
                curr += direction; 
            }
        }
        
        for(int i=0;i<n;i++){
            if(nums[i]>0){
                return false;
            }
        }
        return true;
    }
    
    int countValidSelections(vector<int>& nums) {
        int count = 0;
        int n = nums.size();

        for (int i = 0; i < n; ++i) {
            if (nums[i] == 0) { 
                if (simulate(nums, i, -1)) {
                    // cout<<i<<"" ""<<'\n';
                    count++;
                }
                if(simulate(nums, i, 1)){
                    count++;
                }
            }
        }

        return count;
    }
};",1454810238
darkKnight,nikhil94147,479,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& a, vector<vector<int>>& q) {
        int n=a.size();
        vector<int> pref(n+1,0);
        for(auto &i:q){
            pref[i[0]]++;
            pref[i[1]+1]--;
        }
        for(int i=1;i<=n;i++){
            pref[i]+=pref[i-1];
        }
        for(int i=0;i<n;i++){
            a[i]-=pref[i];
            a[i]=max(0,a[i]);
        }
        for(int i=0;i<n;i++){
            if(a[i]!=0){
                return false;
            }
        }
        return true;
    }
};",1454820389
darkKnight,nikhil94147,479,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& a, vector<vector<int>>& q) {
        int n=a.size();
        int m=q.size();
        if(all_of(a.begin(), a.end(), [](int x) { return x == 0; })){
            return 0;
        }
        
        auto ok=[&](int mid)->bool{
            vector<int> pref(n+1,0);
            vector<int> b=a;
            for(int i=0;i<mid;i++){
                pref[q[i][0]]+=q[i][2];
                pref[q[i][1]+1]-=q[i][2];
            }
            for(int i=1;i<=n;i++){
                pref[i]+=pref[i-1];
            }
            for(int i=0;i<n;i++){
                b[i]-=pref[i];
                b[i]=max(0,b[i]);
            }
            // for(auto &i:b)  cout<<i<<"" "";
            // cout<<'\n';
            for(int i=0;i<n;i++){
                if(b[i]!=0){
                    return false;
                }
            }
            return true;
        };
        
        // cout<<ok(2)<<'\n';
        
        int ans=m+5;
        int l=1,r=m;
        while(l<=r){
            int mid=(l+r)>>1;
            if(ok(mid)){
                ans=mid;
                r=mid-1;
            }else{
                l=mid+1;
            }
        }
        if(ans==m+5) ans=-1;
        return ans;
    }
};",1454839350
Jack Deng,dj3013158,480,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        n = len(nums)
        count = 0

        def simulate(start: int, direction: int) -> bool:
            arr = nums[:]
            curr = start
            while 0 <= curr < n:
                if arr[curr] == 0:
                    curr += direction
                else:
                    arr[curr] -= 1
                    direction *= -1
                    curr += direction
            return all(x == 0 for x in arr)

        for i in range(n):
            if nums[i] == 0:
                if simulate(i, -1):
                    count += 1
                if simulate(i, 1):
                    count += 1

        return count",1454806962
Jack Deng,dj3013158,480,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        n = len(nums)
        cnt = [0] * (n + 1)
        for l, r in queries:
            cnt[l] += 1
            if r + 1 < n:
                cnt[r + 1] -= 1
        for i in range(1, n):
            cnt[i] += cnt[i - 1]
        cnt = cnt[:n]
        for i in range(n):
            if nums[i] > cnt[i]:
                return False
        total_need = sum(nums)
        total_capacity = sum(r - l + 1 for l, r in queries)
        if total_need > total_capacity:
            return False
        return True",1454811423
Jack Deng,dj3013158,480,3643,python3,"class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        class Node:
            def __init__(self, l, r):
                self.l = l
                self.r = r
                self.left = None
                self.right = None
                self.max_val = 0
                self.lazy = 0

        def build(node):
            if node.l == node.r:
                node.max_val = nums[node.l]
                return
            mid = (node.l + node.r) // 2
            node.left = Node(node.l, mid)
            node.right = Node(mid + 1, node.r)
            build(node.left)
            build(node.right)
            node.max_val = max(node.left.max_val, node.right.max_val)

        def push(node):
            if node.lazy != 0 and node.left:
                for child in [node.left, node.right]:
                    child.max_val -= node.lazy
                    child.lazy += node.lazy
                node.lazy = 0

        def update(node, l, r, val):
            if node.r < l or node.l > r:
                return
            if l <= node.l and node.r <= r:
                node.max_val -= val
                node.lazy += val
                return
            push(node)
            update(node.left, l, r, val)
            update(node.right, l, r, val)
            node.max_val = max(node.left.max_val, node.right.max_val)

        n = len(nums)
        root = Node(0, n - 1)
        build(root)

        if root.max_val <= 0:
            return 0

        for idx, (l, r, val) in enumerate(queries):
            update(root, l, r, val)
            if root.max_val <= 0:
                return idx + 1
        if root.max_val > 0:
            return -1
        return len(queries)
",1454824754
Pawan,pawan_29,482,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int n=nums.size(),ans=0;
        vector<int> pre(n+5,0),suff(n+5,0);

        for(int i=0;i<n;i++){
            pre[i+1]=pre[i]+nums[i];
        }

        for(int i=n-1;i>=0;i--){
            suff[i]=suff[i+1]+nums[i];
        }

        for(int i=0;i<n;i++){
            if(nums[i]){
                continue;
            }

            if(abs(suff[i+1]-pre[i])==0){
                ans+=2;
            }else if(abs(suff[i+1]-pre[i])==1){
                ans+=1;
            }
        }
        return ans;
    }
};",1454809942
Pawan,pawan_29,482,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        map<int,int> mpp;
        int n=nums.size();
        for(auto query:queries){
            mpp[query[0]]++;
            mpp[query[1]+1]--;
        }

        int curr=0;

        for(int i=0;i<n;i++){
            if(mpp.find(i)!=mpp.end()){
                curr+=mpp[i];
            }

            if(nums[i]>curr){
                return false;
            }
        }
        return true;
    }
};",1454816655
Pawan,pawan_29,482,3643,cpp,"class Solution {
public:
    bool isPossible(vector<int>& nums,vector<vector<int>>& queries,int l){
        unordered_map<int,int> mpp;
        int n=nums.size();
        for(int i=0;i<l;i++){
            vector<int> query = queries[i];
            mpp[query[0]]+=query[2];
            mpp[query[1]+1]-=query[2];
        }

        int curr=0;

        for(int i=0;i<n;i++){
            if(mpp.find(i)!=mpp.end()){
                curr+=mpp[i];
            }

            if(nums[i]>curr){
                return false;
            }
        }
        return true;
    }
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n=queries.size();
        if(!isPossible(nums,queries,n)){
            return -1;
        }

        int l=0,r=n,ans;

        while(l<=r){
            int mid=(l+r)/2;

            if(isPossible(nums,queries,mid)){
                r=mid-1;
                ans=mid;
            }else{
                l=mid+1;
            }
        }
        return ans;
    }
};",1454824762
zeningc,zeningc,483,3616,java,"class Solution {
    public int countValidSelections(int[] nums) {
        int ans = 0;
        int sum = 0;
        for (int num : nums)
            sum += num;
        for (int i = 0; i < nums.length; i++)   {
            if (nums[i] != 0)
                continue;
            int[] t = nums.clone();
            int j = i;
            int d = 1;
            int cnt = 0;
            while (j >= 0 && j < t.length)  {
                j += d;
                if (j < 0 || j >= t.length)
                    break;
                if (t[j] == 0)
                    continue;
                t[j]--;
                cnt++;
                d = -d;
            }
            if (cnt == sum)
                ans++;
            j = i;
            d = -1;
            cnt = 0;
            t = nums.clone();
            while (j >= 0 && j < t.length)  {
                j += d;
                if (j < 0 || j >= t.length)
                    break;
                if (t[j] == 0)
                    continue;
                t[j]--;
                cnt++;
                d = -d;
            }
            if (cnt == sum)
                ans++;
        }
        
        return ans;
    }
}",1454808350
zeningc,zeningc,483,3639,java,"class Solution {
    public boolean isZeroArray(int[] nums, int[][] queries) {
        int n = nums.length;
        int[] cnt = new int[n + 1];
        for (int[] q : queries) {
            cnt[q[0]]++;
            cnt[q[1] + 1]--;
        }
        int cur = 0;
        for (int i = 0; i < n; i++) {
            cur += cnt[i];
            if (cur < nums[i])
                return false;
        }
        return true;
    }
}",1454810651
zeningc,zeningc,483,3643,java,"class Solution {
    public int minZeroArray(int[] nums, int[][] queries) {
        int sum = 0;
        for (int num : nums)
            sum += num;
        if (sum == 0)
            return 0;
        int lo = 0;
        int hi = queries.length - 1;
        while (lo <= hi)    {
            int mid = lo + (hi - lo) / 2;
            if (check(nums, queries, mid))
                hi = mid - 1;
            else
                lo = mid + 1;
        }
        return lo == queries.length ? -1 : lo + 1;
    }
    
    boolean check(int[] nums, int[][] queries, int mid) {
        int n = nums.length;
        int[] cnt = new int[n + 1];
        for (int i = 0; i <= mid; i++) {
            int[] q = queries[i];
            cnt[q[0]] += q[2];
            cnt[q[1] + 1] -= q[2];
        }
        int cur = 0;
        for (int i = 0; i < n; i++) {
            cur += cnt[i];
            if (cur < nums[i])
                return false;
        }
        return true;
    }
}",1454831999
Ash Ketchum,user8787Y,485,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        ans = 0
        for i in range(len(nums)):
            if nums[i] == 0:
                k = abs(sum(nums[:i]) - sum(nums[i:]))
                if k==0:
                    ans += 2
                if k==1:
                    ans += 1
                
        return ans",1454808745
Ash Ketchum,user8787Y,485,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        n, m = len(nums), len(queries)
        pre = [0]*(n+1)
        for l, r in queries:
            pre[l] += 1
            pre[r+1] -= 1
        for i in range(1, n+1):
            pre[i] += pre[i-1]
        for i in range(n):
            if nums[i] > pre[i]:
                return False
        return True",1454813809
Ash Ketchum,user8787Y,485,3643,python3,"class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        n, m = len(nums), len(queries)
        l, r = 0, m
        def isPoss(ind):
            pre = [0]*(n+1)
            for l, r, val in queries[:ind]:
                pre[l] += val
                pre[r+1] -= val
            for i in range(1, n+1):
                pre[i] += pre[i-1]
            for i in range(n):
                if nums[i] > pre[i]:
                    return False
            return True
        if not isPoss(r):
            return -1
        while l < r:
            mid = (l+r)//2
            if isPoss(mid):
                r = mid
            else:
                l = mid + 1
        return l",1454839524
IvanHugh,ivanc-e,486,3616,python3,"class Solution:  
    def countValidSelections(self, nums: List[int]) -> int:  
        n = len(nums)  
        
        def simulate(start: int, direction: int, nums_copy: List[int]) -> bool:  
            curr = start  
            
            while 0 <= curr < n:  
                if nums_copy[curr] == 0:  
                    curr += direction  
                else:  
                    nums_copy[curr] -= 1  
                    direction = -direction  
                    curr += direction  
            
            return all(num == 0 for num in nums_copy)  
        
        count = 0  
        for start in range(n):  
            if nums[start] == 0:  
                for direction in [1, -1]:  
                    nums_copy = nums.copy()  
                    if simulate(start, direction, nums_copy):  
                        count += 1  
        
        return count",1454809149
IvanHugh,ivanc-e,486,3639,python3,"class Solution:  
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:  
        n = len(nums)  
        counts = [0] * n  

        for l, r in queries:  
            counts[l] += 1  
            if r + 1 < n:  
                counts[r + 1] -= 1  

        for i in range(1, n):  
            counts[i] += counts[i - 1]  

        for i in range(n):  
            if nums[i] > counts[i]:  
                return False  
        return True",1454816294
IvanHugh,ivanc-e,486,3643,python3,"class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        n = len(nums)  
        m = len(queries)
        
        if all(v == 0 for v in nums):
            return 0
        
        def check(x) -> bool:
            counts = [0] * n  
            for l, r, v in queries[:x+1]:  
                counts[l] += v
                if r + 1 < n:  
                    counts[r + 1] -= v

            for i in range(1, n):  
                counts[i] += counts[i - 1]  

            for i in range(n):  
                if nums[i] > counts[i]:  
                    return False  
            return True
        
        lo, hi = 0, m-1
        while lo <= hi:
            mid = (lo + hi) >> 1
            if check(mid):
                hi = mid - 1
            else:
                lo = mid + 1
        if lo == m:
            return -1
        return lo+1
        ",1454824854
KUNAL KUMAR,KunalKuamr1001,487,3616,java,"class Solution {
    public int countValidSelections(int[] nums) {
        int cnt = 0;
        int n = nums.length;

        for (int start = 0; start < n; start++) {
            if (nums[start] == 0) {
                for (int direction : new int[]{1, -1}) {
                    int[] copy = nums.clone();
                    if (repeate(start, direction, copy)) {
                        cnt++;
                    }
                }
            }
        }

        return cnt;
    }

    private boolean repeate(int start, int direction, int[] copy) {
        int curr = start;
        int n = copy.length;

        while (curr >= 0 && curr < n) {
            if (copy[curr] == 0) {
                curr += direction;
            } else {
                copy[curr]--;
                direction = -direction;
                curr += direction;
            }
        }

        for (int i = 0; i < n; i++) {
            if (copy[i] != 0) {
                return false;
            }
        }

        return true;
    }
}
",1454828497
KUNAL KUMAR,KunalKuamr1001,487,3639,java,"class Solution {
    public boolean isZeroArray(int[] nums, int[][] queries) {
        int n = nums.length;
        int[] diff = new int[n + 1];

        for (int[] query : queries) {
            int l = query[0];
            int r = query[1];
            diff[l] += 1;
            if (r + 1 < n) {
                diff[r + 1] -= 1;
            }
        }

        int coverage = 0;
        for (int i = 0; i < n; i++) {
            coverage += diff[i];
            if (nums[i] > coverage) {
                return false;
            }
        }

        return true;
    }
}
",1454831571
KUNAL KUMAR,KunalKuamr1001,487,3643,java,"class Solution {
    public int minZeroArray(int[] nums, int[][] queries) {
        int n = nums.length;
        int[] curr = nums.clone();
        int[] zeroArr = new int[n];
        
        if (isZero(curr)) {
            System.arraycopy(curr, 0, zeroArr, 0, n);
            return 0;
        }

        boolean midBool = false;
        int left = 0, right = queries.length;
        int ans = -1;

        while (left <= right) {
            int mid = (left + right) / 2;

            if (canBeZero(mid, queries, curr)) {
                ans = mid;
                right = mid - 1;
            } else {
                left = mid + 1;
            }

            if (!midBool && mid == queries.length / 2) {
                int[] diff = new int[n + 1];
                for (int i = 0; i < mid; i++) {
                    int l = queries[i][0], r = queries[i][1], val = queries[i][2];
                    diff[l] += val;
                    if (r + 1 < n) diff[r + 1] -= val;
                }

                int total = 0;
                for (int i = 0; i < n; i++) {
                    total += diff[i];
                    zeroArr[i] = Math.max(0, curr[i] - total);
                }
                midBool = true;
            }
        }

        return ans != -1 ? ans : -1;
    }

    private boolean canBeZero(int k, int[][] queries, int[] curr) {
        int n = curr.length;
        int[] diff = new int[n + 1];

        for (int i = 0; i < k; i++) {
            int l = queries[i][0], r = queries[i][1], val = queries[i][2];
            diff[l] += val;
            if (r + 1 < n) diff[r + 1] -= val;
        }

        int total = 0;
        for (int i = 0; i < n; i++) {
            total += diff[i];
            if (total < curr[i]) return false;
        }

        return true;
    }

    private boolean isZero(int[] nums) {
        for (int num : nums) {
            if (num != 0) return false;
        }
        return true;
    }
}
",1454839534
mui-mit-hanni,mui-mit-hanni,489,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int n = nums.size();
        int validCount = 0;
        int u=0;
        for(auto x:nums) u+=x; 
        auto allZero = [](const vector<int>& arr) {
            for (int num : arr) {
                if (num != 0) return false;
            }
            return true;
        };

        for (int start = 0; start < n; ++start) {
            if (nums[start] != 0) continue; 

            for (int direction : {-1, 1}) {
                vector<int> temp = nums; 
                int curr = start;
                int dir = direction;

                while (curr >= 0 && curr < n) {
                    if (temp[curr] == 0) {
                        curr += dir;
                    } else {
                        temp[curr]--;
                        dir = -dir;
                        curr += dir;
                    }
                }

                if (allZero(temp)) {
                    ++validCount;
                }
            }
        }

        return validCount;
    }
};
",1454809202
mui-mit-hanni,mui-mit-hanni,489,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        vector<int> diff(n + 1, 0); 
        for (const auto& query : queries) {
            int li = query[0];
            int ri = query[1];
            diff[li] -= 1;      
            if (ri + 1 < n) {
                diff[ri + 1] += 1;
            }
        }
        int currDecrement = 0;
        for (int i = 0; i < n; ++i) {
            currDecrement += diff[i];
            if (nums[i] + currDecrement > 0) {
                return false; 
            }
        }

        return true;
    }
};
",1454820925
mui-mit-hanni,mui-mit-hanni,489,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        int q = queries.size();
        vector<int> x = nums; 
        auto check = [&](int k) {
            vector<int> diff(n + 1, 0);
            for (int i = 0; i < k; ++i) {
                int li = queries[i][0], ri = queries[i][1], vali = queries[i][2];
                diff[li] -= vali;
                if (ri + 1 < n) {
                    diff[ri + 1] += vali;
                }
            }
            int currDecrement = 0;
            for (int i = 0; i < n; ++i) {
                currDecrement += diff[i];
                if (x[i] + currDecrement > 0) {
                    return false; 
                }
            }
            return true;
        };

        int left = 0, right = q, result = -1;
        while (left <= right) {
            int mid = left + (right - left) / 2;
            if (check(mid)) {
                result = mid; 
                right = mid - 1;
            } else {
                left = mid + 1;
            }
        }

        return result;
    }
};
",1454824888
Pankajkumar21,Pankajkumar21,490,3616,cpp,"class Solution {
public:
    
    int countValidSelections(vector<int>& nums) {
         int n = nums.size(), cnt = 0;
    for (int i = 0; i < n; ++i)
    {
        if (nums[i] == 0)
        {
            for (int d = 0; d < 2; ++d)
            {
                vector<int> tmp = nums;
                int curr = i, step = (d == 0) ? -1 : 1;
                while (curr >= 0 && curr < n)
                {
                    if (tmp[curr] == 0)
                        curr += step;
                    else
                    {
                        tmp[curr]--;
                        step = -step;
                        curr += step;
                    }
                }
                bool  check = true;
                for (int x : tmp)
                {
                    if (x != 0)
                    {
                         check = false;
                        break;
                    }
                }
                if ( check)
                    cnt++;
            }
        }
    }
    return cnt;
    }
};",1454813638
Pankajkumar21,Pankajkumar21,490,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        
        int n=nums.size();
        vector<int>pref(n,0);
        for(auto it:queries){
            int l=it[0],r=it[1];
            pref[l]-=1;
            if(r+1<n)pref[r+1]+=1;
        }
        int p=0;
        for(int i=0;i<n;i++){
            cout<<pref[i]<<"" "";
            p+=pref[i];
            if(nums[i]+p>0)return 0;
        }
        return 1;
    }
};",1454822192
Pankajkumar21,Pankajkumar21,490,3643,cpp,"class Solution {
public:
    bool check(vector<int>& nums) {
        for (int x : nums) {
            if (x != 0)
                return false;
        }
        return true;
    }

    bool f(vector<int> nums, const vector<vector<int>>& queries, int k) {
        vector<int> pref(nums.size() + 1, 0);

        for (int i = 0; i < k; ++i) {
            int l = queries[i][0], r = queries[i][1], val = queries[i][2];
            pref[l] -= val;
            if (r + 1 < nums.size())
                pref[r + 1] += val;
        }

        int curr = 0;
        for (int i = 0; i < nums.size(); ++i) {
            curr += pref[i];
            nums[i] += curr;
            if (nums[i] < 0)
                nums[i] = 0;
        }

        return check(nums);
    }
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        bool flag=1;
        for(auto it:nums){
            if(it>0)flag=0;
        }
        if(flag)return 0;
        int l = 1, r = queries.size(), ans = -1;

        while (l <= r) {
            int mid = l + (r - l) / 2;
            if (f(nums, queries, mid)) {
                ans = mid;
                r = mid - 1;
            } else {
                l = mid + 1;
            }
        }

        return ans;
    }
};",1454832124
abz-codes,abz-codes,491,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int ans = 0;
        for (int i = 0; i < nums.size(); i++) {
            if (nums[i] == 0)
            ans += works(nums, i, 1) + works(nums, i, -1);
        }
        return ans;
    }

    bool works(vector<int> nums, int curr, int dir) {
        int n = nums.size();

        while (curr >= 0 && curr < n) {
            if (nums[curr] == 0) {
                curr += dir;
            } else{
                nums[curr]--;
                dir*=-1;
                curr += dir;
            }
        }
        for (auto& c: nums) if (c != 0) return false;
        return true;
    }
};",1454808160
abz-codes,abz-codes,491,3639,cpp,"struct Fen{
    vector<long long> tt;
    int n;
    Fen() {}
    Fen(int nn) : n(nn+5) {
        tt.resize(n+3, 0);
    }
    void init(int nn) {
        n = nn+5;
        tt.resize(n+3, 0);
    }

    //add to [i, n]
    void add(int i, int dx) {
        i++;
        while (i <= n) {
            tt[i] += dx;
            i += i & -i;
        }
    }
    //adds to a range [l, r]
    void addR(int l, int r, int dx) {
        add(l, dx);
        add(r+1, -dx);
    }
    //gets prefix sum [0, i]
    long long getR(int i) const {
        i++;
        long long ans = 0;
        i = min(i, n);
        while (i > 0) {
            ans += tt[i];
            i -= i & -i;
        }
        return ans;
    }

    //gets value at index i
    long long get(int i) const {
        return getR(i) - getR(i - 1);
    }
};
class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        Fen fenny(n);
        for (auto& c: queries) {
            auto l = c[0] + 1;
            auto r = c[1] + 1;
            fenny.addR(l, r, 1);
        }
        for (int i = 1; i <= n; i++) {
            int cnt = fenny.getR(i);
            if (cnt < nums[i-1]) return false;
        }
        return true;
    }
};",1454813404
abz-codes,abz-codes,491,3643,cpp,"#ifndef ATCODER_INTERNAL_BITOP_HPP
#define ATCODER_INTERNAL_BITOP_HPP 1

#ifdef _MSC_VER
#include <intrin.h>
#endif

namespace atcoder {

namespace internal {

// @param n `0 <= n`
// @return minimum non-negative `x` s.t. `n <= 2**x`
int ceil_pow2(int n) {
    int x = 0;
    while ((1U << x) < (unsigned int)(n)) x++;
    return x;
}

// @param n `1 <= n`
// @return minimum non-negative `x` s.t. `(n & (1 << x)) != 0`
constexpr int bsf_constexpr(unsigned int n) {
    int x = 0;
    while (!(n & (1 << x))) x++;
    return x;
}

// @param n `1 <= n`
// @return minimum non-negative `x` s.t. `(n & (1 << x)) != 0`
int bsf(unsigned int n) {
#ifdef _MSC_VER
    unsigned long index;
    _BitScanForward(&index, n);
    return index;
#else
    return __builtin_ctz(n);
#endif
}

}  // namespace internal

}  // namespace atcoder

#endif  // ATCODER_INTERNAL_BITOP_HPP

#ifndef ATCODER_LAZYSEGTREE_HPP
#define ATCODER_LAZYSEGTREE_HPP 1

#include <algorithm>
#include <cassert>
#include <iostream>
#include <vector>

namespace atcoder {

template <class S,
          S (*op)(S, S),
          S (*e)(),
          class F,
          S (*mapping)(F, S),
          F (*composition)(F, F),
          F (*id)()>
struct lazy_segtree {
  public:
    lazy_segtree() : lazy_segtree(0) {}
    explicit lazy_segtree(int n) : lazy_segtree(std::vector<S>(n, e())) {}
    explicit lazy_segtree(const std::vector<S>& v) : _n(int(v.size())) {
        log = internal::ceil_pow2(_n);
        size = 1 << log;
        d = std::vector<S>(2 * size, e());
        lz = std::vector<F>(size, id());
        for (int i = 0; i < _n; i++) d[size + i] = v[i];
        for (int i = size - 1; i >= 1; i--) {
            update(i);
        }
    }

    void set(int p, S x) {
        assert(0 <= p && p < _n);
        p += size;
        for (int i = log; i >= 1; i--) push(p >> i);
        d[p] = x;
        for (int i = 1; i <= log; i++) update(p >> i);
    }

    S get(int p) {
        assert(0 <= p && p < _n);
        p += size;
        for (int i = log; i >= 1; i--) push(p >> i);
        return d[p];
    }

    S prod(int l, int r) {
        assert(0 <= l && l <= r && r <= _n);
        if (l == r) return e();

        l += size;
        r += size;

        for (int i = log; i >= 1; i--) {
            if (((l >> i) << i) != l) push(l >> i);
            if (((r >> i) << i) != r) push((r - 1) >> i);
        }

        S sml = e(), smr = e();
        while (l < r) {
            if (l & 1) sml = op(sml, d[l++]);
            if (r & 1) smr = op(d[--r], smr);
            l >>= 1;
            r >>= 1;
        }

        return op(sml, smr);
    }

    S all_prod() { return d[1]; }

    void apply(int p, F f) {
        assert(0 <= p && p < _n);
        p += size;
        for (int i = log; i >= 1; i--) push(p >> i);
        d[p] = mapping(f, d[p]);
        for (int i = 1; i <= log; i++) update(p >> i);
    }
    void apply(int l, int r, F f) {
        assert(0 <= l && l <= r && r <= _n);
        if (l == r) return;

        l += size;
        r += size;

        for (int i = log; i >= 1; i--) {
            if (((l >> i) << i) != l) push(l >> i);
            if (((r >> i) << i) != r) push((r - 1) >> i);
        }

        {
            int l2 = l, r2 = r;
            while (l < r) {
                if (l & 1) all_apply(l++, f);
                if (r & 1) all_apply(--r, f);
                l >>= 1;
                r >>= 1;
            }
            l = l2;
            r = r2;
        }

        for (int i = 1; i <= log; i++) {
            if (((l >> i) << i) != l) update(l >> i);
            if (((r >> i) << i) != r) update((r - 1) >> i);
        }
    }

    template <bool (*g)(S)> int max_right(int l) {
        return max_right(l, [](S x) { return g(x); });
    }
    template <class G> int max_right(int l, G g) {
        assert(0 <= l && l <= _n);
        assert(g(e()));
        if (l == _n) return _n;
        l += size;
        for (int i = log; i >= 1; i--) push(l >> i);
        S sm = e();
        do {
            while (l % 2 == 0) l >>= 1;
            if (!g(op(sm, d[l]))) {
                while (l < size) {
                    push(l);
                    l = (2 * l);
                    if (g(op(sm, d[l]))) {
                        sm = op(sm, d[l]);
                        l++;
                    }
                }
                return l - size;
            }
            sm = op(sm, d[l]);
            l++;
        } while ((l & -l) != l);
        return _n;
    }

    template <bool (*g)(S)> int min_left(int r) {
        return min_left(r, [](S x) { return g(x); });
    }
    template <class G> int min_left(int r, G g) {
        assert(0 <= r && r <= _n);
        assert(g(e()));
        if (r == 0) return 0;
        r += size;
        for (int i = log; i >= 1; i--) push((r - 1) >> i);
        S sm = e();
        do {
            r--;
            while (r > 1 && (r % 2)) r >>= 1;
            if (!g(op(d[r], sm))) {
                while (r < size) {
                    push(r);
                    r = (2 * r + 1);
                    if (g(op(d[r], sm))) {
                        sm = op(d[r], sm);
                        r--;
                    }
                }
                return r + 1 - size;
            }
            sm = op(d[r], sm);
        } while ((r & -r) != r);
        return 0;
    }

  private:
    int _n, size, log;
    std::vector<S> d;
    std::vector<F> lz;

    void update(int k) { d[k] = op(d[2 * k], d[2 * k + 1]); }
    void all_apply(int k, F f) {
        d[k] = mapping(f, d[k]);
        if (k < size) lz[k] = composition(f, lz[k]);
    }
    void push(int k) {
        all_apply(2 * k, lz[k]);
        all_apply(2 * k + 1, lz[k]);
        lz[k] = id();
    }
};

}  // namespace atcoder

#endif  // ATCODER_LAZYSEGTREE_HPP

using namespace atcoder;

using S = int;
using F = int;
S op(S l, S r) {
    return max(l, r);
}
S e() {
    return 0;
}

S mapping(F l, S r) {
    r -= l;
    return r;
}

F composition(F l, F r) {
    return l + r;
}
F id() {
    return 0;
}

class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        {
            bool ok = true;
            for (auto& c: nums) if (c != 0) {
                ok = false;
                break;
            }
            if (ok) return 0;
        }
        lazy_segtree<S, op, e, F, mapping, composition, id> seg(nums);
        int ans = INT_MAX;
        int k = 0;
        for (auto& c : queries) {
            auto l = c[0];
            auto r = c[1];
            auto val = c[2];
            int before = seg.prod(l, r+1);
            seg.apply(l, r+1, val);
            int after = seg.prod(l,r+1);
            //cout << k << "": "" << before << "", "" << after << '\n';
            if (before > 0 && after <= 0) {
                ans = k;
            }
            k++;
        }
        for (int i = 0; i < nums.size(); i++) {
            if (seg.get(i) > 0) return -1;
        }
        return ans+1;
    }
};",1454839656
Ankur kumar,ankuraj_27,493,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int n=nums.size(),cnt=0;
        for(int i=0;i<n;i++) {
            if(nums[i]==0) {
                int sum1=0,sum2=0;
                for(int j=0;j<i;j++) {
                    sum1+=nums[j];
                }
                for(int j=i+1;j<n;j++) {
                    sum2+=nums[j];
                }
                if(sum1==sum2) cnt+=2;
                else if(abs(sum1-sum2)==1) cnt++;
            }
        }
        return cnt;
    }
};",1454812634
Ankur kumar,ankuraj_27,493,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& q) {
        int n=nums.size();
        vector<int> v(n+1);
        for(int i=0;i<q.size();i++) {
            v[q[i][0]]++;
            v[q[i][1]+1]--;
        }
        for(int i=1;i<n;i++) v[i]+=v[i-1];
        for(int i=0;i<n;i++) {
            if(v[i]<nums[i]) return false;
        }
        return true;
    }
};",1454820033
Ankur kumar,ankuraj_27,493,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& q) {
        long long n=nums.size();
        long long s=1,e=q.size(),mid,ans=-1;
        int a=count(nums.begin(),nums.end(),0);
        if(a==n) return 0;
        while(s<=e) {
            mid=(s+e)/2;
            vector<long long> v(n+1);
            int x=1;
            for(int i=0;i<mid;i++) {
                v[q[i][0]]+=q[i][2];
                v[q[i][1]+1]-=q[i][2];
            }
            for(int i=1;i<n;i++) v[i]+=v[i-1];
            for(int i=0;i<n;i++) {
                if(v[i]<nums[i]) {
                    x=0;
                    break;
                }
            }
            if(x) ans=mid,e=mid-1;
            else s=mid+1;
        }
        return ans;
    }
};",1454839676
Manav Majithia,manavmajithia6,494,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& arr) {
        int n = arr.size();
        int ans = 0;
        for(int i = 0;i < n;i++){
            if(arr[i] == 0){
                int s1 = 0,s2 = 0;
                for(int j = i - 1;j >= 0;j--)
                    s1 += arr[j];
                for(int j = i + 1;j < n;j++)
                    s2 += arr[j];
                if(s1 == s2)
                    ans += 2;
                else if(abs(s1 - s2) == 1)
                    ans++;
            }
        }
        return ans;
    }
};",1454812527
Manav Majithia,manavmajithia6,494,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& q) {
        int n = nums.size();
        vector<long long> arr(n);
        
        arr.push_back(0ll);
        for(int i = 0;i < q.size();i++){
            arr[q[i][0]]--;
            arr[q[i][1] + 1]++;
        }
        for(int i = 1;i < n;i++)
            arr[i] += arr[i-1];
        for(int i = 0;i < n;i++){
            // arr[i] = (long long)nums[i];
            arr[i] += nums[i];
        }
        for(int i = 0;i < n;i++){
            // cout<<arr[i]<<"" ""<<i<<""\n"";
            if(arr[i] > 0)
                return false;
        }
        return true;
    }
};",1454830234
Manav Majithia,manavmajithia6,494,3643,cpp,"class Solution {
public:
    bool check(vector<int>& nums, vector<vector<int>>& q, int mid){
        int n = nums.size();
        vector<long long> arr(n);
        
        arr.push_back(0ll);
        for(int i = 0;i < mid;i++){
            arr[q[i][0]] -= q[i][2];
            arr[q[i][1] + 1] += q[i][2];
        }
        for(int i = 1;i < n;i++)
            arr[i] += arr[i-1];
        for(int i = 0;i < n;i++){
            // arr[i] = (long long)nums[i];
            arr[i] += nums[i];
        }
        for(int i = 0;i < n;i++){
            // cout<<arr[i]<<"" ""<<i<<""\n"";
            if(arr[i] > 0)
                return false;
        }
        return true;
    }
    int minZeroArray(vector<int>& nums, vector<vector<int>>& q) {
        int n = nums.size();
        int ans = -1;
        int l = 0,r = q.size();
        while(l <= r){
            int mid = (l + r)/2;
            if(check(nums, q, mid)){
                ans = mid;
                r = mid - 1;
            }
            else
                l = mid + 1;
        }
        return ans;
    }
};",1454839756
Shraddha Gulati,shraddha_1707,495,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int n = nums.size(), ans = 0;
        for (int i = 0; i < n; i++) {
            if (nums[i] != 0)
                continue;

            for (int dir : {-1, 1}) {
                vector<int> temp = nums;
                int curr = i, d = dir;
                while (curr >= 0 && curr < n) {
                    if (temp[curr] == 0) {
                        curr += d;
                    } else {
                        temp[curr]--;
                        d = -d;
                        curr += d;
                    }
                }
                bool flag = true;
                for (auto x : temp) {
                    if (x != 0) {
                        flag = false;
                        break;
                    }
                }
                if (flag)
                    ans += 1;
            }
        }
        return ans;
    }
};
",1454808964
Shraddha Gulati,shraddha_1707,495,3639,cpp,"#include <bits/stdc++.h>
using namespace std;
#define ll long long int

class SegTree {
public:
    ll n;
    vector<ll> seg, lazy;

    SegTree(ll N) {
        n = N;
        seg.resize(4 * n);
        lazy.resize(4 * n, 0);
    }

    void build(ll ind, ll low, ll high, vector<int> &a) {
        if (low == high) {
            seg[ind] = a[low];
            return;
        }
        ll mid = (low + high) / 2;
        build(ind * 2 + 1, low, mid, a);
        build(ind * 2 + 2, mid + 1, high, a);
        seg[ind] = max(seg[2 * ind + 1], seg[2 * ind + 2]);
    }

    ll query(ll ind, ll low, ll high, ll l, ll r) {

        if (lazy[ind] != 0) {
            seg[ind] += lazy[ind];
            if (low != high) {
                lazy[2 * ind + 1] += lazy[ind];
                lazy[2 * ind + 2] += lazy[ind];
            }
            lazy[ind] = 0;
        }

        if (high < l || r < low) {
            return LLONG_MIN; 
        }


        if (low >= l && high <= r) {
            return seg[ind];
        }


        ll mid = (low + high) / 2;
        ll left = query(2 * ind + 1, low, mid, l, r);
        ll right = query(2 * ind + 2, mid + 1, high, l, r);
        return max(left, right);
    }

    void update(ll ind, ll low, ll high, ll l, ll r, ll val) {

        if (lazy[ind] != 0) {
            seg[ind] += lazy[ind];
            if (low != high) {
                lazy[2 * ind + 1] += lazy[ind];
                lazy[2 * ind + 2] += lazy[ind];
            }
            lazy[ind] = 0;
        }

        if (high < l || r < low) {
            return;
        }

        // Complete overlap
        if (low >= l && high <= r) {
            seg[ind] += val;
            if (low != high) {
                lazy[2 * ind + 1] += val;
                lazy[2 * ind + 2] += val;
            }
            return;
        }

        // Partial overlap
        ll mid = (low + high) / 2;
        update(2 * ind + 1, low, mid, l, r, val);
        update(2 * ind + 2, mid + 1, high, l, r, val);
        seg[ind] = max(seg[2 * ind + 1], seg[2 * ind + 2]);
    }
};

class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        SegTree s1(n);
        s1.build(0, 0, n - 1, nums);
        for (int i = 0; i < queries.size(); i++) {
            ll a = queries[i][0];
            ll b = queries[i][1];
            ll u = -1; 
            s1.update(0, 0, n - 1, a, b, u);
        }
        ll maxValue = s1.query(0, 0, n - 1, 0, n - 1);
        cout << maxValue << endl;
        return maxValue <= 0; 
    }
};
",1454821889
Shraddha Gulati,shraddha_1707,495,3643,cpp,"#include <bits/stdc++.h>
using namespace std;
#define ll long long int

class SegTree {
public:
    ll n;
    vector<ll> seg, lazy;

    SegTree(ll N) {
        n = N;
        seg.resize(4 * n);
        lazy.resize(4 * n, 0);
    }

    void build(ll ind, ll low, ll high, vector<int> &a) {
        if (low == high) {
            seg[ind] = a[low];
            return;
        }
        ll mid = (low + high) / 2;
        build(ind * 2 + 1, low, mid, a);
        build(ind * 2 + 2, mid + 1, high, a);
        seg[ind] = max(seg[2 * ind + 1], seg[2 * ind + 2]);
    }

    ll query(ll ind, ll low, ll high, ll l, ll r) {

        if (lazy[ind] != 0) {
            seg[ind] += lazy[ind];
            if (low != high) {
                lazy[2 * ind + 1] += lazy[ind];
                lazy[2 * ind + 2] += lazy[ind];
            }
            lazy[ind] = 0;
        }

        if (high < l || r < low) {
            return LLONG_MIN; 
        }


        if (low >= l && high <= r) {
            return seg[ind];
        }


        ll mid = (low + high) / 2;
        ll left = query(2 * ind + 1, low, mid, l, r);
        ll right = query(2 * ind + 2, mid + 1, high, l, r);
        return max(left, right);
    }

    void update(ll ind, ll low, ll high, ll l, ll r, ll val) {

        if (lazy[ind] != 0) {
            seg[ind] += lazy[ind];
            if (low != high) {
                lazy[2 * ind + 1] += lazy[ind];
                lazy[2 * ind + 2] += lazy[ind];
            }
            lazy[ind] = 0;
        }

        if (high < l || r < low) {
            return;
        }

        // Complete overlap
        if (low >= l && high <= r) {
            seg[ind] += val;
            if (low != high) {
                lazy[2 * ind + 1] += val;
                lazy[2 * ind + 2] += val;
            }
            return;
        }

        // Partial overlap
        ll mid = (low + high) / 2;
        update(2 * ind + 1, low, mid, l, r, val);
        update(2 * ind + 2, mid + 1, high, l, r, val);
        seg[ind] = max(seg[2 * ind + 1], seg[2 * ind + 2]);
    }
};

class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        SegTree s1(n);
        s1.build(0, 0, n - 1, nums);
        ll maxValue = s1.query(0, 0, n - 1, 0, n - 1);
        if (maxValue <= 0) {
            return 0;
        }
        for (int k = 0; k < queries.size(); k++) {
            int l = queries[k][0];
            int r = queries[k][1];
            int val = -queries[k][2];
            s1.update(0, 0, n - 1, l, r, val);
            ll maxValue = s1.query(0, 0, n - 1, 0, n - 1);
            if (maxValue <= 0) {
                return k + 1; 
            }
        }
        return -1; 
    }
};
",1454832330
sunsq,sunsq,496,3616,java,"class Solution {
    public int countValidSelections(int[] nums) {
        int res = 0;
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] == 0) {
                if (can(nums.clone(), i, 1)) {
                    res++;
                }
                if (can(nums.clone(), i, -1)) {
                    res++;
                }
            }
        }
        return res;
    }

    private boolean can(int[] nums, int i, int d) {
        while (i >= 0 && i < nums.length) {
            if (nums[i] != 0) {
                nums[i]--;
                d = -d;
            }
            i += d;
        }
        for (int x : nums) {
            if (x > 0) {
                return false;
            }
        }
        return true;
    }
}",1454809679
sunsq,sunsq,496,3639,java,"class Solution {
    public boolean isZeroArray(int[] nums, int[][] queries) {
        int n = nums.length;
        int[] diff = new int[n + 1];
        for (int[] q : queries) {
            diff[q[0]]++;
            diff[q[1] + 1]--;
        }
        int sum = 0;
        for (int i = 0; i < n; i++) {
            sum += diff[i];
            if (nums[i] > sum) {
                return false;
            }
        }
        return true;
    }
}",1454814766
sunsq,sunsq,496,3643,java,"class Solution {
    public int minZeroArray(int[] nums, int[][] queries) {
        int lo = 0;
        int hi = queries.length + 1;
        while (lo < hi) {
            int mid = lo + (hi - lo) / 2;
            if (can(nums, queries, mid)) {
                hi = mid;
            } else {
                lo = mid + 1;
            }
        }
        return lo == queries.length + 1 ? -1 : lo;
    }

    private boolean can(int[] nums, int[][] queries, int k) {
        int n = nums.length;
        int[] diff = new int[n + 1];
        for (int i = 0; i < k; i++) {
            int[] q = queries[i];
            diff[q[0]] += q[2];
            diff[q[1] + 1] -= q[2];
        }
        // System.out.println(k + "" "" + Arrays.toString(diff));
        int sum = 0;
        for (int i = 0; i < n; i++) {
            sum += diff[i];
            if (nums[i] > sum) {
                return false;
            }
        }
        return true;
    }
}

/*

[7,6,8]
[[0,0,2],[0,1,5],[2,2,5],[0,2,4]]

4

*/",1454832390
Aryabhatta Aryan,aryabhatta0,497,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int n = nums.size(), result = 0;

        auto simulate = [&](int start, int direction) {
            vector<int> temp = nums;
            int curr = start;
            while (curr >= 0 && curr < n) {
                if (temp[curr] == 0) {
                    curr += direction;
                } else {
                    temp[curr]--;
                    direction = -direction;
                    curr += direction;
                }
            }
            return all_of(temp.begin(), temp.end(), [](int x) { return x == 0; });
        };

        for (int i = 0; i < n; i++) {
            if (nums[i] == 0) {
                result += simulate(i, 1);
                result += simulate(i, -1);
            }
        }
        return result;
    }
};
",1454809350
Aryabhatta Aryan,aryabhatta0,497,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        // < 0 is allowed
        int n = nums.size();
        vector<int> pre(n, 0);
        for(auto it: queries) {
            pre[it[0]]--;
            if (it[1]<n-1) pre[it[1]+1]++;
        }

        for(int i=1; i<n; i++) pre[i] += pre[i-1];
        for(int i=0; i<n; i++) {
            if(nums[i]+pre[i]>0) return false;
        }
        return true;
    }
};
",1454818960
Aryabhatta Aryan,aryabhatta0,497,3643,cpp,"class Solution {
public:
    bool check(vector<int>& nums, vector<vector<int>>& queries, int k) {
        int n = nums.size();
        vector<int> pre(n+1, 0);
        for(int i=0; i<k; i++) {
            pre[queries[i][0]] -= queries[i][2];
            pre[queries[i][1]+1] += queries[i][2];
        }

        for(int i=1; i<n; i++) pre[i] += pre[i-1];
        for(int i=0; i<n; i++) {
            if(nums[i]+pre[i]>0) return false;
        }
        return true;
    }

    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {

        // har query ke baad prefix sum? No!
        int m = queries.size();
        int lo=0, hi=m;
        int ans=-1;
        while(lo<=hi) {
            int mid = lo + (hi-lo)/2;
            if(check(nums, queries, mid)) {
                ans = mid;
                hi = mid-1;
            } else lo = mid+1;
        }

        return ans;
    }
};",1454839825
Vlad,votrubac,498,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int res = 0;
        int suml = 0, sumr = accumulate(begin(nums), end(nums), 0);
        for (int i = 0; i < nums.size(); ++i) {
            suml += nums[i];
            sumr -= nums[i];
            if (nums[i] == 0) {
                if (suml == sumr)
                    res += 2;
                else if (abs(suml - sumr) == 1)
                    res += 1;
            }
        }
        return res;
    }
};",1454809075
Vlad,votrubac,498,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        vector<int> line(nums.size() + 1);
        for (auto &q : queries) {
            ++line[q[0]];
            --line[q[1] + 1];
        }
        int cur = 0;
        for (int i = 0; i < nums.size(); ++i) {
            cur += line[i];
            if (nums[i] > cur)
                return false;
        }
        return true;
    }
};",1454816730
Vlad,votrubac,498,3643,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& q, int right) {
        vector<int> line(nums.size() + 1);
        for (int i = 0; i < right; ++i) {
            line[q[i][0]] += q[i][2];
            line[q[i][1] + 1] -= q[i][2];
        }
        int cur = 0;
        for (int i = 0; i < nums.size(); ++i) {
            cur += line[i];
            if (nums[i] > cur)
                return false;
        }
        return true;
    }    
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int l = 0, r = queries.size() + 1;
        while (l < r) {
            int m = (l + r) / 2;
            if (isZeroArray(nums, queries, m)) {
                r = m;
            }
            else {
                l = m + 1;
            }
        }
        return l <= queries.size() ? l : -1;
    }
};",1454825283
TJC,Chiouchiouok,500,3616,cpp,"class Solution {
    bool allzero(vector<int>& tmp) {
        for (int num : tmp) {
            if (num != 0) {
                return false;
            }
        }

        return true;
    }

    void process(vector<int>& nums, int cur, int dir) {
        if (cur < 0 || cur >= nums.size()) {
            return;
        }

        if (nums[cur] == 0) {
            process(nums, cur + dir, dir);
        } else if (nums[cur] > 0) {
            nums[cur]--;
            dir = -dir;
            process(nums, cur + dir, dir);
        }
    }


public:
    int countValidSelections(vector<int>& nums) {
        int ret = 0;
        int n = nums.size();

        for (int i = 0; i < n; i++) {
            if (nums[i] != 0) {
                continue;
            }
            auto tmp1 = nums;
            process(tmp1, i, 1);
            
            if (allzero(tmp1)) {
                ret++;
            }
            auto tmp2 = nums;
            process(tmp2, i, -1);
            if (allzero(tmp2)) {
                ret++;
            }
            
        }

        return ret;
    }
};",1454813405
TJC,Chiouchiouok,500,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        vector<int> start(n, 0);
        vector<int> end(n, 0);

        for (auto q : queries) {
            start[q[0]]++;
            end[q[1]]++;
        }

        vector<int> v(n);

        int count = 0;

        for (int i = 0; i < n; i++) {
            count += start[i];
            v[i] = count;
            count -= end[i];

            if (v[i] < nums[i]) {
                return false;
            }
        }

        return true;

        
    }
};


// 0   2
//   1   3

//     count",1454824658
TJC,Chiouchiouok,500,3643,cpp,"class Solution {
    bool helper(vector<int>& nums, vector<vector<int>>& queries, int k) {
        
        int n = nums.size();
        
        vector<int> start(n, 0);
        vector<int> end(n, 0);
        
        for (int i = 0; i < k; i++) {
            auto q = queries[i];
            start[q[0]] += q[2];
            end[q[1]] += q[2];
        }

        int count = 0;
        
        for (int i = 0; i < n; i++) {
            count += start[i];

            if (count < nums[i]) {
                return false;
            }
            
            count -= end[i];
        }

        return true;
    }
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        
        if (!helper(nums, queries, queries.size())) {
            return -1;
        }

        int left = 0;
        int right = queries.size();

        while (left < right) {
            int mid = left + (right - left) / 2;

            if (helper(nums, queries, mid)) {
                right = mid;
            } else {
                left = mid + 1;
            }
        }

        return left;
        
    }
};",1454839989
Abhay_Ps1,Abhay_Ps1,501,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int size = nums.size();
int countValid = 0;

// Function to simulate the process given a start index and direction
auto runSimulation = [&](int startIdx, int moveDirection) {
    vector<int> numsCopy = nums;  // Work with a copy of the original array
    int currentIndex = startIdx;

    while (currentIndex >= 0 && currentIndex < size) {
        if (numsCopy[currentIndex] == 0) {
            currentIndex += moveDirection;  // Move in the specified direction
        } else {
            numsCopy[currentIndex]--;   // Decrement the value at current index
            moveDirection = -moveDirection;  // Reverse the direction
            currentIndex += moveDirection;  // Move in the new direction
        }
    }

    // Check if all elements are zero after the simulation
    for (int val : numsCopy) {
        if (val != 0) return false;
    }
    return true;
};

// Iterate through all indices to check where nums[i] is 0
for (int i = 0; i < size; ++i) {
    if (nums[i] == 0) {
        // Try both directions (left and right) from the current index
        if (runSimulation(i, -1)) countValid++;
        if (runSimulation(i, 1)) countValid++;
    }
}

return countValid;

    }
};",1454832628
Abhay_Ps1,Abhay_Ps1,501,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n=nums.size();
        vector<int>pref(n+1,0);
        for(auto q:queries){
            pref[q[0]]=pref[q[0]]-1;
            pref[q[1]+1]+=1;
        }
        for(int i=1;i<n+1;i++){
            pref[i]+=pref[i-1];
        }
        for(int i=0;i<n;i++){
            if(nums[i]+pref[i]>0) return false;
            // cout<<nums[i]+pref[i]<<"" "";
        }
        // cout<<""\n"";
        return true;
    }
};",1454819122
Abhay_Ps1,Abhay_Ps1,501,3643,cpp,"class Solution {
public:
    bool done(vector<int>&nums,vector<vector<int>>&queries,int k){
        int n=nums.size();
        vector<int>pref(n+1,0);
        for(int i=0;i<k;i++){
            pref[queries[i][0]]=pref[queries[i][0]]-queries[i][2];
            pref[queries[i][1]+1]=pref[queries[i][1]+1]+queries[i][2];
        }
        for(int i=1;i<n+1;i++){
            pref[i]+=pref[i-1];
        }
        for(int i=0;i<n;i++){
            if(nums[i]+pref[i]>0) return false;
            // cout<<nums[i]+pref[i]<<"" "";
        }
        // cout<<""\n"";
        return true;
    }
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int low=0,high=queries.size();
        int ans=-1;
        while(low<=high){
            int mid=(low+high)/2;
            if(done(nums,queries,mid)){
                ans=mid;
                high=mid-1;
            } else low=mid+1;
        }
        return ans;
    }
};",1454827404
Sanket Disale,sanke_tdisale871,502,3616,cpp,"class Solution {
public:
 bool performSimulation(vector<int> arr, int idx, int dir) {
        int len = arr.size();

        while (idx >= 0 && idx < len) {
            if (arr[idx] == 0) {
                idx += dir;
            } else {
                arr[idx]--;
                dir *= -1;
                idx += dir;
            }
        }
     for (int val : arr) {
            if (val != 0) {
                return false;
            }
        }
        return true;
    }
    int countValidSelections(vector<int>& nums) {
        int len = nums.size();
        int count = 0;

        for (int i = 0; i < len; ++i) {
            if (nums[i] == 0) {
                if (performSimulation(nums, i, 1)) {
                    count++;
                }
                if (performSimulation(nums, i, -1)) {
                    count++;
                }
            }
        }
        return count;
    }
};",1454829496
Sanket Disale,sanke_tdisale871,502,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& arr, vector<vector<int>>& ops) {
        int len = arr.size();
        vector<int> d(len + 1, 0);

        for (const auto& op : ops) {
            int start = op[0];
            int end = op[1];
            d[start]--;
            if (end + 1 < len) d[end + 1]++;
        }

        int curr = 0;
        for (int i = 0; i < len; ++i) {
            curr += d[i];
            arr[i] += curr;
            if (arr[i] > 0) return false;
        }

        return true;
    }
    
};",1454826584
Sanket Disale,sanke_tdisale871,502,3643,cpp,"class Solution {
private:
bool checkZeroArray(vector<int> arr, vector<vector<int>>& qry, int limit) {
        int sz = arr.size();
        vector<int> delta(sz + 1, 0);

        for (int i = 0; i < limit; ++i) {
            int start = qry[i][0];
            int end = qry[i][1];
            int val = qry[i][2];

            delta[start] -= val;
            if (end + 1 < sz) {
                delta[end + 1] += val;
            }
        }

        int sum = 0;
        for (int i = 0; i < sz; ++i) {
            sum += delta[i];
            arr[i] += sum;
            if (arr[i] > 0) {
                return false;
            }
        }
        return true;
    }
public:
    int minZeroArray(vector<int>& arr, vector<vector<int>>& qry) {
        int low = 0, high = qry.size();
        int res = -1;

        while (low <= high) {
            int mid = low + (high - low) / 2;

            if (checkZeroArray(arr, qry, mid)) {
                res = mid;
                high = mid - 1;
            } else {
                low = mid + 1;
            }
        }
        return res;
    }
};",1454840082
hope_ma,hope_ma,503,3616,python3,"class Solution:
  def countValidSelections(self, nums: List[int]) -> int:
    n = len(nums)
    left = [0 for _ in range(n)]
    left[0] = nums[0]
    for i in range(1, n):
      left[i] = left[i - 1] + nums[i]
    right = [0 for _ in range(n)]
    right[n - 1] = nums[n - 1]
    for i in range(n - 2, -1, -1):
      right[i] = right[i + 1] + nums[i]

    ret = 0
    for i in range(n):
      if nums[i] == 0:
        if left[i] == right[i]:
          ret += 2
        elif abs(left[i] - right[i]) == 1:
          ret += 1
    return ret",1454809888
hope_ma,hope_ma,503,3639,python3,"class Solution:
  def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
    n = len(nums)
    diffs = [0 for _ in range(n + 1)]
    for a, b in queries:
      diffs[a] += 1
      diffs[b + 1] -= 1
    
    acc = 0
    for i in range(n):
      acc += diffs[i]
      if acc < nums[i]:
        return False
    return True",1454818330
hope_ma,hope_ma,503,3643,python3,"class Solution:
  def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
    n = len(nums)
    n_queries = len(queries)
    low = 0
    high = n_queries + 1
    while low < high:
      mid = low + ((high - low) >> 1)
      diffs = [0 for _ in range(n + 1)]
      for i in range(mid):
        a, b, v = queries[i]
        diffs[a] += v
        diffs[b + 1] -= v
      acc = 0
      done = True
      for i in range(n):
        acc += diffs[i]
        if nums[i] > acc:
          done = False
          break
      
      if done:
        high = mid
      else:
        low = mid + 1
    return -1 if high == n_queries + 1 else high
    ",1454832782
pawan kumar,pkpawan,504,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int tot = 0;
        for(auto&x:nums)tot += x;
        
        int sum = 0,ans = 0;
        for(auto&x:nums){
            int rem = tot-sum;
            if(x == 0){
                if(sum == rem)ans+=2;
                else if(abs(sum-rem) == 1)ans++;
            }
            sum += x;
        }
        return ans;
    }
};",1454832783
pawan kumar,pkpawan,504,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        vector<int>mark(n+1);
        for(auto&x:queries){
            mark[x[0]]++;
            mark[x[1]+1]--;
        }
        int tot = 0;
        for(int i=0;i<n;++i){
            tot += mark[i];
            if(tot < nums[i])return false;
        }
        return true;
    }
};",1454811789
pawan kumar,pkpawan,504,3643,cpp,"class Solution {
public:
    bool find(vector<vector<int>>&queries,int k,vector<int>&nums){
        int n = nums.size();
        vector<int>mark(n+1);
        for(int i=0;i<k;++i){
            vector<int>x = queries[i];
            mark[x[0]]+=x[2];
            mark[x[1]+1]-=x[2];
        }
        int tot = 0;
        for(int i=0;i<n;++i){
            tot += mark[i];
            if(tot < nums[i])return false;
        }
        return true;
    }
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int start = 0,end = queries.size(),mid = (start+end)/2;
        int ans = -1;
        
        while(start<=end){
            if(find(queries,mid,nums)){
                ans = mid;
                end = mid-1;
            }
            else start = mid+1;
            mid = (start+end)/2;
        }
        
        return ans;
        
    }
};",1454811596
Harshsingh_26,Harshsingh_26,505,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {

        int tot = 0;
        for (auto it : nums) {
            tot += it;
        }
        int cur =0;
        int ans =0;
        for (int i = 0; i < nums.size(); i++) {

            tot-=nums[i];
            cur+=nums[i];
            if(nums[i]!=0)continue;
            if(tot==cur)
            {
                ans+=2;
            }
            else if(abs(tot-cur)==1)
            {
                ans++;
            }
        }
        return ans;
    }
};",1454813003
Harshsingh_26,Harshsingh_26,505,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {

        int n= nums.size();
        vector<int>op(n+1,0);
        for(auto it:queries)
            {
                op[it[0]]++;
                op[it[1]+1]--;
            }
        for(int i=1;i<=n;i++)
            {
                op[i]+=op[i-1];
            }
        bool ans = true;
        for(int i=0;i<n;i++)
            {
                if(nums[i]>op[i])
                {
                    ans = false;
                }
            }
        return ans;
        
    }
};",1454819268
Harshsingh_26,Harshsingh_26,505,3643,cpp,"class Solution {
public:
    bool check(vector<int> nums, vector<vector<int>>& queries, int mid) {
        int n = nums.size();
        vector<int> op(n + 1, 0);
        for (int i = 0; i < mid; i++) {
            int l = queries[i][0];
            int r = queries[i][1];
            int val = queries[i][2];
            op[l] -= val;
            op[r + 1] += val;
        }
        for (int i = 1; i <= n; i++) {
            op[i] += op[i - 1];
        }
        for (int i = 0; i < nums.size(); i++) {
            nums[i] += op[i];
            if (nums[i] > 0)
                return false;
        }
        return true;
    }
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {

        int lo = 0, hi = queries.size(), ans = -1;
        // check(nums, queries, 2);
        while(lo<=hi)
            {
                int mid = (lo+hi)/2;
                if(check(nums,queries,mid))
                {
                    hi = mid-1;
                    ans = mid;
                }
                else
                {
                    lo = mid+1;
                }
            }
        return ans;
    }
};",1454832810
Pankaj Ananda Bhosale,pankaj_777,506,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int n = nums.size();
        
        int res = 0;
        int pref = 0, suff = accumulate(nums.begin(), nums.end(), 0);
        for (int i = 0; i < n; i++) {
            pref += nums[i];
            suff -= nums[i];
            
            res += 2 * (nums[i] == 0 and pref == suff);
            res += (nums[i] == 0 and abs(pref - suff) == 1);
        }
        
        return res;
    }
};",1454810750
Pankaj Ananda Bhosale,pankaj_777,506,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        vector<int> diff(n + 1);
        for (auto query : queries) {
            int l = query[0], r = query[1];
            diff[l]++, diff[r + 1]--;
        }
        
        for (int i = 1; i < n; i++) {
            diff[i] += diff[i - 1];
        }
        
        for (int i = 0; i < n; i++) {
            if (nums[i] > diff[i]) 
                return false;
        }
        
        return true;
    }
};",1454815083
Pankaj Ananda Bhosale,pankaj_777,506,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        auto possible = [&] (int mid) -> bool {
            vector<int> diff(n + 3);
            for (int i = 0; i < mid; i++) {
                int l = queries[i][0], r = queries[i][1], val = queries[i][2];
                diff[l] += val, diff[r + 1] -= val;
            }

            for (int i = 1; i < n; i++) {
                diff[i] += diff[i - 1];
            }

            for (int i = 0; i < n; i++) {
                if (nums[i] > diff[i]) 
                    return false;
            }

            return true;
        };
        
        if (!possible(queries.size())) return -1;
        
        int low = 0, high = queries.size();
        while (low <= high) {
            int mid = low + (high - low) / 2;
            if (possible (mid)) {
                high = mid - 1;
            } else {
                low = mid + 1;
            }
        }
        
        return high + 1;
    }
};",1454832831
birds3345,birds3345,507,3616,cpp,"class Solution {
public:
    int solve(int i, int dir, vector<int> nums)
    {     
        while (i >= 0 && i < nums.size())
        {
            if (nums[i] == 0)
                i += dir;
            else
            {
                nums[i]--;
                dir *= -1;
                
                i += dir;
            }
        }
        
        for (int n: nums)
        {
            if (n > 0)
                return false;
        }
                    
        return true;
    }
    
    int countValidSelections(vector<int>& nums) {
        int res = 0;
        
        for (int i = 0; i < nums.size(); i++)
        {
            if (nums[i] == 0)
            {
                res += solve(i, -1, nums);
                res += solve(i, 1, nums);
            }
        }
        
        return res;
    }
};",1454811517
birds3345,birds3345,507,3639,cpp,"struct FenwickTreeOneBasedIndexing {
    vector<int> bit;  // binary indexed tree
    int n;

    FenwickTreeOneBasedIndexing(int n) {
        this->n = n + 1;
        bit.assign(n + 1, 0);
    }

    FenwickTreeOneBasedIndexing(vector<int> a)
        : FenwickTreeOneBasedIndexing(a.size()) {
        for (size_t i = 0; i < a.size(); i++)
            add(i, a[i]);
    }

    int sum(int idx) {
        int ret = 0;
        for (++idx; idx > 0; idx -= idx & -idx)
            ret += bit[idx];
        return ret;
    }

    int sum(int l, int r) {
        return sum(r) - sum(l - 1);
    }

    void add(int idx, int val) {
        for (++idx; idx < n; idx += idx & -idx)
            bit[idx] += val;
    }

    void range_add(int l, int r, int val) {
        add(l, val);
        add(r + 1, -val);
    }

    int point_query(int idx) {
        int ret = 0;
        for (++idx; idx > 0; idx -= idx & -idx)
            ret += bit[idx];
        return ret;
    }
};

class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        FenwickTreeOneBasedIndexing fenwick(nums.size());
        
        for (auto& query: queries)
            fenwick.range_add(query[0], query[1], 1);
        
        for (int i = 0; i < nums.size(); i++)
        {
            if (fenwick.point_query(i) < nums[i])
                return false;
        }
        
        return true;
    }
};",1454816025
birds3345,birds3345,507,3643,cpp,"class SegmentTree {
    vector<int> tree, lazy;
    int size;

public:
    SegmentTree(int n) : size(n) {
        tree.assign(4 * n, INT_MIN);
        lazy.assign(4 * n, 0);
    }

    void build(const vector<int>& arr, int start, int end, int node) {
        if (start == end) {
            tree[node] = arr[start];
            return;
        }
        int mid = (start + end) / 2;
        build(arr, start, mid, 2 * node + 1);
        build(arr, mid + 1, end, 2 * node + 2);
        tree[node] = max(tree[2 * node + 1], tree[2 * node + 2]);
    }

    void updateRange(int l, int r, int val, int start, int end, int node) {
        if (lazy[node] != 0) {
            tree[node] += lazy[node];
            if (start != end) {
                lazy[2 * node + 1] += lazy[node];
                lazy[2 * node + 2] += lazy[node];
            }
            lazy[node] = 0;
        }

        if (start > end || start > r || end < l)
            return;

        if (start >= l && end <= r) {
            tree[node] += val;
            if (start != end) {
                lazy[2 * node + 1] += val;
                lazy[2 * node + 2] += val;
            }
            return;
        }

        int mid = (start + end) / 2;
        updateRange(l, r, val, start, mid, 2 * node + 1);
        updateRange(l, r, val, mid + 1, end, 2 * node + 2);
        tree[node] = max(tree[2 * node + 1], tree[2 * node + 2]);
    }

    int queryMax(int l, int r, int start, int end, int node) {
        if (lazy[node] != 0) {
            tree[node] += lazy[node];
            if (start != end) {
                lazy[2 * node + 1] += lazy[node];
                lazy[2 * node + 2] += lazy[node];
            }
            lazy[node] = 0;
        }

        if (start > end || start > r || end < l)
            return INT_MIN;

        if (start >= l && end <= r)
            return tree[node];

        int mid = (start + end) / 2;
        return max(queryMax(l, r, start, mid, 2 * node + 1), queryMax(l, r, mid + 1, end, 2 * node + 2));
    }
};

class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        SegmentTree  seg(nums.size());
        seg.build(nums, 0, nums.size() - 1, 0);
        
        if (seg.queryMax(0, nums.size(), 0, nums.size() - 1, 0) <= 0)
            return 0;
        
        for (int i = 0; i < queries.size(); i++)
        {
            auto& query = queries[i];
            seg.updateRange(query[0], query[1], -query[2], 0, nums.size() - 1, 0);
            
            if (seg.queryMax(0, nums.size(), 0, nums.size() - 1, 0) <= 0)
                return i + 1;
        }
        
        return -1;
    }
};",1454832899
Varun Muthanna K A,varunmuthannaka,508,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int n = nums.size(), cnt = 0;
        vector<int> z;
        for (int i = 0; i < n; ++i) {
            if (nums[i] == 0) z.push_back(i);
        }
        for (int i : z) {
            for (int d = -1; d <= 1; d += 2) {
                vector<int> a = nums;
                int c = i, dir = d;
                while (c >= 0 && c < n) {
                    if (a[c] == 0) {
                        c += dir;
                    } else {
                        a[c] -= 1;
                        dir = -dir;
                        c += dir;
                    }
                }
                bool ok = true;
                for (int x : a) {
                    if (x != 0) {
                        ok = false;
                        break;
                    }
                }
                if (ok) cnt++;
            }
        }
        return cnt;
    }
};
",1454840287
Varun Muthanna K A,varunmuthannaka,508,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        bool isPossible=true;
        int n=nums.size();
        vector<int>sweep(n+1);

        for(auto &i:queries) sweep[i[0]]+=1,sweep[i[1]+1]-=1;

        for(auto i=1;i<n;i++) sweep[i]+=sweep[i-1];

        for(auto i=0;i<n;i++) if(sweep[i]<nums[i]) isPossible=false;

        return isPossible;

        
        
    }
};",1454816261
Varun Muthanna K A,varunmuthannaka,508,3643,cpp,"class Solution {
public:
    bool check(vector<int>& nums, vector<vector<int>>& queries,int x){
        bool isPossible=true;
        int n=nums.size();
        vector<int>sweep(n+1);

        for(auto i=0;i<=x;i++) sweep[queries[i][0]]+=queries[i][2],sweep[queries[i][1]+1]-=queries[i][2];

        for(auto i=1;i<n;i++) sweep[i]+=sweep[i-1];

        for(auto i=0;i<n;i++) if(sweep[i]<nums[i]) isPossible=false;

        return isPossible;
        
    }


    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int l=0,r=queries.size()-1,res=-1;

        if(check(nums,queries,-1)) return 0;
        
        while(l<=r){
            int mid= l +(r-l)/2;

            if(check(nums,queries,mid)) res=mid+1,r=mid-1;
            else l=mid+1;
        }

        return res;
        
    }
};",1454829237
hocln,hocln,510,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& a) {
        int ans = 0,n=a.size();
        for(int i = 0;i < n;i++) {
            if(a[i] != 0) continue;
            for(int d : {1,0}) {
                auto c = a;
                int j = i;
            while(j >= 0 && j < n) {
                if(c[j]) {
                    d = !d;
                    --c[j];
                }
                j += d ? 1 : -1;
            }
            if(count(c.begin(),c.end(),0) == n) {
                ++ans;
            }
            }
        }
        return ans;
    }
};",1454811639
hocln,hocln,510,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& a, vector<vector<int>>& q) {
        int n = a.size();
        vector<int>cnt(n+1);
        for(auto& i : q) {
            ++cnt[i[0]];
            --cnt[i[1]+1];
        }
        for(int i = 1;i < n;i++) cnt[i] += cnt[i-1];
        for(int i = 0;i < n;i++) if(a[i] > cnt[i]) return false;
        return true;
    }
};",1454814345
hocln,hocln,510,3643,cpp,"template <class T> class BIT {
  private:
	int size;
	vector<T> bit;
	vector<T> arr;

  public:
	BIT(int size) : size(size), bit(size + 1), arr(size) {}
	void set(int ind, T val) { add(ind, val - arr[ind]); }
	void add(int ind, T val) {
		arr[ind] += val;
		ind++;
		for (; ind <= size; ind += ind & -ind) { bit[ind] += val; }
	}
	T pref_sum(int ind) {
		ind++;
		T total = 0;
		for (; ind > 0; ind -= ind & -ind) { total += bit[ind]; }
		return total;
	}
};
class Solution {
public:
    int minZeroArray(vector<int>& a, vector<vector<int>>& q) {
        int g = 0, n = a.size();
        int j = 0;
        vector<int>cnt(n+3);
        BIT<long long>b(n+1);
        if(count(a.begin(),a.end(),0) == n) return 0;
        int mat = 0;
        for(auto& i : q) {
            ++mat;
            b.add(i[0],i[2]);
            b.add(i[1]+1,-i[2]);
            while(j < n && b.pref_sum(j) >= a[j])++j;
            if(j == n) return mat;
        }
        return -1;
    }
};",1454825759
Nguyen Duc Linh,linhnd99hit,511,3616,cpp,"class Solution {
int isOK(vector<int> nums, int pos, int bias) {
    int current = pos;

    while (current >= 0 && current < nums.size()) {
        if (nums[current] > 0) {
            bias = -bias;
            nums[current]--;   
        }

        current += bias;
    }

    for (int i=0;i<nums.size();i++) {
        if (nums[i] != 0) return 0;
    }

    return 1;
}
public:
    int countValidSelections(vector<int>& nums) {
        int res=0;
        for (int i=0;i<nums.size();i++) {
            if (nums[i] == 0) {
                res += isOK(nums, i, 1) + isOK(nums,i,-1);
            }
        }

        return res;
    }
};",1454822956
Nguyen Duc Linh,linhnd99hit,511,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int f[100002] = {};
        for (int i=0; i<queries.size(); i++) {
            f[queries[i][0]]++;
            f[queries[i][1]+1]--;
        }

        int c = 0;
        for (int i=0;i<nums.size();i++) {
            c += f[i];
            if (nums[i] > c) {
                return false;
            }
        }

        return true;
    }
};",1454815118
Nguyen Duc Linh,linhnd99hit,511,3643,cpp,"class Solution {
    bool isOK(vector<int> &nums, vector<vector<int>> &queries, int numberOfQueries) {
        long long f[100002] = {};
        for (int i=0; i<numberOfQueries; i++) {
            f[queries[i][0]] += (long long)queries[i][2];
            f[queries[i][1]+1] -= (long long)queries[i][2];
        }
        
        long long c = 0;
        for (int i=0;i<nums.size();i++) {
            c += f[i];
            if ((long long)nums[i] > c) {
                return false;
            }
        }
    
        return true;
    }
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int l = 0;
        int r = queries.size() - 1;
        while (l<=r) {
            int mid = (l+r)/2;
            if (isOK(nums, queries, mid)) {
                r = mid - 1;
            } else {
                l = mid + 1;
            }
        }

        if (isOK(nums, queries, l)) {
            return l;
        }

        return -1;
    }
};",1454840462
resotto,resotto,512,3616,java,"class Solution {
    public int countValidSelections(int[] nums) {
        int ans = 0, n = nums.length;
        for (int i = 0; i < n; i++) {
            int[] left = new int[n], right = new int[n];
            for (int j = 0; j < n; j++) {
                left[j] = nums[j];
                right[j] = nums[j];
            }
            move(i, -1, left);
            move(i, 1, right);
            ans += isValid(left) ? 1 : 0;
            ans += isValid(right) ? 1 : 0;
        }
        return ans;
    }
    private boolean isValid(int[] arr) {
        for (int p : arr) {
            if (p != 0) {
                return false;
            }
        }
        return true;
    }
    private void move(int i, int d, int[] arr) {
        if (arr[i] != 0) {
            return;
        }
        while (0 <= i && i < arr.length && arr[i] == 0) {
        // while (arr[i] == 0) {
            i += d;
        }
        if (i < 0 || i == arr.length) {
        // if (0 < i || i == arr.length) {
            return;
        }
        arr[i]--;
        move(i + (d * -1), d * -1, arr);
        // move(i, d * -1, arr);
    }
}",1454820052
resotto,resotto,512,3639,java,"class Solution {
    public boolean isZeroArray(int[] nums, int[][] queries) {
        var diff = new HashMap<Integer, Integer>();
        for (int[] q : queries) {
            diff.put(q[0], diff.getOrDefault(q[0], 0) - 1);
            // diff.put(q[0], diff.getOrDefault(q[0], 0) + 1);
            diff.put(q[1]+1, diff.getOrDefault(q[1]+1, 0) + 1);
            // diff.put(q[1]+1, diff.getOrDefault(q[1]+1, 0) - 1);
        }
        for (int i = 0, d = 0; i < nums.length; i++) {
            d += diff.getOrDefault(i, 0);
            if (0 < nums[i] + d) {
                return false;
            }
        }
        return true;
    }
}",1454824827
resotto,resotto,512,3643,java,"class Solution {
    public int minZeroArray(int[] nums, int[][] queries) {
        int n = nums.length, l = 0, r = queries.length, ans = r + 1;
        while (l <= r) {
            int m = l + (r - l) / 2;
            var diff = new HashMap<Integer, Integer>();
            for (int k = 0; k < m; k++) {
                int[] q = queries[k];
                diff.put(q[0], diff.getOrDefault(q[0], 0) - q[2]);
                diff.put(q[1]+1, diff.getOrDefault(q[1]+1, 0) + q[2]);
            }
            var valid = true;
            for (int i = 0, d = 0; i < n; i++) {
                d += diff.getOrDefault(i, 0);
                if (0 < nums[i] + d) {
                    valid = false;
                    break;
                }
            }
            if (valid) {
                ans = m;
                r = m - 1;
            } else {
                l = m + 1;
            }
        }
        return ans == queries.length+1 ? -1 : ans;        
        // return ans == r+1 ? -1 : ans;        
    }
}

/*


    public int minZeroArray(int[] nums, int[][] queries) {
        int n = nums.length, l = 0, r = queries.length, ans = r + 1;
        while (l <= r) {
            int m = l + (r - l) / 2;
            var diff = new HashMap<Integer, Integer>();
            for (int k = 0; k < m; k++) {
                int[] q = queries[k];
                diff.put(q[0], diff.getOrDefault(q[0], 0) - q[2]);
                diff.put(q[1]+1, diff.getOrDefault(q[1]+1, 0) + q[2]);
            }
            var valid = true;
            for (int i = 0, d = 0; i < n; i++) {
                d += diff.getOrDefault(i, 0);
                if (0 < nums[i] + d) {
                    valid = false;
                    break;
                }
            }
            if (valid) {
                ans = m;
                r = m - 1;
            } else {
                l = m + 1;
            }
        }
        return ans == r+1 ? -1 : ans;        
    }
*/",1454840531
lxw1092772959,lxw1092772959,513,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int result = 0;
        for (int i = 0; i < nums.size(); ++i) {
            if (nums[i] != 0) {
                continue;
            }
            if (is_valid(nums, i, 1)) {
                result++;
            }
            if (is_valid(nums, i, -1)) {
                result++;
            }
        }
        return result;
    }

    bool is_valid(vector<int> nums, int pos, int dir = 1) {
        int count = 0;
        int pre_pos = -1;
        for (;pos >= 0 && pos < nums.size(); ) {
            if (pre_pos == pos) {
                break;
            }
            pre_pos = pos;
            if (nums[pos] == 0) {
                pos += dir;
            } else if (nums[pos] > 0) {
                nums[pos]--;
                dir *= -1;
                pos += dir;
            }
        }

        for (auto & num : nums) {
            if (num > 0) {
                return false;
            }
        }
        return true;
    }
};",1454816140
lxw1092772959,lxw1092772959,513,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int N = nums.size();
        vector<int> pre_sum(N, 0);
        for (auto & q : queries) {
            int L = q[0], R = q[1];
            pre_sum[L]++;
            if (R + 1 < N) {    
                pre_sum[R + 1]--;
            }
        }
        int pre = 0;
        for (int i = 0; i < N; ++i) {
            pre += pre_sum[i];
            if (nums[i] > pre) {
                return false;
            }
        }
        return true;
    }
};",1454819360
lxw1092772959,lxw1092772959,513,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int N = nums.size();
        int M = queries.size();
        if (!isZeroArray(nums, queries, M)) {
            return -1;
        }
        
        int L = 0;
        int R = M;
        while (L < R) {
            int mid = (L + R) / 2;
            // cout << L << "" "" << R << "" "" << mid << endl;
            if (!isZeroArray(nums, queries, mid)) {
                L = mid + 1;
            } else {
                R = mid;
            }
        }
        return L;
    }

    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries, int k) {
        int N = nums.size();
        vector<int> pre_sum(N, 0);
        for (int i = 0; i < k; ++i) {
            auto &q = queries[i];
            int L = q[0], R = q[1];
            int val = q[2];
            pre_sum[L] += val;
            if (R + 1 < N) {    
                pre_sum[R + 1] -= val;
            }
        }
        int pre = 0;
        for (int i = 0; i < N; ++i) {
            pre += pre_sum[i];
            if (nums[i] > pre) {
                return false;
            }
        }
        return true;
    }
};",1454833201
Suvendu Dalbehera,SUVU01,514,3616,cpp,"class Solution {
private:
    bool valid(vector<int> A, int i, int d, int &count)
    {
        int C = 0;
        while(i >= 0 and i < A.size())
        {
            if(A[i] == 0)
            {
                if(d < 0)
                    i--;
                else
                    i++;
            }
            else
            {
                A[i]--;
                if(A[i] == 0)
                    C++;
                if(d == -1)
                    d = 1, i++;
                else
                    d = -1, i--;
            }
        }
        return C + count == A.size();
    }
public:
    int countValidSelections(vector<int>& nums) {
        int n = nums.size();
        int ans = 0, count = 0;
        for(int i = 0; i < n; i++)
            count += (nums[i] == 0);
        for(int i = 0; i < n; i++)
            if((nums[i] == 0))
            {
                if(valid(nums, i, -1, count))
                    ans++;
                if(valid(nums, i, 1, count))
                    ans++;
            }
        return ans;
    }
};",1454816217
Suvendu Dalbehera,SUVU01,514,3639,cpp,"class Solution {
private:
    bool process(int &n, vector<int> &nums, vector<vector<int>> &queries)
    {
        vector<int> count(n + 1, 0);
        for(int i = 0; i < queries.size(); i++)
        {
            int l = queries[i][0], r = queries[i][1], val = 1;
            count[l] += val, count[r + 1] -= val;
        }
        for(int i = 1; i < n; i++)
            count[i] += count[i - 1];
        for(int i = 0; i < n; i++)
            if(nums[i] - count[i] > 0)
                return false;
        return true;
    }
public:
    int isZeroArray(vector<int>& nums, vector<vector<int>>& queries) 
    {
        int n = nums.size(), m = queries.size();
        return process(n, nums, queries);
    }
};",1454833214
Suvendu Dalbehera,SUVU01,514,3643,cpp,"class Solution {
private:
    bool check(int &M, int &n, vector<int> nums, vector<vector<int>> &queries)
    {
        vector<int> count(n + 1, 0);
        for(int i = 0; i < M; i++)
        {
            int l = queries[i][0], r = queries[i][1], val = queries[i][2];
            count[l] += val, count[r + 1] -= val;
        }
        for(int i = 1; i < n; i++)
            count[i] += count[i - 1];
        for(int i = 0; i < n; i++)
            if(nums[i] - count[i] > 0)
                return false;
        return true;
    }
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) 
    {
        int n = nums.size(), m = queries.size(), low = 0, high = m, ans = -1;
        while(low <= high)
        {
            int mid = (low + high) >> 1;
            if(check(mid, n, nums, queries))
                ans = mid, high = mid - 1;
            else
                low = mid + 1;
        }
        return ans;        
    }
};",1454829133
uf21-6,uf21-6,515,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        n = len(nums)
        valid_selections = 0
        
        # Helper function to simulate the process
        def simulate(start_pos, direction):
            # Copy the array to simulate changes
            nums_copy = nums[:]
            curr = start_pos
            while 0 <= curr < n:
                if nums_copy[curr] == 0:
                    # Move in the current direction
                    curr += direction
                else:
                    # Decrement the current element by 1 and reverse the direction
                    nums_copy[curr] -= 1
                    direction *= -1
                    curr += direction
            
            # Check if all elements are zero
            return all(x == 0 for x in nums_copy)
        
        # Find all positions where nums[i] == 0 and simulate from there
        for i in range(n):
            if nums[i] == 0:
                # Simulate for both left (-1) and right (+1)
                if simulate(i, -1):  # Move left
                    valid_selections += 1
                if simulate(i, 1):   # Move right
                    valid_selections += 1
        
        return valid_selections",1454806482
uf21-6,uf21-6,515,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        n = len(nums)
        diff = [0] * (n + 1)  # Create a difference array
        
        # Apply the difference array logic based on the queries
        for start, end in queries:
            diff[start] -= 1
            if end + 1 < n:
                diff[end + 1] += 1
        
        # Calculate the cumulative effect and modify the original array
        decrement = 0
        for i in range(n):
            decrement += diff[i]
            nums[i] += decrement
            if nums[i] > 0:
                return False  # If any element is positive, return False
        
        return True  # All elements are non-positive
",1454828351
uf21-6,uf21-6,515,3643,java,"class Solution {
    public int minZeroArray(int[] nums, int[][] queries) {
        int n = nums.length;
        int[] current = nums.clone();
        int[] midState = null;  // To store state at midpoint of queries

        // Check if the array is already all zeros
        boolean allZero = true;
        for (int num : current) {
            if (num != 0) {
                allZero = false;
                break;
            }
        }
        if (allZero) {
            return 0;
        }

        // Binary search to find the minimum number of queries
        int left = 0, right = queries.length, answer = -1;
        boolean midStateStored = false;

        while (left <= right) {
            int mid = left + (right - left) / 2;

            if (canMakeZero(current, queries, mid, n)) {
                answer = mid;
                right = mid - 1;
            } else {
                left = mid + 1;
            }

            // Store state at midpoint of queries
            if (!midStateStored && mid == queries.length / 2) {
                int[] diff = new int[n + 1];
                for (int i = 0; i < mid; i++) {
                    int l = queries[i][0];
                    int r = queries[i][1];
                    int value = queries[i][2];
                    diff[l] += value;
                    if (r + 1 < diff.length) {
                        diff[r + 1] -= value;
                    }
                }

                midState = current.clone();
                int total = 0;
                for (int i = 0; i < n; i++) {
                    total += diff[i];
                    midState[i] = Math.max(0, current[i] - total);
                }
                midStateStored = true;
            }
        }

        return answer;
    }

    private boolean canMakeZero(int[] current, int[][] queries, int k, int n) {
        int[] diff = new int[n + 1];

        // Apply difference array logic for the first k queries
        for (int i = 0; i < k; i++) {
            int l = queries[i][0];
            int r = queries[i][1];
            int value = queries[i][2];
            diff[l] += value;
            if (r + 1 < diff.length) {
                diff[r + 1] -= value;
            }
        }

        // Use prefix sum to calculate the actual changes
        int total = 0;
        for (int i = 0; i < n; i++) {
            total += diff[i];
            if (total < current[i]) {
                return false; // Not enough reduction
            }
        }
        return true;
    }
}
",1454833275
Abdullah Elkhteeb,abdullahElkhteeb2002,517,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int ans = 0;
        int n = nums.size();
        for(int i = 0; i < n; ++i) {
            if(nums[i])  
                continue;
            
            vector<int> a = nums;
            //Moving left;
            bool left = 1;
            int j = i;
            while(j >= 0 and j < n) {
                if(a[j]) {
                    a[j]--;
                    left = 1 - left;
                } 
                if(left)
                    j--;
                else 
                    j++;
            }

            if(accumulate(a.begin(), a.end(), 0) == 0) {
                ans++;
            }

            a = nums;
            //Moving left;
             left = 0;
             j = i;
            while(j >= 0 and j < n) {
                if(a[j]) {
                    a[j]--;
                    left = 1 - left;
                } 
                if(left)
                    j--;
                else 
                    j++;
            }

            if(accumulate(a.begin(), a.end(), 0) == 0) {
                ans++;
                continue;
            }
            
        }

        return ans;
    }
};",1454809254
Abdullah Elkhteeb,abdullahElkhteeb2002,517,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        vector<int> a(nums.size() + 1);
        int n = nums.size();
        for(auto &v : queries) {
            int l = v[0];
            int r = v[1];
            a[l]--;
            a[r + 1]++;
        } 

        for(int i = 1; i <= n; ++i)
            a[i] += a[i - 1];

        // for(int i = 0; i < n; ++i)
        //     cout << a[i] << ' ';
        // cout << endl;
        
        bool flg = 1;
        for(int i = 0; i < n; ++i) {
            nums[i] += a[i];
            if(nums[i] > 0)
                flg = 0;
        }

        

        return flg;
    }
};",1454813595
Abdullah Elkhteeb,abdullahElkhteeb2002,517,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        int l = 0, r = queries.size() - 1, pos = -1;
        if(accumulate(nums.begin(), nums.end(), 0ll) == 0ll) 
            return 0;
    
        while(l <= r) {
            vector<long long> cnt(n + 1, 0);
            int mid = (l + r) / 2;
            bool flg = 1;
            for(int i = 0; i <= mid; ++i) {
                
                
                cnt[queries[i][0]] += queries[i][2];
                cnt[queries[i][1] + 1] -= queries[i][2];
            }

            for(int i = 1; i < n; ++i)
                cnt[i] += cnt[i - 1];

            for(int i = 0; i < n; ++i) {
                if(nums[i] > cnt[i]) {
                    flg = 0;
                    break;
                }
            }

            if(flg) {
                pos = mid;
                r = mid - 1;
            } else {
                l = mid + 1;
            }


            // cout << mid << ' ' << flg << endl;
        }

        return (pos == -1 ? pos : pos + 1);
    }
};",1454825992
chintsai,chintsai,518,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int n = nums.size(), res = 0;
        int dx[2] = {-1, 1};
        auto check = [&](int x, int d) {
            auto a = nums;
            while (true) {
                if (x < 0 || x == n) {
                    break;
                }
                if (a[x] == 0) {
                    x += dx[d];
                }
                else if (a[x]) {
                    a[x]--;
                    d = (d + 1) % 2;
                    x += dx[d];
                }
            }
            for (int x: a) {
                if (x) {
                    return false;
                }
            }
            return true;
        };
        for (int i = 0; i < n; i++) {
            if (nums[i] == 0) {
                if (check(i, 0)) {
                    res++;
                }
                if (check(i, 1)) {
                    res++;
                }
            }
        }
        return res;
    }
};",1454812966
chintsai,chintsai,518,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        int diff[n + 2];
        memset(diff, 0, sizeof diff);
        for (auto &q: queries) {
            diff[q[0]]--, diff[q[1]+1]++;
        }
        for (int s = 0, i = 0;i < n; i++) {
            s += diff[i];
            if (nums[i] + s > 0) {
                return false;
            }
        }
        return true;
    }
};",1454819304
chintsai,chintsai,518,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = queries.size();
        int l = 0, r = n + 1;
        auto check = [&](int mid) {
            // printf(""mid: %d\n"",mid);
            int m = nums.size();
            int d[m + 2];
            memset(d, 0, sizeof d);
            for (int i = 0; i < mid; i++) {
                d[queries[i][0]]-= queries[i][2];
                d[queries[i][1] + 1]+=queries[i][2];
            }
            for (int s = 0, i = 0; i < m; i++) {
                s += d[i];
                // printf(""s: %d, i: %d, d[i]: %d\n"", s, i, d[i]);
                if (nums[i] + s > 0) {
                    return false;
                }
            }
            return true;
        };
        while (l < r) {
            int mid = (l + r) >> 1;
            if (check(mid)) {
                r = mid;
            } else {
                l = mid + 1;
            }
        }
        return l == n + 1 ? -1 : l;
    }
};",1454833362
Kar Deepak Kumar,kardeepakkumar,519,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        result = 0
        total = sum(nums)

        curSum = 0
        for num in nums:
            curSum += num
            if num == 0 and total%2 == 0 and curSum == total//2:
                result += 2
            elif num == 0 and total%2 == 1 and (curSum == total//2 or curSum == total//2 + 1):
                result += 1
        return result",1454808138
Kar Deepak Kumar,kardeepakkumar,519,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        increments = []
        for l, r in queries:
            increments.append((l, 1))
            increments.append((r+1, -1))
        increments.sort()

        curIncrement = 0
        incIdx = 0
        for i in range(len(nums)):
            while incIdx < len(increments) and increments[incIdx][0] <= i:
                curIncrement += increments[incIdx][1]
                incIdx += 1
            if nums[i] > curIncrement:
                return False
        return True",1454814319
Kar Deepak Kumar,kardeepakkumar,519,3643,python3,"class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:

        if sum(nums) == 0:
            return 0

        def isPossible(lastIdx):
            increments = []
            for i in range(lastIdx + 1):
                increments.append((queries[i][0], queries[i][2]))
                increments.append((queries[i][1]+1, -1*queries[i][2]))
            increments.sort()
    
            curIncrement = 0
            incIdx = 0
            for i in range(len(nums)):
                while incIdx < len(increments) and increments[incIdx][0] <= i:
                    curIncrement += increments[incIdx][1]
                    incIdx += 1
                if nums[i] > curIncrement:
                    return False
            return True


        left, right = 0, len(queries)-1
        result = -1
        while left <= right:
            mid = (left + right)//2
            if isPossible(mid):
                result = mid + 1
                right = mid - 1
            else:
                left = mid + 1

        return result",1454826071
pocochuk,pocochuk,520,3616,cpp,"// #pragma GCC optimize (""Ofast"")
#include <bits/stdc++.h>
using namespace std;



#ifdef LOCAL
    #include ""helpers/debug.h""
    #define GA dbg(0);
#else
    #define dbg(...)     0
    #define chk(...)     0
    #define GA 0;

    #define RAYA         0
#endif



const auto beg_time = std::chrono::high_resolution_clock::now();
double time_elapsed() { return chrono::duration<double>(std::chrono::high_resolution_clock::now() - beg_time) .count(); }



// building blocks
using ll  = long long;
using db  = long double;
using str = string;

//? priority_queue for minimum
template<class T> using pqg = priority_queue<T, vector<T>, greater<T>>;
 
using ull  = unsigned long long;
//? using i64  = long long;
//? using u64  = uint64_t;
//? using i128 = __int128;
//? using u128 = __uint128_t;
//? using f128 = __float128;



// pairs
using pi = pair<int, int>;
using pl = pair<ll, ll>;
using pd = pair<db, db>;

#define mp make_pair
#define f  first
#define s  second



#define tcT template <class T
#define tcTU tcT, class U

tcT > using V = vector<T>;
tcT, size_t SZ > using AR = array<T, SZ>;
using vi = V<int>;
using vb = V<bool>;
using vl = V<ll>;
using vd = V<db>;
using vs = V<str>;
using vpi = V<pi>;
using vpl = V<pl>;
using vpd = V<pd>;

using vvi = V<vi>;
using vvl = V<vl>;
using vvb = V<vb>;

// vectors
// oops size(x), rbegin(x), rend(x) need C++17
#define sz(x) int((x).size())
#define bg(x) begin(x)
#define all(x) bg(x), end(x)
#define rall(x) x.rbegin(), x.rend()
#define sor(x) sort(all(x))
#define rsz resize
#define ins insert
#define pb push_back
#define eb emplace_back
#define ft front()
#define bk back()
#define ts to_string

#define lb lower_bound
#define ub upper_bound



// loops
#define FOR(i, a, b) for (int i = (a); i < (b); ++i)
#define F0R(i, a) FOR(i, 0, a)
#define ROF(i, a, b) for (int i = (b)-1; i >= (a); --i)
#define R0F(i, a) ROF(i, 0, a)
#define rep(a) F0R(_, a)
#define each(a, x) for (auto &a : x)



//? Template
const int MOD = 998244353;
const int MX = (int)2e5 + 5;
const ll BIG = 1e18;  //? not too close to LLONG_MAX
const ll INF = 1e18;
const db PI = acos((db)-1);
const int dx[4]{1, 0, -1, 0}, dy[4]{0, 1, 0, -1};  //? for every grid problem!!
mt19937 rng((uint32_t)chrono::steady_clock::now().time_since_epoch().count());

//? Generator
int rng_int(int L, int R) {
    assert(L <= R);
    return uniform_int_distribution<int>(L, R)(rng);
} 
ll rng_ll(ll L, ll R) {
    assert(L <= R);
    return uniform_int_distribution<ll>(L, R)(rng);
}
//? /Generator

#define lb lower_bound
#define ub upper_bound
tcT > int lwb(V<T>& a, const T& b) { return int(lb(all(a), b) - bg(a)); }
tcT > int upb(V<T>& a, const T& b) { return int(ub(all(a), b) - bg(a)); }

ll cdiv(ll a, ll b) {
	return a / b + ((a ^ b) > 0 && a % b);
}  // divide a by b rounded up
ll fdiv(ll a, ll b) {
	return a / b - ((a ^ b) < 0 && a % b);
}  // divide a by b rounded down

tcT > bool ckmin(T &a, const T &b) {
	return b < a ? a = b, 1 : 0;
}  // set a = min(a,b)
tcT > bool ckmax(T &a, const T &b) {
	return a < b ? a = b, 1 : 0;
}  // set a = max(a,b)
                
class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int response = 0;
        int n = sz(nums);
        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < 2; ++j) {
                cout << ""i: "" << i << "" j: "" << j << endl;
                int cur = i;
                int dir = j;
                vi nums2 = nums;
                if (nums2[cur] != 0) continue;

                while (0 <= cur && cur < n) {
                    if (nums2[cur] == 0) {
                        if (dir == 0) {
                            cur++;
                        } else {
                            cur--;
                        }
                    } else {
                        nums2[cur]--;
                        if (dir == 0) dir = 1;
                        else dir = 0;
                        if (dir == 0) {
                            cur++;
                        } else {
                            cur--;
                        }
                    }
                }

                bool valid = true;
                for (int p = 0; p < n; ++p) {
                    cout << nums2[p] << "" "";
                    if (nums2[p] != 0) valid = false;
                }
                cout << endl;

                if (valid) response++;
            }
        }
        return response;
    }
};",1454818538
pocochuk,pocochuk,520,3639,cpp,"// #pragma GCC optimize (""Ofast"")
#include <bits/stdc++.h>
using namespace std;



#ifdef LOCAL
    #include ""helpers/debug.h""
    #define GA dbg(0);
#else
    #define dbg(...)     0
    #define chk(...)     0
    #define GA 0;

    #define RAYA         0
#endif



const auto beg_time = std::chrono::high_resolution_clock::now();
double time_elapsed() { return chrono::duration<double>(std::chrono::high_resolution_clock::now() - beg_time) .count(); }



// building blocks
using ll  = long long;
using db  = long double;
using str = string;

//? priority_queue for minimum
template<class T> using pqg = priority_queue<T, vector<T>, greater<T>>;
 
using ull  = unsigned long long;
//? using i64  = long long;
//? using u64  = uint64_t;
//? using i128 = __int128;
//? using u128 = __uint128_t;
//? using f128 = __float128;



// pairs
using pi = pair<int, int>;
using pl = pair<ll, ll>;
using pd = pair<db, db>;

#define mp make_pair
#define f  first
#define s  second



#define tcT template <class T
#define tcTU tcT, class U

tcT > using V = vector<T>;
tcT, size_t SZ > using AR = array<T, SZ>;
using vi = V<int>;
using vb = V<bool>;
using vl = V<ll>;
using vd = V<db>;
using vs = V<str>;
using vpi = V<pi>;
using vpl = V<pl>;
using vpd = V<pd>;

using vvi = V<vi>;
using vvl = V<vl>;
using vvb = V<vb>;

// vectors
// oops size(x), rbegin(x), rend(x) need C++17
#define sz(x) int((x).size())
#define bg(x) begin(x)
#define all(x) bg(x), end(x)
#define rall(x) x.rbegin(), x.rend()
#define sor(x) sort(all(x))
#define rsz resize
#define ins insert
#define pb push_back
#define eb emplace_back
#define ft front()
#define bk back()
#define ts to_string

#define lb lower_bound
#define ub upper_bound



// loops
#define FOR(i, a, b) for (int i = (a); i < (b); ++i)
#define F0R(i, a) FOR(i, 0, a)
#define ROF(i, a, b) for (int i = (b)-1; i >= (a); --i)
#define R0F(i, a) ROF(i, 0, a)
#define rep(a) F0R(_, a)
#define each(a, x) for (auto &a : x)



//? Template
const int MOD = 998244353;
const int MX = (int)2e5 + 5;
const ll BIG = 1e18;  //? not too close to LLONG_MAX
const ll INF = 1e18;
const db PI = acos((db)-1);
const int dx[4]{1, 0, -1, 0}, dy[4]{0, 1, 0, -1};  //? for every grid problem!!
mt19937 rng((uint32_t)chrono::steady_clock::now().time_since_epoch().count());

//? Generator
int rng_int(int L, int R) {
    assert(L <= R);
    return uniform_int_distribution<int>(L, R)(rng);
} 
ll rng_ll(ll L, ll R) {
    assert(L <= R);
    return uniform_int_distribution<ll>(L, R)(rng);
}
//? /Generator

#define lb lower_bound
#define ub upper_bound
tcT > int lwb(V<T>& a, const T& b) { return int(lb(all(a), b) - bg(a)); }
tcT > int upb(V<T>& a, const T& b) { return int(ub(all(a), b) - bg(a)); }

ll cdiv(ll a, ll b) {
	return a / b + ((a ^ b) > 0 && a % b);
}  // divide a by b rounded up
                
ll fdiv(ll a, ll b) {
	return a / b - ((a ^ b) < 0 && a % b);
}  // divide a by b rounded down

tcT > bool ckmin(T &a, const T &b) {
	return b < a ? a = b, 1 : 0;
}  // set a = min(a,b)
tcT > bool ckmax(T &a, const T &b) {
	return a < b ? a = b, 1 : 0;
}
                
class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = sz(nums);
        vi a(n);
        cout << ""hola2"" << endl;
        for (auto e : queries) {
            int l = e[0], r = e[1]; 
            a[l]++;
            if (r + 1 < n) a[r + 1]--;
        }

        int tmp = 0;
        cout << ""hola1"" << endl;
        for (int i = 0; i < n; ++i) {
            tmp += a[i];
            a[i] = tmp;
        }

        bool possible = true;
        for (int i = 0; i < n; ++i) {
            if (a[i] < nums[i]) possible = false;
        }

        return possible;
    }
};",1454826830
pocochuk,pocochuk,520,3643,cpp,"// #pragma GCC optimize (""Ofast"")
#include <bits/stdc++.h>
using namespace std;



#ifdef LOCAL
    #include ""helpers/debug.h""
    #define GA dbg(0);
#else
    #define dbg(...)     0
    #define chk(...)     0
    #define GA 0;

    #define RAYA         0
#endif



const auto beg_time = std::chrono::high_resolution_clock::now();
double time_elapsed() { return chrono::duration<double>(std::chrono::high_resolution_clock::now() - beg_time) .count(); }



// building blocks
using ll  = long long;
using db  = long double;
using str = string;

//? priority_queue for minimum
template<class T> using pqg = priority_queue<T, vector<T>, greater<T>>;
 
using ull  = unsigned long long;
//? using i64  = long long;
//? using u64  = uint64_t;
//? using i128 = __int128;
//? using u128 = __uint128_t;
//? using f128 = __float128;



// pairs
using pi = pair<int, int>;
using pl = pair<ll, ll>;
using pd = pair<db, db>;

#define mp make_pair
#define f  first
#define s  second



#define tcT template <class T
#define tcTU tcT, class U

tcT > using V = vector<T>;
tcT, size_t SZ > using AR = array<T, SZ>;
using vi = V<int>;
using vb = V<bool>;
using vl = V<ll>;
using vd = V<db>;
using vs = V<str>;
using vpi = V<pi>;
using vpl = V<pl>;
using vpd = V<pd>;

using vvi = V<vi>;
using vvl = V<vl>;
using vvb = V<vb>;

// vectors
// oops size(x), rbegin(x), rend(x) need C++17
#define sz(x) int((x).size())
#define bg(x) begin(x)
#define all(x) bg(x), end(x)
#define rall(x) x.rbegin(), x.rend()
#define sor(x) sort(all(x))
#define rsz resize
#define ins insert
#define pb push_back
#define eb emplace_back
#define ft front()
#define bk back()
#define ts to_string

#define lb lower_bound
#define ub upper_bound



// loops
#define FOR(i, a, b) for (int i = (a); i < (b); ++i)
#define F0R(i, a) FOR(i, 0, a)
#define ROF(i, a, b) for (int i = (b)-1; i >= (a); --i)
#define R0F(i, a) ROF(i, 0, a)
#define rep(a) F0R(_, a)
#define each(a, x) for (auto &a : x)



//? Template
const int MOD = 998244353;
const int MX = (int)2e5 + 5;
const ll BIG = 1e18;  //? not too close to LLONG_MAX
const ll INF = 1e18;
const db PI = acos((db)-1);
const int dx[4]{1, 0, -1, 0}, dy[4]{0, 1, 0, -1};  //? for every grid problem!!
mt19937 rng((uint32_t)chrono::steady_clock::now().time_since_epoch().count());

//? Generator
int rng_int(int L, int R) {
    assert(L <= R);
    return uniform_int_distribution<int>(L, R)(rng);
} 
ll rng_ll(ll L, ll R) {
    assert(L <= R);
    return uniform_int_distribution<ll>(L, R)(rng);
}
//? /Generator

#define lb lower_bound
#define ub upper_bound
tcT > int lwb(V<T>& a, const T& b) { return int(lb(all(a), b) - bg(a)); }
tcT > int upb(V<T>& a, const T& b) { return int(ub(all(a), b) - bg(a)); }

ll cdiv(ll a, ll b) {
	return a / b + ((a ^ b) > 0 && a % b);
}  // divide a by b rounded up
ll fdiv(ll a, ll b) {
	return a / b - ((a ^ b) < 0 && a % b);
}  // divide a by b rounded down

tcT > bool ckmin(T &a, const T &b) {
	return b < a ? a = b, 1 : 0;
}  // set a = min(a,b)
tcT > bool ckmax(T &a, const T &b) {
	return a < b ? a = b, 1 : 0;
}

/**
 * Description: 1D range increment and sum query.
 * Source: USACO Counting Haybales
 	* https://codeforces.com/blog/entry/82400
 * Verification: USACO Counting Haybales
 */

struct LazySeg { 
	struct F { // lazy update
		ll inc = 0;
		F() {}
		F(ll x) { inc = x; }
		F& operator*=(const F& a) { inc += a.inc; return *this; }
	}; V<F> lazy;
	struct T { // data you need to store for each interval
		ll sz = 1, mx = -INF, sum = 0;
		T() {}
		T(ll x) { mx = sum = x; }
		friend T operator+(const T& a, const T& b) {
			T res; res.sz = a.sz+b.sz;
			res.mx = max(a.mx,b.mx), res.sum = a.sum+b.sum;
			return res;
		}
		T& operator*=(const F& a) {
			mx += a.inc; sum += (ll)sz*a.inc; return *this; }
	}; V<T> seg;
	int SZ = 1;
	void init(const V<T>& _seg) {
		while (SZ < sz(_seg)) SZ *= 2;
		seg.rsz(2*SZ); lazy.rsz(2*SZ);
		F0R(i,SZ) seg[SZ+i] = _seg[i];
		ROF(i,1,SZ) pull(i);
	}
	void push(int ind) { /// modify values for current node
		seg[ind] *= lazy[ind];
		if (ind < SZ) F0R(i,2) lazy[2*ind+i] *= lazy[ind];
		lazy[ind] = F();
	} // recalc values for current node
	void pull(int ind) { seg[ind] = seg[2*ind]+seg[2*ind+1]; }
	void upd(int lo, int hi, F inc, int ind, int L, int R) {
		push(ind); if (hi < L || R < lo) return;
		if (lo <= L && R <= hi) { 
			lazy[ind] = inc; push(ind); return; }
		int M = (L+R)/2; upd(lo,hi,inc,2*ind,L,M); 
		upd(lo,hi,inc,2*ind+1,M+1,R); pull(ind);
	}
	void upd(int lo, int hi, ll inc) { upd(lo,hi,{inc},1,0,SZ-1); }
	T query(int lo, int hi, int ind, int L, int R) {
		push(ind); if (lo > R || L > hi) return T();
		if (lo <= L && R <= hi) return seg[ind];
		int M = (L+R)/2; 
		return query(lo,hi,2*ind,L,M)+query(lo,hi,2*ind+1,M+1,R);
	}
	T query(int lo, int hi) { return query(lo,hi,1,0,SZ-1); }
};
                
class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = sz(nums);
        LazySeg st;
        st.seg.resize(n);
        for (int i = 0; i < n; ++i) {
            st.seg[i] = nums[i];
        }
            
        st.init(st.seg);
        cout << ""hola"" << endl;
        int q = sz(queries);
        int response = -1;
        if (st.query(0, n-1).mx <= 0) {
            return 0;
        }
        
        for (int i = 0; i < q; ++i) {
            int l = queries[i][0], r = queries[i][1];
            ll val = queries[i][2];

            st.upd(l, r, -val);

            if (st.query(0, n - 1).mx <= 0) {
                response = i + 1;
                break;
            }
        }

        return response;
    }
};",1454840746
dirigibility,dirigibility,522,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        s = sum(nums)
        acc = count = 0
        for n in nums:
            acc += n
            if n == 0 and abs(acc*2-s) <= 1:
                count += 2 if acc*2 == s else 1
        return count",1454807921
dirigibility,dirigibility,522,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        queries.sort()
        k = 0
        heap = []
        for i,n in enumerate(nums):
            while k < len(queries) and queries[k][0] == i:
                heappush(heap,queries[k][1])
                k += 1
            while heap and heap[0] < i:
                heappop(heap)
            if len(heap) < n:
                return False
        return True",1454819973
dirigibility,dirigibility,522,3643,python3,"class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        def good(l):
            q = sorted(queries[:l])
            k = 0
            heap = []
            s = 0
            for i,n in enumerate(nums):
                while k < len(q) and q[k][0] == i:
                    s += q[k][2]
                    heappush(heap,q[k][1:])
                    k += 1
                while heap and heap[0][0] < i:
                    s -= heappop(heap)[1]
                if s < n:
                    return False
            return True
        m = len(queries)+1
        result = bisect_left(range(m),True,key=good)
        return result if result < m else -1",1454826187
helinaik_11,helinaik_11,524,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {

        vector<int> w=nums;
        vector<int> zeros;
        int n=nums.size();
        for(int i=0;i<n;i++)
        {
            if(nums[i]==0) zeros.push_back(i);
        }
        int count=0;
        for(auto &i: zeros)
        {
            
            w=nums;
            char move='l';
            int curr=i;
            curr--;
            while(curr>=0 && curr<n)
            {
                if(w[curr]==0 && move=='l') curr--;
                else if(w[curr]==0 && move=='r') curr++;
                else
                {
                    w[curr]--;
                    if(move=='l') 
                    {
                        move='r';
                        curr++;
                    }
                    else
                    {
                        move='l';
                        curr--;
                    }
                }
            }
            int f=0;
            for(auto &it: w)
            {
                if(it!=0) 
                {
                    f=1;
                    break;
                }
            }
            count+=(f==0);
            //right

            w=nums;
            move='r';
            curr=i;
            curr++;
            while(curr>=0 && curr<n)
            {
                if(w[curr]==0 && move=='l') curr--;
                else if(w[curr]==0 && move=='r') curr++;
                else
                {
                    w[curr]--;
                    if(move=='l') 
                    {
                        move='r';
                        curr++;
                    }
                    else
                    {
                        move='l';
                        curr--;
                    }
                }
            }
            f=0;
            for(auto &it: w)
            {
                if(it!=0) 
                {
                    f=1;
                    break;
                }
            }
            count+=(f==0);
 
        }
        return count;
    }
};",1454813679
helinaik_11,helinaik_11,524,3639,cpp,"class Solution {
public:
        bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {

        int n=nums.size();
        vector<int> count(n+1,0);

        for(auto &query: queries)
        {
            count[query[0]]++;
            count[query[1]+1]--;
        }

        for(int i=1;i<count.size();i++)
        {
            count[i]=count[i]+count[i-1];
        }

        for(int i=0;i<n;i++)
        {
            if(count[i]<nums[i]) return false;
        }

        return true;
    }
};",1454823024
helinaik_11,helinaik_11,524,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {

        int n=nums.size();
        int left=0,right=queries.size(),k;
        int mn=INT_MAX;
        while(left<=right)
        {
            k=(left+right)/2;
            vector<int> count(n+1,0);

            for(int i=0;i<k;i++)
            {
                count[queries[i][0]]+=queries[i][2];
                count[queries[i][1]+1]-=queries[i][2];
            }
            for(int i=1;i<n;i++)
                {
                    count[i]+=count[i-1];
                }
            int f=0;
            for(int i=0;i<n;i++)
            {
                if(nums[i]>count[i])
                {
                    f=1;
                    break;
                }
            }
            if(f==0) 
            {
                right=k-1;
                mn=min(k,mn);
            }
            else left=k+1;
        }
        if(mn==INT_MAX) return -1;
        return mn;
    }
};",1454840901
Medhansh Rawat,Maddy_22,527,3616,cpp,"class Solution {
    private:
    bool check(vector<int> nums, int curr, int dir) {
        int n = nums.size();
        while (curr >= 0 && curr < n) {
            if (nums[curr] == 0) {
                curr += dir;
            } else {
                nums[curr]--;
                dir *= -1;
                curr += dir;
            }
        }
        for(auto it:nums){
            if(it!=0) {
                return false;
            }
        }
        return true;
    }
public:
    int countValidSelections(vector<int>& nums) {
        int n = nums.size();
        int ans  = 0;
        for (int i = 0; i < n; i++) {
            if (nums[i] == 0) {
                ans  += (check(nums, i, 1));
                ans += (check(nums, i, -1));
            }
        }
        return ans ;
    }
};",1454834687
Medhansh Rawat,Maddy_22,527,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int N =nums.size();
        vector<int> v(N,0);
        for(auto it:queries){
            int l = it[0];
            int r = it[1];
            v[l]++;
            if(r+1 < N){
                v[r+1]--;
            }
        }
        for(int i=1;i<N;i++){
            v[i]+=v[i-1];
        }
        for(int i=0;i<N;i++){
            if(nums[i] > v[i]){
                return false;
            }
        }
        return true;
    }
};",1454807799
Medhansh Rawat,Maddy_22,527,3643,cpp,"class Solution {
    private:
    bool check(int mid , vector<int>& nums, vector<vector<int>>& queries){
        int N =nums.size();
        vector<int> v(N,0);
        for(int i=0;i<mid;i++){
            int l = queries[i][0];
            int r = queries[i][1];
            int val = queries[i][2];
            v[l] -= val;
            if(r+1 < N){
                v[r+1] += val;
            }
        }
        for(int i=1;i<N;i++){
            v[i]+=v[i-1];
        }
        for(int i=0;i<N;i++){
            if(nums[i] > abs(v[i])){
                return false;
            }
        }
        return true;
    }
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int low = 0,high = queries.size();
        int ans = -1;
        while(low <= high){
            int mid = low + (high - low)/2;
            if(check(mid , nums , queries)){
                ans = mid;
                high = mid - 1;
            }
            else{
                low = mid + 1;
            }
        }
        return ans;
    }
};
",1454840963
Kinon,Kinon,528,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int sum = 0;
        for(int i=0; i<nums.size(); i++){
            sum += nums[i];
        }
        int ans = 0, cur = 0;
        for(int i=0; i<nums.size(); i++){
            if(nums[i] == 0){
                if(cur*2 == sum) ans += 2;
                if(cur*2+1 == sum) ans++;
                if(cur*2-1 == sum) ans++;
            }
            cur += nums[i];
        }
        return ans;
    }
};",1454808191
Kinon,Kinon,528,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        bool is0 = true;
        for(int i=0; i<nums.size(); i++) is0 = (nums[i] == 0 && is0);
        if(is0) return 0;
        long long lo = 0, hi = queries.size()+1;
        while(hi-lo > 1){
            long long mid = (lo+hi)/2, delta[nums.size()+1];
            for(int i=0; i<=nums.size(); i++) delta[i] = 0;
            for(int i=0; i<mid; i++){
                delta[queries[i][0]] += 1;
                delta[queries[i][1]+1] -= 1; 
            }
            bool bisa = true;
            long long cur = 0, idx = 0;
            for(int i=0; i<nums.size(); i++){
                cur += delta[i];
                bisa = (nums[i] <= cur && bisa);
            }
            if(bisa){
                hi = mid;
            }else{
                lo = mid;
            }
        }
        if(hi > queries.size()) return false;
        return true;
    }
};",1454840972
Kinon,Kinon,528,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        bool is0 = true;
        for(int i=0; i<nums.size(); i++) is0 = (nums[i] == 0 && is0);
        if(is0) return 0;
        long long lo = 0, hi = queries.size()+1;
        while(hi-lo > 1){
            long long mid = (lo+hi)/2, delta[nums.size()+1];
            for(int i=0; i<=nums.size(); i++) delta[i] = 0;
            for(int i=0; i<mid; i++){
                delta[queries[i][0]] += queries[i][2];
                delta[queries[i][1]+1] -= queries[i][2]; 
            }
            bool bisa = true;
            long long cur = 0, idx = 0;
            for(int i=0; i<nums.size(); i++){
                cur += delta[i];
                bisa = (nums[i] <= cur && bisa);
            }
            if(bisa){
                hi = mid;
            }else{
                lo = mid;
            }
        }
        if(hi > queries.size()) return -1;
        return hi;
    }
};",1454838323
kasi nathan,kasinathansj,529,3616,java,"class Solution {
    public int countValidSelections(int[] nums) {
        int sum = 0;
        for(int i : nums){
            sum += i;
        }
        int ans = 0;
        int sum1 = 0;
        for(int i : nums){
            sum1 += i;
            sum -= i;
            if(i==0){
                if(sum1-sum == 0)ans += 2;
                else if(sum1-sum==1)ans++;
                else if(sum1-sum==-1)ans++;
            }
        }
        return ans;
    }
}",1454808081
kasi nathan,kasinathansj,529,3639,java,"class Solution {
    public boolean isZeroArray(int[] nums, int[][] queries) {
        HashMap<Integer,Integer> hm = new HashMap<>();
        for(int q[] : queries){
            hm.merge(q[0],1,Integer::sum);
            hm.merge(q[1]+1,-1,Integer::sum);
        }
        int sum = 0;
        for(int i = 0 ; i < nums.length ; i++){
            sum += hm.getOrDefault(i,0);
            if(sum<nums[i])return false;
        }
        return true;
    }
}",1454811133
kasi nathan,kasinathansj,529,3643,java,"class Solution {
    public int minZeroArray(int[] nums, int[][] queries) {
        int lo = 0;
        int hi = queries.length;
        int ans = -1;
        while(lo<=hi){
            int mid = (lo+hi)/2;
            boolean is = isZeroArray(nums,queries,mid);
            if(is){
                ans = mid;
                hi = mid-1;
            }else{
                lo = mid+1;
            }
        }
        return ans;
    }
    public boolean isZeroArray(int[] nums, int[][] queries , int ql) {
        HashMap<Integer,Integer> hm = new HashMap<>();
        for(int i = 0 ; i < ql ; i++){
            int q[] = queries[i];
            hm.merge(q[0],q[2],Integer::sum);
            hm.merge(q[1]+1,-q[2],Integer::sum);
        }
        int sum = 0;
        for(int i = 0 ; i < nums.length ; i++){
            sum += hm.getOrDefault(i,0);
            if(sum<nums[i])return false;
        }
        return true;
    }
}",1454826296
shivam gupta,gupta_shivam234,530,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int n=nums.size();
        vector<int>arr(n);
        for(int i=0; i<n; i++){
            arr[i]=nums[i];
        }
        int ans=0;
        for(int i=0; i<n; i++){
            if(nums[i]==0){
                int curr=i;
                int dir=1;
                while(curr<n && curr>=0){
                    if(arr[curr]==0){
                        curr=curr+dir;
                    }
                    else{
                        arr[curr]--;
                        if(dir==1) dir=-1;
                        else dir=1;
                        curr=curr+dir;
                    }
                }
                int flag=0;
                for(int i=0; i<n; i++){
                    if(arr[i]!=0){
                        flag=1;
                        break;
                    }
                }
                if(flag==0) ans++;
                for(int i=0; i<n; i++){
                    arr[i]=nums[i];
                }
                curr=i;
                dir=-1;
                while(curr<n && curr>=0){
                    if(arr[curr]==0){
                        curr=curr+dir;
                    }
                    else{
                        arr[curr]--;
                        if(dir==1) dir=-1;
                        else dir=1;
                        curr=curr+dir;
                    }
                }
                flag=0;
                for(int i=0; i<n; i++){
                    if(arr[i]!=0){
                        flag=1;
                        break;
                    }
                }
                if(flag==0) ans++;
                for(int i=0; i<n; i++){
                    arr[i]=nums[i];
                }
            }
        }
        return ans;
    }
};",1454814629
shivam gupta,gupta_shivam234,530,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n=nums.size();
        vector<int>pref(n+1,0);
        for(auto it: queries){
            pref[it[0]]++;
            pref[it[1]+1]--;
        }
        for(int i=1; i<=n; i++){
            pref[i]=pref[i-1]+pref[i];
        }
        for(int i=0; i<n; i++){
            if(nums[i]>pref[i]) return false;
        }
        return true;
    }
};",1454824004
shivam gupta,gupta_shivam234,530,3643,cpp,"class Solution {
public:
    bool check(int mid,vector<int>&nums,vector<vector<int>>&queries){
        int n=nums.size();
        vector<int>pref(n+1,0);
        for(int i=0; i<mid; i++){
            int l=queries[i][0];
            int r=queries[i][1];
            int w=queries[i][2];
            pref[l]+=w;
            pref[r+1]-=w;
        }
        for(int i=1; i<=n; i++){
            pref[i]+=pref[i-1];
        }
        for(int i=0; i<n; i++){
            if(nums[i]>pref[i]) return false;
        }
        return true;
    }
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n=nums.size();
        int m=queries.size();
        int ans=-1,mid;
        int low=0,high=m;
        while(low<=high){
            mid=low+(high-low)/2;
            if(check(mid,nums,queries)){
                ans=mid;
                high=mid-1;
            }
            else low=mid+1;
        }
        return ans;
    }
};",1454841017
Sunny Sehwag,sunnny0502,531,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        
        vector<int> leftsum , rightsum;
        
        int sum = 0;
        
        for(int i = 0 ; i < nums.size() ; i++){
            
            sum += nums[i];
            
            leftsum.push_back(sum);
        }
        
        sum = 0;
        
        for(int i = nums.size() - 1 ; i >= 0 ; i--){
            
            sum += nums[i];
            
            rightsum.push_back(sum);
        }
        
        reverse(rightsum.begin() , rightsum.end());
        
        int ans = 0;
        
        for(int i = 0 ; i < nums.size() ; i++){
            
            if(nums[i] == 0 and rightsum[i] == leftsum[i])      ans += 2;
            
            if(nums[i] == 0 and rightsum[i] == 1 + leftsum[i])      ans += 1;
            
            if(nums[i] == 0 and 1 + rightsum[i] == leftsum[i])      ans += 1;
        }
        
        return ans;
    }
};",1454809385
Sunny Sehwag,sunnny0502,531,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        
        vector<int> q(nums.size() + 1 , 0);
        
        for(auto &it : queries){
            
            q[it[0]]--;
            
            q[it[1] + 1]++;
        }
        
        int sum = 0;
        
        for(int i = 0 ; i < q.size() ; i++){
            
            sum += q[i];
            
            q[i] = sum;
        }
        
        for(int i = 0 ; i < nums.size() ; i++){
            
            if(nums[i] + q[i] <= 0)     continue;
            
            else        return false;
        }
        
        return true;
    }
};",1454819539
Sunny Sehwag,sunnny0502,531,3643,cpp,"// 2nd ques plus binary search kar deta hun 

class Solution {
public:
    
    bool ispos(int mid , vector<int> &nums , vector<vector<int>> &queries){
        
        vector<int> q(nums.size() + 1 , 0);
        
        for(int i = 0 ; i < mid ; i++){
            
            int l = queries[i][0] , r = queries[i][1] , val = queries[i][2];
            
            q[l] -= val;
            
            q[r + 1] += val;
        }
        
        int sum = 0;
        
        for(int i = 0 ; i < q.size() ; i++){
            
            sum += q[i];
            
            q[i] = sum;
        }
        
        for(int i = 0 ; i < nums.size() ; i++){
            
            if(nums[i] + q[i] <= 0)     continue;
            
            else        return false;
        }
        
        return true;
    }
    
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        
        int low = 0 , high = queries.size() , ans = -1;
        
        while(low <= high){
            
            int mid = low + (high - low) / 2;
            
            if(ispos(mid , nums , queries) == true){
                
                ans = mid;
                
                high = mid - 1;
            }
            
            else        low = mid + 1;
        }
        
        return ans;
    }
};",1454841031
Megh Shah,megh_2535,532,3616,cpp,"class Solution {
public:
    bool find(vector<int> nums, int start, int dir) {
        int n = nums.size();
        int curr = start;
        while (curr >= 0 && curr < n) {
            if (nums[curr] == 0) {
                curr += dir;
            } else {
                nums[curr]--;
                dir *= -1;
                curr += dir;
            }
        }
        for (int num : nums) {
            if (num != 0)
                return false;
        }
        return true;
    }
    int countValidSelections(vector<int>& nums) {
        int n = nums.size();
        int ans = 0;
        for (int i = 0; i < n; ++i) {
            if (nums[i] == 0) {
                if (find(nums, i, -1)) {
                    ans++;
                }
                if (find(nums, i, 1)) {
                    ans++;
                }
            }
        }
        return ans;
    }
};",1454809589
Megh Shah,megh_2535,532,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        vector<int>temp(n,0);
        for(int  i = 0; i < queries.size(); i++){
            int x = queries[i][0];
            int y = queries[i][1];
            temp[x] += 1;
            if(y < n - 1){
                 temp[y+1] += -1;
            }
        }
        if(temp[0] < nums[0]){
             return false;
        }
        for(int  i = 1 ; i< n;i++){
             temp[i] += temp[i-1];
            if(temp[i] < nums[i]){
                 return false;
            }
        }
        return true;
    }
};",1454821804
Megh Shah,megh_2535,532,3643,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums,vector<vector<int>>& queries, int k) {
        int n = nums.size();
        vector<int> temp(n, 0);
        for (int i = 0; i < k; ++i) {
            int x = queries[i][0];
            int y = queries[i][1];
            int val = queries[i][2];
            temp[x] += val;
            if (y + 1 < n) {
                temp[y + 1] -= val;
            }
        }
        for (int i = 1; i < n; ++i) {
            temp[i] += temp[i - 1];
        }
        for (int i = 0; i < n; ++i) {
            if (temp[i] < nums[i]) {
                return false;
            }
        }
        return true;
    }
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int m = queries.size();
        int left = 0, right = m;
        int result = -1;
        while (left <= right) {
            int mid = left + (right - left) / 2;
            if (isZeroArray(nums, queries, mid)) {
                result = mid;
                right = mid - 1;
            } else {
                left = mid + 1;
            }
        }
        return result;
    }
}
;",1454833744
ASB_,ASB_,533,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums)
    {
        int n = nums.size();
        int ans = 0;
        
        auto f = [&](vector<int> a, int pos, int dir) {
            if (a[pos] != 0)
                return 0;
            int cur = pos;
            while (cur < n && cur > -1) {
                if (a[cur] > 0) {
                    a[cur]--;
                    dir = !dir;
                }
                if (dir == 1) {
                    cur++;
                } else
                    cur--;
            }
            int fg = 0;
            for (int i = 0; i < n; i++) {
                if (a[i] != 0)
                    fg = 1;
            }
            if (fg == 0)
                return 1;
            else
                return 0;
        };
        for (int i = 0; i < n; i++) {
            ans += f(nums,i, 1);
            ans += f(nums,i, 0);
        }
        return ans;
    }
};",1454816924
ASB_,ASB_,533,3639,cpp,"typedef long long ll;
class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries)
    {
        ll n = nums.size();
        vector<ll> sw(n + 1, 0);
        for (auto u : queries) {
            sw[u[0]] += 1;
            sw[u[1] + 1] -= 1;
        }
        nums[0] -= sw[0];
        for (ll i = 1; i < n; i++) {
            sw[i] += sw[i - 1];
            nums[i] -= sw[i];
        }
        ll fg = 0;
        for (auto u : nums) {
            if (u > 0)
                fg = 1;
        }
        if (fg == 0)
            return true;
        else
            return false;
    }
};",1454827542
ASB_,ASB_,533,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries)
    {
        auto a = nums;
        int n = a.size();
        auto check = [&](int x) {
            vector<int> sw(n + 1, 0);
            for (int i = 0; i < x; i++) {
                auto u = queries[i];
                sw[u[0]] += u[2];
                sw[u[1] + 1] -= u[2];
            }
            for (int i = 1; i < n; i++) {
                sw[i] += sw[i - 1];
            }
            int fg = 1;
            for (int i = 0; i < n; i++) {
                if (a[i] > sw[i]) {
                    fg = 0;
                }
            }
            return fg;
        };
        if (!check(queries.size())) {
            return -1;
        }
        if(check(0)) {
            return 0;
        }
        int l = 0;
        int r = queries.size() + 1;
        cout << check(2) << endl;
        while (r - l > 1) {
            int mid = (r + l) >> 1;
            if (check(mid)) {
                r = mid;
            } else
                l = mid;
        }
        return r;
    }
};",1454841081
Eric Ge,ericlege98,534,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        su = sum(nums)
        ans = 0
        if su % 2 == 0:
            target = su // 2
            run = 0
            for i in nums:
                if i == 0 and run == target:
                    ans += 2
                run += i
        else:
            target = su // 2
            run = 0
            for i in nums:
                if i == 0 and (run == target or run == target + 1):
                    ans += 1
                run += i
        return ans",1454807776
Eric Ge,ericlege98,534,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        if sum(nums) == 0:
            return True
        def ok(k):
            events = []
            for l, r in queries[:k]:
                events.append((l, 1))
                events.append((r+1, -1))
            events.sort()
            ind = 0
            run = 0
            for i, n in enumerate(nums):
                while ind < len(events) and events[ind][0] == i:
                    run += events[ind][1]
                    ind += 1
                if n > run:
                    return False
            return True


            
        lo, hi = 1, len(queries) + 1
        while hi - lo > 1:
            mid = (hi + lo) // 2
            if not ok(mid):
                lo = mid
            else:
                return True
        if ok(lo):
            return True
        if lo == len(queries):
            return False
        if ok(lo+1):
            return True
        return False
        ",1454833763
Eric Ge,ericlege98,534,3643,python3,"class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        if sum(nums) == 0:
            return 0
        def ok(k):
            events = []
            for l, r, v in queries[:k]:
                events.append((l, v))
                events.append((r+1, -v))
            events.sort()
            ind = 0
            run = 0
            for i, n in enumerate(nums):
                while ind < len(events) and events[ind][0] == i:
                    run += events[ind][1]
                    ind += 1
                if n > run:
                    return False
            return True


            
        lo, hi = 1, len(queries) + 1
        while hi - lo > 1:
            mid = (hi + lo) // 2
            if not ok(mid):
                lo = mid
            else:
                hi = mid
        if ok(lo):
            return lo
        if lo == len(queries):
            return -1
        if ok(lo+1):
            return lo+1
        return -1
        ",1454830604
josh7788,josh7788,538,3616,java,"class Solution {
    public int countValidSelections(int[] nums) {
        int res = 0;
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] != 0) {
                continue;
            }
            if (can(Arrays.copyOf(nums, nums.length),i,1)) {
                res++;
            }
            if (can(Arrays.copyOf(nums, nums.length),i,-1)) {
                res++;
            }
        }
        return res;
    }

    private static boolean can(int[] nums, int i , int dir) {
        if (i >= nums.length || i < 0) {
            return check(nums);
        }

        if (nums[i] == 0) {
            return can(nums, i + dir, dir);
        }

        nums[i]--;
        dir = -dir;
        return can(nums, i + dir, dir);
    }

    private static boolean check(int[] nums) {
        for (int i : nums) {
            if (i > 0) {
                return false;
            }
        }

        return true;
    }
}",1454841351
josh7788,josh7788,538,3639,java,"class Solution {
    public boolean isZeroArray(int[] nums, int[][] queries) {
        int[] change = new int[nums.length + 1];

        for (int[] q : queries) {
            change[q[0]]--;
            change[q[1] + 1]++;
        }

        int sum = 0;

        for (int i = 0 ; i < nums.length; i++) {
            sum += change[i];
            if (nums[i] + sum > 0) {
                return false;
            }
        }

        return true;
    }
}",1454809188
josh7788,josh7788,538,3643,java,"class Solution {
    public int minZeroArray(int[] nums, int[][] queries) {
        if (!can(nums, queries, queries.length)) {
            return -1;
        }

        if (can(nums, queries, 0)) {
            return 0;
        }

        int l = 0, r = queries.length;

        while (l < r) {
            int mid = (l + r) / 2;

            boolean can = can(nums, queries, mid);

            if (can) {
                r = mid;
            } else {
                l = mid + 1;
            }
        }

        return l;
    }

    private static boolean can(int[] nums, int[][] queries, int k) {
        int[] change = new int[nums.length + 1];

        for (int i = 0; i< k; i++) {
            int[] q = queries[i];
            change[q[0]] -= q[2];
            change[q[1] + 1] += q[2];
        }

        int sum = 0;

        for (int i = 0 ; i < nums.length; i++) {
            sum += change[i];
            if (nums[i] + sum > 0) {
                return false;
            }
        }

        return true;
    }
}",1454823520
otto,_otto,540,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        
        
        ans = 0
        dd = ['L', 'R']
        start = [i for i, val in enumerate(nums) if val == 0]
        n = len(nums)
        for curr in start:
            for d in dd:
                fuck = nums[:]
                fuckc = curr
                curr_d = d
                while 0 <= fuckc < n:
                    if fuck[fuckc] == 0:
                        if curr_d == 'R':
                            fuckc += 1
                        else:
                            fuckc -= 1
                    elif fuck[fuckc] > 0:
                        fuck[fuckc] -= 1
                        curr_d = 'L' if curr_d == 'R' else 'R'
                        if curr_d == 'R':
                            fuckc += 1
                        else:
                            fuckc -= 1
                if all(val == 0 for val in fuck):
                    ans += 1
        return ans
",1454819290
otto,_otto,540,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        n = len(nums)
        diff = [0] * (n + 1)
        for l, r in queries:
            diff[l] += 1
            if r + 1 < n:
                diff[r + 1] -= 1
        cnt = [0] * n
        cnt[0] = diff[0]
        for i in range(1, n):
            cnt[i] = cnt[i - 1] + diff[i]
        for i in range(n):
            if cnt[i] < nums[i]:
                return False
        return True",1454816398
otto,_otto,540,3643,python3,"class lazysgt:
    def __init__(self, l, r):
        self.l = l
        self.r = r
        self.left = None
        self.right = None
        self.max = 0
        self.lazy = 0

def build(node, nums):
    if node.l == node.r:
        node.max = nums[node.l]
        return
    mid = (node.l + node.r) // 2
    node.left = lazysgt(node.l, mid)
    node.right = lazysgt(mid + 1, node.r)
    build(node.left, nums)
    build(node.right, nums)
    node.max = max(node.left.max, node.right.max)

def push_down(node):
    if node.lazy != 0:
        if node.left:
            node.left.max -= node.lazy
            node.left.lazy += node.lazy
        if node.right:
            node.right.max -= node.lazy
            node.right.lazy += node.lazy
        node.lazy = 0

def update(node, l, r, val):
    if node.r < l or node.l > r:
        return
    if l <= node.l and node.r <= r:
        node.max -= val
        node.lazy += val
        return
    push_down(node)
    update(node.left, l, r, val)
    update(node.right, l, r, val)
    node.max = max(node.left.max, node.right.max)

def query(node):
    return node.max
    
class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        n = len(nums)
        t = lazysgt(0, n - 1)
        build(t, nums)
        if all(x == 0 for x in nums): return 0
        for k, (l, r, val) in enumerate(queries, 1):
            update(t, l, r, val)
            ma = query(t)
            if ma <= 0:
                return k
        return -1
        ",1454826678
noBODY,9BODY,541,3616,cpp,"class Solution {
public:
    bool isValid(int pos,int dir,int total,vector<int> nums){

        int i=pos;
        int n = nums.size();
        int sum  = 0;
        while(i<n &&  i>=0){

            if(nums[i]==0){
                i += dir;
            }else if(nums[i]>0){
                sum++;
                nums[i]--;
                dir = (-1)*dir;
                i+=dir;
            }
        }
        return sum == total;
    }
    int countValidSelections(vector<int>& nums) {
        int sum =0;
        for(auto x : nums){
            sum+=x;
        }
        int count = 0;
        for(int i=0;i<nums.size();i++){
            if(nums[i]==0){
                if(isValid(i,1,sum,nums)) count++;
                if(isValid(i,-1,sum,nums)) count++;
            }
        }
        return count;
    }
};",1454819249
noBODY,9BODY,541,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        vector<int>arr(n+1,0);
        for(auto x : queries){
            arr[x[0]]++;
            arr[x[1]+1]--;
        }
        for(int i=0;i<n;i++){
            arr[i+1] += arr[i];
        }
        for(int i=0;i<n;i++){
            if(nums[i] > arr[i]){
                return false;
            }
        }
        return true;
    }
};",1454830501
noBODY,9BODY,541,3643,cpp,"class Solution {
public:
    bool isValid(int k,auto& nums,auto&q){
        int n = nums.size();
        vector<int>arr(n+1,0);
        for(int i=0;i<k;i++){
            auto x = q[i];
            arr[x[0]] += x[2];
            arr[x[1]+1] -= x[2];
        }
        for(int i=0;i<n;i++){
            arr[i+1] += arr[i];
        }
        for(int i=0;i<n;i++){
            if(nums[i] > arr[i]){
                return false;
            }
        }
        return true;
    }
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        vector<int>arr(n+1,0);
        int l = 0,r=queries.size();
        int ans = -1;
        while(l<=r){
            int mid = l + (r-l)/2;
            if(isValid(mid,nums,queries)){
                ans = mid;
                r = mid-1;
            }else{
                l = mid+1;
            }
        }
        return ans;
        
        return true;
    }
};",1454841471
Ritik,Saber2k18,542,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int n = nums.size();
        int sum = accumulate(nums.begin(), nums.end(),0);
        int p = 0;
        int ans = 0;
        for(int i=0;i<n;i++){
            p+=nums[i];
            if(nums[i]==0){
                if(p==sum-p)
                    ans+=2;
                else if(p+1==sum-p || p==sum-p+1)
                    ++ans;
            }
        }
        return ans;
    }
};",1454814682
Ritik,Saber2k18,542,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        vector<int> p(n, 0);
        for(auto x: queries){
            --p[x[0]];
            if(x[1]+1<n)
                ++p[x[1]+1];
        }
        for(int i=0;i<n;i++){
            p[i]=(i>0?p[i-1]:0)+p[i];
        }
        for(int i=0;i<n;++i){
            nums[i]+=p[i];
            if(nums[i]>0)
                return false;
        }
        return true;
    }
};",1454822032
Ritik,Saber2k18,542,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        bool okk = true;
        for(int i=0;i<n;i++){
            if(nums[i]!=0){
                okk = false;
                break;
            }
        }
        if(okk)
            return 0;
        int l=0, r=queries.size()-1;
        int ans = (int)queries.size();
        while(l<=r){
            int m = (l+r)/2;
            bool ok = true;
            vector<int> p(n, 0);
            vector<int> tnums = nums;
            tnums.resize(n);
            for(int i=0;i<=m;++i){
                p[queries[i][0]]-=queries[i][2];
                if(queries[i][1]+1<n)
                    p[queries[i][1]+1]+=queries[i][2];
            }
            for(int i=0;i<n;++i){
                p[i]=(i>0?p[i-1]:0)+p[i];
            }
            for(int i=0;i<n;i++){
                tnums[i]+=p[i];
                if(tnums[i]>0){
                    ok = false;
                    break;
                }
            }
            if(ok){
                ans = min(ans, m);
                r = m - 1;
            } else {
                l = m + 1;
            }
        }
        if(ans==(int)queries.size())
            return -1;
        return ans + 1;
    }
};",1454834174
Shivank Dixit,dshivank630,543,3616,cpp,"// lc
#define vi vector<int>
#define vvii vector<vi>
#define vpii vector<pair<int,int>>
#define vs vector<string>
#define mii map<int, int>
#define umii unordered_map<int, int>
#define minpq(a) priority_queue<a,vi,greater<a>> pq
#define maxpq(a) priority_queue<a> pq 
#define lb lower_bound
#define ub upper_bound
#define all(x) x.begin(), x.end()
#define sall(x) sort(x.begin(), x.end());
#define rall(x) sort(x.rbegin(), x.rend())
#define pb push_back 
#define in insert
#define ff first
#define ss second
#define rep(i, a, b) for (int i = a; i < b; i++)
#define all(x) x.begin(), x.end()
#define sall(x) sort(x.begin(), x.end());
#define rall(x) sort(x.rbegin(), x.rend())
#define MAX(x) *max_element(x.begin(), x.end())
#define MIN(x) *min_element(x.begin(), x.end())
#define SUM(X) accumulate(X.begin(), X.end(), 0LL)
#define rev(a) reverse(a.begin(), a.end());

class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int ans =0, n = nums.size();
        rep(i,0,n) {
            vi temp = nums;
            if(temp[i]!=0) continue;
            int j = i;
            //left
            bool l = true, r = false;
            while(true) {
                if(temp[j]==0) {
                    if(l) j--;
                    else j++;

                    if(j<0 or j>=n) break;
                } else {
                    temp[j]--;
                     if(l) l = false,r=true;
                    else l=true,r=false;
                    if(l) j--;
                    else j++;
                    
                     if(j<0 or j>=n) break;
                }
            } 
            bool flag = true;
              rep(j,0,n) {
                    if(temp[j]!=0) {
                        flag = false;
                        break;
                    }
                }
            if(flag) ans++;

             //right
            temp = nums; j=i;
            l = false, r = true;
            while(true) {
                if(temp[j]==0) {
                    if(l) j--;
                    else j++;

                    if(j<0 or j>=n) break;
                } else {
                    temp[j]--;
                     if(l) l = false,r=true;
                    else l=true,r=false;
                    if(l) j--;
                    else j++;
                    
                     if(j<0 or j>=n) break;
                }
            }
              flag = true;
              rep(j,0,n) {
                    if(temp[j]!=0) {
                        flag = false;
                        break;
                    }
                }
            if(flag) ans++;
        }
        return ans;
    }
};",1454817713
Shivank Dixit,dshivank630,543,3639,cpp,"// lc
#define vi vector<int>
#define vvii vector<vi>
#define vpii vector<pair<int,int>>
#define vs vector<string>
#define mii map<int, int>
#define umii unordered_map<int, int>
#define minpq(a) priority_queue<a,vi,greater<a>> pq
#define maxpq(a) priority_queue<a> pq 
#define lb lower_bound
#define ub upper_bound
#define all(x) x.begin(), x.end()
#define sall(x) sort(x.begin(), x.end());
#define rall(x) sort(x.rbegin(), x.rend())
#define pb push_back 
#define in insert
#define ff first
#define ss second
#define rep(i, a, b) for (int i = a; i < b; i++)
#define all(x) x.begin(), x.end()
#define sall(x) sort(x.begin(), x.end());
#define rall(x) sort(x.rbegin(), x.rend())
#define MAX(x) *max_element(x.begin(), x.end())
#define MIN(x) *min_element(x.begin(), x.end())
#define SUM(X) accumulate(X.begin(), X.end(), 0LL)
#define rev(a) reverse(a.begin(), a.end());


class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
         int n = nums.size();
         vi psum(n+1,0);

         for(auto it:queries) {
             int l = it[0];
             int r = it[1];

             psum[l]++;
             psum[r+1]--;
         }
        rep(i,1,n+1) psum[i]+=psum[i-1];

        bool flag = true;
        rep(i,0,n) {
            if(nums[i]>psum[i]) {
                flag = false;
                break;
            }
        }
        return flag;

    }
};",1454824027
Shivank Dixit,dshivank630,543,3643,cpp,"// lc
#define vi vector<int>
#define vvii vector<vi>
#define vpii vector<pair<int,int>>
#define vs vector<string>
#define mii map<int, int>
#define umii unordered_map<int, int>
#define minpq(a) priority_queue<a,vi,greater<a>> pq
#define maxpq(a) priority_queue<a> pq 
#define lb lower_bound
#define ub upper_bound
#define all(x) x.begin(), x.end()
#define sall(x) sort(x.begin(), x.end());
#define rall(x) sort(x.rbegin(), x.rend())
#define pb push_back 
#define in insert
#define ff first
#define ss second
#define rep(i, a, b) for (int i = a; i < b; i++)
#define all(x) x.begin(), x.end()
#define sall(x) sort(x.begin(), x.end());
#define rall(x) sort(x.rbegin(), x.rend())
#define MAX(x) *max_element(x.begin(), x.end())
#define MIN(x) *min_element(x.begin(), x.end())
#define SUM(X) accumulate(X.begin(), X.end(), 0LL)
#define rev(a) reverse(a.begin(), a.end());



class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();

        auto check = [&](int mid) {
                 vi psum(n+1,0);
        
                 rep(i,0,mid) {
                     int l = queries[i][0];
                     int r = queries[i][1];
                     int val = queries[i][2];
        
                     psum[l]+=val;
                     psum[r+1]-=val;
                 }
                rep(i,1,n+1) psum[i]+=psum[i-1];
        
                bool flag = true;
                rep(i,0,n) {
                    if(nums[i]>psum[i]) {
                        flag = false;
                        break;
                    }
                }
                return flag;
        };
        int low=0,high=queries.size(), ans = -1;
        while(low <= high) {
            int mid = (low+high)>>1;
            if(check(mid)) {
                ans = mid;
                high = mid-1;
            } else {
                low = mid+1;
            }
        }
        return ans;
    }
};",1454834177
reobb,reobb,544,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        res = 0
        for i in range(len(nums)):
            if nums[i] == 0 and sum(nums[0:i]) == sum(nums[i+1:]):
                res += 2
            elif nums[i] == 0 and abs(sum(nums[0:i]) - sum(nums[i+1:])) == 1:
                res += 1
        return res",1454808514
reobb,reobb,544,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        deductions = [0 for i in range(len(nums))]
        for i, j in queries:
            deductions[i] += 1
            if j+1 < len(nums):
                deductions[j+1] -= 1        
        curr = 0
        for i in range(len(nums)):
            curr += deductions[i]
            if curr < nums[i]:
                return False
        return True
        ",1454820653
reobb,reobb,544,3643,python3,"class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        start = 0
        end = len(queries)
        while start + 1 < end:
            mid = (start + end)//2
            if self.process(nums, queries, mid):
                end = mid
            else:
                start = mid
        if self.process(nums, queries, start):
            return start
        elif self.process(nums, queries, end):
            return end
        else:
            return -1

    def process(self, nums, queries, k):
        deductions = [0 for i in range(len(nums))]
        for i, j, v in queries[0:k]:
            deductions[i] += v
            if j + 1 < len(deductions):
                deductions[j+1] -= v
        curr = 0
        for i in range(len(nums)):
            curr += deductions[i]
            if nums[i] > curr:
                #print(nums, k, False)
                return False
        #print(nums, k, True)
        return True",1454834275
xymabinogi,xymabinogi,546,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int n = nums.size();
        
        auto check = [&](int idx, int dir) -> bool {
            auto a = nums;
            while(true){
                idx += dir;
                if (idx < 0 || idx >= n) break;
                if (a[idx] == 0){
                    continue;
                }
                else {
                    // > 0
                    a[idx]--;
                    dir = -dir;
                }
            }
            for (int i = 0; i < n; i++){
                if (a[i] > 0) return false;
            }
            return true;
        };
        int res = 0;
        for (int i = 0; i < n; i++) if (nums[i] == 0){
            res += check(i, 1);
            res += check(i, -1);
        }
        return res;
    }
};",1454809684
xymabinogi,xymabinogi,546,3639,cpp,"using i64 = long long;
class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        vector<int> delta(n + 1, 0);
        for (auto q : queries){
            delta[q[0]]++;
            delta[q[1] + 1]--;
        }
        for (int i = 1; i <= n; i++){
            delta[i] += delta[i - 1];
        } 
        for (int i = 0; i < n; i++){
            if (delta[i] < nums[i]) return false;
        }
        return true;
        
        
    }
};",1454826239
xymabinogi,xymabinogi,546,3643,cpp,"using i64 = long long;
class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        int m = queries.size();
        
        bool ok = true;
        for (int i = 0; i < n; i++) {
            if (nums[i]){
                ok = false;
                break;
            }
        }
        if (ok) return 0;
        
        auto check = [&](int mx) -> bool {
            vector<i64> delta(n + 1, 0);
            for (int i = 0; i <= mx; i++){
                auto q = queries[i];
                delta[q[0]] += q[2];
                delta[q[1] + 1] -= q[2];
            }
            for (int i = 1; i <= n; i++){
                delta[i] += delta[i - 1];
            } 
            for (int i = 0; i < n; i++){
                if (delta[i] < nums[i]) return false;
            }
            return true;        
        };
        
        
        int l = 0, r = m;
        while(l < r){
            int mid = (l + r) / 2;
            if (check(mid)){
                r = mid;
            }
            else l = mid + 1;
        }
        if (l == m) return -1;
        return l + 1;
          
    }
};",1454834396
drifter,_drifter,547,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {

        vector<long long> vec;
        for (long long v: nums) {
            vec.push_back(v);
        }

        vector<long long> pre_sum((int) vec.size() + 1);
        vector<long long> suf_sum((int) vec.size() + 1);
        partial_sum(vec.begin(), vec.end(), pre_sum.begin() + 1);
        partial_sum(vec.rbegin(), vec.rend(), suf_sum.begin() + 1);

        int n = nums.size();
        int ans = 0;

        for (int i = 0; i < n; i++) {

            if (nums[i] != 0) {
                continue;
            }

            int rev_index = n - 1 - i;
            if (pre_sum[i] == suf_sum[rev_index]) {
                ans += 2;
            } else if (pre_sum[i] + 1 == suf_sum[rev_index] || suf_sum[rev_index] + 1 == pre_sum[i]) {
                ++ans;
            } else {

            }
        }

        return ans;
    }
};",1454812371
drifter,_drifter,547,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {

        int n = nums.size();
        vector<int> pre_sum(n + 1, 0);

        for (const vector<int> &query : queries) {
            pre_sum[query.front()] += 1;
            pre_sum[query.back() + 1] -= 1;
        }

        for (int i = 0; i < n; i++) {
            pre_sum[i + 1] += pre_sum[i];
        }

        bool ans = true;

        for (int i = 0; i < n; i++) {

            if (nums[i] <= pre_sum[i]) {
                continue;
            } else {
                ans = false;
                break;
            }
        }

        return ans;
    }
};",1454820038
drifter,_drifter,547,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {

        int n = nums.size();

        auto check = [&] (int k) -> bool {

            vector<int> pre_sum(n + 1, 0);

            for (int i = 0; i < k; i++) {
                pre_sum[queries[i][0]] += queries[i][2];
                pre_sum[queries[i][1] + 1] -= queries[i][2];
            }

            for (int i = 0; i < n; i++) {
                pre_sum[i + 1] += pre_sum[i];
            }

            for (int i = 0; i < n; i++) {

                if (nums[i] <= pre_sum[i]) {
                    continue;
                } else {
                    return false;
                }
            }

            return true;
        };

        int q = queries.size();
        if (!check(q)) {
            return -1;
        }

        int right = q;
        int left = -1;

        while (1 < right - left) {

            int mid = (left + right) >> 1;

            if (check(mid)) {
                right = mid;
            } else {
                left = mid;
            }
        }

        return right;
    }
};",1454841741
Sohail Kazi,sohailkazi,549,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& a) {
        int ans = 0;
        int n = a.size();
        for (int i = 0; i < n; i++)
            {
                int cur = i;
                if (a[i] != 0) continue;
                int dir = 0;
                vector<int> b = a;
                while (cur >= 0 && cur < n)
                {
                    if (b[cur] == 0)
                    {
                        if (dir) cur++;
                        else cur--;
                    }
                    else
                    {
                        b[cur]--;
                        dir ^= 1;
                        if (dir) cur++;
                        else cur--;
                    }
                    
                }
                bool found = true;
                if (count(b.begin(), b.end(), 0) == n)
                {
                    ans++;
                }

                if (found)
                {
                    cur = i;
                    dir = 1;
                    b = a;

                    while (cur >= 0 && cur < n)
                    {
                        if (b[cur] == 0)
                        {
                            if (dir) cur++;
                            else cur--;
                        }
                        else
                        {
                            b[cur]--;
                            dir ^= 1;
                            if (dir) cur++;
                            else cur--;
                        }
                        
                    }
                    if (count(b.begin(), b.end(), 0) == n)
                    {
                        ans++;
                    }

                }
            }

        return ans;
    }
};",1454819658
Sohail Kazi,sohailkazi,549,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& a, vector<vector<int>>& q) {
        int n = a.size();
        vector<int> diff(n);

        for (auto k : q)
        {
            int x = k[0], y = k[1];
            diff[x]++;
            if (y < n - 1) diff[y + 1]--;
        }
        for (int i = 1; i < n; i++) diff[i] += diff[i - 1];

        for (int i = 0; i < n; i++)
        {
            int val = a[i] - diff[i];
            if (val > 0) return false;
        }
        return true;
    }
};",1454828429
Sohail Kazi,sohailkazi,549,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& a, vector<vector<int>>& q) {
        int n = a.size();
        int qn = q.size();

        auto check = [&](int k) -> bool
        {
            vector<int> diff(n);

            for (int i = 0; i < k; i++)
            {
                int l = q[i][0];
                int r = q[i][1];
                int v = q[i][2];

                diff[l] += v;
                if (r < n - 1) diff[r + 1] -= v;
            }

            for (int i = 1; i < n; i++) diff[i] += diff[i - 1];

            for (int i = 0; i < n; i++)
            {
                int val = a[i] - diff[i];
                if (val > 0) return false;
                
            }
            return true;
        };

        int l = -1, r = qn;

        while (r - l > 1)
        {
            int mid = midpoint(l, r);

            if (check(mid)) r = mid;
            else l = mid;
        }

        if (check(r)) return r;
        else return -1;
        return r;
    }
};",1454841768
Facundo Galán,facug91,550,3616,cpp,"class Solution {
public:
	int countValidSelections(vector<int>& nums) {
		int total = std::reduce(nums.begin(), nums.end());
		int l = 0, r = total, ans = 0;
		for (int i = 0; i < nums.size(); i++) {
			if (nums[i] == 0) {
				if (l == r) ans += 2;
				if (l + 1 == r || l - 1 == r) ans++;
			} else {
				l += nums[i];
				r -= nums[i];
			}
		}
		return ans;
	}
};",1454813608
Facundo Galán,facug91,550,3639,cpp,"static const int fastIO = [] {
	std::ios_base::sync_with_stdio(false), std::cin.tie(nullptr), std::cout.tie(nullptr);
	return 0;
}();

class Solution {
public:
	bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
		int n = (int)nums.size();
		vector<int> RSQ(n + 5, 0);
//		for (int i = 0; i < n; i++) {
//			RSQ[i] += nums[i];
//			RSQ[i + 1] -= nums[i];
//		}
		for (const auto& query: queries) {
			RSQ[query[0]]++;
			RSQ[query[1] + 1]--;
		}
		int curr = 0;
		for (int i = 0; i < n; i++) {
			curr += RSQ[i];
			if (nums[i] > curr) return false;
		}
		return true;
	}
};",1454819514
Facundo Galán,facug91,550,3643,cpp,"static const int fastIO = [] {
	std::ios_base::sync_with_stdio(false), std::cin.tie(nullptr), std::cout.tie(nullptr);
	return 0;
}();

class Solution {
private:
	bool check(vector<int>& nums, vector<vector<int>>& queries, int q) {
		int n = (int)nums.size();
		vector<int> RSQ(n + 5, 0);
		for (int i = 0; i < q; i++) {
			RSQ[queries[i][0]] += queries[i][2];
			RSQ[queries[i][1] + 1] -= queries[i][2];
		}
		int curr = 0;
		for (int i = 0; i < n; i++) {
			curr += RSQ[i];
			if (nums[i] > curr) return false;
		}
		return true;
	}

public:
	int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
		int lo = 0, hi = queries.size();
		if (!check(nums, queries, hi)) return -1;
		while (lo < hi) {
			int mid = (lo + hi) / 2;
			if (check(nums, queries, mid)) hi = mid;
			else lo = mid + 1;
		}
		return lo;
	}
};",1454841793
tmimotw,tmimotw,552,3616,java,"class Solution {
public int countValidSelections(int[] nums) {
        var result = 0;
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] == 0) {
                result += countValidSelectionsSolve(nums.clone(), i, 1);
                result += countValidSelectionsSolve(nums.clone(), i, -1);
            }
        }
        return result;
    }

    private int countValidSelectionsSolve(int[] nums, int currentIndex, int currentDirection) {
        if (currentIndex < 0 || currentIndex == nums.length) {
            for (int i = 0; i < nums.length; i++) {
                if (nums[i] != 0)
                    return 0;
            }
            return 1;
        }
        if (nums[currentIndex] == 0)
            return countValidSelectionsSolve(nums, currentIndex + currentDirection, currentDirection);
        nums[currentIndex]--;
        return countValidSelectionsSolve(nums, currentIndex - currentDirection, -currentDirection);
    }
}",1454813585
tmimotw,tmimotw,552,3639,java,"class Solution {
    public boolean isZeroArray(int[] nums, int[][] queries) {
        var delta = new int[nums.length];
        for (var query : queries) {
            delta[query[0]]++;
            if (query[1] < nums.length - 1) {
                delta[query[1] + 1]--;
            }
        }
        var prefixArr = new int[nums.length];
        prefixArr[0] = delta[0];
        for (int i = 1; i < prefixArr.length; i++) {
            prefixArr[i] = prefixArr[i - 1] + delta[i];
        }

        for (int i = 0; i < nums.length; i++) {
            if (nums[i] > prefixArr[i]) {
                return false;
            }
        }
        return true;
    }
}",1454830154
tmimotw,tmimotw,552,3643,java,"class Solution {
public int minZeroArray(int[] nums, int[][] queries) {
        var segmentTree = new SegmentTreeMax(nums);
        var max = segmentTree.maxRange(0, nums.length - 1);
        if (max <= 0)
            return 0;
        for (int i = 0; i < queries.length; i++) {
            segmentTree.updateRange(queries[i][0], queries[i][1], -queries[i][2]);
            max = segmentTree.maxRange(0, nums.length - 1);
            if (max <= 0)
                return i + 1;
        }
        return -1;
    }
}

class SegmentTreeMax {

    private int[] t;

    private int n;
    private int[] lazy;

    public SegmentTreeMax(int[] nums) {
        n = nums.length;
        t = new int[4 * n + 1];
        lazy = new int[4 * n + 1];
        build(nums, 1, 0, nums.length - 1);
    }

    private void build(int[] nums, int v, int tl, int tr) {
        if (tl == tr) {
            t[v] = nums[tl];
        } else {
            var tm = (tl + tr) / 2;
            build(nums, 2 * v, tl, tm);
            build(nums, 2 * v + 1, tm + 1, tr);
            t[v] = Math.max(t[2 * v], t[2 * v + 1]);
        }
    }

    public void updateRange(int l, int r, int add) {
        updateRange(1, 0, n - 1, l, r, add);
    }

    private void updateRange(int v, int tl, int tr, int l, int r, int add) {
        if (l > r)
            return;
        if (l == tl && r == tr) {
            t[v] += add;
            lazy[v] += add;
        } else {
            push(v);
            int tm = (tl + tr) / 2;
            updateRange(v * 2, tl, tm, l, Math.min(r, tm), add);
            updateRange(v * 2 + 1, tm + 1, tr, Math.max(l, tm + 1), r, add);
            t[v] = Math.max(t[v * 2], t[v * 2 + 1]);
        }
    }

    void push(int v) {
        t[v * 2] += lazy[v];
        lazy[v * 2] += lazy[v];
        t[v * 2 + 1] += lazy[v];
        lazy[v * 2 + 1] += lazy[v];
        lazy[v] = 0;
    }

    public int maxRange(int left, int right) {
        return max(1, 0, n - 1, left, right);
    }

    private int max(int v, int tl, int tr, int l, int r) {
        if (l > r)
            return 0;
        if (l == tl && r == tr)
            return t[v];
        push(v);
        var tm = (tl + tr) / 2;
        return Math.max(max(v * 2, tl, tm, l, Math.min(r, tm)), max(v * 2 + 1, tm + 1, tr, Math.max(l, tm + 1), r));
    }
}",1454841895
Gokul1230,Gokul1230,553,3616,cpp,"class Solution {
public:
    bool check(vector<int>nums,int i,int d){
        while(i<nums.size() && i>=0){
            if(nums[i]!=0) nums[i]--,d*=-1;
            i+=d;
        }
        for(int i:nums) if(i!=0) return false;
        return true;
    }
    int countValidSelections(vector<int>& nums) {
        int ans =0;
        for(int i=0;i<nums.size();i++){
            if(nums[i]==0) ans+= check(nums,i,1) + check(nums,i,-1);
        }
        return ans;
    }
};",1454817813
Gokul1230,Gokul1230,553,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& q) {
        int n = nums.size();
        vector<int>pre(n+1);
        for(int i=0;i<q.size();i++){
            pre[q[i][0]]--;
            pre[q[i][1]+1]++;
        }
        for(int i=1;i<=n;i++) pre[i]+=pre[i-1];
        for(int i=0;i<n;i++) if(pre[i] + nums[i]>0) return false;
        return true;
    }
};",1454824917
Gokul1230,Gokul1230,553,3643,cpp,"class Solution {
public:
    #define ll long long
    bool check(vector<int>& nums, vector<vector<int>>& q,ll m) {
        ll n = nums.size();
        vector<ll>pre(n+1);
        for(ll i=0;i<m;i++){
            pre[q[i][0]]-= q[i][2];
            pre[q[i][1]+1]+= q[i][2];
        }
        for(ll i=1;i<=n;i++) pre[i]+=pre[i-1];
        for(ll i=0;i<n;i++) if(pre[i] + nums[i]>0) return false;
        return true;
    }
    int minZeroArray(vector<int>& nums, vector<vector<int>>& q) {
        ll n = nums.size();
        ll l = 0 , r = q.size(),ans =-1;
        while(l<=r){
            ll mid = l+ (r-l)/2;
            if(check(nums,q,mid)){
                ans = mid;
                r = mid-1;
            }
            else l  = mid+1;
        }
        return ans;
    }
};",1454834574
Farhaan Habeeb Gazi,fhgazi,556,3616,cpp,"#define PList(V)    {for(auto x:(V)) cout<<x<<"" ""; cout<<endl;}
#define all(V)      (V).begin(),(V).end()
#define rall(V)     (V).rbegin(),(V).rend()
#define sz(V)       int(V.size())
#define fi          first
#define se          second
#define p_b         push_back
#define ll          long long
#define double      long double

typedef vector<ll>   vi;
typedef pair<ll,ll> ii;
typedef vector<ii>   vii;
typedef vector<vi>   vvi;
typedef vector<vii>   vvii;

#define MOD         1000000007
//#define MOD         998244353
#define INF         500000000000000000
#define ZERO        (ll)0
#define ONE         (ll)1

inline ll add(ll a, ll b){ a%=MOD; b%=MOD; return (a+b)%MOD; }
inline ll sub(ll a, ll b){ a%=MOD; return (a-b+MOD)%MOD; }
inline ll mul(ll a, ll b){ a%=MOD; b%=MOD; return (a*b)%MOD; }
ll bpow(ll A, ll p){
    if(p==0) return 1;
    ll tmp = bpow(A, p/2);
    return mul( mul(tmp, tmp), (p%2 ? A : 1) );
}
ll inv(int N){ return bpow(N, MOD-2); }
inline ll dvd(int a, int b){ return mul(a, inv(b)); }

inline int preSm(vi &A, int l, int r){ if(r<l) return 0; return A[r]-(l-1>=0 ? A[l-1] : 0); };


class Solution {
public:
    int countValidSelections(vector<int>& A) {
        int N = sz(A);
        vi pA(N); pA[0]=A[0]; for(int i=1; i<N; i++) pA[i]=A[i]+pA[i-1];
        
        int ans = 0;
        for(int i=0; i<N; i++) if(A[i]==0) {
            int d = preSm(pA, 0, i-1)-preSm(pA, i+1, N-1);
            if(d==0) ans+=2;
            if(abs(d)==1) ans+=1;
        }
        return ans;
        
    }
};",1454817935
Farhaan Habeeb Gazi,fhgazi,556,3639,cpp,"#define PList(V)    {for(auto x:(V)) cout<<x<<"" ""; cout<<endl;}
#define all(V)      (V).begin(),(V).end()
#define rall(V)     (V).rbegin(),(V).rend()
#define sz(V)       int(V.size())
#define fi          first
#define se          second
#define p_b         push_back
#define ll          long long
#define double      long double

typedef vector<ll>   vi;
typedef pair<ll,ll> ii;
typedef vector<ii>   vii;
typedef vector<vi>   vvi;
typedef vector<vii>   vvii;

#define MOD         1000000007
//#define MOD         998244353
#define INF         500000000000000000
#define ZERO        (ll)0
#define ONE         (ll)1

inline ll add(ll a, ll b){ a%=MOD; b%=MOD; return (a+b)%MOD; }
inline ll sub(ll a, ll b){ a%=MOD; return (a-b+MOD)%MOD; }
inline ll mul(ll a, ll b){ a%=MOD; b%=MOD; return (a*b)%MOD; }
ll bpow(ll A, ll p){
    if(p==0) return 1;
    ll tmp = bpow(A, p/2);
    return mul( mul(tmp, tmp), (p%2 ? A : 1) );
}
ll inv(int N){ return bpow(N, MOD-2); }
inline ll dvd(int a, int b){ return mul(a, inv(b)); }

class Solution {
public:
    bool isZeroArray(vector<int>& V, vector<vector<int>>& Qry) {
        int N = sz(V);
        vi P(N+1);
        for(auto &Q : Qry){
            int L = Q[0], R = Q[1];
            P[L]++, P[R+1]--;
        }
        
        //PList(P);
        for(int i=1; i<sz(P); i++) P[i]+=P[i-1];
        
        for(int i=0; i<N; i++) if(V[i]-P[i]>0) return false;
        return true;
        
        
    }
};",1454824420
Farhaan Habeeb Gazi,fhgazi,556,3643,cpp,"#define PList(V)    {for(auto x:(V)) cout<<x<<"" ""; cout<<endl;}
#define all(V)      (V).begin(),(V).end()
#define rall(V)     (V).rbegin(),(V).rend()
#define sz(V)       int(V.size())
#define fi          first
#define se          second
#define p_b         push_back
#define ll          long long
#define double      long double

typedef vector<ll>   vi;
typedef pair<ll,ll> ii;
typedef vector<ii>   vii;
typedef vector<vi>   vvi;
typedef vector<vii>   vvii;

#define MOD         1000000007
//#define MOD         998244353
#define INF         500000000000000000
#define ZERO        (ll)0
#define ONE         (ll)1

inline ll add(ll a, ll b){ a%=MOD; b%=MOD; return (a+b)%MOD; }
inline ll sub(ll a, ll b){ a%=MOD; return (a-b+MOD)%MOD; }
inline ll mul(ll a, ll b){ a%=MOD; b%=MOD; return (a*b)%MOD; }
ll bpow(ll A, ll p){
    if(p==0) return 1;
    ll tmp = bpow(A, p/2);
    return mul( mul(tmp, tmp), (p%2 ? A : 1) );
}
ll inv(int N){ return bpow(N, MOD-2); }
inline ll dvd(int a, int b){ return mul(a, inv(b)); }

class Solution {
public:
    int minZeroArray(vector<int>& V, vector<vector<int>>& Qry) {
       int N = sz(V);
        
        auto valid = [&](int Q)->bool{
            vi P(N+1);
            for(int q=0; q<Q; q++){
                vector<int> &Q = Qry[q];
                int L = Q[0], R = Q[1], X = Q[2];
                P[L]+=X, P[R+1]-=X;
            }
            for(int i=1; i<sz(P); i++) P[i]+=P[i-1];

            for(int i=0; i<N; i++) if(V[i]-P[i]>0) return false;
            return true; 
        };
        
        int l = 0, r = sz(Qry);
        while(l<r){
            int m = (l+r)/2;
            
            if(valid(m)) r=m;
            else l = m+1;
        }
        
        return (valid(l) ? l : -1);
    }
};",1454834660
Denis,LLIEPJIOK,557,3616,cpp,"class Solution {
public:
    bool check(vector<int> nums, int move, int cur, int sum) {
        while (sum != 0) {
            cur += move;
            if (cur < 0 || cur >= nums.size()) {
                return false;
            }
            
            if (nums[cur] != 0) {
                nums[cur]--;
                move *= -1;
                sum--;
            }
        }

        return true;
    }
    int countValidSelections(vector<int>& nums) {
        int sum = accumulate(nums.begin(), nums.end(), 0);
        int cnt = 0;
        for (int i = 0; i < nums.size(); i++) {
            if (nums[i] == 0) {
            cnt += check(nums, 1, i, sum);
            cnt += check(nums, -1, i, sum);
            }
        }

        return cnt;
    }
};",1454811023
Denis,LLIEPJIOK,557,3639,cpp,"class Solution {
public:
    vector<pair<int, int>> st;

    void build(int cur, int l, int r, vector<int>& a) {
        if (l + 1 == r) {
            st[cur] = {a[l], 0};
            return;
        }

        int mid = (l + r) / 2;
        build(2 * cur, l, mid, a);
        build(2 * cur + 1, mid, r, a);

        st[cur] = {max(st[2 * cur].first, st[2 * cur + 1].first), 0};
    }

    void update_promise(int cur, int l, int r) {
        if (l + 1 != r) {
            st[2 * cur].second += st[cur].second;
            st[2 * cur + 1].second += st[cur].second;
        }

        st[cur].first -= st[cur].second;
        st[cur].second = 0;
    }

    void update(int cur, int l, int r, int nl, int nr, int x) {
        update_promise(cur, l, r);
        
        if (r <= nl || l >= nr) {
            return;
        }

        if (nl <= l && r <= nr) {
            st[cur].second += x;
            update_promise(cur, l, r);
            return;
        }

        int mid = (l + r) / 2;
        update(2 * cur, l, mid, nl, nr, x);
        update(2 * cur + 1, mid, r, nl, nr, x);

        st[cur].first = max(st[2 * cur].first, st[2 * cur + 1].first);
    }

    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();   
        st.resize(4 * n);
        build(1, 0, n, nums);
        int cnt = 0;
        while (st[1].first > 0) {
            if (cnt == queries.size()) {
                return false;
            }
            
            update(1, 0, n, queries[cnt][0], queries[cnt][1] + 1, 1);
            cnt++;
        }

        return true;
    }
};",1454842019
Denis,LLIEPJIOK,557,3643,cpp,"class Solution {
public:
    vector<pair<int, int>> st;

    void build(int cur, int l, int r, vector<int>& a) {
        if (l + 1 == r) {
            st[cur] = {a[l], 0};
            return;
        }

        int mid = (l + r) / 2;
        build(2 * cur, l, mid, a);
        build(2 * cur + 1, mid, r, a);

        st[cur] = {max(st[2 * cur].first, st[2 * cur + 1].first), 0};
    }

    void update_promise(int cur, int l, int r) {
        if (l + 1 != r) {
            st[2 * cur].second += st[cur].second;
            st[2 * cur + 1].second += st[cur].second;
        }

        st[cur].first -= st[cur].second;
        st[cur].second = 0;
    }

    void update(int cur, int l, int r, int nl, int nr, int x) {
        update_promise(cur, l, r);
        
        if (r <= nl || l >= nr) {
            return;
        }

        if (nl <= l && r <= nr) {
            st[cur].second += x;
            update_promise(cur, l, r);
            return;
        }

        int mid = (l + r) / 2;
        update(2 * cur, l, mid, nl, nr, x);
        update(2 * cur + 1, mid, r, nl, nr, x);

        st[cur].first = max(st[2 * cur].first, st[2 * cur + 1].first);
    }

    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();   
        st.resize(4 * n);
        build(1, 0, n, nums);
        int cnt = 0;
        while (st[1].first > 0) {
            if (cnt == queries.size()) {
                return -1;
            }
            
            update(1, 0, n, queries[cnt][0], queries[cnt][1] + 1, queries[cnt][2]);
            cnt++;
        }

        return cnt;
    }
};",1454840907
Yash Kumar Gupta,ykgupta2411,558,3616,java,"class Solution {
    public int countValidSelections(int[] nums) {
        int ans = 0;
        int n = nums.length;
        int sum = 0;
        for(int i : nums)
            sum += i;
        for(int i = 0, prefix = 0; i < n; i++)
        {
            prefix += nums[i];
            if(nums[i] != 0)
                continue;
            if(prefix == sum - prefix)
                ans += 2;
            else if(Math.abs(prefix - (sum - prefix)) == 1)
                ans++;
        }
        return ans;
    }
}",1454808988
Yash Kumar Gupta,ykgupta2411,558,3639,java,"class Solution {
    public boolean isZeroArray(int[] nums, int[][] queries) {
        int n = nums.length;
        int[] f = new int[n+1];
        for(int[] q : queries)
        {
            f[q[0]]++;
            f[q[1] + 1]--;
        }
        for(int i = 0, c = 0; i < n; i++)
        {
            c += f[i];
            if(c < nums[i])
                return false;
        }
        return true;
    }
}",1454811062
Yash Kumar Gupta,ykgupta2411,558,3643,java,"class Solution {
    public int minZeroArray(int[] nums, int[][] queries) {
        int n = queries.length;
        int beg = 0, end = n, ans = -1;
        while(beg <= end)
        {
            int mid = beg + (end - beg) / 2;
            if(canDo(mid, nums, queries))
            {
                ans = mid;
                end = mid - 1;
            }
            else
                beg = mid + 1;
        }
        return ans;
    }
    
    private boolean canDo(int k, int[] ar, int[][] queries)
    {
        int n = ar.length;
        int[] f = new int[n+1];
        for(int i = 0; i < k; i++)
        {
            f[queries[i][0]] += queries[i][2];
            f[queries[i][1] + 1] -= queries[i][2];
        }
        for(int i = 0, c = 0; i < n; i++)
        {
            c += f[i];
            if(c < ar[i])
                return false;
        }
        return true;
    }
}",1454820315
david,testimony2014,560,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int ans = 0;
        int n = nums.size();
        for (int i = 0; i < n; ++i) {
            if (nums[i] != 0) {
                continue;
            }
            if (check(nums, i, -1)) {
                ans++;
            }
            if (check(nums, i, 1)) {
                ans++;
            }
            
        }
        return ans;
    }
private:
    bool check(const vector<int>& input, int pos, int dir) {
        vector<int> nums = input;
        int n = nums.size();
        while (pos >= 0 && pos < n) {
            if (nums[pos] > 0) {
                nums[pos]--;
                dir = -dir;
            }
            pos += dir;
        }
        for (int i = 0; i < n; ++i) {
            if (nums[i] != 0) {
                return false;
            }
        }
        return true;
    }
};",1454816553
david,testimony2014,560,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        vector<int> diff(n + 1);
        for (auto &query : queries) {
            diff[query[0]]++;
            if (query[1] + 1 < n) {
                diff[query[1] + 1]--;
            }
        }

        int cur = 0;
        for (int i = 0; i < n; ++i) {
            cur += diff[i];
            if (nums[i] > cur) {
                return false;
            }
        }
        return true;
    }
};",1454824132
david,testimony2014,560,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int l = 0, r = queries.size();
        while (l + 1 < r) {
            int mid = l + (r - l) / 2;
            if (check(nums, queries, mid)) {
                r = mid;
            } else {
                l = mid;
            }
        }
        if (check(nums, queries, l)) {
            return l;
        }
        if (check(nums, queries, r)) {
            return r;
        }
        return -1;
    }
private:
    bool check(vector<int>& nums, vector<vector<int>>& queries, int k) {
        int n = nums.size();
        vector<int> diff(n + 1);
        for (int i = 0; i < k; ++i) {
            auto& query = queries[i];
            diff[query[0]] += query[2];
            if (query[1] + 1 < n) {
                diff[query[1] + 1] -= query[2];
            }
        }

        int cur = 0;
        for (int i = 0; i < n; ++i) {
            cur += diff[i];
            if (nums[i] > cur) {
                return false;
            }
        }
        return true;
    }
};",1454834762
Nilanjan Das,forasssk,561,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int n = nums.size();
        vector <int> ps(n);
        for (int i = 0; i < n; i ++) {
            ps[i] = nums[i];
            if (i) {
                ps[i] += ps[i - 1];
            }
        }
        int ans = 0;
        for (int i = 0; i < n; i ++) {
            if (nums[i] == 0) {
                if (ps[i] == ps[n - 1] - ps[i]) {
                    ans += 2;
                }
                else if (ps[i] + 1 == ps[n - 1] - ps[i] || ps[i] == ps[n - 1] - ps[i] + 1) {
                    ans ++;
                }
            }
        }
        return ans;
    }
};",1454814138
Nilanjan Das,forasssk,561,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        vector <int> add(n, 0);
        for (auto q: queries) {
            int lt = q[0], rt = q[1];
            add[lt] --;
            if (rt + 1 < n) add[rt + 1] ++;
        }
        for (int i = 1; i < n; i ++) {
            add[i] += add[i - 1];
        }
        for (int i = 0; i < n; i ++) {
            nums[i] += add[i];
            if (nums[i] > 0) {
                return 0;
            }
        }
        return 1;
    }
};",1454820671
Nilanjan Das,forasssk,561,3643,cpp,"class Solution {
public:
    bool check (vector<int>& nums, vector<vector<int>>& queries, int k) {
        int n = nums.size();
        vector <int> add(n, 0);
        for (int i = 0; i < k; i ++) {
            int lt = queries[i][0], rt = queries[i][1], val = queries[i][2];
            add[lt] -= val;
            if (rt + 1 < n) add[rt + 1] += val;
        }
        for (int i = 1; i < n; i ++) {
            add[i] += add[i - 1];
        }
        for (int i = 0; i < n; i ++) {
            if (nums[i] + add[i] > 0) {
                return 0;
            }
        }
        return 1;
    }
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int q = queries.size();
        if (check(nums, queries, 0)) {
            return 0;
        }
        if (!check(nums, queries, q)) {
            return -1;
        }
        int lo = 0, hi = q, ans = hi;
        while (lo <= hi) {
            int mid = (lo + hi) / 2;
            if (check(nums, queries, mid)) {
                ans = mid;
                hi = mid - 1;
            }
            else {
                lo = mid + 1;
            }
        }
        return ans;
    }
};",1454834849
ItsOver9000,ItsOver9000,562,3616,javascript,"/**
 * @param {number[]} nums
 * @return {number}
 */
var countValidSelections = function(nums) {
    const check = (i, d)=>{
        const copy = [...nums];
        for(; i >= 0 && i <copy.length; ) {
            i += d;
            if(i>=0 && i < copy.length) {
                if(copy[i]>0){
                    copy[i]-=1;
                    d*=-1;
                }
            }
        }
        for(let i = 0;i<copy.length;i+=1){
            if(copy[i]!==0){
                return 0;
            }
        }
        return 1;
    }
    let result=0;
    for(let i = 0;i<nums.length;i+=1){
        if(nums[i]===0){
            result+=check(i,-1);
            result+=check(i,1);
        }
    }
    return result;
};",1454810025
ItsOver9000,ItsOver9000,562,3639,javascript,"/**
 * @param {number[]} nums
 * @param {number[][]} queries
 * @return {boolean}
 */
var isZeroArray = function(nums, queries) {
    linesweep = new Array(nums.length+1);
    linesweep.fill(0);
    for(const [a, b] of queries) {
        linesweep[a]+=1;
        linesweep[b+1]-=1;
    }
    for(let i = 1;i<linesweep.length;i+=1){
        linesweep[i]+=linesweep[i-1];
    }
    for(let i = 0;i<nums.length;i+=1){
        if(linesweep[i]<nums[i]) {
            return false;
        }
    }
    return true;
};",1454814679
ItsOver9000,ItsOver9000,562,3643,javascript,"/**
 * @param {number[]} nums
 * @param {number[][]} queries
 * @return {number}
 */
var minZeroArray = function(nums, queries) {
    let allzero=true;
    for(let i = 0;i<nums.length && allzero; allzero=allzero&&nums[i]===0,i+=1){
        
    }
    if(allzero){
        return 0;
    }
    const check = k => {
        linesweep = new Array(nums.length+1);
        linesweep.fill(0);
        for(let i = 0; i<=k;i+=1){
            linesweep[queries[i][0]] += queries[i][2];
            linesweep[queries[i][1]+1] -= queries[i][2];
        }
        for(let i = 1;i<linesweep.length;i+=1){
            linesweep[i]+=linesweep[i-1];
        }
        for(let i = 0;i<nums.length;i+=1){
            if(linesweep[i]<nums[i]) {
                return false;
            }
        }
        return true;
    };
    
    
    let result = Infinity;
    for(let i = 0, j = queries.length-1;i<=j;){
        const mid = Math.floor((i+j)/2);
        if (check(mid)) {
            result=Math.min(result,mid);
            j = mid-1;
        } else{
            i = mid+1;
        }
    }
    return result===Infinity?-1:result+1;
};",1454834851
Manideep Kaparthi,manideepkaparthi,563,3616,cpp,"#include <bits/stdc++.h>
using namespace std;
#define vii vector<vector<int>>
#define vi vector<int>
#define pb push_back
#define fi first
#define se second
#define s(v) sort(v.begin(), v.end())
#define r(v) reverse(v.begin(), v.end())
class Solution {
public:
    int countValidSelections(vector<int>& nums) {
      
    int n = nums.size();
    int ans = 0;

    auto fun = [&](int st, int dir) {
        vector<int> v(nums);
        int cur = st;
        int ap = dir;

        while (cur >= 0 && cur < n) {
            if (v[cur] == 0) {
                cur += ap;
            } else {
                v[cur]--;
                ap = -ap;
                cur += ap;
            }
        }

        for (int it : v) {
            if (it != 0) return false;
        }
        return true;
    };

    for (int i = 0; i < n; ++i) {
        if (nums[i] == 0) {
            if (fun(i, 1)) ans++;
            if (fun(i, -1)) ans++;
        }
    }

    return ans;


        
        
    }
};",1454807406
Manideep Kaparthi,manideepkaparthi,563,3639,cpp,"#include <bits/stdc++.h>
using namespace std;
#define vii vector<vector<int>>
#define vi vector<int>
#define pb push_back
#define fi first
#define se second
#define s(v) sort(v.begin(), v.end())
#define r(v) reverse(v.begin(), v.end())

class Solution
{
public:
  bool isZeroArray(vector<int> &nums, vector<vector<int>> &queries)
  {
    vi v = nums;
    int n = nums.size();
    vi x(n + 1, 0);

    for (int i = 0; i < queries.size(); i++)
    {
      x[queries[i][0]] += 1;
      if (queries[i][1] + 1 < n)
        x[queries[i][1] + 1] -= 1;
    }

    for (int i = 1; i < n; i++)
    {
      x[i] += x[i - 1];
    }

    for (int i = 0; i < n; i++)
    {
      v[i] = max(0, v[i] - x[i]);
    }

    for (int i = 0; i < n; i++)
    {
      if (v[i] != 0)
      {
        return false;
      }
    }

    return true;
  }
};
",1454818301
Manideep Kaparthi,manideepkaparthi,563,3643,cpp,"#include <bits/stdc++.h>
using namespace std;
#define vii vector<vector<int>>
#define vi vector<int>
#define pb push_back
#define fi first
#define se second
#define s(v) sort(v.begin(), v.end())
#define r(v) reverse(v.begin(), v.end())

class Solution
{
public:
  int minZeroArray(vector<int> &nums, vector<vector<int>> &queries)
  {
    int l = 1, h = queries.size(), ans = -1;
    auto fun = [&](int k)
    {
      int n = nums.size();
      vector<long long> v1(nums.begin(), nums.end());
      
      vector<long long> x1(n + 1, 0);

      for (int i = 0; i < k; i++)
      {
        int l = queries[i][0], r = queries[i][1];
        long long up = queries[i][2];
        x1[l] += up;
        if (r + 1 < n)
        {
          x1[r + 1] = x1[r + 1] - up;
        }
      }

      for (int i = 1; i < n; i++)
      {
        x1[i] += x1[i - 1];
      }

      for (int i = 0; i < n; i++)
      {
        long long bp = v1[i] - x1[i];
        v1[i] = max(0LL, bp);
      }

      for (int i = 0; i < n; i++)
      {
        if (v1[i] != 0)
        {
          return false;
        }
      }

      return true;
    };
    int flag=0;
    for(int i=0;i<nums.size();i++){
      if(nums[i]!=0){
        flag=1;
        break;
      }
    }
    if(flag==0){
      return 0;
    }


    while (l <= h)
    {
      int md = l + (h - l) / 2;
      if (fun(md))
      {
        ans = md;
        h = md - 1;
      }
      else
      {
        l = md + 1;
      }
    }

    return ans;
  }
};
",1454834864
coding_boss,AlGrekor2M,564,3616,cpp,"class Solution {
public:
    bool isValid(vector<int>& nums, int start, int dir) {
        vector<int> temp = nums;
        int n = temp.size();
        int ind = start;

        while (ind >= 0 && ind < n) {
            if (temp[ind] == 0) {
                ind += (dir == 0 ? -1 : 1);
            } else {
                temp[ind]--;
                dir = 1 - dir;
                ind += (dir == 0 ? -1 : 1);
            }
        }

        for(int i=0;i<temp.size();i++) {
            if(temp[i] != 0) return false;
        }
        return true;
    }

    int countValidSelections(vector<int>& nums) {
        int n = nums.size(), cnt = 0;

        for (int i = 0; i < n; i++) {
            if (nums[i] == 0) {
                if (isValid(nums, i, 0)) cnt++;
                if (isValid(nums, i, 1)) cnt++;
            }
        }

        return cnt;
    }
};
",1454830485
coding_boss,AlGrekor2M,564,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        int p = queries.size();
        
        vector<int>v(1e5+1,0);
        for(int i=0;i<p;i++){
            v[queries[i][0]]++;
            v[queries[i][1]+1]--;
        }
        
        for(int i=1;i<v.size();i++) v[i] += v[i-1];
        // bool p = false;
        for(int i=0;i<n;i++){
            if(nums[i] != 0){
                if(v[i]<nums[i]) return false;
            }
        }
        return true;
    }
};",1454815939
coding_boss,AlGrekor2M,564,3643,cpp,"class Solution {
public:
    bool valid(int mid, vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        vector<int> p(1e5 + 1, 0);

        for (int i = 0; i < mid; i++) {
            p[queries[i][0]] += queries[i][2];
            p[queries[i][1] + 1] -= queries[i][2];
        }

        for (int i = 1; i < p.size(); i++) {
            p[i] += p[i - 1];
        }

        for (int i = 0; i < n; i++) {
            if (nums[i] > 0 && nums[i] > p[i]) {
                return false;
            }
        }

        return true;
    }

    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int low = 0, high = queries.size(), ans = -1;

        while (low <= high) {
            int mid = (low + high) / 2;
            if (valid(mid, nums, queries)) {
                ans = mid;
                high = mid - 1;
            } else {
                low = mid + 1;
            }
        }

        return ans;
    }
};
",1454842189
Sanyam Pandey,EzzPzz,566,3616,cpp,"class Solution {
public:

    int countValidSelections(vector<int>& nums) {
        int ans = 0;
        int n = nums.size();

        auto fx = [&](vector<int> nums, int start, bool flg) {
            int curr = start;

            while (curr >= 0 && curr < n) {
                if (nums[curr] == 0) {
                    curr = flg ? curr + 1 : curr - 1;
                } else if (nums[curr] > 0) {
                    nums[curr]--;
                    flg = !flg;
                    curr = flg ? curr + 1 : curr - 1;
                }
            }

            return count(nums.begin(), nums.end(), 0) == nums.size();
        };

        for (int i = 0; i < n; i++) {
            if (!nums[i]) {
                if (fx(nums, i, true))
                    ans++;
                if (fx(nums, i, false))
                    ans++;
            }
        }

        return ans;
    }
};",1454820076
Sanyam Pandey,EzzPzz,566,3639,cpp,";class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        vector <int> pre (nums.size()+1)  ; 
        for (auto q : queries) {
            pre[q[0]] ++ ; 
            pre[q[1]+1] -- ; 
        }
        // for(auto i : pre) cout << i <<"" "" ;cout << endl ;
        for (int i = 1; i < pre.size() ; i++) pre[i] += pre[i-1] ; 
        // for (auto i : pre) cout << i << endl; 
        for (int i = 0 ;i < nums.size() ; i++) {
            if (nums[i] > pre[i]) return 0 ; 
        }
        return 1 ;
    }
};",1454811200
Sanyam Pandey,EzzPzz,566,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        if (count (nums.begin() , nums.end () , 0) == nums.size()) return 0 ;
        auto fx = [&](int mi) {
            vector<int> pre(nums.size() + 1);
            for (int i = 0; i <= mi; i++) {
                auto q = queries[i];
                pre[q[0]] += q[2];
                pre[q[1] + 1] -= q[2];
            }
            
            vector<int> temp = nums;
            for (int i = 1; i < nums.size(); i++) {
                pre[i] += pre[i - 1];
            }
            
            for (int i = 0; i < nums.size(); i++) {
                temp[i] = max(0, temp[i] - pre[i]);
                if (temp[i] > 0) return false;
            }
            return true;
        };
        
        if (queries.empty()) return -1;
        
        int lo = 0, hi = queries.size() - 1;
        while (lo <= hi) {
            int mid = (lo + hi) >> 1;
            if (fx(mid))
                hi = mid - 1;
            else
                lo = mid + 1;
        }
        return lo >= queries.size() ? -1 : lo + 1;
    }
};",1454835005
Ranjith Reddy,crazyfoxx,567,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
       
        n = len(nums)
        def fun(start, d):
            nums_copy = nums[:]
            curr = start
            inc = d
            
            while 0 <= curr < n:
                if nums_copy[curr] == 0:
                    if inc == 'left':
                        curr -= 1
                    else:
                        curr += 1
                else:
                    nums_copy[curr] -= 1
                    inc = 'right' if inc == 'left' else 'left'
                    if inc == 'left':
                        curr -= 1
                    else:
                        curr += 1
            return all(x == 0 for x in nums_copy)
        
        valid_count = 0
        
        for i in range(n):
            if nums[i] == 0:
                if fun(i, 'left'):
                    valid_count += 1
                if fun(i, 'right'):
                    valid_count += 1
        
        return valid_count
",1454835106
Ranjith Reddy,crazyfoxx,567,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        m = len(queries)
        n = len(nums)
        flag = True
        for i in nums:
            if i != 0:
                flag = False
                break
        if flag == True:
            return 0
        def check(x):
            #print(x)
            l = [0]*(n+1)
            for u,v in queries[:x+1]:
                l[u]+=1
                l[v+1]-=1
            cum = 0
            #print(l)
            for i in range(n+1):
                cum+=l[i]
                l[i] = cum
            # print(l)
            # print(nums)
            for i in range(n):
                if nums[i]>l[i]:
                    return False
            return True
        low = 0
        high = m-1
        ans = None
        while low<=high:
            mid = (low+high)//2
            if check(mid):
                ans = mid+1
                high = mid-1
    
            else:
                low = mid+1
        if ans == None:
            return False
        return True
                ",1454821974
Ranjith Reddy,crazyfoxx,567,3643,python3,"class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:

        m = len(queries)
        n = len(nums)
        flag = True
        for i in nums:
            if i != 0:
                flag = False
                break
        if flag == True:
            return 0
        def check(x):
            #print(x)
            l = [0]*(n+1)
            for u,v, w in queries[:x+1]:
                l[u]+=w
                l[v+1]-=w
            cum = 0
            #print(l)
            for i in range(n+1):
                cum+=l[i]
                l[i] = cum
            # print(l)
            # print(nums)
            for i in range(n):
                if nums[i]>l[i]:
                    return False
            return True
        low = 0
        high = m-1
        ans = None
        while low<=high:
            mid = (low+high)//2
            if check(mid):
                ans = mid+1
                high = mid-1
    
            else:
                low = mid+1
        if ans == None:
            return -1
        return ans
                ",1454820199
Cursed_Individual_99,Cursed_Individual_99,568,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int sum=0, presum=0, ans=0;
        for(int i:nums)
            sum+=i;
        for(int i:nums){
            presum+=i;
            sum-=i;
            if(i==0){
                if(sum==presum)
                    ans+=2;
                else if(abs(sum-presum)==1)
                    ans++;
            }
        }
        return ans;
    }
};",1454807471
Cursed_Individual_99,Cursed_Individual_99,568,3639,cpp,"struct Compare {
    bool operator()(const vector<int>& a, const vector<int>& b) {
        return a[1] > b[1];
    }
};
class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        sort(queries.begin(), queries.end());
        int n=nums.size(), m=queries.size(), index=0;
        vector<int> maxi(n);
        priority_queue<vector<int>, vector<vector<int>>, Compare> pq;
        for(int i=0;i<n;i++){
            while(index<m && queries[index][0]==i){
                pq.push(queries[index]);
                index++;
            }
            maxi[i]=pq.size();
            while(!pq.empty() && pq.top()[1]==i)
                pq.pop();
        }
        for(int i=0;i<n;i++){
            if(nums[i]>maxi[i])
                return false;
        }
        return true;
    }
};",1454824830
Cursed_Individual_99,Cursed_Individual_99,568,3643,cpp,"class Solution {
public:
    bool f(int mid, vector<int>& nums, vector<vector<int>>& q) {
        int n = nums.size();
        vector<int> diff(n + 1, 0);
        for (int i = 0; i < mid; ++i) {
            int l = q[i][0], r = q[i][1], val = q[i][2];
            diff[l] -= val;
            if (r + 1 < n)
                diff[r + 1] += val;
        }
        int curr_decrement = 0;
        for (int i = 0; i < n; ++i) {
            curr_decrement += diff[i];
            if (nums[i] + curr_decrement > 0) {
                return false;
            }
        }
        return true;
    }
    int minZeroArray(vector<int>& nums, vector<vector<int>>& q) {
        int m = q.size(), low = 0, high = m, ans = -1;
        while (low <= high) {
            int mid = low + (high - low) / 2;
            if (f(mid, nums, q)) {
                ans = mid;
                high = mid - 1;
            } else {
                low = mid + 1;
            }
        }
        return ans;
    }
};
",1454842497
Hsu-Huai,aarontsaai,569,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        def process(copied_nums: List[int], cur_pos: int, direction: int, total_sum: int):
            while 0 <= cur_pos < len(copied_nums):
                if copied_nums[cur_pos] == 0:
                    cur_pos += direction
                else:
                    if copied_nums[cur_pos] > 0:
                        total_sum -= 1
                    copied_nums[cur_pos] -= 1
                    direction = -direction
                    cur_pos += direction

                if total_sum == 0:
                    return True

            return False            


        total_sum = sum(nums)
        res = 0
        for i in range(len(nums)):
            if nums[i] != 0:
                continue
                
            if process([x for x in nums], i, 1, total_sum):
                res += 1
            if process([x for x in nums], i, -1, total_sum):
                res += 1
        return res",1454835195
Hsu-Huai,aarontsaai,569,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        diff = [0] * (len(nums) + 1)
        for l, r in queries:
            diff[l] += 1
            diff[r + 1] -= 1

        cur_diff = 0
        for i in range(len(nums)):
            cur_diff += diff[i]
            if cur_diff < nums[i]:
                return False
        return True
                ",1454824949
Hsu-Huai,aarontsaai,569,3643,python3,"class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        def is_valid(k_queries: int):
            diff = [0] * (len(nums) + 1)
            for l, r, val in queries[: k_queries]:
                diff[l] += val
                diff[r + 1] -= val
    
            cur_diff = 0
            for i in range(len(nums)):
                cur_diff += diff[i]
                if cur_diff < nums[i]:
                    return False
            return True


        if not is_valid(len(queries)):
            return -1
            
        l, r = 0, len(queries)
        while l < r:
            mid = (l + r) // 2
            if is_valid(mid):
                r = mid
            else:
                l = mid + 1
        return l",1454830805
Trent Haines,trentinitaco,570,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        // if 0, move same way.
        // if > 0, you have to go back, and reduce by 1.
        // parity and walls

        // count on left has to be the same as count on right. or +-1

        int n = nums.size();
        vector<int> prefix(n+1);
        for(int i = 0; i < n; ++i){
            prefix[i+1] = prefix[i] + nums[i];
        }

        int possible = 0;
        
        for(int i = 0; i < n; ++i){
            if(nums[i] == 0){
                int left = prefix[i];
                int right = prefix[n]-prefix[i];
                if(left == right)
                    possible += 2;
                if(abs(left-right) == 1)
                    possible++;
            }
        }
        return possible;
            
    }
};",1454811974
Trent Haines,trentinitaco,570,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        // basically, add up the max subtraction using prefix.

        int n = nums.size();
        vector<int> prefix(n+1);
        for(auto& q: queries){
            prefix[q[0]]++;
            prefix[q[1]+1]--;
        }

        int cur = 0;
        for(int i = 0 ; i < n; ++i){
            cur += prefix[i];
            if(cur < nums[i])
                return false;
        }

        return true;
    }
};",1454818730
Trent Haines,trentinitaco,570,3643,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries, int k) {
        // basically, add up the max subtraction using prefix.

        int n = nums.size();
        vector<int> prefix(n+1);
        for(int i = 0 ; i < k; i++){
            auto& q = queries[i];
            prefix[q[0]] += q[2];
            prefix[q[1]+1] -= q[2];
        }

        int cur = 0;
        for(int i = 0 ; i < n; ++i){
            cur += prefix[i];
            if(cur < nums[i])
                return false;
        }

        return true;
    }


    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        // binary search for the answer? 10^5 * log 2 (10^5) = 10^7
        if(!isZeroArray(nums, queries, queries.size()))
            return -1;
        int l = 0; int r = queries.size();
        while(l < r){
            int m = l + (r-l)/2;
            if(isZeroArray(nums, queries, m)){
                r = m; 
            }
            else{
                l = m+1;
            }
        }
        return l;
        // remember to return -1
    }
};",1454835201
Lasya,lasyacheela,571,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int n = nums.size(), v = 0;

        for (int s = 0; s < n; ++s) {
            if (nums[s] != 0) continue;

            for (int d : {-1, 1}) {
                vector<int> t = nums;
                int c = s, dir = d;

                while (c >= 0 && c < n) {
                    if (t[c] == 0) {
                        c += dir;
                    } else {
                        t[c]--;
                        dir = -dir;
                        c += dir;
                    }
                }

                if (t == vector<int>(n, 0)) v++;
            }
        }

        return v;
    }
};
",1454805957
Lasya,lasyacheela,571,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& q) {
        int m=q.size();
        vector<long long>vec(100001,0);
        for(int i=0;i<m;i++){
            vec[q[i][0]]++;
            vec[q[i][1]+1]--;
        }
        vector<int> prefix(vec.size());
    prefix[0] = vec[0];
    for (size_t i = 1; i < vec.size(); ++i) {
        prefix[i] = prefix[i - 1] + vec[i];
    }
       // for(auto it:prefix)cout<<it<<"" "" ;cout<<endl;
        for(int i=0;i<nums.size();i++){
            if(prefix[i]<nums[i]){//cout<<i<<"" "";cout<<vec[i]<<""l""<<nums[i]<<endl;
                                  return false;}
        }
        return true;
    }
};",1454816996
Lasya,lasyacheela,571,3643,cpp,"class Solution {
private:
    bool check(int k, int n, const vector<int>& nums, const vector<vector<int>>& q) {
        vector<long long> d(n + 1, 0), c(nums.begin(), nums.end());
 for (int i = 0; i < k; i++) {
            int l = q[i][0], r = q[i][1], v = q[i][2];
            d[l] -= v;
            d[r + 1] += v;
        }long long s = 0;
        for (int i = 0; i < n; i++) {
            s += d[i];c[i] += s;
            if (c[i] > 0) return false;
        }
        return true;
    }

public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& q) {
        int n = nums.size(), m = q.size();
        int flag=0;
        for(auto it:nums){
            if(it!=0)flag=1;
        }
        if(flag==0)return 0;
        int l = 1, r = m, ans = -1;
      while (l <= r) {
            int mid = l + (r-l)/2;
            if (check(mid, n, nums, q)) {
                ans = mid; r = mid - 1;
            } else { l = mid + 1;
            }
        }

        return ans;
    }
};
",1454835241
Pro Coder,pro_coderLC,572,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        count = 0
        n = len(nums)
        zero_positions = [i for i, val in enumerate(nums) if val == 0]
        directions = [-1, 1] 
        
        for start in zero_positions:
            for dir in directions:
                nums_copy = nums[:]
                curr = start
                direction = dir
                while True:
                    if curr < 0 or curr >= n:
                        break
                        
                    if nums_copy[curr] == 0:
                        curr += direction
                    else:
                        nums_copy[curr] -= 1
                        direction = -direction
                        curr += direction
                if all(x == 0 for x in nums_copy):
                    count += 1
        return count
",1454807171
Pro Coder,pro_coderLC,572,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        n = len(nums)
        c = [0]*(n+1)
        for l, r in queries:
            c[l] +=1
            if r+1 < n:
                c[r+1] -=1
        
        for i in range(1, n):
            c[i] += c[i-1]
        c = c[:n]
        
        for i in range(n):
            if c[i] < nums[i]:
                return False
        return True
",1454813707
Pro Coder,pro_coderLC,572,3643,python3,"class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        n = len(nums)
        q_len = len(queries)
        
        left = 0
        right = q_len
        answer = -1

        
        while left <= right:
            mid = (left + right) // 2
            
            cumulative_capacity_diff = [0] * (n + 2)  
            for i in range(mid):
                li, ri, vali = queries[i]
                
                cumulative_capacity_diff[li] += vali
                cumulative_capacity_diff[ri + 1] -= vali
                
            possible = True
            cumulative_capacity = [0] * n
            curr = 0
            
            for i in range(n):
                curr += cumulative_capacity_diff[i]
                cumulative_capacity[i] = curr
                if cumulative_capacity[i] < nums[i]:
                    possible = False
                    break 
                    
            if possible:
                answer = mid
                right = mid - 1
            else:
                left = mid + 1
        return answer
",1454835256
Nihal,nsk_91,573,3616,cpp,"
class Solution {
private:
    bool var_200(vector<int>& var_201, int var_202, bool var_203) {
        vector<int> var_204 = var_201;
        int var_205 = var_201.size();
        for (; var_202 >= 0 && var_202 < var_205;) {
            switch (var_204[var_202] == 0) {
                case true:
                    var_202 += var_203 ? 1 : -1;
                    break;
                default:
                    var_204[var_202]--;
                    var_203 = !var_203;
                    var_202 += var_203 ? 1 : -1;
                    break;
            }
        }
        int var_206 = 0;
        while (var_206 < var_205) {
            switch (var_204[var_206] != 0) {
                case true:
                    return false;
                default:
                    break;
            }
            var_206++;
        }
        return true;
    }

public:
    int countValidSelections(vector<int>& var_208) {
        int var_209 = var_208.size();
        int var_210 = 0;
        int var_211 = 0;
        while (var_211 < var_209) {
            switch (var_208[var_211] == 0) {
                case true:
                    if (var_200(var_208, var_211, true))
                        var_210++;
                    if (var_200(var_208, var_211, false))
                        var_210++;
                    break;
                default:
                    break;
            }
            var_211++;
        }
        return var_210;
    }
};
",1454806739
Nihal,nsk_91,573,3639,cpp,"
class Solution {
public:
    bool isZeroArray(vector<int>& var_201, vector<vector<int>>& var_202) {
        int var_203 = var_201.size();
        vector<int> var_204(var_203 + 1, 0);
        int var_205 = 0;
        for (; var_205 < var_202.size(); var_205++) {
            int var_206 = var_202[var_205][0];
            int var_207 = var_202[var_205][1];
            var_204[var_206]++;
            switch (var_207 + 1 < var_203) {
                case true:
                    var_204[var_207 + 1]--;
                    break;
                default:
                    break;
            }
        }
        int var_208 = 1;
        while (var_208 < var_203) {
            var_204[var_208] += var_204[var_208 - 1];
            var_208++;
        }
        int var_209 = 0;
        while (var_209 < var_203) {
            switch (var_204[var_209] < var_201[var_209]) {
                case true:
                    return false;
                default:
                    break;
            }
            var_209++;
        }
        return true;
    }
};
",1454815824
Nihal,nsk_91,573,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& var_200, vector<vector<int>>& var_201) {
        int var_202 = var_200.size();
        vector<int> var_203 = var_200;
        vector<int> var_204;

        switch (all_of(var_203.begin(), var_203.end(), [](int var_205) { return var_205 == 0; })) {
        case true:
            var_204 = var_203;
            return 0;
        }

        auto var_206 = [&](int var_207) -> bool {
            vector<int> var_208(var_202 + 1, 0);

            int var_209 = 0;
            while (var_209 < var_207) {
                int var_210 = var_201[var_209][0], var_211 = var_201[var_209][1], var_212 = var_201[var_209][2];
                var_208[var_210] += var_212;
                if (var_211 + 1 < var_202) {
                    var_208[var_211 + 1] -= var_212;
                }
                var_209++;
            }

            for (int var_213 = 0, var_214 = 0; var_213 < var_202; var_213++) {
                var_214 += var_208[var_213];
                if (var_214 < var_203[var_213]) {
                    return false;
                }
            }
            return true;
        };

        int var_215 = 0, var_216 = var_201.size();
        int var_217 = -1;
        bool var_218 = false;

        for (; var_215 <= var_216;) {
            int var_219 = (var_215 + var_216) / 2;

            switch (var_206(var_219)) {
            case true:
                var_217 = var_219;
                var_216 = var_219 - 1;
                break;
            default:
                var_215 = var_219 + 1;
                break;
            }

            if (!var_218 && var_219 == (int)var_201.size() / 2) {
                vector<int> var_220(var_202 + 1, 0);
                int var_221 = 0;
                while (var_221 < var_219) {
                    int var_222 = var_201[var_221][0], var_223 = var_201[var_221][1], var_224 = var_201[var_221][2];
                    var_220[var_222] += var_224;
                    if (var_223 + 1 < var_202) {
                        var_220[var_223 + 1] -= var_224;
                    }
                    var_221++;
                }

                var_204 = var_203;
                int var_225 = 0;
                for (int var_226 = 0; var_226 < var_202; var_226++) {
                    var_225 += var_220[var_226];
                    var_204[var_226] = max(0, var_203[var_226] - var_225);
                }
                var_218 = true;
            }
        }

        return var_217 != -1 ? var_217 : -1;
    }
};
",1454827801
jjzzzmd,jjzzzmd,574,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        ll=len(nums)
        def check(nums,i,d):
            nums=nums[:]
            # print('i',i)
            while True:
                # print(nums)
                i+=d
                if i<0 or i>=ll:
                    break
                if nums[i]>0:
                    nums[i]-=1
                    d=-d
            for num in nums:
                if num!=0:
                    return False
            return True
        res=0
        for i,num in enumerate(nums):
            if num==0:
                if check(nums,i,1):
                    res+=1
                if check(nums,i,-1):
                    res+=1
        return res
            ",1454816208
jjzzzmd,jjzzzmd,574,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        ll=len(nums)
        delta=[0 for _ in range(ll+1)]
        for s,e in queries:
            delta[s]-=1
            delta[e+1]+=1
        ps=[delta[0]]
        for i in range(1,len(delta)):
            ps.append(ps[-1]+delta[i])
        for i,num in enumerate(nums):
            if ps[i]+num>0:
                return False
        return True",1454827693
jjzzzmd,jjzzzmd,574,3643,python3,"class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        def check(k):
            ll=len(nums)
            delta=[0 for _ in range(ll+1)]
            for s,e,val in queries[:k]:
                delta[s]-=val
                delta[e+1]+=val
            ps=[delta[0]]
            for i in range(1,len(delta)):
                ps.append(ps[-1]+delta[i])
            for i,num in enumerate(nums):
                if ps[i]+num>0:
                    return False
            return True

        left=-1
        right=len(queries)+2
        oright=right
        while left+1!=right:
            mid=(left+right)//2
            if check(mid):
                right=mid
            else:
                left=mid
        # print(right)
        if right<oright:
            return right
        return -1",1454835318
Brian Ahaneku,Ruvxei,575,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        n = len(nums)
        ans = 0
        for i in range(n):
            if nums[i] == 0:
                left = sum(nums[:i])
                right = sum(nums[i + 1:])
                if left == right:
                    ans += 2
                elif abs(left - right) == 1:
                    ans += 1
        return ans",1454808036
Brian Ahaneku,Ruvxei,575,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        n = len(nums)
        diff = [0 for _ in range(n)]
        for l, r in queries:
            diff[l] -= 1
            if r + 1 < n:
                diff[r + 1] += 1
        dec = 0
        for i in range(n):
            dec += diff[i]
            if nums[i] + dec > 0:
                return False
        return True
            ",1454811569
Brian Ahaneku,Ruvxei,575,3643,python3,"class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        m = len(queries)
        n = len(nums)
        def can(length):
            diff = [0 for _ in range(n)]
            for i in range(length + 1):
                l, r, x = queries[i]
                diff[l] -= x
                if r + 1 < n:
                    diff[r + 1] += x
            dec = 0
            for i in range(n):
                dec += diff[i]
                if nums[i] + dec > 0:
                    return False
            return True
        a = -1
        b = m - 1
        ans = float('inf')
        while a <= b:
            c = (a + b) // 2
            if can(c):
                ans = min(ans, c)
                b = c - 1
            else:
                a = c + 1
        return ans + 1 if ans != float('inf') else -1
                ",1454820822
nemesis_S,nemesis_S,576,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {

        int n = nums.size();
        vector<int> pre(n + 1);
        for (int i = 0; i < n; i++) {
            pre[i + 1] += pre[i] + nums[i];
        }
        int ans = 0;
        for (int i = 1; i <= n; i++) {
            if (nums[i - 1] == 0) {
                if (abs(pre[i] - (pre[n] - pre[i])) == 0) ans += 2;
                else if (abs(pre[i] - (pre[n] - pre[i])) == 1) ans++;
            } 
        }
        return ans;
    }
};",1454812692
nemesis_S,nemesis_S,576,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size(), m = queries.size();
        vector<int> dif(n + 1);
        for (int i = 0; i < m; i++) {
            dif[queries[i][0]]++;
            dif[queries[i][1] + 1]--;
        }
        for (int i = 1; i <= n; i++) {
            dif[i] += dif[i - 1];
        }
        bool f = true;
        for (int i = 0; i < n; i++) {
            if (nums[i] > dif[i]) f = false;
        }
        return f;
    }
};",1454819070
nemesis_S,nemesis_S,576,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size(), m = queries.size();
        int ans = -1;
        int lo = 0, hi = m - 1, p = 1;
        for (int i = 0; i < n; i++) {
            if (nums[i]) p = 0;
        }
        if (p) return 0;
        while (lo <= hi) {
            int mid = (lo + hi) / 2;
            vector<int> dif(n + 1);
            for (int i = 0; i <= mid; i++) {
                dif[queries[i][0]] += queries[i][2];
                dif[queries[i][1] + 1] -= queries[i][2];
            }
            for (int i = 1; i <= n; i++) {
                dif[i] += dif[i - 1];
            }
            bool f = true;
            for (int i = 0; i < n; i++) {
                if (nums[i] > dif[i]) f = false;
            }
            if (f) {
                ans = mid + 1;
                hi = mid - 1;
            }
            else lo = mid + 1;
        }
        return ans;
    }
};",1454827893
H3PMo12O40,H3PMo12O40,577,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        prefix=[0]
        for i in nums:
            prefix.append(prefix[-1]+i)
        ans=0
        for i in range(len(nums)):
            if nums[i]==0:
                vl,vr=prefix[i],prefix[-1]-prefix[i+1]
                if vl==vr:
                    ans+=2
                elif abs(vl-vr)==1:
                    ans+=1
        return ans",1454811659
H3PMo12O40,H3PMo12O40,577,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        l=len(nums)
        diff=[0]*(l+1)
        for i in queries:
            diff[i[0]]-=1
            diff[i[1]+1]+=1
        #print(diff)
        for i in range(l):
            nums[i]+=diff[i]
            diff[i+1]+=diff[i]
        #print(diff)
        #print(nums)
        for i in nums:
            if i>0:
                return False
        return True",1454819350
H3PMo12O40,H3PMo12O40,577,3643,python3,"class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        def decide(r):
            l=len(nums)
            diff=[0]*(l+1)
            for i in queries[:r]:
                diff[i[0]]-=i[2]
                diff[i[1]+1]+=i[2]

            for i in range(l):
                if nums[i]+diff[i]>0:
                    return False
                diff[i+1]+=diff[i]
            return True
            
        L=len(queries)
        if not decide(L):
            return (-1)
        all0=True
        for i in nums:
            if i!=0:
                all0=False
                break
        if all0:
            return 0
        
        left,right=0,L
        while right-left>1:
            mid=(left+right)>>1
            if decide(mid):
                right=mid
            else:
                left=mid
        #print(left,right)
        if decide(left):
            return left
        else:
            return right",1454842737
Mark,chanhung,578,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int sum = 0, tmp = 0, ans = 0;
        for(auto &n : nums){
            sum += n;
        }
        for(auto &n:nums){
            tmp += n;
            if(n == 0){
                if(tmp * 2 == sum) ans += 2;
                if(tmp * 2 + 1 == sum) ans += 1;
                if(tmp * 2 - 1 == sum) ans += 1;
            }
        }
        return ans;
    }
};",1454809129
Mark,chanhung,578,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        vector<int> dif(n+1, 0);
        for(auto &q:queries){
            dif[q[0]]--;
            dif[q[1]+1]++;
        }
        int diff = 0;
        for(int i=0;i<n;i++){
            diff += dif[i];
            if(nums[i]+diff > 0) return false;
        }
        return true;
    }
};",1454813204
Mark,chanhung,578,3643,cpp,"class Solution {
    bool check(vector<int>& nums, vector<vector<int>>& queries, int id){
        int n = nums.size();
        vector<int> dif(n+1, 0);
        for(int i=0;i<id;i++){
            auto q = queries[i];
            dif[q[0]] -= q[2];
            dif[q[1]+1] += q[2];
        }
        int diff = 0;
        for(int i=0;i<n;i++){
            diff += dif[i];
            if(nums[i]+diff > 0) return false;
        }
        return true;
    }
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        // X X O O O O
        int l = 1, r = queries.size();
        
        if(!check(nums, queries, r))  return -1;
        if(check(nums, queries, 0))  return 0;
        if(check(nums, queries, 1))  return 1;
        
        while(l<r){
            int m = (l+r)/2;
            if(check(nums, queries, m))  r = m;
            else                         l = m+1;
        }
        return l;
    }
};",1454827974
Ineesh,Ineesh,580,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        
        auto check = [&](int cur, int ok){ 
        vector<int> v = nums;
        int n = v.size();
        while(cur < n && cur >= 0){
            int x = v[cur];
            if(x == 0){
                if(ok){
                    cur++;
                }
                else{
                    cur--;
                }
            }
            else{
                v[cur]--;
                ok ^= 1;
                if(ok) cur++;
                else cur--;
                continue;
            }
        }
        return (count(v.begin(), v.end(), 0) == n);    
    };
        int ans = 0;
    for(int i = 0; i < (int)nums.size(); i++){
         if(nums[i] != 0) continue;
         if(check(i, 0)){
             // cout << i << ' ';
             ans++;
         }
         if(check(i, 1)){
             // cout << i << "" "";
             ans++;
         }
    }
        cout << endl;
        return ans;
    }        
};",1454816026
Ineesh,Ineesh,580,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
       vector<int> v = nums;
        int n = (int)v.size();
        vector<int> d(n);
        for(auto it : queries){
             int x = it[0], y = it[1];
             d[x] ++;
            if(y + 1 < n) d[y + 1]--;
        }
        vector<int> pr(n);
        pr[0] = d[0];
        for(int i = 1; i < n; i++) pr[i] += pr[i - 1] + d[i];
        for(int i = 0; i < n; i++){
             if(nums[i] > pr[i]) return false;
        }
        return true;
    }
};",1454823318
Ineesh,Ineesh,580,3643,cpp,"
struct SegTree{
     int size;
     vector<int> tree;
     vector<int> lazy;
 
     int merge(int l, int r) {return max(l, r); }
 
     int query(int lx, int rx, int i, int l, int r){
          tree[i] += lazy[i];
          if(l != r){
             lazy[2 * i] += lazy[i];
             lazy[2 * i + 1] += lazy[i];
          } lazy[i] = 0;
          if(l > rx || r < lx) return 0LL;
          if(l >= lx && r <= rx) return tree[i];
          int m = (l + r) / 2;
          int left = query(lx, rx, 2 * i, l, m);
          int right = query(lx, rx, 2 * i + 1, m + 1, r);
          return merge(left, right);
     }
 
 
     void set(int lx, int rx, int val, int i, int l, int r){
              tree[i] += lazy[i];
              if(l != r){
                 lazy[2 * i] += lazy[i];
                 lazy[2 * i + 1] += lazy[i];
              } lazy[i] = 0;
              if(l > rx || r < lx){
                 return;
              }
              if(l >= lx && r <= rx){
                   tree[i] += val;
                   if(l != r){
                     lazy[2 * i] += val;
                     lazy[2 * i + 1] += val;
                   }
                   return;
              }
              int m = (l + r) / 2;
              set(lx, rx, val, 2 * i, l, m);
              set(lx, rx, val, 2 * i + 1, m + 1, r);
              tree[i] = merge(tree[2 * i], tree[2 * i + 1]);
     }
 
 
     SegTree(int n){
       tree.resize(4 * n);
       lazy.resize(4 * n);
       size = n - 1;
     }
 
     void set(int lx, int rx, int val) {set(lx, rx, val, 1, 0, size); }
     int query(int lx, int rx) {return query(lx, rx, 1, 0, size); }
};
class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
      int n = nums.size();
      int ans = -1;
      vector<int> v = nums;
      SegTree st(n);
      for(int i = 0; i < n; i++) st.set(i, i, v[i]);
        int z = st.query(0, n - 1);
        if(z <= 0){
            return 0;
        }
        int cnt = 1;
      for(auto it : queries){
          int l = it[0], r = it[1], val = it[2];
          st.set(l, r, -val);
          z = st.query(0, n - 1);
          if(z <= 0){
              return cnt;
          }
          cnt++;
      }
        
     return ans;
    }
};",1454835515
Algernon_5,Algernon_5,581,3616,java,"class Solution {
    public int countValidSelections(int[] nums) {
        int n = nums.length;
        int[] prefix = new int[n + 1];
        for(int i = 0; i < n; i++) {
            prefix[i + 1] = prefix[i] + nums[i];
        }

        int res = 0;
        int suffix = 0;
        for(int i = n - 1; i >= 0; i--) {
            suffix += nums[i];
            if(nums[i] != 0) {
                continue;
            }
            if(prefix[i] == suffix) {
                res += 2;
            } else if((prefix[i] - suffix == 1) || (suffix - prefix[i] == 1)) {
                res++;
            }
        }

        return res;
    }
}",1454810983
Algernon_5,Algernon_5,581,3639,java,"class Solution {
    public boolean isZeroArray(int[] nums, int[][] queries) {
        int n = nums.length;
        int[] dp = new int[n + 1];
        for(int[] q : queries) {
            dp[q[0]]++;
            dp[q[1] + 1]--;
        }

        int diff = 0;
        for(int i = 0; i < n; i++) {
            diff += dp[i];
            if(diff < nums[i]) {
                return false;
            }
        }

        return true;
    }
}",1454815644
Algernon_5,Algernon_5,581,3643,java,"class Solution {
    public int minZeroArray(int[] nums, int[][] queries) {
        int n = nums.length;
        int[] dp = new int[n + 1];
        int diff = 0;
        int k = 0;
        int qn = queries.length;
        for(int i = 0; i < n; i++) {
            while(diff + dp[i] < nums[i]) {
                if(k == qn) {
                    return -1;
                }
                int l = queries[k][0];
                int r = queries[k][1];
                int v = queries[k][2];
                if(l >= i) {
                    dp[l] += v;
                    dp[r + 1] -= v;
                } else if(l < i && r + 1 >= i) {
                    diff += v;
                    dp[r + 1] -= v;
                }
                k++;
            }
            diff += dp[i];
        }

        return k;
    }
}",1454828042
E C Bhaavan Sai,bhaavan8911,583,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& v) {
        int ans=0;
        for(int i=0;i<v.size();i++){
            if(v[i]==0){
                int a=0,b=0;
                for(int j=0;j<i;j++)a+=v[j];
                for(int j=i+1;j<v.size();j++)b+=v[j];
                if(a==b)ans+=2;
                else if(abs(a-b)==1)ans+=1;
            }
        }
        return ans;
    }
};",1454811292
E C Bhaavan Sai,bhaavan8911,583,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& v, vector<vector<int>>& q) {
        int n=v.size();
        vector<int> v1(n+1);
        for(int i=0;i<q.size();i++){
            v1[q[i][0]]++;v1[q[i][1]+1]--;
        }
        for(int i=1;i<=n;i++){
            v1[i]+=v1[i-1];
        }
        //for(auto i:v1)cout<<i<<"" "";
        for(int i=0;i<n;i++){
            if(v1[i]<v[i])return 0;
        }
        
        return 1;
    }
};",1454824383
E C Bhaavan Sai,bhaavan8911,583,3643,cpp,"class Solution {
public:
    int fun(int mid,vector<int> &v,vector<vector<int>> &q){
        int n=v.size();
        vector<int> v1(n+1);
        for(int i=0;i<mid;i++){
            v1[q[i][0]]+=q[i][2];
            v1[q[i][1]+1]-=q[i][2];
        }
        for(int i=1;i<=n;i++)v1[i]+=v1[i-1];
        for(int i=0;i<n;i++){
            if(v1[i]<v[i])return 0;
        }
        return 1;
    }
    int minZeroArray(vector<int>& v, vector<vector<int>>& q) {
        int n=v.size(),m=q.size();
        int lo=0,hi=m,mid,ans=-1;
        while(lo<=hi){
            mid=(lo+hi)/2;
            if(fun(mid,v,q)){
                ans=mid;hi=mid-1;
            }
            else lo=mid+1;
        }
        return ans;
    }
};",1454835630
yolo12345,yolo12345,585,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int sum=0;
        int ans=0;
        int n=nums.size();
        for(int i=0;i<n;i++) sum+=nums[i];
        int res=0;
        for(int i=0;i<n;i++){
            if(nums[i]==0){
                int x=sum-res; int p=abs(x-res);
                if(p==1) ans++;
                if(p==0) ans+=2;
            }
            res+=nums[i];
        }
        return ans;
    }
};",1454835715
yolo12345,yolo12345,585,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& q) {
        int sz=q.size(),n=nums.size();
        vector<int> cnt(n,0);
        for(int j=0;j<sz;j++){
                    cnt[q[j][0]]--;
                    if(q[j][1]<n-1) cnt[q[j][1]+1]++;
        }
        vector<int> pre(n);
            pre[0]=cnt[0];
            for(int i=1;i<n;i++) pre[i]=cnt[i]+pre[i-1];
            bool f=true;
            for(int i=0;i<n;i++){
                if(nums[i]+pre[i]>0) f=false;
            }
        return f;
    }
};",1454828258
yolo12345,yolo12345,585,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& q) {
        int sz=q.size(),n=nums.size();
        int yolo=0;
        for(int i=0;i<n;i++){
            if(nums[i]==0) yolo++;
        }
        if(yolo==n) return 0;
        int l=0,h=sz-1;
        vector<int> cnt(n,0);
        int ans=sz;
        int prev=-1;
        while(l<=h){
            int m=(l+h)/2;
            if(prev<m){
                for(int j=prev+1;j<=m;j++){
                    cnt[q[j][0]]-=q[j][2];
                    if(q[j][1]<n-1) cnt[q[j][1]+1]+=q[j][2];
                }
            }
            else{
                for(int j=m+1;j<=prev;j++){
                    cnt[q[j][0]]+=q[j][2];
                    if(q[j][1]<n-1) cnt[q[j][1]+1]-=q[j][2];
                }
            }
            vector<int> pre(n);
            pre[0]=cnt[0];
            for(int i=1;i<n;i++) pre[i]=cnt[i]+pre[i-1];
            bool f=true;
            for(int i=0;i<n;i++){
                if(nums[i]+pre[i]>0) f=false;
            }
            prev=m;
            if(f){
                ans=min(ans,m); h=m-1;
            }
            else l=m+1;
        }
        if(ans==sz) return -1;
        return ans+1;
    }
};",1454825138
Wilsano,Wilsano,587,3616,cpp,"class Solution {
public:
    bool valid(int cur, vector<int> nums, int direction){
        int n = nums.size();
        while(0 <= cur && cur < n){
            if(nums[cur] == 0){
                cur += direction;
            }
            else{
                nums[cur] -= 1;
                direction *= -1;
                cur += direction;
            }
        }
        
        return (accumulate(nums.begin(), nums.end(), 0) == 0);
    }

    int countValidSelections(vector<int>& nums) {
        int count = 0;
        for(int i = 0; i < nums.size(); ++i){
            if(nums[i] == 0){
                count += valid(i, nums, 1);
                count += valid(i, nums, -1);
            }
        }
        return count;
    }
};",1454808571
Wilsano,Wilsano,587,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        vector<int> dp(n + 1);
        for(auto& q : queries){
            dp[q[0]] += 1;
            dp[q[1] + 1] -= 1;
        }
        
        int count = 0;
        for(int i = 0; i < n; ++i){
            count += dp[i];
            if(count < nums[i]){
                return false;
            }
        }
        
        return true;
    }
};",1454811713
Wilsano,Wilsano,587,3643,cpp,"class Solution {
public:
    bool valid(int k, vector<int>& nums, vector<vector<int>>& queries){
        int n = nums.size();
        vector<int> dp(n + 1);
        for(int i = 0; i < k; ++i){
            dp[queries[i][0]] += queries[i][2];
            dp[queries[i][1] + 1] -= queries[i][2];
        }
        
        int count = 0;
        for(int i = 0; i < n; ++i){
            count += dp[i];
            if(count < nums[i]){
                return false;
            }
        }

        return true;
    }

    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int left = 0, right = queries.size();
        while(left < right){
            int mid = left + (right - left) / 2;
            if(valid(mid, nums, queries)){
                right = mid;
            }
            else{
                left = mid + 1;
            }
        }

        if(valid(queries.size(), nums, queries)){
            return left;
        }
        return -1;
    }
};",1454828310
Adarsh Sahu,adarshsahu460,592,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int n = nums.size();
        int pre[n], suff[n];
        pre[0] = nums[0];
        for(int i=1;i<n;i++){
            pre[i] = pre[i-1]+nums[i];
        }
        suff[n-1] = nums[n-1];
        for(int i=n-2;i>=0;i--){
            suff[i] = suff[i+1]+nums[i];
        }
        int ans = 0;
        for(int i=0;i<n;i++){
            if(nums[i]==0 && abs(pre[i]-suff[i])<=1){
                if(abs(pre[i]-suff[i])<1){
                    ans+=2;
                }else{
                    ans++;
                }
            }
        }
        return ans;
    }
};",1454811642
Adarsh Sahu,adarshsahu460,592,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        vector<int> calc(n,0);
        for(auto i:queries){
            calc[i[0]]++;
            if(i[1]+1<n) calc[i[1]+1]--;
        }
        int prev = 0;
        for(int i=0;i<n;i++){
            if(prev+calc[i]<nums[i]) return false;
            prev+=calc[i];
        }
        return true;
    }
};",1454815945
Adarsh Sahu,adarshsahu460,592,3643,cpp,"class Solution {
public:
    bool isZeroArray(vector<int> nums, vector<vector<int>>&queries, int j) {
        int n = nums.size();
        vector<int> calc(n,0);
        for(int i=0;i<=j;i++){
            calc[queries[i][0]]+=queries[i][2];
            if(queries[i][1]+1<n) calc[queries[i][1]+1]-=queries[i][2];
        }
        int prev = 0;
        for(int i=0;i<n;i++){
            if(prev+calc[i]<nums[i]) return false;
            prev+=calc[i];
        }
        return true;
    }
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int low = 0, high = queries.size()-1;
        bool check = true;
        for(auto i:nums) if(i!=0) check = false;
        if(check) return 0;
        int ans = -1;
        while(low<=high){
            int mid = (low+high)/2;
            if(isZeroArray(nums,queries,mid)){
                ans = mid+1;
                high = mid-1;
            }else{
                low = mid+1;
            }
        }
        return ans;
    }
};",1454828410
raararaara,raararaara,593,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& a) {
        int n = int(size(a));
        int tot = accumulate(begin(a), end(a), 0);
        vector<int> p(n+1);
        for(int i = 1; i <= n; i++) {
            p[i] = p[i-1] + a[i-1];
        }
        auto f = [&](int l, int r) {
            if(r<l) return 0;
            return p[r] - p[l-1];
        };
        
        int ret = 0;
        for(int i = 0; i < n; i++) {
            if(a[i]) continue;
            int l = f(1,i), r = f(i+2,n);
            if(l==r) ret += 2;
            else if(abs(l-r) == 1) ret += 1;
        }

        return ret;
    }
};",1454840316
raararaara,raararaara,593,3639,cpp,"#include<bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
//#include <atcoder/all>
//using mint = atcoder::modint998244353;
using namespace std;
using namespace __gnu_pbds;
template<class key, class cmp = std::less<key>>
using ordered_set = tree<key, null_type, cmp, rb_tree_tag,tree_order_statistics_node_update>;
template<class key, class value, class cmp = std::less<key>>
using ordered_map = tree<key, value, cmp, rb_tree_tag, tree_order_statistics_node_update>;

using lint = long long;
using ii = pair<int, int>;
using il = pair<int, lint>;
using li = pair<lint, int>;
using ll = pair<lint, lint>;

const int mxn = 1000100, mxp = 1000001;
const int MOD = 998244353, inf = -1e9 - 7, INF = 1e9 + 1;
const lint lnf = -4e18, LNF = 5e18;
const double eps = 1e-10;
const int sqrtN = 200;

#define sz(x) int(size(x))
#define all(x) (x).begin(),(x).end()
#define compress(x) sort(all(x)), (x).erase(unique(all(x)), (x).end())
#define lb(x, v) (lower_bound(all(x), v) - (x).begin())
#define ub(x, v) (upper_bound(all(x), v) - (x).begin())
#define eb emplace_back
#define pb push_back
#define getName(var)  #var
vector<lint> xl, yl;

#define Yes ""Yes\n""
#define No ""No\n""

const int dr[] = {-1, 0, 1, 0};
const int dc[] = {0, -1, 0, 1};

inline int inRange(int r, int c, int R, int C) {
    return 0 <= r && r < R && 0 <= c && c < C;
}

lint N, M, Q, R, C, H, K, T;

void init() {

}

template<typename T_Node,
        typename T_Lazy,
        typename F_Merge,
        typename F_Update,
        typename F_Prop>
struct LazySegTree {
    int N{}, base{};
    vector<T_Node> tree;
    vector<T_Lazy> lz;

    const F_Merge m;
    const F_Update u;
    const F_Prop p;
    const T_Node I;
    const T_Lazy lzI;

    LazySegTree() = default;

    LazySegTree(int n,
                F_Merge _m, F_Update _u, F_Prop _p,
                const T_Node &I, const T_Lazy &lzI)
            : N(n), m(_m), u(_u), p(_p), I(I), lzI(lzI) {
        for (base = 1; base < N; base <<= 1);
        tree.resize(base * 2 + 1, I);
        lz.resize(base * 2 + 1, lzI);
    }

    void lazy(int n) {
        if(lz[n] == lzI) return;
        tree[n] = u(tree[n], lz[n]);
        if (n < base) {
            lz[n<<1] = p(lz[n<<1], lz[n]);
            lz[n<<1|1] = p(lz[n<<1|1], lz[n]);
        }
        lz[n] = lzI;
    }

    void build() {
        for (int i = base - 1; i; i--) {
            tree[i] = m(tree[i << 1], tree[i << 1 | 1]);
        }
    }

    T_Node get(int i) { return tree[i + base]; }

    void set(int i, T_Node v) { tree[i + base] = v; }

    void upd(int l, int r, T_Lazy v) {
        upd(l, r, 1, 0, base - 1, v);
    }
    void upd(int l, int r, int n, int nl, int nr, T_Lazy v) {
        lazy(n);
        if (r < nl || nr < l) return;
        if (l <= nl && nr <= r) {
            lz[n] = p(lz[n], v);
            lazy(n);
            return;
        }
        int mid = (nl + nr) >> 1;
        upd(l, r, n<<1, nl, mid, v);
        upd(l, r, n<<1|1, mid+1, nr, v);

        tree[n] = m(tree[n<<1], tree[n<<1|1]);
    }

    T_Node qry(int l, int r) {
        return qry(l, r, 1, 0, base - 1);
    }
    T_Node qry(int l, int r, int n, int nl, int nr) {
        lazy(n);
        if (r < nl || nr < l) return I;
        if (l <= nl && nr <= r) return tree[n];
        int mid = (nl + nr) >> 1;
        return m(qry(l, r, n<<1, nl, mid), qry(l, r, n<<1|1, mid+1, nr));
    }
};

class Solution {
public:
    bool isZeroArray(vector<int>& a, vector<vector<int>>& queries) {
        auto m = [](lint a, lint b) {
            return max(a,b);
        };
        auto u = [](lint a, lint b) {
            return a + b;
        };
        auto p = [](lint a, lint b) {
            return a + b;
        };
        N = sz(a);
        LazySegTree<lint, lint, decltype(m), decltype(u), decltype(p)> seg(N, m, u, p, 0, 0);
        int mx = inf;
        for(int i = 0; i < N; i++) {
            seg.set(i, a[i]);
            mx = max(mx, a[i]);
        }
        if(mx == 0) return 0;
        seg.build();
        for(auto &vec: queries) {
            int l = vec[0], r = vec[1];
            seg.upd(l, r, -1);
        }
        if(seg.qry(0,N-1) <= 0) return true;
        return false;
    }
};
",1454843208
raararaara,raararaara,593,3643,cpp,"#include<bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
//#include <atcoder/all>
//using mint = atcoder::modint998244353;
using namespace std;
using namespace __gnu_pbds;
template<class key, class cmp = std::less<key>>
using ordered_set = tree<key, null_type, cmp, rb_tree_tag,tree_order_statistics_node_update>;
template<class key, class value, class cmp = std::less<key>>
using ordered_map = tree<key, value, cmp, rb_tree_tag, tree_order_statistics_node_update>;

using lint = long long;
using ii = pair<int, int>;
using il = pair<int, lint>;
using li = pair<lint, int>;
using ll = pair<lint, lint>;

const int mxn = 1000100, mxp = 1000001;
const int MOD = 998244353, inf = -1e9 - 7, INF = 1e9 + 1;
const lint lnf = -4e18, LNF = 5e18;
const double eps = 1e-10;
const int sqrtN = 200;

#define sz(x) int(size(x))
#define all(x) (x).begin(),(x).end()
#define compress(x) sort(all(x)), (x).erase(unique(all(x)), (x).end())
#define lb(x, v) (lower_bound(all(x), v) - (x).begin())
#define ub(x, v) (upper_bound(all(x), v) - (x).begin())
#define eb emplace_back
#define pb push_back
#define getName(var)  #var
vector<lint> xl, yl;

#define Yes ""Yes\n""
#define No ""No\n""

const int dr[] = {-1, 0, 1, 0};
const int dc[] = {0, -1, 0, 1};

inline int inRange(int r, int c, int R, int C) {
    return 0 <= r && r < R && 0 <= c && c < C;
}

lint N, M, Q, R, C, H, K, T;

void init() {

}

template<typename T_Node,
        typename T_Lazy,
        typename F_Merge,
        typename F_Update,
        typename F_Prop>
struct LazySegTree {
    int N{}, base{};
    vector<T_Node> tree;
    vector<T_Lazy> lz;

    const F_Merge m;
    const F_Update u;
    const F_Prop p;
    const T_Node I;
    const T_Lazy lzI;

    LazySegTree() = default;

    LazySegTree(int n,
                F_Merge _m, F_Update _u, F_Prop _p,
                const T_Node &I, const T_Lazy &lzI)
            : N(n), m(_m), u(_u), p(_p), I(I), lzI(lzI) {
        for (base = 1; base < N; base <<= 1);
        tree.resize(base * 2 + 1, I);
        lz.resize(base * 2 + 1, lzI);
    }

    void lazy(int n) {
        if(lz[n] == lzI) return;
        tree[n] = u(tree[n], lz[n]);
        if (n < base) {
            lz[n<<1] = p(lz[n<<1], lz[n]);
            lz[n<<1|1] = p(lz[n<<1|1], lz[n]);
        }
        lz[n] = lzI;
    }

    void build() {
        for (int i = base - 1; i; i--) {
            tree[i] = m(tree[i << 1], tree[i << 1 | 1]);
        }
    }

    T_Node get(int i) { return tree[i + base]; }

    void set(int i, T_Node v) { tree[i + base] = v; }

    void upd(int l, int r, T_Lazy v) {
        upd(l, r, 1, 0, base - 1, v);
    }
    void upd(int l, int r, int n, int nl, int nr, T_Lazy v) {
        lazy(n);
        if (r < nl || nr < l) return;
        if (l <= nl && nr <= r) {
            lz[n] = p(lz[n], v);
            lazy(n);
            return;
        }
        int mid = (nl + nr) >> 1;
        upd(l, r, n<<1, nl, mid, v);
        upd(l, r, n<<1|1, mid+1, nr, v);

        tree[n] = m(tree[n<<1], tree[n<<1|1]);
    }

    T_Node qry(int l, int r) {
        return qry(l, r, 1, 0, base - 1);
    }
    T_Node qry(int l, int r, int n, int nl, int nr) {
        lazy(n);
        if (r < nl || nr < l) return I;
        if (l <= nl && nr <= r) return tree[n];
        int mid = (nl + nr) >> 1;
        return m(qry(l, r, n<<1, nl, mid), qry(l, r, n<<1|1, mid+1, nr));
    }
};


class Solution {
public:
    int minZeroArray(vector<int>& a, vector<vector<int>>& queries) {
        auto m = [](lint a, lint b) {
            return max(a,b);
        };
        auto u = [](lint a, lint b) {
            return a + b;
        };
        auto p = [](lint a, lint b) {
            return a + b;
        };
        N = sz(a);
        LazySegTree<lint, lint, decltype(m), decltype(u), decltype(p)> seg(N, m, u, p, 0, 0);
        int mx = inf;
        for(int i = 0; i < N; i++) {
            seg.set(i, a[i]);
            mx = max(mx, a[i]);
        }
        if(mx == 0) return 0;
        seg.build();
        for(int i = 1; auto &vec: queries) {
            int l = vec[0], r = vec[1], k = vec[2];
            seg.upd(l, r, -k);
            int cand = seg.qry(0,N-1);
            if(cand <= 0) return i;
            i++;
        }
        return -1;
    }
};
",1454840103
Md Nahid Chowdhury,MdNahidCHY,594,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        
        int n = nums.size(),ans = 0;
        vector<int>sum(n+2);
        
        sum[0] = 0;
        for(int i=1; i<=n; ++i)
            sum[i] = sum[i-1]+nums[i-1];
        
        for(int i=1; i<=n; ++i)
            if(!nums[i-1] && sum[i] == sum[n]-sum[i-1])
                ans += 2;
        else if(!nums[i-1] && abs(sum[i]-  (sum[n]-sum[i-1]))==1)
            ans++;
        
        return ans;
    }
};",1454814934
Md Nahid Chowdhury,MdNahidCHY,594,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        
        int m = queries.size();
        int n = nums.size();
        
        vector<int>sum(n+2,0);
        for(auto it:queries)
        sum[it[0]]++,sum[it[1]+1]--;
        
        for(int i=1; i<n; ++i)
            sum[i] += sum[i-1];
        
        for(int i=0; i<n; ++i)
         if(sum[i]<nums[i]) 
             return false;
        
        return true;
    }
};",1454824099
Md Nahid Chowdhury,MdNahidCHY,594,3643,cpp,"class Solution {
public:
    
    bool solve(vector<int>& num, vector<vector<int>>& q,int mid)
    {
        int n = num.size();
        vector<int>sum(n+2,0);
        
        for(int i=0; i<mid; ++i)
        sum[q[i][0]] += q[i][2],sum[q[i][1]+1] -= q[i][2];
        
        for(int i=1; i<n; ++i)
            sum[i] += sum[i-1];
        
        for(int i=0; i<n; ++i)
            if(sum[i]<num[i])
                return false;
        
        return true;
    }
        
    int minZeroArray(vector<int>& num, vector<vector<int>>& q) {
     
        int m = q.size();
        
        int l = 0, r = m;
        while(l<=r)
        {
            int mid = (l+r)/2;
            
            if(!solve(num,q,mid))
                l = mid+1;
            else
                r = mid-1;
        }
        
        if(l>m)
            return -1;
        else
            return l;
    }
};",1454835897
BT22CSE1832026,BT22CSE1832026,595,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int n = nums.size();
        int validSelections = 0;
        
        auto simulate = [&](int start, int direction) {
            vector<int> temp = nums; 
            int curr = start;
            while (curr >= 0 && curr < n) {
                if (temp[curr] == 0) {
                    curr += direction;
                } else {
                    temp[curr]--;
                    direction = -direction;
                    curr += direction;
                }
            }
            for (int x : temp) {
                if (x != 0) return false;
            }
            return true;
        };
        
        for (int i = 0; i < n; i++) {
            if (nums[i] == 0) {
                if (simulate(i, -1)) validSelections++;
                if (simulate(i, 1)) validSelections++;
            }
        }
        
        return validSelections;
    }
};
",1454807758
BT22CSE1832026,BT22CSE1832026,595,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        vector<int> count(n + 1, 0);  
        
        for (const auto& query : queries) {
            int l = query[0];
            int r = query[1];
            count[l] += 1;
            if (r + 1 < n) count[r + 1] -= 1;
        }

        int availableDecrements = 0;
        for (int i = 0; i < n; ++i) {
            availableDecrements += count[i];
            if (availableDecrements < nums[i]) {
                return false;  
            }
        }
        
        return true;
    }
};
",1454814685
BT22CSE1832026,BT22CSE1832026,595,3643,cpp,"class Solution {
public:

    bool fn(vector<int>& nums, int mid, vector<vector<int>>& queries) {
        int n = nums.size();
        vector<int> count(n + 1, 0);  

        for (int i = 0; i < mid; i++) {
            int l = queries[i][0];
            int r = queries[i][1];
            int val=queries[i][2];
            count[l] += val;
            if (r + 1 < n) count[r + 1] -= val;
        }

        int availableDecrements = 0;
        for (int i = 0; i < n; ++i) {
            availableDecrements += count[i];
            if (availableDecrements < nums[i]) {
                return false;  
            }
        }
        
        return true;
    }

    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int low = 0;
        int high = queries.size();
        int ans = -1;
        while (low <= high) {  
            int mid = low + (high - low) / 2;
            if (fn(nums, mid, queries)) {
                ans = mid;
                high = mid - 1;
            } else {
                low = mid + 1;
            }
        }
        return ans;
    }
};
",1454828525
leet-22R01A05L0,leet-22R01A05L0,597,3616,python3,"from typing import List
class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        n=len(nums)
        valid=0
        def simulate(start:int,direction:int) -> bool:
            nums_copy=nums[:]
            curr=start
            while 0<=curr<n:
                if nums_copy[curr]==0:
                    curr+=direction
                else:
                    nums_copy[curr]-=1
                    direction*=-1
                    curr+=direction
            return all(x==0 for x in nums_copy)
        for i in range(n):
            if nums[i]==0:
                if simulate(i,-1):
                    valid+=1
                if simulate(i,1):
                    valid+=1
        return valid",1454822488
leet-22R01A05L0,leet-22R01A05L0,597,3639,python3,"from typing import List
class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        n=len(nums)
        delta=[0]*(n+1)
        for l1,r1 in queries:
            delta[l1]+=1
            if r1+1<n:
                delta[r1+1]-=1
        cover=[0]*n
        curr=0
        for i in range(n):
            curr+=delta[i]
            cover[i]=curr
        for i in range(n):
            if nums[i]>cover[i]:
                return False
        return True",1454829541
leet-22R01A05L0,leet-22R01A05L0,597,3643,python3,"from typing import List
class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        zero=nums[:]
        def can_zero(k:int)->bool:
            n=len(nums)
            delta=[0]*(n+1)
            for i in range(k):
                li,ri,vali=queries[i]
                delta[li]+=vali
                if ri+1<n:
                    delta[ri+1]-=vali
            curr=0
            for i in range(n):
                curr+=delta[i]
                if zero[i]>curr:
                    return False
            return True
        left,right=0,len(queries)
        res=-1
        while left<=right:
            mid=(left+right)//2
            if can_zero(mid):
                res=mid
                right=mid-1
            else:
                left=mid+1
        return res",1454843389
sleepySasank,sleepySasank,598,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        N = len(nums)
        def ok(i,g):
            f = nums.copy()
            curr = i
            dire = g 
            while 0<=curr<N:
                if f[curr] > 0:
                    f[curr]-=1
                    g = 1 if g==-1 else -1
                curr+=g
            return all(f[i]==0 for i in range(N))
        ans = 0
        for i in range(N):
            if (nums[i]==0 and (ok(i,1))):
                ans+=1
            if nums[i]==0 and ok(i,-1):ans+=1
        return ans",1454814145
sleepySasank,sleepySasank,598,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        N = len(nums)
        prefix =[0]*(N + 1)
        for l,r in queries:
            prefix[l]-=1
            prefix[r + 1]+=1
        prefix.pop()
        for i in range(1,len(prefix)):
            prefix[i]+=prefix[i-1]
        return all(max(0,x + y)==0 for x,y in zip(nums,prefix))",1454818926
sleepySasank,sleepySasank,598,3643,python3,"

class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        N = len(nums)
        
        def good(mid):
            prefix = [0] * (N + 1)
            for l, r, val in queries[:mid]:
                prefix[l] -= val
                prefix[r + 1] += val
            for i in range(1, N):
                prefix[i] += prefix[i - 1]
            return all(max(0,x + y)==0 for x,y in zip(prefix,nums))
        l, r = 0, len(queries)
        ans = len(queries)
        
        while l <= r:
            mid = (l + r) // 2
            if good(mid):
                ans = mid
                r = mid - 1  
            else:
                l = mid + 1  
        return ans if good(ans) else -1
",1454836154
Prabal Pratap Singh,prabalpsingh7115,599,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int n=nums.size();
        int suf=accumulate(nums.begin(),nums.end(),0);
        int pre=0;
        int ans=0;
        for(int i=0;i<n;i++)
        {
            suf-=nums[i];
            if(nums[i]==0)
            {
                if(pre==suf)
                {
                    ans+=2;
                }
                else if(abs(pre-suf)==1)
                {
                    ans++;
                }
        
            }
            pre+=nums[i];
        }
        return ans;
        
        
    }
};",1454811833
Prabal Pratap Singh,prabalpsingh7115,599,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n=nums.size();
        vector<int>diff(n+1);
        for(auto &i:queries)
        {
            int l=i[0];
            int r=i[1];
            diff[l]--;
            
            diff[r+1]++;
            
        }
        
        for(int i=1;i<n;i++)
        {
            diff[i]+=diff[i-1];    
        }
        for(int i=0;i<n;i++)
        {
            if(nums[i]!=0&&nums[i]+diff[i]>0)
            {
                return false;
            }
        }
        return true;
        
    }
};",1454820770
Prabal Pratap Singh,prabalpsingh7115,599,3643,cpp,"class Solution {
public:

    bool check(int mid,vector<int>&nums,vector<vector<int>>&queries)
    {
        int n=nums.size();
        vector<int>diff(n+1);
        for(int i=0;i<mid;i++)
        {
            int l=queries[i][0];
            int r=queries[i][1];
            int val=queries[i][2];
            diff[l]-=val;
            diff[r+1]+=val;
        }
        
        for(int i=1;i<n;i++)
        {
            diff[i]+=diff[i-1];    
        }
        for(int i=0;i<n;i++)
        {
            if(nums[i]!=0&&nums[i]+diff[i]>0)
            {
                return false;
            }
        }
        return true;
        
    }
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int q=queries.size();
        int l=0;
        int r=q;
        int ans=-1;
        while(r>=l)
        {
            int mid=l+(r-l)/2;
            if(check(mid,nums,queries))
            {
                ans=mid;
                r=mid-1;
            }
            else
            {
                l=mid+1;
            }
        }
        
        return ans;
    }
};",1454828719
Hanzhou Tang,hanzhoutang,600,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int ret = 0; 
        for(int i = 0;i<nums.size();i++) {
            if(nums[i] == 0) {
                int l = 0; 
                int r = 0; 
                for(int j = 0;j<i;j++) {
                    l += nums[j];
                }
                for(int j = i + 1;j<nums.size();j++) {
                    r += nums[j];
                }
                if(l == r) {
                    ret += 2; 
                } else if(l + 1 == r) {
                    ret += 1; 
                } else if(r + 1 == l) {
                    ret += 1; 
                }
            }
        }
        return ret; 
    }
};",1454814490
Hanzhou Tang,hanzhoutang,600,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        vector<int> tmp(nums.size() + 1);
        for(auto& q : queries) {
            int l = q[0];
            int r = q[1];
            tmp[l] -= 1;
            tmp[r+1] += 1; 
        }
        int v = 0; 
        for(int i = 0;i<nums.size();i++) {
            v += tmp[i];
            if(v + nums[i] > 0) {
                return false; 
            }
        }
        return true; 
    }
};",1454819017
Hanzhou Tang,hanzhoutang,600,3643,cpp,"class Solution {
public:
    bool be_zero(vector<int>& nums, vector<vector<int>>& queries, int k) {
        vector<int> tmp(nums.size() + 1);
        for(int i = 1;i<=k;i++) {
            const auto& q = queries[i-1];
            int l = q[0];
            int r = q[1];
            int v = q[2];
            tmp[l] -= v;
            tmp[r+1] += v;
        }
        int v = 0; 
        for(int i = 0;i<nums.size();i++) {
            v += tmp[i];
            if(v + nums[i] > 0) {
                return false; 
            }
        }
        return true; 
    }
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int l = 0; 
        int r = queries.size(); 
        int ret = queries.size() + 5; 
        while(l<=r) {
            int m = l + (r-l) / 2; 
            if(be_zero(nums, queries, m)) {
                ret = min(ret, m);
                r = m - 1; 
            } else {
                l = m + 1; 
            }
        }
        if(ret > queries.size()) {
            return -1; 
        }
        return ret; 
    }
};",1454828782
Ian Wong,ianwong1999,2,3616,cpp,"class Solution {
public:
    int f(int id, vector<int> nums, int dir) {
        int n = nums.size();
        while (id >= 0 && id < n) {
            if (nums[id] == 0) {
                id += dir;
                continue;
            }
            
            nums[id]--;
            
            dir *= -1;
            id += dir;
        }
        
        return *max_element(nums.begin(), nums.end()) == 0;
    }
    int countValidSelections(vector<int>& nums) {
        int res = 0;
        int n = nums.size();
        
        for (int i = 0; i < n; i++) {
            if (nums[i] != 0) continue;
            int x = f(i, nums, -1);
            int y = f(i, nums, 1);
            res += x + y;
        }
        
        return res;
    }
};",1454807745
Ian Wong,ianwong1999,2,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        vector<int> pref(n + 1);
        
        for (const auto& vec : queries) {
            int l = vec[0];
            int r = vec[1];
            
            pref[l]++;
            pref[r + 1]--;
        }
        
        for (int i = 1; i < n; i++) pref[i] += pref[i - 1];
        for (int i = 0; i < n; i++) if (pref[i] < nums[i]) return false;
        return true;
    }
};",1454809530
Ian Wong,ianwong1999,2,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        int m = queries.size();
        
        int lb = -1, ub = m + 1;
        
        auto trial = [&](int id) {
            vector<int> pref(n + 1);
        
            for (const auto& vec : queries) {
                if (id == 0) break;
                id--;
                int l = vec[0];
                int r = vec[1];
                int val = vec[2];

                pref[l] += val;
                pref[r + 1] -= val;
            }

            for (int i = 1; i < n; i++) pref[i] += pref[i - 1];
            for (int i = 0; i < n; i++) if (pref[i] < nums[i]) return false;
            return true;
        };
        
        while (ub - lb > 1) {
            int mid = (ub + lb) >> 1;
            if (trial(mid)) ub = mid;
            else lb = mid;
        }
        
        if (ub == m + 1) ub = -1;
        return ub;
        
    }
};",1454813764
Ian Wong,ianwong1999,2,3658,cpp,"class Solution {
public:
    int minDifference(vector<int>& nums) {
        vector<int> vec;
        
        int n = nums.size();
        
        for (int i = 0; i < n; i++) {
            if (nums[i] != -1) continue;
            if (i - 1 >= 0 && nums[i - 1] != -1) vec.push_back(nums[i - 1]);
            if (i + 1 < n && nums[i + 1] != -1) vec.push_back(nums[i + 1]);
        }
        
        sort(vec.begin(), vec.end());
        vec.erase(unique(vec.begin(), vec.end()), vec.end());
        
        int lb = -1, ub = (int)1e9 + 1;
        
        auto trial = [&](int tar) {
            vector<int> a = nums;
            
            if (!vec.empty()) {
                int x = min(vec[0] + tar, vec.back());
                int y = max(vec[0], vec.back() - tar);
                if (y < x) y = x;
                
                for (int i = 0; i < n; i++) {
                    if (a[i] != -1) continue;
                    int j = i;

                    while (j < n && a[j] == -1) j++;

                    int l = i - 1;
                    int r = j;
                    
                    // try x
                    {
                        bool bad = false;
                        if (l >= 0 && abs(x - a[l]) > tar) bad = true;
                        if (r < n && abs(x - a[r]) > tar) bad = true;
                        
                        if (!bad) {
                            for (int k = i; k < j; k++) {
                                a[k] = x;
                            }
                        }
                    }
                    
                    // try y
                    if (a[i] == -1) {
                        bool bad = false;
                        if (l >= 0 && abs(y - a[l]) > tar) bad = true;
                        if (r < n && abs(y - a[r]) > tar) bad = true;
                        
                        if (!bad) {
                            for (int k = i; k < j; k++) {
                                a[k] = y;
                            }
                        }
                    }
                    
                    // try x y
                    if (a[i] == -1) {
                        if (abs(x - y) > tar) return false;
                        if (l >= 0) {
                            if (abs(x - a[l]) <= tar) a[i] = x;
                            else if (abs(y - a[l]) <= tar) a[i] = y;
                            else return false;
                        } else {
                            a[i] = x;
                        }
                        
                        if (r < n) {
                            if (abs(x - a[r]) <= tar) a[r - 1] = x;
                            else if (abs(y - a[r]) <= tar) a[r - 1] = y;
                            else return false;
                        } else {
                            a[r - 1] = x;
                        }
                        
                        for (int k = i + 1; k < j - 1; k++) a[k] = a[k - 1];
                    }

                    i = j - 1;
                }
            }
            for (int i = 0; i < n; i++) {
                int l = i - 1;
                int r = i + 1;
                if (l >= 0 && abs(a[i] - a[l]) > tar) return false;
                if (r < n && abs(a[i] - a[r]) > tar) return false;
            }
            
            return true;
        };
        
        while (ub - lb > 1) {
            int mid = (ub + lb) >> 1;
            if (trial(mid)) ub = mid;
            else lb = mid;
        }
        
        return ub;
    }
};",1454847461
Superultra,Superultra,3,3616,cpp,"#include <bits/stdc++.h>
using namespace std;

#define FOR(i, x, y) for (int i = x; i < y; i++)

#define ll long long

#define pb push_back
#define all(x) x.begin(), x.end()
#define sz(x) x.size()

#define pii pair<int, int>
#define f first
#define s second
#define mp make_pair

class Solution {
public:
    int countValidSelections(vector<int>& A) {
        int n = A.size();
        int ans = 0;

        for (int i = 0; i < n; i++){
            if (A[i])
                continue;
            
            int lsm = 0;
            int rsm = 0;

            for (int j = 0; j < i; j++)
                lsm += A[j];
            for (int j = i + 1; j < n; j++)
                rsm += A[j];
            
            if (abs(lsm - rsm) == 1)
                ans++;
            if (abs(lsm - rsm) == 0)
                ans += 2;
        }
        return ans;
    }
};",1454864113
Superultra,Superultra,3,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& A, vector<vector<int>>& Q) {
        // all 0
        bool all0 = true;
        for (int i : A)
            all0 &= (i == 0);

        if (all0)
            return true;
        
        int n = A.size();

        auto chk = [&](int k){
            vector<int> psm(n + 5, 0);

            for (int i = 0; i <= k; i++){
                int l = Q[i][0];
                int r = Q[i][1];
                int v = 1;

                psm[l] += v;
                psm[r + 1] -= v;
                // cout << l << "" "" << r << endl;
            }
            for (int i = 0; i < A.size(); i++){
                if (i)
                    psm[i] += psm[i - 1];
                // cout << psm[i] << endl;
                if (A[i] > psm[i])
                    return false;
            }
            return true;
        };
        return chk((int)Q.size() - 1);
    }
};",1454857600
Superultra,Superultra,3,3643,cpp,"#include <bits/stdc++.h>
using namespace std;

#define FOR(i, x, y) for (int i = x; i < y; i++)

#define ll long long

#define pb push_back
#define all(x) x.begin(), x.end()
#define sz(x) x.size()

#define pii pair<int, int>
#define f first
#define s second
#define mp make_pair

class Solution {
public:
    int minZeroArray(vector<int>& A, vector<vector<int>>& Q) {
        // all 0
        bool all0 = true;
        for (int i : A)
            all0 &= (i == 0);

        if (all0)
            return 0;
        
        int n = A.size();

        auto chk = [&](int k){
            vector<int> psm(n + 5, 0);

            for (int i = 0; i <= k; i++){
                int l = Q[i][0];
                int r = Q[i][1];
                int v = Q[i][2];

                psm[l] += v;
                psm[r + 1] -= v;
            }
            for (int i = 0; i < A.size(); i++){
                if (i)
                    psm[i] += psm[i - 1];
                
                if (A[i] > psm[i])
                    return false;
            }
            return true;
        };
        int L = 0, H = (int)Q.size() - 1;

        if (!chk(H))
            return -1;
        while (L < H){
            int M = (L + H) / 2;
            chk(M) ? H = M : L = M + 1;
        }
        return L + 1;
    }
};",1454853782
Superultra,Superultra,3,3658,cpp,"#include <bits/stdc++.h>
using namespace std;

#define FOR(i, x, y) for (int i = x; i < y; i++)

#define ll long long

#define pb push_back
#define all(x) x.begin(), x.end()
#define sz(x) x.size()

#define pii pair<int, int>
#define f first
#define s second
#define mp make_pair

class Solution {
public:
    int minDifference(vector<int>& A) {
        int n = A.size();

        // Everything -1 case
        bool allbad = true;
        for (int i : A)
            allbad &= (i == -1);
        if (allbad)
            return 0;
        
        int mx = 0;
        for (int i = 1; i < n; i++)
            if (A[i] != -1 and A[i - 1] != -1)
                mx = max(mx, abs(A[i] - A[i - 1]));
        
        auto chk1 = [&](int dif){
            // here we have constraint that |x-y| can be > dif (-1s must be same)
            vector<pii> itv;

            for (int i = 0; i < n; i++){
                if (A[i] != -1)
                    continue;
                
                int r = i;
                while (r + 1 < n and A[r + 1] == -1)
                    r++;
                                    
                // [i, r] of -1s
                // we are forced to make everything the same

                if (i == 0){
                    itv.push_back({A[r + 1] - dif, A[r + 1] + dif});
                }
                else if (r == n - 1){
                    itv.push_back({A[i - 1] - dif, A[i - 1] + dif});
                }
                else{
                    int lp = max(A[i - 1] - dif, A[r + 1] - dif);
                    int rp = min(A[i - 1] + dif, A[r + 1] + dif);
                    itv.push_back({lp, rp});
                }

                // move to next
                i = r;
            }

            // Process intervals
            if (itv.empty())
                return true;

            // first point at minimum end
            // second at max start
            int fpoint = 2e9 + 1;
            int spoint = -1;

            for (auto &[l, r] : itv){
                fpoint = min(fpoint, r);
                spoint = max(spoint, l);
            }

            bool ok = true;
            for (auto &[l, r] : itv){
                ok &= ((fpoint >= l and fpoint <= r) or (spoint >= l and spoint <= r));
            }

            return ok;
        };





        auto chk2 = [&](int dif){
            // here we dont have constraint on |x-y| (|x-y| <= dif)
            vector<pii> itv;

            for (int i = 0; i < n; i++){
                if (A[i] != -1)
                    continue;
                
                int r = i;
                while (r + 1 < n and A[r + 1] == -1)
                    r++;
                
                // [i, r] of -1s
                // we can have different

                if (i == 0){
                    itv.push_back({A[r + 1] - dif, A[r + 1] + dif});
                }
                else if (r == n - 1){
                    itv.push_back({A[i - 1] - dif, A[i - 1] + dif});
                }
                else{
                    if (r - i + 1 == 1){
                        int lp = max(A[i - 1] - dif, A[r + 1] - dif);
                        int rp = min(A[i - 1] + dif, A[r + 1] + dif);
                        itv.push_back({lp, rp});
                    }
                    else{
                        itv.push_back({A[r + 1] - dif, A[r + 1] + dif});
                        itv.push_back({A[i - 1] - dif, A[i - 1] + dif});
                    }
                }

                // move to next
                i = r;
            }

            // Process intervals
            if (itv.empty())
                return true;

            // first point at minimum end
            // second at max start
            int fpoint = 2e9 + 1;
            int spoint = -1;

            for (auto &[l, r] : itv){
                fpoint = min(fpoint, r);
                spoint = max(spoint, l);
            }

            bool ok = true;
            for (auto &[l, r] : itv){
                ok &= ((fpoint >= l and fpoint <= r) or (spoint >= l and spoint <= r));
            }

            return ok and abs(fpoint - spoint) <= dif;
        };


        // cout << chk2(3) << endl;

        int L = mx, H = 1e9 + 1;

        while (L < H){
            int M = (L + H) / 2;
            (chk1(M) or chk2(M)) ? H = M : L = M + 1;
        }
        return L;
    }
};
",1454840985
Aryan470,Aryan470,4,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        lhs_sum = 0
        rhs_sum = sum(nums)
        ans = 0
        for x in nums:
            rhs_sum -= x
            if x == 0:
                if lhs_sum == rhs_sum:
                    ans += 2
                elif abs(lhs_sum-rhs_sum) == 1:
                    ans += 1
            lhs_sum += x
        return ans",1454807847
Aryan470,Aryan470,4,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        delta = [0] * len(nums)
        for l, r in queries:
            delta[l] += 1
            if r < len(nums)-1:
                delta[r+1] -= 1
        for i in range(1, len(delta)):
            delta[i] += delta[i-1]

        for i in range(len(delta)):
            if delta[i] < nums[i]:
                return False
        return True",1454809641
Aryan470,Aryan470,4,3643,python3,"class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        def works(k):
            delta = [0] * (len(nums) + 1)
            for l, r, v in (queries[:k]):
                delta[l] += v
                delta[r+1] -= v

            for i in range(1, len(delta)):
                delta[i] += delta[i-1]

            for i in range(len(nums)):
                if delta[i] < nums[i]:
                    return False
            return True
                
        ans = len(queries)+1
        L = 0
        R = len(queries)+1

        while L < R:
            M = (L+R)//2
            if works(M):
                # can reduce K
                R = M
                ans = min(ans, M)
            else:
                L = M+1

        if ans == len(queries)+1:
            return -1
        return ans",1454815290
Aryan470,Aryan470,4,3658,python3,"class Solution:
    def minDifference(self, nums: List[int]) -> int:
        # assume x < y
        # if a pair of numbers contains x then use x, if it contains y use y
        # if it contains neither, then if x is closer use x
        # otherwise use y
        # how to pick x/y
        # if we pick some x, y, and shift x up by one, 
        # axyb = x-a + y-x + b-y or x-a, x-x, b-x
        # track pairs of diffs
        # track any number that is adj to -1
        # cnt number of 
        # if we pick max abs diff can we check if feasible
        minus_ones = []
        for i in range(len(nums)):
            if nums[i] == -1:
                minus_ones.append(i)
        def works(delta):
            seen_diff = 0
            for i in range(1, len(nums)):
                if nums[i-1] != -1 and nums[i] != -1:
                    seen_diff = max(seen_diff, abs(nums[i]-nums[i-1]))
            if seen_diff > delta:
                return False
            if not minus_ones:
                return True
                    
            # see if we can place numbers to satisfy <= delta
            # for each -1 we can determine a range of values
            # find parition of ranges that have intersection
            ranges = []
            for i in minus_ones:
                my_range = [1, 10**9]
                if i > 0:
                    if nums[i-1] != -1:
                        # i must be greater than equal to num - delta
                        # less than equal to num + delta
                        my_range[0] = max(my_range[0], nums[i-1] - delta)
                        my_range[1] = min(my_range[1], nums[i-1] + delta)
                if i < len(nums)-1 and nums[i+1] != -1:
                    # i must be greater than equal to num - delta
                    # less than equal to num + delta
                    my_range[0] = max(my_range[0], nums[i+1] - delta)
                    my_range[1] = min(my_range[1], nums[i+1] + delta)
                ranges.append(my_range)
            # take x to be smallest rb
            # take y to be greatest lb
            x = min(r[1] for r in ranges)
            y = max(r[0] for r in ranges)

            # check to make sure that each range at least contains x or y
            for l, r in ranges:
                if not ((l <= x <= r) or (l <= y <= r)):
                    return False

            assignment = [0] * len(minus_ones)

            # check the ranges on each one
            for i, moi in enumerate(minus_ones):
                l, r = ranges[i]
                if not ((l <= x <= r)):
                    # must be y
                    assignment[i] = 1
                if not ((l <= y <= r)):
                    # must be x
                    assignment[i] = -1

            # now let's check that each pair of adj -1s works
            for moi in range(1, len(minus_ones)):
                i = minus_ones[moi-1]
                j = minus_ones[moi]
                if i != j-1:
                    continue
                # check the assignments for these
                l_assign = assignment[moi-1]
                r_assign = assignment[moi]
                if l_assign != 0 and r_assign != 0:
                    if l_assign != r_assign and abs(x-y)>delta:
                        return False
                if l_assign != 0 and r_assign == 0:
                    if abs(x-y)>delta:
                        assignment[moi] = assignment[moi-1]
            return True
        
        L = 0
        R = 10**9
        ans = 10**9

        while L < R:
            M = (L+R)//2
            if works(M):
                ans = min(ans, M)
                R = M
            else:
                L = M+1
        return ans",1454858612
LayCurse,LayCurse,5,3616,cpp,"#pragma GCC optimize(""Ofast"")
#pragma GCC optimize(""unroll-loops"")
#pragma GCC optimize(""inline"")
#include<bits/stdc++.h>
using namespace std;
#define main dummy_main
int main(){
  return 0;
}
#undef main
class Solution{
  public:
  int countValidSelections(vector<int>& A){
    int i;
    int N;
    int x;
    int y;
    int res = 0;
    N = A.size();
    for(i=(0);i<(N);i++){
      if(A[i]==0){
        int j;
        x = y = 0;
        for(j=(0);j<(i);j++){
          x += A[j];
        }
        for(j=(i+1);j<(N);j++){
          y += A[j];
        }
        if(x == y){
          res += 2;
        }
        if(abs(x-y)==1){
          res += 1;
        }
      }
    }
    return res;
  }
}
;
// cLay version 20241019-1

// --- original code ---
// #define main dummy_main
// {}
// #undef main
// 
// class Solution {
// public:
//   int countValidSelections(vector<int>& A) {
//     int N, x, y;
//     int res = 0;
//     N = A.size();
// 
//     rep(i,N) if(A[i]==0){
//       x = y = 0;
//       rep(j,i) x += A[j];
//       rep(j,i+1,N) y += A[j];
//       if(x == y) res += 2;
//       if(abs(x-y)==1) res += 1;
//     }
//     return res;
//   }
// };
",1454806915
LayCurse,LayCurse,5,3639,cpp,"#pragma GCC optimize(""Ofast"")
#pragma GCC optimize(""unroll-loops"")
#pragma GCC optimize(""inline"")
#include<bits/stdc++.h>
using namespace std;
template<class T> struct cLtraits_identity{
  using type = T;
}
;
template<class T> using cLtraits_try_make_signed =
  typename conditional<
    is_integral<T>::value,
    make_signed<T>,
    cLtraits_identity<T>
    >::type;
template <class S, class T> struct cLtraits_common_type{
  using tS = typename cLtraits_try_make_signed<S>::type;
  using tT = typename cLtraits_try_make_signed<T>::type;
  using type = typename common_type<tS,tT>::type;
}
;
void*wmem;
char memarr[96000000];
template<class S, class T> inline auto min_L(S a, T b)
-> typename cLtraits_common_type<S,T>::type{
  return (typename cLtraits_common_type<S,T>::type) a <= (typename cLtraits_common_type<S,T>::type) b ? a : b;
}
template<class S, class T> inline S chmin(S &a, T b){
  if(a>b){
    a=b;
  }
  return a;
}
template<class T> inline void walloc1d(T **arr, int x, void **mem = &wmem){
  static int skip[16] = {0, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1};
  (*mem) = (void*)( ((char*)(*mem)) + skip[((unsigned long long)(*mem)) & 15] );
  (*arr)=(T*)(*mem);
  (*mem)=((*arr)+x);
}
template<class T> inline void walloc1d(T **arr, int x1, int x2, void **mem = &wmem){
  walloc1d(arr, x2-x1, mem);
  (*arr) -= x1;
}
template<class T> struct segtree_Add_Minval{
  int N;
  int logN;
  T*mn;
  T*addval;
  void malloc(int maxN, int once = 0){
    int i;
    for(i=1;i<maxN;i*=2){
      ;
    }
    mn = new T[2*i];
    addval = new T[i];
    if(once){
      setN(maxN);
    }
  }
  void walloc(int maxN, int once = 0, void **mem = &wmem){
    int i;
    for(i=1;i<maxN;i*=2){
      ;
    }
    walloc1d(&mn, 2*i, mem);
    walloc1d(&addval, i, mem);
    if(once){
      setN(maxN);
    }
  }
  void free(void){
    delete [] mn;
    delete [] addval;
  }
  T& operator[](int i){
    return mn[N+i];
  }
  void setN(int n, int zerofill = 1, int dobuild = 1){
    int i;
    for(i=1,logN=0;i<n;i*=2,logN++){
      ;
    }
    N = i;
    if(zerofill){
      for(i=(0);i<(N);i++){
        mn[N+i] = 0;
      }
    }
    if(dobuild){
      build();
    }
  }
  void build(void){
    int i;
    for(i=N-1;i;i--){
      mn[i] =min_L(mn[2*i], mn[2*i+1]);
    }
    int myTeyldV = N;
    for(i=(1);i<(myTeyldV);i++){
      addval[i] = 0;
    }
  }
  inline void push_one(int a, int sz, int st){
    if(addval[a] != 0){
      if(sz > 1){
        addval[a*2] += addval[a];
        addval[a*2+1] += addval[a];
        mn[a*2] += addval[a];
        mn[a*2+1] += addval[a];
      }
      else{
        mn[a*2] += addval[a];
        mn[a*2+1] += addval[a];
      }
      addval[a] = 0;
      return;
    }
  }
  inline void push(int a){
    int i;
    int aa = a - N;
    int nd;
    int sz;
    int st;
    for(i=logN;i;i--){
      nd = a>>i;
      sz = 1<<(i-1);
      st = 2 * sz * (aa>>i);
      push_one(nd, sz, st);
    }
  }
  inline void build(int a){
    int sz = 1;
    int st = a - N;
    while(a > 1){
      if(a%2){
        st += sz;
      }
      a /= 2;
      sz *= 2;
      mn[a] =min_L(mn[a*2], mn[a*2+1]);
      if(addval[a] != 0){
        mn[a] += addval[a];
      }
    }
  }
  inline void add(int a, int b, T val){
    int sz = 1;
    int aa;
    int bb;
    if(a >= b){
      return;
    }
    aa = (a += N);
    bb = (b += N);
    push(a);
    push(b-1);
    if(a%2){
      mn[a] += val;
      a++;
    }
    if(b%2){
      b--;
      mn[b] += val;
    }
    a /= 2;
    b /= 2;
    while(a < b){
      sz *= 2;
      if(a%2){
        addval[a] += val;
        mn[a] += val;
        a++;
      }
      if(b%2){
        b--;
        addval[b] += val;
        mn[b] += val;
      }
      a /= 2;
      b /= 2;
    }
    build(aa);
    build(bb-1);
  }
  inline T getMinVal(int a, int b){
    T res;
    T tmp;
    int fga = 0;
    int fgb = 0;
    a += N;
    b += N;
    push(a);
    push(b-1);
    while(a < b){
      if(a%2){
        if(fga){
          res =min_L(res, mn[a]);
        }
        else{
          res = mn[a];
          fga = 1;
        }
        a++;
      }
      if(b%2){
        b--;
        if(fgb){
          tmp =min_L(mn[b], tmp);
        }
        else{
          tmp = mn[b];
          fgb = 1;
        }
      }
      a /= 2;
      b /= 2;
    }
    if(fga==1 && fgb==0){
      return res;
    }
    if(fga==0 && fgb==1){
      return tmp;
    }
    if(fga==1 && fgb==1){
      res =min_L(res, tmp);
      return res;
    }
    return res;
  }
}
;
#define main dummy_main
int main(){
  wmem = memarr;
  return 0;
}
#undef main
class Solution{
  public:
  bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries){
    int i, k;
    dummy_main();
    int N = nums.size();
    segtree_Add_Minval<int> t;
    t.walloc(N);
    t.setN(N);
    for(i=(0);i<(N);i++){
      t[i] = -nums[i];
    }
    t.build();
    for(k=(0);k<(queries.size());k++){
      int L;
      int R;
      int X;
      L = queries[k][0];
      R = queries[k][1];
      X = 1;
      t.add(L,R+1,X);
    }
    if(t.getMinVal(0,N) >= 0){
      return true;
    }
    return false;
  }
}
;
// cLay version 20241019-1

// --- original code ---
// #define main dummy_main
// {}
// #undef main
// 
// class Solution {
// public:
//   bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
//     dummy_main();
//     int N = nums.size();
//     segtree_Add_Minval<int> t;
// 
//     t.walloc(N);
//     t.setN(N);
//     rep(i,N) t[i] = -nums[i];
//     t.build();
// 
//     rep(k,queries.size()){
//       int L, R, X;
//       L = queries[k][0];
//       R = queries[k][1];
//       X = 1;
// 
//       t.add(L,R+1,X);
//     }
//     if(t.getMinVal(0,N) >= 0) return true;
// 
//     return false;
//   }
// };
",1454815207
LayCurse,LayCurse,5,3643,cpp,"#pragma GCC optimize(""Ofast"")
#pragma GCC optimize(""unroll-loops"")
#pragma GCC optimize(""inline"")
#include<bits/stdc++.h>
using namespace std;
template<class T> struct cLtraits_identity{
  using type = T;
}
;
template<class T> using cLtraits_try_make_signed =
  typename conditional<
    is_integral<T>::value,
    make_signed<T>,
    cLtraits_identity<T>
    >::type;
template <class S, class T> struct cLtraits_common_type{
  using tS = typename cLtraits_try_make_signed<S>::type;
  using tT = typename cLtraits_try_make_signed<T>::type;
  using type = typename common_type<tS,tT>::type;
}
;
void*wmem;
char memarr[96000000];
template<class S, class T> inline auto min_L(S a, T b)
-> typename cLtraits_common_type<S,T>::type{
  return (typename cLtraits_common_type<S,T>::type) a <= (typename cLtraits_common_type<S,T>::type) b ? a : b;
}
template<class S, class T> inline S chmin(S &a, T b){
  if(a>b){
    a=b;
  }
  return a;
}
template<class T> inline void walloc1d(T **arr, int x, void **mem = &wmem){
  static int skip[16] = {0, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1};
  (*mem) = (void*)( ((char*)(*mem)) + skip[((unsigned long long)(*mem)) & 15] );
  (*arr)=(T*)(*mem);
  (*mem)=((*arr)+x);
}
template<class T> inline void walloc1d(T **arr, int x1, int x2, void **mem = &wmem){
  walloc1d(arr, x2-x1, mem);
  (*arr) -= x1;
}
template<class T> struct segtree_Add_Minval{
  int N;
  int logN;
  T*mn;
  T*addval;
  void malloc(int maxN, int once = 0){
    int i;
    for(i=1;i<maxN;i*=2){
      ;
    }
    mn = new T[2*i];
    addval = new T[i];
    if(once){
      setN(maxN);
    }
  }
  void walloc(int maxN, int once = 0, void **mem = &wmem){
    int i;
    for(i=1;i<maxN;i*=2){
      ;
    }
    walloc1d(&mn, 2*i, mem);
    walloc1d(&addval, i, mem);
    if(once){
      setN(maxN);
    }
  }
  void free(void){
    delete [] mn;
    delete [] addval;
  }
  T& operator[](int i){
    return mn[N+i];
  }
  void setN(int n, int zerofill = 1, int dobuild = 1){
    int i;
    for(i=1,logN=0;i<n;i*=2,logN++){
      ;
    }
    N = i;
    if(zerofill){
      for(i=(0);i<(N);i++){
        mn[N+i] = 0;
      }
    }
    if(dobuild){
      build();
    }
  }
  void build(void){
    int i;
    for(i=N-1;i;i--){
      mn[i] =min_L(mn[2*i], mn[2*i+1]);
    }
    int myTeyldV = N;
    for(i=(1);i<(myTeyldV);i++){
      addval[i] = 0;
    }
  }
  inline void push_one(int a, int sz, int st){
    if(addval[a] != 0){
      if(sz > 1){
        addval[a*2] += addval[a];
        addval[a*2+1] += addval[a];
        mn[a*2] += addval[a];
        mn[a*2+1] += addval[a];
      }
      else{
        mn[a*2] += addval[a];
        mn[a*2+1] += addval[a];
      }
      addval[a] = 0;
      return;
    }
  }
  inline void push(int a){
    int i;
    int aa = a - N;
    int nd;
    int sz;
    int st;
    for(i=logN;i;i--){
      nd = a>>i;
      sz = 1<<(i-1);
      st = 2 * sz * (aa>>i);
      push_one(nd, sz, st);
    }
  }
  inline void build(int a){
    int sz = 1;
    int st = a - N;
    while(a > 1){
      if(a%2){
        st += sz;
      }
      a /= 2;
      sz *= 2;
      mn[a] =min_L(mn[a*2], mn[a*2+1]);
      if(addval[a] != 0){
        mn[a] += addval[a];
      }
    }
  }
  inline void add(int a, int b, T val){
    int sz = 1;
    int aa;
    int bb;
    if(a >= b){
      return;
    }
    aa = (a += N);
    bb = (b += N);
    push(a);
    push(b-1);
    if(a%2){
      mn[a] += val;
      a++;
    }
    if(b%2){
      b--;
      mn[b] += val;
    }
    a /= 2;
    b /= 2;
    while(a < b){
      sz *= 2;
      if(a%2){
        addval[a] += val;
        mn[a] += val;
        a++;
      }
      if(b%2){
        b--;
        addval[b] += val;
        mn[b] += val;
      }
      a /= 2;
      b /= 2;
    }
    build(aa);
    build(bb-1);
  }
  inline T getMinVal(int a, int b){
    T res;
    T tmp;
    int fga = 0;
    int fgb = 0;
    a += N;
    b += N;
    push(a);
    push(b-1);
    while(a < b){
      if(a%2){
        if(fga){
          res =min_L(res, mn[a]);
        }
        else{
          res = mn[a];
          fga = 1;
        }
        a++;
      }
      if(b%2){
        b--;
        if(fgb){
          tmp =min_L(mn[b], tmp);
        }
        else{
          tmp = mn[b];
          fgb = 1;
        }
      }
      a /= 2;
      b /= 2;
    }
    if(fga==1 && fgb==0){
      return res;
    }
    if(fga==0 && fgb==1){
      return tmp;
    }
    if(fga==1 && fgb==1){
      res =min_L(res, tmp);
      return res;
    }
    return res;
  }
}
;
#define main dummy_main
int main(){
  wmem = memarr;
  return 0;
}
#undef main
class Solution{
  public:
  int minZeroArray(vector<int>& nums, vector<vector<int>>& queries){
    int i, k;
    dummy_main();
    int N = nums.size();
    segtree_Add_Minval<int> t;
    t.walloc(N);
    t.setN(N);
    for(i=(0);i<(N);i++){
      t[i] = -nums[i];
    }
    t.build();
    if(t.getMinVal(0,N) >= 0){
      return 0;
    }
    for(k=(0);k<(queries.size());k++){
      int L;
      int R;
      int X;
      L = queries[k][0];
      R = queries[k][1];
      X = queries[k][2];
      t.add(L,R+1,X);
      if(t.getMinVal(0,N) >= 0){
        return k+1;
      }
    }
    return -1;
  }
}
;
// cLay version 20241019-1

// --- original code ---
// #define main dummy_main
// {}
// #undef main
// 
// class Solution {
// public:
//   int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
//     dummy_main();
//     int N = nums.size();
//     segtree_Add_Minval<int> t;
// 
//     t.walloc(N);
//     t.setN(N);
//     rep(i,N) t[i] = -nums[i];
//     t.build();
// 
//     if(t.getMinVal(0,N) >= 0) return 0;
// 
//     rep(k,queries.size()){
//       int L, R, X;
//       L = queries[k][0];
//       R = queries[k][1];
//       X = queries[k][2];
// 
//       t.add(L,R+1,X);
//       if(t.getMinVal(0,N) >= 0) return k+1;
//     }
// 
//     return -1;
//   }
// };
",1454813466
LayCurse,LayCurse,5,3658,cpp,"#pragma GCC optimize(""Ofast"")
#pragma GCC optimize(""unroll-loops"")
#pragma GCC optimize(""inline"")
#include<bits/stdc++.h>
using namespace std;
template<class T> struct cLtraits_identity{
  using type = T;
}
;
template<class T> using cLtraits_try_make_signed =
  typename conditional<
    is_integral<T>::value,
    make_signed<T>,
    cLtraits_identity<T>
    >::type;
template <class S, class T> struct cLtraits_common_type{
  using tS = typename cLtraits_try_make_signed<S>::type;
  using tT = typename cLtraits_try_make_signed<T>::type;
  using type = typename common_type<tS,tT>::type;
}
;
template<class S, class T> inline auto min_L(S a, T b)
-> typename cLtraits_common_type<S,T>::type{
  return (typename cLtraits_common_type<S,T>::type) a <= (typename cLtraits_common_type<S,T>::type) b ? a : b;
}
template<class S, class T> inline auto max_L(S a, T b)
-> typename cLtraits_common_type<S,T>::type{
  return (typename cLtraits_common_type<S,T>::type) a >= (typename cLtraits_common_type<S,T>::type) b ? a : b;
}
template<class S, class T> inline S chmin(S &a, T b){
  if(a>b){
    a=b;
  }
  return a;
}
template<class S, class T> inline S chmax(S &a, T b){
  if(a<b){
    a=b;
  }
  return a;
}
#define main dummy_main
int main(){
  return 0;
}
#undef main
class Solution{
  public:
  int minDifference(vector<int>& A){
    int i;
    int j;
    int k;
    int cur = 0;
    int res;
    int ok;
    int x1;
    int x2;
    int y1;
    int y2;
    int fg;
    long long x;
    long long y;
    long long mn;
    long long mx;
    int N = A.size();
    vector<pair<int,int>> one;
    vector<pair<int,int>> two;
    for(i=(0);i<(N);i++){
      if(A[i] != -1){
        break;
      }
    }
    if(i==N){
      return 0;
    }
    for(i=(1);i<(N);i++){
      if(A[i-1] != -1 && A[i] != -1){
        chmax(cur, abs(A[i] - A[i-1]));
      }
    }
    for(i=(0);i<(N);i++){
      if(A[i] == -1){
        int c = 1;
        int x = -1;
        int y = -1;
        if(i != 0){
          x = A[i-1];
        }
        while(i+1 < N && A[i+1]==-1){
          c++;
          i++;
        }
        if(i+1 < N){
          y = A[i+1];
        }
        if(x == -1){
          x = y;
        }
        if(y == -1){
          y = x;
        }
        if(x > y){
          swap(x, y);
        }
        ;
        if(c==1){
          one.push_back({x,y});
        }
        if(c>=2){
          one.push_back({x,x});
          one.push_back({y,y});
          two.push_back({x,y});
        }
      }
    }
    long long OA9NF42T;
    long long ATMZloZo;
    long long pyHJGNQc;
    OA9NF42T = 0;
    ATMZloZo = 1000000000;
    while(OA9NF42T < ATMZloZo){
      if((OA9NF42T + ATMZloZo)%2==0){
        pyHJGNQc = (OA9NF42T + ATMZloZo) / 2;
      }
      else{
        pyHJGNQc = (OA9NF42T + ATMZloZo - 1) / 2;
      }
      ok = 1;
      x1 = y1 = 0;
      x2 = y2 = 1000000000+1;
      fg = 0;
      for(i=(0);i<(one.size());i++){
        if(ok){
          x = one[i].first;
          y = one[i].second;
          mn = y - pyHJGNQc;
          mx = x + pyHJGNQc;
          if(mn > mx){
            ok = 0;
            break;
          }
          if(max_L(x1, mn)<=min_L(x2, mx)){
            chmax(x1, mn);
            chmin(x2, mx);
          }
          else if(max_L(y1, mn)<=min_L(y2, mx)){
            chmax(y1, mn);
            chmin(y2, mx);
          }
          else{
            ok = 0;
          }
        }
      }
      for(i=(0);i<(two.size());i++){
        if(ok){
          x = two[i].first;
          y = two[i].second;
          mn = y - pyHJGNQc;
          mx = x + pyHJGNQc;
          if(max_L(x1, mn)<=min_L(x2, mx)){
            continue;
          }
          if(max_L(y1, mn)<=min_L(y2, mx)){
            continue;
          }
          fg = 1;
        }
      }
      if(fg && (x1 > y2 + pyHJGNQc || y1 > x2 + pyHJGNQc )){
        ok = 0;
      }
      if(ok){
        ATMZloZo = pyHJGNQc;
      }
      else{
        OA9NF42T = pyHJGNQc + 1;
      }
    }
    res =ATMZloZo;
    chmax(cur, res);
    return cur;
  }
}
;
// cLay version 20241019-1

// --- original code ---
// #define main dummy_main
// {}
// #undef main
// 
// class Solution {
// public:
//   int minDifference(vector<int>& A) {
//     int i, j, k;
//     int cur = 0, res, ok, x1, x2, y1, y2, fg;
//     ll x, y, mn, mx;
//     int N = A.size();
//     vector<pair<int,int>> one, two;
// 
//     rep(i,N) if(A[i] != -1) break;
//     if(i==N) return 0;
// 
//     rep(i,1,N) if(A[i-1] != -1 && A[i] != -1) cur >?= abs(A[i] - A[i-1]);
// 
//     rep(i,N) if(A[i] == -1){
//       int c = 1, x = -1, y = -1;
//       if(i != 0) x = A[i-1];
//       while(i+1 < N && A[i+1]==-1) c++, i++;
//       if(i+1 < N) y = A[i+1];
// 
//       if(x == -1) x = y;
//       if(y == -1) y = x;
//       sortE(x,y);
//       if(c==1) one.push_back({x,y});
//       if(c>=2){
//         one.push_back({x,x});
//         one.push_back({y,y});
//         two.push_back({x,y});
//       }
//     }
// 
//     res = bsearch_min[ll,d,0,1d9][
//       ok = 1;
//       x1 = y1 = 0;
//       x2 = y2 = 1d9+1;
//       fg = 0;
// 
//       rep(i,one.size()) if(ok){
//         x = one[i].first;
//         y = one[i].second;
//         mn = y - d;
//         mx = x + d;
//         if(mn > mx) ok = 0, break;
// 
//         if(max(x1,mn) <= min(x2,mx)){
//           x1 >?= mn;
//           x2 <?= mx;
//         } else if(max(y1,mn) <= min(y2,mx)){
//           y1 >?= mn;
//           y2 <?= mx;
//         } else {
//           ok = 0;
//         }
//       }
//       rep(i,two.size()) if(ok){
//         x = two[i].first;
//         y = two[i].second;
// 
//         mn = y - d;
//         mx = x + d;
//         if(max(x1,mn) <= min(x2,mx)) continue;
//         if(max(y1,mn) <= min(y2,mx)) continue;
// 
//         fg = 1;
//       }
// 
//       if(fg && (x1 > y2 + d || y1 > x2 + d )) ok = 0;
//     ](ok);
// 
//     cur >?= res;
//     return cur;
//   }
// };
",1454875764
Chinedu,profchi,9,3616,java,"class Solution {
    public int countValidSelections(int[] nums) {
        
        int count = 0;
        
        for (int i = 0; i < nums.length; ++i) {
            if (nums[i] != 0)
                continue;
            
            if (isValid(nums, i, 1) ) {
                ++count;   
            }
            
            if (isValid(nums, i, -1) ) {
                ++count;   
            }
        }
        
        return count;
    }
    
    
    private boolean isValid(int [] nums, int val, int dir) {
        
        int [] arr = new int [nums.length];
        
        for (int i = 0; i < nums.length; ++i) {
            arr[i] = nums[i];
        }
        
        int idx = val + dir;
        
        while (idx < nums.length && idx >= 0) {
            
            if (arr[idx] > 0) {
                --arr[idx];
                dir *= -1;
            }
            
            idx += dir;
        }
        
        
        for (int num : arr) {
            if (num != 0)
                return false; 
        }
        
        return true;
    }
}",1454809068
Chinedu,profchi,9,3639,java,"class Solution {
    public boolean isZeroArray(int[] nums, int[][] queries) {
        
        int [] added = new int [nums.length];
        
        int l, r;
        
        for (int [] query : queries) {
            l = query[0];
            r = query[1];
            
            added[l]++;
            
            if (r + 1 < nums.length) {
                added[r + 1]--;
            }
        }
        
        
        int sum = 0;
        
        for (int i = 0; i < nums.length; ++i) {
            sum += added[i];
            added[i] = sum;
        }
        
        
        for (int i = 0; i < nums.length; ++i) {
            
            if (nums[i] > added[i])
                return false;
        }
        
        return true;
    }
}",1454812534
Chinedu,profchi,9,3643,java,"class Solution {
    public int minZeroArray(int[] nums, int[][] queries) {
        
        int max = queries.length;
        
        if (!works(nums, queries, max))
            return -1;
        
        int min = -1;
        int mid;
        
        
        while (max - min > 1) {
            mid = (max + min) / 2;
            
            if (works(nums, queries, mid)) {
                max = mid;
            } else {
                min = mid;
            }
        }
        
        return max;
    }
    
    
    public boolean works(int [] nums, int [][] queries, int k) {
        
        int [] added = new int [nums.length];
        
        int l, r;
        
        int [] query;
        for (int i = 0; i < k && i < queries.length; ++i) {
            query = queries[i];
            
            l = query[0];
            r = query[1];
            
            added[l] += query[2];
            
            if (r + 1 < nums.length) {
                added[r + 1] -= query[2];
            }
        }
        
        
        int sum = 0;
        
        for (int i = 0; i < nums.length; ++i) {
            sum += added[i];
            added[i] = sum;
        }
        
        
        for (int i = 0; i < nums.length; ++i) {
            
            if (nums[i] > added[i])
                return false;
        }
        
        return true;
    }
}",1454820099
Chinedu,profchi,9,3658,java,"class Solution {
    public int minDifference(int[] nums) {
        
        
        long min = -1;
        
        long max = 1_000_000_001;
        
        List<int []> list = new ArrayList<>();
        
        for (int i = 0; i < nums.length; ++i) {
            if (nums[i] == -1)
                continue;
            
            list.add(new int [] {nums[i], i});
        }
        
        long mid;
        
        // max = 12;
        // min = 10;
        
        while (max - min > 1) {
            mid = (max + min) / 2;
            
            if (works(nums, list, mid)) {
                max = mid;
            } else {
                min = mid;
            }
        }
        
        return (int ) max;
    }
    
    
    private boolean works(int [] arr, List<int []> list, long maxDiff) {
        
        for (int i = 1; i < arr.length; ++i) {
            if (arr[i] > 0 && arr[i - 1] > 0 && Math.abs(arr[i] - arr[i - 1]) > maxDiff)
                return false;
        }
        
        long [] first = null;
        long [] second = null;
        
        
        List<long []> ranges = new ArrayList<>();
        
        
        for (int i = 0; i < arr.length; ++i) {
            if (arr[i] == -1)
                continue;
            
            if ( (i - 1 >= 0 && arr[i - 1] == -1) || (i + 1 < arr.length && arr[i + 1] == -1) ) {
                ranges.add(new long [] {arr[i] - maxDiff, arr[i] + maxDiff});
            }
        }
        
        
        Collections.sort(ranges, (a, b) -> Long.compare(a[0], b[0]));
        
        
        long max1 = Long.MAX_VALUE;
        
        
        for (long [] range : ranges) {
            if (range[1] < max1) {
                max1 = range[1];
            }
        }
        
        Collections.sort(ranges, (a, b) -> Long.compare(b[1], a[1]));
        
        long max2 = 0;
        
        for (long [] range : ranges) {
            if (range[0] > max2) {
                max2 = range[0];
            }
        }
        
        int count;
        
        for (long [] range : ranges) {
            count = 0;
            
            if (max1 >= range[0] && max1 <= range[1])
                ++count;
            
            if (max2 >= range[0] && max2 <= range[1])
                ++count;
            
            if (count == 0)
                return false;
        }
        
        
        // System.out.println(max1 + "" "" + max2);
        
        int cur, prev, space;
        
        for (int i = 1; i < list.size(); ++i) {
            
            cur = list.get(i)[0];
            prev = list.get(i - 1)[0];
            
            space = list.get(i)[1] - list.get(i - 1)[1] - 1;
            
            if (space == 0)
                continue;
            
            
            if (Math.abs(max1 - cur) <= maxDiff && Math.abs(max1 - prev) <= maxDiff )
                continue;
            
            if (Math.abs(max2 - cur) <= maxDiff && Math.abs(max2 - prev) <= maxDiff )
                continue;
            
           //  System.out.println(max1 + "" "" + max2 + "" "" + cur + "" "" + prev + "" "" + space);
            
            if (space == 1 || Math.abs(max1 - max2) > maxDiff)
                return false;
        }
        
        return true;
    }
}",1454879702
Paul Chen,876pol,10,3616,cpp,"#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

using namespace std;
using namespace __gnu_pbds;

using ll = long long;
using pll = pair<ll, ll>;
template <class T>
using vec = vector<T>;
template <class T>
using indexed_set =
    tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

#define FOR(i, s, e) for (ll i = (ll)s; i < (ll)e; i++)
#define CFOR(i, s, e) for (ll i = (ll)s; i <= (ll)e; i++)
#define TRAV(a, c) for (const auto &a : c)
#define dbg(x) cerr << ""ln"" << __LINE__ << "": "" << #x << "" = "" << x << endl

template <class K, class V>
ostream &operator<<(ostream &out, const pair<K, V> &obj) {
    return out << ""("" << obj.first << "", "" << obj.second << "")"";
}

template <class T, class = decay_t<decltype(*begin(declval<T>()))>,
          class = enable_if_t<!is_same<T, string>::value>>
ostream &operator<<(ostream &out, const T &obj) {
    out << '[';
    for (auto it = obj.begin(); it != obj.end(); it++)
        out << &"", ""[2 * (it == obj.begin())] << *it;
    return out << ']';
}

class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int sum = accumulate(nums.begin(), nums.end(), 0ll);
        int n = nums.size();
        int curr = 0;
        int ans = 0;
        FOR(i, 0, n) {
            curr += nums[i];
            if (curr * 2 == sum && nums[i] == 0) {
                ans += 2;
            } else if (abs(curr * 2 - sum) == 1 && nums[i] == 0) {
                ans += 1; 
            }
        }
        return ans;
    }
};",1454808501
Paul Chen,876pol,10,3639,cpp,"#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

using namespace std;
using namespace __gnu_pbds;

using ll = long long;
using pll = pair<ll, ll>;
template <class T>
using vec = vector<T>;
template <class T>
using indexed_set =
    tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

#define FOR(i, s, e) for (ll i = (ll)s; i < (ll)e; i++)
#define CFOR(i, s, e) for (ll i = (ll)s; i <= (ll)e; i++)
#define TRAV(a, c) for (const auto &a : c)
#define dbg(x) cerr << ""ln"" << __LINE__ << "": "" << #x << "" = "" << x << endl

template <class K, class V>
ostream &operator<<(ostream &out, const pair<K, V> &obj) {
    return out << ""("" << obj.first << "", "" << obj.second << "")"";
}

template <class T, class = decay_t<decltype(*begin(declval<T>()))>,
          class = enable_if_t<!is_same<T, string>::value>>
ostream &operator<<(ostream &out, const T &obj) {
    out << '[';
    for (auto it = obj.begin(); it != obj.end(); it++)
        out << &"", ""[2 * (it == obj.begin())] << *it;
    return out << ']';
}

class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        ll n = nums.size();
        vec<ll> diff(n + 1);
        TRAV(e, queries) {
            diff[e[0]]++;
            diff[e[1] + 1]--;
        }
        FOR(i, 0, n) diff[i + 1] += diff[i];
        FOR(i, 0, n) {
            if (nums[i] > diff[i]) return false;
        }
        return true;
    }
};",1454813989
Paul Chen,876pol,10,3643,cpp,"#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

using namespace std;
using namespace __gnu_pbds;

using ll = long long;
using pll = pair<ll, ll>;
template <class T>
using vec = vector<T>;
template <class T>
using indexed_set =
    tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

#define FOR(i, s, e) for (ll i = (ll)s; i < (ll)e; i++)
#define CFOR(i, s, e) for (ll i = (ll)s; i <= (ll)e; i++)
#define TRAV(a, c) for (const auto &a : c)
#define dbg(x) cerr << ""ln"" << __LINE__ << "": "" << #x << "" = "" << x << endl

template <class K, class V>
ostream &operator<<(ostream &out, const pair<K, V> &obj) {
    return out << ""("" << obj.first << "", "" << obj.second << "")"";
}

template <class T, class = decay_t<decltype(*begin(declval<T>()))>,
          class = enable_if_t<!is_same<T, string>::value>>
ostream &operator<<(ostream &out, const T &obj) {
    out << '[';
    for (auto it = obj.begin(); it != obj.end(); it++)
        out << &"", ""[2 * (it == obj.begin())] << *it;
    return out << ']';
}

class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        ll n = nums.size();
        function<bool(ll)> ok = [&](ll x) {
            vec<ll> diff(n + 1);
            FOR(i, 0, x) {
                auto e = queries[i];
                diff[e[0]] += e[2];
                diff[e[1] + 1] -= e[2];
            }
            FOR(i, 0, n) diff[i + 1] += diff[i];
            FOR(i, 0, n) {
                if (nums[i] > diff[i]) return false;
            }
            return true;
        };
        ll l = 0, r = queries.size(), ans = -1;
        while (l <= r) {
            ll m = (l + r) / 2;
            if (ok(m)) {
                r = m - 1;
                ans = m;
            } else {
                l = m + 1; 
            }
        }
        return ans;
    }
};",1454820507
Paul Chen,876pol,10,3658,cpp,"#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

using namespace std;
using namespace __gnu_pbds;

using ll = long long;
using pll = pair<ll, ll>;
template <class T>
using vec = vector<T>;
template <class T>
using indexed_set =
    tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

#define FOR(i, s, e) for (ll i = (ll)s; i < (ll)e; i++)
#define CFOR(i, s, e) for (ll i = (ll)s; i <= (ll)e; i++)
#define TRAV(a, c) for (const auto &a : c)
#define dbg(x) cerr << ""ln"" << __LINE__ << "": "" << #x << "" = "" << x << endl

template <class K, class V>
ostream &operator<<(ostream &out, const pair<K, V> &obj) {
    return out << ""("" << obj.first << "", "" << obj.second << "")"";
}

template <class T, class = decay_t<decltype(*begin(declval<T>()))>,
          class = enable_if_t<!is_same<T, string>::value>>
ostream &operator<<(ostream &out, const T &obj) {
    out << '[';
    for (auto it = obj.begin(); it != obj.end(); it++)
        out << &"", ""[2 * (it == obj.begin())] << *it;
    return out << ']';
}

class Solution {
public:
    int minDifference(vector<int>& nums) {
        ll n = nums.size();
        vec<ll> inds;
        FOR(i, 0, n) {
            if (nums[i] != -1) {
                inds.push_back(i);
            }
        }
        ll m = inds.size();
        if (m == 0) return 0;
        function<ll(ll)> ok1 = [&](ll x) {
            vec<pll> p;
            bool flag = false;
            FOR(i, 0, m - 1) {
                ll a = nums[inds[i]];
                ll b = nums[inds[i + 1]];
                if (a > b) swap(a, b);
                if (inds[i] + 1 == inds[i + 1]) {
                    if (abs(a - b) > x) return false;
                } else if (inds[i] + 2 == inds[i + 1]) {
                    p.push_back({b - x, a + x});
                    if (p.back().first > p.back().second) return false;
                } else {
                    flag = true; 
                    p.push_back({a - x, a + x}); 
                    p.push_back({b - x, b + x}); 
                }
            }
            if (m && inds[0] != 0) {
                ll a = nums[inds[0]];
                p.push_back({a - x, a + x}); 
            }
            if (m && inds[m - 1] != n - 1) {
                ll a = nums[inds[m - 1]];
                p.push_back({a - x, a + x}); 
            }
            ll o1 = 1e9 + 5, o2 = 0;
            TRAV(e, p) {
                o1 = min(o1, e.second);
                o2 = max(o2, e.first);
            }
            TRAV(e, p) {
                if (!((e.first <= o1 && o1 <= e.second) || (e.first <= o2 && o2 <= e.second))) {
                    return false; 
                }
            }
            if (o1 < o2 && flag && abs(o1 - o2) > x) return false;
            return true;
        };
        function<ll(ll)> ok2 = [&](ll x) {
            vec<pll> p;
            FOR(i, 0, m - 1) {
                ll a = nums[inds[i]];
                ll b = nums[inds[i + 1]];
                if (a > b) swap(a, b);
                if (inds[i] + 1 == inds[i + 1]) {
                    if (abs(a - b) > x) return false;
                } else if (inds[i] + 2 == inds[i + 1]) {
                    p.push_back({b - x, a + x});
                    if (p.back().first > p.back().second) return false;
                } else {
                    p.push_back({b - x, a + x});
                    if (p.back().first > p.back().second) return false;
                }
            }
            if (m && inds[0] != 0) {
                ll a = nums[inds[0]];
                p.push_back({a - x, a + x}); 
            }
            if (m && inds[m - 1] != n - 1) {
                ll a = nums[inds[m - 1]];
                p.push_back({a - x, a + x}); 
            }
            ll o1 = 1e9 + 5, o2 = 0;
            TRAV(e, p) {
                o1 = min(o1, e.second);
                o2 = max(o2, e.first);
            }
            TRAV(e, p) {
                if (!((e.first <= o1 && o1 <= e.second) || (e.first <= o2 && o2 <= e.second))) {
                    return false; 
                }
            }
            return true;
        };
        ll l = 0, r = 1e9 + 5, ans = 1e9 + 5;
        while (l <= r) {
            ll m = (l + r) / 2;
            if (ok1(m) || ok2(m)) {
                r = m - 1;
                ans = m;
            } else {
                l = m + 1;
            }
        }
        return ans;
    }
};",1454873559
misrx,misrx,11,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int n = nums.size();
        int count = 0;
        for (int curr = 0; curr < nums.size(); curr ++) {
            if (nums[curr] == 0) {
                for (int direction : {-1, 1}) {
                    vector<int> temp = nums;
                    int pos = curr;
                    while (pos >= 0 && pos < n) {
                        if (temp[pos] == 0) {
                            pos += direction;
                        } else if (temp[pos] > 0) {
                            temp[pos] -= 1;
                            direction = -direction;
                            pos += direction;
                        }
                    }
                    if (accumulate(temp.begin(), temp.end(), 0) == 0) count++;
                }
            }
        }
        return count;    
    }
};",1454808392
misrx,misrx,11,3639,cpp,"using ll = long long;
class Solution {
public:
    bool check(vector<int> &nums, vector<vector<int>> & queries, int k) {
        vector<ll> psa(nums.size());
        for (int i = 0; i < k; i++) {
            int l = queries[i][0];
            int r = queries[i][1];
            ll val = 1;
            psa[l] += val;
            if (r+1 < nums.size()) psa[r+1] -= val;
        }
        for (int i = 1; i < nums.size(); i++) {
            psa[i] += psa[i-1];
        }
        for (int i = 0; i < nums.size(); i++) {
            if ((ll)nums[i] > psa[i]) return false;
        }
        return true;
    }
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        return check(nums, queries, queries.size());
    }
};",1454817067
misrx,misrx,11,3643,cpp,"using ll = long long;
class Solution {
public:
    bool check(vector<int> &nums, vector<vector<int>> & queries, int k) {
        vector<ll> psa(nums.size());
        for (int i = 0; i < k; i++) {
            int l = queries[i][0];
            int r = queries[i][1];
            ll val = queries[i][2];
            psa[l] += val;
            if (r+1 < nums.size()) psa[r+1] -= val;
        }
        for (int i = 1; i < nums.size(); i++) {
            psa[i] += psa[i-1];
        }
        for (int i = 0; i < nums.size(); i++) {
            if ((ll)nums[i] > psa[i]) return false;
        }
        return true;
    }

    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int l = 0;
        int r = queries.size();
        int ans = -1;
        while (l <= r) {
            int m = (l+r)/2;
            if (check(nums, queries, m)) {
                ans = m;
                r = m-1;
            } else {
                l = m+1;
            }
        }
        return ans;
    }
};",1454815935
misrx,misrx,11,3658,cpp,"class Solution {
public:
    int minDifference(vector<int>& nums) {
        int n = nums.size();
        set<int> touch;
        int l = 0;
        for (int i = 0; i < n; i++) {
            if (nums[i] != -1) {
                if (i > 0 && nums[i-1] == -1) touch.insert(nums[i]);
                if (i < n-1 && nums[i+1] == -1) touch.insert(nums[i]);
            }
            if (i > 0 && nums[i] != -1 && nums[i-1] != -1) {
                l = max(l, abs(nums[i-1]-nums[i]));
            }
        }
        vector<int> bad(touch.begin(), touch.end());
        int r = 1e9;
        int ans = 1e9;
        while (l <= r) {
            int m = (l+r)/2;
            int x = 2e9;
            int y = -2e9;
            for (int e : bad) {
                x = min(e+m, x);
                y = max(e-m, y);
            }
            if (x >= y) {
                ans = m;
                r = m-1;
                continue;
            }
            // cout << m << "" "" << x << "" "" << y << ""\n"";
            vector<vector<int>> dp(n, vector<int>(2));
            dp[0][0] = 1;
            dp[0][1] = 1;
            for (int i = 1; i < n; i++) {
                if (nums[i] == -1) {
                    if (nums[i-1] == -1) {
                        // use x
                        dp[i][0] = dp[i-1][0];
                        dp[i][0] |= (y-x <= m) & dp[i-1][1];
                        
                        // use k
                        dp[i][1] = dp[i-1][1];
                        dp[i][1] |= (y-x <= m) & dp[i-1][0];
                    } else {
                        int lastpos = dp[i-1][0] | dp[i-1][1];
                        
                        // use x
                        dp[i][0] = lastpos & (abs(x-nums[i-1]) <= m);
                        
                        //use y
                        dp[i][1] = lastpos & (abs(y-nums[i-1]) <= m);
                    }
                } else {
                    if (nums[i-1] == -1) {
                        dp[i][0] = dp[i][1] = (dp[i-1][0] & abs(x-nums[i]) <= m) | 
                                                (dp[i-1][1] & abs(y-nums[i]) <= m);
                    } else {
                        dp[i][0] = dp[i][1] = dp[i-1][0] | dp[i-1][1];
                    }
                    
                }
            }
            if (dp[n-1][0] || dp[n-1][1]) {
                ans = m;
                r = m-1;
            } else {
                l = m+1;
            }
        }
        return ans;
    }
};",1454890285
sveng101,sveng101,12,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        #tot = sum(nums)
        #curr = 0
        #for i, num in enumerate(nums):
        #    curr += num
        #    if curr
        
        n = len(nums)
        
        def process(idx0: int, dec: bool) -> bool:
            nums2 = list(nums)
            dec2 = dec
            idx = idx0 + (-1 if dec2 else 1)
            while 0 <= idx and idx < n:
                if nums2[idx]:
                    nums2[idx] -= 1
                    dec2 = not dec2
                idx += (-1 if dec2 else 1)
            #print(idx0, dec)
            #print(nums2)
            return not any(nums2)
        res = 0
        for i, num in enumerate(nums):
            if num: continue
            res += process(i, False) + process(i, True)

        return res",1454812511
sveng101,sveng101,12,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        n = len(nums)
        delta_arr = [0] * (n + 1)
        for q in queries:
            delta_arr[q[0]] += 1
            delta_arr[q[1] + 1] -= 1
        #print(delta_arr)
        curr = 0
        for i in range(n):
            curr += delta_arr[i]
            if nums[i] > curr: return False
        return True
            ",1454819117
sveng101,sveng101,12,3643,python3,"class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        n = len(nums)
        m = len(queries)
        def canManage(k: int) -> bool:
            delta_arr = [0] * (n + 1)
            for j in range(k):
                q = queries[j]
                delta_arr[q[0]] += q[2]
                delta_arr[q[1] + 1] -= q[2]
            #print(delta_arr)
            curr = 0
            for i in range(n):
                curr += delta_arr[i]
                if nums[i] > curr: return False
            return True

        lft, rgt = 0, m + 1
        while lft < rgt:
            mid = lft + ((rgt - lft) >> 1)
            #print(n, mid)
            if canManage(mid):
                rgt = mid
            else: lft = mid + 1
        return lft if lft <= m else -1",1454831198
sveng101,sveng101,12,3658,python3,"class Solution:
    def minDifference(self, nums: List[int]) -> int:
        n = len(nums)
        lb = 0
        mx = -1
        mn = float(""inf"")
        for i in range(n - 1):
            if nums[i] == -1 or nums[i + 1] == -1:
                if nums[i] != -1: num = nums[i]
                elif nums[i + 1] != -1: num = nums[i + 1]
                else: continue
                mx = max(mx, num)
                mn = min(mn, num)
                continue
            lb = max(lb, abs(nums[i + 1] - nums[i]))
        if mx < mn: return lb
        #print(mn, mx)
        #print(lb)
        missing_rngs = []
        rng = [float(""inf""), -float(""inf"")]
        for i, num in enumerate(nums):
            if num == -1:
                if not missing_rngs or len(missing_rngs[-1]) == 2:
                    missing_rngs.append([i])
                continue
            if missing_rngs and len(missing_rngs[-1]) == 1:
                missing_rngs[-1].append(i)
            rng[0] = min(rng[0], num)
            rng[1] = max(rng[1], num)
        if missing_rngs and len(missing_rngs[-1]) == 1:
            missing_rngs[-1].append(n)
        #print(missing_rngs)
        #print(rng)
        n_missing_rngs = len(missing_rngs)
        if not n_missing_rngs: return lb
        
        def canManage(diff: int) -> bool:
            pair = (mn + diff, mx - diff)
            if pair[0] >= pair[1]: return True
            can_transition = (pair[1] - pair[0]) <= diff
            for rng in missing_rngs:
                opts = set(pair)
                if rng[0] > 0:
                    num1 = nums[rng[0] - 1]
                    opts2 = set(opts)
                    for opt in opts2:
                        if abs(num1 - opt) > diff:
                            opts.remove(opt)
                    if not opts: return False
                if rng[1] - rng[0] > 1 and can_transition:
                    opts = set(pair)
                if rng[1] < n:
                    num2 = nums[rng[1]]
                    opts2 = set(opts)
                    for opt in opts2:
                        if abs(num2 - opt) > diff:
                            opts.remove(opt)
                    if not opts: return False
            return True

        lft, rgt = lb, ((mx - mn) >> 1) + 1
        while lft < rgt:
            mid = lft + ((rgt - lft) >> 1)
            if canManage(mid):
                rgt = mid
            else: lft = mid + 1
        
        return lft",1454884652
Shayan_Jahan,Shayan_Jahan,13,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int sum = 0, n = nums.size();
        for (int i = 0; i < n; i++) {
            sum += nums[i];
        }

        int ans = 0, cur = 0;
        for (int i = 0; i < n; i++) {
            if (nums[i] > 0);
            else if (cur == sum - cur) ans += 2;
            else if (abs(sum - 2 * cur) == 1) ans++;

            if (i < n) cur += nums[i];
        }

        return ans;
    }
};",1454810800
Shayan_Jahan,Shayan_Jahan,13,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        vector<int> ps(n + 1);

        for (auto p: queries) {
            ps[p[0]]++;
            ps[p[1] + 1]--;
        }

        for (int i = 0; i < n; i++) {
            ps[i + 1] += ps[i];
            if (ps[i] < nums[i]) return false;
        }

        return true;
    }
};",1454818131
Shayan_Jahan,Shayan_Jahan,13,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size(), q = queries.size();

        int low = -1, high = q + 1;
        while (high - low > 1) {
            int mid = (low + high) / 2;

            vector <long long> ps(n + 1);

            for (int i = 0; i < mid; i++) {
                auto p = queries[i];
                ps[p[0]] += p[2];
                ps[p[1] + 1] -= p[2];
            }

            bool bad = false;
            for (int i = 0; i < n; i++) {
                ps[i + 1] += ps[i];
                if (ps[i] < nums[i]) bad = true;
            }
            if (bad) low = mid;
            else high = mid;
        }

        if (high == q + 1) high = -1;
        return high;
    }
};",1454826527
Shayan_Jahan,Shayan_Jahan,13,3658,cpp,"class Solution {
public:
    bool in(pair<int, int> p, int x) {
        return p.first <= x && x <= p.second;
    }

    pair<int, int> getPair(vector<pair<int, int>> &vec) {
        if (!vec.size()) return {1, 1};
        
        bool bad = false;
        int x = 0, y = 1e9 + 10;
        for (auto p: vec) {
            if (p.first > p.second) return {-1, -1};
            x = max(x, p.first);
            y = min(y, p.second);
        }

        // cout << '\t' << x << ' ' << y << '\n';
        
        for (auto p: vec) {
            if (!in(p, x) && !in(p, y)) return {-1, -1};
        }        

        // // cout << '\t' << x << ' ' << y << '\n';
        
        if (y >= x) return {x, x};

        return {x, y};
    }

    int minDifference(vector<int>& nums) {
        int n = nums.size();
        int low = -1, high = 1e9 + 10;

        vector<int> a = nums;

        while (high - low > 1) {
            bool bad = false;

            int mid = (low + high) / 2;
        
            for (int i = 0; i < n - 1; i++) {
                if (a[i] != -1 && a[i + 1] != -1 && abs(a[i + 1] - a[i]) > mid) {
                    bad = true;
                    break;
                }
            }

            // x - y <= mid

            bool good = false;
            vector <pair<int, int>> vec;
            for (int i = 0; i < n; i++) {
                if (a[i] != -1) continue;

                int mn = -1, mx = 1e9 + 20;
                
                if (i && a[i - 1] != -1) {
                    if (i + 1 < n && a[i + 1] != -1) {
                        mn = max(a[i - 1], a[i + 1]) - mid;
                        mx = min(a[i - 1], a[i + 1]) + mid;
                    }
                    else {
                        mn = a[i - 1] - mid;
                        mx = a[i - 1] + mid;
                    }
                }
                else if (i + 1 < n && a[i + 1] != -1) {
                    mn = a[i + 1] - mid;
                    mx = a[i + 1] + mid;
                }

                vec.push_back({mn, mx});
            }

            // for (auto p: vec) cout << p.first << ' ' << p.second << '\n';
            
            pair<int, int> p = getPair(vec);

            // cout << p.first << ' ' << p.second << '\n';
        
            if (p.first != -1 && abs(p.second - p.first) <= mid) {
                good = true;
            }

            // x - y > mid

            vec.clear();
        
            int lst = -1;
            for (int i = 0; i < n; i++) {
                if (a[i] != -1) {
                    lst = a[i];
                    continue;
                }
                if (i + 1 < n && a[i + 1] == -1) continue;

                // cout << ' ' << i << ' ' << lst << '\n';
                
                int mn = -1, mx = 1e9 + 20;
                
                if (lst != -1) {
                    if (i + 1 < n) {
                        mn = max(lst, a[i + 1]) - mid;
                        mx = min(lst, a[i + 1]) + mid;
                    }
                    else {
                        mn = lst - mid;
                        mx = lst + mid;
                    }
                }
                else if (i + 1 < n){
                    mn = a[i + 1] - mid;
                    mx = a[i + 1] + mid;
                }

                vec.push_back({mn, mx});
            }

            p = getPair(vec);

            // for (auto p: vec) cout << p.first << ' ' << p.second << '\n';
            
            // cout << p.first << ' ' << p.second << '\n';
            
            if (p.first != -1) {
                good = true;
            }

            if (bad || !good) low = mid;
            else high = mid;
        }
        return high;
    }
};",1454885315
lukewu28,lukewu28,14,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        a = sum(nums)
        re = 0
        cur = 0
        for i in nums:
            if(i == 0):
                if(cur + cur == a): re+= 2
                elif(cur + cur == a - 1 or cur + cur == a + 1): re += 1
            else: cur += i

        return re;",1454806498
lukewu28,lukewu28,14,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        vector<int> g(n + 1, 0);
        for(auto x: queries){
            g[x[0]]++;
            g[x[1] + 1]--;
        }
        for(int i = 1; i <= n; i++) g[i] += g[i - 1];

        for(int i = 0; i < n; i++){
            if(g[i] < nums[i]) return false; 
        }
        return true;
    }
};",1454808254
lukewu28,lukewu28,14,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int l = 0, r = queries.size();
        long long n = nums.size();
        while(l < r){
            int m = (l + r) / 2;
            vector<long long> g(n + 1, 0);
            for(int i = 0 ; i < m; i++){
                auto x = queries[i];
                g[x[0]] += x[2];
                g[x[1] + 1] -= x[2];
            }
            for(int i = 1; i <= n; i++) g[i] += g[i - 1];

            bool ok = 1;
            for(int i = 0; i < n; i++){
                if(g[i] < nums[i]) ok = 0; 
            }
            if(ok) r = m;
            else l = m + 1;
        }


        vector<long long> g(n + 1, 0);
        int m = l;
            for(int i = 0 ; i < m; i++){
                auto x = queries[i];
                g[x[0]] += x[2];
                g[x[1] + 1] -= x[2];
            }
            for(int i = 1; i <= n; i++) g[i] += g[i - 1];

            bool ok = 1;
            for(int i = 0; i < n; i++){
                if(g[i] < nums[i]) ok = 0; 
            }
            if(ok) r = m;
            else l = m + 1;

        if(ok) return l;
        else return -1;
    }
};",1454814540
lukewu28,lukewu28,14,3658,cpp,"class Solution {
public:
    int minDifference(vector<int>& nums) {
        int ll = 0;
        int last = -1;
        int n = nums.size();
        while(ll < n && nums[ll] == -1){
            ll++;
        }
        if(ll == n) return 0;
        vector<int> a = nums;
        vector<array<int, 3>> segs;
        vector<int> points;
        if(ll) segs.push_back({nums[ll], nums[ll], ll});

        int cnt = 0;
        int re = 0;
        int mn = 1e9 + 1, mx = 0;
        for(int i = ll; i < n; i++){
            if(a[i] == -1){
                cnt++;
            }
            else{
                if(last != -1 && cnt){
                    int cur = a[i];
                    if(last > cur) swap(last, cur);
                    segs.push_back({last, cur, cnt});
                }
                if(last != -1 && cnt == 0){
                    re = max(re, abs(a[i] - last));
                }
                cnt = 0;
                last = a[i];
            }
        }

        for(int i = 0; i < n; i++){
            bool ok = 0;
            if(a[i] != -1){
                if(i > 0 && a[i - 1] == -1) ok = 1;
                if(i < n - 1 && a[i + 1] == -1) ok =1;
            }
            if(ok) points.push_back(a[i]);
        }
        
        if(a[n - 1] == -1){
            segs.push_back({last, last, cnt});
        }

        if(points.size() <= 1) return re;

        sort(points.begin(), points.end());
        
        int mid = (points[0] + points.back() + 1) / 2;
        int l = re, r = 1e9;
        int ind = lower_bound(points.begin(), points.end(), mid) - points.begin();
        if(ind == 0) return re;
        while(l < r){
            int m = (l + r) / 2;
            int lr = points[0] + m;
            int ll = points[ind - 1] - m;
            int rr = points[ind] + m;
            int rl = points.back() - m;

            if(lr < ll || rr < rl) {
                l = m + 1;
                continue;
            }

            int x = lr;
            int y = rl;

            bool ok = 1;
            for(auto s: segs){
                if(s[2] > 1){
                    int dsxa = abs(s[0] - x);
                    int dsxb = abs(s[1] - x);
                    int dsya = abs(s[0] - y);
                    int dsyb = abs(s[1] - y);
                    
                    int d = min(max(dsxa, dsxb), max(dsya, dsyb));

                    d = min(d, max(abs(x -y), max(dsxa, dsyb)));
                    if(d > m) ok = 0;
                    
                }
                else{
                    int dsxa = abs(s[0] - x);
                    int dsxb = abs(s[1] - x);
                    int dsya = abs(s[0] - y);
                    int dsyb = abs(s[1] - y);
                    
                    int d = min(max(dsxa, dsxb), max(dsya, dsyb));

                    if(d > m) ok = 0;
                }
            }

            if(ok) r = m;
            else l = m + 1;
        }
        return l;
    }
};",1454888120
Maruzensky,Maruzensky,16,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        total = sum(nums)
        
        left = 0
        answer = 0
        
        for x in nums:
            left += x
            if x == 0:
                right = total - left
                if left == right:
                    answer += 2
                elif abs(left - right) == 1:
                    answer += 1
                    
        return answer",1454807575
Maruzensky,Maruzensky,16,3639,python3,"from collections import Counter

class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        n = len(nums)
        ctr = Counter()
        
        for left, right in queries:
            ctr[left] += 1
            ctr[right + 1] -= 1
            
        psum = 0
        for i, x in enumerate(nums):
            psum += ctr[i]
            if x > psum:
                return False
            
        return True",1454810557
Maruzensky,Maruzensky,16,3643,python3,"from collections import Counter

class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        n = len(nums)
        ctr = Counter()
        
        for left, right, val in queries:
            ctr[left] += val
            ctr[right + 1] -= val
            
        psum = 0
        for i, x in enumerate(nums):
            psum += ctr[i]
            if x > psum:
                return -1
            
        ptr_min, ptr_max = 0, len(queries)
        while ptr_min != ptr_max:
            ptr = (ptr_min + ptr_max) // 2
            
            ctr = Counter()

            for left, right, val in queries[:ptr]:
                ctr[left] += val
                ctr[right + 1] -= val

            is_valid = True
            psum = 0
            for i, x in enumerate(nums):
                psum += ctr[i]
                if x > psum:
                    is_valid = False
                    break
                    
            if is_valid:
                ptr_max = ptr
            else:
                ptr_min = ptr + 1
                
        return ptr_min
",1454817316
Maruzensky,Maruzensky,16,3658,python3,"class Solution:
    def minDifference(self, nums: List[int]) -> int:
        n = len(nums)
        
        gap = 0
        has_m1, has_m2 = False, False
        for x, y in zip(nums, nums[1:]):
            if x != -1 and y != -1:
                gap = max(gap, abs(y - x))
            elif x == -1 and y == -1:
                has_m2 = True
                has_m1 = True
            else:
                has_m1 = True
                
        if not has_m1:
            return gap
        
        if max(nums) < 0:
            return 0
        
        run = 0
        n1, n2 = [], []
        for x in nums:
            if x == -1:
                run += 1
            else:
                run = 0
                
            if run <= 1:
                n1.append(x)
            if run <= 2:
                n2.append(x)
                
        # allow x-y bond
        ptr_min, ptr_max = 0, 10**9
        while ptr_min != ptr_max:
            ptr = (ptr_min + ptr_max) // 2
            need = []
            is_possible = True
            
            for i, x in enumerate(n2):
                if x == -1:
                    ask = []
                    if i != 0:
                        y = n2[i - 1]
                        if y != -1:
                            ask.append([y - ptr, y + ptr])
                    if i < len(n2) - 1:
                        z = n2[i + 1]
                        if z != -1:
                            ask.append([z - ptr, z + ptr])
                            
                    if len(ask) == 1:
                        need.append(ask[0])
                    elif len(ask) == 2:
                        i1, i2 = ask
                        left, right = max(i1[0], i2[0]), min(i1[1], i2[1])
                        
                        if left > right:
                            is_possible = False
                            break
                            
                        else:
                            need.append([left, right])
                            
            if is_possible:
                left = min(r for _, r in need)
                right = max(l for l, _ in need)
                
                if right - left > ptr:
                    is_possible = False
                else:
                    if all(l <= left <= r or l <= right <= r for l, r in need):
                        is_possible = True
                    else:
                        is_possible = False
                        
            if is_possible:
                ptr_max = ptr
            else:
                ptr_min = ptr + 1
                
        case_1 = ptr_max
        
        # disallow x-y bond
        ptr_min, ptr_max = 0, 10**9
        while ptr_min != ptr_max:
            ptr = (ptr_min + ptr_max) // 2
            need = []
            is_possible = True
            
            for i, x in enumerate(n1):
                if x == -1:
                    ask = []
                    if i != 0:
                        y = n1[i - 1]
                        if y != -1:
                            ask.append([y - ptr, y + ptr])
                    if i < len(n1) - 1:
                        z = n1[i + 1]
                        if z != -1:
                            ask.append([z - ptr, z + ptr])
                            
                    if len(ask) == 1:
                        need.append(ask[0])
                    elif len(ask) == 2:
                        i1, i2 = ask
                        left, right = max(i1[0], i2[0]), min(i1[1], i2[1])
                        
                        if left > right:
                            is_possible = False
                            break
                            
                        else:
                            need.append([left, right])
                            
            if is_possible:
                left = min(r for _, r in need)
                right = max(l for l, _ in need)
                
                if all(l <= left <= r or l <= right <= r for l, r in need):
                    is_possible = True
                else:
                    is_possible = False
                        
            if is_possible:
                ptr_max = ptr
            else:
                ptr_min = ptr + 1
                
        case_2 = ptr_max
        
        return max(min(case_1, case_2), gap)
        
        ",1454890939
uwi,uwi,18,3616,java,"	class Solution {
		public int countValidSelections(int[] nums) {
			int n = nums.length;
			int ans = 0;
			for(int i = 0;i < n;i++){
				if(nums[i] == 0){
					for(int j = -1;j <= 1;j+=2){
						int[] a = Arrays.copyOf(nums, n);
						int cur = i, dir = j;
						while(cur >= 0 && cur < n){
							if(a[cur] == 0){
								cur += dir;
							}else{
								a[cur]--;
								dir = -dir;
								cur += dir;
							}
						}
						boolean az = true;
						for(int k = 0;k < n;k++){
							if(a[k] != 0){
								az = false;
								break;
							}
						}
						if(az)ans++;
					}
				}
			}
			return ans;
		}
	}
	//
",1454807191
uwi,uwi,18,3639,java,"class Solution {
    public boolean isZeroArray(int[] nums, int[][] queries) {
        int n = nums.length;
        int[] imos = new int[n+1];
        for(int[] q : queries){
            imos[q[0]]++;
            imos[q[1]+1]--;
        }
        for(int i = 0;i < n;i++){
            imos[i+1] += imos[i];
        }
        for(int i = 0;i < n;i++){
            if(nums[i] <= imos[i]){
                
            }else{
                return false;
            }
        }
        return true;
    }
}",1454808873
uwi,uwi,18,3643,java,"	class Solution {
		public int minZeroArray(int[] nums, int[][] queries) {
			int n = nums.length;
			int low = -1, high = queries.length+1;
			while(high - low > 1){
				int h = high+low>>1;
				if(ok(nums, queries, h)){
					high = h;
				}else{
					low = h;
				}
			}
			return high > queries.length ? -1 : high;
		}

		boolean ok(int[] nums, int[][] queries, int h) {
			int n = nums.length;
			long[] imos = new long[n + 1];
			for(int i = 0;i < h;i++){
				int[] q = queries[i];
				imos[q[0]] += q[2];
				imos[q[1] + 1] -= q[2];
			}
			for (int i = 0; i < n; i++) {
				imos[i + 1] += imos[i];
			}
			for (int i = 0; i < n; i++) {
				if (nums[i] > imos[i]) return false;
			}
			return true;
		}
	}
",1454815910
uwi,uwi,18,3658,java,"	class Solution {
		public int minDifference(int[] nums) {
			List<Integer> ex = new ArrayList<>();
			for(int i = 0;i < nums.length;i++){
				if(nums[i] != -1){
					ex.add(i);
				}
			}
			if(ex.size() <= 1)return 0;
			int n = nums.length;

			// V x : |V-x|
			// V x+ V': max(|V'-x|, |V-x|)
			// V x+ y V': max(|V'-y|, |V-x|, |y-x|)


			long base = 0;
			for(int i = 0;i < ex.size()-1;i++){
				if(ex.get(i+1) - ex.get(i) == 1){
					base = Math.max(base, Math.abs(nums[ex.get(i)] - nums[ex.get(i+1)]));
				}
			}

//			tr(ok(nums, ex, 1));
			long low = base-1, high = 1000000007;
			while(high - low > 1){
				long h = high+low>>1;
				boolean res = ok(nums, ex, h);
				if(res){
					high = h;
				}else{
					low = h;
				}
			}
			return (int)high;
		}

		boolean ok(int[] nums, List<Integer> ex, long h)
		{
			int min = Integer.MAX_VALUE;
			if(ex.get(0) > 0){
				min = Math.min(min, (int)(nums[ex.get(0)] + h));
			}
			if(ex.get(ex.size()-1) < nums.length-1){
				min = Math.min(min, (int)(nums[ex.get(ex.size()-1)] + h));
			}
			for(int i = 0;i < ex.size()-1;i++){
				if(ex.get(i+1) - ex.get(i) > 1) {
					min = Math.min(min, (int) (nums[ex.get(i)] + h));
					min = Math.min(min, (int) (nums[ex.get(i+1)] + h));
				}
			}
			long x = min;
//			tr(x);

			long xmin = Long.MAX_VALUE;
			if(ex.get(0) > 0 && nums[ex.get(0)] > x + h){
				xmin = Math.min(xmin, nums[ex.get(0)] + h);
			}
			if(ex.get(ex.size()-1) < nums.length-1 && nums[ex.get(ex.size()-1)] > x + h){
				xmin = Math.min(xmin, nums[ex.get(ex.size()-1)] + h);
			}
			for(int i = 0;i < ex.size()-1;i++){
				if(ex.get(i+1) - ex.get(i) == 2){
					if(Math.abs(nums[ex.get(i)] - x) > h || Math.abs(nums[ex.get(i+1)] - x) > h) {
						xmin = Math.min(xmin, Math.min(nums[ex.get(i)], nums[ex.get(i+1)]) + h);
					}
				}else if(ex.get(i+1) - ex.get(i) > 2) {
					int l = nums[ex.get(i)], r = nums[ex.get(i+1)];
					if(Math.abs(l - x) <= h && Math.abs(r - x) <= h){
						continue;
					}else if(l <= x && r > x+h){
						xmin = Math.min(xmin, x + h);
					}else if(l > x+h && r <= x) {
						xmin = Math.min(xmin, x + h);
					}else {
						xmin = Math.min(xmin, l + h);
						xmin = Math.min(xmin, r + h);
					}
				}
			}
			if(xmin == Long.MAX_VALUE)return true;
			long y = xmin;
//			tr(y);

			if(ex.get(0) > 0){
				if(Math.abs(x - nums[ex.get(0)]) <= h || Math.abs(y - nums[ex.get(0)]) <= h){
				}else{
					return false;
				}
			}
			if(ex.get(ex.size()-1) < nums.length-1){
				if(Math.abs(x - nums[ex.get(ex.size()-1)]) <= h || Math.abs(y - nums[ex.get(ex.size()-1)]) <= h){
				}else{
					return false;
				}
			}
			for(int i = 0;i < ex.size()-1;i++){
				int l = nums[ex.get(i)], r = nums[ex.get(i+1)];
				if(ex.get(i+1) - ex.get(i) == 2){
					if(Math.abs(l - y) <= h && Math.abs(r - y) <= h) {
						continue;
					}
					if(Math.abs(l - x) <= h && Math.abs(r - x) <= h) {
						continue;
					}
					return false;
				}else if(ex.get(i+1) - ex.get(i) > 2) {
					if(Math.abs(l - y) <= h && Math.abs(r - y) <= h) {
						continue;
					}
					if(Math.abs(l - x) <= h && Math.abs(r - x) <= h) {
						continue;
					}
					if(Math.abs(l - y) <= h && Math.abs(r - x) <= h && Math.abs(y - x) <= h) {
						continue;
					}
					if(Math.abs(l - x) <= h && Math.abs(r - y) <= h && Math.abs(y - x) <= h) {
						continue;
					}
					return false;
				}
			}
			return true;
		}
	}
",1454894222
megaspazz,megaspazz,19,3616,java,"class Solution {
    public int countValidSelections(int[] nums) {
        final int N = nums.length;
        
        long[] sum = new long[N + 1];
        for (int i = 0; i < N; ++i) {
            sum[i + 1] = sum[i] + nums[i];
        }
        
        int ans = 0;
        for (int i = 0; i < N; ++i) {
            if (nums[i] != 0) {
                continue;
            }
            long diff = Math.abs(sum[N] - (sum[i] << 1));
            if (diff == 0) {
                ans += 2;
            } else if (diff == 1) {
                ++ans;
            }
        }
        return ans;
    }
    
//     private static boolean simulate(int[] nums, int dir) {
//         final int N = nums.length;
//         final int[] A = Arrays.copyOf(nums, N);
        
        
//     }
}",1454811434
megaspazz,megaspazz,19,3639,java,"class Solution {
    public boolean isZeroArray(int[] nums, int[][] queries) {
        final int N = nums.length;
        long[] delt = new long[N + 1];
        
        for (int[] q : queries) {
            final int L = q[0];
            final int R = q[1];
            --delt[L];
            ++delt[R + 1];
        }
        
        long curr = 0;
        for (int i = 0; i < N; ++i) {
            curr += delt[i];
            nums[i] += curr;
            
            if (nums[i] > 0) {
                return false;
            }
        }
        return true;
    }
}",1454816250
megaspazz,megaspazz,19,3643,java,"class Solution {
    public int minZeroArray(int[] nums, int[][] queries) {
        final int N = nums.length;
        final int Q = queries.length;
        
        int ans = BinarySearch.firstThat(0, Q + 1, new BinarySearch.IntCheck() {
            @Override
            public boolean valid(int k) {
                long[] delt = new long[N + 1];

                for (int q = 0; q < k; ++q) {
                    final int L = queries[q][0];
                    final int R = queries[q][1];
                    final int val = queries[q][2];

                    delt[L] -= val;
                    delt[R + 1] += val;
                }

                long curr = 0;
                for (int i = 0; i < N; ++i) {
                    curr += delt[i];

                    if (nums[i] + curr > 0) {
                        return false;
                    }
                }
                return true;
            }
        });
        if (ans < 0 || ans > Q) {
            return -1;
        }
        return ans;
    }
    
	/**
	 * Generic binary search to find the first or last value resulting in a matching condition.
	 */
	// EXAMPLE USAGE (find insertion index in sorted array `A`):
	/*
		int insertionIndex = BinarySearch.firstThat(0, A.length, new BinarySearch.IntCheck() {
			@Override
			public boolean valid(int index) {
				return A[index] > mid;
			}
		});
	 */
	public static class BinarySearch {
		// Finds the left-most value that satisfies the IntCheck in the range [L, R).
		// It will return R if the nothing in the range satisfies the check.
		public static int firstThat(int L, int R, IntCheck check) {
			while (L < R) {
				int M = (L >> 1) + (R >> 1) + (L & R & 1);
				if (check.valid(M)) {
					R = M;
				} else {
					L = M + 1;
				}
			}
			return L;
		}

		// Finds the right-most value that satisfies the IntCheck in the range [L, R).
		// It will return L - 1 if nothing in the range satisfies the check.
		public static int lastThat(int L, int R, IntCheck check) {
			int firstValue = firstThat(L, R, new IntCheck() {
				@Override
				public boolean valid(int value) {
					return !check.valid(value);
				}
			});
			return firstValue - 1;
		}

		// Finds the left-most value that satisfies the LongCheck in the range [L, R).
		public static long firstThat(long L, long R, LongCheck check) {
			while (L < R) {
				long M = (L >> 1) + (R >> 1) + (L & R & 1);
				if (check.valid(M)) {
					R = M;
				} else {
					L = M + 1;
				}
			}
			return L;
		}

		// Finds the right-most value that satisfies the IntCheck in the range [L, R).
		// It will return L - 1 if nothing in the range satisfies the check.
		public static long lastThat(long L, long R, LongCheck check) {
			long firstValue = firstThat(L, R, new LongCheck() {
				@Override
				public boolean valid(long value) {
					return !check.valid(value);
				}
			});
			return firstValue - 1;
		}

		public static interface LongCheck {
			public boolean valid(long value);
		}

		public static interface IntCheck {
			public boolean valid(int value);
		}
	}
}",1454823533
megaspazz,megaspazz,19,3658,java,"class Solution {
    private static final int INF = 1_000_111_000;
    
    public int minDifference(int[] nums) {
        final int N = nums.length;
        
        final Range[] A = new Range[N];
        for (int i = 0; i < N; ++i) {
            if (nums[i] == -1) {
                A[i] = Range.ALL;
            } else {
                A[i] = new Range(nums[i], nums[i]);
            }
        }
        
        long ans = BinarySearch.firstThat(0, 1_000_000_001, new BinarySearch.LongCheck() {
            @Override
            public boolean valid(long value) {
                ArrayList<Range> ranges = new ArrayList<>();
                for (int i = 0; i < N; ++i) {
                    if (nums[i] != -1) {
                        continue;
                    }
                    
                    Range left = get(A, i - 1);
                    Range right = get(A, i + 1);
                    if (left == Range.ALL && right == Range.ALL) {
                        continue;
                    }
                    
                    Range r = Range.merge(left.extend(value), right.extend(value));
                    if (!r.isValid()) {
                        // System.out.format(""value = %d, failed at i = %d, with r = %s%n"", value, i, r);
                        return false;
                    }
                    ranges.add(r);
                }
                
                // System.out.format(""value = %d, ranges = %s%n"", value, ranges);
                
                // if (ranges.isEmpty()) {
                //     return true;
                // }
                
                Range[] B = ranges.toArray(new Range[0]);
                
                Arrays.sort(B, new Comparator<Range>() {
                    @Override
                    public int compare(Range a, Range b) {
                        return Long.compare(a.L, b.L);
                    }
                });
                
                long xLo = get(B, 0).R;
                for (int i = 1; i < B.length; ++i) {
                    if (B[i].L > xLo) {
                        break;
                    }
                    xLo = Math.min(xLo, B[i].R);
                }
                
                Arrays.sort(B, new Comparator<Range>() {
                    @Override
                    public int compare(Range a, Range b) {
                        return Long.compare(b.R, b.R);
                    }
                });
                
                long xHi = get(B, 0).L;
                for (int i = 1; i < B.length; ++i) {
                    if (B[i].R < xHi) {
                        break;
                    }
                    xHi = Math.max(xHi, B[i].L);
                }
                
                boolean[] withOrig = new boolean[N];
                boolean[] withXLo = new boolean[N];
                boolean[] withXHi = new boolean[N];
                if (A[0] == Range.ALL) {
                    withXLo[0] = true;
                    withXHi[0] = true;
                } else {
                    withOrig[0] = true;
                }
                for (int i = 1; i < N; ++i) {
                    if (A[i] == Range.ALL) {
                        if (withOrig[i - 1] && Math.abs(xLo - nums[i - 1]) <= value) {
                            withXLo[i] = true;
                        } else if (withXLo[i - 1]) {
                            withXLo[i] = true;
                        } else if (withXHi[i - 1] && Math.abs(xLo - xHi) <= value) {
                            withXLo[i] = true;
                        }
                        
                        if (withOrig[i - 1] && Math.abs(xHi - nums[i - 1]) <= value) {
                            withXHi[i] = true;
                        } else if (withXHi[i - 1]) {
                            withXHi[i] = true;
                        } else if (withXLo[i - 1] && Math.abs(xHi - xLo) <= value) {
                            withXHi[i] = true;
                        }
                    } else {
                        if (withOrig[i - 1] && Math.abs(nums[i] - nums[i - 1]) <= value) {
                            withOrig[i] = true;
                        } else if (withXLo[i - 1] && Math.abs(nums[i] - xLo) <= value) {
                            withOrig[i] = true;
                        } else if (withXHi[i - 1] && Math.abs(nums[i] - xHi) <= value) {
                            withOrig[i] = true;
                        }
                    }
                }
                return withXLo[N - 1] || withXHi[N - 1] || withOrig[N - 1];
                
//                 boolean hasDouble = false;
//                 for (int i = 1; i < N; ++i) {
//                     if (A[i] == Ranges.INF && A[i - 1] == Ranges.INF) {
//                         hasDouble = true;
//                         break;
//                     }
//                 }
                
//                 for (int i = 0; i < N; ++i) {
//                     if (A[i] != Ranges.INF) {
                        
//                     }
//                 }
                
//                 if (hasDouble) {
                    
//                 }
                
//                 return false;
            }
        });
        return (int) ans;
    }
    
    private static Range get(Range[] A, int i) {
        if (i < 0 || i >= A.length) {
            return Range.ALL;
        }
        return A[i];
    }
    
    private static record Range(long L, long R) {
        public static final Range ALL = new Range(-INF, INF);
        
        public boolean isValid() {
            return L <= R;
        }
        
        public Range extend(long amount) {
            return new Range(L - amount, R + amount);
        }
        
        public static Range merge(Range a, Range b) {
            return new Range(Math.max(a.L, b.L), Math.min(a.R, b.R));
        }
    }
    
	/**
	 * Generic binary search to find the first or last value resulting in a matching condition.
	 */
	// EXAMPLE USAGE (find insertion index in sorted array `A`):
	/*
		int insertionIndex = BinarySearch.firstThat(0, A.length, new BinarySearch.IntCheck() {
			@Override
			public boolean valid(int index) {
				return A[index] > mid;
			}
		});
	 */
	public static class BinarySearch {
		// Finds the left-most value that satisfies the IntCheck in the range [L, R).
		// It will return R if the nothing in the range satisfies the check.
		public static int firstThat(int L, int R, IntCheck check) {
			while (L < R) {
				int M = (L >> 1) + (R >> 1) + (L & R & 1);
				if (check.valid(M)) {
					R = M;
				} else {
					L = M + 1;
				}
			}
			return L;
		}

		// Finds the right-most value that satisfies the IntCheck in the range [L, R).
		// It will return L - 1 if nothing in the range satisfies the check.
		public static int lastThat(int L, int R, IntCheck check) {
			int firstValue = firstThat(L, R, new IntCheck() {
				@Override
				public boolean valid(int value) {
					return !check.valid(value);
				}
			});
			return firstValue - 1;
		}

		// Finds the left-most value that satisfies the LongCheck in the range [L, R).
		public static long firstThat(long L, long R, LongCheck check) {
			while (L < R) {
				long M = (L >> 1) + (R >> 1) + (L & R & 1);
				if (check.valid(M)) {
					R = M;
				} else {
					L = M + 1;
				}
			}
			return L;
		}

		// Finds the right-most value that satisfies the IntCheck in the range [L, R).
		// It will return L - 1 if nothing in the range satisfies the check.
		public static long lastThat(long L, long R, LongCheck check) {
			long firstValue = firstThat(L, R, new LongCheck() {
				@Override
				public boolean valid(long value) {
					return !check.valid(value);
				}
			});
			return firstValue - 1;
		}

		public static interface LongCheck {
			public boolean valid(long value);
		}

		public static interface IntCheck {
			public boolean valid(int value);
		}
	}
}",1454887650
Ashwanth K,ashwanthkannan,21,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        
        int tot = 0;
        int n = nums.size();
        
        
        for(int x : nums) tot += x;
        
        
        int s1 = 0 , s2 = tot;
        int ans = 0;
        
        for(int i  =0 ; i < n ; i ++)
        {
            s1 += nums[i];
            s2 -= nums[i];
            
            if(nums[i] == 0)
            {
                if(s1 == s2 || s2 == s1 + 1) ans++;
                if(s1 == s2 || s1 == s2 + 1) ans++;
            }
        }
            
        
        return ans;
        
    }
};",1454888364
Ashwanth K,ashwanthkannan,21,3639,cpp,"#define ll long long
		
struct node
{
	ll add;
	ll maxi;
};
 
 
struct segtree
{
	int size;
	vector<struct node> operations;
 
	struct node defval = {0ll , 0ll};
		
 
	void init(int n)
	{
		size = 1;
		while(size < n) size*=2;
		operations.assign(2*size , defval);
	}

 	
 	struct node merge(struct node x ,struct node y)
 	{
 		struct node mergenode;
 		mergenode.maxi = max(x.maxi , y.maxi);
 		mergenode.add = 0;
 		return mergenode;
 	}

	struct node apply_operation(struct node x , struct node y)
	{
		struct node res = x;
		// y is parent , res is child
		res.add += y.add;
		return res;
	}
 
	void propagation(int x , int lx , int rx)
	{
		if(rx - lx == 1) 
		{
			// relax all lazy operations
			operations[x].maxi += operations[x].add;
			operations[x].add = 0;

			return;
		}
		else
		{
			operations[2*x+1] = apply_operation(operations[2*x+1] , operations[x]);
			operations[2*x+2] = apply_operation(operations[2*x+2] , operations[x]);
			
			// relax all lazy operations
			operations[x].maxi += operations[x].add;
			operations[x].add = 0;

		}
	}
 
	
 
	void range_update(int l , int r ,ll v, int x , int lx , int rx)
	{
		if(lx >= r || l >= rx) return ;
		propagation(x , lx , rx);
 
		if(l <= lx && r >= rx)
		{
			operations[x].add += v;
			propagation(x , lx , rx);
			return;
		}
 
		int m = (lx + rx)/2;
		range_update(l , r , v , 2*x+1 , lx , m);
		range_update(l , r , v , 2*x+2 , m , rx);
 
		propagation(2*x+1 , lx , m);
		propagation(2*x+2 , m , rx);

		operations[x] = merge(operations[2*x+1] , operations[2*x+2]);
 
	}
	void range_update(int l , int r , ll v)
	{
		range_update(l , r  , v, 0 , 0 , size);
	}
 
	struct node range_calc(int l , int r , int x , int lx , int rx)
	{
		propagation(x , lx , rx);
		if(lx >= r || l >= rx) return defval;
 
		if(l <= lx && r >= rx)
		{
			return operations[x];
		}
 
		int m = (lx + rx)/2;
		// calculate

		propagation(2*x+1 , lx , m);
		propagation(2*x+2 , m , rx);

		operations[x] = merge(operations[2*x+1] , operations[2*x+2]);
		return merge(range_calc(l , r , 2*x+1 , lx , m) , range_calc(l , r , 2*x+2 , m , rx));
	}
 
	struct node range_calc(int l , int r)
	{
		return range_calc(l , r , 0 , 0 , size);
	}
};


class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        segtree god;
        god.init(n);
        
        int q = queries.size();
        
        for(int i = 0 ; i < n ; i ++)
        {
            god.range_update(i , i+1 , nums[i]);
        }
        
        if(god.range_calc(0 , n).maxi <= 0)
            {
                return true;
            }
        
        for(int i = 0 ; i < q ; i ++)
        {
            int lx = queries[i][0];
            int rx = queries[i][1];  
            
            god.range_update(lx , rx+1 , -1);
            if(god.range_calc(0 , n).maxi <= 0)
            {
                return true;
            }
            
            
//             for(int i = 0 ; i < n ; i ++)
//             {
//                 cout << god.range_calc(i,i+1).maxi << "" "";
//             }
//             cout << endl;
        }
        
        return false;
    }
};",1454814573
Ashwanth K,ashwanthkannan,21,3643,cpp,"#define ll long long
		
struct node
{
	ll add;
	ll maxi;
};
 
 
struct segtree
{
	int size;
	vector<struct node> operations;
 
	struct node defval = {0ll , 0ll};
		
 
	void init(int n)
	{
		size = 1;
		while(size < n) size*=2;
		operations.assign(2*size , defval);
	}

 	
 	struct node merge(struct node x ,struct node y)
 	{
 		struct node mergenode;
 		mergenode.maxi = max(x.maxi , y.maxi);
 		mergenode.add = 0;
 		return mergenode;
 	}

	struct node apply_operation(struct node x , struct node y)
	{
		struct node res = x;
		// y is parent , res is child
		res.add += y.add;
		return res;
	}
 
	void propagation(int x , int lx , int rx)
	{
		if(rx - lx == 1) 
		{
			// relax all lazy operations
			operations[x].maxi += operations[x].add;
			operations[x].add = 0;

			return;
		}
		else
		{
			operations[2*x+1] = apply_operation(operations[2*x+1] , operations[x]);
			operations[2*x+2] = apply_operation(operations[2*x+2] , operations[x]);
			
			// relax all lazy operations
			operations[x].maxi += operations[x].add;
			operations[x].add = 0;

		}
	}
 
	
 
	void range_update(int l , int r ,ll v, int x , int lx , int rx)
	{
		if(lx >= r || l >= rx) return ;
		propagation(x , lx , rx);
 
		if(l <= lx && r >= rx)
		{
			operations[x].add += v;
			propagation(x , lx , rx);
			return;
		}
 
		int m = (lx + rx)/2;
		range_update(l , r , v , 2*x+1 , lx , m);
		range_update(l , r , v , 2*x+2 , m , rx);
 
		propagation(2*x+1 , lx , m);
		propagation(2*x+2 , m , rx);

		operations[x] = merge(operations[2*x+1] , operations[2*x+2]);
 
	}
	void range_update(int l , int r , ll v)
	{
		range_update(l , r  , v, 0 , 0 , size);
	}
 
	struct node range_calc(int l , int r , int x , int lx , int rx)
	{
		propagation(x , lx , rx);
		if(lx >= r || l >= rx) return defval;
 
		if(l <= lx && r >= rx)
		{
			return operations[x];
		}
 
		int m = (lx + rx)/2;
		// calculate

		propagation(2*x+1 , lx , m);
		propagation(2*x+2 , m , rx);

		operations[x] = merge(operations[2*x+1] , operations[2*x+2]);
		return merge(range_calc(l , r , 2*x+1 , lx , m) , range_calc(l , r , 2*x+2 , m , rx));
	}
 
	struct node range_calc(int l , int r)
	{
		return range_calc(l , r , 0 , 0 , size);
	}
};


class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        
        
        
        int n = nums.size();
        segtree god;
        god.init(n);
        
        int q = queries.size();
        
        for(int i = 0 ; i < n ; i ++)
        {
            god.range_update(i , i+1 , nums[i]);
        }
        
        if(god.range_calc(0 , n).maxi <= 0)
            {
                return 0;
            }
        
        for(int i = 0 ; i < q ; i ++)
        {
            int lx = queries[i][0];
            int rx = queries[i][1];
            int v = queries[i][2];    
            
            god.range_update(lx , rx+1 , -v);
            if(god.range_calc(0 , n).maxi <= 0)
            {
                return i+1;
            }
            
            
//             for(int i = 0 ; i < n ; i ++)
//             {
//                 cout << god.range_calc(i,i+1).maxi << "" "";
//             }
//             cout << endl;
        }
        
        return -1;
    }
};",1454812287
Ashwanth K,ashwanthkannan,21,3658,cpp,"#define  ll long long
#define inf 1e18
#define pll pair<long long,long long>

class Solution {
public:
    
    int n;
    vector<int> arr;
    vector<pll> chk;
    
    bool check(ll mid)
    {
        vector<pll> intv1;
        vector<pll> intv2;
        
        for(int i = 0 ; i < n ; i ++)
        {
            if(arr[i] == -1)
            {
                pll cur = {-inf,inf};
                bool ok = false;
                
                if(i-1 >= 0 && arr[i-1]!=-1)
                {
                    ok = true;
                    pll temp = {arr[i-1]-mid , arr[i-1]+mid};
                    cur.first = max(cur.first , temp.first);
                    cur.second = min(cur.second , temp.second);
                }
                if(i+1 < n && arr[i+1]!=-1)
                {
                    ok = true;
                    pll temp = {arr[i+1]-mid , arr[i+1]+mid};
                    cur.first = max(cur.first , temp.first);
                    cur.second = min(cur.second , temp.second);
                }
                
                if(ok)
                {
                    if(cur.first > cur.second) return false;
                    intv1.push_back({cur.first , cur.second});
                    intv2.push_back({cur.second , cur.first});
                }
            }
        }
        
        
        sort(intv1.begin() , intv1.end());
        sort(intv2.begin() , intv2.end());
        
        if(intv1.size() == 0) return true;
        
        ll x = intv2[0].first;
        ll y = intv1.back().first;
        
        if(x >= y)
        {
            return true;
        }
        
        
        for(auto cur : intv1)
        {
            if(cur.first <= x && x <= cur.second)
            {
                
            }
            else if(cur.first <= y && y <= cur.second)
            {
                
            }
            else
            {
                return false;
            }
        }
        
      //  cout << mid << "" "" << x << "" "" << y << endl;
        
        for(auto cur : chk)
        {
            bool lftx = abs(cur.first  - x) <= mid;
            bool lfty = abs(cur.first  - y) <= mid;
            bool rgtx = abs(cur.second  - x) <= mid;
            bool rgty = abs(cur.second  - y) <= mid;
            
            if(lftx && rgtx)
            {
                
            }
            else if(lfty && rgty)
            {
                
            }
            else
            {
                if(abs(x - y) <= mid)
                {
                    
                }
                else
                {
                    return false;
                }
            }
            
        }
        
        return true;
    }
    
    int minDifference(vector<int>& nums) {
        
        n = nums.size();
        arr = nums;
        chk.clear();
        
        ll low = 0 , high = 1e12;
        
        for(int i = 1 ; i < n ; i ++)
        {
            if(nums[i] != -1 && nums[i-1] != -1)
            {
                low = max(low , 1ll*abs(nums[i] - nums[i-1]));
            }
        }
        
        
        vector<pll> temp;
        ll st = -1,  ed = -1;
        
        for(int i = 0 ; i < n ; i ++)
        {
            if(nums[i] == -1)
            {
                if(st == -1)
                    st = i;
                ed = i;
            }
            else
            {
                if(st != -1 && ed != -1)
                {
                    temp.push_back({st , ed});
                    st = -1;
                    ed = -1;
                }
            }
        }
        
        if(st != -1 && ed != -1)
        {
            temp.push_back({st , ed});
        }
        
        
        for(auto kk : temp)
        {
           // cout << kk.first << "" "" << kk.second << endl;
            int lx = kk.first;
            int rx = kk.second;
            
            if(lx >= 1 && rx <= n-2)
            {
                if(rx - lx + 1 >= 2)
                {
                    chk.push_back({nums[lx-1] , nums[rx+1]});
                }
            }
        }
        
        
        
        while(low < high)    
        {
            ll mid = (low + high)/2;
            if(check(mid))
            {
                high = mid;
            }
            else
            {
                low = mid+1;
            }
        }
        
        return low;
    }
};",1454882886
Yan Pan,panyan7,23,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int n = nums.size(), s = accumulate(nums.begin(), nums.end(), 0), res = 0;
        for (int i = 0; i < n; i++) {
            if (nums[i] != 0)
                continue;
            for (int v = -1; v <= 1; v += 2) {
                vector<int> tmp = nums;
                int cur = i, d = v, r = s;
                while (r > 0) {
                    if (cur < 0 || cur >= n)
                        break;
                    if (tmp[cur] == 0) {
                        cur += d;
                    } else if (tmp[cur] > 0) {
                        tmp[cur]--;
                        r--;
                        d = -d;
                        cur += d;
                    }
                }
                if (r == 0) {
                    res++;
                }
            }
        }
        return res;
    }
};",1454836941
Yan Pan,panyan7,23,3639,cpp,"struct MaxInt {
    using T = long long;
    const T e = LLONG_MIN;
    T f(T a, T b) const { return max(a, b); }
};
struct MinInt {
    using T = long long;
    const T e = LLONG_MAX;
    T f(T a, T b) const { return min(a, b); }
};
template <class B>
struct SegTree : public B {
    using T = typename B::T;
    int n;
    vector<T> tree;
    vector<T> add;
private:
    void _build(const vector<T>& a, int v, int tl, int tr) {
        if (tl == tr) {
            tree[v] = a[tl];
            return;
        }
        int tmid = tl + (tr - tl) / 2;
        _build(a, v*2, tl, tmid);
        _build(a, v*2+1, tmid+1, tr);
        tree[v] = B::f(tree[v*2], tree[v*2+1]);
    }
    void _push(int v) {
        tree[v*2  ] += add[v];
        tree[v*2+1] += add[v];
        add[v*2  ] += add[v];
        add[v*2+1] += add[v];
        add[v] = 0;
    }
    void _update(int v, int tl, int tr, int l, int r, T val) {
        if (l > r)
            return;
        if (l == tl && r == tr) {
            tree[v] += val;
            add[v] += val;
            return;
        }
        _push(v);
        int tmid = tl + (tr - tl) / 2;
        _update(v*2, tl, tmid, l, min(r, tmid), val);
        _update(v*2+1, tmid+1, tr, max(l, tmid+1), r, val);
        tree[v] = B::f(tree[v*2], tree[v*2+1]);
    }
    T _query(int v, int tl, int tr, int l, int r) {
        if (l > r || tr < l || tl > r)
            return B::e;
        if (tr <= r && tl >= l)
            return tree[v];
        _push(v);
        int tmid = tl + (tr - tl) / 2;
        return B::f(_query(v*2, tl, tmid, l, min(r, tmid)),
                    _query(v*2+1, tmid+1, tr, max(l, tmid+1), r));
    }
    T _get(int v, int tl, int tr, int pos) {
        if (tl == tr)
            return tree[v];
        _push(v);
        int tmid = tl + (tr - tl) / 2;
        if (pos <= tmid)
            return _get(v*2, tl, tmid, pos);
        else
            return _get(v*2+1, tmid+1, tr, pos);
    }
public:
    SegTree(int n_) : n(n_) {
        tree.assign(4*n, B::e);
        add.assign(4*n, 0);
        vector<T> a(n, B::e);
        _build(a, 1, 0, n-1);
    }
    SegTree(int n_, T val) : n(n_) {
        tree.assign(4*n, B::e);
        add.assign(4*n, 0);
        vector<T> a(n, val);
        _build(a, 1, 0, n-1);
    }
    SegTree(const vector<T>& a) : n(a.size()) {
        tree.assign(4*n, B::e);
        add.assign(4*n, 0);
        _build(a, 1, 0, n-1);
    }
    friend ostream& operator<<(ostream& os, SegTree& st) {
        for (int i = 0; i < st.n; ++i)
            os << st.get(i) << "" "";
        return os;
    }
    void build(const vector<T>& a)   { _build(a, 1, 0, n-1); }
    void update(int l, int r, T val) { _update(1, 0, n-1, l,   r,   val); }
    void update(int pos, T val)      { _update(1, 0, n-1, pos, pos, val); }
    T query(int l, int r)            { return _query(1, 0, n-1, l, r); }
    T get(int pos)                   { return _get(1, 0, n-1, pos);  }
    T operator[](int pos)            { return get(pos); }
};

class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        SegTree<MaxInt> st(n, 0);
        for (auto& p : queries) {
            st.update(p[0], p[1], 1);
        }
        for (int i = 0; i < n; i++) {
            if (st.get(i) < nums[i])
                return false;
        }
        return true;
    }
};",1454813432
Yan Pan,panyan7,23,3643,cpp,"struct MaxInt {
    using T = long long;
    const T e = LLONG_MIN;
    T f(T a, T b) const { return max(a, b); }
};
struct MinInt {
    using T = long long;
    const T e = LLONG_MAX;
    T f(T a, T b) const { return min(a, b); }
};
template <class B>
struct SegTree : public B {
    using T = typename B::T;
    int n;
    vector<T> tree;
    vector<T> add;
private:
    void _build(const vector<T>& a, int v, int tl, int tr) {
        if (tl == tr) {
            tree[v] = a[tl];
            return;
        }
        int tmid = tl + (tr - tl) / 2;
        _build(a, v*2, tl, tmid);
        _build(a, v*2+1, tmid+1, tr);
        tree[v] = B::f(tree[v*2], tree[v*2+1]);
    }
    void _push(int v) {
        tree[v*2  ] += add[v];
        tree[v*2+1] += add[v];
        add[v*2  ] += add[v];
        add[v*2+1] += add[v];
        add[v] = 0;
    }
    void _update(int v, int tl, int tr, int l, int r, T val) {
        if (l > r)
            return;
        if (l == tl && r == tr) {
            tree[v] += val;
            add[v] += val;
            return;
        }
        _push(v);
        int tmid = tl + (tr - tl) / 2;
        _update(v*2, tl, tmid, l, min(r, tmid), val);
        _update(v*2+1, tmid+1, tr, max(l, tmid+1), r, val);
        tree[v] = B::f(tree[v*2], tree[v*2+1]);
    }
    T _query(int v, int tl, int tr, int l, int r) {
        if (l > r || tr < l || tl > r)
            return B::e;
        if (tr <= r && tl >= l)
            return tree[v];
        _push(v);
        int tmid = tl + (tr - tl) / 2;
        return B::f(_query(v*2, tl, tmid, l, min(r, tmid)),
                    _query(v*2+1, tmid+1, tr, max(l, tmid+1), r));
    }
    T _get(int v, int tl, int tr, int pos) {
        if (tl == tr)
            return tree[v];
        _push(v);
        int tmid = tl + (tr - tl) / 2;
        if (pos <= tmid)
            return _get(v*2, tl, tmid, pos);
        else
            return _get(v*2+1, tmid+1, tr, pos);
    }
public:
    SegTree(int n_) : n(n_) {
        tree.assign(4*n, B::e);
        add.assign(4*n, 0);
        vector<T> a(n, B::e);
        _build(a, 1, 0, n-1);
    }
    SegTree(int n_, T val) : n(n_) {
        tree.assign(4*n, B::e);
        add.assign(4*n, 0);
        vector<T> a(n, val);
        _build(a, 1, 0, n-1);
    }
    SegTree(const vector<T>& a) : n(a.size()) {
        tree.assign(4*n, B::e);
        add.assign(4*n, 0);
        _build(a, 1, 0, n-1);
    }
    friend ostream& operator<<(ostream& os, SegTree& st) {
        for (int i = 0; i < st.n; ++i)
            os << st.get(i) << "" "";
        return os;
    }
    void build(const vector<T>& a)   { _build(a, 1, 0, n-1); }
    void update(int l, int r, T val) { _update(1, 0, n-1, l,   r,   val); }
    void update(int pos, T val)      { _update(1, 0, n-1, pos, pos, val); }
    T query(int l, int r)            { return _query(1, 0, n-1, l, r); }
    T get(int pos)                   { return _get(1, 0, n-1, pos);  }
    T operator[](int pos)            { return get(pos); }
};
class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        vector<long long> a(n);
        for (int i = 0; i < n; i++)
            a[i] = nums[i];
        SegTree<MaxInt> st(a);
        if (st.query(0, n-1) <= 0)
            return 0;
        for (int k = 0; k < queries.size(); k++) {
            auto& p = queries[k];
            st.update(p[0], p[1], -p[2]);
            if (st.query(0, n-1) <= 0)
                return (k+1);
        }
        return -1;
    }
};",1454818032
Yan Pan,panyan7,23,3658,cpp,"class Solution {
public:
    int minDifference(vector<int>& nums) {
        long long lo = -1, hi = 1e9 + 10, n = nums.size();
        vector<long long> s;
        for (int i = 0; i < n; i++) {
            if (i+1 < n && nums[i+1] == -1 && nums[i] != -1) {
                s.push_back(nums[i]);
            } else if (i-1 >= 0 && nums[i-1] == -1 && nums[i] != -1) {
                s.push_back(nums[i]);
            }
        }
        sort(s.begin(), s.end());
        auto check = [&](int d) {
            long long x, y;
            if (s.size() == 0)
                x = 0, y = 0;
            else
                x = s[0] + d, y = s[s.size()-1] - d;
            vector<long long> tmp(n);
            for (int i = 0; i < n; i++)
                tmp[i] = nums[i];
            for (int i = 1; i < n; i++) {
                if (tmp[i] == -1 && tmp[i-1] != -1) {
                    if (abs(x-tmp[i-1]) > d)
                        tmp[i] = y;
                    else if (abs(y-tmp[i-1]) > d)
                        tmp[i] = x;
                }
            }
            for (int i = n-2; i >= 0; i--) {
                if (tmp[i] == -1 && tmp[i+1] != -1) {
                    if (abs(x-tmp[i+1]) > d)
                        tmp[i] = y;
                    else if (abs(y-tmp[i+1]) > d)
                        tmp[i] = x;
                }
            }
            for (int i = 0; i < n; i++) {
                if (tmp[i] == -1)
                    continue;
                if (i+1 < n && tmp[i+1] != -1) {
                    if (abs(tmp[i]-tmp[i+1]) > d)
                        return false;
                }
                if (i-1 >= 0 && nums[i-1] != -1) {
                    if (abs(tmp[i]-tmp[i-1]) > d)
                        return false;
                }
            }
            return true;
        };
        while (lo + 1 < hi) {
            int mid = lo + (hi - lo) / 2;
            if (check(mid))
                hi = mid;
            else
                lo = mid;
        }
        return hi;
    }
};",1454875195
arignote,arignote,27,3616,java,"class Solution {

    public int countValidSelections(int[] nums) {
        int count = 0;
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] == 0) {
                int sum = 0;
                for (int j = 0; j < nums.length; j++) {
                    sum += Integer.signum(j - i) * nums[j];
                }
                count += sum == 0 ? 2 : Math.abs(sum) == 1 ? 1 : 0;
            }
        }
        return count;
    }
}",1454870459
arignote,arignote,27,3639,java,"class Solution {

    public boolean isZeroArray(int[] nums, int[][] queries) {
        return minZeroArray(nums, queries) >= 0;
    }

    public int minZeroArray(int[] nums, int[][] queries) {
        int left = 0, right = queries.length + 1;
        while (left < right) {
            if (minZeroArray(nums, queries, (left + right) / 2)) {
                right = (left + right) / 2;
            } else {
                left = (left + right) / 2 + 1;
            }
        }
        return right <= queries.length ? right : -1;
    }

    private boolean minZeroArray(int[] nums, int[][] queries, int k) {
        int[] sum = new int[nums.length + 2];
        for (int i = 0; i < k; i++) {
            sum[queries[i][0] + 1] += 1;
            sum[queries[i][1] + 2] -= 1;
        }
        for (int i = 0; i < nums.length; i++) {
            if ((sum[i + 1] += sum[i]) < nums[i]) {
                return false;
            }
        }
        return true;
    }
}",1454870198
arignote,arignote,27,3643,java,"class Solution {

    public int minZeroArray(int[] nums, int[][] queries) {
        int left = 0, right = queries.length + 1;
        while (left < right) {
            if (minZeroArray(nums, queries, (left + right) / 2)) {
                right = (left + right) / 2;
            } else {
                left = (left + right) / 2 + 1;
            }
        }
        return right <= queries.length ? right : -1;
    }

    private boolean minZeroArray(int[] nums, int[][] queries, int k) {
        int[] sum = new int[nums.length + 2];
        for (int i = 0; i < k; i++) {
            sum[queries[i][0] + 1] += queries[i][2];
            sum[queries[i][1] + 2] -= queries[i][2];
        }
        for (int i = 0; i < nums.length; i++) {
            if ((sum[i + 1] += sum[i]) < nums[i]) {
                return false;
            }
        }
        return true;
    }
}",1454869968
arignote,arignote,27,3658,java,"class Solution {

    public int minDifference(int[] nums) {
        ArrayList<Integer> list = new ArrayList<>();
        for (int i = 0, k = -1; i < nums.length; i++) {
            if (nums[i] > 0) {
                list.add(nums[i]);
                for (int j = 0; j < nums.length; j++) {
                    list.add(nums[j]);
                    if (nums[j] > 0) {
                        k = nums[j];
                    }
                }
                list.add(k);
                break;
            }
        }
        int max = 0, min = Integer.MAX_VALUE, left = 0, right = 1000000000;
        ArrayList<int[]> list1 = new ArrayList<>(), list2 = new ArrayList<>();
        for (int i = 0, j = -2; i < list.size(); ++i) {
            if (list.get(i) > 0) {
                if (j == i - 1) {
                    max = Math.max(max, Math.abs(list.get(i) - list.get(i - 1)));
                } else if (j >= 0) {
                    (j == i - 2 ? list1 : list2).add(new int[] { Math.min(list.get(i), list.get(j)), Math.max(list.get(i), list.get(j)) });
                    min = Math.min(min, Math.min(list.get(i), list.get(j)));
                }
                j = i;
            }
        }
        while (left < right) {
            if (minDifference(list1, list2, (left + right) / 2, min)) {
                right = (left + right) / 2;
            } else {
                left = (left + right) / 2 + 1;
            }
        }
        return Math.max(max, left);
    }

    private boolean minDifference(List<int[]> list1, List<int[]> list2, int k, int min) {
        int left = min + k, right = Integer.MAX_VALUE;
        for (int[] i : list1) {
            if ((Math.abs(i[0] - min - k) > k || Math.abs(i[1] - min - k) > k) && (left = Math.max(left, i[1] - k)) > (right = Math.min(right, i[0] + k))) {
                return false;
            }
        }
        for (int[] i : list2) {
            if ((Math.abs(i[0] - min - k) > k || Math.abs(i[1] - min - k) > k) && (left = Math.max(left, i[1] - k)) > (right = Math.min(right, min + k < i[0] || min + k > i[1] ? i[0] + k : min + k + k))) {
                return false;
            }
        }
        return true;
    }
}",1454900505
lydxlx,lydxlx,28,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        ans = 0
        N = len(nums)
        for idx in range(N):
            if nums[idx] != 0:
                continue
            old_idx = idx
            for dir in [-1, 1]:
                old_dir = dir
                idx = old_idx
                A = list(nums)

                while 0 <= idx < N:
                    if A[idx] == 0:
                        idx += dir
                    elif A[idx] > 0:
                        A[idx] -= 1
                        dir = -dir
                        idx += dir
                if sum(A) == 0:
                    ans += 1
        return ans

",1454823188
lydxlx,lydxlx,28,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        n = len(nums)
        prefix = [0] * (n + 1)
        for l, r in queries:
            prefix[l] += 1
            prefix[r + 1] -= 1
        for i in range(1, n):
            prefix[i] += prefix[i - 1]
        return all(prefix[i] >= nums[i] for i in range(n))
",1454828001
lydxlx,lydxlx,28,3643,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]], query_cnt: int) -> bool:
        n = len(nums)
        prefix = [0] * (n + 1)
        for i in range(query_cnt):
            l, r, val = queries[i]
            prefix[l] += val
            prefix[r + 1] -= val
        for i in range(1, n):
            prefix[i] += prefix[i - 1]
        return all(prefix[i] >= nums[i] for i in range(n))

    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        if sum(nums) == 0:
            return 0
            
        Q = len(queries)
        if not self.isZeroArray(nums, queries, Q):
            return -1
        L = 0
        R = Q
        while L + 1 < R:
            mid = (L + R) // 2
            if self.isZeroArray(nums, queries, mid):
                R = mid
            else:
                L = mid
        return R
",1454846664
lydxlx,lydxlx,28,3658,python3,"import bisect
from typing import *
from sortedcontainers import SortedList, SortedDict
from collections import Counter, defaultdict
from math import inf
from math import gcd
from math import factorial
import string
import random
import itertools
from functools import cache, lru_cache
from fractions import Fraction
import itertools

class Solution:
    def canCoverByTwoPoints(self, intervals, maxDiff):
        originalMinRight = min([y for x, y in intervals])

        remain = []
        for a, b in intervals:
            if a <= originalMinRight <= b:
                continue
            remain.append((a, b))
        if not remain:
            return True
        minRight = min(y for x, y in remain)
        maxLeft = max(x for x, y in remain)
        return maxLeft <= minRight and maxLeft - originalMinRight <= maxDiff

    def minDifference(self, nums: List[int]) -> int:
        if len(set(nums)) == 1:
            return 0

        diff1 = {}
        diff2 = {}
        hasPre = False
        hasPost = False
        if nums[0] == -1:
            hasPre = True
        if nums[-1] == -1:
            hasPost = True
        n = len(nums)
        index = [i for i in range(n) if nums[i] != -1]
        firstNumber = nums[index[0]]
        lastNumber = nums[index[-1]]

        low, high = 0, 100000000000

        for i in range(1, len(index)):
            a, b = index[i - 1], index[i]
            if a + 1 != b:
                count = min(2, b - a - 1)
            num1, num2 = nums[a], nums[b]
            if a + 1 == b:
                low = max(low, abs(num2 - num1))
                continue
            if num1 > num2:
                num1, num2 = num2, num1
            if count == 1:
                diff1[(num1, num2)] = True
            else:
                diff2[(num1, num2)] = True

        if not diff1 and not diff2:
            return low

        for a, b in diff1:
            low = max(low, (b - a + 1) // 2)

        ans = None

        while low <= high:
            print(low, high)
            mid = (low + high) // 2

            intervals = []

            if hasPre:
                intervals.append((firstNumber - mid, firstNumber + mid))

            if hasPost:
                intervals.append((lastNumber - mid, lastNumber + mid))

            for a, b in diff1:
                intervals.append((b - mid, a + mid))

            for a, b in diff2:
                intervals.append((b - mid, a + mid))

            if self.canCoverByTwoPoints(intervals, inf):
                print(""check"")
                ans = mid
                high = mid - 1
                continue

            intervals = []

            if hasPre:
                intervals.append((firstNumber - mid, firstNumber + mid))

            if hasPost:
                intervals.append((lastNumber - mid, lastNumber + mid))

            for a, b in diff1:
                intervals.append((b - mid, a + mid))

            for a, b in diff2:
                intervals.append((a - mid, a + mid))
                intervals.append((b - mid, b + mid))
            print(intervals)
            if self.canCoverByTwoPoints(intervals, mid):
                ans = mid
                high = mid - 1
            else:
                low = mid + 1
        return ans

",1454892838
Smith,ShenTM,29,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        psum = list(itertools.accumulate(nums))
        # print(psum)
        tt = sum(nums)
        ans = 0
        for i, n in enumerate(psum):
            if nums[i] == 0 and n in [tt // 2, (tt + 1) // 2]:
                if tt % 2 == 0:
                    ans += 2
                else:
                    ans += 1
        return ans


        ",1454810511
Smith,ShenTM,29,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        ans = [0] * (len(nums) + 1)
        for s, e in queries:
            ans[s] += 1
            ans[e+1] -= 1
        ans = list(itertools.accumulate(ans))
        for v, t in zip(nums, ans):
            if v > t:
                return False
        return True



        ",1454814553
Smith,ShenTM,29,3643,python3,"class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:

        def helper(nums, queries):
            ans = [0] * (len(nums) + 1)
            for s, e, v in queries:
                ans[s] += v
                ans[e+1] -= v
            ans = list(itertools.accumulate(ans))
            for v, t in zip(nums, ans):
                if v > t:
                    return False
            return True
        if helper(nums, queries) == False:
            return -1
        l, r = 0, len(queries) + 1
        while l != r:
            mid = (l + r) // 2
            if helper(nums, queries[:mid]):
                r = mid
            else:
                l = mid + 1

        return r
            

            ",1454822607
Smith,ShenTM,29,3658,python3,"class Solution:
    def minDifference(self, nums: List[int]) -> int:
        x_max = max(nums)
        if x_max == -1:
            return 0
        pi = -1
        pn = 0
        all_questions = []
        nums.append(0)
        l = 0
        for i, n in enumerate(nums):
            if n != -1:
                if pi == -1:
                    if i != 0:
                        all_questions.append([n, n, 1])
                elif i - pi == 1 and i != len(nums) - 1:
                    l = max(l, abs(n - pn) )
                elif i - pi == 2:
                    all_questions.append([n, pn, 1] if n < pn else [pn, n, 1])
                elif i - pi > 2:
                    all_questions.append([n, pn, 2] if n < pn else [pn, n, 2])
                pi, pn = i, n
            else:
                continue
        nums.pop()
        if all_questions and all_questions[-1][0] == 0:
            all_questions[-1][0] = all_questions[-1][1]
            
        def check_multi_n1(x, y, diff):
            # print(x, y, diff)
            if x > y:
                return check_multi_n1(y, x ,diff)
            for s, e, t in all_questions:
                if t == 1:
                    if (x - diff <= s <= e <= x + diff) or (y - diff <= s <= e <= y + diff):
                        continue
                    else:
                        return False
                if t == 2:
                    if (x - diff <= s <= e <= x + diff) or (y - diff <= s <= e <= y + diff):
                        continue
                    elif y - x <= diff and (x - diff <= s <= x + diff) and (y - diff <= e <= y + diff):
                        continue
                    else:
                        return False
            return True
        def helper(diff):
            ranges = []
            x = x_max
            multi_n1 = False
            for i, j in zip(nums, nums[1:]):
                if i == -1 and j != -1:
                    ranges.append([j-diff, j+diff])
                    x = min(x, j + diff)
                elif i != -1 and j== -1:
                    ranges.append([i-diff, i + diff])
                    x = min(x, i + diff)
                elif i == j == -1:
                    multi_n1 += 1
            ranges.sort(key=lambda x: x[0])
            # print(ranges)
            y = 0
            for s, e in ranges:
                if s <= x <= e:
                    continue
                elif s <= y <= e:
                    continue
                else:
                    y = s
            for s, e in ranges:
                if s <= x <= e or s <= y <= e:
                    continue
                else:
                    return False
            return check_multi_n1(x, y, diff)

        r = x_max    
        # print(l, r)
        
        while l != r:
            mid = (l + r) // 2
            # l = r = mid = 6
            if helper(mid):
                r = mid
            else:
                l = mid + 1
            # break
        # print(l, r)
        return r
            


            





        ",1454893024
physics0523,physics0523,30,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int tot=0;
        for(auto &nx : nums){tot+=nx;}
        int s=0,res=0;
        for(auto &nx : nums){
            if(nx==0){
                if(s==tot){res+=2;}
                else if(abs(s-tot)==1){res++;}
            }
            else{
                tot-=nx;
                s+=nx;
            }
        }
        return res;
    }
};",1454806349
physics0523,physics0523,30,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        long long n=nums.size();
        vector<long long> bk(n+2,0);
        for(auto &nx : queries){
            bk[nx[0]]++;
            bk[nx[1]+1]--;
        }
        for(long long i=0;i<n;i++){
            if(nums[i]>bk[i]){return false;}
            bk[i+1]+=bk[i];
        }
        return true;
    }
};",1454808024
physics0523,physics0523,30,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int l=0,r=((int)queries.size());
        long long n=nums.size();
        while(l<=r){
            int te=(l+r)/2;
            bool jud=true;
            vector<long long> bk(n+2,0);
            // for(auto &nx : queries){
            for(int i=0;i<te;i++){
                bk[queries[i][0]]+=queries[i][2];
                bk[queries[i][1]+1]-=queries[i][2];
            }
            for(long long i=0;i<n;i++){
                if(nums[i]>bk[i]){jud=false;}
                bk[i+1]+=bk[i];
            }
            if(jud){r=te-1;}else{l=te+1;}
        }
        
        if(l>((int)queries.size())){l=-1;}
        return l;
    }
};
",1454811729
physics0523,physics0523,30,3658,cpp,"using pi=pair<int,int>;

vector<int> c2(vector<int> &vec){
    vector<int> a;
    for(auto &nx : vec){
        if(nx==-1){
            if(a.size()>=2){
                if(a[a.size()-2]==-1 && a[a.size()-1]==-1){continue;}
            }
        }
        a.push_back(nx);
    }
    return a;
}

vector<int> c1(vector<int> &vec){
    vector<int> a;
    for(auto &nx : vec){
        if(nx==-1){
            if(a.size()>=1){
                if(a[a.size()-1]==-1){continue;}
            }
        }
        a.push_back(nx);
    }
    return a;
}

class Solution {
public:
    int minDifference(vector<int>& nums) {
        vector<int> vec=nums;
        auto a2=c2(vec);
        auto a1=c1(vec);
        // for(auto &nx : a2){cout << nx << "" "";}cout << ""\n"";
        // for(auto &nx : a1){cout << nx << "" "";}cout << ""\n"";
        int s2=a2.size();
        int s1=a1.size();
        // if(s1==1){return 0;}
        int l=0,r=1e9+7;
        
        while(l<=r){
            int te=(l+r)/2;
            bool ok=false;
            // XY-adj NG
            {
                vector<int> lef(s1,1);
                vector<int> rig(s1,1e9+7);
                for(int i=1;i<s1;i++){
                    if(a1[i-1]!=-1){
                        lef[i]=max(lef[i],a1[i-1]-te);
                        rig[i]=min(rig[i],a1[i-1]+te);
                    }
                    if(a1[i]!=-1){
                        lef[i-1]=max(lef[i-1],a1[i]-te);
                        rig[i-1]=min(rig[i-1],a1[i]+te);
                    }
                }

                bool ng=false;
                vector<pi> seg;
                for(int i=0;i<s1;i++){
                    if(a1[i]==-1){
                        if(lef[i]>rig[i]){ng=true;}
                        else{
                            seg.push_back({lef[i],rig[i]});
                        }
                    }
                    else{
                        if(!(lef[i]<=a1[i] && a1[i]<=rig[i])){ng=true;}
                    }
                }
                if(!ng){
                    int elm=1e9+7;
                    for(auto &nx : seg){
                        elm=min(elm,nx.second);
                    }
                    int fil=1,fir=1e9+7;
                    for(auto &nx : seg){
                        if(nx.first<=elm && elm<=nx.second){continue;}
                        fil=max(fil,nx.first);
                        fir=min(fir,nx.second);
                    }
                    if(fil<=fir){ok=true;}
                }
            }
            // XY-adj OK
            {
                vector<int> lef(s2,1);
                vector<int> rig(s2,1e9+7);
                for(int i=1;i<s2;i++){
                    if(a2[i-1]!=-1){
                        lef[i]=max(lef[i],a2[i-1]-te);
                        rig[i]=min(rig[i],a2[i-1]+te);
                    }
                    if(a2[i]!=-1){
                        lef[i-1]=max(lef[i-1],a2[i]-te);
                        rig[i-1]=min(rig[i-1],a2[i]+te);
                    }
                }
                
                bool ng=false;
                vector<pi> seg;
                for(int i=0;i<s2;i++){
                    if(a2[i]==-1){
                        if(lef[i]>rig[i]){ng=true;}
                        else{
                            seg.push_back({lef[i],rig[i]});
                        }
                    }
                    else{
                        if(!(lef[i]<=a2[i] && a2[i]<=rig[i])){ng=true;}
                    }
                }
                if(!ng){
                    int elm=1e9+7;
                    for(auto &nx : seg){
                        elm=min(elm,nx.second);
                    }
                    int fil=elm,fir=elm+te;
                    for(auto &nx : seg){
                        if(nx.first<=elm && elm<=nx.second){continue;}
                        fil=max(fil,nx.first);
                        fir=min(fir,nx.second);
                    }
                    if(fil<=fir){ok=true;}
                }
            }
            if(ok){r=te-1;}else{l=te+1;}
        }
        return l;
    }
};",1454900063
green_pig,green_pig,31,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        n = len(nums)
        def check(i, d):
            a = nums.copy()
            while 0 <= i < n:
                if a[i]:
                    a[i] -= 1
                    d = -d
                i += d
            return sum(a) == 0
        return sum(check(i, d) for i in range(n) if nums[i] == 0 for d in [-1, 1])",1454806885
green_pig,green_pig,31,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        n = len(nums)
        def check(k):
            a = [0] * (n+1)
            for l, r in queries[:k]:
                a[l] += 1
                a[r+1] -= 1
            return all(x >= y for x, y in zip(accumulate(a), nums))
        return check(len(queries))",1454811469
green_pig,green_pig,31,3643,python3,"class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        n = len(nums)
        queries.append([0, n-1, inf])
        def check(k):
            a = [0] * (n+1)
            for l, r, v in queries[:k]:
                a[l] += v
                a[r+1] -= v
            return all(x >= y for x, y in zip(accumulate(a), nums))
        l, r = 0, len(queries)
        while l < r:
            m = l + r >> 1
            if check(m):
                r = m
            else:
                l = m+1
        return l if l < len(queries) else -1",1454810538
green_pig,green_pig,31,3658,python3,"class Solution:
    def minDifference(self, nums: List[int]) -> int:
        a = [i for i in nums if i > 0]
        if not a: a = [1]
        if nums[0] == -1:
            nums = [a[0]] + nums
        if nums[-1] == -1:
            nums = nums + [a[-1]]
        a = []
        for i in nums:
            if i == -1:
                a[-1] += i
            else:
                a.append(i)
                a.append(0)
        v = []
        for i in range(0, len(a)-2, 2):
            if a[i+1]:
                v.append(a[i:i+3])
        def check(k):
            s = [[max(a, b) - k, min(a, b) + k] for a, t, b in v]
            if not s: return 1
            s.sort()
            y = s[-1][0]
            s = [[l, r] for l, r in s if not l <= y <= r]
            if not s: return 1
            if max(l for l, r in s) <= min(r for l, r in s): return 1
            s = [[max(a, b) - k, min(a, b) + k] for a, t, b in v if t == -1]
            for a, t, b in v:
                if t < -1:
                    s.append([a - k, a + k])
                    s.append([b - k, b + k])
            if not s: return 1
            s.sort()
            y = s[-1][0]
            s = [[l, r] for l, r in s if not l <= y <= r]
            s.append([y - k, y])
            l, r = max(l for l, r in s), min(r for l, r in s)
            if l <= r and y - r <= k: return 1
            return 0
        l, r = max((abs(a-b) for a, b in zip(nums, nums[1:]) if a > 0 and b > 0), default=0), 10**10
        while l < r:
            m = l + r >> 1
            if check(m):
                r = m
            else:
                l = m+1
        return l
",1454888541
Javier,JavOliva,33,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int ans = 0;
        int sum = 0;
        for (int x : nums)
            sum += x;
        int n = nums.size();
        int cur = 0;
        for (int i = 0; i < n; i ++){
            if (nums[i] == 0){
                if (cur == sum - cur){
                    ans += 2;
                }
                if (cur == sum - cur - 1)
                    ans ++;
                if (cur == sum - cur + 1)
                    ans ++;
            }
            cur += nums[i];
        }
        return ans;
    }
};",1454807003
Javier,JavOliva,33,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        vector<int> ans(n + 1);
        int q = queries.size();
        for (int i = 0; i < q; i ++){
            int l = queries[i][0];
            int r = queries[i][1];
            ans[r + 1] ++;
            ans[l] --;
        }
        for (int i = 1; i <= n; i ++){
            ans[i] += ans[i - 1];
        }
        for (int i = 0; i < n; i ++){
            if (nums[i] > -ans[i])
                return false;
        }
        return true;
    }
};",1454809682
Javier,JavOliva,33,3643,cpp,"
typedef long long ll;
class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        int q = queries.size();
        int left = 0, right = q + 1;
        while(left < right){
            int mid = (left + right) / 2;
            vector<ll> ans(n + 1);
            for (int i = 0; i < mid; i ++){
                int l = queries[i][0];
                int r = queries[i][1];
                ll v = queries[i][2];
                ans[r + 1] += v;
                ans[l] -= v;
            }
            for (int i = 1; i < n; i ++)
                ans[i] += ans[i - 1];
            bool oka = true;
            for (int i = 0; i < n; i ++){
                if (nums[i] + ans[i] > 0){
                    oka = false;
                    break;
                }
            }
            if (oka)
                right = mid;
            else
                left = mid + 1;
        }
        return left == q + 1 ? -1 : left;
    }
};",1454815972
Javier,JavOliva,33,3658,cpp,"class Solution {
public:
    int minDifference(vector<int>& nums) {
        int n = nums.size();
        int left = 0, right = 1e9 + 1;
        for (int i = 0; i + 1 < n; i ++){
            if (nums[i] != -1 and nums[i + 1] != -1){
                left = max({left, nums[i + 1] - nums[i], nums[i] - nums[i + 1]});
            }
        }
        vector<bool> is_middle(n);
        for (int i = 0; i < n; i ++){
            if (nums[i] == -1 && ((i > 0 && nums[i - 1] == -1) || i == 0) && ((i + 1 < n && nums[i + 1] == -1) || i + 1 == n)){
                is_middle[i] = 1;
            }
            
        }
        vector<int> fixed_nums;
        for (int i = 0; i < n; i ++) if (!is_middle[i]){
            fixed_nums.push_back(nums[i]);
        }
        n = fixed_nums.size();
        vector<pair<int, int> > doubles;
        vector<int> singles;
        vector<pair<int, int> > especiales;
        for (int i = 0; i < n; i ++){
            if (fixed_nums[i] == -1){
                if (i + 1 < n && fixed_nums[i + 1] == -1){
                    especiales.emplace_back(fixed_nums[i - 1], fixed_nums[i + 2]);
                    i ++;
                }
                else if (i + 1 < n && i > 0){
                    doubles.emplace_back(fixed_nums[i - 1], fixed_nums[i + 1]);
                }
                else if (i + 1 < n){
                    singles.emplace_back(fixed_nums[i + 1]);
                }
                else {
                    singles.emplace_back(fixed_nums[i - 1]);
                }
            }
        }
        if (doubles.size() + especiales.size() + singles.size() == 0){
            return left;
        }
        while(left < right){
            int mid = (left + right) / 2;
            vector<pair<int, int> > rests;
            bool oka = true;
            for (auto x : singles){
                rests.emplace_back(x - mid, x + mid);
            }
            for (auto [x, y] : doubles){
                int L = max(x, y) - mid;
                int R = min(x, y) + mid;
                rests.emplace_back(L, R);
                if (L > R)
                    oka = false;
            }
            if (!oka){
                left = mid + 1;
                continue;
            }
            for (auto [x, y] : especiales){
                rests.emplace_back(x - mid, x + mid);
                rests.emplace_back(y - mid, y + mid);
            }
            int valor1 = max_element(rests.begin(), rests.end())->first;
            int L = 0, R = 1e9 + 1;
            for (auto x : singles){
                if (abs(x - valor1) > mid){
                    L = max(L, x - mid);
                    R = min(R, x + mid);
                    if (L > R){
                        oka =  false;
                        break;
                    }
                }
            }
            if (!oka){
                left = mid + 1;
                continue;
            }
            for (auto [x, y] : doubles){
                int Ld = max(x, y) - mid;
                int Rd = min(x, y) + mid;
                if (valor1 >= Ld && valor1 <= Rd)
                    continue;
                L = max(L, Ld);
                R = min(R, Rd);
                if (L > R){
                    oka = false;
                    break;
                }
            }
            if (!oka){
                left = mid + 1;
                continue;
            }
            for (auto [x, y] : especiales){
                if (x >= valor1 && y >= valor1){
                    continue;
                }
                if (x < y)
                    swap(x, y);
                if (x >= valor1 && y < valor1){
                    if (abs(y - valor1) <= mid)
                        continue;
                    L = max(L, valor1 - mid);
                    R = min(R, y + mid);
                    if (L > R){
                        oka = false;
                        break;
                    }
                    continue;
                }
                // x < valor1 and y < valor1
                if (abs(x - valor1) <= mid && abs(y - valor1) <= mid)
                    continue;
                L = max(L, x - mid);
                R = min(R, y + mid);
                if (L > R){
                    oka = false;
                    break;
                }
            }
            if (oka)
                right = mid;
            else
                left = mid + 1;
        }
        return left;
    }
};",1454896326
Yuanbin Cheng,cybsbbbb,35,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        n = len(nums)
        prefix = [0]
        for num in nums:
            prefix.append(prefix[-1] + num)
        suffix = [0]
        for num in nums[::-1]:
            suffix.append(suffix[-1] + num)
        prefix = prefix[1:]
        suffix = suffix[1:][::-1]
        ans = 0
        for i in range(n):
            if nums[i] == 0:
                if prefix[i] == suffix[i]:
                    ans += 2
                elif abs(prefix[i] - suffix[i]) == 1:
                    ans += 1
        return ans
        ",1454808673
Yuanbin Cheng,cybsbbbb,35,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        n = len(nums)
        diff = [0] * (n + 1)
        for li, ri in queries:
            diff[li] += 1
            diff[ri + 1] -= 1
        for i in range(1, n):
            diff[i] += diff[i - 1]
        flag = True
        for i in range(n):
            if nums[i] > diff[i]:
                flag = False
        return flag
        ",1454812187
Yuanbin Cheng,cybsbbbb,35,3643,python3,"class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        n, m = len(nums), len(queries)
        
        def helper(m):
            diff = [0] * (n + 2)
            for li, ri, vi in queries[:m]:
                diff[li] += vi
                diff[ri + 1] -= vi
            flag = True
            for i in range(n):
                diff[i] += diff[i - 1]
                if nums[i] > diff[i]:
                    flag = False
                    break
            return flag

        if max(nums) == 0:
            return 0
        if helper(m) is False:
            return -1

        left = 1
        right = m
        while left < right:
            mid = left + (right - left) // 2
            if helper(mid) is False:
                left = mid + 1
            else:
                right = mid

        return left
        ",1454824561
Yuanbin Cheng,cybsbbbb,35,3658,python3,"class Solution:
    def minDifference(self, nums: List[int]) -> int:
        if max(nums) == -1:
            return 0
        n = len(nums)
        known = 0
        ones = []
        twos = []

        prev = 0
        prev_miss = 0
        for i in range(n):
            if nums[i] > 0:
                if i > 0 and prev_miss == 0:
                    known = max(known, abs(nums[i] - nums[i - 1]))
                if prev_miss > 0:
                    if prev == 0:
                        ones.append([nums[i], nums[i]])
                    else:
                        if prev_miss == 1:
                            ones.append(sorted([prev, nums[i]]))
                        else:
                            twos.append(sorted([prev, nums[i]]))     
                prev = nums[i]
                prev_miss = 0
                
            elif nums[i] == -1:
                prev_miss += 1
        if prev_miss > 0:
            ones.append([prev, prev])

        ones.sort()
        twos.sort()

        def helper(mid):
            x, y = 10 ** 9, 0
            for l, r in ones:
                x = min(x, l)
                y = max(y, r)
            for l, r in twos:
                x = min(x, l)
                y = max(y, r)
            x += mid
            y -= mid
            if x >= y:
                return True

            for l, r in ones:
                if min(max(abs(l-x), abs(r-x)), max(abs(l-y), abs(r-y))) > mid:
                    return False
                    
            for l, r in twos:
                if min(max(abs(l-x), abs(r-x)), max(abs(l-y), abs(r-y))) <= mid:
                    continue
                if max(abs(l-x),abs(x-y), abs(r-y)) <= mid:
                    continue
                return False
            return True
                
        left = known
        right = 10 ** 10
        while left < right:
            mid = left + (right - left) // 2
            if helper(mid):
                right = mid
            else:
                left = mid + 1

        return left

        ",1454916804
OTTFF,OTTFF,37,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& a) {
        int n = a.size();
        vector<int> sum(n + 1);
        for (int i = 0; i < n; i++) {
            sum[i + 1] += sum[i] + a[i];
        }

        int ans = 0;
        for (int i = 0; i < n; i++) {
            if (a[i]) continue;

            if (sum[i] == sum[n] - sum[i]) {
                ans += 2;
            } else if (sum[i] + 1 == sum[n] - sum[i]) {
                ans++;
            } else if (sum[i] == sum[n] - sum[i] + 1) {
                ans++;
            }
        }

        return ans;
    }
};",1454807715
OTTFF,OTTFF,37,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& a, vector<vector<int>>& qs) {
        int n = a.size();
        vector<int> sum(n + 1);
        for (auto& q :qs) {
            sum[q[0]]++;
            sum[q[1] + 1]--;
        }

        int cur = 0;
        for (int i = 0; i < n; i++) {
            cur += sum[i];
            if (cur < a[i]) {
                return false;
            }
        }
        return true;
    }
};",1454810145
OTTFF,OTTFF,37,3643,cpp,"class Solution {
public:
typedef long long LL;
    int minZeroArray(vector<int>& a, vector<vector<int>>& qs) {
        int n = a.size();
        int m = qs.size();
        
        vector<LL> sum(n + 1);

        auto check = [&](int mid) -> bool {
            for (int i = 0; i <= n; i++) {
                sum[i] = 0;
            }
            for (int i = 0; i < mid; i++) {
                int l = qs[i][0], r = qs[i][1];
                sum[l] += qs[i][2];
                sum[r + 1] -= qs[i][2];
            }

            LL cur = 0;
            for (int i = 0; i < n; i++) {
                cur += sum[i];
                if (cur < a[i]) return false;
            }
            return true;
        };
        
        int l = 0, r = m;
        int ans = m + 1, mid;
        while (l <= r) {
            mid = (l + r) >> 1;
            if (check(mid)) {
                ans = mid;
                r = mid - 1;
            } else {
                l = mid + 1;
            }
        }

        if (ans == m + 1) {
            ans = -1;
        }
        return ans;
    }
};",1454814985
OTTFF,OTTFF,37,3658,cpp,"template<typename T> void cmin(T &x,const T &y) { if(y<x) x=y; }
template<typename T> void cmax(T &x,const T &y) { if(x<y) x=y; }

class Solution {
public:
typedef pair<int, int> PII;
int INF = 0x3f3f3f3f;
    int minDifference(vector<int>& a) {
        int n = a.size();

        // all -1
        int f = 0;
        for (int i : a) {
            if (i != -1) {
                f = 1;
                break;
            }
        }
        if (!f) {
            return 0;
        }

        vector<PII> one;
        vector<PII> two;

        for (int i = 0; i < n; ) {
            if (a[i] != -1) {
                i++;
                continue;
            }
            int j = i;
            while (j < n && a[j] == -1) {
                j++;
            }

            int lv = (i == 0 ? a[j] : a[i - 1]);
            int rv = (j == n ? a[i - 1] : a[j]);

            if (lv > rv) swap(lv, rv);
            if (j - i >= 2) {
                two.push_back({lv, rv});
            } else {
                one.push_back({lv, rv});
            }
            i = j;
        }

        int cmx = 0, cmn = INF;
        for (auto [l, r] : one) {
            cmax(cmx, r);
            cmin(cmn, l);
        }
        for (auto [l, r] : two) {
            cmax(cmx, r);
            cmin(cmn, l);
        }

        auto check = [&](int mid) -> bool {
            // if (cmn + mid * 3 <= cmx) return true;
            int x = cmn + mid;
            int y = cmx - mid;

            if (x > y) swap(x, y);

            // cout << mid << ' ' << x << ' ' << y << endl;
            
            // one
            for (auto& [l, r] : one) {
                if (l + 1LL * mid * 2 < r) {
                    return false;
                }

                // need x or y in [r - mid, l + mid]
                if ((abs(l - x) > mid || abs(r - x) > mid) && (abs(l - y) > mid || abs(r - y) > mid)) {
                    return false;
                }
            } 

            // int lx = 0, rx = INF;
            for (auto& [l, r] : two) {
                if (l + 1LL * mid * 3 < r) {
                    return false;
                }
                // if (l + mid * 2 < r) { // must have x and y for this interval
                //     // cmax(lx, r - mid * 2);
                //     // cmin(rx, l + mid);
                //     // x should in [r - mid * 2, l + mid]
                // } else {
                    
                // }

                int ff = 0;
                if ((abs(l - x) <= mid && abs(r - x) <= mid) || (abs(l - y) <= mid && abs(r - y) <= mid)) {
                    ff = 1;
                } else if (abs(l - x) <= mid && abs(r - y) <= mid && y - x <= mid) {
                    ff = 1;
                }
                if (!ff) {
                    return false;
                }
            }

            // if (lx > rx) return false;

            return true;
        };

        int l = 0, r = INF;
        int ans = r;
        int mid;

        for (int i = 1; i < n; i++) {
            if (a[i - 1] != -1 && a[i] != -1) {
                l = max(l, abs(a[i] - a[i - 1]));
            }
        }

        while (l <= r) {
            mid = (l + r) >> 1;
            if (check(mid)) {
                ans = mid;
                r = mid - 1;
            } else {
                l = mid + 1;
            }
        }
        return ans;
    }
};",1454906226
HFDnpkp1cs,HFDnpkp1cs,38,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int n = nums.size(), ret = 0;
        for(int i = 0; i < n; i++) {
            if(nums[i] == 0) {
                auto t = nums;
                if(check(t, i, true))
                    ret++;
                t = nums;
                if(check(t, i, false))
                    ret++;
            }
        }
        return ret;
    }

    bool check(vector<int>& nums, int idx, bool left) {
        int n = nums.size();
        if(idx < 0 || idx >= n) {
            for(int i = 0; i < n; i++) {
                if(nums[i] != 0)
                    return false;
            }
            return true;
        }

        if(nums[idx] == 0) {
            if(left)
                return check(nums, idx - 1, left);
            else
                return check(nums, idx + 1, left);
        }
        else {
            nums[idx]--;
            left = !left;
            if(left)
                return check(nums, idx - 1, left);
            else
                return check(nums, idx + 1, left);
        }
    }
};",1454808854
HFDnpkp1cs,HFDnpkp1cs,38,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& q) {
        int n = nums.size(), m = q.size();
        vector<int> sum(n + 1, 0);
        for(auto& qq : q) {
            int l = qq[0], r = qq[1];
            sum[l]++;
            sum[r + 1]--;
        }

        int cum = 0;
        for(int i = 0; i < n; i++) {
            cum += sum[i];
            if(cum < nums[i])
                return false;
        }
        return true;
    }
};",1454812253
HFDnpkp1cs,HFDnpkp1cs,38,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& q) {
        int n = nums.size(), m = q.size();
        if(!check(nums, q, m))
            return -1;

        int lo = 0, hi = m;
        while(lo < hi) {
            int mid = (lo + hi) / 2;
            if(check(nums, q, mid))
                hi = mid;
            else
                lo = mid + 1;
        }
        return lo;
    }

    bool check(vector<int>& nums, vector<vector<int>>& q, int sz) {
        int n = nums.size(), m = q.size();
        vector<int> sum(n + 1, 0);
        for(int i = 0; i < sz; i++) {
            int l = q[i][0], r = q[i][1], val = q[i][2];
            sum[l] += val;
            sum[r + 1] -= val;
        }

        int cum = 0;
        for(int i = 0; i < n; i++) {
            cum += sum[i];
            if(cum < nums[i])
                return false;
        }
        return true;
    }
};",1454822981
HFDnpkp1cs,HFDnpkp1cs,38,3658,cpp,"using ll = long long;

class Solution {
public:
    int minDifference(vector<int>& nums) {
        vector<int> v;
        int n = nums.size();
        if(nums == vector<int>(n, -1))
            return 0;
        
        for(int i = 0; i < n; i++) {
            if(i > 1 && nums[i] == -1 && nums[i - 1] == -1 && nums[i - 2] == -1)
                continue;
            v.push_back(nums[i]);
        }
        
        ll lo = 0, hi = 1e15;
        while(lo < hi) {
            ll mid = (lo + hi) / 2;
            if(check(v, mid))
                hi = mid;
            else
                lo = mid + 1;
        }
        return lo;
    }

    bool check(vector<int>& nums, ll diff) {
        ll n = nums.size();
        for(int i = 1; i < n; i++) {
            if(nums[i] == -1 || nums[i - 1] == -1)
                continue;
            if(abs(nums[i] - nums[i - 1]) > diff)
                return false;
        }
        
        vector<ll> v;
        for(ll i = 0; i < n; i++) {
            if(nums[i] == -1)
                continue;
            if((i > 0 && nums[i - 1] == -1) || i + 1 < n && nums[i + 1] == -1) {
                v.push_back(nums[i]);
            }
        }
        sort(v.begin(), v.end());
        if(v.empty()) {
            return true;
        }

        ll sz = v.size();
        ll lo = max(1ll, v[0] - diff), hi = v[0] + diff;
        ll left = hi, left_idx = 0;
        
        for(ll i = 1; i < sz; i++) {
            if(max(1ll, v[i] - diff) > hi)
                break;
            left_idx = i;
        }

        lo = max(1ll, v[sz - 1] - diff), hi = v[sz - 1] + diff;
        ll right = lo, right_idx = sz - 1;
        for(ll i = sz - 2; i >= 0; i--) {
            if(v[i] + diff < lo)
                break;
            right_idx = i;
        }

        if(right_idx - left_idx > 1)
            return false;

        if(left >= right) {
            return true;
        }
        else {
            for(ll i = 2; i < n - 1; i++) {
                if(nums[i] == -1 && nums[i - 1] == -1) {
                    ll a = nums[i - 2], b = nums[i + 1];
                    if(!valid({a, left, right, b}, diff) && !valid({a, left, left, b}, diff) && !valid({a, right, right, b}, diff) && !valid({a, right, left, b}, diff))
                        return false;
                }
            }

            for(int i = 1; i < n - 1; i++) {
                if(nums[i] == -1 && nums[i - 1] != -1 && nums[i + 1] != -1) {
                    int a = nums[i - 1], b = nums[i + 1];
                    if(!valid({a, left, b}, diff) && !valid({a, right, b}, diff))
                        return false;
                }
            }
            
            return true;
        }
    }

    bool valid(vector<ll> v, ll diff) {
        int n = v.size();
        for(int i = 1; i < n; i++) {
            if(abs(v[i] - v[i - 1]) > diff)
                return false;
        }
        return true;
    }
};",1454906800
delphih,delphih,41,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        s = sum(nums)
        cur = 0
        res = 0
        for i, x in enumerate(nums):
            cur += x
            if x == 0:
                res += cur * 2 - 1 <= s <= cur * 2
                res += cur * 2 <= s <= cur * 2 + 1
        return res",1454808701
delphih,delphih,41,3639,python3,"class Solution:
    def isZeroArray(self, A: List[int], Q: List[List[int]]) -> bool:
        ds = [(l, 1) for l, r in Q] + [(r+1, -1) for l, r in Q]
        ds.sort(reverse=1)
        cur = 0
        for i, x in enumerate(A):
            while ds and ds[-1][0] <= i:
                cur += ds.pop()[1]
            # print(i, cur)
            if x > cur: return False
        return True",1454813547
delphih,delphih,41,3643,python3,"class Solution:
    def minZeroArray(self, A: List[int], Q: List[List[int]]) -> int:
        def check(k):
            ds = [(l, v) for l, r, v in islice(Q, k)] + [(r+1, -v) for l, r, v in islice(Q, k)]
            ds.sort(reverse=1)
            cur = 0
            for i, x in enumerate(A):
                while ds and ds[-1][0] <= i:
                    cur += ds.pop()[1]
                # print(i, cur)
                if x > cur: return False
            return True
        l, r = -1, len(Q) + 1
        while l + 1 < r:
            m = (l + r) // 2
            if check(m): r = m
            else: l = m
        return r if r <= len(Q) else -1",1454820480
delphih,delphih,41,3658,python3,"class Solution:
    def minDifference(self, nums: List[int]) -> int:
        n = len(nums)
        max_known_diff = max((abs(x - y) for x, y in pairwise(nums) if x != -1 and y != -1), default=0)
        
        A = []
        slots = []
        for i in range(len(nums)):
            if 0 < i < n-1 and ((nums[i-1] > 0 and nums[i+1] > 0) or (nums[i-1] == -1 and nums[i+1] == -1)):
                continue
            A.append(nums[i])
            if nums[i] == -1: slots.append(len(A) - 1)

        B = []
        prev, previ = 1, -1
        for i, x in enumerate(nums):
            if x > 0 and i > 0 and nums[i-1] == -1:
                if previ == -1: prev = x
                l, r = sorted([prev, x])
                t = 1 if i - previ == 2 or previ == -1 else 2
                B.append((t, l, r))
            if x == -1 and i == len(nums)-1:
                B.append((1, prev, prev))
            if x > 0: prev, previ = x, i
        # print(B)
                
        # adjacents = []
        # for i in range(n):
        #     if nums[i] == -1:
        #         neighbors = []
        #         if i > 0 and nums[i - 1] != -1:
        #             neighbors.append(nums[i - 1])
        #         if i + 1 < n and nums[i + 1] != -1:
        #             neighbors.append(nums[i + 1])
        #         if neighbors:
        #             adjacents.extend(neighbors)

        # print(adjacents)
        # if not adjacents:
        #     return max_known_diff

        # def is_feasible(D):
        #     low_k = 1
        #     high_k = 10**9
        #     for val in adjacents:
        #         l = val - D
        #         r = val + D
        #         low_k = max(low_k, l)
        #         high_k = min(high_k, r)
        #         if low_k > high_k:
        #             return False
        #     return True

        def is_feasible(D):
            mnr = inf
            for t, l, r in B:
                mnr = min(mnr, l + D)
            x = mnr
            mnr = inf
            done = set()
            for i, (t, l, r) in enumerate(B):
                if abs(x - l) <= D and abs(x - r) <= D:
                    done.add(i)
                    continue
                if t == 1:
                    mnr = min(mnr, l + D)
                else:
                    mnr = min(mnr, max(l + D, x + D))
            y = mnr
            # print(x, y)
            for i, (t, l, r) in enumerate(B):
                if i in done: continue
                if abs(y - l) <= D and abs(y - r) <= D:
                    continue
                if t == 1:
                    return False
                else:
                    if not(abs(l - x) <= D and abs(x - y) <= D and abs(y - r) <= D):
                        return False
            return True

        l, r = max_known_diff-1, 10**9
        while l + 1 < r:
            mid = (l + r) // 2
            # print('=' * 10, mid, is_feasible(mid))
            if is_feasible(mid):
                r = mid
            else:
                l = mid

        return r",1454917365
SirTechnical,SirTechnical,44,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        
        def is_valid(i, d):
            arr = [x for x in nums]
            while 0 <= i < len(arr):
                if arr[i] == 0:
                    i += d
                else:
                    arr[i] -= 1
                    d *= -1
                    i += d
            return sum(arr) == 0
        ans = 0
        for i in range(len(nums)):
            if nums[i]: continue
            if is_valid(i, 1): 
                ans += 1
            if is_valid(i, -1):
                ans += 1
        return ans
            ",1454808865
SirTechnical,SirTechnical,44,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int N = nums.size();
        vector<int> diff(N+1, 0);
        for (vector<int>& q : queries) {
            diff[q[0]] += 1;
            diff[q[1]+1] -= 1;
        }
        for (int i = 0; i < N; ++i) diff[i+1] += diff[i];
        for (int i = 0; i < N; ++i) {
            //cout << diff[i] << ' ' << nums[i] << '\n';
            if (diff[i] < nums[i]) {
                return 0;
            }
        }
        return 1;
    }
};",1454813185
SirTechnical,SirTechnical,44,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int N = nums.size();
        
        auto can = [&](int k) {
            if (k > queries.size()) return 1;
            vector<int> diff(N+1, 0);
            for (int j = 0; j < k; ++j) {
                vector<int>& q = queries[j];
                diff[q[0]] += q[2];
                diff[q[1]+1] -= q[2];
            }
            for (int i = 0; i < N; ++i) diff[i+1] += diff[i];
            for (int i = 0; i < N; ++i) if (diff[i] < nums[i]) return 0;
            return 1;
        };
        int lo = 0;
        int hi = queries.size()+1;
        while (lo < hi) {
            int mid = (lo+hi)/2;
            if (!can(mid)) {
                lo = mid+1;
            } else {
                hi = mid;
            }
        }
        if (lo > queries.size()) return -1;
        return lo;
    }
};",1454819809
SirTechnical,SirTechnical,44,3658,python3,"class Solution:
    def minDifference(self, nums: List[int]) -> int:
        arr = []
        for n in nums:
            if n == -1 and arr and arr[-1] <= -1:
                if arr[-1] == -1: arr[-1] = -2
            else:
                arr.append(n)
        N = len(arr)
        if arr[0] == -2:
            arr[0] = -1
        if arr[-1] == -2:
            arr[-1] = -1
        if N <= 1: return 0
    
        def can(d, nums_close=False):
            if nums_close == False:
                if can(d, True):
                    return True
            ranges = []
            
            def apply_range(lo, hi) -> bool:
                if not lo <= hi: return False
                nonlocal ranges
                ranges.append((lo,hi))
                return True
            
            for i in range(len(arr)):                        
                if arr[i] == -1 or (arr[i] == -2 and not nums_close):
                    lo = -1
                    hi = 10**10
                    if i-1 >= 0:
                        lo = max(lo, arr[i-1]-d)
                        hi = min(hi, arr[i-1]+d)
                    if i+1 < len(arr):
                        lo = max(lo, arr[i+1]-d)
                        hi = min(hi, arr[i+1]+d)
                    if not apply_range(lo, hi): return False
                elif arr[i] == -2:
                    lo = arr[i-1]
                    hi = arr[i+1]
                    if lo>hi: lo,hi = hi,lo
                    clo1 = hi-2*d
                    chi1 = lo+d
                    clo2 = hi-d
                    chi2 = lo+2*d
                    if not apply_range(clo1, chi1): return False
                    if not apply_range(clo2, chi2): return False
                    
            if not ranges: return True
           # print(d, nums_close, ranges, arr)
            
            end = min(hi for lo,hi in ranges)
            ranges2 = []
            for lo,hi in ranges:
                if lo <= end <= hi:
                    pass
                else:
                    ranges2.append((lo,hi))
            if not ranges2: return True
            end2 = min(hi for lo,hi in ranges2)
            if nums_close: end2 = min(end2, end+d)
            for lo,hi in ranges2:
                if lo <= end2 <= hi:
                    pass
                else:
                    return False
            return True
                
        
        lo = 0
        for i in range(1,len(arr)):
            if arr[i-1] >= 0 and arr[i] >= 0:
                lo = max(lo, abs(arr[i-1]-arr[i]))
        hi = 10**9+10
        while lo < hi:
            mid = (lo+hi)//2
            if can(mid):
                hi = mid
            else:
                lo = mid+1
       # print(""========================="")
        return lo",1454895730
Tin,tin_le,45,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& a) {
        int n = a.size();
        int res = 0;
        int sm = accumulate(begin(a), end(a), 0);
        for(int i = 0, p = 0; i < n; i++) {
            sm -= a[i];
            p += a[i];
            if(a[i] == 0) {
                if(sm == p) res += 2;
                else if(abs(sm - p) == 1) res++;
            }
        }
        return res;
    }
};",1454809501
Tin,tin_le,45,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& a, vector<vector<int>>& q) {
        int n = a.size();
        vector<int> dp(n + 1);
        for(auto& it : q) {
            int l = it[0], r = it[1];
            dp[l]++;
            dp[r + 1]--;
        }
        for(int i = 0; i < n; i++) {
            if(i) dp[i] += dp[i - 1];
            if(a[i] > dp[i]) return false;
        }
        return true;
    }
};",1454813437
Tin,tin_le,45,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& a, vector<vector<int>>& q) {
        auto f = [&](int k) -> bool {
            int n = a.size();
            vector<int> dp(n + 1);
            for(int i = 0; i < k; i++) {
                auto& it = q[i];
                int l = it[0], r = it[1], v = it[2];
                dp[l] += v;
                dp[r + 1] -= v;
            }
            for(int i = 0; i < n; i++) {
                if(i) dp[i] += dp[i - 1];
                if(a[i] > dp[i]) return false;
            }
            return true;
        };
        int left = 0, right = q.size(), res = -1;
        while(left <= right) {
            int middle = left + (right - left) / 2;
            if(f(middle)) res = middle, right = middle - 1;
            else left = middle + 1;
        } 
        return res;
    }
};",1454819639
Tin,tin_le,45,3658,cpp,"class Solution {
public:
    int minDifference(vector<int>& b) {
        using ll = long long;
        int inf = 1e9;
        int n = b.size();
        int mn = inf, mx = -inf;
        for(int i = 0; i < n; i++) {
            if(b[i] == -1) {
                if(i && b[i - 1] != -1) {
                    mx = max(mx, b[i - 1]);
                    mn = min(mn, b[i - 1]);
                }
                if(i < n - 1 && b[i + 1] != -1) {
                    mn = min(mn, b[i + 1]);
                    mx = max(mx, b[i + 1]);
                }
            }
        }
        auto f = [&](int l, int r) -> int {
            vector<int> a(b);
            auto g = [](int a, int b, int c) -> ll {
                return max(abs(a - b), abs(b - c)); 
            };
            for(int i = 0; i < n; i++) {
                if(a[i] != -1) continue;
                if(i && i < n - 1 && a[i - 1] != -1 && a[i + 1] != -1) {
                    if(g(a[i - 1], l, a[i + 1]) < g(a[i - 1], r, a[i + 1])) a[i] = l;
                    else a[i] = r;
                    continue;
                }
                if(i && a[i - 1] != -1) {
                    if(g(a[i - 1], l, l) < g(a[i - 1], r, r)) a[i] = l;
                    else a[i] = r;
                    continue;
                }
                if(i < n - 1 && a[i + 1] != -1) {
                    if(g(a[i + 1], l, l) < g(a[i + 1], r, r)) a[i] = l;
                    else a[i] = r;
                    continue;
                }
                a[i] = l;
            }
            int res = 0;
            for(int i = 1; i < n; i++) {
                res = max(res, abs(a[i] - a[i - 1])); 
            }
            return res;
        };
        if(mx == -inf) {
            return f(0, 0);
        }
        int extra = (mx + mn) % 2;
        int k = (mx + mn) / 2;
        int left = 0, right = k - mn, res = inf;
        auto get_pair = [&](int x) -> pair<int, int> {
            return {k - x, k + x + extra};
        };
        while(left <= right) {
            int middle = left + (right - left) / 2;
            auto [lx, rx] = get_pair(middle);
            auto [ly, ry] = get_pair(middle + 1);
            int x = f(lx, rx), y = f(ly, ry);
            res = min(x, y);
            if(x > y) left = middle + 1;
            else right = middle - 1;
        }
        return res;
    }
};",1454876333
Sanath_Kulla,Sanath_Kulla,46,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int ans = 0;
        int sum = 0;
        int n = nums.size();
        for(int i = 0 ; i < n ; i++){
            sum += nums[i];
        }
        int x = 0;
        for(int i = 0 ; i < n ; i++){
            x += nums[i];
            if(nums[i] == 0){
                if(abs(x - (sum-x)) == 0)ans+=2;
                else if(abs(x - (sum-x)) == 1)ans++;
            }
        }
        return ans;
    }
};",1454808128
Sanath_Kulla,Sanath_Kulla,46,3639,cpp,"
 

 #define int long long
struct node{
    int sum , mx , mn , inc = 0  , set = 0;
    bool is_set = false;
};
 
void merge(vector<node> &seg , int ind){
     seg[ind].sum = seg[2*ind+1].sum + seg[2*ind+2].sum;
     seg[ind].mn = min(seg[2*ind+1].mn , seg[2*ind+2].mn);
     seg[ind].mx = max(seg[2*ind+1].mx , seg[2*ind+2].mx);
}
 
node find_node(node one , node two){
    node res;
    res.sum = one.sum + two.sum;
    res.mx = max(one.mx , two.mx);
    res.mn = min(two.mn , one.mn);
    return res;
}
 
node initial(){
    node res;
    res.sum = 0 , res.mx = INT_MIN , res.mn = INT_MAX , res.inc = 0 , res.set = 0 , res.is_set = 0;
    return res;
}
 
int N;
class sgtree // use inc = false to set in update function
{
    vector<node> seg;
 
public:
    sgtree(int N)
    {
        seg.resize(4 * N + 10);
    }
 
    void build(vector<int> &arr , int ind = 0, int low = 0, int high = N-1)
    {
        if (low == high)
        {
            seg[ind].sum = seg[ind].mx = seg[ind].mn = arr[low];
            return;
        }
 
        int mid = (low + high) / 2;
        build(arr , 2 * ind + 1, low, mid);
        build(arr , 2 * ind + 2, mid + 1, high);
        merge(seg , ind);
    }
    void default_build(int ind = 0, int low = 0, int high = N-1)
    {
        if (low == high)
        {
            seg[ind].sum = 0;
            seg[ind].mx = INT_MIN;
            seg[ind].mn = INT_MAX;
            return;
        }
 
        int mid = (low + high) / 2;
        default_build(2 * ind + 1, low, mid);
        default_build(2 * ind + 2, mid + 1, high);
        merge(seg , ind);
    }
 
    void update(int l , int r , int val ,bool inc = true, int ind  = 0 ,  int low = 0, int high = N - 1) // l , r , val
    {
        if(seg[ind].is_set){
            seg[ind].sum = (high - low + 1)*seg[ind].set;
            seg[ind].mx = seg[ind].mn = seg[ind].set;
            if(low != high){
                    seg[2*ind+1].is_set = 1;
                    seg[2*ind+1].inc = 0;
                    seg[2*ind+1].set = seg[ind].set;
                    seg[2*ind+2].is_set = 1;
                    seg[2*ind+2].inc = 0;
                    seg[2*ind+2].set = seg[ind].set;  
            }
            seg[ind].is_set = 0;
        }
        if(seg[ind].inc != 0){
            seg[ind].sum += (high - low + 1)*seg[ind].inc;
            seg[ind].mn += seg[ind].inc;
            seg[ind].mx += seg[ind].inc;
            if(low != high){
                    seg[2*ind+1].inc += seg[ind].inc;
                    seg[2*ind+2].inc += seg[ind].inc;
            }        
            seg[ind].inc = 0;    
        }
 
        if (l > high || r < low || low > high)
            return;
 
        if (low >= l && high <= r)
        { 
            if(inc){
            seg[ind].sum += (high - low + 1) * val;
            seg[ind].mn += val;
            seg[ind].mx += val;
 
            if (low != high)
            {
                    seg[2*ind+1].inc += val;
                    seg[2*ind+2].inc += val;
            }
           }else{
            seg[ind].sum = (high - low + 1) * val;
            seg[ind].mn = val;
            seg[ind].mx = val;
            seg[ind].inc = 0;
            if (low != high)
            {
                seg[2*ind+1].is_set = 1 , seg[2*ind+1].set = val , seg[2*ind+1].inc = 0;
                seg[2*ind+2].is_set = 1 , seg[2*ind+2].set = val , seg[2*ind+2].inc = 0;
            }
           }
            return;

        }
 
        int mid = (low + high) / 2;
        update(l , r , val , inc , 2 * ind + 1, low, mid);
        update(l , r, val , inc , 2 * ind + 2, mid + 1, high);
        merge(seg , ind);
    }
 

 
    node query(int l , int r , int ind = 0 , int low =  0 , int high = N-1) // l , r
    {
       if(seg[ind].is_set){
            seg[ind].sum = (high - low + 1)*seg[ind].set;
            seg[ind].mx = seg[ind].mn = seg[ind].set;
            if(low != high){
                    seg[2*ind+1].is_set = 1;
                    seg[2*ind+1].inc = 0;
                    seg[2*ind+1].set = seg[ind].set;
                    seg[2*ind+2].is_set = 1;
                    seg[2*ind+2].inc = 0;
                    seg[2*ind+2].set = seg[ind].set;  
            }
            seg[ind].is_set = 0;
        }
        if(seg[ind].inc != 0){
            seg[ind].sum += (high - low + 1)*seg[ind].inc;
            seg[ind].mn += seg[ind].inc;
            seg[ind].mx += seg[ind].inc;
            if(low != high){
                    seg[2*ind+1].inc += seg[ind].inc;
                    seg[2*ind+2].inc += seg[ind].inc;
            }        
            seg[ind].inc = 0;    
        }
 
        if (l > high || r < low || low > high)
        {
            return initial();
        }
 
        if (low >= l && high <= r)
        {
            return seg[ind];
        }
 
        int mid = (low + high) / 2;
        return find_node(query(l , r , 2 * ind + 1, low, mid) ,  query(l , r , 2 * ind + 2, mid + 1, high));
    }

        int findFirst(int ind , int lo , int hi , int l , int r,int val){
        if(l > hi or r < lo or lo > hi or seg[ind].mx < val){
            return (int)1e9;
        }
        if(lo == hi){
            return lo;
        }
        int mid = (lo+hi)/2;
        if(lo >= l and hi <= r){
            if(seg[ind].mx >= val){
                if(lo <= mid and seg[2*ind+1].mx >= val)return findFirst(2*ind+1 , lo , mid , l , r , val);
                if(mid+1 <= hi and seg[2*ind+2].mx >= val)return findFirst(2*ind+2 , mid+1 , hi , l , r , val);
            }
            return (int)1e9;
        }

        return min(findFirst(2*ind+1 , lo , mid , l ,r , val) , findFirst(2*ind+2 , mid+1 , hi , l , r , val));
    }

};
 #undef int
class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        N = n;
        sgtree sg(n);
        vector<long long> v;
        for(auto it:nums)v.push_back(it);
        sg.build(v);
        if(sg.query(0 , n-1).mx == 0)return true;
        int k = 0;
        for(auto it:queries){
            k++;
            int l = it[0] , r = it[1] , val = 1;
            sg.update(l , r , -val);
            if(sg.query(0 , n-1).mx <= 0)return true;
        }
        return false;
    }
};",1454824202
Sanath_Kulla,Sanath_Kulla,46,3643,cpp,"
 

 #define int long long
struct node{
    int sum , mx , mn , inc = 0  , set = 0;
    bool is_set = false;
};
 
void merge(vector<node> &seg , int ind){
     seg[ind].sum = seg[2*ind+1].sum + seg[2*ind+2].sum;
     seg[ind].mn = min(seg[2*ind+1].mn , seg[2*ind+2].mn);
     seg[ind].mx = max(seg[2*ind+1].mx , seg[2*ind+2].mx);
}
 
node find_node(node one , node two){
    node res;
    res.sum = one.sum + two.sum;
    res.mx = max(one.mx , two.mx);
    res.mn = min(two.mn , one.mn);
    return res;
}
 
node initial(){
    node res;
    res.sum = 0 , res.mx = INT_MIN , res.mn = INT_MAX , res.inc = 0 , res.set = 0 , res.is_set = 0;
    return res;
}
 
int N;
class sgtree // use inc = false to set in update function
{
    vector<node> seg;
 
public:
    sgtree(int N)
    {
        seg.resize(4 * N + 10);
    }
 
    void build(vector<int> &arr , int ind = 0, int low = 0, int high = N-1)
    {
        if (low == high)
        {
            seg[ind].sum = seg[ind].mx = seg[ind].mn = arr[low];
            return;
        }
 
        int mid = (low + high) / 2;
        build(arr , 2 * ind + 1, low, mid);
        build(arr , 2 * ind + 2, mid + 1, high);
        merge(seg , ind);
    }
    void default_build(int ind = 0, int low = 0, int high = N-1)
    {
        if (low == high)
        {
            seg[ind].sum = 0;
            seg[ind].mx = INT_MIN;
            seg[ind].mn = INT_MAX;
            return;
        }
 
        int mid = (low + high) / 2;
        default_build(2 * ind + 1, low, mid);
        default_build(2 * ind + 2, mid + 1, high);
        merge(seg , ind);
    }
 
    void update(int l , int r , int val ,bool inc = true, int ind  = 0 ,  int low = 0, int high = N - 1) // l , r , val
    {
        if(seg[ind].is_set){
            seg[ind].sum = (high - low + 1)*seg[ind].set;
            seg[ind].mx = seg[ind].mn = seg[ind].set;
            if(low != high){
                    seg[2*ind+1].is_set = 1;
                    seg[2*ind+1].inc = 0;
                    seg[2*ind+1].set = seg[ind].set;
                    seg[2*ind+2].is_set = 1;
                    seg[2*ind+2].inc = 0;
                    seg[2*ind+2].set = seg[ind].set;  
            }
            seg[ind].is_set = 0;
        }
        if(seg[ind].inc != 0){
            seg[ind].sum += (high - low + 1)*seg[ind].inc;
            seg[ind].mn += seg[ind].inc;
            seg[ind].mx += seg[ind].inc;
            if(low != high){
                    seg[2*ind+1].inc += seg[ind].inc;
                    seg[2*ind+2].inc += seg[ind].inc;
            }        
            seg[ind].inc = 0;    
        }
 
        if (l > high || r < low || low > high)
            return;
 
        if (low >= l && high <= r)
        { 
            if(inc){
            seg[ind].sum += (high - low + 1) * val;
            seg[ind].mn += val;
            seg[ind].mx += val;
 
            if (low != high)
            {
                    seg[2*ind+1].inc += val;
                    seg[2*ind+2].inc += val;
            }
           }else{
            seg[ind].sum = (high - low + 1) * val;
            seg[ind].mn = val;
            seg[ind].mx = val;
            seg[ind].inc = 0;
            if (low != high)
            {
                seg[2*ind+1].is_set = 1 , seg[2*ind+1].set = val , seg[2*ind+1].inc = 0;
                seg[2*ind+2].is_set = 1 , seg[2*ind+2].set = val , seg[2*ind+2].inc = 0;
            }
           }
            return;

        }
 
        int mid = (low + high) / 2;
        update(l , r , val , inc , 2 * ind + 1, low, mid);
        update(l , r, val , inc , 2 * ind + 2, mid + 1, high);
        merge(seg , ind);
    }
 

 
    node query(int l , int r , int ind = 0 , int low =  0 , int high = N-1) // l , r
    {
       if(seg[ind].is_set){
            seg[ind].sum = (high - low + 1)*seg[ind].set;
            seg[ind].mx = seg[ind].mn = seg[ind].set;
            if(low != high){
                    seg[2*ind+1].is_set = 1;
                    seg[2*ind+1].inc = 0;
                    seg[2*ind+1].set = seg[ind].set;
                    seg[2*ind+2].is_set = 1;
                    seg[2*ind+2].inc = 0;
                    seg[2*ind+2].set = seg[ind].set;  
            }
            seg[ind].is_set = 0;
        }
        if(seg[ind].inc != 0){
            seg[ind].sum += (high - low + 1)*seg[ind].inc;
            seg[ind].mn += seg[ind].inc;
            seg[ind].mx += seg[ind].inc;
            if(low != high){
                    seg[2*ind+1].inc += seg[ind].inc;
                    seg[2*ind+2].inc += seg[ind].inc;
            }        
            seg[ind].inc = 0;    
        }
 
        if (l > high || r < low || low > high)
        {
            return initial();
        }
 
        if (low >= l && high <= r)
        {
            return seg[ind];
        }
 
        int mid = (low + high) / 2;
        return find_node(query(l , r , 2 * ind + 1, low, mid) ,  query(l , r , 2 * ind + 2, mid + 1, high));
    }

        int findFirst(int ind , int lo , int hi , int l , int r,int val){
        if(l > hi or r < lo or lo > hi or seg[ind].mx < val){
            return (int)1e9;
        }
        if(lo == hi){
            return lo;
        }
        int mid = (lo+hi)/2;
        if(lo >= l and hi <= r){
            if(seg[ind].mx >= val){
                if(lo <= mid and seg[2*ind+1].mx >= val)return findFirst(2*ind+1 , lo , mid , l , r , val);
                if(mid+1 <= hi and seg[2*ind+2].mx >= val)return findFirst(2*ind+2 , mid+1 , hi , l , r , val);
            }
            return (int)1e9;
        }

        return min(findFirst(2*ind+1 , lo , mid , l ,r , val) , findFirst(2*ind+2 , mid+1 , hi , l , r , val));
    }

};
 #undef int
class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        N = n;
        sgtree sg(n);
        vector<long long> v;
        for(auto it:nums)v.push_back(it);
        sg.build(v);
        if(sg.query(0 , n-1).mx == 0)return 0;
        int k = 0;
        for(auto it:queries){
            k++;
            int l = it[0] , r = it[1] , val = it[2];
            sg.update(l , r , -val);
            if(sg.query(0 , n-1).mx <= 0)return k;
        }
        return -1;
    }
};",1454821856
Sanath_Kulla,Sanath_Kulla,46,3658,cpp,"const int N = 1e5+10 , NN = 3;
int dp[N][NN];
class Solution {
public:
    int minDifference(vector<int>& nums) {
        #define int long long
        using ll = long long;
        int cnt = 0;
        int n = nums.size();
        ll d = -1;
        
        for(int  i = 0 ; i < n ; i++){
            if(nums[i] == -1)cnt++;
            if(i and nums[i] != -1 and nums[i-1] != -1)d = max<ll>(d , abs(nums[i] - nums[i-1]));
        }
        if(cnt == n or cnt == n-1){
            return 0;
        }
        if(cnt == 0){
            return d;
        }
        d = max<ll>(0 , d);
        ll lo = d , hi = 3e9;
        ll ans = hi;
        while(lo <= hi){
            ll mid = (lo+hi)/2;
            vector<pair<ll,ll>> vp;
            for(int i = 0 ; i < n ; i++){
                dp[i][0] = dp[i][1] = dp[i][2] = -1;
                if(nums[i] == -1){
                    if(i-1>=0 and nums[i-1] != -1){
                        vp.push_back({nums[i-1] - mid , nums[i-1]+mid});
                    }
                    if(i+1 < n and nums[i+1] != -1){
                        vp.push_back({nums[i+1] - mid , nums[i+1]+mid});
                    }
                }
            }
            sort(vp.begin() , vp.end());
            int cnt = 1;
            int maxi = vp[0].second;
            ll x = -1 , y = -1;
            for(int i = 1 ; i < vp.size() ; i++){
                if(maxi < vp[i].first){
                    x = maxi;
                    maxi = vp[i].second;
                    cnt++;
                }else{
                    maxi = min<ll>(maxi , vp[i].second);
                }
            }
            if(cnt > 2){
                lo = mid+1;
                continue;
            }
            if(cnt == 2){
                y = vp.back().first;
            }else{
                x = y = vp.back().first;
            }
            //check for this (x , y)
            auto find = [&](auto &&self , int ind , int prev)->bool{
                  if(ind >= n)return true;
                  if(dp[ind][prev] != -1)return (bool)dp[ind][prev];
                  bool yes = 0;
                  //0-x , 1-y,2-fix
                  if(nums[ind] != -1){
                      if(prev == 2){
                          yes |= self(self , ind+1 , 2);
                      }
                      if(prev == 0){
                          yes |= (abs(nums[ind] - x) <= mid) & (self(self , ind+1 , 2));
                      }
                      if(prev == 1){
                          yes |= (abs(nums[ind] - y) <= mid) & (self(self , ind+1 , 2)); 
                      }
                  }else{
                       //try x
                      if(prev == 2){
                          if(ind-1>=0){
                              if(abs(nums[ind-1] - x) <= mid){
                                  yes |= self(self , ind+1 , 0);
                              }
                          }else{
                                  yes |= self(self , ind+1 , 0);
                          }
                      }
                      if(prev == 0){
                          yes |= (abs(x - x) <= mid) & (self(self , ind+1 , 0));
                      }
                      if(prev == 1){
                          yes |= (abs(x - y) <= mid) & (self(self , ind+1 , 0)); 
                      }
                      //try y
                      if(prev == 2){
                          if(ind-1>=0){
                              if(abs(nums[ind-1] - y) <= mid){
                                  yes |= self(self , ind+1 , 1);
                              }
                          }else{
                                  yes |= self(self , ind+1 , 1);
                          }
                      }
                      if(prev == 0){
                          yes |= (abs(y - x) <= mid) & (self(self , ind+1 , 1));
                      }
                      if(prev == 1){
                          yes |= (abs(y - y) <= mid) & (self(self , ind+1 , 1)); 
                      }
                  }
                return (bool)(dp[ind][prev] = yes);
            };
            
            if(find(find , 0 , 2)){
                // cout<<mid<<"" ""<<x<<"" ""<<y<<endl;
                ans = mid;
                hi = mid-1;
            }else{
                lo = mid+1;
            }
            // return false;
            
        }
        #undef int
        return ans;
    }
};",1454898423
JeffreyLC,JeffreyLC,48,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        const int n = nums.size();
        vector<int> x(n), y(n);
        for (int i = 1; i < n; ++i) {
            x[i] = x[i - 1] + nums[i - 1];
        }
        for (int i = n - 2; i >= 0; --i) {
            y[i] = y[i + 1] + nums[i + 1];
        }
        int ans = 0;
        for (int i = 0; i < n; ++i) {
            if (nums[i] != 0) continue;
            if (x[i] == y[i]) {
                ans += 2;
            } else if (abs(x[i] - y[i]) == 1) {
                ++ans;
            }
        }
        return ans;
    }
};",1454809548
JeffreyLC,JeffreyLC,48,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        const int n = nums.size();
        vector<int> v(n);
        for (const vector<int>& q : queries) {
            ++v[q[0]];
            if (q[1] + 1 < n) {
                --v[q[1] + 1];
            }
        }
        for (int i = 1; i < n; ++i) {
            v[i] += v[i - 1];
        }
        for (int i = 0; i < n; ++i) {
            if (v[i] < nums[i]) return false;
        }
        return true;
    }
};",1454813761
JeffreyLC,JeffreyLC,48,3643,cpp,"class SegmentTree {
 public:
    SegmentTree(const vector<int>& nums) {
        n_ = nums.size();
        segs_.resize(n_ << 2, 0);
        lazy_.resize(n_ << 2, 0);
        Build(nums, 0, n_ - 1, 1);
    }
    
    long long Query(int lq, int rq) {
        return QueryUtil(0, n_ - 1, 1, lq, rq);
    }
    
    void UpdateRange(int lq, int rq, long long diff) {
        UpdateRangeUtil(0, n_ - 1, 1, lq, rq, diff);
    }
    
 private:
    int n_;
    vector<long long> segs_;
    vector<long long> lazy_;
    
    void Build(const vector<int>& nums, int l, int r, int id) {
        if (l == r) {
            segs_[id] = nums[l];
        } else {
            int mid = (l + r) >> 1;
            Build(nums, l, mid, id * 2);
            Build(nums, mid + 1, r, id * 2 + 1);
            segs_[id] = max(segs_[id * 2], segs_[id * 2 + 1]);
        }
    }
    
    long long QueryUtil(int l, int r, int id, int lq, int rq) {
        if (lazy_[id] != 0) {
            segs_[id] += lazy_[id];
            if (l != r) {
                lazy_[id * 2] += lazy_[id];
                lazy_[id * 2 + 1] += lazy_[id];
            }
            lazy_[id] = 0;
        }
        if (r < lq || l > rq) return LLONG_MIN;
        if (lq <= l && r <= rq) return segs_[id];
        int mid = (l + r) >> 1;
        return max(QueryUtil(l, mid, id * 2, lq, rq), QueryUtil(mid + 1, r, id * 2 + 1, lq, rq));
    }
    
    void UpdateRangeUtil(int l, int r, int id, int lq, int rq, long long diff) {
        if (lazy_[id] != 0) {
            segs_[id] += lazy_[id];
            if (l != r) {
                lazy_[id * 2] += lazy_[id];
                lazy_[id * 2 + 1] += lazy_[id];
            }
            lazy_[id] = 0;
        }
        if (r < lq || l > rq) return;
        if (lq <= l && r <= rq) {
            segs_[id] += diff;
            if (l != r) {
                lazy_[id * 2] += diff;
                lazy_[id * 2 + 1] += diff;
            }
        } else {
            int mid = (l + r) >> 1;
            UpdateRangeUtil(l, mid, id * 2, lq, rq, diff);
            UpdateRangeUtil(mid + 1, r, id * 2 + 1, lq, rq, diff);
            segs_[id] = max(segs_[id * 2], segs_[id * 2 + 1]);
        }
    }
};

class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        const int n = nums.size();
        SegmentTree seg_tree = SegmentTree(nums);
        if (seg_tree.Query(0, n - 1) <= 0) return 0;
        for (int i = 0; i < queries.size(); ++i) {
            seg_tree.UpdateRange(queries[i][0], queries[i][1], -queries[i][2]);
            if (seg_tree.Query(0, n - 1) <= 0) return i + 1;
        }
        return -1;
    }
};",1454825327
JeffreyLC,JeffreyLC,48,3658,cpp,"class Solution {
public:
    int minDifference(vector<int>& nums) {
        const int n = nums.size();
        vector<int> a;
        vector<pair<int, int>> one, two;
        vector<pair<int, int>> v;
        for (int i = 0; i < n; ++i) {
            if (nums[i] != -1) {
                v.push_back({nums[i], i});
            }
        }
        if (v.size() <= 1) return 0;
        if (v[0].second != 0) a.push_back(v[0].first);
        if (v.back().second != n - 1) a.push_back(v.back().first);
        int max_diff = 0;
        for (int i = 1; i < v.size(); ++i) {
            int x = min(v[i - 1].first, v[i].first);
            int y = max(v[i - 1].first, v[i].first);
            int val_diff = y - x;
            int index_diff = v[i].second - v[i - 1].second;
            if (index_diff == 1) {
                max_diff = max(max_diff, val_diff);
            } else if (index_diff == 2) {
                one.push_back({x, y});
                max_diff = max(max_diff, (val_diff + 1) / 2);
            } else {
                two.push_back({x, y});
                max_diff = max(max_diff, (val_diff + 2) / 3);
            }
        }
        int l = max_diff, r = 1e9;
        while (l < r) {
            int m = (l + r) / 2;
            int choice = INT_MAX;
            for (int num : a) {
                choice = min(choice, num + m);
            }
            for (auto [fst, snd] : one) {
                choice = min(choice, fst + m);
            }
            for (auto [fst, snd] : two) {
                choice = min(choice, fst + m);
            }
            vector<pair<int, int>> intervals;
            for (int num : a) {
                if (num - m <= choice && choice <= num + m) continue;
                intervals.push_back({num - m, num + m});
            }
            for (auto [fst, snd] : one) {
                if (snd - m <= choice && choice <= fst + m) continue;
                intervals.push_back({snd - m, fst + m});
            }
            for (auto [fst, snd] : two) {
                if (snd - m * 2 <= choice && choice <= fst + m) {
                    int x = min(choice, snd);
                    int y = max(choice, snd);
                    if (y - m <= choice && choice <= x + m) continue;
                    intervals.push_back({y - m, x + m});
                } else {
                    if (snd - m <= choice && choice <= fst + m) continue;
                    intervals.push_back({snd - m, fst + m});
                }
            }
            int c = INT_MIN, d = INT_MAX;
            for (pair<int, int> p : intervals) {
                c = max(c, p.first);
                d = min(d, p.second);
            }
            if (c <= d) {
                r = m;
            } else {
                l = m + 1;
            }
        }
        return l;
    }
};",1454907147
kailam11223,kailam11223,50,3616,cpp,"class Solution {
private:
    bool cal(vector<int> v, int i, int dir){
        while(i >= 0 && i < v.size()){
            if(v[i] > 0){
                v[i]--;
                dir*=-1;
            }
            i += dir;
        }
        for(auto x : v){
            if(x > 0) return false;
        }
        return true;
    }
public:
    int countValidSelections(vector<int>& nums) {
        int ret = 0;
        for(int i = 0; i < nums.size(); ++i){
            if(nums[i] > 0) continue;
            ret += cal(nums, i, -1);
            ret += cal(nums, i, 1);
        }
        return ret;
    }
};",1454811737
kailam11223,kailam11223,50,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        vector<int> ps(n+1, 0);
        for(const auto& q : queries){
            ps[q[0]]++;
            ps[q[1]+1]--;
        }
        
        int s = 0;
        for(int i = 0; i < n; ++i){
            s += ps[i];
            if(s < nums[i]) return false;
        }
        return true;
    }
};",1454820394
kailam11223,kailam11223,50,3643,cpp,"class Solution {
private:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries, int k) {
        int n = nums.size();
        vector<int> ps(n+1, 0);
        for(int i = 0; i < k ; ++i){
            auto q = queries[i];
            ps[q[0]]+=q[2];
            ps[q[1]+1]-=q[2];
        }
        
        int s = 0;
        // cout<<endl<<""k=""<<k<<endl;;
        for(int i = 0; i < n; ++i){
            // cout<<s<<"","";
            s += ps[i];
            if(s < nums[i]) return false;
        }
        return true;
    }
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int l = 0; int r = queries.size();
        while(l < r){
            int m = (l+r)>>1;
            if(isZeroArray(nums, queries, m)){
                r = m;
            } else {
                l = m+1;
            }
        }
        return isZeroArray(nums, queries, l)?l:-1;
    }
};",1454835209
kailam11223,kailam11223,50,3658,cpp,"class Solution {
private:
    bool test(vector<int> nums, int d){
        vector<pair<int, int>> ivls;
        int x1 = m+d;
        int x2 = M-d;
        if(x2<x1)swap(x1, x2);
        // cout<<""x1=""<<x1<<"", x2=""<<x2<<"", d=""<<d<<endl;
        for(int i = 0; i < n; ++i){
            int x = nums[i];
            // cout<<x<<"" ,nxt=""<<nxt[i]<<endl;
            if(nxt[i]==-1) {
                if(x==-1||(i+1==n)) return true;
                if(abs(x-x1) <= d) return true;
                if(abs(x-x2) <= d) return true;
                return false;
            }
            if(x==-1) {
                if(abs(nxt[i]-x1)<=d) continue;
                if(abs(nxt[i]-x2)<=d) continue;
                return false;
            }
            if(nums[i+1]!=-1){
                if(abs(x-nums[i+1]) > d) return false;
                continue;
            }
            // cout<<""here""<<endl;
            if(abs(x-x2) <= d && abs(nxt[i]-x2) <= d){
                nums[i+1] = x2;
                continue;
            }
            if(abs(x-x1) <= d && abs(nxt[i]-x1) <= d){
                nums[i+1] = x1;
                continue;
            }
            if(nxt[i]>=x){
                if(abs(x-x1) > d) return false;
                nums[i+1] = x1;
            } else {
                if(abs(x-x2) > d) return false;
                nums[i+1] = x2;
            }
        }
        return true;
    }
public:
    int minDifference(vector<int>& nums) {
        n = nums.size();
        int l = 0; int r = 0;
        for(int i = 0; i < n; ++i){
            r = max(r, nums[i]);
            if(nums[i]==-1) continue;
            if((i > 0 && nums[i-1]==-1)||(i+1 < n && nums[i+1]==-1)){
                m = min(m, nums[i]);
                M = max(M, nums[i]);
            }
            if(nums[i]!=-1 && i > 0 && nums[i-1]!=-1){
                l = max(l, abs(nums[i]-nums[i-1]));
            }
        }
        
        nxt = vector<int>(n, -1);
        for(int i = n-2; i >= 0; --i){
            nxt[i] = (nums[i+1]!=-1)?nums[i+1]:nxt[i+1];
        }
        // cout<<""m=""<<m<<"", M=""<<M<<endl;
        while(l < r){
            // cout<<""l=""<<l<<"", r=""<<r<<endl;
            int m = (l+r)>>1;
            if(test(nums, m)){
                r = m;
            } else {
                l = m+1;
            }
        }
        return l;
    }
private:
int n;
int m = 1e9;
int M = 0;
vector<int> nxt;
};",1454922736
Md Abedin,MdAbedin,52,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        return sum({0:2,1:1}.get(abs(sum(nums[:i])-sum(nums[i+1:])),0) if nums[i] == 0 else 0 for i in range(len(nums)))",1454820915
Md Abedin,MdAbedin,52,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        subs = [0]*(len(nums)+1)

        for l,r in queries:
            subs[l] += 1
            subs[r+1] -= 1

        subs = list(accumulate(subs))

        return all(s >= x for x,s in zip(nums,subs))
",1454823356
Md Abedin,MdAbedin,52,3643,python3,"class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        def works(k):
            subs = [0]*(len(nums)+1)
    
            for l,r,v in queries[:k]:
                subs[l] += v
                subs[r+1] -= v
    
            subs = list(accumulate(subs))
    
            return all(s >= x for x,s in zip(nums,subs))

        return -1 if (ans:=bisect_left(range(len(queries)+1),True,key=works)) == len(queries)+1 else ans",1454826423
Md Abedin,MdAbedin,52,3658,python3,"class Solution:
    def minDifference(self, nums: List[int]) -> int:
        ranges = []
        s = []
        ans = 0

        for num in nums:
            if num == -1:
                if s and s[-1][0] == -1: s[-1][1] += 1
                else: s.append([-1,1])
            else:
                if not s:
                    s.append([num,1])
                elif s[-1][0] != -1:
                    num2 = s.pop()[0]
                    ans = max(ans,abs(num-num2))
                    s.append([num,1])
                else:
                    _,c = s.pop()
                    num2 = s.pop()[0] if s else num
                    ranges.append([min(c,2),min(num,num2),max(num,num2)])
                    s.append([num,1])

        if len(s) == 2:
            _,c = s.pop()
            num = s.pop()[0]
            ranges.append([max(c,2),num,num])

        if not ranges: return ans

        m1,m2 = min(x for r in ranges for x in r[1:]),max(x for r in ranges for x in r[1:])
        
        def works(d):
            x,y = sorted([m1+d,m2-d])

            for t,x1,x2 in ranges:
                if t == 1:
                    if min(max(x-x1,x2-x),max(y-x1,x2-y)) > d: return False
                else:
                    if min(max(x-x1,x2-x),max(y-x1,x2-y)) <= d: continue
                    if max(x-x1,y-x,x2-y) <= d: continue
                    return False

            return True

        ans = max(ans,bisect_left(range(10**9),True,key=works))
        
        return ans






























        ",1454911667
Gaurish Baliga,notQueue,53,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& a) {
        
        int n = a.size();
        vector<int>prefix(n + 2), suffix(n + 2);
        
        for(int i = 1; i <= n; i++) {
            prefix[i] = (prefix[i - 1] + a[i - 1]);
        }
        
        for(int i = n; i >= 1; i--) {
            suffix[i] = (suffix[i + 1] + a[i - 1]);
        }
        
        int answer = 0;
        
        for(int i = 1; i <= n; i++) {
            if(a[i - 1] != 0) continue;
            
            if(prefix[i - 1] >= suffix[i + 1] && prefix[i - 1] - suffix[i + 1] <= 1) {
                answer++;
            }
            
            if(prefix[i - 1] <= suffix[i + 1] && suffix[i + 1] - prefix[i - 1] <= 1) {
                answer++;
            }
        }
        
        return answer;
        
    }
};",1454822925
Gaurish Baliga,notQueue,53,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        
        vector<long long>prefix(n + 1);
        
        for(auto &i : queries) {
            prefix[i[0]] += 1;
            prefix[i[1] + 1] -= 1; 
        }
        
        for(int i = 0; i < n; i++) {
            if(i) prefix[i] += prefix[i - 1];
            if(prefix[i] < nums[i]) return false;
        }
        return true;
    }
};",1454829338
Gaurish Baliga,notQueue,53,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        
        auto okay = [&](int x) -> bool {
            vector<long long>prefix(n + 1);
        
            for(int i = 0; i < x; i++) {
                prefix[queries[i][0]] += queries[i][2];
                prefix[queries[i][1] + 1] -= queries[i][2]; 
            }

            for(int i = 0; i < n; i++) {
                if(i) prefix[i] += prefix[i - 1];
                if(prefix[i] < nums[i]) return false;
            }
            
            return true;
        };
        

        
        int left = 0, right = queries.size(), answer = -1;
        
        while(left <= right) {
            int mid = (left + right) / 2;
            if(okay(mid)) answer = mid, right = mid - 1;
            else left = mid + 1;
        }
        
        return answer;
    }
};",1454834205
Gaurish Baliga,notQueue,53,3658,cpp,"class Solution {
public:
    int minDifference(vector<int>& nums) {    
        
            ios_base::sync_with_stdio(false);
            cin.tie(NULL);
        
        vector<int>rem;       
        
        int mx = 0;
        
        for(int i = 0; i < nums.size(); i++) {                
            if(nums[i] == -1) continue;
            else if(i && nums[i - 1] == -1) rem.push_back(nums[i]);
            else if(i + 1 < nums.size() && nums[i + 1] == -1) rem.push_back(nums[i]);
            if(i + 1 < nums.size() && nums[i + 1] != -1) {
                mx = max(mx, abs(nums[i] - nums[i + 1]));
            }
        }
        
        sort(rem.begin(), rem.end());
            
        int left = 0, right = *max_element(nums.begin(), nums.end()), answer = *max_element(nums.begin(), nums.end());
        
        auto ok = [&](int x) -> bool {
            vector<pair<int,int>>ranges;
            
            for(auto &i : rem) {
                ranges.push_back({max(1, i - x), min((int)2e9, i + x)});
            }
        
            int idx = 0;
            while(idx < ranges.size() && ranges[idx].first <= ranges[0].second) idx++;
            
            if(ranges.empty()) return (mx <= x);
                        
            int l = ranges[0].second, r = 2e9;
            
            for(int i = idx; i < ranges.size(); i++) {
                l = max(l, ranges[i].first);
                r = min(r, ranges[i].second);
            }
            
            if(l > r) return false;
            
            vector<vector<int>>dp(nums.size(), vector<int>(2, -1));
            
            int first = ranges[0].second, second = l;
            
            auto f = [&](int i, int j, auto &&self) -> int {
                if(i == nums.size()) return 0;
                if(dp[i][j] != -1) return dp[i][j];
                
                if(i == 0) return min(self(i + 1, 0, self), self(i + 1, 1, self));
                
                int prevElement = (nums[i - 1] == -1 ? (j == 0 ? first : second) : nums[i - 1]);
                
                if(nums[i] == -1) return dp[i][j] = 
                    min(max(abs(second - prevElement), self(i + 1, 1, self)), 
                        max(abs(first - prevElement), self(i + 1, 0, self)));
                
                return dp[i][j] = max(abs(nums[i] - prevElement), self(i + 1, 0, self));
            };
                        
            return (f(0, 0, f) <= x);
        };
        
        while(left <= right) {
            int mid = (left + right) / 2;    
            if(ok(mid)) answer = mid, right = mid - 1;
            else left = mid + 1;
        }        
        
        return max(answer, mx);
    }
};",1454914823
luck,papaya,55,3616,python3,"import math 
import copy
from typing import * 
from heapq import * 
from collections import * 

class Solution:
    
    
    def check( self , i , dir ) : 
        
        
        if( i < 0 or i >= self.n ) : 
            sum_val = sum( self.b ) ; 
            return sum_val == 0 ; 

        key = tuple( [ i , dir , tuple(self.b)] ) ; 
        if( key in self.cache ) :
            return self.cache[key] ; 
        
        if( self.b[i] > 0 ) : 
            self.b[i] -= 1 ; 
            dir = 1 - dir ; 
            

        ret = 0 ; 
        if( dir == 1 ) :
            ret = self.check( i + 1 , dir ) ; 
        else : 
            ret = self.check( i - 1 , dir ) ; 
        
        self.cache[ key ] = ret ; 
        return ret ; 
    
    def ok( self , i , dir ) : 
        
        self.b = copy.copy( self.a ) ; 
        return self.check( i , dir ) ; 
        
    def solve( self ) : 
        
        self.cache = {} ;
        
        self.ans = 0 ; 
        for i in range( self.n ) : 
            if( self.a[i] == 0 ) :
                
                s1 = 0 ; 
                s2 = 0 ; 
                if( i - 1 >= 0 ) :
                    s1 = sum( self.a[0: i ] ) ; 
                
                if( i+1 < self.n ) : 
                    s2 = sum( self.a[i+1 : ] ) ; 
                    
                
                if( s1 == s2 ) : 
                    self.ans += 2 ; 

                if( abs( s1 - s2 ) == 1 ) :
                    self.ans += 1; 
                
        return self.ans ; 
    
    def countValidSelections(self, nums: List[int]) -> int:
        
        self.a = nums ; 
        self.n = len( self.a ) ; 
        
        return self.solve() ; 
        
def main( ) : 

    t = Solution() ; 

    nums = [1,0,2,0,3]
    
    
    # nums = [2,3,4,0,4,1,0]
    
    ans = t.countValidSelections ( nums ) ; 

    print(  ans ); 

if __name__ == '__main__':
    main()",1454924400
luck,papaya,55,3639,cpp,"#include<bits/stdc++.h>
using namespace std ; 
using int64 = long long ; 

const int64 INF = 1e18 ; 

template<typename T = int64 >
class Lazy_Segment_Tree { 
private:
    inline int ls( int u) { return u << 1 ; } ; 
    inline int rs( int u ) { return (u<<1) | 1  ; }
    inline void _mark( int u , int left , int right , T add_val ){// 整个区间应用这个操作,但不向下传递

        int size = right - left + 1 ; 
        t[ u ].sum = t[u].sum + size * add_val  ;       
        t[ u ].lazy_add   = t[u].lazy_add + add_val  ; 
    }
    inline void _pushdown( int u , int left , int right ) { // 整个区间操作,向下传递一层，并清空本层lazy标记

        if( t[ u ].lazy_add == 0 ) {
            return ; 
        }
        int mid = ( left + right ) >> 1 ; 
        _mark( ls(u) , left , mid ,  t[u].lazy_add ) ; 
        _mark( rs(u) , mid + 1 , right ,  t[u].lazy_add ) ; 
        t[ u ].lazy_add = 0 ; 
    }
    inline void _combine ( int u ) {
        t[ u ].sum =  t[ ls(u) ].sum +  t[ rs(u) ].sum   ;
    }
private:
    struct Node {          
        T sum ,  lazy_add ; // lazy variable 
    } ; 
    vector< Node > t ; 
    int n ; 
public:
    void init( int  tn ) {
        vector<T> a ( tn , 0 ) ;
        init( tn , a ) ; 
    }
    void init( int tn , vector<T> & a ) { //输入数组的下标，默认下标从0开始
        n = tn ;         
        t.resize( n * 4 ) ;      
        
        function<void(int,int,int)> build_tree = [&]( int u , int s , int e  ) {
            if( s == e ) {
                t[ u ].sum = a[ s ] ; 
                t[ u ].lazy_add = 0 ; 
                return ; 
            }
            int mid = ( s + e ) / 2 ; 
            build_tree( ls(u) , s , mid  ) ; 
            build_tree( rs(u) , mid + 1 , e ) ;  
            _combine ( u );   
            t[u].lazy_add = 0 ;        
        } ; 
        build_tree( 1 , 0 , n - 1 ) ; 
    } 
    void range_add( int x , int y , T add_val , int u = 1 , int left = 0 , int right = -1 ) {
        if( right == -1 ) right = n - 1 ;

        if( x <= left && right <= y )  { // cotain [left,right], _mark it 
            _mark( u , left , right , add_val ) ; 
            return ; 
        } 
        _pushdown( u , left , right ) ; 

        int mid = ( left + right ) >> 1 ; 
        if( x <= mid ) {
            range_add( x , y , add_val , ls(u) ,  left , mid ) ; 
        }
        if( y > mid  ) {
            range_add( x , y , add_val , rs(u) , mid + 1 , right ) ; 
        }
        _combine( u ) ;  
    }
    T get_range_sum( int x , int y  , int u = 1 , int left = 0 , int right = -1  ) {
        if( right == -1 ) right = n - 1 ;

        int mid = ( left + right ) >> 1 ; 
        if( x <= left && right <= y   )  { // cotain [left,right], _mark it 
            return t[ u ].sum ; 
        }      
        _pushdown( u , left , right ) ; 
        T ret = 0 ; 
        if( x <= mid ) {
            ret += get_range_sum( x , y  , ls(u) ,  left , mid ) ; 
        }
        if( y > mid  ) {
            ret += get_range_sum( x , y , rs(u) , mid + 1 , right ) ; 
        }
        return  ret  ; 
    }
} ; 


class Solution {
public:

    Lazy_Segment_Tree< int64 > t ; 

    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        auto & a= nums ; 
        int n = a.size() ; 

        t.init( n ) ; 
        for( auto &p : queries ) {
            int L = p[0] , R = p[1] ; 
            
            t.range_add( L , R , 1 ) ; 
        }    

        for( int i = 0 ; i < n ; i++ ) {
            auto val = t.get_range_sum( i , i ) ; 
            if( val >= a[i] ) {

            } else {
                return false ; 
            }
        }
        return true ; 
    }
};




int m22ain( )  { 
    Solution  t; 

    vector<int> a ;
    int n ; 

    a = {} ; 
    n = 14 ; 
    
    vector<int> nums ; 
    vector< vector<int>> queries; 

    nums = { 1,0,1 } ; 
    queries =  { { 0,2 }} ; 



    nums = { 4,3,2,1 } ; 
    queries = { { 1 , 3 } , { 0 , 2 }} ; ///[[1,3],[0,2]]

    auto ans = t.isZeroArray ( nums , queries ) ; 
    cout << ans << ""\n"" ;


    return 0 ; 
}
",1454820537
luck,papaya,55,3643,cpp,"#include<bits/stdc++.h>
using namespace std ; 
// using int64 = long long ; 

auto __OI_INIT__ = []() {
    ios::sync_with_stdio(0), cin.tie(0) , cout.tie(0);
    cout << fixed << setprecision(12); return 0 ; 
}();


template<typename T = int >
class Lazy_Segment_Tree { 
private:
    inline int ls( int u) { return u << 1 ; } ; 
    inline int rs( int u ) { return (u<<1) | 1  ; }
    inline void _mark( int u , int left , int right , T add_val ){// 整个区间应用这个操作,但不向下传递

        int size = right - left + 1 ;     
        t[ u ].lazy_add   = t[u].lazy_add + add_val  ; 
    }
    inline void _pushdown( int u , int left , int right ) { // 整个区间操作,向下传递一层，并清空本层lazy标记

        if( t[ u ].lazy_add == 0 ) {
            return ; 
        }
        int mid = ( left + right ) >> 1 ; 
        _mark( ls(u) , left , mid ,  t[u].lazy_add ) ; 
        _mark( rs(u) , mid + 1 , right ,  t[u].lazy_add ) ; 
        t[ u ].lazy_add = 0 ; 
    }
    inline void _combine ( int u ) {
        // t[ u ].sum =  t[ ls(u) ].sum +  t[ rs(u) ].sum   ;
    }
private:
    struct Node {          
        T  lazy_add ; // lazy variable 
    } ; 
    vector< Node > t ; 
    int n ; 
public:
    void init( int  tn ) {
        n = tn ;         
        t.resize( n * 4 ) ;      
        
        function<void(int,int,int)> build_tree = [&]( int u , int s , int e  ) {
            if( s == e ) {
                t[ u ].lazy_add = 0 ; 
                return ; 
            }
            int mid = ( s + e ) / 2 ; 
            build_tree( ls(u) , s , mid  ) ; 
            build_tree( rs(u) , mid + 1 , e ) ;  
            _combine ( u );   
            t[u].lazy_add = 0 ;        
        } ; 
        build_tree( 1 , 0 , n - 1 ) ; 
    } 
    void range_add( int x , int y , T add_val , int u = 1 , int left = 0 , int right = -1 ) {
        if( right == -1 ) right = n - 1 ;

        if( x <= left && right <= y )  { // cotain [left,right], _mark it 
            _mark( u , left , right , add_val ) ; 
            return ; 
        } 
        _pushdown( u , left , right ) ; 

        int mid = ( left + right ) >> 1 ; 
        if( x <= mid ) {
            range_add( x , y , add_val , ls(u) ,  left , mid ) ; 
        }
        if( y > mid  ) {
            range_add( x , y , add_val , rs(u) , mid + 1 , right ) ; 
        }
        _combine( u ) ;  
    }
    T get_range_sum( int x , int y  , int u = 1 , int left = 0 , int right = -1  ) {
        if( right == -1 ) right = n - 1 ;

        int mid = ( left + right ) >> 1 ; 
        if( x <= left && right <= y   )  { // cotain [left,right], _mark it 
            return t[ u ].lazy_add ; 
        }      
        _pushdown( u , left , right ) ; 
        T ret = 0 ; 
        if( x <= mid ) {
            ret += get_range_sum( x , y  , ls(u) ,  left , mid ) ; 
        }
        if( y > mid  ) {
            ret += get_range_sum( x , y , rs(u) , mid + 1 , right ) ; 
        }
        return  ret  ; 
    }
} ; 


class Solution {
public:

    Lazy_Segment_Tree< int > t ; 


    int check( int K , vector<int>& nums, vector<vector<int>>& queries) {
        
        auto & a= nums ; 
        int n = a.size() ; 

        t.init( n ) ; 
        for( int j = 0 ; j < K ; j++ ) {
            auto &p = queries[j] ;
            int L = p[0] , R = p[1] ; 
            int val = p[2] ; 
            
            t.range_add( L , R , val ) ; 
        }    

        for( int i = 0 ; i < n ; i++ ) {
            auto val = t.get_range_sum( i , i ) ; 
            if( val >= a[i] ) {

            } else {
                return false ; 
            }
        }
        return true ; 
    }

    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        
        int low = 0 ; 
        int high = queries.size() ; 

        int ans = -1 ; 
        while( low <=  high ) {
            int mid = ( low + high ) >> 1 ; 
            if( check( mid , nums , queries )) {

                ans = mid ; 
                high = mid - 1 ; 
            } else {
                low = mid + 1 ; 
            }
        }
        return ans ; 
    }
};




int mai22n( )  { 
    Solution  t; 

    vector<int> a ;
    int n ; 

    a = {} ; 
    n = 14 ; 
    
    vector<int> nums ; 
    vector< vector<int>> queries; 

    nums = { 2 , 0 , 2 } ; 
    queries = { { 0 , 2 , 1 } , { 0 , 2 , 1 } , { 1 ,  1 , 3 }} ; 
    

    // nums = { 4 , 3 , 2 , 1 } ; 
    // queries = { { 1 , 3 , 2 } , { 0 , 2 , 1 }} ; 

    auto ans = t.minZeroArray ( nums , queries ) ; 
    cout << ans << ""\n"" ;


    return 0 ; 
}
",1454837560
luck,papaya,55,3658,cpp,"#include<bits/stdc++.h>
using namespace std ; 
using int64 = long long ; 

const int64 INF = 1e18 ; 


class Sol_1 {
public:
    vector< pair<int64 , int64 > > info ; 
    int m ; 

    int base ; 

    bool ok( int64 K ) { 

        // cout << ""\n\n K : "" << K << ""\n"" ; 

        vector< pair<int64 , int64 >> pinfo ; 
        for( int i = 0 ; i < m ; i++ ) { 
            auto [ x , y ] = info[i] ; 
            
            int64 start = max( x , y ) - K ; 
            int64 end = min( x , y ) + K ; 

            if( start <= 0 ) {
                start = 1 ; 
            }
            if( start > end ) {
                // cout << ""error: start: ""<< start << "" end: "" << end << ""\n"" ; 
                // cout << ""i: "" << i << "" x: "" <<x << "" y: "" << y << "" k: "" << K << "" \n"" ; 

                return false ; 
            }
            pinfo.emplace_back( start , end ) ; 
        }
        // cout << ""yes K : "" << K << ""\n"" ; 
        sort( pinfo.begin() , pinfo.end() ) ; 

        // for( auto [ low , high ] : pinfo ) {
        //     cout << ""low; "" << low << "" high : "" << high << ""\n"" ; 
        // }

        
        int64 right = pinfo[0].second ; 

        int i = 1 ; 
        while( i < m ) {

            auto [ start , end ] = pinfo[i] ; 
            if( start <= right ) {
                right = min( right , end ) ; 
                i = i + 1 ; 
            }
            else {
                break ; 
            }
        }

        if( i >= m ) {
            return true ; 
        }

        right = pinfo[i].second ; 
        while( i < m ) {

            auto [ start , end ] = pinfo[i] ; 
            if( start <= right ) {
                right = min( right , end ) ; 
                i = i + 1 ; 
            }
            else {
                break ; 
            }
        }

        if( i >= m ) {
            return true ; 
        }
        return false ; 
    }
    int solve() { 
        m = info.size() ; 


        // for( auto [ start , end ] : info ) {
        //     cout << "" start: "" << start << "" "" << end << ""\n"" ; 
        // }
        // cout << "" over \n"" ; 


        int64 low = base ; 
        int64 high = 1e9 ; 

        int64 ret = high ; 

        while( low <= high ) {
            int64 mid = ( low + high ) >> 1 ; 
            if( ok( mid ) ) { 
                ret = mid ; 
                high = mid - 1 ; 
            } else {
                low = mid + 1 ; 
            }
        }
        return ret ;
    }
    int minDifference(vector<int>& nums) {
        auto &a = nums ; 
        int n = a.size() ; 

        base = 0 ; 
        for( int i = 1 ; i < n ; i++ ) {
            if( a[i] != -1 && a[i-1] != -1 ) {
                int D = abs( a[i] - a[i-1] ) ; 
                base = max( base , D ) ; 
            }
        }
        info = {} ;

        int i = 0 ; 
        for( ;  i < n ;  ) {
            if( a[i] != -1 ) {
                i = i + 1 ;
                continue ; 
            }

            int j = i + 1 ; 
            while( j < n && a[j] == -1 ) { 
                j = j + 1 ; 
            }

            j = j - 1 ; 


            int64 x = INF , y = INF ; 
            if( i - 1 >= 0 ) {
                x = a[i-1] ; 
            }
            if( j + 1 < n ) {
                y = a[j+1] ; 
            }
            if( i - 1 < 0 ) {
                x = y ; 
            } 
            if( j + 1 >= n ) { 
                y = x ; 
            }
            if( x > y ) {
                swap( x , y ) ; 
            }

            
            info.emplace_back( x , y ) ; 

            i = j + 1 ; 
        }

        if( info.size() == 0 ) {
            return base ; 
        }

        return solve() ; 
    }
};



class Sol_2 {
public:
    vector< pair<int64 , int64 > > info ; 
    int m ; 

    int base ; 

    bool ok( int64 K ) { 

        // cout << ""\n\n K222 : "" << K << ""\n"" ; 

        vector< pair<int64 , int64 >> pinfo ; 
        for( int i = 0 ; i < m ; i++ ) { 
            auto [ x , y ] = info[i] ; 
            
            int64 start = max( x , y ) - K ; 
            int64 end = min( x , y ) + K ; 

            if( start <= 0 ) {
                start = 1 ; 
            }
            if( start > end ) {
                // cout << ""222error: start: ""<< start << "" end: "" << end << ""\n"" ; 
                // cout << ""222i: "" << i << "" x: "" <<x << "" y: "" << y << "" k: "" << K << "" \n"" ; 

                return false ; 
            }
            pinfo.emplace_back( start , end ) ; 
        }
        // cout << ""yes K22 : "" << K << ""\n"" ; 
        sort( pinfo.begin() , pinfo.end() ) ; 

        // for( auto [ low , high ] : pinfo ) {
        //     cout << ""222low; "" << low << "" high : "" << high << ""\n"" ; 
        // }

        
        int64 right = pinfo[0].second ; 

        int i = 1 ; 
        while( i < m ) {

            auto [ start , end ] = pinfo[i] ; 
            if( start <= right ) {
                right = min( right , end ) ; 
                i = i + 1 ; 
            }
            else {
                break ; 
            }
        }

        if( i >= m ) {
            return true ; 
        }
        

        if( i >= m ) {
            return true ; 
        }

        int64 right2 = pinfo.back().first ; 

        for( int j = i ; j < m;  j++ ) {

            auto [ start , end ] = pinfo[j] ; 
            if( start <= right2 && right2 <= end ) {

            } else {
                return false ; 
            }
        }

        return abs( right2 - right ) <= K ; 
    }
    int solve() { 
        m = info.size() ; 


        // for( auto [ start , end ] : info ) {
        //     cout << "" start: "" << start << "" "" << end << ""\n"" ; 
        // }
        // cout << "" over \n"" ; 


        int64 low = base ; 
        int64 high = 1e9 ; 

        int64 ret = high ; 

        while( low <= high ) {
            int64 mid = ( low + high ) >> 1 ; 
            if( ok( mid ) ) { 
                ret = mid ; 
                high = mid - 1 ; 
            } else {
                low = mid + 1 ; 
            }
        }
        return ret ;
    }
    int minDifference(vector<int>& nums) {
        auto &a = nums ; 
        int n = a.size() ; 

        base = 0 ; 
        for( int i = 1 ; i < n ; i++ ) {
            if( a[i] != -1 && a[i-1] != -1 ) {
                int D = abs( a[i] - a[i-1] ) ; 
                base = max( base , D ) ; 
            }
        }
        info = {} ;

        int i = 0 ; 
        for( ;  i < n ;  ) {
            if( a[i] != -1 ) {
                i = i + 1 ;
                continue ; 
            }

            int j = i + 1 ; 
            while( j < n && a[j] == -1 ) { 
                j = j + 1 ; 
            }

            j = j - 1 ; 


            int64 x = INF , y = INF ; 
            if( i - 1 >= 0 ) {
                x = a[i-1] ; 
            }
            if( j + 1 < n ) {
                y = a[j+1] ; 
            }
            if( i - 1 < 0 ) {
                x = y ; 
            } 
            if( j + 1 >= n ) { 
                y = x ; 
            }
            if( x > y ) {
                swap( x , y ) ; 
            }

            if( x == y || i == j ) { 
                info.emplace_back( x , y ) ; 
            }
            else {
                info.emplace_back( x , x ) ; 
                info.emplace_back( y , y ) ; 
            }
            i = j + 1 ; 
        }

        if( info.size() == 0 ) {
            return base ; 
        }

        return solve() ; 
    }
};



class Solution {
public:
    int minDifference(vector<int>& nums) {

        Sol_1 t1 ; 
        Sol_2 t2 ; 

        auto ans_1 = t1.minDifference( nums ) ; 
        auto ans_2 = t2.minDifference( nums ) ;

        return min( ans_1 , ans_2 ) ; 
    }
};



int m2ain( )  { 
    Solution  t; 

    vector<int> a ;
    
    a = { 1,2,-1,10,8 } ; 

    a = { -1,-1,-1 } ; 

    a = { -1,10,-1,8 } ; 

    a = { 1 , 12 } ; 

    a = { 14,-1,-1,46 } ; 

    auto ans = t.minDifference (  a ) ; 
    cout << ans << ""\n"" ;


    return 0 ; 
}
",1454915940
Satj,Satj,57,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& a) {
        // for each 0 prefix
        int tot = accumulate(a.begin(), a.end(), 0);
        int cur = 0, n = a.size();
        int ret = 0;
        for (int i = 0; i < n; i++) {
            cur += a[i];
            if (a[i] == 0) {
                int res = abs(tot - cur - cur);
                if (res == 0)
                    ret += 2;
                if (res == 1)
                    ret += 1;
            }
        }
        return ret;
    }
};",1454913173
Satj,Satj,57,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& a, vector<vector<int>>& q) {
        int n = a.size(), m = q.size();
        vector <int> pref(n + 1, 0);
        for (auto &z : q) {
            pref[z[0]]++;
            pref[z[1] + 1]--;
        }
        for (int i = 1; i < n; i++)
            pref[i] += pref[i - 1];
        for (int i = 0; i < n; i++)
            if (a[i] > pref[i]) return false;
        return true;
    }
};",1454921084
Satj,Satj,57,3658,cpp,"class Solution {
public:
    int inf = 1e9 + 7;
    int g(int l, int r, int x) {
        return max(abs(l - x), abs(r - x));
    }
    int h(int l, int r, int x, int y) {
        return max({abs(l - x), abs(x - y), abs(r - y)});
    }
    int f(vector <array <int, 3>> &b, int t, int L, int R) {
        int x = L + t;
        int y = R - t;
        int ret = 0;
        for (auto &z : b) {
            int res = min(g(z[0], z[1], x), g(z[0], z[1], y));
            if (z[2] == 1)
                ret = max(ret, res);
            else
                ret = max(ret, min(res, h(z[0], z[1], x, y)));
        }
        return ret;
    }
    int minDifference(vector<int>& a) {
        unordered_set <int> s(a.begin(), a.end());
        if (s.size() == 1) return 0;
        
        vector <array <int, 3>> b;
        int prev = -2, n = a.size();
        int ll = 0;
        for (int i = 0; i < n; ) {
            if (a[i] != -1) {
                ll = max(ll, abs(a[i] - (prev < 0 ? a[i] : prev)));
                prev = a[i];
                i++;
                continue ;
            }
            int j = i;
            while (j < n && a[j] == -1) j++;
            if (j - i == 1) 
                b.push_back({prev < 0 ? a[j] : prev, (j < n) ? a[j] : prev, 1});
            else {
                b.push_back({prev < 0 ? a[j] : prev, (j < n) ? a[j] : prev, 2});
            }
            if (j < n) {
                prev = a[j];
            }
            i = j;
        }
        // for (auto z : b) cout << z[0] << "" "" << z[1] << "" "" << z[2] << endl;
        int L = inf;
        int R = -inf;
        for (auto &z : b) {
            z[0] = abs(z[0]);
            z[1] = abs(z[1]);
            if (z[0] > z[1]) swap(z[0], z[1]);
            L = min(z[0], L);
            R = max(z[1], R);
        }
        if (R < L) return ll;
        
        int l = ll, r = max(ll, (R - L) / 2 + 1);
        cout << l << "" "" << r << endl;
        int ret = r;
        while (r - l > 2) {
            int m1 = l + (r - l) / 3;
            int m2 = l + 2 * (r - l) / 3;

            int res1 = f(b, m1, L, R);
            int res2 = f(b, m2, L, R);
            ret = min({ret, res1, res2});
            if (res1 <= res2) 
                r = m2;
            else
                l = m1;
        }
        for (int i = l; i <= r; i++) 
            ret = min(ret, f(b, i, L, R));
        return max(ret, ll);
    }
};",1454902799
Syed Arham Saroosh,Syed-Arham-Saroosh,58,3616,python3,"from typing import List

class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        """"""
        Counts the number of valid selections of starting positions and movement directions
        in the given integer array `nums`. A selection is valid if starting from a position
        where nums[curr] == 0, and moving either left or right, all elements in `nums` can
        be reduced to 0 according to the specified movement rules.

        Args:
        nums (List[int]): The input array of integers.

        Returns:
        int: The number of valid selections.
        """"""
        
        n = len(nums)
        valid_count = 0

        for curr in range(n):
            if nums[curr] == 0:
                # Check right direction
                temp_nums = nums[:]
                position = curr
                direction = 1  # 1 for right, -1 for left
                
                while 0 <= position < n:
                    if temp_nums[position] == 0:
                        position += direction
                    else:
                        temp_nums[position] -= 1
                        direction *= -1  # Reverse direction
                        position += direction
                
                if all(x == 0 for x in temp_nums):
                    valid_count += 1
                
                # Check left direction
                temp_nums = nums[:]
                position = curr
                direction = -1  # Change direction to left
                
                while 0 <= position < n:
                    if temp_nums[position] == 0:
                        position += direction
                    else:
                        temp_nums[position] -= 1
                        direction *= -1  # Reverse direction
                        position += direction
                
                if all(x == 0 for x in temp_nums):
                    valid_count += 1

        return valid_count
",1454806229
Syed Arham Saroosh,Syed-Arham-Saroosh,58,3639,python3,"from typing import List

class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        n = len(nums)
        # Create a difference array for counting decrements
        decrement_count = [0] * (n + 1)

        # Process each query to fill the difference array
        for li, ri in queries:
            decrement_count[li] += 1
            if ri + 1 < n:
                decrement_count[ri + 1] -= 1

        # Calculate the total decrements for each index
        total_decrements = [0] * n
        current_decrement = 0

        for i in range(n):
            current_decrement += decrement_count[i]
            total_decrements[i] = current_decrement

        # Check if we can reduce nums to zero
        for i in range(n):
            if total_decrements[i] < nums[i]:
                return False
        
        return True
",1454807185
Syed Arham Saroosh,Syed-Arham-Saroosh,58,3643,python3,"from typing import List

class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        def canAchieveZero(k: int) -> bool:
            # Create a temporary array to track decrements
            temp = [0] * (len(nums) + 1)
            
            # Apply the first k queries
            for i in range(k):
                li, ri, vali = queries[i]
                temp[li] += vali
                if ri + 1 < len(nums):
                    temp[ri + 1] -= vali
            
            # Calculate the actual decrements for each index
            current_decrement = 0
            for i in range(len(nums)):
                current_decrement += temp[i]
                nums[i] -= current_decrement
            
            # Check if all elements are non-negative
            return all(num <= 0 for num in nums)

        # Binary search for the minimum k
        left, right = 0, len(queries)
        result = -1
        
        while left <= right:
            mid = (left + right) // 2
            # Store the original nums to restore after checking
            original_nums = nums[:]
            
            if canAchieveZero(mid):
                result = mid  # Found a valid k
                right = mid - 1  # Try to find a smaller k
            else:
                left = mid + 1  # Increase k
        
            # Restore nums for the next iteration
            nums = original_nums
        
        return result
",1454808055
KARTHICK,KARTHICK2605,59,3616,java,"class Solution {
    public int countValidSelections(int[] nums) {
        int n = nums.length;
        int validCount = 0;

        // Identify all positions where nums[curr] == 0
        for (int start = 0; start < n; start++) {
            if (nums[start] == 0) {
                // Try both directions: left (-1) and right (+1)
                if (simulate(nums.clone(), start, -1)) validCount++;
                if (simulate(nums.clone(), start, 1)) validCount++;
            }
        }

        return validCount;
    }

    private boolean simulate(int[] nums, int curr, int direction) {
        int n = nums.length;

        while (curr >= 0 && curr < n) {
            if (nums[curr] == 0) {
                // Move in the current direction
                curr += direction;
            } else {
                // Decrement nums[curr], reverse direction, and move
                nums[curr]--;
                direction = -direction;
                curr += direction;
            }
        }

        // Check if all elements in nums are zero
        for (int num : nums) {
            if (num != 0) return false;
        }
        return true;
    }
}
",1454806674
KARTHICK,KARTHICK2605,59,3639,java,"class Solution {
    public boolean isZeroArray(int[] nums, int[][] queries) {
        int n = nums.length;
        int[] diff = new int[n + 1]; // Difference array to track range updates

        // Process each query
        for (int[] query : queries) {
            int li = query[0], ri = query[1];
            diff[li] += 1;
            if (ri + 1 < n) diff[ri + 1] -= 1;
        }

        // Apply the prefix sum to calculate the total decrements for each index
        int[] decrements = new int[n];
        int currentDecrement = 0;
        for (int i = 0; i < n; i++) {
            currentDecrement += diff[i];
            decrements[i] = currentDecrement;
        }

        // Check if the decrements are sufficient to make nums a Zero Array
        for (int i = 0; i < n; i++) {
            if (decrements[i] < nums[i]) return false; // Not enough decrements
        }

        return true;
    }
}
",1454808512
KARTHICK,KARTHICK2605,59,3643,java,"class Solution {
    public int minZeroArray(int[] nums, int[][] queries) {
        int n = nums.length;
        int q = queries.length;

        // Binary search for the minimum k
        int left = 0, right = q, result = -1;

        while (left <= right) {
            int mid = left + (right - left) / 2;
            if (canTransform(nums, queries, mid)) {
                result = mid; // Possible with k = mid
                right = mid - 1;
            } else {
                left = mid + 1;
            }
        }

        return result;
    }

    private boolean canTransform(int[] nums, int[][] queries, int k) {
        int n = nums.length;
        int[] diff = new int[n + 1]; // Difference array for range updates

        // Apply the first k queries
        for (int i = 0; i < k; i++) {
            int li = queries[i][0], ri = queries[i][1], vali = queries[i][2];
            diff[li] += vali;
            if (ri + 1 < n) diff[ri + 1] -= vali;
        }

        // Calculate cumulative decrements and check if nums can be zeroed
        int[] decrements = new int[n];
        int currentDecrement = 0;

        for (int i = 0; i < n; i++) {
            currentDecrement += diff[i];
            decrements[i] = currentDecrement;

            // If the decrements available are less than the required, return false
            if (decrements[i] < nums[i]) {
                return false;
            }
        }

        return true; // Transformation possible
    }
}
",1454809796
Vengadeshwaran B,Vengadesh_25,60,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        def simulate(start, direction):
            n = len(nums)
            nums_copy = nums[:]  # Create a copy to modify
            curr = start
            while 0 <= curr < n:
                if nums_copy[curr] == 0:
                    curr += direction
                else:
                    nums_copy[curr] -= 1
                    direction = -direction
                    curr += direction
            return all(num == 0 for num in nums_copy)
        
        valid_selections = 0
        n = len(nums)
        
        for i in range(n):
            if nums[i] == 0:
                # Check both directions
                if simulate(i, 1):  # Right direction
                    valid_selections += 1
                if simulate(i, -1):  # Left direction
                    valid_selections += 1
        
        return valid_selections",1454806831
Vengadeshwaran B,Vengadesh_25,60,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        n = len(nums)
        diff = [0] * (n + 1)  # Difference array for range operations
    
        # Process each query
        for li, ri in queries:
            diff[li] += 1  # Start decrementing from index li
            if ri + 1 < n:
                diff[ri + 1] -= 1  # Stop decrementing after index ri
        
        # Compute prefix sum and check feasibility
        curr_decrement = 0
        for i in range(n):
            curr_decrement += diff[i]  # Apply the current decrement value
            if curr_decrement < nums[i]:
                return False  # Not enough decrements applied to make nums[i] zero
        
        return True  #
            ",1454807690
Vengadeshwaran B,Vengadesh_25,60,3643,python3,"class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        n = len(nums)
        q = len(queries)
    
        def canTransform(k):
            diff = [0] * (n + 1)  # Difference array
            for i in range(k):
                li, ri, vali = queries[i]
                diff[li] += vali
                if ri + 1 < n:
                    diff[ri + 1] -= vali
    
            cumulative_decrement = 0
            for i in range(n):
                cumulative_decrement += diff[i]
                if nums[i] - cumulative_decrement > 0:
                    return False
            
            return True
    
        left, right = 0, q
        result = -1
    
        while left <= right:
            mid = (left + right) // 2
            if canTransform(mid):
                result = mid
                right = mid - 1
            else:
                left = mid + 1
    
        return result",1454811189
Max Jiang,mangoqwq,61,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int N = nums.size();
        auto ok = [&](int i, int del) {
            vector<int> vec = nums;
            while (i >= 0 && i < N) {
                if (vec[i] > 0) {
                    vec[i]--;
                    del *= -1;
                }
                i += del;
            }
            return *max_element(vec.begin(), vec.end()) == 0;
        };
        int ans = 0;
        for (int i = 0; i < N; ++i) {
            if (nums[i]) continue;
            for (int del = -1; del <= 1; del += 2) {
                ans += ok(i, del);
            }
        }
        return ans;
    }
};",1454806620
Max Jiang,mangoqwq,61,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int N = nums.size(), Q = queries.size();
        vector<int> tot(N+1);
        for (int i = 0; i < Q; ++i) {
            int l = queries[i][0];
            int r = queries[i][1];
            tot[l]++; tot[r+1]--;
        }
        for (int i = 1; i <= N; ++i) {
            tot[i] += tot[i-1];
        }
        for (int i = 0; i < N; ++i) {
            if (tot[i] < nums[i]) return 0;
        }
        return 1;
    }
};",1454811873
Max Jiang,mangoqwq,61,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        using ll = long long;
        int N = nums.size(), Q = queries.size();
        auto ok = [&](int k) {
            vector<ll> tot(N+1);
            for (ll i = 0; i < k; ++i) {
                ll l = queries[i][0];
                ll r = queries[i][1];
                ll val = queries[i][2];
                tot[l] += val;
                tot[r+1] -= val;
            }
            for (int i = 1; i <= N; ++i) {
                tot[i] += tot[i-1];
            }
            for (int i = 0; i < N; ++i) {
                if (tot[i] < nums[i]) return 0;
            }
            return 1;
        };
        int lo = 0, hi = Q;
        while (lo < hi) {
            int mi = (lo + hi) >> 1;
            if (ok(mi)) hi = mi;
            else lo = mi + 1;
        }
        if (!ok(lo)) return -1; 
        else return lo;
    }
};",1454810040
sammochen,sammochen,63,3616,cpp,"
#include <bits/stdc++.h>
using namespace std;

#ifdef DEBUG
#include ""debug.h""
#else
#define debug(...) 1
#endif

using ll = long long;
using db = long double;
using VS = vector<string>;
using VLL = vector<ll>;
using VVLL = vector<VLL>;
using VVVLL = vector<VVLL>;
using PLL = pair<ll, ll>;
using MLL = map<ll, ll>;
using SLL = set<ll>;
using QLL = queue<ll>;
using SS = stringstream;

#define rep(x, l, u) for (ll x = l; x < u; x++)
#define rrep(x, l, u) for (ll x = l; x >= u; x--)
#define fe(x, a) for (auto x : a)
#define all(x) x.begin(), x.end()
#define rall(x) x.rbegin(), x.rend()
#define mst(x, v) memset(x, v, sizeof(x))
#define sz(x) (ll) x.size()

#define umap unordered_map
#define uset unordered_set
#define mset multiset

// clang-format off

ll ob(ll i, ll n) { return i < 0 || i >= n; }
ll tp(ll x) { return ( 1LL << x ); }
ll rup(ll a, ll b) { return a % b ? a/b + 1 : a/b; }
ll sign(ll x) {	return x == 0 ? 0 : x / abs(x); }
void makemod(ll& x, ll m) { x %= m; if (x < 0) { x += m; } }
ll getmod(ll x, ll m) { makemod(x, m); return x; }
ll powmod(ll a, ll b, ll m) { if (b == 0) return 1; ll h = powmod(a, b/2, m); ll ans = h*h%m; return b%2 ? ans*a%m : ans; }
ll invmod(ll a, ll m) { return powmod(a, m - 2, m); }
void inll(ll& x) { scanf(""%lld"", &x); }

template <typename A, typename B> bool upmin(A& x, B v) { if (v >= x) return false; return x = v, true; }
template <typename A, typename B> bool upmax(A& x, B v) { if (v <= x) return false; return x = v, true; }
// clang-format on

const VLL di = {0, 0, 1, -1, 1, -1, 1, -1}, dj = {1, -1, 0, 0, -1, -1, 1, 1};
const ll inf = 1e18;
const ll mod = 1e9 + 7;
const string vowels = ""aeiou"";
ll isvowel(char c) {
    c = tolower(c);
    return vowels.find(c) != string::npos;
}

class Solution {
public:
    int countValidSelections(vector<int>& A) {  // !
        ll n = A.size();
        ll ans = 0;
        rep(i, 0, n) {
            if (A[i] != 0) continue;

            ll left = 0, right = 0;
            rep(j, 0, n) {
                if (j < i) {
                    left += A[j];
                } else if (j > i) {
                    right += A[j];
                }
            }

            ll res = abs(left - right);
            if (res == 0)
                ans += 2;
            else if (res == 1)
                ans++;
        }
        return ans;
    }
};
",1454806531
sammochen,sammochen,63,3639,cpp,"
#include <bits/stdc++.h>
using namespace std;

#ifdef DEBUG
#include ""debug.h""
#else
#define debug(...) 1
#endif

using ll = long long;
using db = long double;
using VS = vector<string>;
using VLL = vector<ll>;
using VVLL = vector<VLL>;
using VVVLL = vector<VVLL>;
using PLL = pair<ll, ll>;
using MLL = map<ll, ll>;
using SLL = set<ll>;
using QLL = queue<ll>;
using SS = stringstream;

#define rep(x, l, u) for (ll x = l; x < u; x++)
#define rrep(x, l, u) for (ll x = l; x >= u; x--)
#define fe(x, a) for (auto x : a)
#define all(x) x.begin(), x.end()
#define rall(x) x.rbegin(), x.rend()
#define mst(x, v) memset(x, v, sizeof(x))
#define sz(x) (ll) x.size()

#define umap unordered_map
#define uset unordered_set
#define mset multiset

// clang-format off

ll ob(ll i, ll n) { return i < 0 || i >= n; }
ll tp(ll x) { return ( 1LL << x ); }
ll rup(ll a, ll b) { return a % b ? a/b + 1 : a/b; }
ll sign(ll x) {	return x == 0 ? 0 : x / abs(x); }
void makemod(ll& x, ll m) { x %= m; if (x < 0) { x += m; } }
ll getmod(ll x, ll m) { makemod(x, m); return x; }
ll powmod(ll a, ll b, ll m) { if (b == 0) return 1; ll h = powmod(a, b/2, m); ll ans = h*h%m; return b%2 ? ans*a%m : ans; }
ll invmod(ll a, ll m) { return powmod(a, m - 2, m); }
void inll(ll& x) { scanf(""%lld"", &x); }

template <typename A, typename B> bool upmin(A& x, B v) { if (v >= x) return false; return x = v, true; }
template <typename A, typename B> bool upmax(A& x, B v) { if (v <= x) return false; return x = v, true; }
// clang-format on

const VLL di = {0, 0, 1, -1, 1, -1, 1, -1}, dj = {1, -1, 0, 0, -1, -1, 1, 1};
const ll inf = 1e18;
const ll mod = 1e9 + 7;
const string vowels = ""aeiou"";
ll isvowel(char c) {
    c = tolower(c);
    return vowels.find(c) != string::npos;
}

class Solution {
public:
    bool isZeroArray(vector<int>& A, vector<vector<int>>& Q) {  // !

        ll n = A.size();
        ll m = Q.size();

        VLL sums(n + 1);
        rep(j, 0, m) {
            auto& q = Q[j];

            ll l = q[0];
            ll r = q[1];
            ll v = 1;

            sums[l] += v;
            sums[r + 1] -= v;
        }

        ll cur = 0;
        ll ok = 1;
        rep(i, 0, n) {
            cur += sums[i];
            if (cur < A[i]) {
                ok = 0;
                break;
            }
        }

        return ok;
    }
};
",1454812345
sammochen,sammochen,63,3643,cpp,"
#include <bits/stdc++.h>
using namespace std;

#ifdef DEBUG
#include ""debug.h""
#else
#define debug(...) 1
#endif

using ll = long long;
using db = long double;
using VS = vector<string>;
using VLL = vector<ll>;
using VVLL = vector<VLL>;
using VVVLL = vector<VVLL>;
using PLL = pair<ll, ll>;
using MLL = map<ll, ll>;
using SLL = set<ll>;
using QLL = queue<ll>;
using SS = stringstream;

#define rep(x, l, u) for (ll x = l; x < u; x++)
#define rrep(x, l, u) for (ll x = l; x >= u; x--)
#define fe(x, a) for (auto x : a)
#define all(x) x.begin(), x.end()
#define rall(x) x.rbegin(), x.rend()
#define mst(x, v) memset(x, v, sizeof(x))
#define sz(x) (ll) x.size()

#define umap unordered_map
#define uset unordered_set
#define mset multiset

// clang-format off

ll ob(ll i, ll n) { return i < 0 || i >= n; }
ll tp(ll x) { return ( 1LL << x ); }
ll rup(ll a, ll b) { return a % b ? a/b + 1 : a/b; }
ll sign(ll x) {	return x == 0 ? 0 : x / abs(x); }
void makemod(ll& x, ll m) { x %= m; if (x < 0) { x += m; } }
ll getmod(ll x, ll m) { makemod(x, m); return x; }
ll powmod(ll a, ll b, ll m) { if (b == 0) return 1; ll h = powmod(a, b/2, m); ll ans = h*h%m; return b%2 ? ans*a%m : ans; }
ll invmod(ll a, ll m) { return powmod(a, m - 2, m); }
void inll(ll& x) { scanf(""%lld"", &x); }

template <typename A, typename B> bool upmin(A& x, B v) { if (v >= x) return false; return x = v, true; }
template <typename A, typename B> bool upmax(A& x, B v) { if (v <= x) return false; return x = v, true; }
// clang-format on

const VLL di = {0, 0, 1, -1, 1, -1, 1, -1}, dj = {1, -1, 0, 0, -1, -1, 1, 1};
const ll inf = 1e18;
const ll mod = 1e9 + 7;
const string vowels = ""aeiou"";
ll isvowel(char c) {
    c = tolower(c);
    return vowels.find(c) != string::npos;
}

class Solution {
public:
    int minZeroArray(vector<int>& A, vector<vector<int>>& Q) {  // !

        ll n = A.size();
        ll m = Q.size();

        ll L = 0, R = m, ans = inf;
        while (L <= R) {
            ll M = (L + R) / 2;
            VLL sums(n + 1);
            rep(j, 0, M) {
                auto& q = Q[j];

                ll l = q[0];
                ll r = q[1];
                ll v = q[2];

                sums[l] += v;
                sums[r + 1] -= v;
            }

            ll cur = 0;
            ll ok = 1;
            rep(i, 0, n) {
                cur += sums[i];
                if (cur < A[i]) {
                    ok = 0;
                    break;
                }
            }
            if (ok) {
                upmin(ans, M);
                R = M - 1;
            } else {
                L = M + 1;
            }
        }

        if (ans == inf) return -1;
        return ans;
    }
};
",1454810435
Wanjun Li,wjli,64,3616,cpp,"


// COPY ALL MACROS BELOW

typedef long long LL;
#define MP make_pair
#define PB push_back
#define F first
#define S second
#define LB lower_bound
#define UB upper_bound
#define SZ(x) ((int)x.size())
#define LEN(x) ((int)x.length())
#define ALL(x) begin(x), end(x)
#define RSZ resize
#define ASS assign
#define REV(x) reverse(x.begin(), x.end());
#define trav(a, x) for (auto& a : x)
typedef pair<LL, LL> PL;
typedef vector<LL> VL;
typedef vector<PL> VPL;
typedef vector<VL> VVL;
typedef vector<VVL> VVVL;
typedef vector<VVVL> VVVVL;
typedef vector<string> VS;
typedef pair<int, int> PI;
typedef vector<int> VI;
typedef vector<PI> VPI;
typedef vector<vector<int>> VVI;
typedef vector<vector<PI>> VVPI;
#define MAX(x) *max_element(ALL(x))
#define MIN(x) *min_element(ALL(x))
#define FOR(i, n) for (int i = 0; i < n; i++) 
#define FOR1(i, n) for (int i = 1; i <= n; i++) 
#define SORT(x) sort(x.begin(), x.end())
#define RSORT(x) sort(x.rbegin(), x.rend())
#define SUM(x) accumulate(x.begin(), x.end(), 0LL)




class Solution {
public:
	int countValidSelections(vector<int>& nums) {
		int ans = 0, n = nums.size(), i, j, k, curr, d;
		FOR(i, n) {
			if (nums[i] != 0) continue;

			for (d = -1; d <= 1; d += 2) {
				int dd = d, curr = i;
				VI a = nums;
				while ((curr >= 0) && (curr < n)) {
					if (a[curr] == 0) curr += dd;
					else {
						a[curr]--;
						dd = -dd;
						curr += dd;
					}
				}

				bool valid = true;
				FOR(j, n) {
					if (a[j] != 0) {
						valid = false;
						break;
					}
				}
				if (valid) ans++;
			}
		}

		return ans;
	}
};
",1454806828
Wanjun Li,wjli,64,3639,cpp,"


// COPY ALL MACROS BELOW

typedef long long LL;
#define MP make_pair
#define PB push_back
#define F first
#define S second
#define LB lower_bound
#define UB upper_bound
#define SZ(x) ((int)x.size())
#define LEN(x) ((int)x.length())
#define ALL(x) begin(x), end(x)
#define RSZ resize
#define ASS assign
#define REV(x) reverse(x.begin(), x.end());
#define trav(a, x) for (auto& a : x)
typedef pair<LL, LL> PL;
typedef vector<LL> VL;
typedef vector<PL> VPL;
typedef vector<VL> VVL;
typedef vector<VVL> VVVL;
typedef vector<VVVL> VVVVL;
typedef vector<string> VS;
typedef pair<int, int> PI;
typedef vector<int> VI;
typedef vector<PI> VPI;
typedef vector<vector<int>> VVI;
typedef vector<vector<PI>> VVPI;
#define MAX(x) *max_element(ALL(x))
#define MIN(x) *min_element(ALL(x))
#define FOR(i, n) for (int i = 0; i < n; i++) 
#define FOR1(i, n) for (int i = 1; i <= n; i++) 
#define SORT(x) sort(x.begin(), x.end())
#define RSORT(x) sort(x.rbegin(), x.rend())
#define SUM(x) accumulate(x.begin(), x.end(), 0LL)





class Solution {
public:
	bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
		int n = nums.size(), i, j, k, s = 0;
		VI in(n, 0), out(n, 0);
		for (auto p : queries) {
			in[p[0]]++;
			out[p[1]]++;
		}

		bool valid = true;
		FOR(i, n) {
			s += in[i];
			if (s < nums[i]) valid = false;
			s -= out[i];
		}
		return valid;
	}
};

",1454808402
Wanjun Li,wjli,64,3643,cpp,"

// COPY ALL MACROS BELOW

typedef long long LL;
#define MP make_pair
#define PB push_back
#define F first
#define S second
#define LB lower_bound
#define UB upper_bound
#define SZ(x) ((int)x.size())
#define LEN(x) ((int)x.length())
#define ALL(x) begin(x), end(x)
#define RSZ resize
#define ASS assign
#define REV(x) reverse(x.begin(), x.end());
#define trav(a, x) for (auto& a : x)
typedef pair<LL, LL> PL;
typedef vector<LL> VL;
typedef vector<PL> VPL;
typedef vector<VL> VVL;
typedef vector<VVL> VVVL;
typedef vector<VVVL> VVVVL;
typedef vector<string> VS;
typedef pair<int, int> PI;
typedef vector<int> VI;
typedef vector<PI> VPI;
typedef vector<vector<int>> VVI;
typedef vector<vector<PI>> VVPI;
#define MAX(x) *max_element(ALL(x))
#define MIN(x) *min_element(ALL(x))
#define FOR(i, n) for (int i = 0; i < n; i++) 
#define FOR1(i, n) for (int i = 1; i <= n; i++) 
#define SORT(x) sort(x.begin(), x.end())
#define RSORT(x) sort(x.rbegin(), x.rend())
#define SUM(x) accumulate(x.begin(), x.end(), 0LL)





class Solution {
public:
	int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
		int n = nums.size(), i, j, k, s = 0, q = queries.size(), aa, bb, cc;

		aa = 0; bb = q + 2;
		while (aa < bb) {
			cc = (aa + bb) / 2;

			VI in(n, 0), out(n, 0);
			FOR(i, min(q, cc)) {
				in[queries[i][0]] += queries[i][2];
				out[queries[i][1]] += queries[i][2];
			}

			bool valid = true;
			FOR(i, n) {
				s += in[i];
				if (s < nums[i]) valid = false;
				s -= out[i];
			}
			if (!valid) aa = cc + 1;
			else bb = cc;	

		}
		if (aa > q) aa = -1;
		return aa;
	}
};

",1454812361
andy-lc,andy-lc,65,3616,python3,"class Solution:
    def countValidSelections(self, nums: list[int]) -> int:
        ans = 0
        for s in range(len(nums)):
            if nums[s] != 0:
                continue
            for d in (-1, 1):
                arr = list(nums)
                i = s
                while 0 <= i < len(arr):
                    if arr[i] > 0:
                        arr[i] -= 1
                        d = -d
                    i += d
                if all(x == 0 for x in arr):
                    ans += 1
        return ans
",1454807533
andy-lc,andy-lc,65,3639,python3,"class Solution:
    def isZeroArray(self, nums: list[int], queries: list[list[int]]) -> bool:
        diff = [0] * (len(nums) + 1)
        for a, b in queries:
            diff[a] += 1
            diff[b + 1] -= 1
        cum = 0
        for a, b in zip(nums, diff):
            cum += b
            if cum < a:
                return False
        return True
",1454809346
andy-lc,andy-lc,65,3643,python3,"class Solution:
    def check(self, nums: list[int], queries: list[list[int]]) -> bool:
        diff = [0] * (len(nums) + 1)
        for a, b, v in queries:
            diff[a] += v
            diff[b + 1] -= v
        cum = 0
        for a, b in zip(nums, diff):
            cum += b
            if cum < a:
                return False
        return True

    def minZeroArray(self, nums: list[int], queries: list[list[int]]) -> int:
        L = 0
        R = len(queries)
        if not self.check(nums, queries[:R]):
            return -1
        while L < R:
            M = (R - L) // 2 + L
            if self.check(nums, queries[:M]):
                R = M
            else:
                L = M + 1
        return L
",1454812906
Alex Wice,awice,67,3616,python3,"class Solution:
    def countValidSelections(self, A: List[int]) -> int:
        N = len(A)
        def check(i, d):
            B = A[:]
            while 0 <= i < N:
                if B[i] == 0:
                    i += d
                else:
                    B[i] -= 1
                    d *= -1
                    i += d
            return not any(B)
            
        ans = 0
        for i in range(N):
            if A[i]: continue
            for d in [-1,1]:
                if check(i, d): ans += 1
        return ans",1454806451
Alex Wice,awice,67,3639,python3,"class Solution:
    def isZeroArray(self, A: List[int], queries: List[List[int]]) -> bool:
        N = len(A)
        count = [0] * (N + 1)
        for l,r  in queries:
            count[l] += 1
            count[r+1] -= 1
        for i in range(1, N + 1):
            count[i] += count[i-1]
        for i in range(N):
            A[i] -= count[i]

        return all(v <= 0 for v in A)",1454807707
Alex Wice,awice,67,3643,python3,"class Solution:
    def minZeroArray(self, A: List[int], queries: List[List[int]]) -> int:
        N = len(A)
        def check(k):
            count = [0] * (N + 1)
            for i in range(k):
                l, r, v = queries[i]
                count[l] += v
                count[r+1] -= v
            for i in range(1, N + 1):
                count[i] += count[i-1]
            return all(x <= count[i] for i,x in enumerate(A))
            
        lo = 0
        hi = inf = len(queries) + 1
        while lo < hi:
            mi = lo + hi >> 1
            if not check(mi):
                lo = mi + 1
            else:
                hi = mi

        if lo == inf:
            lo = -1
        return lo",1454813343
hxu10,hxu10,69,3616,python,"class Solution(object):
    def countValidSelections(self, nums):
        """"""
        :type nums: List[int]
        :rtype: int
        """"""
        n = len(nums)
        def judge(curr, inc):
            arr = nums[:]
            d = inc
            while curr >= 0 and curr < n:
                if arr[curr] > 0:
                    arr[curr] -= 1
                    d *= -1
                curr += d
            
            return sum(arr) == 0
        
        ans = 0
        for i in range(n):
            if nums[i] > 0:  continue 
            if judge(i, 1):
                ans += 1
            if judge(i, -1):
                ans += 1
                
        return ans
    
            
                    
                ",1454807294
hxu10,hxu10,69,3639,python,"class Solution(object):
    def isZeroArray(self, nums, queries):
        """"""
        :type nums: List[int]
        :type queries: List[List[int]]
        :rtype: bool
        """"""
        n = len(nums)
        dp = [0]*(n+1)
        
        
        for [l,r] in queries:
            dp[l] += 1
            dp[r+1] -= 1
            
        for i in range(1,n):
            dp[i] += dp[i-1]
            
        for i in range(n):
            if dp[i] < nums[i]:
                return False
        return True
    
            ",1454809887
hxu10,hxu10,69,3643,python,"class Solution(object):
    def minZeroArray(self, nums, queries):
        """"""
        :type nums: List[int]
        :type queries: List[List[int]]
        :rtype: int
        """"""
        
        n = len(nums)
        def judge(k):
            dp = [0]*(n+1)
            for [l,r,d] in queries[:k]:
                dp[l] += d
                dp[r+1] -= d
            
            for i in range(1,n):
                dp[i] += dp[i-1]
                
            for i in range(n):
                if nums[i] > dp[i]:
                    return False
            return True
        
        front = 0
        rear = len(queries) + 1
        while front < rear:
            mid = (front + rear)//2
            if judge(mid):
                rear = mid
            else:
                front = mid + 1
                
                
        if front > len(queries):
            return -1
    
        
        return front
    
        
                ",1454813425
Salamander,BelgianSalamander,70,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        res = 0
        for start in range(len(nums)):
            if nums[start]: continue
            for dir in range(-1, 2, 2):
                bruh = nums[:]

                curr = start
                while True:
                    if curr < 0 or curr >= len(nums):
                        break
                    if bruh[curr] == 0:
                        curr += dir
                    else:
                        bruh[curr] -= 1
                        dir *= -1
                        curr += dir

                if sum(bruh) == 0:
                    #print(bruh)
                    res += 1
                    #print(start, dir)
                    
        return res",1454807856
Salamander,BelgianSalamander,70,3639,cpp,"class Solution {
public:
    vector<int> process(vector<int> nums, vector<vector<int>>& queries, int k) {
        vector<int> pdiff(nums.size() + 1);

        for (int i = 0; i < k; i++) {
            int l = queries[i][0];
            int r = queries[i][1];
            int val = queries[i][2];

            pdiff[l] -= val;
            pdiff[r+1] += val;
        }

        int curr = 0;

        for (int i = 0; i < nums.size(); i++) {
            curr += pdiff[i];
            nums[i] += curr;
        }

        return nums;
    }

    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        for (auto& p: queries) {
            p.push_back(1);
        }

        vector<int> res = process(nums, queries, queries.size());

        for (int x: res) {
            if (x > 0) return false;
        }

        return true;
    }
};",1454811895
Salamander,BelgianSalamander,70,3643,cpp,"class Solution {
public:
    vector<int> process(vector<int> nums, vector<vector<int>>& queries, int k) {
        vector<int> pdiff(nums.size() + 1);

        for (int i = 0; i < k; i++) {
            int l = queries[i][0];
            int r = queries[i][1];
            int val = queries[i][2];

            pdiff[l] -= val;
            pdiff[r+1] += val;
        }

        int curr = 0;

        for (int i = 0; i < nums.size(); i++) {
            curr += pdiff[i];
            nums[i] += curr;
        }

        return nums;
    }

    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int l = 0;
        int r = queries.size() + 1;

        while (l != r) {
            int m = (l + r) / 2;

            vector<int> res = process(nums, queries, m);

            bool valid = true;
            for (int x: res) {
                if (x > 0) valid = false;
            }

            if (valid) {
                r = m;
            } else {
                l = m + 1;
            }
        }

        if (l == queries.size() + 1) return -1;
        return l;
    }
};",1454813546
Edwin Chen,echen5503,72,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:

        n = len(nums)
        def sim(start, init_dir):
            A = nums[:]
            dir = init_dir
            pos = start

            while 0 <= pos < n:
                if A[pos] > 0:
                    dir = -1 if dir == 1 else 1
                    A[pos] -= 1

                pos += dir

            return sum(A) == 0

        ans = 0
        for i in range(len(nums)):
            if nums[i] != 0:
                continue
            for dir in [-1, 1]:
                if sim(i, dir):
                    ans += 1

        return ans",1454807292
Edwin Chen,echen5503,72,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:

        n = len(nums)
        diff = [0 for i in range(n+1)]

        for a, b in queries:
            diff[a] += 1
            diff[b+1] -= 1

        tot = [0 for i in range(n)]
        cur = 0
        for i in range(n):
            cur += diff[i]
            tot[i] += cur
        
        return all(t >= x for t, x in zip(tot, nums))
        ",1454809591
Edwin Chen,echen5503,72,3643,python3,"class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        
        n = len(nums)
        
        def check(subset):
            diff = [0 for i in range(n+1)]
    
            for a, b, val in subset:
                diff[a] += val
                diff[b+1] -= val
    
            tot = [0 for i in range(n)]
            cur = 0
            for i in range(n):
                cur += diff[i]
                tot[i] += cur
            
            return all(t >= x for t, x in zip(tot, nums))

        l = 0
        r = len(queries)

        while l < r:
            mid = (l+r)//2
            subset = queries[:mid]

            if check(subset):
                r = mid
            else:
                l = mid+1

        if not check(queries):
            return -1
            
        return l
            
        ",1454814159
SpeedyRogue54,SpeedyRogue54,73,3616,python3,"class Solution:
    def countValidSelections(self, nums):
        a = len(nums)
        b = 0
        c = [k for k in range(a) if nums[k] == 0]
        d = [-1, 1]
        for e in c:
            for f in d:
                g = nums[:]
                h = e
                i = f
                while 0 <= h < a:
                    if g[h] == 0:
                        h += i
                    else:
                        g[h] -= 1
                        i = -i
                        h += i
                if all(j == 0 for j in g):
                    b += 1
        return b
",1454812878
SpeedyRogue54,SpeedyRogue54,73,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        a = len(nums)
        b = [0] * a
        for c, d in queries:
            b[c] += 1
            if d + 1 < a:
                b[d + 1] -= 1
        for e in range(1, a):
            b[e] += b[e - 1]
        for f in range(a):
            if b[f] < nums[f]:
                return False
        return True
",1454813452
SpeedyRogue54,SpeedyRogue54,73,3643,python3,"class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        def can_zero(nums, queries, k):
            a = len(nums)
            b = [0] * (a + 1)
            for h in range(k):
                i, j, l = queries[h]
                b[i] += l
                if j + 1 < a:
                    b[j + 1] -= l
            m = 0
            for n in range(a):
                m += b[n]
                if m < nums[n]:
                    return False
            return True

        a = len(nums)
        b = len(queries)
        c = nums[:]  

        d = 0
        e = b
        f = -1

        while d <= e:
            g = (d + e) // 2
            if can_zero(c, queries, g):
                f = g
                e = g - 1
            else:
                d = g + 1

        return f

    ",1454814537
Victor Liu,powervic08,74,3616,java,"class Solution {
    public int countValidSelections(int[] nums) {
        int sum = 0;
        for (int i = 0; i < nums.length; i++) {
            sum += nums[i];
        }
        int cur = 0;
        int ans = 0;
        for (int i = 0; i < nums.length; i++) {
            cur += nums[i];
            if (nums[i] == 0) {
                if (cur == sum - cur) {
                    ans += 2;
                }
                else if (Math.abs(cur - (sum - cur)) == 1) {
                    ans++;
                }
            }
        }
        return ans;
    }
}",1454806541
Victor Liu,powervic08,74,3639,java,"class Solution {
    public boolean isZeroArray(int[] nums, int[][] queries) {
        long[] arr = new long[nums.length];
        for (int i = 0; i < queries.length; i++) {
            arr[queries[i][0]] += 1;
            if (queries[i][1] < nums.length - 1) {
                arr[queries[i][1] + 1] -= 1;
            }
        }
        for (int i = 1; i < arr.length; i++) {
            arr[i] += arr[i - 1];
        }
        boolean good = true;
        for (int i = 0; i < arr.length; i++) {
            if (arr[i] < nums[i]) good = false;
        }
        return good;
    }
}",1454809744
Victor Liu,powervic08,74,3643,java,"class Solution {
    public int minZeroArray(int[] nums, int[][] queries) {
        int l = 0;
        int r = queries.length;
        while (l < r) {
            int mid = (l + r) / 2;
            long[] arr = new long[nums.length];
            for (int i = 0; i < mid; i++) {
                arr[queries[i][0]] += queries[i][2];
                if (queries[i][1] < nums.length - 1) {
                    arr[queries[i][1] + 1] -= queries[i][2];
                }
            }
            for (int i = 1; i < arr.length; i++) {
                arr[i] += arr[i - 1];
            }
            boolean good = true;
            for (int i = 0; i < arr.length; i++) {
                if (arr[i] < nums[i]) good = false;
            }
            if (good) r = mid;
            else l = mid + 1;
        }
        long[] arr = new long[nums.length];
        for (int i = 0; i < l; i++) {
            arr[queries[i][0]] += queries[i][2];
            if (queries[i][1] < nums.length - 1) {
                arr[queries[i][1] + 1] -= queries[i][2];
            }
        }
        for (int i = 1; i < arr.length; i++) {
            arr[i] += arr[i - 1];
        }
        boolean good = true;
        for (int i = 0; i < arr.length; i++) {
            if (arr[i] < nums[i]) good = false;
        }
        if (good) return l;
        return -1;
    }
}",1454814855
penguinhacker,penguinhacker,76,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int ans=0;
        for (int i = 0; i < nums.size(); ++i) {
            if (nums[i])
                continue;
            for (int rep = 0; rep < 2; ++rep) {
                vector<int> b = nums;
                int dir = rep ? 1 : -1;
                int cur = i;
                while (cur >= 0 && cur < nums.size()) {
                    // if (i == 1 && rep == 0) {
                    //     cout << cur << endl;
                    // }
                    if (!b[cur]) {
                        cur += dir;
                        continue;
                    }
                    --b[cur];
                    dir *= -1;
                    cur += dir;
                }
                // if (*max_element(b.begin(), b.end())==0) {
                //     cout << i << "" "" << rep << endl;
                // }
                ans += *max_element(b.begin(), b.end())==0;
            }
        }
        return ans;
    }
};",1454815643
penguinhacker,penguinhacker,76,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
int lb=0, rb=queries.size()+1;
        while(lb<rb) {
            int mid=(lb+rb)/2;
            vector<int> p(nums.size()+1);
            for (int i=0; i<mid; ++i) {
                p[queries[i][0]]+=1;
                p[queries[i][1]+1]-=1;
            }
            bool ok=1;
            for (int i=0; i<nums.size(); ++i) {
                if (i)
                    p[i]+=p[i-1];
                if (p[i]<nums[i]) {
                    ok=0;
                    break;
                }
            }
            if (ok)
                rb=mid;
            else
                lb=mid+1;
        }
        return lb<=queries.size();
    }
};",1454809884
penguinhacker,penguinhacker,76,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int lb=0, rb=queries.size()+1;
        while(lb<rb) {
            int mid=(lb+rb)/2;
            vector<int> p(nums.size()+1);
            for (int i=0; i<mid; ++i) {
                p[queries[i][0]]+=queries[i][2];
                p[queries[i][1]+1]-=queries[i][2];
            }
            bool ok=1;
            for (int i=0; i<nums.size(); ++i) {
                if (i)
                    p[i]+=p[i-1];
                if (p[i]<nums[i]) {
                    ok=0;
                    break;
                }
            }
            if (ok)
                rb=mid;
            else
                lb=mid+1;
        }
        return lb==queries.size()+1?-1:lb;
    }
};",1454809133
Vitalii Nevidomyi,deadRabbit,78,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& A) {
        int r = 0;
        int s2 = 0; for (int x : A)  s2+=x;
        int s1 = 0;
        for (int x = 0; x < A.size(); ++x) {
            if (A[x]==0 && abs(s1-s2)<=1) r += (2-abs(s1-s2));
            s1+=A[x];
            s2-=A[x];
        }
        return r;
    }
};",1454806870
Vitalii Nevidomyi,deadRabbit,78,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& A, vector<vector<int>>& Q) {
        vector<int> S(A.size()+1, 0);
        for (auto q : Q) {
            S[q[0]]+=1;
            S[q[1]+1]-=1;
        }
        int c = 0;
        for (int i = 0; i < A.size(); ++i) {
            c += S[i];
            if (c<A[i]) return false;
        }
        return true;
    }
};",1454810811
Vitalii Nevidomyi,deadRabbit,78,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& A, vector<vector<int>>& Q) {
        int l = 0;
        int r = Q.size();
        int res = -1;
        while(l<=r) {
            int m = (r+l)/2;
            
            vector<int> S(A.size()+1, 0);
            for (int i = 0; i < m; ++i) {
                auto q = Q[i];
                S[q[0]]+=q[2];
                S[q[1]+1]-=q[2];
            }
            int c = 0;
            int ok = 1;
            for (int i = 0; ok && i < A.size(); ++i) {
                c += S[i];
                if (c<A[i]) ok = 0;
            }
            if (ok) {
                res = m;
                r = m-1;
            } else {
                l = m+1;
            }
        }
        return res;
    }
};",1454815851
Ayush,as_313,82,3616,python3,"class Solution:
    def move(self, p: int, r: bool) -> int:
        return p + 1 if r else p - 1
        
    def check(self, c: List[int], i: int, r: bool, l: int) -> bool:
        p = i
        while 0 <= p < l:
            if c[p] == 0: p = self.move(p, r)
            else: c[p] -= 1; r = not r; p = self.move(p, r)
        return all(x == 0 for x in c)
    
    def countValidSelections(self, n: List[int]) -> int:
        l = len(n)
        return sum(self.check(n.copy(), i, d, l) 
                  for i in range(l) if n[i] == 0 
                  for d in [True, False])",1454816394
Ayush,as_313,82,3639,python3,"class Solution:
    def isZeroArray(self, a: List[int], q: List[List[int]]) -> bool:
        n, d = len(a), [0] * (len(a) + 1)
        for l, r in q: d[l] += 1; d[r + 1] -= 1
        p, m = 0, [0] * n
        for i in range(n): p += d[i]; m[i] = p
        return all(a[i] <= m[i] for i in range(n))
",1454810803
Ayush,as_313,82,3643,python3,"class Solution:
    def minZeroArray(self, x: List[int], q: List[List[int]]) -> int:
        n, l, r, a = len(x), 0, len(q), -1
        def f(k):
            d, s = [0] * (n + 1), 0
            for i in range(k):
                a, b, v = q[i]
                d[a] += v; d[b + 1] -= v
            return all((s := s + d[i]) >= x[i] for i in range(n))
        while l <= r:
            m = (l + r) // 2
            if f(m): a, r = m, m - 1
            else: l = m + 1
        return a
",1454813223
Vasanth Reddy,vassu118,83,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int n = nums.size();
        int ans = 0;
        for(int i = 0; i < n; i++) if(nums[i] == 0) {
            int l = 0, r = 0;
            for(int j = 0; j < i; j++) l += nums[j];
            for(int j = i + 1; j < n; j++) r += nums[j];
            if(l == r) ans += 2;
            else if(abs(l - r) == 1) ans += 1;
        }
        return ans;
    }
};",1454807509
Vasanth Reddy,vassu118,83,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        bool ok = true;
        for(int j : nums) ok &= j == 0;
        if(ok) return 0;
        int l = 0, r = queries.size();
        while(l < r) {
            int mid = (l + r) / 2;
            vector<int> add(n + 1, 0);
            for(int j = 0; j <= mid; j++) {
                int x = queries[j][0], y = queries[j][1];
                add[x] += 1, add[y + 1] -= 1;
            }
            int sum = 0;
            bool ok = true;
            for(int j = 0; j < n; j++) {
                sum += add[j];
                ok &= (nums[j] - sum <= 0);
            }
            if(ok) r = mid;
            else l = mid + 1;
        }
        return (r == queries.size() ? false : true);
    }
};",1454816669
Vasanth Reddy,vassu118,83,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        bool ok = true;
        for(int j : nums) ok &= j == 0;
        if(ok) return 0;
        int l = 0, r = queries.size();
        while(l < r) {
            int mid = (l + r) / 2;
            vector<int> add(n + 1, 0);
            for(int j = 0; j <= mid; j++) {
                int x = queries[j][0], y = queries[j][1], z = queries[j][2];
                add[x] += z, add[y + 1] -= z;
            }
            int sum = 0;
            bool ok = true;
            for(int j = 0; j < n; j++) {
                sum += add[j];
                ok &= (nums[j] - sum <= 0);
            }
            if(ok) r = mid;
            else l = mid + 1;
        }
        return (r == queries.size() ? -1 : r + 1);
    }
};",1454815049
twitch_tv_qiqi_impact,twitch_tv_qiqi_impact,84,3616,python3,"class Solution:
    def countValidSelections(self, nn: List[int]) -> int:
        n = len(nn)
        def sim(x, dr):
            nums = nn[:]
            cur = x
            d = dr
            while 1:
                if not (0 <= cur <= n-1):
                    break
                if nums[cur] == 0:
                    cur += d
                elif nums[cur] > 0:
                    nums[cur] -= 1
                    d = -d
                    cur += d
            for x in nums:
                if x != 0:
                    return False
            return True
        ret = 0
        for i in range(n):
            if nn[i] == 0:
                for j in [-1, 1]:
                    if sim(i, j):
                        # print(i, j)
                        ret += 1
        return ret",1454809174
twitch_tv_qiqi_impact,twitch_tv_qiqi_impact,84,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        n = len(nums)
        ls = [0] * (n+1)
        for x, y in queries:
            ls[x] += 1
            ls[y+1] -= 1
        cur = 0
        for i in range(n):
            cur += ls[i]
            if cur < nums[i]:
                return False
        return True",1454812410
twitch_tv_qiqi_impact,twitch_tv_qiqi_impact,84,3643,python3,"class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        n = len(nums)
        def can(t):
            ls = [0] * (n+1)
            for i in range(t):
                x, y, z = queries[i]
                ls[x] += z
                ls[y+1] -= z
            cur = 0
            for i in range(n):
                cur += ls[i]
                if cur < nums[i]:
                    return False
            return True
        if not can(len(queries)):
            return -1
        l, r = 0, len(queries)
        while l < r:
            mi = (l + r) // 2
            if can(mi):
                r = mi
            else:
                l = mi + 1
        return r",1454816677
Enzo de Almeida Rodrigues,enzoar,89,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& a) {
        int pref = 0; 
        int suf = 0; 
        for (int num : a) suf += num; 
        int n = a.size(); 
        int ans = 0; 
        for (int i = 0; i < n; i++) {
            suf -= a[i]; 
            if (a[i] == 0) {
                ans += max(0, 2 - abs(suf - pref)); 
            }
            pref += a[i]; 
        }
        return ans; 
    }
};",1454807224
Enzo de Almeida Rodrigues,enzoar,89,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& a, vector<vector<int>>& Q) {
        int n = a.size();
        vector<int> delta(n + 1); 
        for (auto v : Q) {
            int l = v[0], r = v[1]; 
            delta[l]--; delta[r+1]++;
        }
        bool ok = 1; 
        for (int i = 0; i < n ;i++) {
            delta[i+1] += delta[i]; 
            a[i] += delta[i]; 
            ok &= a[i] <= 0; 
        }
        return (bool)ok; 
            
    }
};",1454810020
Enzo de Almeida Rodrigues,enzoar,89,3643,cpp,"class Solution {
public:
    typedef long long ll ;
    int minZeroArray(vector<int>& a, vector<vector<int>>& Q) {
        int n = a.size(); 
        int q = Q.size(); 
        int lo = -1, hi = q-1, ba = -2; 
        while (lo <= hi) {
            int mid = lo + hi >> 1; 
            vector<ll> delta(n + 1); 
            for (int i = 0; i <= mid; i++) {
                int l = Q[i][0], r = Q[i][1], v = Q[i][2]; 
                delta[l] -= v; 
                delta[r + 1] += v; 
            }
            bool ok = 1; 
            for (int i = 0; i < n; i++) {
                delta[i+1] += delta[i]; 
                ok &= (ll)a[i] + delta[i] <= 0; 
            }
            if (ok) {
                ba = mid; 
                hi = mid - 1; 
            }
            else lo = mid + 1; 
        }
        return (ba + 1); 
    }
};",1454817229
eatfood,eatfood,90,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        tot = sum(nums)
        n=len(nums)
        c=0

        valid =[]
        if tot % 2 == 0:
            valid=[tot//2]
        else:
            valid=[tot//2, tot//2+1]
        w = 3-len(valid)
        ans=0
        for i in range(n):
            c+=nums[i]
            if nums[i] == 0 and c in valid:
                ans+=w
        # print(tot, valid)
        return ans",1454808006
eatfood,eatfood,90,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        n=len(nums)
        m=len(queries)
        arr=[0]*n
        for l,r in queries:
            arr[l] += 1
            if r+1 < n:
                arr[r+1] -= 1
        # accum
        for i in range(1,n):
            arr[i]+=arr[i-1]

        # print(arr)

        # check larger
        for i in range(n):
            if arr[i] < nums[i]:
                return False
        return True",1454810366
eatfood,eatfood,90,3643,python3,"class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        n=len(nums)
        m=len(queries)
        inf=int(1e7)

        def check(k):
            arr=[0]*n
            for l,r,val in queries[:k]:
                arr[l] += val
                if r+1 < n:
                    arr[r+1] -= val
            # accum
            for i in range(1,n):
                arr[i]+=arr[i-1]
    
            # check larger
            for i in range(n):
                if arr[i] < nums[i]:
                    return False
            return True
        # binary search on k
        ans=inf
        lo = 0
        hi = m
        while lo<=hi:
            mid=(lo+hi)//2
            ok = check(mid)
            if ok:
                # go left
                ans=min(ans,mid)
                hi=mid-1
            else:
                lo=mid+1
        if ans == inf:
            return -1
        return ans
        
        ",1454817251
Anand V,Anand_2006,93,3616,python3,"from typing import List

class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        n = len(nums)
        valid_count = 0
        
        # Function to simulate the process
        def simulate(curr, direction):
            arr = nums[:]
            while 0 <= curr < n:
                if arr[curr] == 0:
                    curr += direction
                else:
                    arr[curr] -= 1
                    direction = -direction
                    curr += direction
            return all(x == 0 for x in arr)
        
        # Try all starting positions and directions
        for i in range(n):
            if nums[i] == 0:
                # Check both left and right directions
                if simulate(i, -1):  # Left direction
                    valid_count += 1
                if simulate(i, 1):  # Right direction
                    valid_count += 1
        
        return valid_count
",1454808271
Anand V,Anand_2006,93,3639,python3,"from typing import List

class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        n = len(nums)
        diff = [0] * (n + 1)
        
        # Build the difference array based on queries
        for li, ri in queries:
            diff[li] += 1
            if ri + 1 < n:
                diff[ri + 1] -= 1
        
        # Compute the prefix sum to get the range counts
        range_effect = [0] * n
        range_effect[0] = diff[0]
        for i in range(1, n):
            range_effect[i] = range_effect[i - 1] + diff[i]
        
        # Check if the allowed decrements are enough for each index
        for i in range(n):
            if nums[i] > range_effect[i]:
                return False
        
        return True
",1454808735
Anand V,Anand_2006,93,3643,python3,"class Solution:
    def minZeroArray(self, A, Q):
        n, m = len(A), len(Q)
        
        if all(x == 0 for x in A):  # Handle the edge case where A is already a Zero Array
            return 0
        
        def f(k):
            D = [0] * (n + 1)
            C = A[:]
            for i in range(k):
                l, r, v = Q[i]
                D[l] += v
                if r + 1 < n:
                    D[r + 1] -= v
            
            d = 0
            for i in range(n):
                d += D[i]
                C[i] = max(0, C[i] - d)
            
            return all(x == 0 for x in C)
        
        l, r, res = 1, m, -1
        while l <= r:
            mid = (l + r) // 2
            if f(mid):
                res = mid
                r = mid - 1
            else:
                l = mid + 1
        
        return res

",1454810856
YCX,EricYXing,94,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int n = nums.size(), s = 0, t = accumulate(nums.begin(), nums.end(), 0), ans = 0;
        for (int i = 0; i < n; i++)
        {
            s += nums[i];
            t -= nums[i];
            if (nums[i] == 0)
            {
                if (s == t)
                    ans += 2;
                else if (abs(s - t) == 1)
                    ans += 1;
            }
        }
        return ans;
    }
};",1454807547
YCX,EricYXing,94,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        vector<int> deop(n + 1, 0);
        for (auto& q : queries)
        {
            deop[q[0]]++;
            deop[q[1] + 1]--;
        }
        for (int i = 1; i <= n; i++)
            deop[i] += deop[i - 1];
        for (int i = 0; i < n; i++)
            if (nums[i] > deop[i])
                return false;
        return true;
    }
};",1454810905
YCX,EricYXing,94,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int ans = -1, l = 0, r = queries.size();
        while (l <= r)
        {
            int m = (l + r) / 2;
            if (check(nums, queries, m))
            {
                ans = m;
                r = m - 1;
            }
            else
                l = m + 1;
        }
        return ans;
    }
    
private: 
    bool check(vector<int>& nums, vector<vector<int>>& queries, int m)
    {
        int n = nums.size();
        vector<int> deop(n + 1, 0);
        for (int j = 0; j < m; j++)
        {
            deop[queries[j][0]] += queries[j][2];
            deop[queries[j][1] + 1] -= queries[j][2];
        }
        for (int i = 0; i < n; i++)
        {
            if (i > 0)
                deop[i] += deop[i - 1];
            if (nums[i] > deop[i])
                return false;
        }
        return true;
    }
};",1454817735
Kevin Xie,Kevinxiehk,96,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int sum = 0;
        for(auto x: nums) sum += x;
        int sum2 = 0;
        int ans = 0;
        for(int i = 0; i < nums.size(); i++) {
            if(nums[i] == 0 && sum2 * 2 == sum) ans += 2;
            else if(nums[i] == 0 && abs(sum - sum2 * 2) == 1) ans++;
            sum2 += nums[i];
        }
        return ans;
    }
};",1454806705
Kevin Xie,Kevinxiehk,96,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        int q = queries.size();
        int diff[n + 5];
        for(int i = 0; i <= n; i++) diff[i] = 0;
        for(auto x: queries) {
            diff[x[0]]--;
            diff[x[1] + 1]++;
        }
        for(int i = 1; i <= n; i++) diff[i] += diff[i - 1];
        for(int i = 0; i < n; i++) {
            if(nums[i] + diff[i] > 0) return false;
        }
        return true;
    }
};",1454808480
Kevin Xie,Kevinxiehk,96,3643,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries, int q) {
        int n = nums.size();
        long long diff[n + 5];
        for(int i = 0; i <= n; i++) diff[i] = 0;
        for(int i = 0; i < q; i++) {
            auto x = queries[i];
            diff[x[0]] -= x[2];
            diff[x[1] + 1] += x[2];
        }
        for(int i = 1; i <= n; i++) diff[i] += diff[i - 1];
        for(int i = 0; i < n; i++) {
            if(nums[i] + diff[i] > 0) return false;
        }
        return true;
    }
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int l = 0, r = queries.size();
        while(l < r) {
            int m = (l + r) / 2;
            if(isZeroArray(nums, queries, m)) r = m;
            else l = m + 1;
        }
        if(!isZeroArray(nums, queries, l)) return -1;
        return l;
    }
};",1454811646
Utpal Tiwari,utpaltiwari02,97,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int sum = accumulate(nums.begin(), nums.end(), 0);
        int curr = 0;
        int answer = 0;
        for(int i = 0; i < nums.size(); i++) {
            if(nums[i] == 0) {
                if(abs(sum - curr) == 1) {
                    answer += 1;
                }
                else if(abs(sum - curr) == 0) {
                    answer += 2;
                }
            }
            else {
                sum -= nums[i];
                curr += nums[i];
            }
        }
        return answer;
    }
};",1454808305
Utpal Tiwari,utpaltiwari02,97,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int size = nums.size();
        vector<int> sum(size, 0);
        for(int i = 0; i < queries.size(); i++) {
            int start = queries[i][0];
            int end = queries[i][1];
            sum[start]++;
            if(end + 1 < size) {
                sum[end + 1]--;
            }
        }
        vector<int> prefix;
        int total = 0;
        for(int i = 0; i < size; i++) {
            total += sum[i];
            prefix.push_back(total);
        }
        for(int i = 0; i < size; i++) {
            if(prefix[i] < nums[i]) {
                return false;
            }
        }
        return true;
    }
};",1454812045
Utpal Tiwari,utpaltiwari02,97,3643,cpp,"class Solution {
public:
    bool check(vector<int>& nums, vector<vector<int>>& queries, int k) {
        int size = nums.size();
        vector<int> sum(size, 0);
        for(int i = 0; i < k; i++) {
            int start = queries[i][0];
            int end = queries[i][1];
            int val = queries[i][2];
            sum[start] += val;
            if(end + 1 < size) {
                sum[end + 1] -= val;
            }
        }
        vector<int> prefix;
        int total = 0;
        for(int i = 0; i < size; i++) {
            total += sum[i];
            prefix.push_back(total);
        }
        for(int i = 0; i < size; i++) {
            if(nums[i] - prefix[i] > 0) {
                return false;
            }
        }
        return true;
    }
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int start = 0;
        int end = queries.size();
        int answer = INT_MAX;
        while(start <= end) {
            int mid = start + (end - start) / 2;
            if(check(nums, queries, mid) == true) {
                answer = min(answer, mid);
                end = mid - 1;
            }
            else {
                start = mid + 1;
            }
        }
        if(answer == INT_MAX) {
            return -1;
        }
        return answer;
    }
};",1454818757
Rohit Meena,Rohit_Meena,98,3616,cpp,"class Solution {
public:
    bool isValid(int pos, int dir, vector<int> nums){
        int n = nums.size();
        while(pos >= 0 && pos < n){
            if(nums[pos] == 0) pos += dir;
            else{
                nums[pos]--;
                if(dir == 1) dir = -1;
                else dir = 1;
                pos += dir;
            }
        }
        int sum = accumulate(nums.begin(), nums.end(), 0);
        return sum == 0;
    }
    int countValidSelections(vector<int>& nums) {
        int ans = 0;
        for(int i = 0;i<nums.size();i++){
            if(nums[i] != 0) continue;
            ans += isValid(i, 1, nums);
            ans += isValid(i, -1, nums);
        }
        return ans;
    }
};",1454808953
Rohit Meena,Rohit_Meena,98,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        vector<int> diff(n + 1);
        for(int i = 0;i<queries.size();i++){
            int l = queries[i][0], r = queries[i][1], val = 1;
            diff[l] += val;
            if(r + 1 < n) diff[r + 1] -= val;
        }
        for(int i = 0;i<n;i++){
            if(i) diff[i] += diff[i-1];
            if(diff[i] < nums[i]) return false;
        }
        return true;
    }
};",1454818815
Rohit Meena,Rohit_Meena,98,3643,cpp,"class Solution {
public:
    bool check(vector<int> &nums, vector<vector<int>>& queries, int k){
        int n = nums.size();
        vector<int> diff(n + 1);
        for(int i = 0;i<k;i++){
            int l = queries[i][0], r = queries[i][1], val = queries[i][2];
            diff[l] += val;
            if(r + 1 < n) diff[r + 1] -= val;
        }
        for(int i = 0;i<n;i++){
            if(i) diff[i] += diff[i-1];
            if(diff[i] < nums[i]) return false;
        }
        return true;
    }
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int l = 0, r = queries.size();
        int ans = -1;
        while(l <= r){
            int mid = l + (r - l)/2;
            if(check(nums, queries, mid)){
                ans = mid;
                r = mid - 1;
            }
            else l = mid + 1;
        }
        return ans;
    }
};",1454817563
Ma Lin,Ma_Lin,99,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& yuan) {
        vector<int> a;
        int i, j, p, sd, d, n = yuan.size(), res = 0;
        for (i = 0; i < n; ++i){
            if (yuan[i] != 0) continue;
            for (sd = -1; sd <= 1; sd += 2){
                a = yuan;
                d = sd;
                p = i;
                while (true){
                    p += d;
                    if (p < 0 || p >= n) break;
                    if (a[p] > 0){
                        --a[p];
                        d = -d;
                    }
                }
                
                for (j = 0; j < n; ++j)
                    if (a[j] != 0) break;
                if (j == n) ++res;
            }
        }
            
        return res;
    }
};",1454809639
Ma Lin,Ma_Lin,99,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& a, vector<vector<int>>& Q) {
        vector<int> f = a;
        int i, j, n = a.size(), now = 0;
        for (i = 0; i < n; ++i) f[i] = 0;
        for (auto q : Q){
            ++f[q[0]];
            if (q[1] + 1 < n) --f[q[1] + 1];
        }
        
        for (i = 0; i < n; ++i){
            now += f[i];
            if (now < a[i]) return false;
        }
        return true;
    }
};",1454812117
Ma Lin,Ma_Lin,99,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& a, vector<vector<int>>& Q) {
        int f[100005], i, j, st = 0, ed = Q.size(), mid, n = a.size(), now = 0, res = -1;
        while (st <= ed){
            mid = (st + ed) / 2;
            for (i = 0; i < n; ++i) f[i] = 0;
            for (i = 0; i < mid; ++i){
                f[Q[i][0]] += Q[i][2];
                if (Q[i][1] + 1 < n) f[Q[i][1] + 1] -= Q[i][2];
            }
            
            now = 0;
            for (i = 0; i < n; ++i){
                now += f[i];
                if (now < a[i]) break;
            }
            
            if (i >= n){
                res = mid;
                ed = mid - 1;
            }
            else st = mid + 1;
        }
        
        return res;
    }
};",1454818848
Huzaifa Khilawala,RedHeadphone,100,3616,python3,"
class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        right_sum = sum(nums)
        left_sum = 0
        ans = 0

        for i in range(len(nums)):
            right_sum -= nums[i]
            left_sum += nums[i]

            if nums[i]==0:
                if right_sum == left_sum:
                    ans+=2
                elif right_sum+1==left_sum or left_sum+1==right_sum:
                    ans+=1

        return ans 
",1454818389
Huzaifa Khilawala,RedHeadphone,100,3639,python3,"
class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        n = len(nums)
        diff = [0]*(n+1)

        for l,r in queries:
            diff[l] += 1
            diff[r+1] -= 1

        for i in range(1,n):
            diff[i] += diff[i-1]

        for i in range(n):
            if nums[i]-diff[i] > 0:
                return False
        
        return True",1454818545
Huzaifa Khilawala,RedHeadphone,100,3643,python3,"
def binary_search(left, right, check, start_from_left):
    if start_from_left:
        ans = left
    else:
        ans = right
    while left <= right:
        mid = (left + right) // 2
        if start_from_left:
            if check(mid):
                ans, left = mid, mid + 1
            else:
                right = mid - 1
        else:
            if check(mid):
                ans, right = mid, mid - 1
            else:
                left = mid + 1
    return ans

class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        n = len(nums)

        def check(k):
            diff = [0]*(n+1)

            for l,r,v in queries[:k]:
                diff[l] += v
                diff[r+1] -= v

            for i in range(1,n):
                diff[i] += diff[i-1]

            for i in range(n):
                if nums[i]-diff[i] > 0:
                    return False
            
            return True

        if not check(len(queries)):
            return -1

        ans = binary_search(0, len(queries), check, False)
        return ans ",1454819379
Mohamed Ashiq,mohd_ashiq04,103,3616,python3,"class Solution:
    def countValidSelections(self, nums):
        def simulate(curr, direction):
            nums_copy = nums[:]
            while 0 <= curr < len(nums_copy):
                if nums_copy[curr] == 0:
                    curr += direction
                else:
                    nums_copy[curr] -= 1
                    direction = -direction
                    curr += direction
            return all(x == 0 for x in nums_copy)

        valid_count = 0
        for i in range(len(nums)):
            if nums[i] == 0:
                if simulate(i, -1):  # Simulate starting at i, moving left
                    valid_count += 1
                if simulate(i, 1):   # Simulate starting at i, moving right
                    valid_count += 1
        return valid_count
",1454807289
Mohamed Ashiq,mohd_ashiq04,103,3639,python3,"class Solution:
    def isZeroArray(self, nums, queries):
        n = len(nums)
        diff = [0] * (n + 1)

        # Process each query to calculate the allowed decrements
        for li, ri in queries:
            diff[li] += 1
            if ri + 1 < n:
                diff[ri + 1] -= 1

        # Calculate the cumulative allowed decrements
        allowed_decrements = [0] * n
        current = 0
        for i in range(n):
            current += diff[i]
            allowed_decrements[i] = current

        # Check if nums can be transformed into a zero array
        for i in range(n):
            if nums[i] > allowed_decrements[i]:
                return False

        return True
",1454810674
Mohamed Ashiq,mohd_ashiq04,103,3643,python3,"class Solution:
    def minZeroArray(self, nums, queries):
        n = len(nums)
        m = len(queries)

        # Check if the first k queries can transform nums into a zero array
        def canMakeZero(k):
            diff = [0] * (n + 1)  # Difference array for allowed decrements

            # Apply the first k queries
            for i in range(k):
                l, r, val = queries[i]
                diff[l] += val
                if r + 1 < n:
                    diff[r + 1] -= val

            # Calculate cumulative allowed decrements
            allowed_decrements = [0] * n
            current = 0
            for i in range(n):
                current += diff[i]
                allowed_decrements[i] = current

            # Check if nums[i] <= allowed_decrements[i] for all i
            for i in range(n):
                if nums[i] > allowed_decrements[i]:
                    return False
            return True

        # Binary search for the minimum k
        left, right, result = 0, m, -1
        while left <= right:
            mid = (left + right) // 2
            if canMakeZero(mid):
                result = mid
                right = mid - 1  # Try to find a smaller k
            else:
                left = mid + 1  # Increase k

        return result
",1454812855
Xiaoyu Wang,wxy9018,104,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        summ = sum(nums)
        tot = 0
        res = 0
        for i in range(len(nums)):
            tot += nums[i]
            if nums[i] == 0:
                if tot * 2 == summ:
                    res += 2
                elif tot * 2 + 1 == summ or tot * 2 - 1 == summ:
                    res += 1
        return res",1454807563
Xiaoyu Wang,wxy9018,104,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        diff = [0] * (len(nums) + 1)
        for a, b in queries:
            diff[a] -= 1
            diff[b+1] += 1
        
        for i in range(len(nums)):
            diff[i+1] += diff[i]
        
        for i in range(len(nums)):
            nums[i] += diff[i]
        
        #print(nums)
        
        for i in range(len(nums)):
            if nums[i] > 0:
                return False
        
        return True",1454813721
Xiaoyu Wang,wxy9018,104,3643,python3,"class Solution:
    def minZeroArray(self, arr: List[int], queries: List[List[int]]) -> int:
        def helper(nums, k):
            diff = [0] * (len(nums) + 1)
            for i in range(k):
                a, b, val = queries[i]
                diff[a] -= val
                diff[b+1] += val

            for i in range(len(nums)):
                diff[i+1] += diff[i]

            for i in range(len(nums)):
                if nums[i] + diff[i] > 0:
                    return False

            return True
        
        low, high = 0, len(queries)
        while low < high:
            mid = (low + high) // 2
            if not helper(arr, mid):
                low = mid + 1
            else:
                high = mid
        
        if helper(arr, low):
            return low
        
        return -1",1454819859
code12345ay,code12345ay,106,3616,cpp,"#include <vector>
using namespace std;

class Solution {
public:
    // Helper function to simulate the process
    bool simulate(vector<int> nums, int start, int direction) {
        int n = nums.size();
        int curr = start;
        
        while (curr >= 0 && curr < n) {
            if (nums[curr] == 0) {
                curr += direction;
            } else {
                nums[curr] -= 1;
                direction *= -1; // Reverse direction
                curr += direction;
            }
        }
        
        // Check if all elements are zero
        for (int num : nums) {
            if (num != 0) {
                return false;
            }
        }
        
        return true;
    }

    int countValidSelections(vector<int>& nums) {
        int n = nums.size();
        int count = 0;
        
        for (int i = 0; i < n; ++i) {
            if (nums[i] == 0) {
                // Try moving left
                if (simulate(nums, i, -1)) {
                    count++;
                }
                // Try moving right
                if (simulate(nums, i, 1)) {
                    count++;
                }
            }
        }
        
        return count;
    }
};",1454813147
code12345ay,code12345ay,106,3639,cpp,"#include <vector>
using namespace std;

class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        vector<int> diff(n + 1, 0);

        // Apply all queries to the difference array
        for(auto &query : queries){
            int l = query[0];
            int r = query[1];
            diff[l] += 1;
            if(r + 1 < n){
                diff[r + 1] -= 1;
            }
        }

        // Compute prefix sums to get coverage counts
        int coverage = 0;
        for(int i = 0; i < n; ++i){
            coverage += diff[i];
            if(coverage < nums[i]){
                return false;
            }
        }
        return true;
    }
};",1454808151
code12345ay,code12345ay,106,3643,cpp,"#include <vector>
using namespace std;

class Solution {
public:
    bool isPossible(int k, const vector<int>& nums, const vector<vector<int>>& queries) {
        int n = nums.size();
        vector<long long> diff(n + 1, 0);
        for(int i = 0; i < k; ++i){
            int l = queries[i][0];
            int r = queries[i][1];
            int val = queries[i][2];
            diff[l] += val;
            if(r + 1 < n){
                diff[r + 1] -= val;
            }
        }
        long long total = 0;
        for(int i = 0; i < n; ++i){
            total += diff[i];
            if(total < nums[i]){
                return false;
            }
        }
        return true;
    }
    
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int left = 0, right = queries.size();
        int result = -1;
        while(left <= right){
            int mid = left + (right - left) / 2;
            if(isPossible(mid, nums, queries)){
                result = mid;
                right = mid - 1;
            }
            else{
                left = mid + 1;
            }
        }
        return result;
    }
};",1454806468
kmjp,kmjp,109,3616,cpp,"#include <bits/stdc++.h>
using namespace std;
typedef signed long long ll;

#undef _P
#define _P(...) (void)printf(__VA_ARGS__)
#define FOR(x,to) for(x=0;x<(to);x++)
#define FORR(x,arr) for(auto& x:arr)
#define FORR2(x,y,arr) for(auto& [x,y]:arr)
#define ALL(a) (a.begin()),(a.end())
#define ZERO(a) memset(a,0,sizeof(a))
#define MINUS(a) memset(a,0xff,sizeof(a))
template<class T> bool chmax(T &a, const T &b) { if(a<b){a=b;return 1;}return 0;}
template<class T> bool chmin(T &a, const T &b) { if(a>b){a=b;return 1;}return 0;}
//-------------------------------------------------------



class Solution {
public:
    int countValidSelections(vector<int>& nums) {
		int ret=0;
		int i,j;
		int N=nums.size();
		FOR(i,N) if(nums[i]==0) {
			FOR(j,2) {
				vector<int> V=nums;
				int cur=i;
				int dir=j;
				while(1) {
					if(cur<0||cur>=N) break;
					if(V[cur]==0) {
						if(dir==0) cur++;
						else cur--;
					}
					else {
						V[cur]--;
						dir^=1;
						if(dir==0) cur++;
						else cur--;
					}
				}
				FOR(cur,N) if(V[cur]) break;
				if(cur==N) ret++;
			}
		}
		return ret;
        
    }
};

",1454807873
kmjp,kmjp,109,3639,cpp,"#include <bits/stdc++.h>
using namespace std;
typedef signed long long ll;

#undef _P
#define _P(...) (void)printf(__VA_ARGS__)
#define FOR(x,to) for(x=0;x<(to);x++)
#define FORR(x,arr) for(auto& x:arr)
#define FORR2(x,y,arr) for(auto& [x,y]:arr)
#define ALL(a) (a.begin()),(a.end())
#define ZERO(a) memset(a,0,sizeof(a))
#define MINUS(a) memset(a,0xff,sizeof(a))
template<class T> bool chmax(T &a, const T &b) { if(a<b){a=b;return 1;}return 0;}
template<class T> bool chmin(T &a, const T &b) { if(a>b){a=b;return 1;}return 0;}
//-------------------------------------------------------


int S[202020];
class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
		int N=nums.size();
		int i;
		FOR(i,N+1) S[i]=0;
		FORR(q,queries) {
			S[q[0]]++;
			S[q[1]+1]--;
		}
		FOR(i,N) {
			S[i+1]+=S[i];
			if(S[i]<nums[i]) return 0;
		}
		return 1;
        
    }
};
",1454809550
kmjp,kmjp,109,3643,cpp,"#include <bits/stdc++.h>
using namespace std;
typedef signed long long ll;

#undef _P
#define _P(...) (void)printf(__VA_ARGS__)
#define FOR(x,to) for(x=0;x<(to);x++)
#define FORR(x,arr) for(auto& x:arr)
#define FORR2(x,y,arr) for(auto& [x,y]:arr)
#define ALL(a) (a.begin()),(a.end())
#define ZERO(a) memset(a,0,sizeof(a))
#define MINUS(a) memset(a,0xff,sizeof(a))
template<class T> bool chmax(T &a, const T &b) { if(a<b){a=b;return 1;}return 0;}
template<class T> bool chmin(T &a, const T &b) { if(a>b){a=b;return 1;}return 0;}
//-------------------------------------------------------

ll S[502020];


class Solution {
public:
	int can(vector<int> nums,vector<vector<int>> queries,int K) {
		int N=nums.size();
		int i;
		
		FOR(i,N+1) S[i]=0;
		FOR(i,K) {
			S[queries[i][0]]+=queries[i][2];
			S[queries[i][1]+1]-=queries[i][2];
		}
		FOR(i,N) {
			S[i+1]+=S[i];
			if(S[i]<nums[i]) return 0;
		}
		return 1;
	}
	
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
		int N=nums.size();
		int i;
		
		int K=queries.size()+1;
		for(i=20;i>=0;i--) if(can(nums,queries,K-(1<<i))) K-=1<<i;
		
		
		if(K<0) K=0;
		
		
		if(K==queries.size()+1) K=-1;
		return K;
        
    }
};
",1454813569
Sam Huang,CelonyMire,110,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& a) {
        int n = a.size();
        int ans = 0;
        for (int s = 0; s < n; s++) {
            if (a[s]) {
                continue;
            }
            for (int p = 0; p < 2; p++) {
                int d = pow(-1, p);
                auto b = a;
                for (int i = s; i >= 0 && i < n; i += d) {
                    if (b[i]) {
                        b[i]--;
                        d *= -1;
                    }
                }
                ans += ranges::count(b, 0) == n;
            }
        }
        return ans;
    }
};",1454808230
Sam Huang,CelonyMire,110,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& a, vector<vector<int>>& q) {
        int n = a.size(), m = q.size();
        bool ans = true;
        vector d(n + 1, 0);
        for (int i = 0; i < m; i++) {
            d[q[i][0]]++, d[q[i][1] + 1]--;
        }
        for (int i = 0, j = 0; i < n; i++) {
            j += d[i];
            ans &= j >= a[i];
        }
        return ans;
    }
};",1454810835
Sam Huang,CelonyMire,110,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& a, vector<vector<int>>& q) {
        int n = a.size(), m = q.size();
        int lb = -1, rb = m + 1;
        while (rb - lb > 1) {
            int mb = (lb + rb) >> 1;
            vector d(n + 1, 0);
            for (int i = 0; i < mb; i++) {
                d[q[i][0]] += q[i][2];
                d[q[i][1] + 1] -= q[i][2];
            }
            bool ans = true;
            for (int i = 0, j = 0; i < n; i++) {
                j += d[i];
                ans &= j >= a[i];
            }
            if (!ans) {
                lb = mb;
            } else {
                rb = mb;
            }
        }
        return rb > m ? -1 : rb;
    }
};",1454820441
Chris Ho,Chris_ho,111,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        n = len(nums)
        count = 0


        starting_positions = [i for i, val in enumerate(nums) if val == 0]

        for i in starting_positions:
            for d in [-1, 1]:  
                temp = nums.copy()
                curr = i
                dir = d

                while 0 <= curr < n:
                    if temp[curr] == 0:
                        curr += dir
                    else:
                        temp[curr] -= 1
                        dir = -dir
                        curr += dir


                all_zero = True
                for val in temp:
                    if val != 0:
                        all_zero = False
                        break
                if all_zero:
                    count += 1

        return count",1454806676
Chris Ho,Chris_ho,111,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        n = len(nums)
        coverage = [0] * (n + 1)  
        

        for query in queries:
            l, r = query
            coverage[l] += 1
            if r + 1 < n:
                coverage[r + 1] -= 1
        

        for i in range(n):
            if i > 0:
                coverage[i] += coverage[i - 1]

            if nums[i] > coverage[i]:
                return False
        

        return True",1454808178
Chris Ho,Chris_ho,111,3643,python3,"from typing import List

class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        n = len(nums)
        m = len(queries)
        

        if all(num == 0 for num in nums):
            return 0
        
        def is_possible(k: int) -> bool:

            diff = [0] * (n + 1)
            for i in range(k):
                l, r, val = queries[i]
                diff[l] += val
                if r + 1 < n:
                    diff[r + 1] -= val

            total = 0
            for i in range(n):
                total += diff[i]
                if total < nums[i]:
                    return False
            return True
        
        low = 1
        high = m
        answer = -1
        
        while low <= high:
            mid = (low + high) // 2
            if is_possible(mid):
                answer = mid
                high = mid - 1
            else:
                low = mid + 1
        

        if answer != -1:
            return answer
        else:

            if is_possible(m):
                return m
            else:
                return -1
",1454820491
jlallas384,jlallas384,112,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        ans = 0
        n = len(nums)
        for s in range(n):
            if nums[s] != 0:
                continue
            def do(dir):
                c = nums[:]
                at = s
                while 0 <= at and at < n:
                    if c[at] == 0:
                        at += dir
                    else:
                        c[at] -= 1
                        dir *= -1
                        at += dir
                return all(i == 0 for i in c)
            ans += do(-1) + do(1)
        return ans",1454808379
jlallas384,jlallas384,112,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        n = len(nums)
        ps = [0] * (n + 1)
        for l, r in queries:
            ps[l] += 1
            ps[r + 1] -= 1
        s = 0
        for i in range(n):
            ps[i + 1] += ps[i]
        for i in range(n):
            if nums[i] > ps[i]:
                return False
        return True",1454811226
jlallas384,jlallas384,112,3643,python3,"class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        n = len(nums)
        lo, hi = 0, len(queries)
        ans = -1
        while lo <= hi:
            mi = (lo + hi) // 2
            def f():
                ps = [0] * (n + 1)
                for i in range(mi):
                    l, r, v = queries[i]
                    ps[l] += v
                    ps[r + 1] -= v
                for i in range(n):
                    ps[i + 1] += ps[i]
                return all(ps[i] >= nums[i] for i in range(n))
            if f():
                ans = mi
                hi = mi - 1
            else:
                lo = mi + 1

        return ans",1454820761
Manan Rathod,Manan04,115,3616,python3,"class Solution:
    def countValidSelections(self, a: List[int]) -> int:
        ans = 0
        n = len(a)
        for i in range(n):
            if(a[i] != 0):
                continue
            *b, = a
            j = i
            direc = -1
            while j >= 0 and j < n:
                if(b[j] == 0):
                    j += direc
                elif(b[j] > 0):
                    b[j] -= 1
                    direc *= -1
                    j += direc
            if(b.count(0) == n):
                ans += 1
            j = i
            *b, = a
            direc = 1
            while j >= 0 and j < n:
                if(b[j] == 0):
                    j += direc
                elif(b[j] > 0):
                    b[j] -= 1
                    direc *= -1
                    j += direc
            if(b.count(0) == n):
                ans += 1
        return ans",1454807561
Manan Rathod,Manan04,115,3639,python3,"class Solution:
    def isZeroArray(self, a: List[int], queries: List[List[int]]) -> bool:
        n = len(a)
        helper = [0] * (n + 5)
        for l, r in queries:
            helper[l] += 1
            helper[r + 1] -= 1
        for i in range(1, len(helper)):
            helper[i] += helper[i - 1]
        for i in range(n):
            if(a[i] > helper[i]):
                return False
        return True",1454809990
Manan Rathod,Manan04,115,3643,python3,"class Solution:
    def minZeroArray(self, a: List[int], queries: List[List[int]]) -> int:
        ans = -2
        n = len(a)
        if(a.count(0) == n):
            return 0
        L = 0
        U = len(queries) - 1
        def poss(m):
            helper = [0] * (n + 5)
            for i in range(m + 1):
                l, r, val = queries[i]
                helper[l] += val
                helper[r + 1] -= val
            for i in range(1, len(helper)):
                helper[i] += helper[i - 1]
            for i in range(n):
                if(a[i] > helper[i]):
                    return False
            return True
        while L <= U:
            m = (L + U) >> 1
            if(poss(m)):
                U = m - 1
                ans = m
            else:
                L = m + 1
        return ans + 1",1454814706
Teadose,IanISam,116,3616,cpp,"class Solution {
public:
    bool check(int i, vector<int> nums, int dir){
        int n = nums.size();
        while(1){
            if(i==n||i<0)break;
            if(nums[i]==0){
                i+=dir;
            }
            else{
                nums[i]--;
                dir*=-1;
                i+=dir;
            }
        }
        for(int i=0; i<n; i++)if(nums[i])return(0);
        return(1);
    }
    int countValidSelections(vector<int>& nums) {
        int n = nums.size();
        int cnt = 0;
        for(int i=0; i<n; i++){
            if(nums[i])continue;
            cnt+=check(i, nums, 1);
            cnt+=check(i, nums, -1);
        }
        return(cnt);
    }
};",1454821673
Teadose,IanISam,116,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        vector<int> p(n+1);
        for(auto& x: queries){
            p[x[0]]++;
            p[x[1]+1]--;
        }
        int sum = 0;
        for(int i=0; i<n; i++){
            sum+=p[i];
            if(nums[i]>sum)return(0);
        }
        return(1);
    }
};",1454807827
Teadose,IanISam,116,3643,cpp,"class Solution {
public:
    typedef long long ll;
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        int start = -1, end = queries.size()+1;
        while(start<end-1){
            int find = (start+end)/2;
            int k = 0;
            vector<ll> p(n+1);
            for(auto& x: queries){
                if(k==find)break;
                p[x[0]]+=x[2];
                p[x[1]+1]-=x[2];
                k++;
            }
            ll sum = 0;
            bool found = 1;
            for(int i=0; i<n; i++){
                sum+=p[i];
                if(nums[i]>sum)found=0;
            }
            if(found){
                end=find;
            }
            else{
                start=find;
            }
        }
        return((end==queries.size()+1?-1:end));
    }
};",1454812926
Orca1293,Orca1293,120,3616,java,"class Solution {
    public int countValidSelections(int[] nums) {
        int n = nums.length;
        int[] arr1 = new int[n+1];
        int[] arr2 = new int[n+1];
        for(int i = 0; i < n; i++){
            arr1[i+1] = arr1[i] + nums[i];
        }
        
        for(int i = n-1; i >= 0; i--){
            arr2[i] = arr2[i+1] + nums[i];
        }
        int res = 0;
        for(int i = 0; i < n; i++){
            if(nums[i] == 0){
                if(arr1[i] == arr2[i+1]){
                    res += 2;
                }
                else if(arr1[i]+1 == arr2[i+1] || arr1[i] == arr2[i+1]+1){
                    res += 1;
                }
            }
        }
        return res;
    }
}",1454811143
Orca1293,Orca1293,120,3639,java,"class Solution {
    public boolean isZeroArray(int[] nums, int[][] queries) {
        int n = nums.length;
        int[] arr = new int[n+1];
        for(int[] c : queries){
            arr[c[0]] -= 1;
            arr[c[1]+1] += 1;
        }
        
        int cur = 0;
        for(int i = 0; i < n; i++){
            cur += arr[i];
            if(nums[i] + cur > 0){
                return false;
            }
        }
        
        return true;
    }
}",1454815927
Orca1293,Orca1293,120,3643,java,"class Solution {
    public int minZeroArray(int[] nums, int[][] queries) {
        int min = 0;
        int max = queries.length;
        while(min <= max){
            int mid = min + (max - min)/2;
            if(check(nums,queries,mid)){
                max = mid - 1;
            }
            else{
                min = mid + 1;
            }
        }
        if(min > queries.length){
            return -1;
        }
        return min;
    }
    
    public boolean check(int[] nums, int[][] queries, int mid){
        int n = nums.length;
        int[] arr = new int[n+1];
        int k = 0;
        for(int[] c : queries){
            if(k < mid){
                arr[c[0]] -= c[2];
                arr[c[1]+1] += c[2];
            }
            else{
                break;
            }
            k += 1;
        }
        
        int cur = 0;
        for(int i = 0; i < n; i++){
            cur += arr[i];
            if(nums[i] + cur > 0){
                return false;
            }
        }
        
        return true;
    }
}",1454821976
Viraj Chandra,virajchandra51,122,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int n = nums.size();
        vector<int> pre(n+1,0);
        for(int i=1;i<=n;i++)
            {
                pre[i]=pre[i-1]+nums[i-1];
            }
        for(auto it:pre) cout<<it<<"" "";
        cout<<endl;
        int ans = 0;
        for(int i=1;i<=n;i++)
            {
                if(nums[i-1]==0 && pre[i-1]==pre[n]-pre[i-1])
                    ans+=2;
                else if(nums[i-1]==0 && abs(pre[i-1]-(pre[n]-pre[i-1]))==1)
                    ans++;
            }
        return ans;
    }
};",1454813034
Viraj Chandra,virajchandra51,122,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        vector<int> diff(n + 1, 0);

        // Apply all queries to the difference array
        for(auto &query : queries){
            int l = query[0];
            int r = query[1];
            diff[l] += 1;
            if(r + 1 < n){
                diff[r + 1] -= 1;
            }
        }

        // Compute prefix sums to get coverage counts
        int coverage = 0;
        for(int i = 0; i < n; ++i){
            coverage += diff[i];
            if(coverage < nums[i]){
                return false;
            }
        }
        return true;
    }
};",1454814976
Viraj Chandra,virajchandra51,122,3643,cpp,"class Solution {
public:
    bool isPossible(int k, const vector<int>& nums, const vector<vector<int>>& queries) {
        int n = nums.size();
        vector<long long> diff(n + 1, 0);
        for(int i = 0; i < k; ++i){
            int l = queries[i][0];
            int r = queries[i][1];
            int val = queries[i][2];
            diff[l] += val;
            if(r + 1 < n){
                diff[r + 1] -= val;
            }
        }
        long long total = 0;
        for(int i = 0; i < n; ++i){
            total += diff[i];
            if(total < nums[i]){
                return false;
            }
        }
        return true;
    }
    
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int left = 0, right = queries.size();
        int result = -1;
        while(left <= right){
            int mid = left + (right - left) / 2;
            if(isPossible(mid, nums, queries)){
                result = mid;
                right = mid - 1;
            }
            else{
                left = mid + 1;
            }
        }
        return result;
    }
};",1454815550
Xiaomeng Yang,yangxm,123,3616,cpp,"constexpr int MAX = 128;

int a[MAX];

bool Check(int n, int p, int d) {
  while (p >= 0 && p < n) {
    if (a[p] == 0) {
      p += d;
    } else {
      --a[p];
      d = -d;
      p += d;
    }
  }
  for (int i = 0; i < n; ++i) {
    if (a[i]) {
      return false;
    }
  }
  return true;
}

class Solution {
public:
    int countValidSelections(vector<int>& nums) {
      int n = nums.size(), ret = 0;
      for (int i = 0; i < n; ++i) {
        if (nums[i] == 0) {
          copy(nums.begin(), nums.end(), a);
          if (Check(n, i, 1)) {
            ++ret;
          }
          copy(nums.begin(), nums.end(), a);
          if (Check(n, i, -1)) {
            ++ret;
          }
        }
      }
      return ret;
    }
};",1454809692
Xiaomeng Yang,yangxm,123,3639,cpp,"constexpr int MAX = 100010;

int cnt[MAX];

class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
      int n = nums.size();
      fill(cnt, cnt + n + 1, 0);
      for (const auto& q : queries) {
        int l = q[0], r = q[1] + 1;
        ++cnt[l];
        --cnt[r];
      }
      if (cnt[0] < nums[0]) {
        return false;
      }
      for (int i = 1; i < n; ++i) {
        cnt[i] += cnt[i - 1];
        if (cnt[i] < nums[i]) {
          return false;
        }
      }
      return true;
    }
};",1454813172
Xiaomeng Yang,yangxm,123,3643,cpp,"constexpr int MAX = 100010;

int a[MAX], l[MAX], r[MAX], v[MAX], cnt[MAX];

bool Check(int n, int m) {
  fill(cnt, cnt + n + 1, 0);
  for (int i = 0; i < m; ++i) {
    cnt[l[i]] += v[i];
    cnt[r[i]] -= v[i];
  }
  int sum = 0;
  for (int i = 0; i < n; ++i) {
    sum += cnt[i];
    if (sum < a[i]) {
      return false;
    }
  }
  return true;
}

class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
      int n = nums.size(), m = queries.size();
      copy(nums.begin(), nums.end(), a);
      for (int i = 0; i < m; ++i) {
        l[i] = queries[i][0];
        r[i] = queries[i][1] + 1;
        v[i] = queries[i][2];
      }
      int ll = 0, rr = m + 1, ret = -1;
      while (ll < rr) {
        int mid = ll + (rr - ll) / 2;
        if (Check(n, mid)) {
          ret = mid;
          rr = mid;
        } else {
          ll = mid + 1;
        }
      }
      return ret;
    }
};",1454822541
raincoat911,raincoat911,125,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        vector<int> left(nums.size() + 1);
        for (int i = 0; i < nums.size(); i++) {
            left[i + 1] = left[i] + nums[i];
        }
        int res = 0, right = 0;
        for (int i = nums.size() - 1; i > -1; i--) {
            // cout << left[i] << "" "" << right << endl;
            if (nums[i] == 0) {
                if (left[i] == right) res += 2;
                if (abs(left[i] - right) == 1) res++;
            }
            right += nums[i];
        }
        return res;
    }
};",1454808892
raincoat911,raincoat911,125,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        vector<int> m(nums.size() + 1);
        for (auto& q : queries) {
            m[q[0]]++;
            m[q[1] + 1]--;
        }
        int cur = 0;
        for (int i = 0; i < nums.size(); i++) {
            cur += m[i];
            // cout << cur << endl;
            if (nums[i] > cur) return false;
        }
        return true;
    }
};",1454811768
raincoat911,raincoat911,125,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int lo = 0, hi = queries.size() + 1;
        while (lo < hi) {
            int mid = (lo + hi) / 2;
            if (f(nums, queries, mid)) hi = mid;
            else lo = mid + 1;
        }
        return lo > queries.size() ? -1 : lo;
    }
    
private:
    int f(vector<int>& nums, vector<vector<int>>& queries, int k) {
        vector<int> m(nums.size() + 1);
        for (int i = 0; i < k; i++) {
            auto& q = queries[i];
            m[q[0]] += q[2];
            m[q[1] + 1] -= q[2];
        }
        int cur = 0;
        for (int i = 0; i < nums.size(); i++) {
            cur += m[i];
            // cout << cur << endl;
            if (nums[i] > cur) return false;
        }
        return true;
    }
};",1454815817
peicd7699,peicd7699,126,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        s = sum(nums)
        
        curr = 0
        res = 0
        
        for v in nums:
            curr += v
            left = curr
            right = s - left
            if v == 0:
                if abs(left-right) == 1:
                    res += 1
                elif left==right:
                    res += 2
                    
        return res
                ",1454810033
peicd7699,peicd7699,126,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        n = len(nums)
        arr = [0] * (n+1)
        
        for s,e in queries:
            arr[s] += 1
            arr[e+1] -= 1
            
        curr = 0
        
        for v,c in zip(nums, arr):
            curr += c
            if v > curr:
                # print(v,c)
                return False
        return True",1454812269
peicd7699,peicd7699,126,3643,python3,"class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        
        def check(m):
            
            n = len(nums)
            arr = [0] * (n+1)
            ind = 0
            for s,e,val in queries:
                ind += 1
                if ind > m:
                    break
                arr[s] += val
                arr[e+1] -= val

            curr = 0

            for v,c in zip(nums, arr):
                curr += c
                if v > curr:
                    # print(v,c)
                    return False
            return True
        
        res = float('inf')
        if sum(nums) == 0:
            return 0
        
        l, h = 1, len(queries)
        while l<=h:
            m = (l+h)//2
            if check(m):
                res = m
                h = m- 1
            else:
                l = m+1
        return res if res != float('inf') else -1",1454815841
Feng W,wddd,127,3616,java,"class Solution {
    public int countValidSelections(int[] nums) {
        int[] prefixLeft = new int[nums.length];
        prefixLeft[0] = nums[0];
        for (int i = 1; i < nums.length; i++) {
            prefixLeft[i] = nums[i] + prefixLeft[i - 1];
        }

        int[] prefixRight = new int[nums.length];
        prefixRight[prefixRight.length - 1] = nums[nums.length - 1];
        for (int i = nums.length - 2; i >= 0; i--) {
            prefixRight[i] = nums[i] + prefixRight[i + 1];
        }

        int count = 0;
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] == 0) {
                if (prefixLeft[i] == prefixRight[i]) {
                    count += 2;
                } else if (Math.abs(prefixLeft[i] - prefixRight[i]) == 1) {
                    count += 1;
                }
            }
        }

        return count;
    }
}",1454809697
Feng W,wddd,127,3639,java,"class Solution {
    public boolean isZeroArray(int[] nums, int[][] queries) {
        int[] diff = new int[nums.length + 1];
        for (int[] q : queries) {
            diff[q[0]]++;
            diff[q[1] + 1]--;
        }
        
        for (int i = 1; i < diff.length; i++) {
            diff[i] += diff[i - 1];
        }
        
        for (int i = 0; i < nums.length; i++) {
            if (diff[i] < nums[i]) {
                return false;
            }
        }
        
        return true;
    }
}",1454813169
Feng W,wddd,127,3643,java,"class Solution {
    public int minZeroArray(int[] nums, int[][] queries) {
        int[] diff = new int[nums.length + 1];

        int left = 0;
        int right = queries.length + 1;

        while (left < right) {
            int mid = left + (right - left) / 2;
            if (!valid(nums, diff, queries, mid)) {
                left = mid + 1;
            } else {
                right = mid;
            }
        }

        return left <= queries.length ? left : -1;
    }

    private boolean valid(int[] nums, int[] diff, int[][] queries, int k) {
        Arrays.fill(diff, 0);

        for (int i = 0; i < k; i++) {
            diff[queries[i][0]] += queries[i][2];
            diff[queries[i][1] + 1] -= queries[i][2];
        }

        for (int i = 0; i < nums.length; i++) {
            diff[i] += i > 0 ? diff[i - 1] : 0;
            if (diff[i] < nums[i]) {
                return false;
            }
        }

        return true;
    }
}",1454822804
Prasath,smartyprasath,128,3616,python3,"from typing import List

class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        def simulate(start, direction):
            nums_copy = nums[:]
            curr = start
            dir_sign = 1 if direction == ""right"" else -1
            while 0 <= curr < len(nums_copy):
                if nums_copy[curr] == 0:
                    curr += dir_sign
                elif nums_copy[curr] > 0:
                    nums_copy[curr] -= 1
                    dir_sign *= -1 
                    curr += dir_sign
        
            return all(x == 0 for x in nums_copy)
        valid_positions = [i for i, x in enumerate(nums) if x == 0]
        count = 0
        for pos in valid_positions:
            if simulate(pos, ""left""):
                count += 1
            if simulate(pos, ""right""):
                count += 1
        
        return count
",1454814338
Prasath,smartyprasath,128,3639,python3,"from typing import List

class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        n = len(nums)
        decrements = [0] * (n + 1)  
        
        for li, ri in queries:
            decrements[li] += 1
            if ri + 1 < n:
                decrements[ri + 1] -= 1
        
        current_decrement = 0
        for i in range(n):
            current_decrement += decrements[i]
            if current_decrement < nums[i]:
                return False
        
        return True",1454820898
Prasath,smartyprasath,128,3643,python3,"from typing import List

class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        n = len(nums)
        
        def canAchieveZero(k: int) -> bool:
            decrements = [0] * (n + 1)
        
            for i in range(k):
                li, ri, vali = queries[i]
                decrements[li] += vali
                if ri + 1 < n:
                    decrements[ri + 1] -= vali
            
            current_decrement = 0
            for i in range(n):
                current_decrement += decrements[i]
                if nums[i] > current_decrement:
                    return False
            
            return True
        
        left, right = 0, len(queries)
        result = -1
        
        while left <= right:
            mid = (left + right) // 2
            if canAchieveZero(mid):
                result = mid  
                right = mid - 1
            else:
                left = mid + 1
        
        return result

solution = Solution()
print(solution.minZeroArray([2, 0, 2], [[0, 2, 1], [0, 2, 1], [1, 1, 3]]))
print(solution.minZeroArray([4, 3, 2, 1], [[1, 3, 2], [0, 2, 1]]))  ",1454822933
Anupam Shah,user9218i,129,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int res = 0;
        const int n = nums.size();
        for(int i = 0; i < nums.size(); i ++ ) {
            if(!nums[i]) {
                int sum = 0;
                for(int j = 0; j < i; j ++) {
                    sum += nums[j];
                }
                for(int j = i + 1; j < n; j ++) {
                    sum -= nums[j];
                }
                if(abs(sum) == 1)   res ++;
                else    if(abs(sum) == 0)   res += 2;
            }
        }
        return res;
    }
};",1454822934
Anupam Shah,user9218i,129,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        vector<int> mp(n+2, 0);
        for(auto it : queries) {
            mp[it[0]] ++, mp[it[1] + 1] --;
            
        }
        for(int i = 1; i <= n; i ++)    mp[i] += mp[i-1];
        for(int i = 0; i < nums.size(); i ++) {
            if(nums[i] > mp[i])     return 0;
        }
        return 1;
    }
};",1454808520
Anupam Shah,user9218i,129,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int low = 0, high = queries.size(), ans = -1;
        const int n = nums.size();
        while(low <= high) {
            int mid = (low + high) >> 1;
            int k = mid - 1;
            
            vector<long long> f(n+2, 0);
            for(int i = 0; i <= k; i ++)     
                f[queries[i][0]] += (long long) queries[i][2], f[queries[i][1] + 1] -= (long long) queries[i][2];
            
            bool no = 0;
            for(int i = 0; i < n; i ++ ) {
                if(i)   f[i] += f[i-1];
                if(f[i] < nums[i]) {
                    no = 1;
                    break;
                }
            }
            if(no == 0) {
                ans = mid;
                high = mid - 1;
            }
            else    low = mid + 1;
        }
        return ans;
    }
};",1454817041
Xuanxuan Wang,wxxlouisa,130,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
       
        auto simulate = [&](int start, int direction) {
            vector<int> temp_nums = nums;
            int n = temp_nums.size();
            int curr = start;
            
            while (curr >= 0 && curr < n) {
                if (temp_nums[curr] == 0) {
                    curr += direction; 
                } else {
                    temp_nums[curr] -= 1; 
                    direction = -direction; 
                    curr += direction; 
                }
            }
            
            return all_of(temp_nums.begin(), temp_nums.end(), [](int x) { return x == 0; });
        };
        
        int validCount = 0; 
        int n = nums.size();
        
        for (int i = 0; i < n; ++i) {
            if (nums[i] == 0) {
                if (simulate(i, 1)) {
                    ++validCount;
                }
                if (simulate(i, -1)) {
                    ++validCount;
                }
            }
        }
        
        return validCount;
    }
};",1454807344
Xuanxuan Wang,wxxlouisa,130,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        int m = queries.size();

        auto canMakeZero = [&](int k) -> bool {
            vector<int> diff(n + 1, 0);
            vector<int> current = nums;

            for (int i = 0; i < k; ++i) {
                int li = queries[i][0];
                int ri = queries[i][1];
                int vali = queries[i][2];
                diff[li] -= vali;
                if (ri + 1 < n) {
                    diff[ri + 1] += vali;
                }
            }

            int decrement = 0;
            for (int i = 0; i < n; ++i) {
                decrement += diff[i];
                current[i] = max(0, current[i] + decrement);
                if (current[i] > 0) {
                    return false; 
                }
            }
            return true; 
        };
        
        for (auto& each: queries) {
            each.emplace_back(1);
        }
        return canMakeZero(m);
    }
};",1454822953
Xuanxuan Wang,wxxlouisa,130,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        int m = queries.size();

        auto canMakeZero = [&](int k) -> bool {
            vector<int> diff(n + 1, 0);
            vector<int> current = nums;

            for (int i = 0; i < k; ++i) {
                int li = queries[i][0];
                int ri = queries[i][1];
                int vali = queries[i][2];
                diff[li] -= vali;
                if (ri + 1 < n) {
                    diff[ri + 1] += vali;
                }
            }

            int decrement = 0;
            for (int i = 0; i < n; ++i) {
                decrement += diff[i];
                current[i] = max(0, current[i] + decrement);
                if (current[i] > 0) {
                    return false; 
                }
            }
            return true; 
        };

        int left = 0, right = m, result = -1;
        while (left <= right) {
            int mid = left + (right - left) / 2;
            if (canMakeZero(mid)) {
                result = mid;
                right = mid - 1; 
            } else {
                left = mid + 1; 
            }
        }

        return result;
    }
};",1454821127
zsq007,zsq007,131,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        ttl = sum(nums)
        acc, res = 0, 0
        for num in nums:
            if num == 0:
                if ttl == 2*acc:
                    res += 2
                elif abs(acc*2 - ttl) == 1:
                    res += 1
            else:
                acc += num

        return res",1454807564
zsq007,zsq007,131,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        n = len(nums)
        axis = [0] * (n+1)

        for l,r in queries:
            axis[l] += 1
            axis[r+1] -= 1

        for i in range(n):
            axis[i+1] += axis[i]
            if nums[i] > axis[i]:
                return False

        return True
        ",1454811205
zsq007,zsq007,131,3643,python3,"class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        def check(length: int) -> bool:
            n = len(nums)
            axis = [0] * (n+1)
    
            for l,r,val in queries[:length+1]:
                axis[l] += val
                axis[r+1] -= val
    
            for i in range(n):
                axis[i+1] += axis[i]
                if nums[i] > axis[i]:
                    return False
    
            return True

        if not any(nums):
            return 0
        res = bisect_left(range(len(queries)), 1, key=check) + 1
        return res if res <= len(queries) else -1",1454816204
kzyKT,kzyKT,136,3616,cpp,"#define F first
#define S second
#define R cin>>
#define ll long long
#define ln cout<<'\n'
#define in(a) insert(a)
#define pb(a) push_back(a)
#define pd(a) printf(""%.10f\n"",a)
#define mem(a) memset(a,0,sizeof(a))
#define all(c) (c).begin(),(c).end()
#define iter(c) __typeof((c).begin())
#define rrep(i,n) for(ll i=(ll)(n)-1;i>=0;i--)
#define REP(i,m,n) for(ll i=(ll)(m);i<(ll)(n);i++)
#define rep(i,n) REP(i,0,n)
#define tr(it,c) for(iter(c) it=(c).begin();it!=(c).end();it++)
ll check(ll n,ll m,ll x,ll y){return x>=0&&x<n&&y>=0&&y<m;}void pr(){ln;}
template<class A,class...B>void pr(const A &a,const B&...b){cout<<a<<(sizeof...(b)?"" "":"""");pr(b...);}
template<class A>void PR(A a,ll n){rep(i,n){if(i)cout<<' ';cout<<a[i];}ln;}
const ll MAX=1e9+7,MAXL=1LL<<61,dx[8]={0,-1,0,1,-1,-1,1,1},dy[8]={-1,0,1,0,-1,1,1,-1};
typedef pair<ll,ll> P;

class Solution {
public:
  int countValidSelections(vector<int>& a) {
    ll n=a.size();
    ll d[n],c[n];
    mem(d),mem(c);
    rep(i,n) d[i]=c[i]=a[i];
    rep(i,n-1) d[i+1]+=d[i];
    rrep(i,n-1) c[i]+=c[i+1];
    int ans=0;
    rep(i,n) {
      if(a[i]==0) {
        if(d[i]==c[i]) ans+=2;
        else if(d[i]+1==c[i]) ans++;
        else if(d[i]==c[i]+1) ans++;
      }
    }
    return ans;
  }
};
",1454806732
kzyKT,kzyKT,136,3639,cpp,"#define F first
#define S second
#define R cin>>
#define ll long long
#define ln cout<<'\n'
#define in(a) insert(a)
#define pb(a) push_back(a)
#define pd(a) printf(""%.10f\n"",a)
#define mem(a) memset(a,0,sizeof(a))
#define all(c) (c).begin(),(c).end()
#define iter(c) __typeof((c).begin())
#define rrep(i,n) for(ll i=(ll)(n)-1;i>=0;i--)
#define REP(i,m,n) for(ll i=(ll)(m);i<(ll)(n);i++)
#define rep(i,n) REP(i,0,n)
#define tr(it,c) for(iter(c) it=(c).begin();it!=(c).end();it++)
ll check(ll n,ll m,ll x,ll y){return x>=0&&x<n&&y>=0&&y<m;}void pr(){ln;}
template<class A,class...B>void pr(const A &a,const B&...b){cout<<a<<(sizeof...(b)?"" "":"""");pr(b...);}
template<class A>void PR(A a,ll n){rep(i,n){if(i)cout<<' ';cout<<a[i];}ln;}
const ll MAX=1e9+7,MAXL=1LL<<61,dx[8]={0,-1,0,1,-1,-1,1,1},dy[8]={-1,0,1,0,-1,1,1,-1};
typedef pair<ll,ll> P;

class Solution {
public:
  bool isZeroArray(vector<int>& a, vector<vector<int>>& q) {
    ll n=a.size();
    ll d[n+1];
    mem(d);
    rep(i,q.size()) {
      d[q[i][0]]++;
      d[q[i][1]+1]--;
    }
    rep(i,n) d[i+1]+=d[i];
    rep(i,n) {
      if(a[i]>d[i]) return 0;
    }
    return 1;
  }
};
",1454808921
kzyKT,kzyKT,136,3643,cpp,"#define F first
#define S second
#define R cin>>
#define ll long long
#define ln cout<<'\n'
#define in(a) insert(a)
#define pb(a) push_back(a)
#define pd(a) printf(""%.10f\n"",a)
#define mem(a) memset(a,0,sizeof(a))
#define all(c) (c).begin(),(c).end()
#define iter(c) __typeof((c).begin())
#define rrep(i,n) for(ll i=(ll)(n)-1;i>=0;i--)
#define REP(i,m,n) for(ll i=(ll)(m);i<(ll)(n);i++)
#define rep(i,n) REP(i,0,n)
#define tr(it,c) for(iter(c) it=(c).begin();it!=(c).end();it++)
ll check(ll n,ll m,ll x,ll y){return x>=0&&x<n&&y>=0&&y<m;}void pr(){ln;}
template<class A,class...B>void pr(const A &a,const B&...b){cout<<a<<(sizeof...(b)?"" "":"""");pr(b...);}
template<class A>void PR(A a,ll n){rep(i,n){if(i)cout<<' ';cout<<a[i];}ln;}
const ll MAX=1e9+7,MAXL=1LL<<61,dx[8]={0,-1,0,1,-1,-1,1,1},dy[8]={-1,0,1,0,-1,1,1,-1};
typedef pair<ll,ll> P;

int N=1<<19;
class StarrySkyTree{
public:
  ll Ma[1555555],A[1555555];
  void init(){fill(Ma,Ma+N*2,0),fill(A,A+N*2,0);}
  void add(int a,int b,ll x,int k=0,int l=0,int r=N) {
    if(r<=a||b<=l) return;
    if(a<=l&&r<=b){
      A[k]+=x;
      while(k){
        k=(k-1)/2;
        Ma[k]=max(Ma[k*2+1]+A[k*2+1],Ma[k*2+2]+A[k*2+2]);
      }
      return;
    }
    add(a,b,x,k*2+1,l,(l+r)/2);
    add(a,b,x,k*2+2,(l+r)/2,r);
  }
  ll getMax(int a,int b,int k=0,int l=0,int r=N) {
    if(r<=a||b<=l)return -MAXL;if(a<=l&&r<=b)return Ma[k]+A[k];
    ll left=getMax(a,b,k*2+1,l,(l+r)/2),right=getMax(a,b,k*2+2,(l+r)/2,r);
    return max(left,right)+A[k];
  }
};

StarrySkyTree t;

class Solution {
public:
  int minZeroArray(vector<int>& a, vector<vector<int>>& q) {
    ll n=a.size();
    N=1;
    while(N<=n) N*=2;
    t.init();
    rep(i,n) t.add(i,i+1,a[i]);
    if(t.getMax(0,n)<=0) return 0;
    rep(i,q.size()) {
      t.add(q[i][0],q[i][1]+1,-q[i][2]);
      if(t.getMax(0,n)<=0) return i+1;
    }
    return -1;
  }
};",1454816606
Abhishek Srivastava,Abhi_Srivastava,138,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int n = nums.size(), res = 0;
        vector<int> prefixSum(n), suffixSum(n);
        prefixSum[0] = nums[0];
        for (int i = 1; i < n; i++)
            prefixSum[i] = prefixSum[i - 1] + nums[i];
        suffixSum[n - 1] = nums[n - 1];
        for (int i = n - 2; i >= 0; i--)
            suffixSum[i] = suffixSum[i + 1] + nums[i];
        for (int i = 0; i < n; i++)
            if (!nums[i]) {
                if (prefixSum[i] == suffixSum[i])
                    res += 2;
                else if (abs(prefixSum[i] - suffixSum[i]) == 1)
                    res++;
            }
        return res;
    }
};",1454823623
Abhishek Srivastava,Abhi_Srivastava,138,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        vector<int> decrs(n, 0);
        for (auto x : queries) {
            decrs[x[0]]++;
            if (x[1] + 1 < n)
                 decrs[x[1] + 1]--;
        }
        for (int i = 1; i < n; i++)
            decrs[i] += decrs[i - 1];
        for (int i = 0; i < n; i++)
            if (decrs[i] < nums[i])
                return 0;
        return 1;
    }
};",1454807718
Abhishek Srivastava,Abhi_Srivastava,138,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int l = 0, r = queries.size(), res = -1, n = nums.size();
        while (l <= r) {
            int mid = (l + r) / 2;
            vector<long long> decrs(n, 0);
            for (int i = 0; i < mid; i++) {
                decrs[queries[i][0]] += queries[i][2];
                if (queries[i][1] + 1 < n)
                    decrs[queries[i][1] + 1] -= queries[i][2];
            }
            for (int i = 1; i < n; i++)
                decrs[i] += decrs[i - 1];
            bool poss = 1;
            for (int i = 0; i < n; i++)
                if (decrs[i] < nums[i]) {
                    poss = 0;
                    break;
                }
            if (poss) {
                res = mid;
                r = mid - 1;
            }
            else
                l = mid + 1;
        }
        return res;
    }
};",1454813244
humbl_pi,humbl_pi,139,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        step = 1
        n = len(nums)
        
        def proc(curr, step):
            if nums[curr] != 0: return False
            arr = nums[:]
            i = curr
            while 0<=i<n:
                if arr[i]==0:
                    i += step
                elif arr[i]>0:
                    arr[i] -= 1
                    step *= -1
                    i += step
            return all((num==0 for num in arr))

        ans = 0
        for i in range(n):
            for step in [1,-1]:
                res = proc(i,step)
                # print(i, step, res)
                ans += res

        return ans",1454809910
humbl_pi,humbl_pi,139,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        n = len(nums)
        diff = [0]*n
        for q1, q2 in queries:
            diff[q1] += 1
            if q2 < n-1: diff[q2+1] -= 1

        cum = 0
        for i, num in enumerate(nums):
            cum += diff[i]
            # print(f""{diff[i]} --> {cum} vs. {num}"")
            if num > cum: return False
        return True",1454815967
humbl_pi,humbl_pi,139,3643,python3,"class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        n = len(nums)
        
        def chk(k):
            diff = [0]*n
            for q1, q2, val in queries[:k]:
                diff[q1] += val
                if q2 < n-1: diff[q2+1] -= val
    
            cum = 0
            for i, num in enumerate(nums):
                cum += diff[i]
                # print(f""{diff[i]} --> {cum} vs. {num}"")
                if num > cum: return False
            return True

        lo, hi = 0, len(queries)
        
        while lo <= hi:
            mid = lo + (hi-lo)//2
            
            if chk(mid):
                hi = mid-1
            else:
                lo = mid+1

        return lo if 0<=lo<=len(queries) else -1",1454823648
Shannon Lis,shannonl,140,3616,cpp,"class Solution {
public:
    bool check(vector<int> nums, int start, int dir) {
        int i = start;
        int n = nums.size();
        while ( i < n && i >= 0) {
            while (i>=0 && i <n && nums[i] == 0) i += dir;
            if (i >= n || i < 0) break;
            nums[i] -= 1;
            dir = -dir;
            i += dir;
        }
        return accumulate(nums.begin(), nums.end(), 0) == 0;
    }
    int countValidSelections(vector<int>& nums) {
        int ans = 0;
        int n = nums.size();
        for (int i=0; i<n; i++) {
            if (nums[i] == 0) {
                if (check(nums, i, 1)) ans++;
                if (check(nums, i, -1)) ans++;
            }
        }
        return ans;
        
    }
};",1454810257
Shannon Lis,shannonl,140,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        vector<int> diff(n+1, 0);
        for (auto& q: queries) {
            int l = q[0], r = q[1];
            diff[l] += 1;
            diff[r+1] -= 1;
        }
        int accu = 0;
        for (int i=0; i<n; i++) {
            accu += diff[i];
            if (accu < nums[i]) return false;
        }
        return true;
        
    }
};",1454816523
Shannon Lis,shannonl,140,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int l = 0, r = queries.size();
        while (l < r) {
            int m = l + (r-l) / 2;
            if (check(nums, queries, m)) {
                r = m;
            } else {
                l = m + 1;
            }
        }
        if (check(nums, queries, l)) return l;
        return -1;
    }
    bool check(vector<int>& nums, vector<vector<int>>& queries, int k) {
        int n = nums.size();
        vector<int> diff(n+1, 0);
        for (int i=0; i<k; i++) {
            auto& q = queries[i];
            int l = q[0], r = q[1], v=q[2];
            diff[l] += v;
            diff[r+1] -= v;
        }
        int accu = 0;
        for (int i=0; i<n; i++) {
            accu += diff[i];
            if (accu < nums[i]) return false;
        }
        return true;
        
    }
};",1454823778
Anshuman Kanungo,PeacefulGuy,141,3616,java,"class Solution {
    public int countValidSelections(int[] nums) {
        int n = nums.length;
        int validSelections = 0;

        // Iterate through all possible starting positions
        for (int i = 0; i < n; i++) {
            if (nums[i] == 0) {
                // Check both directions
                if (isValid(nums, i, -1)) {
                    validSelections++;
                }
                if (isValid(nums, i, 1)) {
                    validSelections++;
                }
            }
        }

        return validSelections;
    }

    // Helper method to simulate the process
    private boolean isValid(int[] nums, int curr, int direction) {
        int[] temp = nums.clone(); // Clone nums to avoid modifying the original array
        int dir = direction;

        while (curr >= 0 && curr < temp.length) {
            if (temp[curr] == 0) {
                curr += dir; // Move in the current direction
            } else {
                temp[curr]--; // Decrement the value
                dir = -dir;   // Reverse direction
                curr += dir;  // Move in the new direction
            }
        }

        // Check if all elements are zero
        for (int num : temp) {
            if (num != 0) {
                return false;
            }
        }
        return true;
    }
}
",1454810976
Anshuman Kanungo,PeacefulGuy,141,3639,java,"class Solution {
    public boolean isZeroArray(int[] nums, int[][] queries) {
        int n = nums.length;
        int[] decrementCount = new int[n + 1]; // One extra space for easier range update

        // Process each query to build the decrementCount array
        for (int[] query : queries) {
            int li = query[0];
            int ri = query[1];
            decrementCount[li] += 1; // Start decrementing from li
            if (ri + 1 < n) {
                decrementCount[ri + 1] -= 1; // Stop decrementing after ri
            }
        }

        // Build the actual decrement counts from the difference array
        for (int i = 1; i < n; i++) {
            decrementCount[i] += decrementCount[i - 1];
        }

        // Compare decrement counts with nums
        for (int i = 0; i < n; i++) {
            if (decrementCount[i] < nums[i]) {
                return false; // Not enough decrements to make nums[i] zero
            }
        }

        return true; // All elements can be made zero
    }
}",1454822701
Anshuman Kanungo,PeacefulGuy,141,3643,java,"class Solution {
    public int minZeroArray(int[] nums, int[][] queries) {
        int n = nums.length;
        int left = 0, right = queries.length;
        int result = -1;

        // Binary search on the number of queries
        while (left <= right) {
            int mid = left + (right - left) / 2;

            // Create a temporary array to simulate the decrements
            int[] temp = new int[n];
            int[] decrement = new int[n + 1]; // For difference array

            // Apply the first mid queries
            for (int i = 0; i < mid; i++) {
                int li = queries[i][0];
                int ri = queries[i][1];
                int vali = queries[i][2];
                decrement[li] += vali; // Start decrementing from li
                if (ri + 1 < n) {
                    decrement[ri + 1] -= vali; // Stop decrementing after ri
                }
            }

            // Build the actual decrement values
            int currentDecrement = 0;
            for (int i = 0; i < n; i++) {
                currentDecrement += decrement[i];
                temp[i] = nums[i] - currentDecrement; // Apply total decrement
            }

            // Check if temp can become a Zero Array
            boolean isZeroArray = true;
            for (int i = 0; i < n; i++) {
                if (temp[i] > 0) {
                    isZeroArray = false;
                    break;
                }
            }

            if (isZeroArray) {
                result = mid; // Found a valid k
                right = mid - 1; // Try for a smaller k
            } else {
                left = mid + 1; // Increase k
            }
        }

        return result;
    }
}",1454823825
gan14008,gan14008,142,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        def dfs(curr, direction):
            t = nums[:]
            while 0 <= curr < n:
                if not t[curr]:
                    curr += direction
                    continue
                
                t[curr] -= 1
                direction = -direction
                curr += direction
            
            return all(not x for x in t)
        
        n = len(nums)
        res = 0
        for i in range(n):
            if not nums[i]:
                res += int(dfs(i, -1))
                res += int(dfs(i, 1))

        return res
",1454813615
gan14008,gan14008,142,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        n, m = len(nums), len(queries)
        steps = [0] * (n + 1)
        for l, r in queries:
            steps[l] += 1
            steps[r + 1] -= 1
        
        q = 0
        for i in range(n):
            q += steps[i]
            if nums[i] > q:
                return False
        
        return True",1454817356
gan14008,gan14008,142,3643,python3,"class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        n, m = len(nums), len(queries)
        
        def possible(k):
            steps = [0] * (n + 1)
            for j in range(k):
                l, r, v = queries[j]
                steps[l] += v
                steps[r + 1] -= v
            
            q = 0
            for i in range(n):
                q += steps[i]
                if nums[i] > q:
                    return False
            
            return True
            
        
        l, r = 0, m + 1
        while l < r:
            mid = (l + r) // 2
            if possible(mid):
                r = mid
            else:
                l = mid + 1
        
        if l == m + 1:
            return -1
        return l",1454823872
Andrew Lo Zhi Sheng,wrewsama,143,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        def check(idx, dir):
            cpynums = nums.copy()
            while idx >= 0 and idx < len(nums):
                if cpynums[idx] == 0:
                    idx += dir
                elif cpynums[idx] > 0:
                    cpynums[idx] -= 1
                    dir *= -1
                    idx += dir

            return sum(cpynums) == 0

        res = 0
        for i in range(len(nums)):
            if nums[i] != 0:
                continue
            res += 1 if check(i, 1) else 0
            res += 1 if check(i, -1) else 0

        return res",1454809255
Andrew Lo Zhi Sheng,wrewsama,143,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        rangeArr = [0 for _ in nums]
        for s, e in queries:
            rangeArr[s] += 1
            if e+1 < len(nums):
                rangeArr[e+1] -= 1

        # print(rangeArr)
        cum = 0
        for i in range(len(nums)):
            cum += rangeArr[i]
            if nums[i] - cum > 0:
                return False

        return True",1454819520
Andrew Lo Zhi Sheng,wrewsama,143,3643,python3,"class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        def check(k):
            rangeArr = [0 for _ in nums]
            for s, e, v in queries[:k]:
                rangeArr[s] += v
                if e+1 < len(nums):
                    rangeArr[e+1] -= v
    
            cum = 0
            for i in range(len(nums)):
                cum += rangeArr[i]
                if nums[i] - cum > 0:
                    return False
    
            return True

        lo, hi = 0, len(queries)
        while lo < hi:
            mid = (lo + hi) // 2
            if check(mid):
                hi = mid
            else:
                lo = mid + 1

        return lo if check(lo) else -1",1454824003
the_none,the_none,145,3616,cpp,"#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

using namespace __gnu_pbds;
using namespace std;

template <typename T> using oset = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
template <typename T> using omset = tree<T, null_type, less_equal<T>, rb_tree_tag, tree_order_statistics_node_update>;

static const int _ = []() {ios::sync_with_stdio(false); cin.tie(nullptr); cout.tie(nullptr); return 0;}();

#define all(x) (x).begin(),(x).end()
#define uniqque(x) sort(all(x)); x.erase(unique(all(x)),x.end())
#define sz(x) (int)(x).size()
#define fi first
#define se second
#define mp make_pair
#define pb push_back

#define ffs(a) __builtin_ffs(a) // find first set
#define clz(a) __builtin_clz(a) // count leading zeroes
#define ctz(a) __builtin_ctz(a) // count trailing zeroes
#define popc(a) __builtin_popcount(a) // count set bits
#define popcll(a) __builtin_popcountll(a) //count set bits for long long int

typedef long long ll;
typedef long double ld;
typedef pair<int, int> ii;
typedef vector<ii> vii;
typedef vector<int> vi;
typedef vector<vi> vvi;
typedef vector<ll> vl;
typedef vector<vl> vvl;

const ll inf = 1e9;
const ld eps = 1e-9;
const ld pi = acos(-1);
const int mod = 1000000007; // 1000000007 998244353
const ll lnf = 1e18;
const int dx[] = { -1, 0, 1, 0}, dy[] = {0, 1, 0, -1};
// int drow[8] = { -1, -1, -1, 0, 0, 1, 1, 1};
// int dcol[8] = { -1, 0, 1, -1, 1, -1, 0, 1};


template <class T> using pqmin = priority_queue<T, vector<T>, greater<T>>;
template <class T> using pqmax = priority_queue<T>;

template<class T, class V> istream& operator>> (istream& is, std::pair<T, V>& p) {is >> p.first >> p.second; return is;}
template<class T, class V>  ostream& operator<< (ostream& is, std::pair<T, V>& p) {is << p.first << "" "" << p.second; is << endl; return is;}
template<class T> istream& operator>> (istream& is, std::vector<T>& p) {  for (auto &i : p) {is >> i;} return is;}
template<class T> ostream& operator<< (ostream& is, std::vector<T>& p) {  for (auto &i : p) {is << i << "" "";} is << endl; return is;}
template<class T> istream& operator>> (istream& is, std::vector<std::vector<T>>& p) {  for (auto &i : p) {is >> i;} return is;}
template<class T> ostream& operator<< (ostream& is, std::vector<std::vector<T>>& p) {  for (auto &i : p) {is << i << "" "";} is << endl; return is;}

template<class Fun> class y_combinator_result {Fun fun_; public: template<class T>explicit y_combinator_result(T &&fun): fun_(std::forward<T>(fun)) {} template<class ...Args>decltype(auto) operator()(Args &&...args) {return fun_(std::ref(*this), std::forward<Args>(args)...);}};
template<class Fun> decltype(auto) y_combinator(Fun &&fun) {return y_combinator_result<std::decay_t<Fun>>(std::forward<Fun>(fun));}

void my_erase(omset<int>& t, int v) {t.erase(t.find_by_order(t.order_of_key(v)));}
void my_erase(oset<ll>& t, int v) {t.erase(t.find_by_order(t.order_of_key(v)));}

struct cord_comp {
  cord_comp() : cnt(0) {}
  void add(ll x) { a.push_back(x); }
  void init() {sort(a.begin(), a.end()); a.erase(unique(a.begin(), a.end()), a.end()); cnt = (int)(a.size());}
  ll to(ll x) {int index = lower_bound(a.begin(), a.end(), x) - a.begin(); return index;}
  ll from(int x) { return a[x]; }
  int size() { return cnt; }
private:
  vector<ll> a; int cnt;
};

#ifdef ONLINE_JUDGE
#include ""debug.h""
#define dbg(...)  cerr << __LINE__ << "" :: "", debug::printer(#__VA_ARGS__, __VA_ARGS__)
#define dbgA(arr, n) cerr << __LINE__ << "" :: "", debug::printerArr(#arr, arr, n)
#else
#define dbg(x...)
#define dbgA(arr, n)
#endif

class Solution {
public:
  int countValidSelections(vector<int>& nums) {
    int n = sz(nums);
    int sa = 0;

    for (int i = 0; i < n; i++) {
      if(nums[i] != 0) continue;
      vi a = nums;

      int cr = i;
      int dr = 1;
      while (cr >= 0 && cr < n) {
        if (a[cr] == 0)  {
          cr += dr;
        } else {
          a[cr] -= 1;
          if (dr == 1) dr = -1;
          else dr = 1;
          cr += dr;
        }
      }

      if (count(all(a), 0) == n) {
        sa++;
      }

      a = nums;
      cr = i;
      dr = -1;
      while (cr >= 0 && cr < n) {
        if (a[cr] == 0)  {
          cr += dr;
        } else {
          a[cr] -= 1;
          if (dr == 1) dr = -1;
          else dr = 1;
          cr += dr;
        }
      }

      if (count(all(a), 0) == n) {
        sa++;
      }

    }
    return sa;
  }
};
void solve() {
}

#ifdef LOCAL
int32_t main() { solve(); }
#endif
",1454808608
the_none,the_none,145,3639,cpp,"#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

using namespace __gnu_pbds;
using namespace std;

template <typename T> using oset = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
template <typename T> using omset = tree<T, null_type, less_equal<T>, rb_tree_tag, tree_order_statistics_node_update>;

static const int _ = []() {ios::sync_with_stdio(false); cin.tie(nullptr); cout.tie(nullptr); return 0;}();

#define all(x) (x).begin(),(x).end()
#define uniqque(x) sort(all(x)); x.erase(unique(all(x)),x.end())
#define sz(x) (int)(x).size()
#define fi first
#define se second
#define mp make_pair
#define pb push_back

#define ffs(a) __builtin_ffs(a) // find first set
#define clz(a) __builtin_clz(a) // count leading zeroes
#define ctz(a) __builtin_ctz(a) // count trailing zeroes
#define popc(a) __builtin_popcount(a) // count set bits
#define popcll(a) __builtin_popcountll(a) //count set bits for long long int

typedef long long ll;
typedef long double ld;
typedef pair<int, int> ii;
typedef vector<ii> vii;
typedef vector<int> vi;
typedef vector<vi> vvi;
typedef vector<ll> vl;
typedef vector<vl> vvl;

const ll inf = 1e9;
const ld eps = 1e-9;
const ld pi = acos(-1);
const int mod = 1000000007; // 1000000007 998244353
const ll lnf = 1e18;
const int dx[] = { -1, 0, 1, 0}, dy[] = {0, 1, 0, -1};
// int drow[8] = { -1, -1, -1, 0, 0, 1, 1, 1};
// int dcol[8] = { -1, 0, 1, -1, 1, -1, 0, 1};


template <class T> using pqmin = priority_queue<T, vector<T>, greater<T>>;
template <class T> using pqmax = priority_queue<T>;

template<class T, class V> istream& operator>> (istream& is, std::pair<T, V>& p) {is >> p.first >> p.second; return is;}
template<class T, class V>  ostream& operator<< (ostream& is, std::pair<T, V>& p) {is << p.first << "" "" << p.second; is << endl; return is;}
template<class T> istream& operator>> (istream& is, std::vector<T>& p) {  for (auto &i : p) {is >> i;} return is;}
template<class T> ostream& operator<< (ostream& is, std::vector<T>& p) {  for (auto &i : p) {is << i << "" "";} is << endl; return is;}
template<class T> istream& operator>> (istream& is, std::vector<std::vector<T>>& p) {  for (auto &i : p) {is >> i;} return is;}
template<class T> ostream& operator<< (ostream& is, std::vector<std::vector<T>>& p) {  for (auto &i : p) {is << i << "" "";} is << endl; return is;}

template<class Fun> class y_combinator_result {Fun fun_; public: template<class T>explicit y_combinator_result(T &&fun): fun_(std::forward<T>(fun)) {} template<class ...Args>decltype(auto) operator()(Args &&...args) {return fun_(std::ref(*this), std::forward<Args>(args)...);}};
template<class Fun> decltype(auto) y_combinator(Fun &&fun) {return y_combinator_result<std::decay_t<Fun>>(std::forward<Fun>(fun));}

void my_erase(omset<int>& t, int v) {t.erase(t.find_by_order(t.order_of_key(v)));}
void my_erase(oset<ll>& t, int v) {t.erase(t.find_by_order(t.order_of_key(v)));}

struct cord_comp {
  cord_comp() : cnt(0) {}
  void add(ll x) { a.push_back(x); }
  void init() {sort(a.begin(), a.end()); a.erase(unique(a.begin(), a.end()), a.end()); cnt = (int)(a.size());}
  ll to(ll x) {int index = lower_bound(a.begin(), a.end(), x) - a.begin(); return index;}
  ll from(int x) { return a[x]; }
  int size() { return cnt; }
private:
  vector<ll> a; int cnt;
};

#ifdef ONLINE_JUDGE
#include ""debug.h""
#define dbg(...)  cerr << __LINE__ << "" :: "", debug::printer(#__VA_ARGS__, __VA_ARGS__)
#define dbgA(arr, n) cerr << __LINE__ << "" :: "", debug::printerArr(#arr, arr, n)
#else
#define dbg(x...)
#define dbgA(arr, n)
#endif

class Solution {
public:
  bool isZeroArray(vector<int>& nums, vector<vector<int>>& Q) {
    int n = sz(nums);
    vi dp(n + 1);

    for (auto q : Q) {
      dp[q[0]] += 1;
      dp[q[1] + 1] -= 1;
    }

    for (int i = 1; i < n; i++) dp[i] += dp[i - 1];

    for (int i = 0; i < n; i++) {
      nums[i] -= dp[i];
      if (nums[i] > 0) return false;
    }
    return true;
  }
};
void solve() {
}

#ifdef LOCAL
int32_t main() { solve(); }
#endif
",1454811692
the_none,the_none,145,3643,cpp,"#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

using namespace __gnu_pbds;
using namespace std;

template <typename T> using oset = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
template <typename T> using omset = tree<T, null_type, less_equal<T>, rb_tree_tag, tree_order_statistics_node_update>;

static const int _ = []() {ios::sync_with_stdio(false); cin.tie(nullptr); cout.tie(nullptr); return 0;}();

#define all(x) (x).begin(),(x).end()
#define uniqque(x) sort(all(x)); x.erase(unique(all(x)),x.end())
#define sz(x) (int)(x).size()
#define fi first
#define se second
#define mp make_pair
#define pb push_back

#define ffs(a) __builtin_ffs(a) // find first set
#define clz(a) __builtin_clz(a) // count leading zeroes
#define ctz(a) __builtin_ctz(a) // count trailing zeroes
#define popc(a) __builtin_popcount(a) // count set bits
#define popcll(a) __builtin_popcountll(a) //count set bits for long long int

typedef long long ll;
typedef long double ld;
typedef pair<int, int> ii;
typedef vector<ii> vii;
typedef vector<int> vi;
typedef vector<vi> vvi;
typedef vector<ll> vl;
typedef vector<vl> vvl;

const ll inf = 1e9;
const ld eps = 1e-9;
const ld pi = acos(-1);
const int mod = 1000000007; // 1000000007 998244353
const ll lnf = 1e18;
const int dx[] = { -1, 0, 1, 0}, dy[] = {0, 1, 0, -1};
// int drow[8] = { -1, -1, -1, 0, 0, 1, 1, 1};
// int dcol[8] = { -1, 0, 1, -1, 1, -1, 0, 1};


template <class T> using pqmin = priority_queue<T, vector<T>, greater<T>>;
template <class T> using pqmax = priority_queue<T>;

template<class T, class V> istream& operator>> (istream& is, std::pair<T, V>& p) {is >> p.first >> p.second; return is;}
template<class T, class V>  ostream& operator<< (ostream& is, std::pair<T, V>& p) {is << p.first << "" "" << p.second; is << endl; return is;}
template<class T> istream& operator>> (istream& is, std::vector<T>& p) {  for (auto &i : p) {is >> i;} return is;}
template<class T> ostream& operator<< (ostream& is, std::vector<T>& p) {  for (auto &i : p) {is << i << "" "";} is << endl; return is;}
template<class T> istream& operator>> (istream& is, std::vector<std::vector<T>>& p) {  for (auto &i : p) {is >> i;} return is;}
template<class T> ostream& operator<< (ostream& is, std::vector<std::vector<T>>& p) {  for (auto &i : p) {is << i << "" "";} is << endl; return is;}

template<class Fun> class y_combinator_result {Fun fun_; public: template<class T>explicit y_combinator_result(T &&fun): fun_(std::forward<T>(fun)) {} template<class ...Args>decltype(auto) operator()(Args &&...args) {return fun_(std::ref(*this), std::forward<Args>(args)...);}};
template<class Fun> decltype(auto) y_combinator(Fun &&fun) {return y_combinator_result<std::decay_t<Fun>>(std::forward<Fun>(fun));}

void my_erase(omset<int>& t, int v) {t.erase(t.find_by_order(t.order_of_key(v)));}
void my_erase(oset<ll>& t, int v) {t.erase(t.find_by_order(t.order_of_key(v)));}

struct cord_comp {
  cord_comp() : cnt(0) {}
  void add(ll x) { a.push_back(x); }
  void init() {sort(a.begin(), a.end()); a.erase(unique(a.begin(), a.end()), a.end()); cnt = (int)(a.size());}
  ll to(ll x) {int index = lower_bound(a.begin(), a.end(), x) - a.begin(); return index;}
  ll from(int x) { return a[x]; }
  int size() { return cnt; }
private:
  vector<ll> a; int cnt;
};

#ifdef ONLINE_JUDGE
#include ""debug.h""
#define dbg(...)  cerr << __LINE__ << "" :: "", debug::printer(#__VA_ARGS__, __VA_ARGS__)
#define dbgA(arr, n) cerr << __LINE__ << "" :: "", debug::printerArr(#arr, arr, n)
#else
#define dbg(x...)
#define dbgA(arr, n)
#endif

template<typename T, typename U>
struct LAZY {
  vector<T> ST;
  vector<bool> LT;
  vector<U> UT;
  vector<int> arr;
  int n, s;
  LAZY(vector<int> &a) {
    arr = a, n = a.size(), s = 1;
    while (s < 2 * n) {
      s = s << 1;
    }
    ST.resize(s); fill(ST.begin(), ST.end(), T());
    LT.resize(s); fill(LT.begin(), LT.end(), false);
    UT.resize(s); fill(UT.begin(), UT.end(), U());
    build(0, n - 1, 1);
  }
  void build(int s, int e, int i) {
    if (s == e)   {
      ST[i] = T(arr[s]);
      return;
    }
    int m = (s + e) / 2;
    build(s, m, 2 * i);
    build(m + 1, e, 2 * i + 1);
    ST[i].merge(ST[2 * i], ST[2 * i + 1]);
  }
  void pushdown(int i, int s, int e) {
    if (LT[i]) {
      int m = (s + e) / 2;
      apply(2 * i, s, m, UT[i]);
      apply(2 * i + 1, m + 1, e, UT[i]);
      UT[i] = U(), LT[i] = 0;
    }
  }
  void apply(int i, int s, int e, U& u) {
    if (s != e) {
      LT[i] = 1, UT[i].comb(u, s, e);
    }
    u.apply(ST[i], s, e);
  }
  void update(int s, int e, int i, int l, int r, U& u) {
    if (s > r || e < l) return;
    if (s >= l && e <= r) {
      apply(i, s, e, u);
      return;
    }
    pushdown(i, s, e);
    int m = (s + e) / 2;
    update(s, m, 2 * i, l, r, u);
    update(m + 1, e, 2 * i + 1, l, r, u);
    ST[i].merge(ST[2 * i], ST[2 * i + 1]);
  }
  T query(int s, int e, int i, int l, int r) {
    if (s > r || e < l) return T();
    if (s >= l && e <= r) {
      pushdown(i, s, e);
      return ST[i];
    }
    pushdown(i, s, e);
    int m = (s + e) / 2;
    T ln, rn, ans;
    ln = query(s, m, 2 * i, l, r);
    rn = query(m + 1, e, 2 * i + 1, l, r);
    ans.merge(ln, rn);
    return ans;
  }
  void change(int l, int r, int val) {
    U x = U(val);
    update(0, n - 1, 1, l, r, x);
  }
  T get(int l, int r) {
    return query(0, n - 1, 1, l, r);
  }
};

struct T {
  int val;
  T() {
    val = 0;
  }
  T(int p1) {
    val = p1;
  }
  void merge(T &l, T &r) {
    val = max(l.val , r.val);
  }
};

struct U {
  int val;
  U() {
    val = 0;
  }
  U(int val1) {
    val = val1;
  }
  void apply(T &a, int s, int e) {
    a.val += val;
  }
  void comb(U& x, int s, int e) {
    val += x.val;
  }
};

// LAZY<T, U>sg = LAZY<T, U>(n, a);

class Solution {
public:
  int minZeroArray(vector<int>& nums, vector<vector<int>>& Q) {
    LAZY<T, U> sg = LAZY<T, U>(nums);
    int n = sz(nums);
    if (sg.get(0, n - 1).val <= 0) {
        return 0;
    }

    for (int i = 0; i < sz(Q); i++) {
      sg.change(Q[i][0], Q[i][1], -Q[i][2]);
      if (sg.get(0, n - 1).val <= 0) {
        return i + 1;
      }
    }
    return -1;
  }
};

void solve() {
}

#ifdef LOCAL
int32_t main() { solve(); }
#endif
",1454817191
hkhzzz,hkhzzz,149,3616,cpp,"class Solution {
public:
    bool isvalid(vector<int> nums, int cur, int moveright, int n) {
        if (nums[cur] != 0) return false;
        while(cur >= 0 && cur <= n - 1) {
            if (nums[cur] > 0) {
                nums[cur] --;
                moveright = - moveright;
            }
            cur = cur + moveright;
        }
        for (int i = 0; i < nums.size(); i ++) {
            if (nums[i] > 0) return false;
        }
        return true;
    }
    int countValidSelections(vector<int>& nums) {
        int n = nums.size();
        int ret = 0;
        for (int i = 0; i < n; i ++) {
            if (isvalid(nums, i, 1, n)) ret++;
            if (isvalid(nums, i, -1, n)) ret ++;
        }
        return ret;
    }
};",1454809004
hkhzzz,hkhzzz,149,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        vector<int> A(n + 1, 0);
        for (int i = 0; i < queries.size(); i ++) {
            A[queries[i][0]] += 1;
            A[queries[i][1] + 1] -= 1;
        }
        for (int i = 1; i <= n; i ++) {
            A[i] += A[i-1];
        }
        for (int i = 0; i < n; i ++) {
            if (nums[i] > A[i]) return false;
        }
        return true;
    }
};",1454813200
hkhzzz,hkhzzz,149,3643,cpp,"class Solution {
public:
    bool check(vector<int>& nums, vector<vector<int>>& queries, int k, vector<int>& A) {
        int n = nums.size();
        for (int i = 0; i <= n; i ++) {
            A[i] = 0;
        }
        for (int i = 0; i < k; i ++) {
            A[queries[i][0]] += queries[i][2];
            A[queries[i][1] + 1] -= queries[i][2];
        }
        for (int i = 1; i <= n; i ++) {
            A[i] += A[i-1];
            // cout << A[i] << "","";
        }
        // cout << endl;
        // cout << n << endl;
        for (int i = 0; i < n; i ++) {
            // cout << nums[i] << ""vs"" << A[i] << endl;
            if (nums[i] > A[i]) return false;
        }
        // cout << k << ""okay"" << endl;
        return true;
    }
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        vector<int> A(n+1, 0);
        int lK = 0;
        int rK = queries.size();
        if (check(nums, queries, rK, A) == false) return -1;
        while(lK < rK) {
            int midK = lK + (rK - lK) / 2;
            if (check(nums, queries, midK, A)) { // okay -> less K
                rK = midK;
            } else {
                lK = midK + 1;
            }
        }
        return lK;
    }
};",1454824405
tzhuan,tzhuan,150,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        const int N = nums.size();
        auto sum = accumulate(nums.begin(), nums.end(), 0);
        int ans = 0;
        for (int i = 0, ps = 0; i < N; ++i) {
            ps += nums[i];
            if (nums[i] == 0) {
                if (ps + ps == sum) ans += 2;
                if (ps + ps == sum - 1 or ps + ps == sum + 1) ans += 1;
            }
        }
        return ans;
    }
};",1454808174
tzhuan,tzhuan,150,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        const int N = nums.size();
        vector<int> count(N + 2, 0);
        for (const auto& q: queries) {
            ++count[q[0]];
            --count[q[1] + 1];
        }
        for (int i = 1; i < count.size(); ++i) count[i] += count[i - 1];
        for (int i = 0; i < N; ++i) if (count[i] < nums[i]) return false;
        return true;
    }
};",1454814386
tzhuan,tzhuan,150,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        const int N = nums.size(), Q = queries.size();
        auto is_ok = [&](int k) -> bool {
            vector<int> count(N + 2, 0);
            for (int i = 0; i < k; ++i) {
                const auto& q = queries[i];
                count[q[0]] += q[2];
                count[q[1] + 1] -= q[2];
            }
            for (int i = 1; i < N; ++i) count[i] += count[i - 1];
            for (int i = 0; i < N; ++i) if (count[i] < nums[i]) return false;
            return true;
        };
        int low = 0, high = Q + 1;
        while (low < high) {
            auto k = low + (high - low) / 2;
            // cout << low << "" "" << high << "": "" << k << "" => "" << is_ok(k) << endl;
            if (is_ok(k)) high = k;
            else low = k + 1;
        }
        return low > Q ? -1 : low;
    }
};",1454824517
Prashant Mishra,iamphoenix,152,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int n = nums.size();
        vector<int> zero_positions;
        for (int i = 0; i < n; ++i) {
            if (nums[i] == 0) {
                zero_positions.push_back(i);
            }
        }
        
        int ans = 0;
        for (int start_pos : zero_positions) {
            for (int dir : {-1, 1}) {
                vector<int> nums_copy = nums;
                int curr = start_pos;
                int current_dir = dir;
                while (curr >= 0 && curr < n) {
                    if (nums_copy[curr] == 0) {
                        curr += current_dir;
                    } else if (nums_copy[curr] > 0) {
                        nums_copy[curr] -= 1;
                        current_dir *= -1;
                        curr += current_dir;
                    }
                }
                bool all_zero = true;
                for (int num : nums_copy) {
                    if (num != 0) {
                        all_zero = false;
                        break;
                    }
                }
                if (all_zero) {
                    ans++;
                }
            }
        }
        return ans;
    }
};
",1454805792
Prashant Mishra,iamphoenix,152,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        vector<int> coverage(n + 1, 0);
        
        // Step 1: Process queries to compute coverage counts
        for (const auto& query : queries) {
            int l = query[0];
            int r = query[1];
            coverage[l] += 1;
            if (r + 1 < n) {
                coverage[r + 1] -= 1;
            }
        }
        
        // Step 2: Compute prefix sums to get coverage per index
        for (int i = 1; i < n; ++i) {
            coverage[i] += coverage[i - 1];
        }
        
        // Step 3: Check if each nums[i] can be reduced to zero
        for (int i = 0; i < n; ++i) {
            if (nums[i] > coverage[i]) {
                return false;
            }
        }
        
        return true;
    }
};
",1454806568
Prashant Mishra,iamphoenix,152,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        int m = queries.size();
        int left = 0, right = m;
        int answer = -1;

        while (left <= right) {
            int mid = left + (right - left) / 2;

            vector<long long> capacity(n, 0);

            // Process first 'mid' queries in sequence
            for (int i = 0; i < mid; ++i) {
                int l = queries[i][0];
                int r = queries[i][1];
                int val = queries[i][2];

                capacity[l] += val;
                if (r + 1 < n) {
                    capacity[r + 1] -= val;
                }
            }

            // Compute prefix sums to get cumulative capacity
            for (int i = 1; i < n; ++i) {
                capacity[i] += capacity[i - 1];
            }

            // Check if capacity at each index is sufficient
            bool possible = true;
            for (int i = 0; i < n; ++i) {
                if (capacity[i] < nums[i]) {
                    possible = false;
                    break;
                }
            }

            if (possible) {
                answer = mid;
                right = mid - 1; // Try to find a smaller k
            } else {
                left = mid + 1; // Need more queries
            }
        }

        return answer;
    }
};
",1454811178
Jashanpreet Singh,jashanp2005,155,3616,cpp,"class Solution {
int check(int idx, vector<int> &nums){
    int n = nums.size();
    int sum = 0;
    for(int i=0; i<idx; i++) sum+=nums[i];
    for(int i=idx+1; i<n; i++) sum -= nums[i];
    // cout<<sum<<endl;
    if(sum == 0) return 2;
    if(abs(sum ) == 1) return 1;
    return 0;
}
public:
    int countValidSelections(vector<int>& nums) {
        int cnt = 0;
        for(int i=0; i<nums.size(); i++){
            if(nums[i] == 0) cnt += check(i, nums);
        }
        return cnt;
    }
};",1454809680
Jashanpreet Singh,jashanp2005,155,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        vector<int> pre(n, 0);
        for(auto &it: queries){
            pre[it[0]]++;
            if(it[1] + 1 < n) pre[it[1]+1]--;
        }

        for(int i=0; i<n; i++){
            if(i) pre[i] += pre[i-1];
        }

        for(int i=0; i<nums.size(); i++){
            if(pre[i] < nums[i]) return false;
        }
        return true;
    }
};",1454813392
Jashanpreet Singh,jashanp2005,155,3643,cpp,"class Solution {
bool check(vector<int> &nums, vector<vector<int>> &queries, int k){
    int n = nums.size();
        vector<int> pre(n, 0);
    int cnt = 0;
        for(auto &it: queries){
            if(cnt == k) break;
            pre[it[0]] += it[2];
            if(it[1] + 1 < n) pre[it[1]+1] -= it[2];
            cnt++;
        }

        for(int i=0; i<n; i++){
            if(i) pre[i] += pre[i-1];
        }

        for(int i=0; i<nums.size(); i++){
            if(pre[i] < nums[i]) return false;
        }
        return true;
}
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int low = 0, high = queries.size();
        int ans = -1;
        while(low <= high){
            int mid = (low + high)/2ll;
            if(check(nums, queries, mid)){
                ans = mid;
                high = mid-1;
            }
            else low =  mid+1;
        }
        return ans;
    }
};",1454818092
tanishq1807,tanishq1807,156,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        auto isValid = [&](int start, int direction) {
            int n = nums.size();
            vector<int> numsCopy = nums;
            int curr = start, dirMult = direction;
            
            while (curr >= 0 && curr < n) {
                if (numsCopy[curr] == 0) {
                    curr += dirMult;
                } else {
                    numsCopy[curr]--;
                    dirMult = -dirMult;
                    curr += dirMult;
                }
            }
            
            for (int x : numsCopy) {
                if (x != 0) return false;
            }
            return true;
        };
        
        int validCount = 0;
        for (int i = 0; i < nums.size(); i++) {
            if (nums[i] == 0) {
                if (isValid(i, 1)) validCount++;
                if (isValid(i, -1)) validCount++;
            }
        }
        
        return validCount;
    }
};",1454806207
tanishq1807,tanishq1807,156,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        vector<int> diff(n + 1, 0);

        for (const auto& query : queries) {
            int l = query[0], r = query[1];
            diff[l]++;
            if (r + 1 < n) diff[r + 1]--;
        }

        int coverage = 0;
        for (int i = 0; i < n; ++i) {
            coverage += diff[i];
            if (coverage < nums[i]) return false;
        }

        return true;
    }
};",1454815246
tanishq1807,tanishq1807,156,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        int q = queries.size();

        auto canTransform = [&](int k) {
            vector<int> diff(n + 1, 0);

            for (int i = 0; i < k; ++i) {
                int l = queries[i][0], r = queries[i][1], val = queries[i][2];
                diff[l] += val;
                if (r + 1 < n) diff[r + 1] -= val;
            }

            vector<int> decrements(n, 0);
            int curr = 0;
            for (int i = 0; i < n; ++i) {
                curr += diff[i];
                decrements[i] = curr; 
                if (decrements[i] < nums[i]) return false; 
            }

            return true;
        };

        int left = 0, right = q, result = -1;

        while (left <= right) {
            int mid = left + (right - left) / 2;
            if (canTransform(mid)) {
                result = mid;
                right = mid - 1;
            } else {
                left = mid + 1;
            }
        }

        return result;
    }
};",1454818127
chengxia you,cy171,157,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        n = len(nums)
        total = sum(nums)
        acc = [0]*(n+1)
        for i , num in enumerate(nums):
            acc[i] = acc[i-1] + num
        ans = 0
        for i in range(n):
            if nums[i] == 0:
                a = acc[i-1]
                b = total - acc[i-1]
                if a == b:
                    ans += 2
                elif abs(a-b) == 1:
                    ans += 1
        return ans",1454809024
chengxia you,cy171,157,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        n = len(nums)
        acc = [0]*(n+2)
        for a, b in queries:
            acc[a] -= 1
            acc[b+1] += 1
        for i in range(n):
            acc[i] += acc[i-1]
        return all(acc[i] + nums[i] <= 0 for i in range(n))
",1454816485
chengxia you,cy171,157,3643,python3,"class SegmentTree:
    def __init__(self, n, nums):
        self.n = n
        self.data = [0] * (4 * n)
        self.lazy = [0] * (4 * n)
        self.build(1, 0, n - 1, nums)  #初始化 需要修改

    def build(self, node, start, end, values):
        if start == end:
            self.data[node] = values[start]
        else:
            mid = (start + end) // 2
            self.build(2 * node, start, mid, values)
            self.build(2 * node + 1, mid + 1, end, values)
            self.data[node] = max(self.data[2 * node], self.data[2 * node + 1])

    def update_range(self, l, r, val, node=1, start=0, end=None):
        if end is None:
            end = self.n - 1

        if self.lazy[node] != 0:
            self.data[node] += self.lazy[node]
            if start != end:
                self.lazy[2 * node] += self.lazy[node]
                self.lazy[2 * node + 1] += self.lazy[node]
            self.lazy[node] = 0

        if start > r or end < l:
            return

        if start >= l and end <= r:
            self.data[node] += val
            if start != end:
                self.lazy[2 * node] += val
                self.lazy[2 * node + 1] += val
            return

        mid = (start + end) // 2
        self.update_range(l, r, val, 2 * node, start, mid)
        self.update_range(l, r, val, 2 * node + 1, mid + 1, end)
        self.data[node] = max(self.data[2 * node], self.data[2 * node + 1])

    def query_range(self, l, r, node=1, start=0, end=None):
        if end is None:
            end = self.n - 1

        if self.lazy[node] != 0:
            self.data[node] += self.lazy[node]
            if start != end:
                self.lazy[2 * node] += self.lazy[node]
                self.lazy[2 * node + 1] += self.lazy[node]
            self.lazy[node] = 0

        if start > r or end < l:
            return -float('inf')

        if start >= l and end <= r:
            return self.data[node]

        mid = (start + end) // 2
        left_query = self.query_range(l, r, 2 * node, start, mid)
        right_query = self.query_range(l, r, 2 * node + 1, mid + 1, end)
        return max(left_query, right_query)

class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        n = len(nums)
        tree = SegmentTree(n, nums)
        if tree.data[1] <= 0:
            return 0
        for i, (a, b, val) in enumerate(queries):
            tree.update_range(a,b, -val)
            if tree.data[1] <= 0:
                return i + 1
        return -1
        ",1454825133
cro_poder,cro_poder,158,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int n = nums.size();
        int ans = 0;
         
        vector<int> hash;
        for (int i = 0; i < n; ++i) {
            if (nums[i] == 0) {
                hash.push_back(i);
            }
        }
 
        auto f = [&](int i, int d) {
            vector<int> temp = nums;
            int curr = i;

            while (curr >= 0 && curr < n) {
                if (temp[curr] == 0) {
                    curr += d;  
                } else {
                    temp[curr]--;         
                    d = -d;  
                    curr += d;   
                }
            }
 
            return all_of(temp.begin(), temp.end(), [](int x) { return x == 0; });
        };
 
        for (int zeroPos : hash) {
            if (f(zeroPos, -1)) {
                
                ans++;
            }
            if (f(zeroPos, 1)) {
                
                ans++;
            }
        }

        return ans;
    }
};
",1454809439
cro_poder,cro_poder,158,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        vector<int> temp = nums;
        int n = nums.size();
        vector<int> diff(n + 1, 0); 
            fill(diff.begin(), diff.end(), 0);
             int k = queries.size();
            for (int i = 0; i < k; ++i) {
                int l = queries[i][0], r = queries[i][1], val = 1;
                diff[l] -= val;
                if (r + 1 < n) diff[r + 1] += val;
            }
             
            int currEffect = 0;
            for (int i = 0; i < n; ++i) {
                currEffect += diff[i];
                temp[i] += currEffect;  
                 
                if (temp[i] > 0) return false;
            }
             
            return true;
    }
};",1454818222
cro_poder,cro_poder,158,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size(), m = queries.size();
        
        vector<int> diff(n + 1, 0); 
         
        auto canZero = [&](int k) -> bool {
            vector<int> temp = nums;
            fill(diff.begin(), diff.end(), 0);
             
            for (int i = 0; i < k; ++i) {
                int l = queries[i][0], r = queries[i][1], val = queries[i][2];
                diff[l] -= val;
                if (r + 1 < n) diff[r + 1] += val;
            }
             
            int currEffect = 0;
            for (int i = 0; i < n; ++i) {
                currEffect += diff[i];
                temp[i] += currEffect;  
                 
                if (temp[i] > 0) return false;
            }
             
            return true;
        };
         
        int left = 0, right = m, result = -1;
        while (left <= right) {
            int mid = left + (right - left) / 2;
            if (canZero(mid)) {
                result = mid;  
                right = mid - 1;
            } else {
                left = mid + 1;
            }
        }
        
        return result;
    }
};
",1454815988
Ankur Kumar,Ankur_8789,159,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int cnt=0,n=nums.size();
        vector<int> pref(n),suff(n);
        pref[0]=nums[0],suff[n-1]=nums[n-1];
        for(int i=1;i<n;i++)
            pref[i]=pref[i-1]+nums[i];
        for(int i=n-2;i>=0;i--)
            suff[i]=suff[i+1]+nums[i];
        for(int i=0;i<n;i++){
            if(nums[i])
                continue;
            int le=0,ri=0;
            if(i-1>=0)
                le=pref[i-1];
            if(i+1<n)
                ri=suff[i+1];
            if(abs(le-ri)==0)
                cnt+=2;
            else if(abs(le-ri)==1)
                cnt+=1;
        }
        return cnt;
    }
};",1454817136
Ankur Kumar,Ankur_8789,159,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n=nums.size();
        vector<int> pref(n+1);
        for(auto x: queries){
            pref[x[0]]--;
            pref[x[1]+1]++;
        }
        for(int i=1;i<=n;i++){
            pref[i]+=pref[i-1];
        }
        bool ok=true;
        for(int i=0;i<n;i++){
            nums[i]=max(0,nums[i]+pref[i]);
            // cout<<nums[i]<<"" "";
            if(nums[i]>0)
                ok=false;
        }
        return ok;
    }
};",1454809155
Ankur Kumar,Ankur_8789,159,3643,cpp,"class Solution {
public:
    bool check(int val,vector<int>& nums,vector<vector<int>>& q){
        int n=nums.size();
        vector<int> pref(n+1);
        for(int i=0;i<val;i++){
            int u=q[i][0],v=q[i][1];
            pref[u]-=q[i][2];
            pref[v+1]+=q[i][2];
        }
        for(int i=1;i<n;i++)
            pref[i]+=pref[i-1];
        vector<int> tem(n);
        for(int i=0;i<n;i++){
            tem[i]=max(0,nums[i]+pref[i]);
            if(tem[i])
                return 0;
        }
        return 1;
    }
    int minZeroArray(vector<int>& nums, vector<vector<int>>& q) {
        int l=0,r=q.size(),ans=-1;
        while(l<=r){
            int mid=(l+r)/2;
            if(check(mid,nums,q)){
                ans=mid;
                r=mid-1;
            }
            else{
                l=mid+1;
            }
        }
        return ans;
    }
};",1454825180
Ivan Li,liivan256,161,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        t = 0
        for i in range(len(nums)):
            if nums[i] != 0:
                continue
            l = sum(nums[:i])
            r = sum(nums[i:])
    
            if l == r:
                t += 2
            elif l + 1 == r or l == r + 1:
                t += 1
        return t
",1454807520
Ivan Li,liivan256,161,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        n = len(nums)
        diff = [0] * (n + 1)
        for l,r in queries:
            diff[l] += 1
            diff[r + 1] -= 1
        dec = list(accumulate(diff))
        return all(dec[i] >= nums[i] for i in range(n))",1454810667
Ivan Li,liivan256,161,3643,python3,"class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        n = len(nums)
        q = len(queries)
    
        def works(queries: list[list[int]]) -> bool:
            diff = [0] * (n + 1)
            for l, r, val in queries:
                diff[l] += val
                diff[r + 1] -= val
            dec = list(accumulate(diff))
            return all(dec[i] >= nums[i] for i in range(n))
    
        low = 0
        high = q
        ans = -1
        while low <= high:
            mid = (low + high) // 2
            if works(queries[:mid]):
                high = mid - 1
                ans = mid
            else:
                low = mid + 1
        return ans",1454818309
funsquared,funsquared,162,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        res = 0
        for i in range(len(nums)):
            if nums[i] == 0:
                if sum(nums[:i]) - sum(nums[i:]) in (0, 1):
                    res += 1
                if sum(nums[i:]) - sum(nums[:i]) in (0, 1):
                    res += 1
        return res",1454825323
funsquared,funsquared,162,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        n = len(nums)
        delta = [0] * (n + 1)
        for l, r in queries:
            delta[l] += 1
            delta[r + 1] -= 1
        cur = 0
        for i in range(n):
            cur += delta[i]
            if cur < nums[i]:
                return False
        return True",1454825141
funsquared,funsquared,162,3643,python3,"class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        def good(k):
            n = len(nums)
            delta = [0] * (n + 1)
            for l, r, v in queries[:k]:
                delta[l] += v
                delta[r + 1] -= v
            cur = 0
            for i in range(n):
                cur += delta[i]
                if cur < nums[i]:
                    return False
            return True
        
        low, high = -1, len(queries) + 1
        while high - low > 1:
            mid = (low + high) // 2
            if good(mid):
                high = mid
            else:
                low = mid
        return -1 if high > len(queries) else high
",1454825018
hanbro0112,hanbro0112,163,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        suffix = sum(nums)
        ans = prefix = 0
        for x in nums:
            prefix += x
            suffix -= x
            if x == 0:
                if prefix == suffix:
                    ans += 2
                elif abs(prefix - suffix) == 1:
                    ans += 1
        return ans",1454807232
hanbro0112,hanbro0112,163,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        prefix = [0] * (len(nums) + 1)
        for l, r in queries:
            prefix[l] += 1
            prefix[r + 1] -= 1
        subset = 0
        for i, x in enumerate(nums):
            subset += prefix[i]
            if x > subset:
                return False
        return True",1454810461
hanbro0112,hanbro0112,163,3643,python3,"class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        subset = k = 0
        prefix = [0] * (len(nums) + 1)
        for i, x in enumerate(nums):
            subset += prefix[i]
            while k < len(queries) and x > subset:
                l, r, val = queries[k]
                prefix[l] += val
                prefix[r + 1] -= val
                if l <= i <= r:
                    subset += val
                k += 1
            if x > subset:
                return -1
        return k",1454818544
TheodoreGossett,TheodoreGossett,165,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int tsum = 0;
        for(auto i: nums)tsum+=i;
        int sum = 0;
        int res = 0;
        for(auto i: nums){
            sum+=i;
            tsum-=i;
            if(i==0 && sum==tsum) res+=2;
            if(i==0 && abs(sum-tsum)==1) res+=1;
        }
        return res;
    }
};",1454807083
TheodoreGossett,TheodoreGossett,165,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        vector<int> dif(nums.size()+1);
        int n = nums.size();
        for(auto q:queries){
            dif[q[0]]--;
            dif[q[1]+1]++;
        }
        int d = 0;
        for(int i=0;i<n;i++){
            d+=dif[i];
            if(nums[i]+d>0) return false;
        }
        return true;
    }
};",1454810217
TheodoreGossett,TheodoreGossett,165,3643,cpp,"class Solution {
public:
    bool f(vector<int>& nums, vector<vector<int>>& queries, int k) {
        vector<int> dif(nums.size()+1);
        int n = nums.size();
        int cnt=0;
        for(auto q:queries){
            if(cnt==k) break;
            cnt++;
            dif[q[0]]-= q[2];
            dif[q[1]+1]+= q[2];
            
        }
        int d = 0;
        for(int i=0;i<n;i++){
            d+=dif[i];
            if(nums[i]+d>0) return false;
        }
        return true;
    }
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int l=0;int r=queries.size();
        int res = 1000000;
        while(l<=r){
            int mid = (r-l)/2+l;
            if(f(nums,queries, mid)){
                res = mid;
                r=mid-1;
            }else l=mid+1;
        }
        return res==1000000?-1:res;
    }
};",1454818779
leetgoat_dot_dev,leetgoat_dot_dev,166,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        def simulate(pos, direction):
            dupe = nums[:]
            currPos = pos
            currD = direction
            while True:
                # print(f'curr pos: {currPos}, currD: {currD}, dupe: {dupe}')
                if currPos < 0 or currPos >= len(dupe):
                    # print(f'out of bounds, dupe now: {dupe}')
                    return all(n == 0 for n in dupe)
                if dupe[currPos] == 0:
                    if currD == 1:
                        currPos += 1
                    else:
                        currPos -= 1
                elif dupe[currPos] > 0:
                    dupe[currPos] -= 1
                    if currD == 1:
                        currD = 0
                    else:
                        currD = 1
                    if currD == 1:
                        currPos += 1
                    else:
                        currPos -= 1
        
        # simulate(2, 0)
        # return
        res = 0
        for pos in range(len(nums)):
            if nums[pos] != 0:
                continue
            # print(f'pos={pos}')
            if simulate(pos, 1):
                res += 1
            if simulate(pos, 0):
                res += 1
            # print(f'res now: {res} for pos={pos}')
        return res
                    
                        
            ",1454818221
leetgoat_dot_dev,leetgoat_dot_dev,166,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        decs = [0] * (len(nums) + 1) # sweepline decs
        
        for l, r in queries:
            decs[l] += 1
            decs[r + 1] -= 1
        
        finalDecs = []
        
        curr = 0
        for d in decs:
            curr += d
            finalDecs.append(curr)
        
        return all(
        finalDecs[i] >= nums[i] for i in range(len(nums)))
        
        ",1454820532
leetgoat_dot_dev,leetgoat_dot_dev,166,3643,python3,"class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        l = 0
        r = 10**5 + 1
        
        resK = None
        
        def canDoInK(k):
            sweep = [0] * (len(nums) + 1)
            c = 0
            for x in range(min(k, len(queries))):
                l, r, v = queries[x]
                sweep[l] += v
                sweep[r + 1] -= v
            final = []
            for sweeped in sweep:
                c += sweeped
                final.append(c)
            
            return all(final[i] >= nums[i] for i in range(len(nums)))
        
        while l<=r:
            m = (r + l) // 2
            if canDoInK(m):
                resK = m
                r = m - 1
            else:
                l = m + 1
        
        if resK is None:
            return -1
        return resK
            
            

                ",1454825699
WSong,S_W,167,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        n = len(nums)
        target = sum(nums)
        def move(start, dx):
            x = start
            cnt = collections.Counter()
            acc = 0
            while 0 <= x <= n - 1:
                if nums[x] == cnt[x]:
                    x += dx
                elif nums[x] > cnt[x]:
                    cnt[x] += 1
                    acc += 1
                    dx *= -1
                    x += dx
            return acc == target
        res = 0
        for i, x in enumerate(nums):
            if x != 0:
                continue
            for m in [-1, 1]:
                if move(i, m):
                    res += 1
        return res
        
                ",1454809771
WSong,S_W,167,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        cnt = collections.Counter()
        for l, r in queries:
            cnt[l] += 1
            cnt[r+1] -= 1
        acc = 0
        for i, x in enumerate(nums):
            acc += cnt[i]
            if acc < x:
                return False
        return True",1454812682
WSong,S_W,167,3643,python3,"class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        def verify(limit):
            cnt = collections.Counter()
            for i in range(limit):
                l, r, val = queries[i]
                cnt[l] += val
                cnt[r+1] -= val
            acc = 0
            for i, x in enumerate(nums):
                acc += cnt[i]
                if acc < x:
                    return False
            return True
        l, r = 0, len(queries)
        while l < r:
            mid = (l + r)//2
            if verify(mid):
                r = mid
            else:
                l = mid + 1
        if not verify(l):
            return -1
        return l
        ",1454818839
Amit Chaudhary,aekairis,168,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int sum=0;
        int n=nums.size();
        for(int i=0;i<n;i++){
            sum+=nums[i];
        }
        int currentSum=0;
        int ans=0;
        for(int i=0;i<n;i++){
            currentSum+=nums[i];
            sum-=nums[i];
            if(nums[i]==0){
                if(abs(currentSum-sum)<=1){
                    ans+=2-abs(currentSum-sum);
                }
            }
        }
        return ans;
    }
};",1454811627
Amit Chaudhary,aekairis,168,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n=nums.size();
        vector<int> count(n+1,0);
        for(auto& q:queries){
            count[q[0]]++;
            count[q[1]+1]--;
        }
        for(int i=1;i<=n;i++){
            count[i]+=count[i-1];
        }
        for(int i=0;i<n;i++){
            if(nums[i]>count[i]){
                return false;
            }
        }
        return true;
    }
};",1454817058
Amit Chaudhary,aekairis,168,3643,cpp,"class Solution {
public:
    bool becomeZero(vector<int>& nums, vector<vector<int>>& queries,int k){
        int n=nums.size();
        vector<int> count(n+1,0);
        for(int i=0;i<k;i++){
            count[queries[i][0]]+=queries[i][2];
            count[queries[i][1]+1]-=queries[i][2];
        }
        for(int i=1;i<=n;i++){
            count[i]+=count[i-1];
        }
        for(int i=0;i<n;i++){
            if(nums[i]>count[i]){
                return false;
            }
        }
        return true;
    }
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int start=0;
        int end=queries.size();
        int ans=-1;
        while(start<=end){
            int mid=(start+end)/2;
            if(becomeZero(nums,queries,mid)){
                ans=mid;
                end=mid-1;
            }else{
                start=mid+1;
            }
        }
        return ans;
    }
};",1454825822
Hayford08,Hayford08,169,3616,cpp,"class Solution {
public:
    const int dirs[2] = {-1, 1};
    int countValidSelections(vector<int>& nums) {
        int n = nums.size();
        int ans = 0;
        for (int i = 0; i < n; i++){
            if (nums[i] != 0) continue;

            for (int dir : dirs){
                vector<int> values = nums;
                int idx = i;
                int dx = dir;
                while (0 <= idx && idx < n){
                    if (values[idx] == 0){
                        idx += dx;
                    }
                    else {
                        values[idx]--;
                        dx *= -1;
                        idx += dx;
                    }
                }
                if (*max_element(values.begin(), values.end()) == 0){
                    ans++;
                } 
            }
        }
        return ans;
    }
};",1454825827
Hayford08,Hayford08,169,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        vector<int> pref(n + 1);
        for (auto &query : queries){
            int l = query[0], r = query[1];
            pref[l]++;
            pref[r + 1]--;
        }
        if (nums[0] > pref[0]){
            return false;
        }
        for (int i = 1; i < n; i++){
            pref[i] += pref[i - 1];
            if (nums[i] > pref[i]){
                return false;
            }
        }
        return true;
    }
};",1454808298
Hayford08,Hayford08,169,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int l = 0, r = queries.size();
        int ans = INT_MAX;
        int n = nums.size();
        while (l <= r){
            int mid = l + (r - l) / 2;
            vector<int> pref(n + 1);
            for (int i = 0; i < mid; i++){
                int l = queries[i][0], r = queries[i][1], val = queries[i][2];
                pref[l] += val;
                pref[r + 1] -= val;
            }
            bool ok = pref[0] >= nums[0];
            for (int i = 1; i < n && ok; i++){
                pref[i] += pref[i - 1];
                ok &= pref[i] >= nums[i];
            }
            if (!ok){
                l = mid + 1;
            }
            else {
                ans = mid;
                r = mid - 1;
            }
        }
        return ans == INT_MAX ? -1 : ans;
    }
};",1454816535
Noob Master,dyslexic_kid,170,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int suff=accumulate(nums.begin(),nums.end(),0),pref=0,ans=0;
        for(auto& n:nums){
            suff-=n;
            if(n==0){
                if(abs(suff-pref)==0) ans+=2;
                else if(abs(suff-pref)==1) ans++;
            }
            pref+=n;
        }
        return ans;
    }
};",1454807137
Noob Master,dyslexic_kid,170,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n=nums.size();
        vector<int> v(n+2);
        for(auto& q:queries){
            v[q[0]+1]++;
            v[q[1]+2]--;
        }
        for(int i=0;i<n;++i){
            v[i+1]+=v[i];
            if(v[i+1]<nums[i]) return false;
        }
        return true;
    }
};",1454809298
Noob Master,dyslexic_kid,170,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int q=queries.size(),n=nums.size();
        if(accumulate(nums.begin(),nums.end(),0ll)==0) return 0;
        int low=0,high=q-1,mid,ans=-1;
        while(low<=high){
            mid=(low+high)>>1;
            vector<long long> v(n+2);
            for(int i=0;i<=mid;++i){
                v[queries[i][0]+1]+=queries[i][2];
                v[queries[i][1]+2]-=queries[i][2];
            }
            bool pos=true;
            for(int i=0;i<n;++i){
                v[i+1]+=v[i];
                if(nums[i]>v[i+1]){
                    pos=false;break;
                }
            }
            if(pos){
                ans=mid+1;
                high=mid-1;
            }
            else low=mid+1;
        }
        return ans;
    }
};",1454818987
bnlvv,bnlvv,171,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        ans = 0 
        n = len(nums)
        total = sum(nums)
        for i in range(n): 
            if nums[i] == 0: 
                left = nums[:]
                c = i
                d = -1
                val = total 
                while 0 <= c < n: 
                    if left[c]: 
                        left[c] -= 1
                        d *= -1 
                        val -= 1
                    c += d
                # print(i, left, val)
                if val == 0: ans += 1
                right = nums[:]
                c = i
                d = 1
                val = total
                while 0 <= c < n: 
                    if right[c]: 
                        right[c] -= 1
                        d *= -1 
                        val -= 1
                    c += d 
                if val == 0: ans += 1
            
        return ans ",1454825934
bnlvv,bnlvv,171,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        n = len(nums)
        prefix = [0]*n
        for x, y in queries: 
            prefix[x] += 1
            if y+1 < n: prefix[y+1] -= 1
        for i, x in enumerate(nums): 
            if i: prefix[i] += prefix[i-1]
            if prefix[i] < nums[i]: return False 
        return True ",1454809218
bnlvv,bnlvv,171,3643,python3,"class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        n = len(nums)
        
        def fn(mid): 
            """"""Return """"""
            prefix = [0]*n
            for x, y, v in queries[:mid]: 
                prefix[x] += v
                if y+1 < n: prefix[y+1] -= v
            for i, x in enumerate(nums): 
                if i: prefix[i] += prefix[i-1]
                if prefix[i] < x: return False 
            return True 
        
        
        lo, hi = 0, len(queries)
        if not fn(hi): return -1
        while lo < hi: 
            mid = lo + hi >> 1
            if fn(mid): hi = mid
            else: lo = mid + 1
        return lo",1454815381
svmh,SupervisorMayHap,172,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        total = sum(nums)
        cur = 0
        res = 0
        for num in nums:
            if num > 0:
                cur += num
                total -= num
            else:
                if cur == total:
                    res += 2
                elif abs(cur - total) <= 1:
                    res += 1
        return res",1454806612
svmh,SupervisorMayHap,172,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        n = len(nums)
        diff = [0] * (n + 1)
        for l, r in queries:
            diff[l] += 1
            diff[r + 1] -= 1
        cur = 0
        for i in range(n):
            cur += diff[i]
            if cur < nums[i]:
                return False
        return True
        ",1454808491
svmh,SupervisorMayHap,172,3643,python3,"class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        n = len(nums)
        def isZeroArray(q):
            diff = [0] * (n + 1)
            for l, r, v in q:
                diff[l] += v
                diff[r + 1] -= v
            cur = 0
            # print(diff)
            for i in range(n):
                cur += diff[i]
                if cur < nums[i]:
                    return False
            
            return True
        
        if not isZeroArray(queries):
            return -1
        
        left = 0
        right = len(queries)

        while left < right:
            mid = (left + right) // 2
            if isZeroArray(queries[:mid]):
                right = mid
            else:
                left = mid + 1
        return left",1454819062
PooyaZ,pooyaz,173,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& arr) {
        int n = arr.size();
        int cnt = 0;
        for(int i = 0; i < n; i++){
            if(arr[i] != 0) continue;
            int l = 0, r = 0;
            for(int j = 0; j < i; j++){
                l += arr[j];
            }
            for(int j = i + 1; j < n; j++){
                r += arr[j];
            }
            if(l == r) cnt += 2;
            if(l == r + 1 || l + 1 == r) cnt += 1;
        }
        return cnt;
    }
};",1454807065
PooyaZ,pooyaz,173,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& arr, vector<vector<int>>& q) {
        int n = arr.size();
        int m = q.size();
        int cnt[n + 1];
        memset(cnt, 0, sizeof cnt);
        for(int i = 0; i < m; i++){
            cnt[q[i][0]]++;
            cnt[q[i][1] + 1]--;
        }

        int sum = 0;
        for(int i = 0; i < n; i++){
            sum += cnt[i];
            if(arr[i] > sum) return false;
        }
        return true;
    }
};",1454810917
PooyaZ,pooyaz,173,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& arr, vector<vector<int>>& q) {
        int n = arr.size();
        int m = q.size();
        int l = 0, r = m + 1;
        int cnt[n + 1];
        while(l < r){
            int mid = (l + r) / 2;

            memset(cnt, 0, sizeof cnt);
            for(int i = 0; i < mid; i++){
                cnt[q[i][0]] += q[i][2];
                cnt[q[i][1] + 1] -= q[i][2];
            }
            int sum = 0;
            bool isOk = true;
            for(int i = 0; i < n; i++){
                sum += cnt[i];
                if(arr[i] > sum){
                    isOk = false;
                    break;
                }
            }

            if(isOk) r = mid;
            else l = mid + 1;
        }
        return l > m ? -1 : l;
    }
};",1454819063
Jing-You,mble6125,174,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        
        int res = 0;
        
        for (int i = 0; i < nums.size(); ++i) {
            
            if (nums[i] == 0) {
                int count1= 0, count2 = 0;
                
                for (int j = 0; j < i; ++j) {
                    count1 += nums[j];
                }
                
                for (int j = i + 1; j < nums.size(); ++j) {
                    count2 += nums[j];
                }
                
                if (count1 == count2) res += 2;
                else if (abs(count1 - count2) == 1) ++res;
            }
            
        }
        
        return res;
    }
};",1454808397
Jing-You,mble6125,174,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        vector<int> count(n + 1);
        
        for (auto& q : queries) {
            count[q[0]]++;
            count[q[1] + 1]--;
        }
        
        for (int i = 1; i < n; ++i) {
            count[i] += count[i - 1];
        }
        
        for (int i = 0; i < n; ++i) {
            if (count[i] < nums[i]) return false;
            
        }
        
        return true;
    }
};",1454810713
Jing-You,mble6125,174,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        long long sum = 0;
        for (int x : nums) {
            sum += x;
        }
        
        if (sum == 0) {
            return 0;
        }
        
        int l = 0, r = queries.size() - 1;
        
        while (l <= r) {
            int mid = ((l + r) >> 1);
            if (success(nums, queries, mid)) r = mid - 1;
            else l = mid + 1;
        }
        
        if (l == queries.size()) {
            return -1;
        }
        
        return l + 1;
    }
    
    bool success(vector<int>& nums, vector<vector<int>>& queries, int k) {
        int n = nums.size();
        vector<int> count(n + 1);
        
        for (int i = 0; i <= k; ++i) {
            auto& q = queries[i];
            count[q[0]] += q[2];
            count[q[1] + 1] -= q[2];
        }
        
        for (int i = 1; i < n; ++i) {
            count[i] += count[i - 1];
        }
        
        for (int i = 0; i < n; ++i) {
            if (count[i] < nums[i]) return false;
        }
        
        return true;
    }
};",1454819066
lol0lol,lol0lol,175,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        total = sum(nums)
        curr = 0
        r = 0
        for e in nums:
            curr += e
            if e != 0: 
                continue
            if curr * 2 == total:
                r += 2
            elif curr * 2 + 1 == total:
                r += 1
            elif curr * 2 - 1 == total:
                r += 1
        return r",1454808275
lol0lol,lol0lol,175,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        n = len(nums)
        adds = [0] * (n + 1)
        for l, r in queries:
            adds[l] += 1
            adds[r + 1] -= 1
        curr = 0
        for i in range(n):
            curr += adds[i]
            if curr < nums[i]:
                return False
        return True",1454813132
lol0lol,lol0lol,175,3643,python3,"class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        n = len(nums)
        def can_solve(k):
            adds = [0] * (n + 1)
            for i in range(k):
                l, r, val = queries[i]
                adds[l] += val
                adds[r + 1] -= val
            curr = 0
            for i in range(n):
                curr += adds[i]
                if curr < nums[i]:
                    return False
            return True

        m = len(queries)
        lo, hi = 0, m + 1
        while lo < hi:
            mid = (lo + hi) // 2
            if can_solve(mid):
                hi = mid
            else:
                lo = mid + 1
        return lo if lo <= m else -1",1454826067
HIMANSHU GUPTA,himanshu_btc,176,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int ans=0;
        for(int i=0; i<nums.size(); i++){
            
            
            if(nums[i]==0){
                int left=0, right=0;
                for(int j=i-1; j>=0; j--){
                    left+=nums[j];
                }
                
                for(int j=i+1; j<nums.size(); j++){
                    right+=nums[j];
                }
                
                int diff=abs(left-right);
                
                if(diff==0){
                  ans+=2;  
                } 
                else if(diff==1){
                    ans++;
                }
            }
            
        }
        
        return ans;
    }
};",1454812007
HIMANSHU GUPTA,himanshu_btc,176,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        
        vector<int> fr(nums.size()+2, 0);
        
        for(int i=0; i<queries.size(); i++){
            int l=queries[i][0], r=queries[i][1];
            
            fr[l]++;
            fr[r+1]--;
        }
        
        for(int i=1; i<fr.size(); i++){
            fr[i]+=fr[i-1];
        }
        
        for(int i=0; i<nums.size(); i++){
            int val=nums[i], red=fr[i];
            
            if(val>red){
                return false;
            }
        }
        
        return true;
    }
};",1454817369
HIMANSHU GUPTA,himanshu_btc,176,3643,cpp,"class Solution {
public:
    bool check(int mid, vector<int> &nums, vector<vector<int>> &queries){
        vector<int> fr(nums.size()+2, 0);
        
        for(int i=0; i<mid; i++){
            int l=queries[i][0], r=queries[i][1], val=queries[i][2];
            
            fr[l]+=val;
            fr[r+1]-=val;
        }
        
        for(int i=1; i<fr.size(); i++){
            fr[i]+=fr[i-1];
        }
        
        for(int i=0; i<nums.size(); i++){
            int val=nums[i], red=fr[i];
            
            if(val>red){
                return false;
            }
        }
        
        return true;
    }
    
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        
        int l=0, h=queries.size();
        int ans=-1;
        
        while(l<=h){
            int mid=(l+h)/2;
            
            if(check(mid, nums, queries)){
                ans=mid;
                h=mid-1;
            }
            else{
                l=mid+1;
            }
        }
        
        return ans;
    }
};",1454826130
GoodBoiRaju,itsraajjjuuuu,177,3616,cpp,"#include <bits/stdc++.h>
using namespace std;
 
typedef long long ll;
typedef unsigned long long ull;
typedef vector<int> vi;
typedef vector<ll> vll;
typedef pair<int, int> pii;
typedef pair<ll, ll> pll;
typedef priority_queue<int> pq;
typedef priority_queue<int, vector<int>, greater<int>> pqg;
 
#define fastio ios_base::sync_with_stdio(false); cin.tie(NULL);
#define all(x) (x).begin(), (x).end()
#define rall(x) (x).rbegin(), (x).rend()
#define pb push_back
#define mp make_pair
#define fi first
#define se second
#define sz(x) (int)(x).size()
#define rep(i, a, b) for(int i = a; i < b; ++i)
#define repr(i, a, b) for(int i = a; i >= b; --i)
#define deb(x) cout << #x << "" = "" << x << endl;
#define INF 1e9
#define LINF 1e18
#define MOD 1000000007
#define MOD2 998244353
#define endl '\n'
 
ll min(ll a, int b) { return (a < b) ? a : b; }
ll min(int a, ll b) { return (a < b) ? a : b; }
ll max(ll a, int b) { return (a > b) ? a : b; }
ll max(int a, ll b) { return (a > b) ? a : b; }
ll gcd(ll a, ll b) { return (b == 0) ? a : gcd(b, a % b); }
ll lcm(ll a, ll b) { return a / gcd(a, b) * b; }
class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int n = nums.size(), ans = 0;

        auto f = [&nums, n](int start, int dir) {
            vector<int> temp = nums;
            int curr = start, d = dir;
            while (curr >= 0 && curr < n) {
                if (temp[curr] == 0) {
                    curr += d;
                } else {
                    temp[curr]--;
                    d = -d;
                    curr += d;
                }
            }
            for (int i = 0; i < n; ++i) {
                if (temp[i] != 0) return false;
            }
            return true;
        };

        for (int i = 0; i < n; ++i) {
            if (nums[i] == 0) {
                if (f(i, 1)) ans++;
                if (f(i, -1)) ans++;
            }
        }
        return ans;
    }
};

",1454807834
GoodBoiRaju,itsraajjjuuuu,177,3639,cpp,"#include <bits/stdc++.h>
using namespace std;
 
typedef long long ll;
typedef unsigned long long ull;
typedef vector<int> vi;
typedef vector<ll> vll;
typedef pair<int, int> pii;
typedef pair<ll, ll> pll;
typedef priority_queue<int> pq;
typedef priority_queue<int, vector<int>, greater<int>> pqg;
 
#define fastio ios_base::sync_with_stdio(false); cin.tie(NULL);
#define all(x) (x).begin(), (x).end()
#define rall(x) (x).rbegin(), (x).rend()
#define pb push_back
#define mp make_pair
#define fi first
#define se second
#define sz(x) (int)(x).size()
#define rep(i, a, b) for(int i = a; i < b; ++i)
#define repr(i, a, b) for(int i = a; i >= b; --i)
#define deb(x) cout << #x << "" = "" << x << endl;
#define INF 1e9
#define LINF 1e18
#define MOD 1000000007
#define MOD2 998244353
#define endl '\n'
 
ll min(ll a, int b) { return (a < b) ? a : b; }
ll min(int a, ll b) { return (a < b) ? a : b; }
ll max(ll a, int b) { return (a > b) ? a : b; }
ll max(int a, ll b) { return (a > b) ? a : b; }
ll gcd(ll a, ll b) { return (b == 0) ? a : gcd(b, a % b); }
ll lcm(ll a, ll b) { return a / gcd(a, b) * b; }
class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        vector<int> choose(n+1,0);
        for(auto x : queries){
            choose[x[0]]++;
            choose[x[1]+1]--;
        }
        int r = choose[0];
        for(int i =1;i<=n;i++) {
            r+=choose[i];
            choose[i]=r;
        }
        for(int i =0;i<n;i++){
            // if(nums[i]==0) continue;
            nums[i]-=min(nums[i],choose[i]);
            if(nums[i]!=0) return false;
        }
        return true;
        
    }
};",1454813825
GoodBoiRaju,itsraajjjuuuu,177,3643,cpp,"#include <vector>
using namespace std;

class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size(), m = queries.size();
        vector<int> a = nums, diff(n + 1, 0);

        auto f = [&](int k) -> bool {
            fill(diff.begin(), diff.end(), 0);
            for (int i = 0; i < k; ++i) {
                int l = queries[i][0], r = queries[i][1], val = queries[i][2];
                diff[l] -= val;
                if (r + 1 < n) diff[r + 1] += val;
            }
            int curr = 0;
            for (int i = 0; i < n; ++i) {
                curr += diff[i];
                if ((a[i] + curr) > 0) return false;
            }
            return true;
        };

        int left = 0, right = m, ans= -1;
        while (left <= right) {
            int mid = left + (right - left) / 2;
            if (f(mid)) {
                ans = mid;
                right = mid - 1;
            } else {
                left = mid + 1;
            }
        }
        return ans;
    }
};
",1454826166
Farras Faddila,donbasta,178,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int n = nums.size();
        int tot = accumulate(nums.begin(), nums.end(), 0);
        int cur = 0, ans = 0;
        for (int i = 0; i < n; i++) {
            if (nums[i] == 0) {
                if (cur * 2 == tot) ans += 2;
                if (abs(cur - (tot - cur)) == 1) ans++;
            }
            cur += nums[i];
        }
        return ans;
    }
};",1454825832
Farras Faddila,donbasta,178,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        vector<int> T(n + 1);
        for (auto q : queries) {
            T[q[0]]++;
            T[q[1] + 1]--;
        }
        for (int i = 1; i < n; i++) {
            T[i] += T[i - 1];
        }
        for (int i = 0; i < n; i++) {
            if (nums[i] > T[i]) return false;
        }
        return true;
    }
};",1454825910
Farras Faddila,donbasta,178,3643,cpp,"struct Segtree {
    vector<int> tree, lz;
    Segtree(const vector<int>& T) {
        int sz = T.size();
        tree.resize(4 * sz + 5);
        lz.resize(4 * sz + 5);
        build(1, 0, sz - 1, T);
    }
    void build(int v, int s, int e, const vector<int>& T) {
        if (s == e) {
            tree[v] = T[s];
            return;
        }
        int mid = (s + e) >> 1;
        build(v << 1, s, mid, T);
        build(v << 1 | 1, mid + 1, e, T);
        tree[v] = max(tree[v << 1], tree[v << 1 | 1]);
    }
    void push(int v, int s, int e) {
        if (lz[v] == 0) return;
        tree[v << 1] += lz[v];
        lz[v << 1] += lz[v];
        tree[v << 1 | 1] += lz[v];
        lz[v << 1 | 1] += lz[v];
        lz[v] = 0;
    }
    void upd(int v, int s, int e, int l, int r, int val) {
        if (s == l && e == r) {
            lz[v] += val;
            tree[v] += val;
            return;
        }
        push(v, s, e);
        int mid = (s + e) >> 1;
        if (r <= mid) upd(v << 1, s, mid, l, r, val);
        else if (l >= mid + 1) upd(v << 1 | 1, mid + 1, e, l, r, val);
        else {
            upd(v << 1, s, mid, l, mid, val);
            upd(v << 1 | 1, mid + 1, e, mid + 1, r, val);
        }
        tree[v] = max(tree[v << 1], tree[v << 1 | 1]);
    }
};

class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        if (*max_element(nums.begin(), nums.end()) == 0) return 0;
        Segtree sgt(nums);
        int steps = 0;
        for (auto q : queries) {
            sgt.upd(1, 0, n - 1, q[0], q[1], -q[2]);
            steps++;
            if (sgt.tree[1] <= 0) {
                return steps;
            }
        }
        return -1;
    }
};",1454826324
Aniket More,an1ket_62,179,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& a) {
        int n=a.size();
        int ans=0;
        for (int i=0;i<n;i++){
            if (a[i]>0){
                continue;
            }
            // cout<<""start ""<<i<<endl;
            int curr=i;
            vector<int>b=a;
            int d=1;
            while(curr>=0 && curr<n){
                if (b[curr]==0){
                    curr+=d;
                }
                else{
                    b[curr]--;
                    d*=-1;
                    curr+=d;
                }
                // cout<<curr<<"" "";
            }
            // cout<<endl;
            bool f=1;
            for(int i=0;i<n;i++){
                if (b[i]>0){
                    f=0;
                    break;
                }
            }
            // if (f){
            //     cout<<i<<"" "";
            // }
            // cout<<endl;
            ans+=f;
            d=-1;
            b=a;
            curr=i;
            while(curr>=0 && curr<n){
                if (b[curr]==0){
                    curr+=d;
                }
                else{
                    b[curr]--;
                    d*=-1;
                    curr+=d;
                }
            }
            f=1;
            for(int i=0;i<n;i++){
                if (b[i]>0){
                    f=0;
                    break;
                }
            }
            // if (f){
            //     cout<<i<<endl;
            // }
            ans+=f;
            
        }
        return ans;
        
    }
};",1454810423
Aniket More,an1ket_62,179,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& a, vector<vector<int>>& q) {
        int n=a.size();
        vector<int>pf(n);
        for(int i=0;i<q.size();i++){
            int l=q[i][0];
            int r=q[i][1];
            pf[l]++;
            if (r+1<n){
                pf[r+1]--;
            }
        }
        for(int i=1;i<n;i++){
            pf[i]+=pf[i-1];
        }
        for(int i=0;i<n;i++){
            if(a[i]>pf[i]){
                return false;
            }
        }
        return true;
        
    }
};",1454812734
Aniket More,an1ket_62,179,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& a, vector<vector<int>>& q) {
        int low=0;
        int high=q.size();
        int ans=INT_MAX;
        int n=a.size();
        while(low<=high){
            int md=(low+high)/2;
            vector<long long>pf(n);
            for (int i=0;i<md;i++){
                int l=q[i][0];
                int r=q[i][1];
                int v=q[i][2];
                pf[l]+=v;
                if (r+1<n){
                    pf[r+1]-=v;
                }
            }
            bool f=1;
            for (int i=0;i<n;i++){
                if (i-1>=0){
                    pf[i]+=pf[i-1];
                }
                if (a[i]>pf[i]){
                    f=0;
                    break;
                }
            }
            if (f){
                ans=md;
                high=md-1;
            }
            else{
                low=md+1;
            }
            
        }
        if (ans==INT_MAX){
            ans=-1;
        }
        return ans;
        
    }
};",1454819538
dpdpdpp,dpdpdpp,180,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        N = len(nums)
        
        def ok(curr, dir):
            a = nums[:]
            while 0 <= curr < N:
                if a[curr] == 0:
                    curr += dir
                else:
                    a[curr] -= 1
                    dir = - dir
                    curr += dir
            return sum(a) == 0

        ans = 0
        for i in range(N):
            for j in [1, -1]:
                if nums[i] == 0 and ok (i, j):
                    ans += 1

        return ans",1454808441
dpdpdpp,dpdpdpp,180,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        N = len(nums)
        diff = [0] * (N+5)
        for s, e in queries:
            diff[s] += 1
            diff[e+1] -= 1

        ps = 0
        for i in range(N):
            ps += diff[i]
            if ps < nums[i]:
                return False

        return True",1454811176
dpdpdpp,dpdpdpp,180,3643,python3,"class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        N = len(nums)

        def ok(k):
            diff = [0] * (N+5)
            for s, e, val in queries[:k]:
                diff[s] += val
                diff[e+1] -= val
                
            ps = 0
            for i in range(N):
                ps += diff[i]
                if ps < nums[i]:
                    return False
            return True

        lo = 0
        hi = len(queries)
        while lo < hi:
            mid = (lo + hi) // 2
            if not ok(mid):
                lo = mid + 1
            else:
                hi = mid

        if not ok(lo):
            return -1

        return lo
        
",1454819718
dhakad_239,dhakad_239,181,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int i,j;
        int n=nums.size();
        int sum=0;
        for(i=0;i<n;i++){
            sum+=nums[i];
        }
        int to=0;
        int ans=0;
        for(i=0;i<n;i++){
            sum-=nums[i];
            to+=nums[i];
            if(nums[i]==0){
                if(to==sum){
                    ans+=2;
                }
                else if(abs(to-sum)==1){
                    ans+=1;
                }
            }
        }
        return ans;
    }
};",1454808410
dhakad_239,dhakad_239,181,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& q) {
        int i,j;
        int n=nums.size();
        int m=q.size();
        int dp[n];
        for(i=0;i<n;i++){
            dp[i]=0;
        }
        for(i=0;i<m;i++){
            int x=q[i][0];
            int y=q[i][1];
            dp[x]++;
            if(y+1<n){
                dp[y+1]--;
            }
        }
        int cur=0;
        for(i=0;i<n;i++){
            cur+=dp[i];
            if(nums[i]>cur){
                return 0;
            }
        }
        return 1;
    }
};",1454816064
dhakad_239,dhakad_239,181,3643,cpp,"class Solution {
public:

     bool check(int n,int m,int mi,vector<vector<int>>q,vector<int>nums){
         int i,j;
         int dp[n];
        for(i=0;i<n;i++){
            dp[i]=0;
        }
         for(i=0;i<mi;i++){
            int x=q[i][0];
            int y=q[i][1];
             int z=q[i][2];
            dp[x]+=z;
            if(y+1<n){
                dp[y+1]-=z;
            }
        }
         int cur=0;
        for(i=0;i<n;i++){
            cur+=dp[i];
            if(nums[i]>cur){
                return 0;
            }
        }
        return 1;
     }
    int minZeroArray(vector<int>& nums, vector<vector<int>>& q) {

      int i,j;
        int n=nums.size();
        int m=q.size();
        int l=0,r=m;
        int ans=m;
        int flag=0;
        while(l<=r){
            int mi=l+(r-l)/2;
            if(check(n,m,mi,q,nums)){
                flag=1;
                ans=min(ans,mi);
                r=mi-1;
            }
            else{
                l=mi+1;
            }
        }
        if(!flag){
            return -1;
        }
        else{
        return ans;
        }
        
    }
};",1454826691
abhisheq_,abhisheq_,183,3616,cpp,"class Solution {
public:
    bool helper(vector<int> nums, int start, int dir) {
        int n = nums.size(), i = start;
        while (i >= 0 && i < n) {
            if (nums[i] == 0) {
                i += dir;
            } else {
                nums[i]--;
                dir = -dir;
                i += dir;
            }
        }
        return all_of(nums.begin(), nums.end(), [](int x) { return x == 0; });
    }

    int countValidSelections(vector<int>& nums) {
        int n = nums.size(), res = 0;
        for (int i = 0; i < n; ++i) {
            if (nums[i] == 0) {
                if (helper(nums, i, -1)) res++;
                if (helper(nums, i, 1)) res++;
            }
        }
        return res;
    }
};
",1454811232
abhisheq_,abhisheq_,183,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        vector<long long>p(nums.size()+1);
        for(auto i: queries){
            p[i[0]]++;
            p[i[1]+1]--;
        }
        for(int i=1; i<p.size(); i++){
            p[i]+=p[i-1];
        }
        for(int i=0; i<nums.size(); i++){
            if(nums[i]>p[i]){
                return false;
            }
        }
        return true;
        
    }
};",1454815700
abhisheq_,abhisheq_,183,3643,cpp,"class Solution {
public:
    bool fun(vector<int>nums, vector<vector<int>>queries, int k){
        vector<long long>p(nums.size()+1);
        for(int i=0; i<k; i++){
            long long t=queries[i][2];
            p[queries[i][0]]+=t;
            p[queries[i][1]+1]-=t;
        }
        for(int i=1; i<p.size(); i++){
            p[i]+=p[i-1];
        }
        for(int i=0; i<nums.size(); i++){
            if(nums[i]>p[i]){
                return false;
            }
        }
        return true;
    }
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int l=0, r=queries.size(), ans=-1;
        while(l<=r){
            int mid=(l+r)/2;
            if(fun(nums, queries, mid)){
                ans=mid;
                r=mid-1;
            }else{
                l=mid+1;
            }
        }
        return ans;
        
    }
};",1454826809
pushkar kumar,qwertypushkar123,184,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int n=nums.size();
        int ans=0;
        for(int i=0;i<n;i++){
            if(nums[i]==0){
                int sum1=0,sum2=0;
                for(int j=i-1;j>=0;j--){
                    sum1+=nums[j];
                }
                for(int j=i+1;j<n;j++){
                    sum2+=nums[j];
                }
                // cout<<i<<"" ""<<sum1<<"" ""<<sum2<<endl;
                if(sum1==sum2){
                    ans+=2; 
                }
                if(abs(sum1-sum2)==1){
                    ans+=1;
                }
            }
        }
        return ans;
    }
};",1454810521
pushkar kumar,qwertypushkar123,184,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n=nums.size();
        vector<int>psum(n+1);
        int m=queries.size();
        for(int i=0;i<m;i++){
            psum[queries[i][0]]+=1;
            psum[queries[i][1]+1]-=1;
        }
        for(int i=1;i<n;i++){
            psum[i]=psum[i-1]+psum[i];
        }
        for(int i=0;i<n;i++){
            if(nums[i]-psum[i]>0){
                return false;
            }
        }
        return true;
    }
};",1454816226
pushkar kumar,qwertypushkar123,184,3643,cpp,"class Solution {
public:
    bool check(vector<int>&nums,vector<vector<int>>&queries,int mid){
        int n=nums.size();
        int m=queries.size();
        vector<int>psum(n+1);
        for(int i=0;i<mid;i++){
            int left=queries[i][0];
            int right=queries[i][1];
            int val=queries[i][2];
            psum[left]+=val;
            psum[right+1]-=val;
        }
        for(int i=1;i<n;i++){
            psum[i]=psum[i-1]+psum[i];
        }
        for(int i=0;i<n;i++){
            if(nums[i]-psum[i]>0){
                return false;
            }
        }
        return true;
    }
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n=nums.size();
        int m=queries.size();
        int s=0,e=m,res=-1;
        while(s<=e){
            int mid=s+(e-s)/2;
            if(check(nums,queries,mid)){
                res=mid;
                e=mid-1;
            }
            else{
                s=mid+1;
            }
        }
        return res;
    }
};",1454826811
Anshuman Tiwari,VoidX1107,185,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        vector<int> pref=nums;
        vector<int> suff=nums;
        int cnt=0;
        int n=nums.size();
        for(int i=1;i<n;i++){
            pref[i]+=pref[i-1];
        }
        for(int i=n-2;i>=0;i--){
            suff[i]+=suff[i+1];
        }
        for(int i=0;i<n;i++){
            if(nums[i]==0 && suff[i]==pref[i])cnt+=2;
            if(nums[i]==0 && (suff[i]==pref[i]+1 || pref[i]==suff[i]+1))cnt+=1;
        }
        return cnt;
    }
};",1454813006
Anshuman Tiwari,VoidX1107,185,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        vector<int> linesweep(n+1);
        for(auto& it : queries) {
            linesweep[it[0]]++;
            linesweep[it[1]+1]--;
        }

        for(int i = 1; i < linesweep.size(); i++) {
            linesweep[i] += linesweep[i-1];
        }
        
        for(int i = 0; i < n; i++) {
            if(nums[i] > linesweep[i]) return false;
        }
        return true;
    }
};",1454822217
Anshuman Tiwari,VoidX1107,185,3643,cpp,"class Solution {
public:
    bool solve(vector<int>& nums, vector<vector<int>>& queries, int k) {
        int n = nums.size();
        vector<long long> linesweep(n + 1);
        
        for(int i = 0; i < k; i++) {
            int left = queries[i][0];
            int right = queries[i][1];
            long long val = queries[i][2];
            linesweep[left] += val;
            linesweep[right + 1] -= val;
        }
    
        for(int i = 1; i < n; i++) {
            linesweep[i] += linesweep[i-1];
        }
        
        for(int i = 0; i < n; i++) {
            if(linesweep[i] < nums[i]) return false;
        }
        return true;
    }
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int left = 0, right = queries.size();
        int ans = -1;
        
        while(left <= right) {
            int mid = left + (right - left) / 2;
            
            if(solve(nums, queries, mid)) {
                ans = mid;
                right = mid - 1; 
            } else {
                left = mid + 1; 
            }
        }
        
        return ans;
    }
};",1454826812
ocavue,ocavue,186,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        nums_original = [*nums]

        def run(nums, curr: int, dir: int):
            n = len(nums)
            while 0 <= curr < n:
                
                if nums[curr] == 0:
                    curr += dir
                elif nums[curr] > 0:
                    nums[curr] -= 1
                    dir *= -1
                    curr += dir 
            return set(nums) == set([0])

        result = 0 
        for i in range(len(nums)):
            if nums[i] == 0:
                result += run([*nums_original], i, -1)
                result += run([*nums_original], i, +1)

        return result ",1454812427
ocavue,ocavue,186,3639,python3,"from typing import List


class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        n = len(nums)

        diffs = [0] * (n + 1)
        for l, r in queries:
            diffs[l] += 1
            diffs[r + 1] -= 1

        presum = [0]
        for d in diffs:
            presum.append(presum[-1] + d)

        for i in range(n):
            num = nums[i]
            sum = presum[i + 1]
            if num - sum > 0:
                return False
        return True
 ",1454822511
ocavue,ocavue,186,3643,python3,"from typing import List


class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        n = len(nums)
        if all(num == 0 for num in nums):
            return 0

        if not self.isZeroArray(nums, queries):
            return -1

        lo = 0
        hi = len(queries)

        while lo < hi:
            mi = (lo + hi) // 2
            q = queries[:mi]
            if self.isZeroArray(nums, q):
                hi = mi
            else:
                lo = mi + 1
        return lo

    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        n = len(nums)

        diffs = [0] * (n + 1)
        for l, r, val in queries:
            diffs[l] += val
            diffs[r + 1] -= val

        presum = [0]
        for d in diffs:
            presum.append(presum[-1] + d)

        for i in range(n):
            num = nums[i]
            sum = presum[i + 1]
            if num - sum > 0:
                return False
        return True
 ",1454826894
Ramakrishna Gaddam,ram0629,188,3616,java,"class Solution {
    public int countValidSelections(int[] nums) {

        int res = 0;

        for(int i = 0; i<nums.length;i++){
            if(nums[i]==0 && (valid(nums.clone(), i, 1))){
                res++;
            }
            if(nums[i]==0 && (valid(nums.clone(),i,-1))){
                res++;
            }
        }
        return res;
    }

    private boolean valid(int[] nums, int cur, int dir){

        int n = nums.length;
        while(cur>=0 && cur<n){

            int num = nums[cur];

            if(num==0){
                cur = cur+dir;
            }
            else{
                nums[cur]--;

                dir *=-1;
                cur = cur+dir;
            }
        }

        for(int i = 0; i<n;i++){
            if(nums[i]>0){
                return false;
            }
        }
        System.out.println(Arrays.toString(nums));
        return true;
    }
}",1454810388
Ramakrishna Gaddam,ram0629,188,3639,java,"class Solution {
    public boolean isZeroArray(int[] nums, int[][] queries) {


        int n = nums.length;

        long[] line = new long[n+1];

        for(int[] q : queries){
            line[q[0]]++;
            line[q[1]+1]--;
        }

        long sum =0;

        for(int i = 0; i<=n;i++){

            sum +=line[i];

            line[i] = sum;
        }

        int count = 0;
        for(int i =0; i<n;i++){
            if(line[i]>=nums[i]){
                count++;
            }
        }
        return count==n;
    }
}",1454821257
Ramakrishna Gaddam,ram0629,188,3643,java,"class Solution {
    public int minZeroArray(int[] nums, int[][] queries) { 
        int res = -1;

        int left = 0;
        int right = queries.length;

        while(left<=right){
            int mid = left+(right-left)/2;

            if(isValid(nums, queries, mid)){
                res = mid;
                right= mid-1;
            }
            else{
                left = mid+1;
            }
        }
        return res;
    }

    boolean isValid(int[] nums, int[][] queries, int k){
        
        int n = nums.length;

        long[] line = new long[n+1];

        for(int i = 0; i<k;i++){
            int[] q = queries[i];
            line[q[0]]+=q[2];
            line[q[1]+1]-=q[2];
        }

        long sum =0;

        for(int i = 0; i<=n;i++){

            sum +=line[i];

            line[i] = sum;
        }

        int count = 0;
        for(int i =0; i<n;i++){
            if(line[i]>=nums[i]){
                count++;
            }
        }
        return count==n;
    }
}",1454826993
midnight_simon,midnightsimon,189,3616,cpp,"class Solution {

    bool solve(vector<int> nums, int start, int dir) {

        bool should_continue = true;
        while(should_continue) {
            
            start += dir;
            if(start < 0 || start >= nums.size()) {
                break;
            }
            if(nums[start] == 0) {
                continue;
            }
            if(nums[start] > 0) {
                nums[start]--;
                dir *= -1;
            }
        }

        for(int x : nums) {
            if(x > 0) {
                return false;
            }
        }

        return true;
    }

public:
    int countValidSelections(vector<int>& nums) {
        int n = nums.size();
        int ans = 0;


        for(int i = 0; i < n; i++) {
            if(nums[i] == 0) {
                ans += solve(nums, i, -1);
                ans += solve(nums, i, +1);
            }
        }

        return ans;

        
    }
};",1454810243
midnight_simon,midnightsimon,189,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        vector<int> freq(n+1);
        for(auto& q : queries) {
            freq[q[0]]++;
            freq[q[1]+1]--;
        }
        
        vector<int> pre(n+1);
        int sum = 0;
        for(int i = 0; i < n; i++) {
            sum += freq[i];
            pre[i] = sum;
        }
        
        for(int i = 0; i < n; i++) {
            if(nums[i] > pre[i]) {
                return false;
            }
        }
        
        return true;
        
        
    }
};",1454819183
midnight_simon,midnightsimon,189,3643,cpp,"class Solution {
    
    
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        
        auto solve = [&](int k) -> bool {
            int n = nums.size();
            vector<int> freq(n+1);
            
            for(int i = 0; i < k; i++) {
                freq[queries[i][0]] += queries[i][2];
                freq[queries[i][1]+1]-= queries[i][2];
            }

            vector<int> pre(n+1);
            int sum = 0;
            for(int i = 0; i < n; i++) {
                sum += freq[i];
                pre[i] = sum;
            }

            for(int i = 0; i < n; i++) {
                if(nums[i] > pre[i]) {
                    return false;
                }
            }

            return true;
        };
        
        int L = 0;
        int R = queries.size();
        int best = INT_MAX;
        while(L <= R) {
            int M = L + (R - L) / 2;
            bool res = solve(M);
            if(res) {
                best = M;
                R = M - 1;
            } else {
                L = M + 1;
            }
        }
        if(best == INT_MAX) {
            return -1;
        }
        return best;
    }
};",1454827013
zokumyoin,zokumyoin,190,3616,java,"class Solution {
    public int countValidSelections(int[] arr) {
        int ans = 0;
        for (int i = 0; i < arr.length; i++) {
            if (arr[i] != 0) {
                continue;
            }
            if (valid(Arrays.copyOf(arr, arr.length), i, 1)) {
                ans++;
            }
            if (valid(Arrays.copyOf(arr, arr.length), i, -1)) {
                ans++;
            }
        }
        return ans;
    }
    
    private boolean valid(int[] arr, int cur, int dir) {
        // System.out.printf(""%s %d %d\n"", Arrays.toString(arr), cur, dir);
        if (cur < 0 || cur >= arr.length) {
            for (int v : arr) {
                if (v != 0) {
                    return false;
                }
            }
            return true;
        }
        if (arr[cur] == 0) {
            return valid(arr, cur + dir, dir);
        }
        if (arr[cur] > 0) {
            arr[cur]--;
            return valid(arr, cur - dir, -dir);
        }
        return false;
    }
}",1454818840
zokumyoin,zokumyoin,190,3639,java,"class Solution {
    public boolean isZeroArray(int[] arr, int[][] queries) {
        int[] d = new int[arr.length + 1];
        for (int[] q : queries) {
            int l = q[0], r = q[1];
            d[l]++;
            d[r + 1]--;
        }
        int sum = 0;
        for (int i = 0; i < arr.length; i++) {
            sum += d[i];
            if (sum < arr[i]) {
                return false;
            }
        }
        return true;
    }
}",1454821745
zokumyoin,zokumyoin,190,3643,java,"class Solution {
    public int minZeroArray(int[] nums, int[][] queries) {
        if (!willBeZero(nums, queries, queries.length)) {
            return -1;
        }
        int lo = 0, hi = queries.length;
        while (lo < hi) {
            int mid = lo + (hi - lo) / 2;
            if (willBeZero(nums, queries, mid)) {
                hi = mid;
            } else {
                lo = mid + 1;
            }
        }
        return hi;
    }
    
    private boolean willBeZero(int[] arr, int[][] queries, int k) {
        int[] d = new int[arr.length + 1];
        for (int i = 0; i < k; i++) {
            int[] q = queries[i];
            int l = q[0], r = q[1], val = q[2];
            d[l] += val;
            d[r + 1] -= val;
        }
        int sum = 0;
        for (int i = 0; i < arr.length; i++) {
            sum += d[i];
            if (arr[i] > sum) {
                return false;
            }
        }
        return true;
        
    }
}",1454827089
Shubham Maheshwari,sm_27,192,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        n = len(nums)
        s = sum(nums)
        curr = 0
        ans = 0
        for i in range(n):
            if nums[i] == 0:
                if abs((s-curr) - curr)==1:
                    ans += 1
                elif s-curr == curr:
                    ans += 2
            curr += nums[i]
        return ans",1454814178
Shubham Maheshwari,sm_27,192,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        q = []
        for query in queries:
            q.append((query[0], 1))
            q.append((query[1]+1, -1))
        q.sort(key = lambda x:(x[0],-x[1]))
        n = len(nums)
        m = len(q)
        j = 0
        curr = 0
        for i in range(n):
            while j<=m and q[j][0] <= i:
                curr += q[j][1]
                j += 1
            if curr < nums[i]:
                return False
        return True",1454809087
Shubham Maheshwari,sm_27,192,3643,python3,"class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        def check(m):
            q = []
            for query in queries[:m]:
                q.append((query[0], query[2]))
                q.append((query[1]+1, -query[2]))
            q.sort(key = lambda x:(x[0],-x[1]))
            n = len(nums)
            m = len(q)
            j = 0
            curr = 0
            for i in range(n):
                while j<m and q[j][0] <= i:
                    curr += q[j][1]
                    j += 1
                if curr < nums[i]:
                    return False
            return True
        m = len(queries)
        l = 0
        r = m
        ans = float(""inf"")
        while l<=r:
            mid = (l+r)//2
            if check(mid):
                ans = mid
                r = mid-1
            else:
                l = mid + 1
        if ans == float(""inf""):
            return -1
        return ans
        ",1454820185
Rohitaas Beri,rohitaas_beri,195,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {

        auto go = [&](int index, int dir, vector<int>& nums) -> bool {
            int i = index;
            while (i >= 0 && i < nums.size()) {
                if (nums[i] == 0) {
                    i += dir;
                } else {
                    nums[i]--;
                    if (dir == 1)
                        dir = -1;
                    else
                        dir = 1;
                    i += dir;
                }
            }

            for (auto i : nums) {
                if (i != 0)
                    return false;
            }
            return true;
        };

        int ans = 0;
        for (int i = 0; i < nums.size(); i++) {

            if (nums[i] == 0) {
                auto temp = nums;
                ans += go(i, 1, temp);
                temp = nums;
                ans += go(i, -1, temp);
                //cout << ans << endl;
            }
        }
        return ans;
    }
};",1454812562
Rohitaas Beri,rohitaas_beri,195,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        int f[n + 2];
        memset(f, 0, sizeof(f));

        for (auto i : queries) {
            f[i[0]]++;
            f[i[1] + 1]--;
        }

        int cur = 0;
        for (int i = 0; i < n; i++) {
            cur += f[i];
            if (cur < nums[i]) {
                return false;
            }
        }
        return true;
    }
};",1454818969
Rohitaas Beri,rohitaas_beri,195,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {

        int n = nums.size();

        int flag = 0;
        for (auto i : nums) {
            if (i != 0) {
                flag = 1;
                break;
            }
        }

        if (!flag)
            return 0;

        int high = queries.size() - 1, low = 0, mid, ans=-1;

        while (high >= low) {
            mid = (high + low) >> 1;

            if ([&]() -> bool {
                    int f[n + 2];
                    memset(f, 0, sizeof(f));

                    for (int i = 0; i <= mid; i++) {
                        f[queries[i][0]] += queries[i][2];
                        f[queries[i][1] + 1] -= queries[i][2];
                    }
                    int cur = 0;
                    for (int i = 0; i < n; i++) {
                        cur += f[i];
                        if (cur < nums[i]) {
                            return false;
                        }
                    }
                    return true;
                }()) {
                ans = mid;
                high = mid - 1;
            } else
                low = mid + 1;
        }

        if(ans==-1)return -1;
        return ans + 1;
    }
};",1454827320
Ayanokoji,TheEgoist_,196,3616,cpp,"class Solution {
public:
void check(vector<int> &nums, int ind, int dir) {
    for (int i = ind; i < nums.size() && i >= 0; i += dir) {
        if (nums[i] > 0) {
            nums[i]--;
            check(nums, i - dir, -dir);
            return;
        }
    }
}
    int countValidSelections(vector<int>& nums) {
        int n = nums.size();
        vector<int> curr;
        for (int i = 0; i < n; i++) {
            if (nums[i] == 0) {
                curr.push_back(i);
            }
        }

        int ans = 0;
        for (int i = 0; i < curr.size(); i++) {
            vector<int> temp = nums;
            check(temp, curr[i], 1);
            if (accumulate(temp.begin(), temp.end(), 0) == 0) ans++;
            temp = nums;
            check(temp, curr[i], -1);
            if (accumulate(temp.begin(), temp.end(), 0) == 0) ans++;
        }
        return ans;
    }
};",1454809574
Ayanokoji,TheEgoist_,196,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        vector<int> diff(n + 1);
        for (int i = 0; i < queries.size(); i++) {
            int l = queries[i][0];
            int r = queries[i][1];
            diff[l]++;
            diff[r + 1]--;
        }
        for (int i = 1; i <= n; i++) {
            diff[i] += diff[i - 1];
        }

        for (int i = 0; i < n; i++) {
            if (diff[i] < nums[i]) return false;
        }
        return true;
    }
};",1454814124
Ayanokoji,TheEgoist_,196,3643,cpp,"class Solution {
public:
    bool can(int sz, vector<int> &nums, vector<vector<int>> &queries) {
        int n = nums.size();
        vector<int> diff(n + 1, 0);
        for (int i = 0; i < sz; i++) {
            int l = queries[i][0];
            int r = queries[i][1];
            diff[l] += queries[i][2];
            diff[r + 1] -= queries[i][2];
        }
        // cout << sz << "": "";
        for (int i = 1; i <= n; i++) {
            diff[i] += diff[i - 1];
        }
        // for (int i = 0; i <= n; i++) {
        //     cout << diff[i] << ' ';
        // }
        // cout<<'\n';

        for (int i = 0; i < n; i++) {
            if (diff[i] < nums[i]) return false;
        }
        return true;
    }
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int s = 0;
        int e = queries.size();
        int ans = 0;
        if (!can(queries.size(), nums, queries)) return -1;
        while (s <= e) {
            int mid = (s + e) / 2;
            if (can(mid, nums, queries)) {
                e = mid - 1;
                ans = mid;
            }
            else s = mid + 1;
        }
        return ans;
    }
};",1454827338
Felix Yan,felixpek,197,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        n = len(nums)
        def simula(start, direction):
            ar = nums[:]
            cur = start
            step = 1 if direction == 1 else -1

            while 0 <= cur < n:
                if ar[cur] == 0:
                    cur += step
                elif ar[cur] > 0:
                    ar[cur] -= 1
                    step = -step 
                    cur += step

            return all(x == 0 for x in ar)

        validCount = 0

        for i in range(n):
            if nums[i] == 0:  
                if simula(i,1):  
                    validCount += 1
                if simula(i, 0):
                    validCount += 1

        return validCount",1454815803
Felix Yan,felixpek,197,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        n = len(nums)
        covr = [0] * (n + 1)

        for l, r in queries:
            covr[l] += 1
            if r + 1 < n:
                covr[r + 1] -= 1               
        for i in range(1, n):
            covr[i] += covr[i - 1]

        for i in range(n):
            if nums[i] > covr[i]:
                return False
        return True        ",1454819204
Felix Yan,felixpek,197,3643,python3,"class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        n = len(nums)
        m = len(queries)
        totalDiff = [0] * (n + 2)
        if all(x == 0 for x in nums):
            return 0


        for l, r, val in queries:
            totalDiff[l] += val
            if r + 1 < len(totalDiff):
                totalDiff[r + 1] -= val
        totalCapacity = [0] * n
        cumulative = 0
        for i in range(n):
            cumulative += totalDiff[i]
            totalCapacity[i] = cumulative
        for i in range(n):
            if totalCapacity[i] < nums[i]:
                return -1 

        lo, hi = 1, m
        result = -1
        while lo <= hi:
            mid = (lo + hi) // 2

            diff = [0] * (n + 2)
            for i in range(mid):
                l, r, val = queries[i]
                diff[l] += val
                if r + 1 < len(diff):
                    diff[r + 1] -= val
            capacity = [0] * n
            cumulative = 0
            possible = True
            for i in range(n):
                cumulative += diff[i]
                capacity[i] = cumulative
                if capacity[i] < nums[i]:
                    possible = False
                    break
            if possible:
                result = mid
                hi = mid - 1 
            else:
                lo = mid + 1 

        return result        ",1454827345
Sandeep P,Sandeep_P,198,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        r=sum(nums)
        ans=0
        l=0
        for i,x in enumerate(nums):
            if x==0 and l==r:
                ans+=2
            if x==0 and abs(l-r)==1:
                ans+=1
            l+=x
            r-=x
        return ans",1454810447
Sandeep P,Sandeep_P,198,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        n=len(nums)
        ops=[0]*(n+1)
        for l,r in queries:
            ops[l]-=1
            ops[r+1]+=1
        offset=0
        for i in range(n):
            offset+=ops[i]
            nums[i]+=offset
        return all(x<=0 for x in nums)",1454814980
Sandeep P,Sandeep_P,198,3643,python3,"class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        n=len(nums)
        def check(k):
            a=nums[::]
            ops=[0]*(n+1)
            for l,r,val in queries[:k]:
                ops[l]-=val
                ops[r+1]+=val
            offset=0
            for i in range(n):
                offset+=ops[i]
                a[i]+=offset
            return all(x<=0 for x in a)

        ans=bisect_left(range(len(queries)+1),True,key=check)
        if check(ans):
            return ans
        return -1",1454820365
Anupam Ghosh,anupam_ghosh,199,3616,cpp,"bool omk(vector<int> arr,int n,int idx,int dir){
    while(idx>=0 && idx<n){
        if(arr[idx]>0){
            arr[idx]--;
            dir*=-1;
            
        }
        idx+=dir;
    }
    for(auto &i:arr){
        if(i!=0){
            return 0;
        }
    }
    return 1;
}
class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int res=0,n=nums.size();
        for(int i=0;i<n;i++){
            if(nums[i]>0)continue ;
            res+=omk(nums,n,i,1);
            res+=omk(nums,n,i,-1);
        }
        return res;
    }
};",1454807659
Anupam Ghosh,anupam_ghosh,199,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n=nums.size();
        vector<int> arr(n+1,0);
        for(auto &i:queries){
            arr[i[0]]++;
            arr[i[1]+1]--;
        }
        int sum=0;
        for(int i=0;i<n;i++){
            sum+=arr[i];
            if(nums[i]>sum){
                return 0;
            }
        }
        return 1;
    }
};",1454809367
Anupam Ghosh,anupam_ghosh,199,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int l=0,h=queries.size(),m,n=nums.size();
        while(l<=h){
            m=(l+h)/2;
            vector<long long> arr(n+1,0);
            for(int i=0;i<m;i++){
                arr[queries[i][0]]+=queries[i][2];
                arr[queries[i][1]+1]-=queries[i][2];
            }
            long long sum=0;
            bool flag=1;
            for(int i=0;i<n;i++){
                sum+=arr[i];
                if(nums[i]>sum){
                    flag= 0;
                    break;
                }
            }
            if(flag){
                h=m-1;
            }
            else{
                l=m+1;
            }
        }
        if(l>queries.size()){
            return -1;
        }
        return l;
    }
};",1454820443
Hruday Pabbisetty,hrudaypabbisetty,200,3616,cpp,"class Solution {
    // Simulates the process from a starting position and direction
    bool simulate(vector<int>& nums, int start, bool goRight) {
        vector<int> temp = nums;  // Make a copy to not modify original
        int curr = start;
        
        while (curr >= 0 && curr < nums.size()) {
            if (temp[curr] == 0) {
                // Move in current direction
                curr = goRight ? curr + 1 : curr - 1;
            } else {
                // Decrement, reverse direction, and take a step
                temp[curr]--;
                goRight = !goRight;
                curr = goRight ? curr + 1 : curr - 1;
            }
        }
        
        // Check if all elements are zero
        for (int num : temp) {
            if (num != 0) return false;
        }
        return true;
    }
    
public:
    int countValidSelections(vector<int>& nums) {
        int n = nums.size();
        int validCount = 0;
        
        // Try all possible starting positions
        for (int i = 0; i < n; i++) {
            if (nums[i] != 0) continue;  // Must start at a zero
            
            // Try going left
            if (simulate(nums, i, false)) {
                validCount++;
            }
            
            // Try going right
            if (simulate(nums, i, true)) {
                validCount++;
            }
        }
        
        return validCount;
    }
};",1454820471
Hruday Pabbisetty,hrudaypabbisetty,200,3639,cpp,"class Solution {
public:
    int f(vector<int>& nums, vector<vector<int>>& queries, int idx)
    {
        int n = nums.size();
        vector<int>dp(n+1,0);
        for(int i=0;i<=idx;i++)
        {
            auto query = queries[i];
            int l = query[0];
            int r = query[1];
            int val = 1;
            dp[l]-=val;
            dp[r+1]+=val;
        }
        
        for(int i=1;i<n;i++)
        {
            dp[i]+=dp[i-1];
        }
        for(int i=0;i<n;i++)
        {
            if(dp[i] + nums[i] > 0)
            {
                return false;
            }
        }
        return true;
    }
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        if(f(nums, queries, queries.size()-1))
        {
            return true;
        }
        return false;
    }
};",1454816296
Hruday Pabbisetty,hrudaypabbisetty,200,3643,cpp,"class Solution {
public:
    int f(vector<int>& nums, vector<vector<int>>& queries, int idx)
    {
        int n = nums.size();
        vector<int>dp(n+1,0);
        for(int i=0;i<=idx;i++)
        {
            auto query = queries[i];
            int l = query[0];
            int r = query[1];
            int val = query[2];
            dp[l]-=val;
            dp[r+1]+=val;
        }
        
        for(int i=1;i<n;i++)
        {
            dp[i]+=dp[i-1];
        }
        for(int i=0;i<n;i++)
        {
            if(dp[i] + nums[i] > 0)
            {
                return false;
            }
        }
        return true;
    }
    bool allZero(vector<int>&v)
    {
        for(auto val:v)
        {
            if(val)
            {
                return false;
            }
        }
        return true;
    }
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        int ans = -2;
        int l = 0, r = queries.size()-1;
        if(allZero(nums))
        {
            return 0;
        }
        while(l<=r)
        {
            int mid = (l+r)/2;
            if(f(nums, queries, mid))
            {
                ans = mid;
                r = mid - 1;
            }
            else
            {
                l =  mid + 1;
            }
        }
        return ans+1;
    }
};",1454813081
Puneet Sheokand,Puneet7373,202,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& v) {
        int n = v.size();
        int count = 0;
        auto ok = [&](int start, int d) -> bool {
            vector<int> temp = v; 
            int curr = start;
            int dir = d;

            while (curr >= 0 && curr < n) {
                if (temp[curr] == 0) {
                    curr += dir;
                } else if (temp[curr] > 0) {
                    temp[curr]--; 
                    dir = -dir; 
                    curr += dir;
                }
            }
            return all_of(temp.begin(), temp.end(), [](int x) { return x == 0; });
        };

        for (int i = 0; i < n; i++) {
            if (v[i] == 0) {
                if (ok(i, 1)) count++; 
                if (ok(i, -1)) count++; 
            }
        }

        return count;
    }
};",1454820677
Puneet Sheokand,Puneet7373,202,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& v, vector<vector<int>>& q) {
        int n = v.size();
        vector<int> pref(n+1);
        for(auto x:q){
            pref[x[0]]++;
            pref[x[1]+1]--;
        }
        for(int i=1;i<=n;i++){
            pref[i] += pref[i-1];
        }
        for(int i=0;i<n;i++){
            if(v[i] > pref[i]){
                return 0;
            }
        }
        return 1;
    }
};",1454808369
Puneet Sheokand,Puneet7373,202,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& v, vector<vector<int>>& q) {
        int n = v.size();
        int l = 0, r= q.size()-1;
        int ans = -1;
        int z = count(v.begin(),v.end(),0);
        if(z == n){
            return 0;
        }
        while(l <= r){
            int mid = l + (r-l)/2;
            vector<long long int> pref(n+1);
            for(int i=0;i<=mid;i++){
                pref[q[i][0]]+=q[i][2];
                pref[q[i][1]+1]-=q[i][2];
            }
            for(int i=1;i<=n;i++){
                pref[i] += pref[i-1];
            }
            bool ok  = 1;
            for(int i=0;i<n;i++){
                if(v[i] > pref[i]){
                    ok = 0;
                    break;
                }
            }
            if(ok){
                r = mid-1;
                ans = mid+1;
            }else{
                l = mid+1;
            }
        }
        return ans;
    }
};",1454815519
Yi Yao,yaoyi92,203,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int sum = 0;
        int presum = 0;
        int ret = 0;
        for (int num: nums) sum += num;
        for (int num: nums) {
            presum += num;
            if (num == 0) {
                if (presum * 2 == sum) ret += 2;
                if (presum * 2 == sum + 1) ret += 1;
                if (presum * 2 == sum - 1) ret += 1;  
            }

        }
        return ret;
        
    }
};",1454810732
Yi Yao,yaoyi92,203,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        vector<int> diff(n+1, 0);
        for (vector<int>& query: queries) {
            int l = query[0];
            int r = query[1];
            diff[l] -= 1;
            diff[r+1] += 1;
        }
        int diff_now = 0;
        for (int i = 0; i < n; i++) {
            diff_now += diff[i];
            nums[i] += diff_now;
            if (nums[i] > 0) return false;
            //cout << nums[i] << "" "";
        }
        //cout << endl;
        return true;
        
    }
};",1454817629
Yi Yao,yaoyi92,203,3643,cpp,"class Solution {
    bool isZeroArray(vector<int> nums, vector<vector<int>>& queries, int k) {
        int n = nums.size();
        vector<int> diff(n+1, 0);
        for (int i = 0; i < k; i++) {
            vector<int>& query = queries[i];
            int l = query[0];
            int r = query[1];
            int val = query[2];
            diff[l] -= val;
            diff[r+1] += val;
        }
        int diff_now = 0;
        for (int i = 0; i < n; i++) {
            diff_now += diff[i];
            nums[i] += diff_now;
            if (nums[i] > 0) return false;
        }
        return true;
        
    }
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n_q = queries.size();
        if (!isZeroArray(nums, queries, n_q)) return -1;
        int low = 0;
        int high = n_q;
        while (low < high) {
            int mid = (high - low) / 2 + low;
            if (isZeroArray(nums, queries, mid)) {
                high = mid;
            } else {
                low = mid + 1;
            }
        }
        //cout << low << "" "" << high << endl;
        return low;
        
    }
};",1454827739
Conrad_123,Conrad_123,204,3616,cpp,"class Solution {
public:
    int countValidSelections(std::vector<int>& nums) {

        int result = 0;
        int left_sum = 0;
        int right_sum = std::accumulate(nums.begin(), nums.end(), 0);
        
        for(int i = 0; i < nums.size(); i++){
            
            left_sum += nums[i];
            right_sum -= nums[i];

            if(nums[i] == 0 && left_sum == right_sum){
                result += 2;
            }else if(nums[i] == 0 && std::abs(left_sum - right_sum) == 1){
                result++;
            }
            
        }

        return result;
    }
};",1454808517
Conrad_123,Conrad_123,204,3639,cpp,"class Solution {
public:
    bool isZeroArray(std::vector<int>& nums, std::vector<std::vector<int>>& queries) {

        std::vector<int> delta(nums.size()+1, 0);

        for(int i = 0; i < queries.size(); i++){
            delta[queries[i][0]]++;
            delta[queries[i][1]+1]--;
        }

        int current = 0;
        for(int i = 0; i < nums.size(); i++){

            current += delta[i];
            if(nums[i] > current) return false;
        }

        return true;
    }
};",1454812600
Conrad_123,Conrad_123,204,3643,cpp,"class Solution {
public:

    bool Is_Possible(std::vector<int>& nums, std::vector<std::vector<int>>& queries, int k){
        std::vector<int> delta(nums.size()+1, 0);

        for(int i = 0; i < queries.size() && i < k; i++){
            delta[queries[i][0]] += queries[i][2];
            delta[queries[i][1]+1] -= queries[i][2];
        }

        int current = 0;
        for(int i = 0; i < nums.size(); i++){

            current += delta[i];
            if(nums[i] > current) return false;
        }

        return true;
    }

    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {

        long long sum = std::accumulate(nums.begin(), nums.end(), 0LL);
        if(sum == 0) return 0;
        
        int low = 1;
        int high = queries.size()+1;
    
        while(low < high){

            int mid = (low + high)/2;

            if(Is_Possible(nums, queries, mid)){
                high = mid;
            }else{
                low = mid+1;
            }
        }


        return (high > queries.size()) ? -1 : high;
    }
};",1454820772
jqdai0815,jqdai0815,205,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        def sim(dx, start):
            n = nums.copy()
            curr = start
            dir = dx
            while curr >= 0 and curr < len(n):
                if n[curr] == 0:
                    curr += dir
                elif n[curr] > 0:
                    n[curr] -= 1
                    dir = -dir
                    curr += dir
            return all(y == 0 for y in n)
        def sim2(start):
            if nums[start] != 0:
                return False
            return int(sim(1, start)) + int(sim(-1, start))
        return sum(sim2(i) for i in range(len(nums)))",1454809125
jqdai0815,jqdai0815,205,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        maxapply = [0] * (len(nums) + 1)
        for s, e in queries:
            maxapply[s] += 1
            maxapply[e + 1] -= 1
        maxapply = list(accumulate(maxapply))
        for a, b in zip(nums, maxapply):
            if a > b:
                return False
        return True",1454814309
jqdai0815,jqdai0815,205,3643,python3,"class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        def can(k):
            maxapply = [0] * (len(nums) + 1)
            for ix in range(k):
                s, e, d = queries[ix]
                maxapply[s] += d
                maxapply[e + 1] -= d
            maxapply = list(accumulate(maxapply))
            for a, b in zip(nums, maxapply):
                if a > b:
                    return False
            return True
        lo = 0
        hi = len(queries)
        ans = -1
        while lo <= hi:
            mid = (lo + hi) // 2
            if can(mid):
                ans = mid
                hi = mid - 1
            else:
                lo = mid + 1
        return ans",1454820844
imglad,imglad,206,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int res = 0, n = nums.size();
        for (int i = 0; i < n; i++) {
            if (nums[i]) continue;
            if (helper(nums, i, 1)) res++;
            if (helper(nums, i, -1)) res++;
        }
        return res;
    }

    bool helper(vector<int> nums, int idx, int dir) {
        int n = nums.size();
        while (idx >= 0 && idx < n) {
            if (nums[idx] > 0) {
                nums[idx]--;
                dir = dir == 1 ? -1 : 1;
            }
            idx += dir;
        }
        for (auto x : nums) {
            if (x) return false;
        }
        return true;
    }
};",1454808901
imglad,imglad,206,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        vector<int> b(n + 1);
        for (auto q : queries) {
            int l = q[0], r = q[1];
            b[l]++;
            b[r + 1]--;
        }
        int cur = 0;
        for (int i = 0; i < n; i++) {
            cur += b[i];
            if (cur < nums[i]) return false; 
        }
        return true;
    }
};",1454821398
imglad,imglad,206,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int l = 0, r = queries.size();
        while (l < r) {
            int mid = l + r >> 1;
            if (check(nums, mid, queries)) r = mid;
            else l = mid + 1;
        } 
        return check(nums, l, queries) ? l : -1;
    }

    bool check(vector<int> nums, int mid, vector<vector<int>>& queries) {
        int n = nums.size();
        vector<int> b(n + 1);
        for (int i = 0; i < mid; i++) {
            int l = queries[i][0], r = queries[i][1], val = queries[i][2];
            b[l] += val;
            b[r + 1] -= val;
        }
        int cur = 0;
        for (int i = 0; i < n; i++) {
            cur += b[i];
            if (cur < nums[i]) return false;
        }
        return true;
    }
};",1454827963
LeetCoding_Pro,LeetCoding_Pro,207,3616,java,"class Solution
{
    public int countValidSelections(int[] as)
    {
        int count = 0;
        for (int i = 0; i < as.length; i++)
        {
            if (as[i] == 0)
            {
                if (helper(as.clone(), i, -1))
                {
                    count++;
                }
                if (helper(as.clone(), i, 1))
                {
                    count++;
                }
            }
        }
        return count;
    }
    
    private boolean helper(int[] as, int idx, int dir)
    {
        while (idx >= 0 && idx < as.length)
        {
            if (as[idx] == 0)
            {
                idx += dir;
            }
            else
            {
                as[idx]--;
                dir *= -1;
                idx += dir;
            }
        }
        for (int a : as)
        {
            if (a != 0)
            {
                return false;
            }
        }
        return true;
    }
}",1454810974
LeetCoding_Pro,LeetCoding_Pro,207,3639,java,"class Solution
{
    public boolean isZeroArray(int[] as, int[][] qs)
    {
        int[] table = new int[as.length + 1];
        for (int[] q : qs)
        {
            int l = q[0];
            int r = q[1];
            table[l]++;
            table[r + 1]--;
        }
        long curr = 0L;
        for (int i = 0; i < as.length; i++)
        {
            curr += table[i];
            if (curr < as[i])
            {
                return false;
            }
        }
        return true;
    }
}",1454818571
LeetCoding_Pro,LeetCoding_Pro,207,3643,java,"class Solution
{
    public int minZeroArray(int[] as, int[][] qs)
    {
        if (!isZeroArray(as, qs, qs.length))
        {
            return -1;
        }
        int left = 0;
        int right = qs.length;
        while (left <= right)
        {
            int mid = left + (right - left) / 2;
            if (isZeroArray(as, qs, mid))
            {
                right = mid - 1;
            }
            else
            {
                left = mid + 1;
            }
        }
        return left;
    }
    
    public boolean isZeroArray(int[] as, int[][] qs, int leng)
    {
        long[] table = new long[as.length + 1];
        for (int i = 0; i < leng; i++)
        {
            int[] q = qs[i];
            int l = q[0];
            int r = q[1];
            int v = q[2];
            table[l] += v;
            table[r + 1] -= v;
        }
        long curr = 0L;
        for (int i = 0; i < as.length; i++)
        {
            curr += table[i];
            if (curr < as[i])
            {
                return false;
            }
        }
        return true;
    }
}",1454828073
Andrew H. Pometta,apometta,208,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        rsum = sum(nums)
        valids = 0
        lsum = 0

        for i in range(len(nums)):
            rsum -= nums[i]
            if nums[i] == 0 and abs(rsum - lsum) <= 1:
                valids += 2 - abs(rsum - lsum)
            lsum += nums[i]

        return valids",1454807641
Andrew H. Pometta,apometta,208,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        queries.sort()
        stops = []
        q = 0

        for i in range(len(nums)):
            while len(stops) > 0 and stops[0] < i:
                heappop(stops)
            while q < len(queries) and queries[q][0] == i:
                heappush(stops, queries[q][1])
                q += 1
            if nums[i] > len(stops):
                return False

        return True",1454811436
Andrew H. Pometta,apometta,208,3643,python3,"class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        n, QUERIES = len(nums), len(queries)
        starts, ends = [0] * (n + 1), [0] * (n + 1)
        q = curr_change = 0

        for i in range(n):
            curr_change += starts[i]
            
            while q < QUERIES and curr_change < nums[i]:
                l, r, v = queries[q]
                q += 1
                starts[l] += v
                ends[r] += v
                if l <= i and i <= r: curr_change += v
                    
            if curr_change < nums[i]: return -1
            curr_change -= ends[i]

        return q",1454828172
haohao,cchao,209,3616,python3,"class Solution:
    def countValidSelections(self, a: List[int]) -> int:
        s = sum(a)
        t = 0
        ans = 0
        for x in a:
            if x == 0:
                tt = s - t
                if t == tt:
                    ans += 2
                elif abs(t - tt) == 1:
                    ans += 1
            t += x
        return ans",1454809448
haohao,cchao,209,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& a, vector<vector<int>>& queries) {
        const int n = a.size();
        vector<int> s(n + 1);
        for (auto& q : queries) {
            s[q[0]]++;
            s[q[1]+1]--;
        }
        partial_sum(s.begin(), s.end(), s.begin());
        for (int i = 0; i < n; ++i) {
            if (a[i] > s[i]) return false;
        }
        return true;
    }
};",1454815620
haohao,cchao,209,3643,cpp,"class Solution {
    bool solve(const vector<int> &a, vector<vector<int>>& queries, int k) {
        const int n = a.size();
        vector<int64_t> s(n + 1);
        for (int i = 0; i < k; ++i) {
            auto& q = queries[i];
            s[q[0]] += q[2];
            s[q[1]+1] -= q[2];
        }
        partial_sum(s.begin(), s.end(), s.begin());
        for (int i = 0; i < n; ++i) {
            if (a[i] > s[i]) return false;
        }
        return true;
    }
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int l = 0, r = queries.size(), ans = -1;
        while (l <= r) {
            const int m = (l + r) / 2;
            if (solve(nums, queries, m)) {
                r = m - 1;
                ans = m;
            } else {
                l = m + 1;
            }
        }
        return ans;
    }
};",1454821303
EPinonsense,liuxiaolinfk,210,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int ans = 0;
        for (int i = 0; i < nums.size(); i++){
            if (nums[i] == 0){
                if (check(nums, i, true)) ans++;
                if (check(nums, i, false)) ans++;
            }
        }

        return ans;
    }

    bool  check(vector<int> nums, int curr, bool left){
        while(curr >= 0 and curr < nums.size()){
            if(nums[curr] == 0){
            if (left) curr--;
            else curr++;
            } else if (nums[curr] > 0){
            nums[curr]--;
            left = !left;
            if (left) curr--;
            else curr++;
            }
        }

        for (auto num : nums) {
            if(num != 0) return false;
        }

        return true;
    }
};",1454809974
EPinonsense,liuxiaolinfk,210,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        vector<int> diff(nums.size(), 0);

        for (auto q : queries){
            diff[q[0]]++;
            if (q[1] + 1 < nums.size()) diff[q[1]+1]--;
        }

        vector<int> prefix(diff.size(), 0);
        prefix[0] = diff[0];
        for (int i = 1; i < diff.size(); i++) prefix[i] = prefix[i-1] + diff[i];

        for(int i = 0; i < diff.size(); i++){
            if(nums[i] > prefix[i]) return false;
        }

        return true;
    }
};",1454818866
EPinonsense,liuxiaolinfk,210,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int left = 0, right = queries.size() + 1;

        while(left < right){
            int mid = (left + right)/2;
            if (check(nums, queries, mid)) right = mid;
            else left = mid + 1;
        }
        if (left == queries.size() + 1) return -1;
        else return left;
    }

    bool check(const vector<int>& nums, const vector<vector<int>>& q, int k){
        vector<int> diff(nums.size(), 0);

        for (int i = 0; i < k; i++){
            diff[q[i][0]] += q[i][2];
            if (q[i][1] + 1 < nums.size()) diff[q[i][1]+1] -= q[i][2];
        }

        vector<int> prefix(diff.size(), 0);
        prefix[0] = diff[0];
        for (int i = 1; i < diff.size(); i++) prefix[i] = prefix[i-1] + diff[i];

        for(int i = 0; i < diff.size(); i++){
            if(nums[i] > prefix[i]) return false;
        }

        return true;
    }
};",1454828403
Shivam Shrivastava,shiv_314,211,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int ans = 0;
        int n = (int)nums.size();
        for(int i=0;i<n;i++){
            int lsum=0;
            int rsum=0;
            if(nums[i]==0){
                for(int j=0;j<i;j++)lsum+=nums[j];
                for(int j=i+1;j<n;j++)rsum+=nums[j];
                if(lsum==rsum)ans+=2;
                if(abs(lsum-rsum)==1)ans+=1;
            }
            
        }
        return ans;
    }
};",1454810892
Shivam Shrivastava,shiv_314,211,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = (int)nums.size();
        vector<int>ans(n);

        int m = (int)queries.size();
        for(int i=0;i<m;i++){
            ans[queries[i][0]]++;
            if(queries[i][1]+1<n){
                ans[queries[i][1]+1]--;
            }
        }
        for(int i=1;i<n;i++)ans[i]+=ans[i-1];
        bool yes=1;
        // for(auto it:ans){
        //     cout<<it<<"" "";
        // }
        // cout<<endl;
        for(int i=0;i<n;i++){
            if(nums[i] > ans[i])yes=0;
        }
        return yes;
    }
};",1454822598
Shivam Shrivastava,shiv_314,211,3643,cpp,"class Solution {
public:
    bool chk(int x,vector<int>& nums, vector<vector<int>>& queries){
        int n = (int)nums.size();
        vector<int>ans(n);

        
        for(int i=0;i<x;i++){
            ans[queries[i][0]]+=queries[i][2];
            if(queries[i][1]+1<n){
                ans[queries[i][1]+1]-=queries[i][2];
            }
        }
        for(int i=1;i<n;i++)ans[i]+=ans[i-1];
        bool yes=1;

        for(int i=0;i<n;i++){
            if(nums[i] > ans[i])yes=0;
        }
        return yes;
    }
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int ans = -1;
        int m = (int)queries.size();
        int lo=0;int hi=m;
        while(lo<=hi){
            int mid = (lo+hi)/2;
            if(chk(mid,nums,queries)){
                ans = mid;
                hi=mid-1;
            }else{
                lo=mid+1;
            }
        }
        return ans;
    }
};",1454828470
Agnibha Chakraborty,zanj0,212,3616,cpp,"/*
	JAI JAGANNATH!
*/
//@Author : zanj0

#include<bits/stdc++.h>
using namespace std;

#define ff              first
#define ss              second
#define pb              push_back
#define MOD             1000000007
#define inf             1e18

typedef long long int lli;


class Solution {
public:
	bool Ok(vector<int> nums, int idx, int dir) {
		int n = nums.size();
        // cout << idx << "" -- "" << endl;
		while (idx >= 0 && idx < n) {
            // cout << idx << "" "" << dir << "" "" << nums[idx] << endl;
			if (nums[idx] == 0) {
				idx += dir;
                continue;
			} else {
				nums[idx]--;
				dir = dir == 1 ? -1 : 1;
                idx += dir;
			}
            // for(auto& it : nums){
            //     cout << it << "" "";
            // }
            // cout << endl;
		}
		for (auto& it : nums) {
			if (it) return false;
		}
        // cout << idx << "" "" << dir << endl;
		return true;
	}
	int countValidSelections(vector<int>& nums) {
		int ret = 0;
        // cout << Ok(nums, 4, 1) << endl;
		for (int i = 0; i < nums.size(); i++) {
			// ret += Ok(nums, i, 1) + Ok(nums, i, -1);
            if(nums[i]) continue;
            if(Ok(nums, i, 1)){
                ret++;
                // cout << i << "" - "" << 1 << endl;
            }
            
            if(Ok(nums, i, -1)){
                ret++;
                // cout << i << "" - "" << -1 << endl;
            }
		}
		return ret;
	}
};


#ifdef LOCAL
int main() {
	freopen(""output.txt"", ""w"", stdout);
	cout << ""Compiled!"" << endl;
}
#endif",1454811383
Agnibha Chakraborty,zanj0,212,3639,cpp,"/*
	JAI JAGANNATH!
*/
//@Author : zanj0

#include<bits/stdc++.h>
using namespace std;

#define ff              first
#define ss              second
#define pb              push_back
#define MOD             1000000007
#define inf             1e18

typedef long long int lli;


class Solution {
public:
	bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
		int n = nums.size();
		vector<int> cnt(n);
		for (auto& it : queries) {
			cnt[it[0]]++;
			if (it[1] + 1 < n) cnt[it[1] + 1]--;
		}
		for (int i = 1; i < n; i++) {
			cnt[i] += cnt[i - 1];
		}
		for (int i = 0; i < n; i++) {
			if (nums[i] > cnt[i]) return false;
		}
		return true;
	}
};

#ifdef LOCAL
int main() {
	freopen(""output.txt"", ""w"", stdout);
	cout << ""Compiled!"" << endl;
}
#endif",1454813793
Agnibha Chakraborty,zanj0,212,3643,cpp,"/*
	JAI JAGANNATH!
*/
//@Author : zanj0

#include<bits/stdc++.h>
using namespace std;

#define ff              first
#define ss              second
#define pb              push_back
#define MOD             1000000007
#define inf             1e18

typedef long long int lli;


class Solution {
public:
	int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
		lli n = nums.size();
		lli ret = -1;
		lli q = queries.size();
		lli low = 0, high = q-1;
        bool all_zero = true;
    for(auto& it : nums){
        if(it) all_zero = false;
    }
        if(all_zero) return 0;
		while (low <= high) {
			lli mid = low + (high - low) / 2;
			vector<lli> cnt(n);
			for (lli i = 0; i <= mid; i++) {
				cnt[queries[i][0]] += queries[i].back();
				if (queries[i][1] + 1 < n)cnt[queries[i][1] + 1] -= queries[i].back();
			}
			bool ok = true;

			for (lli i = 1; i < n; i++) cnt[i] += cnt [i - 1];
            
			for (lli i = 0; i < n; i++) {
                // cout << i << "" "" << cnt[i] << "" "" << nums[i] << endl;
				if (cnt[i] < nums[i]) {
					ok = false;
					break;
				}
			}


			if (ok) {
				ret = mid + 1;
				high = mid - 1;
			} else low = mid + 1;

		}
		return ret;
	}
};

#ifdef LOCAL
int main() {
	freopen(""output.txt"", ""w"", stdout);
	cout << ""Compiled!"" << endl;
}
#endif",1454821421
Mayank Savaliya,MayankSavaliya,213,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int n=nums.size();
        vector<int> pre(n,0);
        for(int i=0;i<n;i++){
            pre[i]+=nums[i];
            if(i) pre[i]+=pre[i-1];
        }
        int ans=0,total=pre[n-1];
        for(int i=0;i<n;i++){
            if(nums[i]==0 && pre[i]==total-pre[i]) ans+=2;
            if(nums[i]==0 && abs(pre[i]-(total-pre[i]))==1) ans++;
        }
        return ans;
    }
};",1454807950
Mayank Savaliya,MayankSavaliya,213,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n=nums.size();
        vector<int> arr(n+2,0);
        for(auto it:queries){
            int st=it[0],end=it[1];
            arr[st]++,arr[end+1]--;
        }
        for(int i=1;i<n;i++){
            arr[i]+=arr[i-1];
        }
        for(int i=0;i<n;i++) if(arr[i]<nums[i]) return false;
        return true;
    }
};",1454810950
Mayank Savaliya,MayankSavaliya,213,3643,cpp,"class Solution {
public:
    static bool check(vector<int> &nums,int mid,vector<vector<int>>& queries){
            int n=nums.size();
            vector<int> arr(n+2,0);
            for(int i=0;i<mid;i++){
                int st=queries[i][0],end=queries[i][1],val=queries[i][2];
                arr[st]+=val,arr[end+1]-=val;
            }
            for(int i=1;i<n;i++){
                arr[i]+=arr[i-1];
            }
            for(int i=0;i<n;i++) if(arr[i]<nums[i]) return false;
            return true;
    }
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int sz=queries.size(),n=nums.size();
        bool f=1;
        for(int i=0;i<n;i++) if(nums[i]!=0) f=0;
        if(f) return 0;
        int lo=1,hi=sz;
        while(lo<hi){
            int mid=(lo+hi)/2;
            if(check(nums,mid,queries)) hi=mid;
            else lo=mid+1;
        }
        if(check(nums,lo,queries)) return lo;
        else return -1;
    }
};",1454821534
Only My Railgun,Quar,214,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        
        def validate(cur: int, delta: int) -> bool:
            xs = nums[:]
            while True:
                if cur < 0 or cur >= len(xs):
                    break                
                if xs[cur] == 0:                    
                    cur += delta
                elif xs[cur] > 0:
                    xs[cur] -= 1
                    delta = -delta
                    cur += delta
            return all(x == 0 for x in xs)
        
        
        ret = 0
        for i, x in enumerate(nums):
            if x == 0:
                ret += int(validate(i, 1)) + int(validate(i, -1))
        
        return ret
",1454813517
Only My Railgun,Quar,214,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        
        cap = [0] * (len(nums) + 1)
        
        for l, r in queries:
            cap[l] += 1
            cap[r + 1] -= 1
        
        cap = list(accumulate(cap))
        
        return all(x <= c for x, c in zip(nums, cap))
",1454817060
Only My Railgun,Quar,214,3643,python3,"class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        
        n = len(nums)
        
        # @cache
        def validate(k):
            cap = [0] * (n + 1)
            for l, r, v in queries[:k]:
                cap[l] += v
                cap[r + 1] -= v
            cap = list(accumulate(cap))
            # print(nums)
            # print(cap)
            ret = all(x <= c for x, c in zip(nums, cap))
            # print(f'validate({k}) = {ret}')
            return ret
        
        l, r = 0, len(queries)
        
        while l < r:
            c = (l + r) // 2
            if validate(c):
                r = c
            else:
                l = c + 1
        
        return r if validate(r) else -1
",1454828632
Yang,luyangg,215,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        x = nums.copy()
        n = len(x)
        ans = 0
        dirs = [-1, 1]
        for i in range(n):
            if x[i] == 0:
                for d in dirs:
                    nums = x.copy()
                    curr = i + d
                    while curr >= 0 and curr < n:
                        if nums[curr] == 0:
                            curr += d
                        elif nums[curr] > 0:
                            nums[curr] -= 1
                            d = -d
                            curr += d
                    ans += 1 if sum(nums) == 0 else 0
        return ans",1454810548
Yang,luyangg,215,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        n = len(nums)
        pref = [0]*n
        for l, r in queries:
            pref[l] += 1
            if r+1 < n:
                pref[r+1] -= 1
        curr = 0
        for i in range(n):
            curr += pref[i]
            if nums[i] > curr:
                return False
        return True",1454817069
Yang,luyangg,215,3643,python3,"class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        def check(x):
            pref = [0]*n
            for l, r, val in queries[:x]:
                pref[l] += val
                if r+1 < n:
                    pref[r+1] -= val
            curr = 0
            for i in range(n):
                curr += pref[i]
                if nums[i] > curr:
                    return False
            return True            
        n = len(nums)
        m = len(queries)
        l, r = 0, m
        while l < r:
            mid = (l+r)//2
            if check(mid):
                r = mid
            else:
                l = mid+1
        if check(l):
            return l
        else:
            return -1",1454828723
Lin,alexlin87,219,3616,java,"import java.util.*;

class Solution {
    public int countValidSelections(int[] a) {
        int ans = 0;
        int s = 0;
        for(int x : a) {
            s += x;
        }
        for(int i = 0; i < a.length; i++) {
            if(a[i] == 0) {
                int[] b = Arrays.copyOf(a, a.length);
                if(check(s, b, i, 1)) {
                    ans++;
                }
                b = Arrays.copyOf(a, a.length);
                if(check(s, b, i, -1)) {
                    ans++;
                }
            }
        }
        return ans;
    }
    private boolean check(int s, int[] b, int k, int d) {
        while(s > 0) {
            if(b[k] == 0) {
                k += d;
            }
            else {
                b[k]--;
                s--;
                d *= -1;
                k += d;
            }
            if(k < 0 || k >= b.length) {
                break;
            }
        }
        return s == 0;
    }
}",1454814862
Lin,alexlin87,219,3639,java,"import java.util.*;

class Solution {
    public boolean isZeroArray(int[] a, int[][] queries) {
        int n = a.length;
        int[] f = new int[n + 2];
        for(int[] q : queries) {
            f[q[0]]++;
            f[q[1] + 1]--;
        }
        for(int i = 1; i < f.length; i++) {
            f[i] += f[i - 1];
        }
        boolean ans = true;
        for(int i = 0; i < n; i++) {
            ans &= f[i] >= a[i];
        }
        return ans;
    }
}",1454821579
Lin,alexlin87,219,3643,java,"import java.util.*;

class Solution {
    public int minZeroArray(int[] a, int[][] queries) {
        int l = 0, r = queries.length;
        while(l < r - 1) {
            int m = (l + r) / 2;
            if(check(a, queries, m)) {
                r = m;
            }
            else {
                l = m + 1;
            }
        }
        if(check(a, queries, l)) {
            return l;
        } 
        else if(check(a, queries, r)) {
            return r;
        }
        return -1;
    }
    public boolean check(int[] a, int[][] queries, int k) {
        int n = a.length;
        int[] f = new int[n + 2];
        for(int i = 0; i < k; i++) {
            f[queries[i][0]] += queries[i][2];
            f[queries[i][1] + 1] -= queries[i][2];
        }
        for(int i = 1; i < f.length; i++) {
            f[i] += f[i - 1];
        }
        boolean ans = true;
        for(int i = 0; i < n; i++) {
            ans &= f[i] >= a[i];
        }
        return ans;
    }
}",1454828842
Mukul Jain,MukulJain98,220,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int n = nums.size(), res = 0;
        for (int i = 0; i < n; ++i) {
            if (nums[i] == 0) {
                for (int d : {-1, 1}) {
                    vector<int> temp = nums;
                    int curr = i;
                    int dir = d;

                    while (curr >= 0 && curr < n) {
                        if (temp[curr] == 0) {
                            curr += dir;
                        } else {
                            temp[curr]--;
                            dir = -dir;
                            curr += dir;
                        }
                    }

                    if (all_of(temp.begin(), temp.end(), [](int x) { return x == 0; })) {
                        res++;
                    }
                }
            }
        }

        return res;
    }
};
",1454807895
Mukul Jain,MukulJain98,220,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        vector<int> diff(n + 1, 0);

        for (const auto& q : queries) {
            int l = q[0], r = q[1];
            diff[l] -= 1;
            if (r + 1 < n) {
                diff[r + 1] += 1;
            }
        }

        int curr = 0;
        for (int i = 0; i < n; ++i) {
            curr += diff[i];
            nums[i] += curr;
            if (nums[i] > 0) return false;
        }

        return true;
    }
};
",1454814232
Mukul Jain,MukulJain98,220,3643,cpp,"class Solution {
public:
    bool verify(vector<int> nums, vector<int>& diff) {
        int curr = 0;
        for (int i = 0; i < nums.size(); ++i) {
            curr += diff[i];
            nums[i] += curr;
            if (nums[i] > 0) return false;
        }
        return true;
    }
    
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        int low = 0, high = queries.size();
        int answer = -1;

        while (low <= high) {
            int mid = low + (high - low) / 2;
            vector<int> diff(n + 1, 0);
            for (int i = 0; i < mid; ++i) {
                int l = queries[i][0], r = queries[i][1], val = queries[i][2];
                diff[l] -= val;
                if (r + 1 < n) {
                    diff[r + 1] += val;
                }
            }

            if (verify(nums, diff)) {
                answer = mid;
                high = mid - 1;
            } else {
                low = mid + 1;
            }
        }

        return answer;
    }
};
",1454828883
Haksell,Haksell,221,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        res = 0
        for i, n in enumerate(nums):
            if n == 0:
                a=sum(nums[:i])
                b=sum(nums[i+1:])
                if a==b: res += 2
                elif abs(a-b)==1: res += 1
        return res",1454806861
Haksell,Haksell,221,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        e=[0] * (len(nums) + 1)
        for l,r in queries:
            e[l] += 1
            e[r + 1] -= 1
        a = list(accumulate(e))
        # print(a, nums)
        return all(ai >= ni for ai, ni in zip(a, nums))",1454809627
Haksell,Haksell,221,3643,python3,"class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        def solve(nums, queries):
            e=[0] * (len(nums) + 1)
            for l,r,v in queries:
                e[l] += v
                e[r + 1] -= v
            a = list(accumulate(e))
            # print(queries, a)
            return all(ai >= ni for ai, ni in zip(a, nums))

        if all(n==0 for n in nums): return 0
        if not solve(nums, queries): return -1
        lo=0
        hi=len(queries)
        while lo<hi:
            mi=lo+hi>>1
            # print(lo,hi,mi, solve(nums, queries[:mi]))
            if solve(nums, queries[:mi]):
                hi=mi
            else:
                lo=mi+1
        return lo",1454829084
Harttle,harttle,222,3616,javascript,"/**
 * @param {number[]} nums
 * @return {number}
 */
var countValidSelections = function(nums) {
    const N = nums.length
    let ans = 0
    for (let i = 0; i < N; i++) {
        if (nums[i] !== 0) continue
        if (check(i, 1, [...nums])) ans++
        if (check(i, -1, [...nums])) ans++
    }
    return ans
    function check(i, dir, nums) {
        while (i >= 0 && i < N) {
            if (nums[i] === 0) i += dir
            else {
                --nums[i]
                dir = -dir
                i += dir
            }
        }
        return !nums.some(x => x !== 0)
    }
};",1454808989
Harttle,harttle,222,3639,javascript,"/**
 * @param {number[]} nums
 * @param {number[][]} queries
 * @return {boolean}
 */
var isZeroArray = function(nums, queries) {
    const N = nums.length
    const diffs = Array(N + 1).fill(0)
    for (const [l, r] of queries) {
        diffs[l]++
        diffs[r + 1]--
    }
    for (let i = 0, acc = 0; i < N; i++) {
        acc += diffs[i]
        if (nums[i] > acc) return false
    }
    return true
};",1454813389
Harttle,harttle,222,3643,javascript,"/**
 * @param {number[]} nums
 * @param {number[][]} queries
 * @return {number}
 */
var minZeroArray = function(nums, queries) {
    const N = nums.length
    const M = queries.length
    let lo = 0, hi = M
    while (lo <= hi) {
        const mi = Math.floor((lo + hi) / 2)
        if (check(mi)) { hi = mi - 1; }
        else { lo = mi + 1;}
    }
    return lo === M + 1 ? -1 : lo
    function check(K) {
        const diffs = Array(N + 1).fill(0)
        for (const [l, r, v] of queries.slice(0, K)) {
            diffs[l] += v
            diffs[r + 1] -= v
        }
        for (let i = 0, acc = 0; i < N; i++) {
            acc += diffs[i]
            if (nums[i] > acc) return false
        }
        return true
    }
};",1454822153
Ivan Vasilenko,8symbols,223,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        initial_zeros = [i for i, num in enumerate(nums) if num == 0]

        count = 0

        for initial_index in initial_zeros:
            for direction in [1, -1]:
                index = initial_index
                zeros = len(initial_zeros)
                tmp_nums = nums[:]

                while index != -1 and index != len(nums):
                    if tmp_nums[index]:
                        tmp_nums[index] -= 1
                        if tmp_nums[index] == 0:
                            zeros += 1
                        direction *= -1
                    index += direction

                if zeros == len(nums):
                    count += 1

        return count",1454815981
Ivan Vasilenko,8symbols,223,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        deltas = [0] * (len(nums) + 1)
        for l, r in queries:
            deltas[l] += 1
            deltas[r + 1] -= 1
            
        current = 0
        for i in range(len(nums)):
            current += deltas[i]
            if current < nums[i]:
                return False
            
        return True",1454821372
Ivan Vasilenko,8symbols,223,3643,python3,"class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        def is_possible(k):
            deltas = [0] * (len(nums) + 1)
            for i in range(k):
                l, r, val = queries[i]
                deltas[l] += val
                deltas[r + 1] -= val

            current = 0
            for i in range(len(nums)):
                current += deltas[i]
                if current < nums[i]:
                    return False

            return True

        if not is_possible(len(queries)):
            return -1

        left, right = 0, len(queries)
        while left != right:
            middle = (left + right) // 2
            if not is_possible(middle):
                left = middle + 1
            else:
                right = middle

        return left",1454829234
w0w0,w0w0,225,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        n = len(nums)

        def helper(i, d):
            arr = nums.copy()
            cur = i

            while 0 <= cur < n:
                if arr[cur]:
                    arr[cur] -= 1
                    d *= -1
                cur += d

            return sum(arr) == 0

        ans = 0
        for i in range(n):
            if nums[i] == 0:
                ans += helper(i, 1) + helper(i, -1)

        return ans",1454808790
w0w0,w0w0,225,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        n = len(nums)

        diff = [0] * (n + 1)
        for l, r in queries:
            diff[l] += 1
            diff[r + 1] -= 1

        cur = 0
        arr = []
        for x in diff:
            cur += x
            arr.append(cur)

        for x, y in zip(arr, nums):
            if x < y:
                return False

        return True",1454812981
w0w0,w0w0,225,3643,python3,"class SegmentTree:
    def __init__(self, l, r):
        self.l = l
        self.r = r

        self.info = None
        self.assign = None
        self.add = 0

        self.left = None
        self.right = None

    @staticmethod
    def build(nums, l=None, r=None):
        if l is None:
            l = 0
        if r is None:
            r = len(nums) - 1

        node = SegmentTree(l, r)
        if l < r:
            m = (l + r) // 2
            node.left = SegmentTree.build(nums, l, m)
            node.right = SegmentTree.build(nums, m + 1, r)
            node.info = max(node.left.info, node.right.info)
        else:
            node.info = nums[l]
        return node

    def update(self):
        if self.add:
            self.info += self.add
            if self.left:
                self.left.add += self.add
            if self.right:
                self.right.add += self.add
            self.add = 0

    def rangeAdd(self, l, r, val):
        self.update()

        if self.l == l and self.r == r:
            self.info += val
            if self.left:
                self.left.update()
                self.left.add += val
            if self.right:
                self.right.update()
                self.right.add += val
        else:
            m = (self.l + self.r) // 2
            if l > m:
                self.left.update()
                self.right.rangeAdd(l, r, val)
            elif r <= m:
                self.left.rangeAdd(l, r, val)
                self.right.update()
            else:
                self.left.rangeAdd(l, m, val)
                self.right.rangeAdd(m + 1, r, val)
            self.info = max(self.left.info, self.right.info)

    def query(self, l, r):
        self.update()

        if self.l == l and self.r == r:
            return self.info
        m = (self.l + self.r) // 2
        if l > m:
            return self.right.query(l, r)
        if r <= m:
            return self.left.query(l, r)
        return max(self.left.query(l, m), self.right.query(m + 1, r))

class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        n = len(nums)
        root = SegmentTree.build(nums)
        if root.query(0, n - 1) <= 0:
            return 0

        for i, (l, r, v) in enumerate(queries):
            root.rangeAdd(l, r, -1 * v)
            if root.query(0, n - 1) <= 0:
                return i + 1

        return -1",1454822242
Sanjay Grover,SanjayGrover,226,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:

        def is_valid(start, direction):
            n = len(nums)
            temp_nums = nums[:]
            curr = start
            while 0 <= curr < n:
                if temp_nums[curr] == 0:
                    curr += direction
                else:
                    temp_nums[curr] -= 1
                    direction *= -1
                    curr += direction
            return all(x == 0 for x in temp_nums)
        
        count = 0
        for i in range(len(nums)):
            if nums[i] == 0:
                if is_valid(i, 1):
                    count += 1
                if is_valid(i, -1):
                    count += 1
        
        return count",1454814451
Sanjay Grover,SanjayGrover,226,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:

        n = len(nums)
        capacity = [0] * (n + 1)
    
        for li, ri in queries:
            capacity[li] += 1
            if ri + 1 < n:
                capacity[ri + 1] -= 1
    
        for i in range(1, n):
            capacity[i] += capacity[i - 1]
    
        for i in range(n):
            if nums[i] > capacity[i]:
                return False
    
        return True",1454821343
Sanjay Grover,SanjayGrover,226,3643,python3,"class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:

        n = len(nums)
    
        def helper(k):
            diff = [0] * (n + 1)
    
            for i in range(k):
                li, ri, vali = queries[i]
                diff[li] += vali
                if ri + 1 < n:
                    diff[ri + 1] -= vali
    
            decrement = [0] * n
            curr = 0
            for i in range(n):
                curr += diff[i]
                decrement[i] = curr
    
            for i in range(n):
                if nums[i] > decrement[i]:
                    return False
    
            return True
    
        left, right = 0, len(queries)
        result = -1
        while left <= right:
            mid = (left + right) // 2
            if helper(mid):
                result = mid
                right = mid - 1
            else:
                left = mid + 1
    
        return result",1454829341
Shashwat Tripathi,Fkaiser7,228,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int s=0;
        for(int i=0;i<nums.size();i++){
            s+=nums[i];
        }
        int s1=0;
        int c=0;
        for(int i=0;i<nums.size();i++){
            if(nums[i]==0&&s-s1==s1){
                c+=2;
            }
            if(nums[i]==0&&(abs(2*s1-s)==1||abs(s-2*s1)==1)){
                c++;
            }
            s1+=nums[i];
        }
        return c;
    }
};",1454812328
Shashwat Tripathi,Fkaiser7,228,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n=nums.size();
        vector<int>v(n+1);
        for(int i=0;i<queries.size();i++){
            v[queries[i][0]]++;
            v[queries[i][1]+1]--;
        }
        int s=0;
        for(int i=0;i<n;i++){
            s+=v[i];
            if(s<nums[i]){
                return false;
            }
        }
        return true;
    }
};",1454816839
Shashwat Tripathi,Fkaiser7,228,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int lo=0,hi=queries.size();
        int ans=-1;
        int n=nums.size();
        while(lo<=hi){
            int mid=(lo+hi)/2;
            vector<int>v(n+1);
            for(int i=0;i<mid;i++){
                v[queries[i][0]]+=queries[i][2];
                v[queries[i][1]+1]-=queries[i][2];
            }
            int c=0;
            int s=0;
            for(int i=0;i<n;i++){
                s+=v[i];
                if(s<nums[i]){
                    c++;
                    break;
                }
            }
            if(c==0){
                ans=mid;
                hi=mid-1;
            }
            else{
                lo=mid+1;
            }
        }
        return ans;
    }
};",1454822338
Nguyễn Thảo,nguyenquocthao00,229,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        s=sum(nums)
        res,cur=0,0
        for v in nums:
            cur+=v
            if v==0:
                if 2*cur==s: res+=2
                elif abs(2*cur-s)==1: res+=1
        return res

            

        ",1454814284
Nguyễn Thảo,nguyenquocthao00,229,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        n=len(nums)
        prefix=[0]*(n+1)
        for i,j in queries:
            prefix[i]+=1
            prefix[j+1]-=1
        cur=0
        for i in range(n):
            cur+=prefix[i]
            if cur<nums[i]: return False
        return True
        ",1454817779
Nguyễn Thảo,nguyenquocthao00,229,3643,python3,"class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        n=len(nums)
        def feasible(k):
            prefix=[0]*(n+1)
            for i,j,val in queries[:k]:
                prefix[i]+=val
                prefix[j+1]-=val
            cur=0
            for i in range(n):
                cur+=prefix[i]
                if cur<nums[i]: return False
            return True
        l,r,res = 0,len(queries),-1
        while l<=r:
            mid=(l+r)//2
            if feasible(mid): res, r = mid,mid-1
            else: l=mid+1
        return res
        
        ",1454822455
Rajat,log1,230,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int n=nums.size();
        int ans=0;
        for(int i=0;i<n;++i)
        {
            if(nums[i]==0)
            {
                for(auto& it:{-1,1})
                {
                    vector<int>tmp=nums;
                    int curr=i,dir=it,ok=1;
                    while(curr>=0 && curr<n)
                    {
                        if(tmp[curr]==0)curr+=dir;
                        else if(tmp[curr]>=1)
                        {
                            //inc->then->exc(Repeat)
                            tmp[curr]--,dir=-dir,curr+=dir;
                        }
                        else break;
                    }
                    for(auto &it:tmp)
                    {
                        if(it!=0)
                        {
                            ok=0;
                            break;
                        }
                    }
                    if(ok)ans++;
                }
            }
        }
        return ans;
    }
};",1454822490
Rajat,log1,230,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n=nums.size(),m=queries.size();
        vector<int>arr(n+1,0);
        for(int i=0;i<m;++i)
        {
            int l=queries[i][0],r=queries[i][1],val=queries[i][2];
            arr[l]++;
            if(r+1<=n)arr[r+1]--;
        }
        for(int i=1;i<n;++i)arr[i]+=arr[i-1];
        for(int i=0;i<n;++i)if(arr[i]<nums[i])return false;
        return true;
    }
};",1454816184
Rajat,log1,230,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n=nums.size(),m=queries.size(),l=0,r=m,res=-1;
        auto check=[&](int k)->bool
        {
            vector<long long>arr(n+1,0);
            for(int i=0;i<k;++i)
            {
                int l=queries[i][0],r=queries[i][1],val=queries[i][2];
                arr[l]+=val;
                if(r+1<=n)arr[r+1]-=val;
            }
            long long ans=0;
            for(int i=0;i<n;++i)
            {
                ans+=arr[i];
                if(ans<nums[i])return false;
            }
            return true;
        };
        while(l<=r)
        {
            int mid=l+(r-l)/2;
            if(check(mid))res=mid,r=mid-1;else l=mid+1;
        }
        return res;
    }
};",1454812444
Nutty Professor,varkatkl,234,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        N = len(nums)
        
        def simulate(pos, dir):
            arr = nums[:]
            total = sum(arr)
            if arr[pos] != 0:
                return 0
            while 0 <= pos < N:
                if arr[pos] == 0:
                    pos += dir
                else:
                    arr[pos] -= 1
                    total -= 1
                    if total == 0:
                        break
                    dir = -dir
                    pos += dir
            return int(total == 0)

        return sum(simulate(i, 1) + simulate(i, -1) for i in range(N))
",1454815954
Nutty Professor,varkatkl,234,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        N = len(nums)
        incr = [0] * (N + 1)
        for l, r in queries:
            incr[l] += 1
            incr[r + 1] -= 1

        intervals = 0
        for i in range(N):
            intervals += incr[i]
            if intervals < nums[i]:
                return False
        return True
",1454821658
Nutty Professor,varkatkl,234,3643,python3,"class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        N = len(nums)

        incr = [0] * (N + 1)
        def check(k):
            for i in range(N + 1):
                incr[i] = 0
            for i in range(k):
                l, r, v = queries[i]
                incr[l] += v
                incr[r + 1] -= v

            total = 0
            for i in range(N):
                total += incr[i]
                if total < nums[i]:
                    return False
            return True

        if not check(len(queries)):
            return -1
        if check(0):
            return 0
        lo, hi = 0, len(queries)
        while hi - lo > 1:
            mid = (lo + hi) // 2
            if check(mid):
                hi = mid
            else:
                lo = mid
        return hi
",1454829731
Meng-Hsuan Wu,meng-hsuan,235,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        n = len(nums)
        ans = 0
        
        ttl = sum(nums)
        l_ttl = 0
        
        for i in range(n):
            l_ttl += nums[i]
            r_ttl = ttl - l_ttl
            if nums[i] == 0:
                if (a := abs(l_ttl - r_ttl)) == 0:
                    ans += 2
                elif a == 1:
                    ans += 1
        
        return ans
    ",1454810708
Meng-Hsuan Wu,meng-hsuan,235,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        n = len(nums)
        delta = [0] * (n + 1)
        
        for l, r in queries:
            delta[l] += 1
            delta[r + 1] -= 1
            
        for i in range(1, n + 1):
            delta[i] += delta[i - 1]
        
        return all(nums[i] <= delta[i] for i in range(n))
    ",1454818377
Meng-Hsuan Wu,meng-hsuan,235,3643,python3,"class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        n = len(nums)
        nq = len(queries)
        
        lb = 0
        ub = nq + 1
        
        def check(used: int) -> bool:
            delta = [0] * (n + 1)

            for l, r, v in queries[:used]:
                delta[l] += v
                delta[r + 1] -= v

            for i in range(1, n + 1):
                delta[i] += delta[i - 1]
            #print(used, delta)
            
            return all(nums[i] <= delta[i] for i in range(n))
        
        while lb < ub:
            mid = lb + ((ub - lb) >> 1)
            if check(mid):
                ub = mid
            else:
                lb = mid + 1
        #print()
        
        return lb if lb <= nq else -1
    ",1454829732
2499370956,2499370956,236,3616,java,"class Solution {
    public int countValidSelections(int[] nums) {
        int out = 0;
        for (int start = 0; start < nums.length; start++) {
            if (nums[start] != 0) {
                continue;
            }
            for (int direction : new int[] {-1, +1}) {
                int[] a = Arrays.copyOf(nums, nums.length);
                if (valid(a, start, direction)) {
                    out++;
                }
            }
        }
        return out;
    }

    private boolean valid(int[] nums, int start, int direction) {
        int current = start + direction;
        while (current >= 0 && current < nums.length) {
            if (nums[current] == 0) {
                current += direction;
            } else {
                nums[current]--;
                direction = -direction;
                current += direction;
            }
        }

        for (int i : nums) {
            if (i != 0) {
                return false;
            }
        }
        return true;
    }
}",1454811362
2499370956,2499370956,236,3639,java,"class Solution {
    public boolean isZeroArray(int[] nums, int[][] queries) {
        int[][] queries2 = new int[queries.length][3];
        for (int i = 0; i < queries.length; i++) {
            queries2[i][0] = queries[i][0];
            queries2[i][1] = queries[i][1];
            queries2[i][2] = 1;
        }
        return minZeroArray(nums, queries2) != -1;
    }

    public int minZeroArray(int[] nums, int[][] queries) {
        if (!valid(nums, queries, queries.length)) {
            return -1;
        }

        int low = 0;
        int high = queries.length;
        while (low < high) {
            int mid = (low + high) / 2;
            if (valid(nums, queries, mid)) {
                high = mid;
            } else {
                low = mid + 1;
            }
        }
        return low;
    }

    private boolean valid(int[] nums, int[][] queries, int k) {
        int n = nums.length;
        long[] diff = new long[n + 1];
        for (int i = 0; i < k && i < queries.length; i++) {
            int[] q = queries[i];
            int s = q[0];
            int e = q[1];
            int v = q[2];
            diff[s] += v;
            diff[e + 1] -= v;
        }
        long[] sum = new long[n];
        sum[0] = diff[0];
        for (int i = 1; i < n; i++) {
            sum[i] = sum[i - 1] + diff[i];
        }

        for (int i = 0; i < n; i++) {
            if (sum[i] < nums[i]) {
                return false;
            }
        }
        return true;
    }
}",1454829761
2499370956,2499370956,236,3643,java,"class Solution {
    public int minZeroArray(int[] nums, int[][] queries) {
        if (!valid(nums, queries, queries.length)) {
            return -1;
        }

        int low = 0;
        int high = queries.length;
        while (low < high) {
            int mid = (low + high) / 2;
            if (valid(nums, queries, mid)) {
                high = mid;
            } else {
                low = mid + 1;
            }
        }
        return low;
    }

    private boolean valid(int[] nums, int[][] queries, int k) {
        int n = nums.length;
        long[] diff = new long[n + 1];
        for (int i = 0; i < k && i < queries.length; i++) {
            int[] q = queries[i];
            int s = q[0];
            int e = q[1];
            int v = q[2];
            diff[s] += v;
            diff[e + 1] -= v;
        }
        long[] sum = new long[n];
        sum[0] = diff[0];
        for (int i = 1; i < n; i++) {
            sum[i] = sum[i - 1] + diff[i];
        }

        for (int i = 0; i < n; i++) {
            if (sum[i] < nums[i]) {
                return false;
            }
        }
        return true;
    }
}",1454826057
Md Nihal,mdnihal05,239,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int n=nums.size(),ans=0;
        for(int i=0;i<n;i++){
            if(nums[i]) continue;
            auto a=nums,b=nums;
            int da=0,db=1,ia=i,ib=i;
            while(ia>=0 and ia<n){
                if(a[ia]==0){
                    if(da) ia--;
                    else ia++;
                }else{
                    da^=1;
                    a[ia]--;
                    if(da) ia--;
                    else ia++;
                }
            }
            while(ib>=0 and ib<n){
                if(b[ib]==0){
                    if(db) ib--;
                    else ib++;
                }else{
                    db^=1;
                    b[ib]--;
                    if(db) ib--;
                    else ib++;
                }
            }
            
            if(count(a.begin(),a.end(),0)==n) ans++;
            if(count(b.begin(),b.end(),0)==n) ans++;
        }
        return ans;
    }
};",1454814257
Md Nihal,mdnihal05,239,3639,cpp,"#define ll long long
class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n=nums.size();
        vector<ll>dif(n+1);
        for(auto &v:queries){
             int i=v[0],j=v[1];
             dif[i]++;
             dif[j+1]--;
        }
        partial_sum(dif.begin(),dif.end(),dif.begin());
        bool valid=1;
        for(int i=0;i<n;i++){
            if(nums[i]>dif[i]) valid=false;
        }
        
        return valid;
    }
};",1454821885
Md Nihal,mdnihal05,239,3643,cpp,"#define all(x) x.begin(),x.end()
#define ll long long
class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n=nums.size();
        auto solve=[&](int mid)->bool{
            vector<int>dif(n+1);
            for(int i=0;i<mid;i++){
                auto v=queries[i];
                int l=v[0],r=v[1],d=v[2];
                dif[l]+=d;
                dif[r+1]-=d;
            }
            partial_sum(all(dif),dif.begin());
            bool valid=1;
            for(int i=0;i<n;i++){
                if(nums[i]>dif[i]) valid=0;
            }
            return valid;  
        };
        ll low=0,high=queries.size(),res=-1;
        while(low<=high){
            ll mid=(low+high)/2;
            if(solve(mid)){
                high=mid-1;
                res=mid;
            }else low=mid+1;
        }
        return res;
    }
};",1454829912
Sayan Das,Cp_worm,240,3616,cpp,"class Solution {
public:
     bool simulate(vector<int>& nums, int start, bool goRight) {
        vector<int> t = nums;
        int c = start;
        int n = nums.size();
        while (c >= 0 && c < n) {
            if (t[c] == 0) {
                c = goRight ? c + 1 : c - 1;
            } else {
                t[c]--;
                goRight = !goRight;
                c = goRight ? c + 1 : c - 1;
            }
        }
        for (int num : t) {
            if (num != 0) return false;
        }
        return true;
    }
    int countValidSelections(vector<int>& nums) {
         int count = 0;
        int n = nums.size();
        for (int i = 0; i < n; i++) {
            if (nums[i] == 0) {
                if (simulate(nums, i, true)) count++;
                if (simulate(nums, i, false)) count++;
            }
        }
        
        return count;
    }
};",1454807039
Sayan Das,Cp_worm,240,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
         int n = nums.size();
        vector<int> c(n + 1, 0);
        for (const auto& q : queries) {
            c[q[0]]++;
            c[q[1] + 1]--;
        }
        int  total=0;
        for (int i = 0; i < n; i++) {
            total += c[i];
            if (total < nums[i]) {
                return false;
            }
        }
        return true;
    }
};",1454822801
Sayan Das,Cp_worm,240,3643,cpp,"class Solution {
public:
    int canZero(vector<int>& nums, vector<vector<int>>& queries, int k) {
        int n = nums.size();
        vector<int> c = nums;
        vector<long long> prefix(n + 1, 0);
        for (int i = 0; i < k; i++) {
            int l = queries[i][0];
            int r = queries[i][1];
            int val = queries[i][2];
            prefix[l] += val;
            prefix[r + 1] -= val;
        }
        long long sum = 0;
        vector<int> z(n);
        for (int i = 0; i < n; i++) {
            sum += prefix[i];
            if (sum < c[i]) return false;
            z[i] = c[i];
        }
        
        return true;
    }
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
         int left = 1, right = queries.size();
        int ans = -1;
        bool allZero = true;
        for (int num : nums) {
            if (num != 0) {
                allZero = false;
                break;
            }
        }
        if (allZero) return 0;
        while (left <= right) {
            int mid = left + (right - left) / 2;
            
            if (canZero(nums, queries, mid)) {
                ans = mid;
                right = mid - 1;
            } else {
                left = mid + 1;
            }
        }
        return ans;
    }
};",1454817451
Saurabh,Saurabh_1602,241,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int n = nums.size();
        int ct = 0;

        for (int i = 0; i < n; ++i) {
            if (nums[i] != 0)
                continue;
            for (int dxy : {-1, 1}) {
                vector<int> vt(nums);
                int yd = i;
                int xd = dxy;

                while (yd >= 0 && yd < n) {
                    if (vt[yd] == 0) {
                        yd += xd;
                    } else {
                        vt[yd]--;
                        xd = -xd;
                        yd += xd;
                    }
                }

                if (all_of(vt.begin(), vt.end(),
                           [](int val) { return val == 0; })) {
                    ct++;
                }
            }
        }

        return ct;
    }
};
",1454806864
Saurabh,Saurabh_1602,241,3639,cpp,"
class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        vector<int> diff(n + 1, 0);
        for (const auto& its : queries) {
            int l = its[0];
            int r = its[1];

            if (l >= 0)
                diff[l]--;

            if (r + 1 < n)
                diff[r + 1]++;
        }

        int ct = 0;
        for (int i = 0; i < n; ++i) {
            ct += diff[i];
            nums[i] += ct;
            if (nums[i] > 0) {
                return false;
            }
        }

        return true;
    }
};
",1454815930
Saurabh,Saurabh_1602,241,3643,cpp,"
class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        int m = queries.size();
          bool bol = true;
        for (int num : nums) {
            if (num != 0) {
                bol = false;
                break;
            }
        }
        if (bol) {
            return 0;
        }
        auto solve = [&](int k) -> bool {
            vector<int> pre(n + 1, 0);
            vector<int> suff = nums;  
            
            for (int i = 0; i < k; i++) {
                int l = queries[i][0];
                int r = queries[i][1];
                int sum = queries[i][2];
                
                pre[l] -= sum;
                if (r + 1 < n) {
                    pre[r + 1] += sum;
                }
            }
            
            int ct = 0;
            for (int i = 0; i < n; i++) {
                ct += pre[i];
                suff[i] += ct;
                suff[i] = max(0, suff[i]);
                
                if (suff[i] != 0) {
                    return false;
                }
            }
            return true;
        };
        
        int l = 1, r = m, res = -1;
        while (l <= r) {
            int mid = l + (r - l) / 2;
            if (solve(mid)) {
                res = mid;
                r = mid - 1;
            } else {
                l = mid + 1;
            }
        }
        
        return res;
    }
};
",1454810039
derrick2001,derrick2001,242,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        cans = [i for i,v in enumerate(nums) if v ==0]
        DIR = [-1,1]
        n = len(nums)
        ans =0
        for x in cans:
            for d in DIR:
                curd = d
                cpy = nums.copy()
                curx = x
                while 0<=curx<n:
                    if cpy[curx] == 0:
                        curx += curd
                    else:
                        cpy[curx] -= 1
                        curd *= -1
                        curx += curd

           
                if all(val == 0 for val in cpy):
                    ans += 1
        return ans
                    ",1454829979
derrick2001,derrick2001,242,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        n = len(nums)
        diff = [0] * (n + 1)

        for li, ri in queries:
            diff[li] += 1
            if ri + 1 < len(diff):
                diff[ri + 1] -= 1
        pre = [0] * n
        cur = 0
        for i in range(n):
            cur += diff[i]
            pre[i] = cur

        
        for i in range(n):
            if pre[i] < nums[i]:
                return False
        return True
        ",1454811142
derrick2001,derrick2001,242,3643,python3,"class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        n = len(nums)
        m = len(queries)
    
        def ok(k):
            # Initialize difference array
            diff = [0] * (n + 1)


            for i in range(k):
                li, ri, vali = queries[i]
                diff[li] += vali
                if ri + 1 < n:
                    diff[ri + 1] -= vali

    
            pre = [0] * n
            cur = 0
            for i in range(n):
                cur += diff[i]
                pre[i] = cur

            
            for i in range(n):
                if pre[i] < nums[i]:
                    return False
            return True


        if all(num == 0 for num in nums):
            return 0

    
        left, right = 1, m
    

        while left < right:
            mid = (left + right) // 2
            if ok(mid):
                right = mid
            else:
                left = mid + 1  #

        return left if ok(left) else -1
",1454817088
Shreyash Yadav,sy3166,243,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int sum = 0;
        for(auto x : nums){
            sum+=x;
        }
        int sum2 = 0;
        int k = 0;
        for(auto p : nums){
            if(p == 0){
                if(abs(sum-2*sum2)<=1){
                    k++;
                }
                if(sum==2*sum2){
                    k++;
                }
            }
            sum2+=p;
            // k++;
        }
        return k;
    }
};",1454808589
Shreyash Yadav,sy3166,243,3639,cpp,"typedef long long ll;
class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        ll n = nums.size();
        vector <ll> A(n+1,0);
        for(auto x : queries){
            A[x[0]]++;
            A[x[1]+1]--;
        }
        for(ll i=1;i<n;i++){
            A[i]+=A[i-1];
        }
        for(ll i=0;i<n;i++){
            if(A[i]<nums[i]){
                return false;
            }
        }
        return true;
    }
};",1454815520
Shreyash Yadav,sy3166,243,3643,cpp,"class Solution {
public:
    #define ll long long
    
    bool check(int m, vector<vector<int>>& q, vector<int>& nums) {
        int n = nums.size();
        vector<ll> d(n+1, 0);
        
        ll tmp = 0;
        for(int i=0;i<m;i++) {
            d[q[i][0]] += q[i][2];
            if(q[i][1]+1<n) d[q[i][1]+1] -= q[i][2];
        }
        
        bool jh = 1;
        for(int i=0;i<n;i++) {
            tmp += d[i];
            if(tmp<nums[i]) jh = 0;
        }
        
        return jh;
    }
    
    int minZeroArray(vector<int>& nums, vector<vector<int>>& q) {
        vector<int> v = nums;
        int n = nums.size(), k = q.size();
        
        int jh = 1;
        
        for(int i=0;i<n;i++) {
            if(nums[i]!=0) jh = 0;
        }
        
        if(jh) return 0;
        
        int lo=1,hi=k,ans=-1;
        
        while(lo<=hi) {
            int m = (lo+hi)/2;
            if(check(m, q, nums)) {
                ans = m, hi = m-1;
            } else lo = m+1;
        }
        
        if(ans != -1) {
            return ans;
        }
        
        if(check(k, q, nums)) {
            ans = k;
        } else ans = -1;
        
        
        return ans;
    }
};",1454829990
rohan0910,rohan0910,245,3616,cpp,"class Solution {
public:
    bool valid(int curr, int dir, vector<int>nums){
        int n = nums.size();
        while(curr>=0 && curr<n){
            // cout<<curr<<"" ""<<dir<<endl;
            if(nums[curr]==0){
                if(dir==1)
                    curr++;
                else if (dir==-1)
                    curr--;
            }
            else{
                nums[curr]--;
                dir = -dir;
                curr += dir;
            }
        }
                // cout<<endl;
        for(int x : nums){
            if(x)
                return false;
        }

        return true;
    }
    int countValidSelections(vector<int>& nums) {
        int ans = 0;
        for(int i = 0;i<nums.size();i++){
            if(nums[i]==0){
                ans += valid(i, +1, nums);
                ans += valid(i, -1, nums);
            }
        }
        return ans;
    }
};",1454813612
rohan0910,rohan0910,245,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        vector<int>pre(n+1, 0);
        for(auto q : queries){
            int l = q[0], r = q[1];
            pre[l]++;
            pre[r+1]--;
        }
        for(int i = 1;i<=n;i++){
            pre[i] += pre[i-1];
            
        }
        // for(int i = 0;i<n;i++)
            // cout<<pre[i]<<"" "";
        for(int i = 0;i<n;i++){
            
            if(nums[i]>pre[i])
                return false;
        }
        return true;
    }
};",1454820775
rohan0910,rohan0910,245,3643,cpp,"class Solution {
public:
    bool valid(vector<int>& nums, vector<vector<int>>& queries, int m) {
        int n = nums.size();
        vector<int>pre(n+1, 0);
        for(int i = 0;i<m;i++){
            int l = queries[i][0], r = queries[i][1];
            int val = queries[i][2];
            pre[l]+=val;
            pre[r+1]-=val;
        }
        for(int i = 1;i<=n;i++){
            pre[i] += pre[i-1];
            
        }
        // cout<<m<<endl;
        // for(int i = 0;i<n;i++)
        //     cout<<pre[i]<<"" "";
        // cout<<endl;
        for(int i = 0;i<n;i++){
            
            if(nums[i]>pre[i])
                return false;
        }
        return true;
    }
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int h = queries.size();
        int l = 0;
        int ans = -1;
        while(l<=h){
            int m = (l+h)/2;
            if(valid(nums, queries, m)){
                ans = m;
                h = m-1;
            }
            else
                l = m+1;
        }
        return ans;
    }
};",1454830034
Mohammad Amanullah,m_amanullah7,246,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        auto simulate = [](vector<int> numsCopy, int start, int direction) -> bool{
            int n=numsCopy.size();
            int curr=start;
            while(curr>=0 && curr < n){
                if(numsCopy[curr]==0){
                    curr+=direction;
                } else {
                    numsCopy[curr] -= 1;
                    direction = -direction;
                    curr += direction;
                }
            }
            return all_of(numsCopy.begin(), numsCopy.end(), [](int x) { return x == 0; });
        };
        int ans=0;
        for(int i =0;i<nums.size();++i){
            if(nums[i]==0) {
                if(simulate(nums, i, -1)){
                    ++ans;
                }
                if(simulate(nums,i,1)){
                    ++ans;
                }
            }
        }
        return ans;
    }
};

",1454810429
Mohammad Amanullah,m_amanullah7,246,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n=nums.size();
        vector<int> counts(n, 0);

        for(const auto &q : queries){
            int li=q[0];
            int ri=q[1];
            counts[li]+=1;
            if(ri+1<n){
                counts[ri+1]-=1;
            }
        }
        for(int i=1; i<n;++i){
            counts[i] +=counts[i-1];
        }

        for(int i =0;i<n;++i){
            if(counts[i]<nums[i]){
                return false;
            }
        }
        return true;
    }
};",1454818788
Mohammad Amanullah,m_amanullah7,246,3643,cpp,"class Solution {
public:
    bool canMakeZero(int k, const vector<int>& nums, const vector<vector<int>>& queries) {
        int n =nums.size();
        vector<long long> arr(n +1,0);
        
        for(int i=0;i<k;++i){
            int li=queries[i][0];
            int ri=queries[i][1];
            int vali =queries[i][2];
            arr[li] +=vali;
            if(ri+1<n){
                arr[ri +1]-= vali;
            }
        }
        for(int i=1;i<n;++i){
            arr[i] +=arr[i -1];
        }
        
        for(int i =0;i<n;++i){
            if(arr[i] <nums[i]){
                return false;
            }
        }
        return true;
    }
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int left =1;
        int right =queries.size();
        int result =-1;
        bool zeroPossible = true;
        for(auto &num: nums){
            if(num !=0){
                zeroPossible =false;
                break;
            }
        }
        if(zeroPossible){
            return 0;
        }
        while(left<=right){
            int mid =left +(right-left)/ 2;
            if(canMakeZero(mid, nums, queries)){
                result=mid;
                right= mid-1;
            }
            else{
                left =mid+1;
            }
        }
        return result;
    }
};",1454830085
Ryan,ryanwong0127,248,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        n, res = len(nums), 0

        def helper(start, d):
            arr, cur, mv = nums[:],start,d
            while 0 <= cur < n:
                if arr[cur] == 0:
                    cur += mv
                else:
                    arr[cur] -= 1 
                    mv = -mv
                    cur += mv
            return all(x == 0 for x in arr)

        for i in range(n):
            if nums[i] == 0:
                if helper(i, 1):
                    res += 1
                if helper(i, -1):
                    res += 1

        return res",1454806563
Ryan,ryanwong0127,248,3639,python3,"class Solution:
    def isZeroArray(self, a: List[int], queries: List[List[int]]) -> bool:
        n = len(a)
        diff = [0] * (n + 1)

        for q in queries:
            l, r = q
            diff[l] += 1
            if r + 1 < n:
                diff[r + 1] -= 1

        cover = 0
        for i in range(n):
            cover += diff[i]
            if cover < a[i]:
                return False 

        return True ",1454809190
Ryan,ryanwong0127,248,3643,cpp,"#include <bits/stdc++.h>
#pragma GCC optimize(2)
#define rep(i, a, b) for (int i = (a); i < (b); ++i)
#define rep_(i, a, b) for (int i = (a); i > (b); i--)
#define CEIL_DIV(a, b) ((b) == 0 ? 0 : (((a) >= 0) ? ((a) + (b) - 1) / (b) : (a) / (b)))
#define FLOOR_DIV(a, b) (((a) / (b)) - ((a) % (b) != 0 &&(((a) < 0) != ((b) < 0))))
#define mst(x, a) memset(x, a, sizeof(x))
#define all(a) begin(a), end(a)
#define lowbit(x) ((x) & (-(x)))
#define bitcnt(x) (__builtin_popcountll(x))
#define se second
#define fi first
#define pb push_back
#define maxe max_element
#define mine min_element
using namespace std;
typedef long long ll;
typedef unsigned long long ull;
typedef pair<ll, ll> pll;
typedef pair<int, ll> pil;
typedef pair<int, int> pii;
typedef vector<int> vi;
typedef vector<ll> vll;
typedef vector<vi> vvi;
constexpr static int dirs[4][2] = {{0, -1}, {0, 1}, {-1, 0}, {1, 0}};
constexpr static int inf = 0x3f3f3f3f, mod = 1e9 + 7;
const ll infl = 0x3f3f3f3f3f3f3f3fll;
template<class T> bool chmax(T &a, T b) {
    if (a >= b) return false;
    a = b; return true;
}
template<class T> bool chmin(T &a, T b) {
    if (a <= b) return false;
    a = b; return true;
}
template<class T> bool chsum(T &a, T b) {
    a = (a + b + mod) % mod;
    return 0;
}
class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        const int n = nums.size(), q = queries.size();
        int left = 0, right = q, res = -1;
        while(left <= right){
            int m = left + (right - left) / 2;
            vi diff(n+1, 0);
            rep(i, 0, m){
                int L = queries[i][0];
                int R = queries[i][1];
                int val = queries[i][2];
                diff[L] += val;
                if(R + 1 < n) diff[R+1] -= val;
            }
            bool valid = true;
            int current = 0;
            rep(i, 0, n){
                current += diff[i];
                if(current < nums[i]){
                    valid = false;
                    break;
                }
            }
            if(valid){
                res = m;
                right = m - 1;
            } else {
                left = m + 1;
            }
        }
        return res;
    }
};",1454822964
Wangwang Yang,Jigcecile,249,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int count = 0;
        int n = nums.size();

        for (int i = 0; i < n; i++) {
            if (nums[i] == 0) {
                for (int dir = -1; dir <= 1; dir += 2) {
                    vector<int> copyNums = nums;
                    int curr = i;
                    int direction = dir;

                    while (curr >= 0 && curr < n) {
                        if (copyNums[curr] == 0) {
                            curr += direction;
                        } else {
                            copyNums[curr] -= 1;
                            direction = -direction;
                            curr += direction;
                        }
                    }

                    bool allZero = true;
                    for (int num : copyNums) {
                        if (num != 0) {
                            allZero = false;
                            break;
                        }
                    }

                    if (allZero) {
                        count++;
                    }
                }
            }
        }

        return count;
    }
};",1454807434
Wangwang Yang,Jigcecile,249,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        vector<int> diff(n + 1, 0);

        for (auto& query : queries) {
            int l = max(0, min(query[0], n - 1));
            int r = max(0, min(query[1], n - 1));
            diff[l]++;
            diff[r + 1]--;
        }

        int count = 0;
        for (int i = 0; i < n; i++) {
            count += diff[i];
            if (count < nums[i]) {
                return false;
            }
        }

        return true;
    }
};",1454811035
Wangwang Yang,Jigcecile,249,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        int q = queries.size();

        int left = 0;
        int right = q;
        int result = -1;

        while (left <= right) {
            int mid = left + (right - left) / 2;
            if (isPossible(mid, nums, queries)) {
                result = mid;
                right = mid - 1;
            } else {
                left = mid + 1;
            }
        }

        if (result != -1 && result <= q && isPossible(result, nums, queries)) {
            return result;
        }
        return -1;
    }

private:
    bool isPossible(int k, const vector<int>& nums,
                    const vector<vector<int>>& queries) {
        int n = nums.size();
        vector<long long> diff(n + 1, 0);

        for (int j = 0; j < k; ++j) {
            int l = queries[j][0];
            int r = queries[j][1];
            int val = queries[j][2];

            l = max(0, min(l, n - 1));
            r = max(0, min(r, n - 1));

            diff[l] += val;
            if (r + 1 < n) {
                diff[r + 1] -= val;
            }
        }

        long long current = 0;
        for (int i = 0; i < n; ++i) {
            current += diff[i];
            if (current < nums[i]) {
                return false;
            }
        }

        return true;
    }
};",1454822978
vivaan_77,vivaan_77,250,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int n = nums.size();
        int sum = accumulate(nums.begin(), nums.end(), 0);
        int curr = 0;
        int ans =0;
        for(int i=0; i<n; i++)
        {
            curr += nums[i];
            if(nums[i] == 0)
            {
                if(curr == sum - curr )
                {
                    ans += 2;
                }
                if( curr + 1 == sum - curr || curr - 1 == sum - curr) ans++;
            }
        }
        return ans;
    }
};",1454810130
vivaan_77,vivaan_77,250,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        vector<int> pf(n+1);
        for(int i=0; i<queries.size(); i++)
        {
            pf[queries[i][0]]++;
            pf[queries[i][1] + 1]--;
        }
        for(int i=1; i<n; i++)
        {
            pf[i] += pf[i-1];
        }
        for(int i=0; i<n; i++)
        {
            if(pf[i] < nums[i]) return 0;
        }
        return 1;
    }
};",1454815084
vivaan_77,vivaan_77,250,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        int low = 0, high = queries.size();
        auto p = [&](int mid)
        {
          vector<int> pf(n+1);
        for(int i=0; i<mid; i++)
        {
            pf[queries[i][0]]+= queries[i][2];
            pf[queries[i][1] + 1]-= queries[i][2];
        }
        for(int i=1; i<n; i++)
        {
            pf[i] += pf[i-1];
        }
        for(int i=0; i<n; i++)
        {
            if(pf[i] < nums[i]) return 0;
        }
        return 1;  
        };
        int ans = -1;
        while(low <= high)
        {
            int mid = low + (high - low)/2;
            if(p(mid))
            {
                ans = mid;
                high = mid - 1;
            }
            else
            {
                low = mid  +1;
            }
        }
        return ans;
    }
};",1454822990
yashwanth73,yashwanth73,251,3616,java,"class Solution {
    public int countValidSelections(int[] nums) {
        int ans = 0;
        int sum = 0;
        for(int num : nums)
            sum += num;
        int curr = 0;
        for(int num : nums) {
            curr += num;
            if((sum-curr == sum/2 || curr == sum/2) && num == 0) {
                if(sum%2 == 0)
                    ans+=2;
                else 
                    ans+=1;
            }
        }
        return ans;
    }
}",1454809500
yashwanth73,yashwanth73,251,3639,java,"class Solution {
    public boolean isZeroArray(int[] nums, int[][] queries) {
        int n = nums.length, m = queries.length;
        int[] arr = new int[n];
        for(int i=0;i<m;i++) {
            int start = queries[i][0], end = queries[i][1];
            arr[start]-=1;
            if(end<n-1)
                arr[end+1]+=1;
        }
        int curr = 0;
        for(int i=0;i<n;i++) {
            curr+=arr[i];
            if(nums[i]+curr>0)
                return false;
        }
        return true;
    }
}",1454815122
yashwanth73,yashwanth73,251,3643,java,"class Solution {
    public int minZeroArray(int[] nums, int[][] queries) {
        int sum = 0;
        for(int num : nums)
            sum+=num;
        if(sum == 0)
            return 0;
        int m = queries.length;
        int low = 0, high = m-1;
        while(low<=high) {
            int mid = (low+high)>>1;
            if(isPossible(mid, nums, queries))
                high = mid-1;
            else
                low = mid+1;
        }
        if(low == m)
            return -1;
        return low+1;
    }

    private boolean isPossible(int ind, int[] nums, int[][] queries) {
        int n = nums.length, m = queries.length;
        int[] arr = new int[n];
        for(int i=0;i<=ind;i++) {
            int start = queries[i][0], end = queries[i][1], val = queries[i][2];
            arr[start]-=val;
            if(end<n-1)
                arr[end+1]+=val;
        }
        int curr = 0;
        for(int i=0;i<n;i++) {
            curr+=arr[i];
            if(nums[i]+curr>0)
                return false;
        }
        return true;
    }
}",1454823023
chinesedfan,chinesedfan,253,3616,javascript,"/**
 * @param {number[]} nums
 * @return {number}
 */
var countValidSelections = function(nums) {
    const n = nums.length
    let c = 0
    for (let i = 0; i < n; i++) {
        if (!nums[i]) {
            if (check(i, 1)) c++
            if (check(i, -1)) c++
                // console.log(i, c)
        }
    }
    return c

    function check(i, d) {
        const arr = nums.slice()
        while (i >= 0 && i < n) {
            if (arr[i]) {
                arr[i]--
                d = -d
            }
            i += d
        }
        for (let i = 0; i < n; i++) {
            if (arr[i]) return 0
        }
        return 1
    }
};",1454809272
chinesedfan,chinesedfan,253,3639,javascript,"/**
 * @param {number[]} nums
 * @param {number[][]} queries
 * @return {boolean}
 */
var isZeroArray = function(nums, queries) {
    const n = nums.length
    const diff = Array(n + 1).fill(0)
    for (let i = 0; i < n; i++) {
        diff[i] = nums[i] - (nums[i - 1] || 0)
    }
    // console.log(diff)
    for (let [l, r] of queries) {
        diff[l] -= 1
        diff[r + 1] += 1
    }
    // console.log(diff)
    let now = 0
    for (let i = 0; i < n; i++) {
        now += diff[i]
        if (now > 0) return false
    }
    return true
};",1454815131
chinesedfan,chinesedfan,253,3643,javascript,"/**
 * @param {number[]} nums
 * @param {number[][]} queries
 * @return {number}
 */
var minZeroArray = function(nums, queries) {
    const n = nums.length
    const odiff = Array(n + 1).fill(0)
    for (let i = 0; i < n; i++) {
        odiff[i] = nums[i] - (nums[i - 1] || 0)
    }
    // console.log(diff)
    // console.log(check(1))
    const r = binarySearch(0, queries.length, k => !check(k)) + 1
    return r > queries.length ? -1 : r

    function check(k) {
        const diff = odiff.slice()
        for (let i = 0; i < k; i++) {
            const [l, r, x] = queries[i]
        // }
        // for (let [l, r] of queries) {
            diff[l] -= x
            diff[r + 1] += x
        }
        // console.log(diff)
        let now = 0
        for (let i = 0; i < n; i++) {
            now += diff[i]
            if (now > 0) return false
        }
        return true
    }
};
function binarySearch(l, r, fn) {
    while (l <= r) {
        const m = Math.floor((l + r) / 2)
        if (fn(m)) {
            l = m + 1
        } else {
            r = m - 1
        }
    }
    return r
}",1454823052
nickee1942,nickee1942,254,3616,java,"class Solution {
    int n;
    public int countValidSelections(int[] nums) {
        int res = 0;
        n = nums.length;
        for(int i = 0; i < n; i++){
            if(nums[i] == 0){
                if(check(nums, i, -1))
                   res++;
                if(check(nums, i, 1))
                    res++;
            }
        }
        return res;
    }
    boolean check(int[] nums, int idx, int dir){
        int[] arr = new int[n];
        for(int i = 0; i < n; i++){
            arr[i] = nums[i];
        }
        while(true){
            if(idx < 0 || idx == n)
                break;
            if(arr[idx] == 0){
                idx += dir;
            }else if(arr[idx] > 0){
                arr[idx] --;
                dir *= -1;
                idx += dir;
            }
        }
        for(int i = 0; i < n; i++){
            if(arr[i] != 0){
                return false;
            }
        }
        return true;
    }
}",1454812171
nickee1942,nickee1942,254,3639,java,"class Solution {
    public boolean isZeroArray(int[] nums, int[][] queries) {
        int n = nums.length;
        int[] arr = new int[n + 1];
        for(int[] q : queries){
            int l = q[0];
            int r = q[1];
            arr[l] --;
            arr[r + 1] ++;
        }
        int curr = 0;
        for(int i = 0; i < n; i++){
            curr += arr[i];
            if(nums[i] + curr > 0)
                return false;
        }
        return true;
    }
}",1454818521
nickee1942,nickee1942,254,3643,java,"class Solution {
    int n, m;
    public int minZeroArray(int[] nums, int[][] queries) {
        n = nums.length;
        m = queries.length;
        int[] arr = new int[n + 1];
        int l = 0;
        int r = m;
        while(l < r){
            int mid = l + r >> 1;
            if(check(nums, queries, mid)){
                r = mid;
            }else{
                l = mid + 1;
            }
        }
        if(l == m)
            return check(nums, queries, m) ? m : -1;
        return l;
    }
    boolean check(int[] nums, int[][] q, int k){
        int[] arr = new int[n + 1];
        for(int i = 0; i < k; i++){
            int l = q[i][0];
            int r = q[i][1];
            int val = q[i][2];
            arr[l] -= val;
            arr[r + 1] += val;
        }
        int curr = 0;
        for(int i = 0; i < n; i++){
            curr += arr[i];
            if(nums[i] + curr > 0)
                return false;
        }
        return true;
    }
}",1454830232
Samay_OP69,Samay_OP69,255,3616,cpp,"class Solution {
public:
    bool isValid(vector<int> nums, int start, int direction) {
    int n = nums.size();
    int curr = start;

    while (curr >= 0 && curr < n) {
        if (nums[curr] == 0) {
            curr += direction; // Move in the current direction
        } else if (nums[curr] > 0) {
            nums[curr]--;        // Decrement the value
            direction = -direction; // Reverse direction
            curr += direction;  // Move in the new direction
        }
    }

    // Check if all elements are 0
    for (int num : nums) {
        if (num != 0) return false;
    }
    return true;
}

int countValidSelections(vector<int>& nums) {
    int n = nums.size();
    int ans = 0;

    for (int i = 0; i < n; ++i) {
        if (nums[i] == 0) {
            // Test both directions (left and right)
            if (isValid(nums, i, -1)) {
                ans++;
            }
            if( isValid(nums, i, 1)) ans++;
        }
    }

    return ans;
}

    
};",1454823134
Samay_OP69,Samay_OP69,255,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        vector<int> diff(n + 1, 0); // Difference array for sweep line

        // Apply each query to the difference array
        for (const auto& q : queries) {
            int l = q[0], r = q[1];
            diff[l] -= 1;            // Start decrement at index l
            if (r + 1 < n) {
                diff[r + 1] += 1;    // End decrement after index r
            }
        }

        // Apply the difference array to nums
        for (int i = 0, decrement = 0; i < n; ++i) {
            decrement += diff[i];
            nums[i] += decrement;
        }
        // for(auto i:nums) cout<<i<<"" "";
        // cout<<endl;
        // Check if all elements are zero
        for (int num : nums) {
            if (num > 0) return false;
        }
        return true;
    }
};",1454810048
Samay_OP69,Samay_OP69,255,3643,cpp,"class Solution {
public:
    bool canTransform(vector<int>& nums, vector<vector<int>>& queries, int k) {
        int n = nums.size();
        vector<int> diff(n + 1, 0); // Difference array for sweep line

        // Apply the first k queries to the difference array
        for (int i = 0; i < k; ++i) {
            int l = queries[i][0], r = queries[i][1], val = queries[i][2];
            diff[l] -= val;           // Start decrementing by val at index l
            if (r + 1 < n) {
                diff[r + 1] += val;   // End decrementing after index r
            }
        }

        // Apply the difference array and check if nums can become a Zero Array
        vector<int> vec(nums); // Store the array for debugging midway
        for (int i = 0, decrement = 0; i < n; ++i) {
            decrement += diff[i];     // Accumulate the effect of difference array
            vec[i] += decrement;
            if (vec[i] < 0) vec[i] = 0; // Cap values to non-negative
        }
        
        // for (int num : nums) {
            // if (num > 0) return false;
        // }
        // return true;
        // Check if all elements are zero
        return all_of(vec.begin(), vec.end(), [](int x) { return x == 0; });
    }
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
         int left = 0, right = queries.size();
        int n = nums.size();
        int result = -1;

        while (left <= right) {
            int mid = left + (right - left) / 2;
            if (canTransform(nums, queries, mid)) {
                result = mid;         // Found a valid k
                right = mid - 1;      // Try for a smaller k
            } else {
                left = mid + 1;       // Increase k
            }
        }

        return result;
    }
};",1454816391
sherlock,harry_8,256,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:

        import copy as cp
        ans=0
        n=len(nums)
        for i in range(n):
            if nums[i]:
                continue
            m=-1
            j=i
            temp=cp.copy(nums)
            while j>-1 and j<n:
                if temp[j]>0:
                    temp[j]-=1
                    if m==-1:
                        m=1
                    else:
                        m=-1
                j+=m
            ct=temp.count(0)
            if ct==n:
                ans+=1
            m=1
            j=i
            temp=cp.copy(nums)
            while j>-1 and j<n:
                if temp[j]>0:
                    temp[j]-=1
                    if m==-1:
                        m=1
                    else:
                        m=-1
                j+=m
            ct=temp.count(0)
            if ct==n:
                ans+=1
        return ans
            ",1454812786
sherlock,harry_8,256,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:

        n=len(nums)
        pr=[0]*(n+1)
        for i in range(len(queries)):
            pr[queries[i][0]]+=1
            pr[queries[i][1]+1]-=1
        # print(pr)
        for i in range(1,n+1):
            pr[i]+=pr[i-1]
        # print(pr)
        for i in range(n):
            if nums[i]>pr[i]:
                return False
        return True",1454822647
sherlock,harry_8,256,3643,python3,"class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:

        def check(m):
            n=len(nums)
            pr=[0]*(n+1)
            for i in range(m):
                pr[queries[i][0]]+=queries[i][2]
                pr[queries[i][1]+1]-=queries[i][2]
            # print(pr)
            for i in range(1,n+1):
                pr[i]+=pr[i-1]
            # print(pr)
            for i in range(n):
                if nums[i]>pr[i]:
                    return False
            return True

        l,r=0,len(queries)
        ans=-1
        while l<=r:
            m=(l+r)//2
            if check(m):
                ans=m
                r=m-1
            else:
                l=m+1
        return ans",1454830280
czjnbb,czjnbb,257,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        
        sums = sum(nums)
        res = 0
        cur = 0
        
        for i, n in enumerate(nums):
            
            cur += n
            if n == 0:
                if cur == sums - cur:
                    res += 2
                elif abs(cur * 2 - sums) == 1:
                    res += 1
        
        return res",1454811410
czjnbb,czjnbb,257,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        
        d = defaultdict(int)
        for l,r in queries:
            d[l] += 1
            d[r + 1] -= 1
            
        leng = len(nums)
        cur = 0
        
        for i,n in enumerate(nums):
            cur += d[i]
            if n > cur:
                return False
            
        return True",1454806566
czjnbb,czjnbb,257,3643,python3,"class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        
        def check(m):
            
            d = defaultdict(int)
            for l,r,v in queries[:m]:
                d[l] += v
                d[r + 1] -= v
                
            cur = 0
        
            for i,n in enumerate(nums):
                cur += d[i]
                if n > cur:
                    return False
            
            return True
            
            
            
        leng = len(queries)
        l = 0
        r = leng
        
        while l <= r:
            m = (l + r) // 2
            if check(m):
                r = m - 1
            else:
                l = m + 1
                
        return r + 1 if r + 1 <= leng else -1
        
            
        
        ",1454816320
pikapika,pikapika123,258,3616,python3,"from typing import List


class Solution:
    def countValidSelections(self, a: List[int]) -> int:
        n = len(a)
        ans = 0

        def valid(cur, d):
            arr = a[::]
            while 0 <= cur < n:
                if arr[cur] == 0:
                    cur += d
                else:
                    arr[cur] -= 1
                    d *= -1
                    cur += d
            return all(x == 0 for x in arr)

        for i in range(n):
            if a[i] != 0:
                continue
            if valid(i, -1):
                ans += 1
            if valid(i, 1):
                ans += 1
        return ans",1454816549
pikapika,pikapika123,258,3639,python3,"from typing import List


class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        n = len(nums)
        a = [0] * (n + 1)
        for l, r in queries:
            a[l] += 1
            a[r + 1] -= 1
        for i in range(1, n + 1):
            a[i] += a[i - 1]
        return all(nums[i] <= a[i] for i in range(n))
",1454822382
pikapika,pikapika123,258,3643,python3,"from typing import List


class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        n = len(nums)

        def valid(k):
            a = [0] * (n + 1)
            for i in range(k):
                l, r, v = queries[i]
                a[l] += v
                a[r + 1] -= v
            for i in range(1, n + 1):
                a[i] += a[i - 1]
            return all(nums[i] <= a[i] for i in range(n))

        left, right = 0, len(queries) + 1
        while left < right:
            m = (left + right) // 2
            if valid(m):
                right = m
            else:
                left = m + 1
        return left if left <= len(queries) else -1",1454830412
Vladislav,timetoai,259,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        s = sum(nums)
        cur = 0
        ret = 0
        for st in range(len(nums)):
            cur += nums[st]
            if nums[st] == 0:
                l, r = cur, s - cur
                ret += int(l == r) * 2 + int(l + 1 == r) + int(l == r + 1)
        return ret",1454807457
Vladislav,timetoai,259,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        n = len(nums)
        dec = [0] * (n + 1)
        for l, r in queries:
            dec[l] += 1
            dec[r + 1] -= 1
        cur = 0
        for i in range(n):
            cur += dec[i]
            nums[i] -= cur
            if nums[i] > 0:
                return False
        return True",1454810472
Vladislav,timetoai,259,3643,python3,"class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        def check(qnum):
            dec = [0] * (n + 1)
            for l, r, v in queries[:qnum]:
                dec[l] += v
                dec[r + 1] -= v
            cur = 0
            for i in range(n):
                cur += dec[i]
                if nums[i] - cur > 0:
                    return False
            return True
            
        n = len(nums)
        lq, rq = 0, len(queries)
        while lq < rq:
            mq = (lq + rq) // 2
            if check(mq):
                rq = mq
            else:
                lq = mq + 1
        return lq if check(lq) else - 1",1454816426
Ruoqi,ruoqihuang,261,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        s = sum(nums)
        c = 0
        ans = 0
        for i in nums:
            c += i
            if i == 0:
                if c == s - c:
                    ans += 2
                elif abs(s - c - c)==1:
                    ans += 1
        return ans
                
            ",1454808534
Ruoqi,ruoqihuang,261,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        n = len(nums)
        qq = [0] * n
        for l, r in queries:
            qq[l] += 1
            if r < n-1:
                qq[r+1] -= 1
        c = 0
        for i in range(n):
            c += qq[i]
            if c < nums[i]:
                return False
        return True
                
            
        ",1454820156
Ruoqi,ruoqihuang,261,3643,python3,"class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        n = len(nums)
        def check(k):
            qq = [0] * n
            for i in range(k):
                l, r, v = queries[i]
                qq[l] += v
                if r < n-1:
                    qq[r+1] -= v
            c = 0
            for i in range(n):
                c += qq[i]
                if c < nums[i]:
                    return False
            return True

        l, r = 0, len(queries)
        ans = -1
        while l <= r:
            m = (l + r)//2
            if check(m):
                ans = m
                r = m - 1
            else:
                l = m + 1
        return ans",1454830487
SayA,usaya,262,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        n = len(nums)
        pre = [0] * (n + 1)
        for i in range(n):
            pre[i + 1] = pre[i] + nums[i]
        suf = [0] * (n + 1)
        for i in range(n - 1, -1, -1):
            suf[i] = suf[i + 1] + nums[i]
        ans = 0
        for i, x in enumerate(nums):
            if x == 0:
                if pre[i] == suf[i]:
                    ans += 2
                elif abs(pre[i] - suf[i]) == 1:
                    ans += 1
        return ans",1454807424
SayA,usaya,262,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        n = len(nums)
        diff = [0] * n

        for l, r in queries:
            diff[l] += 1
            if r + 1 < n:
                diff[r + 1] -= 1
        
        cnt = [0] * n
        cur = 0
        for i in range(n):
            cur += diff[i]
            cnt[i] = cur
        
        return all(x <= y for x, y in zip(nums, cnt))",1454817051
SayA,usaya,262,3643,python3,"class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        n, m = len(nums), len(queries)

        def check(k):
            diff = [0] * (n + 1)
            for l, r, val in queries[:k]:
                diff[l] += val
                diff[r + 1] -= val
            tot = 0
            for i in range(n):
                tot += diff[i]
                if tot < nums[i]:
                    return False
            return True

        left, right = 0, m
        while left <= right:
            mid = (left + right) // 2
            if check(mid):
                right = mid - 1
            else:
                left = mid + 1
        return left if left <= m else -1",1454823453
Irfan Ukani,irfanukani,265,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int n = nums.size();
        vector<int> prefix(n + 1, 0);
        for(int i = 1; i <= n; i++) {
            prefix[i] = prefix[i - 1] + nums[i - 1];
        }

        // 1 0 2 0 3
        // 0 1 1 3 3 6
        int ans = 0;
        for(int i = 1; i <= n; i++) {
            if(nums[i - 1] == 0) {
                int left = prefix[i];
                int right = prefix.back() - prefix[i];
                if(left == right) {
                    ans += 2;
                }
                if(abs(right - left) == 1) {
                    ans += 1;
                }
            }
        }
        return ans;
    }
};",1454809527
Irfan Ukani,irfanukani,265,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        vector<int> maxSub(n + 1, 0);
        for(auto q : queries) {
            maxSub[q[0]] += 1;
            maxSub[q[1] + 1] -= 1;
        }
        for(int i = 1; i <= n; i++) {
            maxSub[i] += maxSub[i - 1];
        }
        for(int i = 0; i < nums.size(); i++) {
            if(nums[i] > maxSub[i]) return false;
        }
        return true;
    }
};",1454813240
Irfan Ukani,irfanukani,265,3643,cpp,"class Solution {
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries, int k) {
        int n = nums.size();
        vector<int> maxSub(n + 1, 0);
        for (int j = 0; j <= (k); j++) {
            vector<int> q = queries[j];
            maxSub[q[0]] += q[2];
            maxSub[q[1] + 1] -= q[2];
        }
        for (int i = 1; i <= n; i++) {
            maxSub[i] += maxSub[i - 1];
        }
        for (int i = 0; i < nums.size(); i++) {
            if (nums[i] > maxSub[i])
                return false;
        }
        return true;
    }

public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = queries.size();
        bool ok = true;
        for(auto &x : nums) {
            if(x != 0) ok = false;
        }
        if(ok) return 0;
        
        int left = 0, right = n - 1, ans = -1;
        while(left <= right) {
            int mid = (left + right) >> 1;
            if(isZeroArray(nums, queries, mid)) {
                ans = mid;
                right = mid - 1;
            }else{
                left = mid + 1;
            }
        }
        if(ans == -1) return -1;
        return ans + 1;
    }
};",1454823738
ohnoaibano,ohnoaibano,267,3616,python,"class Solution(object):
    def countValidSelections(self, nums):
        """"""
        :type nums: List[int]
        :rtype: int
        """"""
        n = len(nums)
        
        acc = []
        cur = 0
        for i in nums:
            cur += i
            acc.append(cur)
        asum = sum(nums)
        total = 0
        for i in range(n):
            if nums[i] == 0:
                left = acc[i]
                right = asum - left
                if left == right:
                    total += 2
                elif abs(left-right) == 1:
                    total += 1
        
        return total",1454815622
ohnoaibano,ohnoaibano,267,3639,python,"class Solution(object):
    def isZeroArray(self, nums, queries):
        """"""
        :type nums: List[int]
        :type queries: List[List[int]]
        :rtype: bool
        """"""
        
        amap = {}
        for a,b in queries:
            if not a in amap:
                amap[a] = 0
            if not b+1 in amap:
                amap[b+1] = 0
            amap[a] += 1
            amap[b+1] -= 1
        
        acc = 0
        
        n = len(nums)
        alist = []
        for i in range(n):
            if i in amap:
                acc += amap[i]
            
            alist.append(acc)
            if acc < nums[i]:
                return False
        
        return True
        # for i in range(n)",1454824057
ohnoaibano,ohnoaibano,267,3643,python,"class Solution(object):
    def minZeroArray(self, nums, queries):
        """"""
        :type nums: List[int]
        :type queries: List[List[int]]
        :rtype: int
        """"""
        
        start = 0
        end = len(queries)
        
        while(start+1<end):
            mid = (start+end)//2
            if self.h(nums, queries, mid):
                end = mid
            else:
                start = mid
        
        if self.h(nums, queries, start):
            return start
        if self.h(nums, queries, end):
            return end
        return -1
        
    
    def h(self, nums, queries, k):
        amap = {}
        
        for i in range(k):
            a,b,val = queries[i]
        # for a,b,val in queries:
            if not a in amap:
                amap[a] = 0
            if not b+1 in amap:
                amap[b+1] = 0
            amap[a] += val
            amap[b+1] -= val
        
        acc = 0
        
        n = len(nums)
        alist = []
        for i in range(n):
            if i in amap:
                acc += amap[i]
            
            alist.append(acc)
            if acc < nums[i]:
                return False
        
        return True",1454831021
Arnab,arnab_97,268,3616,java,"class Solution {
    public int countValidSelections(int[] nums) {
       int n = nums.length;
        int count = 0;
        
       
        for(int i=0; i<n; i++) {
            if(nums[i] !=0) continue;
            
            for(int dir = -1; dir <=1; dir +=2) { 
              
                int[] temp = nums.clone();
                
                int curr = i;
                int currentDir = dir;
                
                while(curr >=0 && curr <n) {
                    if(temp[curr] ==0) {
                        // Move in current direction
                        curr += currentDir;
                    }
                    else if(temp[curr] >0){
                        // Decrement and reverse direction
                        temp[curr]--;
                        currentDir = -currentDir;
                        curr += currentDir;
                    }
                }
                
                boolean allZero = true;
                for(int val : temp) {
                    if(val !=0) {
                        allZero = false;
                        break;
                    }
                }
                if(allZero) count++;
            }
        }
        
        return count; 
    }
}",1454825032
Arnab,arnab_97,268,3639,java,"class Solution {
    public boolean isZeroArray(int[] nums, int[][] queries) {
        int n = nums.length;
        int[] coverage = new int[n + 1];
        
        for (int[] query : queries) {
            int li = query[0];
            int ri = query[1];
            coverage[li] += 1;
            if (ri + 1 < coverage.length) {
                coverage[ri + 1] -= 1;
            }
        }
        for (int i = 1; i < n; i++) {
            coverage[i] += coverage[i - 1];
        }
        for (int i = 0; i < n; i++) {
            if (coverage[i] < nums[i]) {
                return false;
            }
        }
        
        return true;
    }
}",1454828048
Arnab,arnab_97,268,3643,java,"class Solution {
    public int minZeroArray(int[] nums, int[][] queries) {
        int n = nums.length;
        int q = queries.length;
        int[] l = new int[q];
        int[] r = new int[q];
        int[] val = new int[q];
        for(int i=0;i<q;i++) {
            l[i] = queries[i][0];
            r[i] = queries[i][1];
            val[i] = queries[i][2];
        }
        
        int left = 0;
        int right = q;
        int answer = -1;
        while(left <= right){
            int mid = left + (right - left)/2;
            if(canZero(mid, nums, l, r, val, n)){
                answer = mid;
                right = mid -1;
            }
            else{
                left = mid +1;
            }
        }
        return answer;
    }
    
    private boolean canZero(int k, int[] nums, int[] l, int[] r, int[] val, int n){
        if(k ==0){
            for(int num : nums){
                if(num >0) return false;
            }
            return true;
        }
        int[] diff = new int[n+1];
        for(int i=0;i<k;i++){
            diff[l[i]] += val[i];
            if(r[i]+1 < n){
                diff[r[i]+1] -= val[i];
            }
        }
        long sum =0;
        for(int i=0;i<n;i++){
            sum += diff[i];
            if(sum < nums[i]){
                return false;
            }
        }
        return true;
    }
}",1454831043
Vihari Vemuri,TheZwischenzug,269,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        def is_valid(arr, curr, sgn):
            arr = list(arr)
            while curr >= 0 and curr < len(arr):
                if arr[curr] == 0:
                    curr = curr+sgn
                else:
                    arr[curr] -= 1
                    sgn = -1*sgn
                    curr = curr+sgn
                    
            return sum(arr) == 0
        cnt = 0
        for i in range(len(nums)):
            if nums[i] != 0:
                continue
            for sgn in [-1, 1]:
                if is_valid(nums, i, sgn):
                    cnt += 1
        return cnt
                    ",1454811382
Vihari Vemuri,TheZwischenzug,269,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        def canMakeZero(nums, queries):
            n = len(nums)
            arr = [0]*(n+1)
            for l,r,v in queries:
                arr[l] += v
                arr[r+1] -= v
            for i in range(1,n):
                arr[i] += arr[i-1]

            for i in range(n):
                if arr[i] < nums[i]:
                    return False
            return True

        q_new = [ (l, r, 1) for (l,r) in queries]
        return canMakeZero(nums, q_new)",1454823889
Vihari Vemuri,TheZwischenzug,269,3643,python3,"class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        if sum(nums) == 0:
            return 0
        def canMakeZero(nums, queries):
            n = len(nums)
            arr = [0]*(n+1)
            for l,r,v in queries:
                arr[l] += v
                arr[r+1] -= v
            for i in range(1,n):
                arr[i] += arr[i-1]

            for i in range(n):
                if arr[i] < nums[i]:
                    return False
            return True

        left = 1
        right = len(queries)
        k = None
        while left <= right:
            mid = (left+right)//2
            if canMakeZero(nums, queries[0:mid]):
                k = mid
                right = mid-1
            else:
                left = mid+1
        if k is None:
            return -1
        else:
            return k
",1454822309
Suyash Mishra,suyasho786,270,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& a) {
        int n = a.size(), c = 0;
        auto f = [&](int p, int d) {
            vector<int> b = a;
            while (p >= 0 && p < n) {
                if (b[p] == 0) p += d;
                else b[p]--, d = -d, p += d;
            }
            return count(b.begin(), b.end(), 0) == n;
        };
        for (int i = 0; i < n; i++) if (a[i] == 0) c += f(i, 1) + f(i, -1);
        return c;
    }
};",1454805417
Suyash Mishra,suyasho786,270,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& a, vector<vector<int>>& q) {
        int n = a.size();
        vector<int> d(n + 1, 0);
        for (auto& x : q) d[x[0]]++, d[x[1] + 1]--;
        for (int i = 1; i < n; i++) d[i] += d[i - 1];
        for (int i = 0; i < n; i++) if (a[i] > d[i]) return 0;
        return 1;
    }
};",1454807526
Suyash Mishra,suyasho786,270,3643,cpp,"class Solution {
public:
    int n, m;
    bool isValid(int k, vector<int> &a, vector<vector<int>> &q){
        
        vector<long long> temp_d(n + 1, 0); 
        for (int i = 0; i < k; i++) {
            int l = q[i][0], r = q[i][1], v = q[i][2];
            temp_d[l] += v;
            if (r + 1 < n) temp_d[r + 1] -= v;
        }
        
        long long curr_sum = 0;
        vector<int> temp_a = a;
        for (int i = 0; i < n; i++) {
            curr_sum += temp_d[i];
            if (curr_sum < temp_a[i]) return 0;
            temp_a[i] -= curr_sum;
        }

        return all_of(temp_a.begin(), temp_a.end(), [](int x) { return x <= 0; });
    }
    int minZeroArray(vector<int>& a, vector<vector<int>>& q) {
        n = a.size(), m = q.size();
        bool f = 1;
        for(auto it : a){
            f &= (it == 0);
        }
        if(f)return 0;
        int low = 1, high = m, ans = -1;
        while (low <= high) {
            int mid = low + (high - low) / 2;
            if (isValid(mid, a, q)) {
                ans = mid;
                high = mid - 1;
            } else {
                low = mid + 1;
            }
        }

        return ans;
    }
};",1454823896
thedude7181,thedude7181,272,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        res = 0
        prefix = 0
        suffix = sum(nums)
        for num in nums:
            suffix -= num
            if num == 0 and prefix == suffix:
                res += 2
            if num == 0 and abs(prefix - suffix) == 1:
                res += 1
            prefix += num
        return res ",1454817434
thedude7181,thedude7181,272,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        ranges = [0] * (len(nums) + 1)
        for l, r in queries:
            ranges[l] += 1
            ranges[r + 1] -= 1
        cur = 0
        for i in range(len(nums)):
            cur += ranges[i]
            if cur < nums[i]:
                return False
        return True",1454824325
thedude7181,thedude7181,272,3643,python3,"class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        def isZeroArray(nums: List[int], queries: List[List[int]]) -> bool:
            ranges = [0] * (len(nums) + 1)
            for l, r, val in queries:
                ranges[l] += val
                ranges[r + 1] -= val
            cur = 0
            for i in range(len(nums)):
                cur += ranges[i]
                if cur < nums[i]:
                    return False
            return True
        
        if not isZeroArray(nums, queries):
            return -1
        
        lo = 0 
        hi = len(queries)
        while lo < hi:
            mid = (lo + hi) // 2
            if isZeroArray(nums, queries[:mid]):
                hi = mid
            else:
                lo = mid + 1
        return lo",1454831178
Kush Gosalia,kush223,273,3616,cpp,"class Solution {
public:
    bool fun(vector<int> nums, int side, int pos){
        while(1){
            if(pos<0 || pos==nums.size()) break;
            if(nums[pos]==0){
                if(side==0) pos--;
                else pos++;
            }
            else{
                nums[pos]--;
                if(side==0) pos++;
                else pos--;
                side=1-side;
            }
        }
        int f=0;
        for(int i=0;i<nums.size();i++){
            // cout<<nums[i]<<"" "";
            if(nums[i]!=0){
                f=1;
                break;
            }
        }
        // cout<<endl;
        if(f==1) return 0;
        return 1;
    }
    int countValidSelections(vector<int>& nums) {
        int ans=0;
        for(int i=0;i<nums.size();i++){
            if(nums[i]==0){
                bool o1= fun(nums,0,i);
                bool o2= fun(nums,1,i);
                if(o1) ans++;
                if(o2) ans++;
            }
        }
        return ans;
    }
};",1454817194
Kush Gosalia,kush223,273,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        vector<int> v(nums.size()+1,0);
        for(int i=0;i<queries.size();i++){
            v[queries[i][0]]++;
            v[queries[i][1]+1]--;
        }
        for(int i=1;i<nums.size();i++){
            v[i]+=v[i-1];
        }
        
        for(int i=0;i<nums.size();i++){
            if(nums[i]-v[i]>0) return false;
        }
        return true;
    }
};",1454824026
Kush Gosalia,kush223,273,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        
        int l=0, r=queries.size(),ans=-1;
        while(l<=r){
            int mid=(l+r)/2;
            vector<int> v(nums.size()+1,0);
            for(int i=0;i<mid;i++){
                v[queries[i][0]]+=queries[i][2];
                v[queries[i][1]+1]-=queries[i][2];
            }
            for(int i=1;i<nums.size();i++){
                v[i]+=v[i-1];
            }
            int f=0;
            for(int i=0;i<nums.size();i++){
                if(nums[i]-v[i]>0){
                    f=1;
                    break;
                }
            }
            if(f==1){
                l=mid+1;
            }
            else{
                ans=mid;
                r=mid-1;
            }
        }
        return ans;
    }
};",1454831200
Atul,coderchamp07,275,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int n = nums.size();
        vector<int> rSum(n, 0);
        for(int i = n - 1; i >= 0; i--)
            rSum[i] = (i + 1 < n ? rSum[i + 1] : 0) + nums[i];

        int ans = 0;
        int lSum = 0;
        for(int i = 0; i < n; i++) {
            if(nums[i] == 0) {
                if(lSum == rSum[i])
                    ans += 2;
                else if(abs(lSum - rSum[i]) == 1)
                    ans++;
            }
            lSum += nums[i];
        }
        return ans;
    }
};",1454808558
Atul,coderchamp07,275,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        vector<int> ops(n + 1, 0);

        for(auto& q : queries)
            ops[q[0]]++, ops[q[1] + 1]--;

        int cur = 0;
        for(int i = 0; i < n; i++) {
            cur += ops[i];
            if(nums[i] > cur)
                return false;
        }
        return true;
    }
};",1454811273
Atul,coderchamp07,275,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        int q = queries.size();

        auto poss = [&](int M) -> bool {
            vector<int> ops(n + 1, 0);
            for(int i = 0; i < M; i++)
                ops[queries[i][0]]+=queries[i][2], ops[queries[i][1] + 1]-=queries[i][2];
    
            int cur = 0;
            for(int i = 0; i < n; i++) {
                cur += ops[i];
                if(nums[i] > cur)
                    return false;
            }
            return true;
        };

        int l = 0;
        int r = q;
        while(l <= r) {
            int m = (l + r) / 2;
            if(poss(m))
                r = m - 1;
            else
                l = m + 1;
        }
        if(l == q + 1)
            l = -1;
        return l;
    }
};",1454817220
Shuqi Shang,sshang,276,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        
        total = sum(nums)
        
        cur = 0
        res = 0
        for i, num in enumerate(nums):
            cur += num
            if num == 0:
                if total - cur == cur:
                    res += 2
                elif abs(total - cur * 2) == 1:
                    res += 1
        return res",1454810500
Shuqi Shang,sshang,276,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        
        n = len(nums)
        diff = [0] * (n + 1)
        
        for l, r in queries:
            diff[l] += 1
            diff[r + 1] -= 1
            
        cur = 0
        for i, num in enumerate(nums):
            cur += diff[i]
            if num > cur:
                return False
            
        return True",1454815679
Shuqi Shang,sshang,276,3643,python3,"class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        
        total = sum(nums)
        if total == 0:
            return 0
        
        n = len(nums)
        diff = [0] * (n + 1)
        
        i, cur = 0, 0
        for j in range(len(queries)):
            l, r, val = queries[j]
            
            diff[l] += val
            diff[r + 1] -= val
            
            if l <= i:
                cur += val
                if r < i:
                    cur -= val
            
            while i < n and cur >= nums[i]:
                i += 1
                cur += diff[i]
                
            if i == n:
                return j + 1
        return -1",1454831317
Orz,retired_kid,277,3616,java,"class Solution {
    public int countValidSelections(int[] nums) {
        int n = nums.length, ans = 0;
        int[] dr = new int[] {-1, 1};
        for (int i = 0; i < n; i++) {
            if (nums[i] != 0) continue;
            for (int k = 0; k < 2; k++) {
                int d = k;
                int j = i;
                int[] a = Arrays.copyOf(nums, n);
                while (j >= 0 && j < n) {
                    if (a[j] == 0) {
                        j += dr[d];
                    } else if (a[j] > 0) {
                        a[j]--;
                        d ^= 1;
                        j += dr[d];
                    }
                }
                if (Arrays.stream(a).max().getAsInt() == 0) {
                    ans++;
                }
            }
        }
        return ans;
    }
}",1454808762
Orz,retired_kid,277,3639,java,"class Solution {
    public boolean isZeroArray(int[] nums, int[][] queries) {
        int n = nums.length;
        int[] dif = new int[n + 5];
        for (int[] q : queries) {
            int l = q[0] + 1, r = q[1] + 1;
            dif[l]++; dif[r + 1]--;
        }
        for (int i = 1; i <= n; i++) {
            dif[i] += dif[i - 1];
            if (dif[i] < nums[i - 1]) return false;
        }
        return true;
    }
}",1454811100
Orz,retired_kid,277,3643,java,"class Solution {
    public int minZeroArray(int[] nums, int[][] queries) {
        int n = nums.length;
        int lo = 0, hi = queries.length, res = -1;
        while (lo <= hi) {
            int mid = lo + hi >> 1;
            int[] dif = new int[n + 5];
            for (int i = 0; i < mid; i++) {
                int l = queries[i][0] + 1, r = queries[i][1] + 1, v = queries[i][2];
                dif[l] += v; dif[r + 1] -= v;
            }
            boolean flg = true;
            for (int i = 1; i <= n; i++) {
                dif[i] += dif[i - 1];
                // System.out.println(dif[i]);
                if (dif[i] < nums[i - 1]) {
                    flg = false; break;
                }
            }
            if (flg) {
                res = mid; hi = mid - 1;
            } else {
                lo = mid + 1;
            }
        }
        return res;
    }
}",1454817294
Jonowo,jonowo,278,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        ans = 0
        n = len(nums)
        for i in range(n):
            if nums[i] == 0:
                l = sum(nums[:i])
                r = sum(nums[i + 1:])
                if l in (r, r + 1):
                    ans += 1
                if r in (l, l + 1):
                    ans += 1
        return ans",1454808400
Jonowo,jonowo,278,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        n = len(nums)
        d = [0] * (n + 1)
        for l, r in queries:
            d[l] -= 1
            d[r + 1] += 1
        d = list(accumulate(d))[:-1]
        for i in range(n):
            nums[i] += d[i]
            if nums[i] > 0:
                return False
        return True
",1454812356
Jonowo,jonowo,278,3643,python3,"class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        n = len(nums)
        q = len(queries)

        def ok(k):
            diff = [0] * (n + 1)
            for l, r, val in queries[:k]:
                diff[l] -= val
                diff[r + 1] += val
            diff = list(accumulate(diff))
            for i in range(n):
                if nums[i] + diff[i] > 0:
                    return False
            return True

        if not ok(q):
            return -1

        left = 0
        right = q
        while left < right:
            mid = (left + right) // 2
            if ok(mid):
                right = mid
            else:
                left = mid + 1
        return left
        ",1454824213
Ayush Saluja,ayuchitsaluja8,279,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int sum = 0 , pre = 0 , ret = 0;
        for(int d: nums) sum += d;
        for(int d: nums){
            pre +=d;
            if(d==0){
                int left = pre, right = sum - pre;
                if(left == right)ret += 2;
                else if(abs(right-left)==1) ret += 1;
            }
        }
        return ret;
    }
};",1454807091
Ayush Saluja,ayuchitsaluja8,279,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        const int n = nums.size();
        vector<int> pre(n+1,0);
        for(vector<int> &query: queries){
            int l = query[0], r = query[1] + 1;
            pre[r]--;
            pre[l]++;
        }
        for(int i=1;i<=n;++i)pre[i] += pre[i-1];
        for(int i=0;i<n;++i)if(nums[i]>pre[i])return false;
        return true;
    }
};",1454809169
Ayush Saluja,ayuchitsaluja8,279,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int low = 0 , high = queries.size(), mid , ans = -1;
        const int n = nums.size();
        vector<long long> pre(n+1,0);
        for(;low<=high;){
            mid = (low + high)/2;
            pre[n] = 0;
            for(int i=0;i<mid;++i)pre[queries[i][0]]+=queries[i][2],pre[queries[i][1]+1]-=queries[i][2];
            bool ok = true;
            for(int i=1;i<=n;++i)pre[i]+=pre[i-1];
            for(int i=0;i<n;++i){
                ok &= pre[i]>=nums[i];
                pre[i] = 0;
            }

            if(ok) ans = mid , high = mid - 1;
            else low = mid + 1;
        }
        return ans;
    }
};",1454817408
Sarthak Goyal,SoarerEternal,280,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
         int n = nums.size();
    int valid_count = 0;
    auto simulate = [&](int start, int direction) {
    vector<int> arr = nums;
    int curr = start;
    while (curr >= 0 && curr < n) {
    if (arr[curr] == 0) {
    curr += direction;
     } else {
      arr[curr]--;
     direction = -direction; 
      curr += direction;
    }}
for (int x : arr) {
            if (x != 0) return false;
        }
        return true;
    };
        for (int i = 0; i < n; ++i) {
        if (nums[i] == 0) {
          
            if (simulate(i, 1)) valid_count++;
            if (simulate(i, -1)) valid_count++;
        }
    }

    return valid_count;
}

};",1454808839
Sarthak Goyal,SoarerEternal,280,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
     vector<int>arr(n,0);
        for(auto it :queries){
            arr[it[0]]--;
            if(it[1]+1 <n)arr[it[1]+1]++;
        }
        for(int i =1;i<n;i++){
            arr[i]=arr[i-1]+arr[i];
        }
        for(int i =0;i<n;i++){
            if(arr[i]+nums[i]>0)return false;
        }
        return true;
    }
};",1454818211
Sarthak Goyal,SoarerEternal,280,3643,cpp,"class Solution {
public:
    bool check(vector<int>&nums,vector<vector<int>>&queries,int mid){
         int n = nums.size();  
     vector<int>arr(n,0);
        for(int i =0;i<mid;i++){
            arr[queries[i][0]]=arr[queries[i][0]]-queries[i][2];
            if(queries[i][1]+1 <n)arr[queries[i][1]+1]+=queries[i][2];
        }
        for(int i =1;i<n;i++){
            arr[i]=arr[i-1]+arr[i];
        }
        for(int i =0;i<n;i++){
            if(arr[i]+nums[i]>0)return false;
        }
        return true;
    }
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
           int n = nums.size();
     int low =0 , high = queries.size();
        int ans =-1;
        while(low<=high){
            int mid = low +(high-low)/2;
            if(check(nums,queries,mid)){
                ans = mid;
                high = mid-1;
            }
            else low = mid+1;
        }
        return ans;
    }
};",1454831546
usualr,timetravel_,282,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int validSelections = 0;
        int n = nums.size();
        
        for (int i = 0; i < n; ++i) {
            if (nums[i] == 0) {
                if (simulate(nums, i, -1)) validSelections++;
                if (simulate(nums, i, 1)) validSelections++;
            }
        }
        
        return validSelections;
    }
    
    bool simulate(vector<int> nums, int curr, int dir) {
        int n = nums.size();
        
        while (curr >= 0 && curr < n) {
            if (nums[curr] == 0) {
                curr += dir;
            } else {
                nums[curr]--;
                dir = -dir;
                curr += dir;
            }
        }
        
        for (int num : nums) {
            if (num != 0) return false;
        }
        
        return true;
    }
};",1454805796
usualr,timetravel_,282,3639,cpp,"#include <vector>
using namespace std;

class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        vector<int> diff(n + 1, 0);
        
        for (const auto& query : queries) {
            int li = query[0];
            int ri = query[1];
            diff[li] -= 1;
            if (ri + 1 < n) {
                diff[ri + 1] += 1;
            }
        }
        
        for(int i=1;i<diff.size();i++)diff[i]+=diff[i-1];
        
        int current = 0;
        for (int i = 0; i < n; ++i) {
            nums[i] += diff[i];
            // cout<<nums[i]<<"" "";
            if (nums[i] > 0) {
                return false;
            }
        }
        // cout<<""\n"";
        
        return true;
    }
};
",1454812979
usualr,timetravel_,282,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& q) {
        
        long long sss = 0;
        for(int i=0;i<nums.size();i++){
            sss += nums[i];
        }
        if(sss == 0) return 0;
        
        int n = nums.size(), l = 1, r = q.size(), res = -1;

        while (l <= r) {
            int m = l + (r - l) / 2;
            if (canZeroArray(nums, q, m)) {
                res = m;
                r = m - 1;
            } else {
                l = m + 1;
            }
        }

        return res;
    }

    bool canZeroArray(const vector<int>& nums, const vector<vector<int>>& q, int k) {
        int n = nums.size();
        vector<int> diff(n + 1, 0);

        for (int i = 0; i < k; ++i) {
            int li = q[i][0], ri = q[i][1], v = q[i][2];
            diff[li] -= v;
            if (ri + 1 < n) diff[ri + 1] += v;
        }

        int cum = 0;
        for (int i = 0; i < n; ++i) {
            cum += diff[i];
            if (nums[i] + cum > 0) return false;
        }

        return true;
    }
};
",1454824403
Rishabh Tiwari,rishabhtwr07,284,3616,java,"class Solution {
    public int countValidSelections(int[] nums) {
        int sum = 0;
        for(int n: nums) {
            sum += n;
        }
        int n = nums.length;
        int curSum = 0;
        int ret = 0;
        for(int i = 0; i < n; ++i) {
            if(nums[i] == 0) {
                if(sum == curSum + curSum)
                    ret += 2;
                else if(Math.abs(sum - curSum - curSum) == 1)
                    ret++;
            }
            curSum += nums[i];
        }
        return ret;
    }
}",1454810496
Rishabh Tiwari,rishabhtwr07,284,3639,java,"class Solution {
    public boolean isZeroArray(int[] nums, int[][] queries) {
        int bit[] = new int[100004];
        Arrays.fill(bit, 0);
        for(int []q: queries) {
            bit[q[0]]++;
            bit[q[1] + 1]--;
        }
        int val = 0;
        int n = nums.length;
        for(int i = 0; i < n; ++i) {
            val += bit[i];
            if(val < nums[i])
                return false;
        }
        return true;

        
    }
    
}",1454816015
Rishabh Tiwari,rishabhtwr07,284,3643,java,"class Solution {
    int n, q;
    int nums[];
    int queries[][];
    private boolean fnc(int x) {
        int bit[] = new int[n + 5];
        Arrays.fill(bit, 0);
        for(int i = 0; i < x; ++i) {
            bit[queries[i][0]] += queries[i][2];
            bit[queries[i][1] + 1] -= queries[i][2];
        }
        int val = 0;
        for(int i = 0; i < n; ++i) {
            val += bit[i];
            if(val < nums[i])
                return false;
        }
        return true;
    }
    
    public int minZeroArray(int[] nums, int[][] queries) {
        n = nums.length;
        q = queries.length;
        this.nums = nums;
        this.queries = queries;
        
        int l = 0;
        int r = q;
        int mid;

        while(r - l > 1) {
            mid = (l + r) / 2;
            if(fnc(mid))
                r = mid;
            else 
                l = mid + 1;
        }
        if(fnc(l))
            return l;
        if(fnc(r))
            return r;
        return -1;
    }
}",1454824422
jenineeuq,JENIFA_S_JOANNA,285,3616,python3,"from typing import List

class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        n = len(nums)
        valid_count = 0
        
        # Function to simulate the process
        def simulate(start: int, direction: int) -> bool:
            nums_copy = nums[:]
            curr = start
            
            while 0 <= curr < n:
                if nums_copy[curr] == 0:
                    curr += direction  
                else:
                    nums_copy[curr] -= 1  
                    direction = -direction  
                    curr += direction  
            return all(x == 0 for x in nums_copy)

        for i in range(n):
            if nums[i] == 0:
                if simulate(i, 1):  
                    valid_count += 1
                if simulate(i, -1):  
                    valid_count += 1
        
        return valid_count

",1454812250
jenineeuq,JENIFA_S_JOANNA,285,3639,python3,"from typing import List

class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        n = len(nums)
        decrement_count = [0] * (n + 1)
        
        for li, ri in queries:
            decrement_count[li] += 1
            if ri + 1 < n:
                decrement_count[ri + 1] -= 1
        
        for i in range(1, n):
            decrement_count[i] += decrement_count[i - 1]
        
        for i in range(n):
            if nums[i] > decrement_count[i]:
                return False
        
        return True

",1454816963
jenineeuq,JENIFA_S_JOANNA,285,3643,python3,"from typing import List

class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        n = len(nums)
        
        def canAchieveZeroArray(k: int) -> bool:
            d = [0] * (n + 1)  
            for i in range(k):
                li, ri, vali = queries[i]
                d[li] += vali
                if ri + 1 < n:
                    d[ri + 1] -= vali
            current_decrement = 0
            for i in range(n):
                current_decrement += d[i]
                if nums[i] > current_decrement:
                    return False
            return True

        l, r = 0, len(queries)
        answer = -1
        
        while l <= r:
            mid = (l + r) // 2
            if canAchieveZeroArray(mid):
                answer = mid  
                r = mid - 1  
            else:
                l = mid + 1  
        
        return answer
",1454824439
acebenson0704,acebenson0704,287,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        res = 0
        for i, num in enumerate(nums):
            if num != 0:
                continue
            if sum(nums[:i]) == sum(nums[i+1:]):
                res += 2
            if sum(nums[:i])+1 == sum(nums[i+1:]):
                res += 1
            if sum(nums[:i]) == sum(nums[i+1:])+1:
                res += 1
        return res",1454811315
acebenson0704,acebenson0704,287,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        n = len(nums)
        record = [0] * n
        for l, r in queries:
            record[l] += 1
            if r+1 < n:
                record[r+1] -= 1
        cur = 0
        for i in range(n):
            cur += record[i]
            if cur < nums[i]:
                return False
        return True
            ",1454815093
acebenson0704,acebenson0704,287,3643,python3,"class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        def isFeasible(k):
            record = [0] * n
            for l, r, val in queries[:k]:
                record[l] += val
                if r+1 < n:
                    record[r+1] -= val
            cur = 0
            for i in range(n):
                cur += record[i]
                if cur < nums[i]:
                    return False
            return True
        n = len(nums)
        left, right = 0, len(queries)+1
        while left < right:
            mid = (left + right) // 2
            if isFeasible(mid):
                right = mid
            else:
                left = mid+1
        return left if left <= len(queries) else -1
        ",1454824545
consistentNotmotivated,consistentNotmotivated,288,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        n = len(nums)
        ans = 0
    
        def fun(c, d):
            nums_copy = nums[:] 
            while 0 <= c < n:
                if nums_copy[c] == 0:
                    c += 1 if d == ""right"" else -1
                else:
                    nums_copy[c] -= 1
                    d = ""left"" if d == ""right"" else ""right""
                    c += 1 if d == ""right"" else -1

            return all(val == 0 for val in nums_copy)
    
        for i in range(n):
            if nums[i] == 0:
                if fun(i, ""left""):
                    ans += 1
                if fun(i, ""right""):
                    ans += 1
    
        return ans",1454818534
consistentNotmotivated,consistentNotmotivated,288,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        n = len(nums)
        dp = [0] * (n + 1)

        for query in queries:
            i, j = query
            dp[i] -= 1
            if j + 1 < n:
                dp[j + 1] += 1

        cd = 0
        for i in range(n):
            cd += dp[i]
            nums[i] += cd
            if nums[i] > 0:
                return False

        return True
",1454831888
consistentNotmotivated,consistentNotmotivated,288,3643,python3,"class Solution(object):
    def minZeroArray(self, nums, queries):
        n = len(nums)
        c = nums[:]

        if all(x == 0 for x in c):
            return 0

        def fun(k):
            diff = [0] * (n + 1)
            for i in range(k):
                li, ri, val = queries[i]
                diff[li] += val
                diff[ri + 1] -= val

            total = 0
            for i in range(n):
                total += diff[i]
                if total < c[i]:
                    return False
            return True

        l, r = 0, len(queries)
        ans = -1
        m = False

        while l <= r:
            mid = (l + r) // 2

            if fun(mid):
                ans = mid
                r = mid - 1
            else:
                l = mid + 1

            if not m and mid == len(queries) // 2:
                diff = [0] * (n + 1)
                for i in range(mid):
                    li, ri, val = queries[i]
                    diff[li] += val
                    diff[ri + 1] -= val

                state = c[:]
                total = 0
                for i in range(n):
                    total += diff[i]
                    state[i] = max(0, c[i] - total)
                m = True

        return ans if ans != -1 else -1
",1454830224
parallel_stream,parallel_stream,293,3616,java,"class Solution {
  public int countValidSelections(int[] nums) {
    int n = nums.length;
    return IntStream.range(0, n)
        .filter(i -> nums[i] == 0)
        .flatMap(i -> IntStream.of(-1, 1)
            .map(d -> isValid(nums.clone(), i, d) ? 1 : 0))
        .sum();
  }

  private boolean isValid(int[] nums, int idx, int dir) {
    while (idx >= 0 && idx < nums.length) {
      if (nums[idx] != 0) {
        if (--nums[idx] < 0) {
          return false;
        }
        dir = -dir;
      }
      idx += dir;
    }
    return IntStream.of(nums).allMatch(x -> x == 0);
  }
}",1454805958
parallel_stream,parallel_stream,293,3639,java,"class Solution {
  public boolean isZeroArray(int[] nums, int[][] queries) {
    int n = nums.length;
    int[] c = new int[n + 1];
    for (int[] q : queries) {
      c[q[0]] += 1;
      if (q[1] + 1 < n) {
        c[q[1] + 1] -= 1;
      }
    }
    int sum = 0;
    for (int i = 0; i < n; i++) {
      sum += c[i];
      if (sum < nums[i]) {
        return false;
      }
    }
    return true;
  }
}",1454812520
parallel_stream,parallel_stream,293,3643,java,"class Solution {
  public int minZeroArray(int[] nums, int[][] queries) {
    int n = nums.length;
    int q = queries.length;
    int low = 0;
    int high = q;
    int ans = -1;
    while (low <= high) {
      int mid = low + (high - low) / 2;
      long[] c = new long[n + 1];
      IntStream.range(0, mid).forEach(i -> {
        c[queries[i][0]] += queries[i][2];
        if (queries[i][1] + 1 < n) {
          c[queries[i][1] + 1] -= queries[i][2];
        }
      });
      long sum = 0;
      boolean ok = true;
      for (int i = 0; i < n; i++) {
        sum += c[i];
        if (sum < nums[i]) {
          ok = false;
          break;
        }
      }
      if (ok) {
        ans = mid;
        high = mid - 1;
      } else {
        low = mid + 1;
      }
    }
    return ans;
  }
}",1454824879
santhoshsai85,santhoshsai85,294,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int sum = accumulate(nums.begin(), nums.end(), 0), cur = 0, ans = 0;
        for(int i : nums) {
            cur += i;
            if(!i) {
                if(cur == sum - cur) ans += 2;
                if(abs(sum - 2 * cur) == 1) ans += 1;
            }
        }
        return ans;
    }
};",1454813208
santhoshsai85,santhoshsai85,294,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        vector<int> diff(n + 1);
        for(auto i: queries) {
            diff[i[0]] += 1;
            diff[i[1] + 1] -= 1;
        }
        for(int i = 1; i <= n; i++) diff[i] += diff[i - 1];
        for(int i = 0; i < n; i++) {
            if(nums[i] > diff[i]) return false;
        }
        return true;
    }
};",1454821452
santhoshsai85,santhoshsai85,294,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& q) {
        int n = nums.size();
        
        
        auto check = [&](int k) {
            vector<int> diff(n + 1);
            for(int i = 0; i < k; i++) {
                
                diff[q[i][0]] += q[i][2];
                diff[q[i][1] + 1] -= q[i][2];
            }
            for(int i = 1; i <= n; i++) diff[i] += diff[i - 1];
            for(int i = 0; i < n; i++) {
                if(nums[i] > diff[i]) return false;
            }
            return true;
        };
        
        int l = 0, r = q.size(), ans = -1;
        while(l <= r) {
            int m = l + (r - l) / 2;
            if(check(m)) {
                ans  = m;
                r = m - 1;
            }
            else l = m + 1;
        }
        return ans;
    }
};",1454832108
Raihanul Bari Tanvir,rbtanvir142,295,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        n = len(nums)  # Length of the nums array
        valid_count = 0  # Counter for valid initial selections

        # Helper function to simulate the process
        def simulate(start, direction):
            # Make a copy of the nums array
            arr = nums[:]
            curr = start  # Current position
            move_dir = direction  # Current direction (1 for right, -1 for left)
            
            while 0 <= curr < n:  # While in bounds
                if arr[curr] == 0:  # If the current value is 0, move in the same direction
                    curr += move_dir
                else:  # If the current value is greater than 0
                    arr[curr] -= 1  # Decrement the current value
                    move_dir *= -1  # Reverse the direction
                    curr += move_dir  # Take a step in the new direction
            
            # Return True if all elements in the array are reduced to 0
            return all(val == 0 for val in arr)

        # Iterate over all positions in nums where nums[curr] == 0
        for start in range(n):
            if nums[start] == 0:
                # Simulate for both directions: left (-1) and right (+1)
                if simulate(start, 1):  # Moving right
                    valid_count += 1
                if simulate(start, -1):  # Moving left
                    valid_count += 1

        return valid_count",1454808196
Raihanul Bari Tanvir,rbtanvir142,295,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        n = len(nums)
        # Create a difference array to track range updates
        diff = [0] * (n + 1)

        # Process each query to update the difference array
        for l, r in queries:
            diff[l] += 1
            if r + 1 < n:
                diff[r + 1] -= 1

        # Apply the difference array to compute decrements for each index
        decrements = [0] * n
        running_sum = 0
        for i in range(n):
            running_sum += diff[i]
            decrements[i] = running_sum

        # Check if the decrements match the required values in nums
        for i in range(n):
            if decrements[i] < nums[i]:
                return False

        return True",1454820440
Raihanul Bari Tanvir,rbtanvir142,295,3643,python3,"class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        n = len(nums)
        m = len(queries)
        
        def can_zero_out(k):
            # Check if nums can be zeroed out with the first k queries
            needs = nums[:]
            difference = [0] * (n + 1)  # Difference array to track decrements
            
            for i in range(k):
                li, ri, vali = queries[i]
                difference[li] += vali
                if ri + 1 < n:
                    difference[ri + 1] -= vali
            
            # Apply the difference array to calculate the actual decrements
            current_decrement = 0
            for j in range(n):
                current_decrement += difference[j]
                needs[j] -= current_decrement
                if needs[j] > 0:  # If we can't zero out this index
                    return False
            
            return True
    
        # Binary search on the number of queries
        left, right = 0, m
        result = -1
        while left <= right:
            mid = (left + right) // 2
            if can_zero_out(mid):
                result = mid
                right = mid - 1
            else:
                left = mid + 1
    
        return result",1454824934
KalinaShell,Cobalt_3902,296,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        # bisect equal parts
        s=sum(nums)
        c=0
        res=0
        for i in nums:
            c+=i
            if (c==s//2 or ((s%2)==1 and (c*2-1)==s)) and i==0:
                # print(s)
                res+= 2 if ((s%2)==0) else 1
        return res",1454812680
KalinaShell,Cobalt_3902,296,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        # construct psudo decrease
        n=len(nums)
        pfx=[0]*(n+1)
        for s,e in queries:
            pfx[s]+=1
            pfx[e+1]-=1
        c=pfx[0]
        # print(pfx,nums)
        for i in range(n):
            if nums[i]>c:
                return False
            c+=pfx[i+1]
        return True",1454817845
KalinaShell,Cobalt_3902,296,3643,python3,"class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        # construct psudo decrease
        n=len(nums)
        def canDone(t):
            pfx=[0]*(n+1)
            for s,e,v in queries[:t]:
                pfx[s]+=v
                pfx[e+1]-=v
            c=pfx[0]
            # print(pfx,nums)
            for i in range(n):
                if nums[i]>c:
                    return False
                c+=pfx[i+1]
            return True
        if not canDone(len(queries)): return -1
        lo,hi=0,len(queries)
        while lo<hi:
            mid=(lo+hi)//2
            if canDone(mid):
                hi=mid;
            else:
                lo=mid+1
        return lo
        ",1454825008
sguaaa,sguaaa,297,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        total = sum(nums)
        low = total // 2
        high = (total + 1) // 2
        curr = 0
        res = 0
        for x in nums:
            if x == 0:
                if curr == low:
                    res += 1
                if curr == high:
                    res += 1
            
            curr += x
            if curr > high:
                break
        return res
        ",1454810264
sguaaa,sguaaa,297,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        starts = [x[0] for x in queries]
        ends = [x[1] for x in queries]
        starts.sort(key=lambda x: -x)
        ends.sort(key=lambda x: -x)
        
        moves = 0
        for i, x in enumerate(nums):
            while starts and starts[-1] == i:
                starts.pop()
                moves += 1
            
            if x > moves:
                return False
            
            while ends and ends[-1] == i:
                ends.pop()
                moves -= 1
                
        return True
            ",1454818052
sguaaa,sguaaa,297,3643,python3,"class Solution:
    def helper(self, nums, queries, m):
        starts = [(x[0], x[2]) for x in queries[:m]]
        ends = [(x[1], x[2]) for x in queries[:m]]
        starts.sort(key=lambda x: -x[0])
        ends.sort(key=lambda x: -x[0])

        moves = 0
        for i, x in enumerate(nums):
            while starts and starts[-1][0] == i:
                _, v = starts.pop()
                moves += v

            if x > moves:
                return False

            while ends and ends[-1][0] == i:
                _, v = ends.pop()
                moves -= v
                
        return True
    
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        l, r = 0, len(queries) + 1
        
        while l < r:
            m = (l + r) // 2
            res = self.helper(nums, queries, m)
            # print(m, res)
            if res:
                r = m
            else:
                l = m + 1
                
        if l > len(queries):
            return -1
        else:
            return l
        
            
                
        
        ",1454832202
Xiaoyang Liu,monoid_coda,298,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        def sim(init, dir):
            new_nums = nums[:]
            curr = init
            while 0 <= curr < len(new_nums):
                if new_nums[curr] > 0:
                    new_nums[curr] -= 1
                    dir = not dir

                if dir:
                    curr += 1
                else:
                    curr -= 1
            return sum(new_nums) == 0
    
        result = 0
        for i in range(len(nums)):
            if nums[i] != 0:
                continue
            if sim(i, False):
                result += 1
            if sim(i, True):
                result += 1
        return result",1454816000
Xiaoyang Liu,monoid_coda,298,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        diffs = [nums[0]]
        for i in range(1, len(nums)):
            diffs.append(nums[i] - nums[i - 1])
        diffs.append(0)
        for i, j in queries:
            diffs[i] -= 1
            diffs[j + 1] += 1
        prefix = list(accumulate(diffs[:-1]))
        for i in prefix:
            if i > 0:
                return False
        return True",1454826163
Xiaoyang Liu,monoid_coda,298,3643,python3,"class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        @cache
        def solve(k):
            diffs = [nums[0]]
            for i in range(1, len(nums)):
                diffs.append(nums[i] - nums[i - 1])
            diffs.append(0)
            for i, j, val in queries[:k]:
                diffs[i] -= val
                diffs[j + 1] += val
            for i in accumulate(diffs[:-1]):
                if i > 0:
                    return False
            return True

        if not solve(len(queries)):
            return -1

        lo = 0
        hi = len(queries)
        result = hi
        while lo < hi:
            mid = (lo + hi) // 2
            if solve(mid):
                hi = mid
                result = min(result, mid)
            else:
                lo = mid + 1
        return lo
    ",1454832285
killer-whale,killer-whale,301,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        n = len(nums)
        def can(i, dx):
            x = nums[:]
            while 0 <= i < n:
                if x[i] == 0:
                    i += dx
                else:
                    dx *= -1
                    x[i] -= 1
                    i += dx
            return sum(x) == 0
        res = 0
        for i in range(len(nums)):
            if nums[i] == 0:
                for dx in -1, 1:
                    res += can(i, dx)
        return res",1454823011
killer-whale,killer-whale,301,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        st = LazySegmentTree(nums)
        for i, (l, r) in enumerate(queries):
            st.add(l, r + 1, -1)
        return st.query(0, len(nums)) <= 0
        
class LazySegmentTree:
    def __init__(self, data, default=0, func=max):
        """"""initialize the lazy segment tree with data""""""
        self._default = default
        self._func = func

        self._len = len(data)
        self._size = _size = 1 << (self._len - 1).bit_length()
        self._lazy = [0] * (2 * _size)

        self.data = [default] * (2 * _size)
        self.data[_size:_size + self._len] = data
        for i in reversed(range(_size)):
            self.data[i] = func(self.data[i + i], self.data[i + i + 1])

    def __len__(self):
        return self._len

    def _push(self, idx):
        """"""push query on idx to its children""""""
        # Let the children know of the queries
        q, self._lazy[idx] = self._lazy[idx], 0

        self._lazy[2 * idx] += q
        self._lazy[2 * idx + 1] += q
        self.data[2 * idx] += q
        self.data[2 * idx + 1] += q

    def _update(self, idx):
        """"""updates the node idx to know of all queries applied to it via its ancestors""""""
        for i in reversed(range(1, idx.bit_length())):
            self._push(idx >> i)

    def _build(self, idx):
        """"""make the changes to idx be known to its ancestors""""""
        idx >>= 1
        while idx:
            self.data[idx] = self._func(self.data[2 * idx], self.data[2 * idx + 1]) + self._lazy[idx]
            idx >>= 1

    def add(self, start, stop, value):
        """"""lazily add value to [start, stop)""""""
        start = start_copy = start + self._size
        stop = stop_copy = stop + self._size
        while start < stop:
            if start & 1:
                self._lazy[start] += value
                self.data[start] += value
                start += 1
            if stop & 1:
                stop -= 1
                self._lazy[stop] += value
                self.data[stop] += value
            start >>= 1
            stop >>= 1

        # Tell all nodes above of the updated area of the updates
        self._build(start_copy)
        self._build(stop_copy - 1)

    def query(self, start, stop, default=0):
        """"""func of data[start, stop)""""""
        start += self._size
        stop += self._size

        # Apply all the lazily stored queries
        self._update(start)
        self._update(stop - 1)

        res = default
        while start < stop:
            if start & 1:
                res = self._func(res, self.data[start])
                start += 1
            if stop & 1:
                stop -= 1
                res = self._func(res, self.data[stop])
            start >>= 1
            stop >>= 1
        return res

    def __repr__(self):
        return ""LazySegmentTree({0})"".format(self.data)",1454823470
killer-whale,killer-whale,301,3643,python3,"class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        st = LazySegmentTree(nums)
        if st.query(0, len(nums)) <= 0:
            return 0
        for i, (l, r, val) in enumerate(queries):
            st.add(l, r + 1, -val)
            if st.query(0, len(nums)) <= 0:
                return i + 1
        return -1

class LazySegmentTree:
    def __init__(self, data, default=0, func=max):
        """"""initialize the lazy segment tree with data""""""
        self._default = default
        self._func = func

        self._len = len(data)
        self._size = _size = 1 << (self._len - 1).bit_length()
        self._lazy = [0] * (2 * _size)

        self.data = [default] * (2 * _size)
        self.data[_size:_size + self._len] = data
        for i in reversed(range(_size)):
            self.data[i] = func(self.data[i + i], self.data[i + i + 1])

    def __len__(self):
        return self._len

    def _push(self, idx):
        """"""push query on idx to its children""""""
        # Let the children know of the queries
        q, self._lazy[idx] = self._lazy[idx], 0

        self._lazy[2 * idx] += q
        self._lazy[2 * idx + 1] += q
        self.data[2 * idx] += q
        self.data[2 * idx + 1] += q

    def _update(self, idx):
        """"""updates the node idx to know of all queries applied to it via its ancestors""""""
        for i in reversed(range(1, idx.bit_length())):
            self._push(idx >> i)

    def _build(self, idx):
        """"""make the changes to idx be known to its ancestors""""""
        idx >>= 1
        while idx:
            self.data[idx] = self._func(self.data[2 * idx], self.data[2 * idx + 1]) + self._lazy[idx]
            idx >>= 1

    def add(self, start, stop, value):
        """"""lazily add value to [start, stop)""""""
        start = start_copy = start + self._size
        stop = stop_copy = stop + self._size
        while start < stop:
            if start & 1:
                self._lazy[start] += value
                self.data[start] += value
                start += 1
            if stop & 1:
                stop -= 1
                self._lazy[stop] += value
                self.data[stop] += value
            start >>= 1
            stop >>= 1

        # Tell all nodes above of the updated area of the updates
        self._build(start_copy)
        self._build(stop_copy - 1)

    def query(self, start, stop, default=0):
        """"""func of data[start, stop)""""""
        start += self._size
        stop += self._size

        # Apply all the lazily stored queries
        self._update(start)
        self._update(stop - 1)

        res = default
        while start < stop:
            if start & 1:
                res = self._func(res, self.data[start])
                start += 1
            if stop & 1:
                stop -= 1
                res = self._func(res, self.data[stop])
            start >>= 1
            stop >>= 1
        return res

    def __repr__(self):
        return ""LazySegmentTree({0})"".format(self.data)",1454825224
res,Res1StAnce7,305,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        n = len(nums)
        zeros = [i for i, x in enumerate(nums) if x == 0]
        cnt = 0
        for z in zeros:
            for d in [1, -1]:
                arr = nums.copy()
                c, dir = z, d
                while 0 <= c < n:
                    if arr[c] == 0:
                        c += dir
                    elif arr[c] > 0:
                        arr[c] -=1
                        dir *= -1
                        c += dir
                if all(x == 0 for x in arr):
                    cnt +=1
        return cnt",1454806493
res,Res1StAnce7,305,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        n = len(nums)
        count = [0]*(n+1)
        for l, r in queries:
            count[l] +=1
            if r+1 < n:
                count[r+1] -=1
        for i in range(1, n):
            count[i] += count[i-1]
        for i in range(n):
            if count[i] < nums[i]:
                return False
        return True",1454807381
res,Res1StAnce7,305,3643,python3,"class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        n, m = len(nums), len(queries)
        def possible(k):
            acc = [0]*(n+1)
            for i in range(k):
                l, r, v = queries[i]
                acc[l] += v
                if r+1 < n:
                    acc[r+1] -= v
            total = 0
            for i in range(n):
                total += acc[i]
                if total < nums[i]:
                    return False
            return True
        low, high, res = 0, m, -1
        while low <= high:
            mid = (low + high) // 2
            if possible(mid):
                res, high = mid, mid -1
            else:
                low = mid +1
        return res",1454818408
Jaydatt Dholakiya,Jaydatt_D,306,3616,cpp,"class Solution {
public:
    int calc(int curr, vector<int>&nums, int flg){
        vector<int> temp = nums;
        int n = temp.size();
        int dir = (flg == 1) ? 1 : -1;
        
        while (curr >= 0 && curr < n) {
            if (temp[curr] == 0) {
                curr += dir;
            } else {
                temp[curr]--;
                dir = -dir; 
                curr += dir;
            }
        }
        
        for (int x : temp) {
            if (x != 0) return 0;
        }
        return 1;
    }
    int countValidSelections(vector<int>& nums) {
        int ans = 0;
        for(int i = 0; i < nums.size(); i++){
            if(nums[i] == 0){
                ans += calc(i, nums, 1);
                ans += calc(i, nums, 0);
            }
        }
        return ans;
    }
};",1454814456
Jaydatt Dholakiya,Jaydatt_D,306,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        vector<int> hsh(n + 1, 0);
        for(auto it : queries){
            int l = it[0], r = it[1] + 1;
            hsh[l]++, hsh[r]--;
        }
        for(int i = 1; i < n; i++) hsh[i] += hsh[i - 1];
        for(int i = 0; i < n; i++){
            if(hsh[i] < nums[i]) return false;
        }
        return true;
    }
};",1454818528
Jaydatt Dholakiya,Jaydatt_D,306,3643,cpp,"class Solution {
public:
    bool check(int k, vector<int>&nums, vector<vector<int>>& queries, int n){
        vector<int> hsh(n + 1, 0);
        for(int i = 0; i < k; i++){
            int l = queries[i][0], r = queries[i][1] + 1;
            hsh[l] += queries[i][2], hsh[r] -= queries[i][2];
        }
        for(int i = 1; i < n; i++) hsh[i] += hsh[i - 1];
        for(int i = 0; i < n; i++) if(hsh[i] < nums[i]) return false;
        return true;
    }
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int ans = -1;
        int n = nums.size();
        int lo = 0, hi = queries.size();
        while(lo <= hi){
            int mid = (lo + hi) / 2;
            bool ok = check(mid, nums, queries, n);
            if(ok){
                ans = mid;
                hi = mid - 1;
            }else{
                lo = mid + 1;
            }
        }
        return ans;
    }
};",1454825399
JuneChain,JuneChain,307,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int n(nums.size());
        vector<int> cum(n+1);
        cum[n] = 0;
        partial_sum(nums.crbegin(), nums.crend(), cum.rbegin()+1);
        int ans(0);
        for (int i = 0; i < n; i ++) {
            if (nums[i] != 0) {
                continue;
            }
            int nL = cum[0] - cum[i];
            int nR = cum[i+1] - cum[n];
            if (nL == nR) {
                ans += 2;
            } else if (nL - nR == 1 || nR - nL == 1) {
                ans ++;
            }
        }
        return ans;
    }
};",1454812646
JuneChain,JuneChain,307,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n(nums.size());
        vector<int> diff(n+1);
        for (auto & q : queries) {
            int l = q[0];
            int r = q[1]+1;
            diff[l] --;
            diff[r] ++;
        }
        partial_sum(diff.begin(), diff.end(), diff.begin());
        for (int i = 0; i < n; i ++) {
            if (nums[i] + diff[i] > 0) {
                return false;
            }
        }
        return true;
    }
};",1454819346
JuneChain,JuneChain,307,3643,cpp,"class Solution {
private:
    bool isZeroArray(const vector<int>& nums, const vector<vector<int>>& queries, int k) {
        int n(nums.size());
        vector<int> diff(n+1);
        for (int i = 0; i < k; i ++) {
            int l = queries[i][0];
            int r = queries[i][1]+1;
            diff[l] -= queries[i][2];
            diff[r] += queries[i][2];
        }
        partial_sum(diff.begin(), diff.end(), diff.begin());
        for (int i = 0; i < n; i ++) {
            if (nums[i] + diff[i] > 0) {
                return false;
            }
        }
        return true;
    }
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int l(0), r(queries.size());
        if (!isZeroArray(nums, queries, r)) {
            return -1;
        }
        while (r - l > 1) {
            int m = (l + r) / 2;
            if (!isZeroArray(nums, queries, m)) {
                l = m;
            } else {
                r = m;
            }
        }
        if (isZeroArray(nums, queries, l)) {
            return l;
        } else {
            return r;
        }
    }
};",1454832709
hulot,hulot,309,3616,java,"class Solution {
    public int countValidSelections(int[] nums) {
        int res = 0, n = nums.length;
        for (int i = 0; i < n; i++) {
            if (nums[i] == 0) {
                res += check(Arrays.copyOf(nums, n), i, 1) ? 1 : 0;
                res += check(Arrays.copyOf(nums, n), i, -1) ? 1: 0;
            }
        }
        return res;
    }
    
    private boolean check(int[] nums, int curr, int dir) {
        int n = nums.length;
        while (curr >= 0 && curr < n) {
            if (nums[curr] > 0) {
                nums[curr]--;
                dir = -dir;
            }
            curr += dir;
        }
        return Arrays.equals(nums, new int[n]);
    }
}",1454815307
hulot,hulot,309,3639,java,"class Solution {
    public boolean isZeroArray(int[] nums, int[][] queries) {
        int n = nums.length;
        int[] diff = new int[n];
        for (int[] q : queries) {
            diff[q[0]]--;
            if (q[1] < n-1)
            diff[q[1]+1]++;
        }
        long currDiff = 0;
        for (int i = 0; i < n; i++) {
            currDiff += diff[i];
            if (nums[i] + currDiff > 0) return false;
        }
        return true;
    }
}",1454823907
hulot,hulot,309,3643,java,"class Solution {
    public int minZeroArray(int[] nums, int[][] queries) {
        if (!isZeroArray(nums, queries, queries.length)) return -1;
        int lo = 0, hi = queries.length;
        while (lo < hi) {
            int mid = lo + (hi - lo) / 2;
            if (isZeroArray(nums, queries, mid)) {
                hi = mid;
            } else {
                lo = mid + 1;
            }
        }
        return lo;
    }
    
    private boolean isZeroArray(int[] nums, int[][] queries, int k) {
        int n = nums.length;
        int[] diff = new int[n];
        for (int i = 0; i < k; i++) {
            int[] q = queries[i];
            diff[q[0]] -= q[2];
            if (q[1] < n-1)
            diff[q[1]+1] += q[2];
        }
        long currDiff = 0;
        for (int i = 0; i < n; i++) {
            currDiff += diff[i];
            if (nums[i] + currDiff > 0) return false;
        }
        return true;
    }

}",1454832758
Jayant Sharma,thedark_JS,310,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int n = nums.size();
        vector<int> zero_pos;
        
        for(int i = 0 ; i < n ; i++){
            if(nums[i] == 0){
                zero_pos.push_back(i);
            }
        }
        
        int ans = 0;
        for(int i = 0 ; i < zero_pos.size() ; i++){
            int ind = zero_pos[i];
            for(int dir = 0 ; dir < 2 ; dir++){
                
                // start with an ind and dir;
                vector<int> curr = nums;
                int cur_ind = ind;
                int cur_dir = dir;
                //cout<<""okay ""<<cur_ind<<""  ""<<cur_dir<<endl;
                while(1){
                    if(cur_ind >= n || cur_ind < 0) break;
                    if(curr[cur_ind] == 0){
                        if(cur_dir == 0){
                            cur_ind--;
                        }
                        else{
                            cur_ind++;
                        }
                    }
                    else{
                        curr[cur_ind]--;
                        
                        //cout<<""okay noe ""<<cur_ind<<"" ""<<curr[cur_ind]<<endl;
                        cur_dir = 1 - cur_dir;
                        if(cur_dir == 0){
                            cur_ind--;
                        }
                        else{
                            cur_ind++;
                        }
                    }
                }
                bool ok = true;
                for(int z = 0 ; z < n ; z++){
                    if(curr[z] != 0){
                        ok = false;
                        //cout<<""breaks at ""<<z<<endl;
                        break;
                    }
                }
                if(ok) ans++;
                
            }
        }
        
        return ans;
        
    }
};",1454832791
Jayant Sharma,thedark_JS,310,3639,cpp,"class Solution {
public:
     const int M = 2e5 + 5;
int MINN = -1;
int segTree[2000004], lazy[2000004] , arr[500002];


void merge(int node){
    segTree[node] = max(segTree[2*node] , segTree[2*node + 1]);
}

void pushDown(int node , int l , int r){
    segTree[node] += lazy[node];
    if(l != r){
        lazy[2*node] += lazy[node];
        lazy[2*node + 1] += lazy[node];
    }
    lazy[node] = 0;
}

void build(int node , int l , int r){
    if(l > r) return;
    if(l == r) {
        segTree[node] = arr[l];
        return;
    }
    int mid = (l + r)/2;

    build(2*node , l , mid);
    build(2*node + 1 , mid + 1 , r);

    merge(node);
}

void update(int node , int l , int r , int ql , int qr , int add){
    if(l > r) return;
    pushDown(node , l , r);
    if(ql > qr || l > qr || ql > r) return;
    if(l >= ql && r <= qr){
        lazy[node] += add;
        pushDown(node , l , r);
        return;
    }
    int mid = (l + r)/2;

    update(2*node , l , mid , ql , qr , add);
    update(2*node + 1 , mid + 1 , r , ql , qr , add);

    merge(node);
}

int query(int node , int l , int r , int ql , int qr){
    if(l > r || ql > qr || l > qr || ql > r) return MINN;
    pushDown(node , l , r);
    if(l >= ql && r <= qr){
        return segTree[node];
    }

    int mid = (l + r)/2;
    int one = query(2*node , l , mid , ql , qr);
    int two = query(2*node + 1 , mid + 1 , r , ql , qr);

    return max(one , two);
}

    
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        for(int i = 0 ; i < n ; i++){
            arr[i + 1] = nums[i];
        }
        
        build(1, 1, n);
        int ans = -1;
        
        for(int i = 0 ; i < queries.size() ; i++){
            
            //cout<<""so at ""<<i<<"" ""<<query(1, 1, n, 1, n)<<endl;
            if(query(1, 1, n, 1, n) <= 0){
                ans = i;
                break;
            }
            
            int l = queries[i][0] + 1;
            int r = queries[i][1] + 1;
            int v = 1;
            
            update(1, 1, n, l, r, -v);
        }
        
        if(ans == -1 && query(1, 1, n, 1, n) <= 0){
                ans = queries.size();
            }
        if(ans == -1) return false;
        return true;
    }
};",1454815272
Jayant Sharma,thedark_JS,310,3643,cpp,"class Solution {
public:
    
    const int M = 2e5 + 5;
int MINN = -1;
int segTree[2000004], lazy[2000004] , arr[500002];


void merge(int node){
    segTree[node] = max(segTree[2*node] , segTree[2*node + 1]);
}

void pushDown(int node , int l , int r){
    segTree[node] += lazy[node];
    if(l != r){
        lazy[2*node] += lazy[node];
        lazy[2*node + 1] += lazy[node];
    }
    lazy[node] = 0;
}

void build(int node , int l , int r){
    if(l > r) return;
    if(l == r) {
        segTree[node] = arr[l];
        return;
    }
    int mid = (l + r)/2;

    build(2*node , l , mid);
    build(2*node + 1 , mid + 1 , r);

    merge(node);
}

void update(int node , int l , int r , int ql , int qr , int add){
    if(l > r) return;
    pushDown(node , l , r);
    if(ql > qr || l > qr || ql > r) return;
    if(l >= ql && r <= qr){
        lazy[node] += add;
        pushDown(node , l , r);
        return;
    }
    int mid = (l + r)/2;

    update(2*node , l , mid , ql , qr , add);
    update(2*node + 1 , mid + 1 , r , ql , qr , add);

    merge(node);
}

int query(int node , int l , int r , int ql , int qr){
    if(l > r || ql > qr || l > qr || ql > r) return MINN;
    pushDown(node , l , r);
    if(l >= ql && r <= qr){
        return segTree[node];
    }

    int mid = (l + r)/2;
    int one = query(2*node , l , mid , ql , qr);
    int two = query(2*node + 1 , mid + 1 , r , ql , qr);

    return max(one , two);
}

    
    
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        
        int n = nums.size();
        for(int i = 0 ; i < n ; i++){
            arr[i + 1] = nums[i];
        }
        
        build(1, 1, n);
        int ans = -1;
        
        for(int i = 0 ; i < queries.size() ; i++){
            
            //cout<<""so at ""<<i<<"" ""<<query(1, 1, n, 1, n)<<endl;
            if(query(1, 1, n, 1, n) <= 0){
                ans = i;
                break;
            }
            
            int l = queries[i][0] + 1;
            int r = queries[i][1] + 1;
            int v = queries[i][2];
            
            update(1, 1, n, l, r, -v);
        }
        
        if(ans == -1 && query(1, 1, n, 1, n) <= 0){
                ans = queries.size();
            }
        
        return ans;
        
    }
};",1454812990
rip.nsk,rip,312,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& X) {
        int RR=0;
        for(int b=0;b<X.size();++b)if(!X[b]){
            for(int d:{-1,1}){
                auto x=X;
                for(int p=b;;){
                    p+=d;if(p<0||p==x.size())break;
                    if(x[p]){--x[p];d=-d;}
                }
                RR+=accumulate(x.begin(),x.end(),0)==0;
            }
        }
        return RR;
    }
};",1454812416
rip.nsk,rip,312,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& X, vector<vector<int>>& Q) {
        vector<int>D(X.size()+1);
        for(int q=0;q<Q.size();++q){
            D[Q[q][0]]+=1;
            if(Q[q][1]<X.size())D[Q[q][1]+1]-=1;
        }
        int d=0;
        for(int i=0;i<X.size();++i){
            d+=D[i];if(X[i]>d)return-0;
        }
        return+1;
    }
};
",1454832829
rip.nsk,rip,312,3643,cpp,"template<typename f_t, typename i_t>pair<i_t, int>BS(i_t l, i_t r, f_t f) {
    while(1) {
        if(l>r)return{l,0};auto m=l+(r-l)/2;auto c=f(m);
        if(c>0)l=m+1;else if(c<0)r=m-1;else return{m,1};
    }
}
class Solution {
public:
    int minZeroArray(vector<int>&X, vector<vector<int>>& Q) {
        uint RR=-1;int S=Q.size();
        BS(0,S,[&](uint s){
            vector<int>D(X.size()+1);
            for(int q=0;q<s;++q){
                D[Q[q][0]]+=Q[q][2];
                if(Q[q][1]<X.size())D[Q[q][1]+1]-=Q[q][2];
            }
            int d=0;
            for(int i=0;i<X.size();++i){
                d+=D[i];if(X[i]>d)return+1;
            }
            RR=min(RR,s);return-1;
        });
        return RR;
    }
};",1454828066
HarshaNP,NastyWaterEspresso,313,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int n = nums.size();
        int validCount = 0;

        auto simulate = [&](int start, int direction) -> bool {
            vector<int> numsCopy = nums;
            int curr = start;

            while (curr >= 0 && curr < n) {
                if (numsCopy[curr] == 0) {
                    curr += direction;
                } else {
                    numsCopy[curr]--;
                    direction = -direction;
                    curr += direction;
                }
            }

            for (int num : numsCopy) {
                if (num != 0) return false;
            }
            return true;
        };

        for (int i = 0; i < n; i++) {
            if (nums[i] == 0) {
                if (simulate(i, 1)) validCount++;
                if (simulate(i, -1)) validCount++;
            }
        }

        return validCount;
    }
};
",1454809709
HarshaNP,NastyWaterEspresso,313,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        vector<int> diff(n + 1, 0);
        
        for (const auto& query : queries) {
            int l = query[0];
            int r = query[1];
            diff[l]--;
            if (r + 1 < n) {
                diff[r + 1]++;
            }
        }
        
        int current = 0;
        for (int i = 0; i < n; ++i) {
            current += diff[i];
            nums[i] += current;
            if (nums[i] > 0) {
                return false;
            }
        }
        return true;
    }
};
",1454813753
HarshaNP,NastyWaterEspresso,313,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        int allZero=1; for(int num:nums) if(num>0) allZero=0;
        if(allZero) return 0;
        auto isPossible = [&](int k) {
            vector<int> diff(n + 1, 0);
            for (int i = 0; i < k; i++) {
                int l = queries[i][0], r = queries[i][1], val = queries[i][2];
                diff[l] -= val;
                if (r + 1 < n) {
                    diff[r + 1] += val;
                }
            }
            int curr = 0;
            for (int i = 0; i < n; i++) {
                curr += diff[i];
                if (nums[i] + curr > 0) {
                    return false;
                }
            }
            return true;
        };
        
        int left = 1, right = queries.size(), result = -1;
        
        while (left <= right) {
            int mid = (left + right) / 2;
            if (isPossible(mid)) {
                result = mid;
                right = mid - 1;
            } else {
                left = mid + 1;
            }
        }
        
        return result;
    }
};
",1454818635
Sushanth,sushanth24,314,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int n = nums.size();
        vector<int> suff(n,0);
        suff[n-1] = nums[n-1];
        for(int i = n-2;i>=0;i--) {
            suff[i] = suff[i+1]+nums[i];
        }
        int preff = 0 , ans = 0;
        for(int i = 0;i<n;i++) {
            
            if(nums[i] == 0) {
                if(preff == suff[i]) {
                    ans+=2;
                }
                if(abs(suff[i]-preff) == 1) {
                    ans+=1;
                }
            }
            preff+=nums[i];
        }
        return ans;
    }
};",1454810839
Sushanth,sushanth24,314,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& qu) {
        int n = nums.size();
        vector<int> temp(n+1,0);
        for(int i = 0;i<qu.size();i++) {
            temp[qu[i][0]]++;
            temp[qu[i][1]+1]--;
        }
        for(int i = 1;i<=n;i++) {
            temp[i]+=temp[i-1];
        }
        for(int i = 0;i<n;i++) {
            if(nums[i]>temp[i]) return false;
        }
        return true;
        
    }
};",1454817170
Sushanth,sushanth24,314,3643,cpp,"class Solution {
public:
    int check(int k,vector<int>& nums, vector<vector<int>>& qu) {
        int n = nums.size();
        vector<long long> temp(n+1,0);
        for(int i = 0;i<k;i++) {
            temp[qu[i][0]]+=qu[i][2];
            temp[qu[i][1]+1]-=qu[i][2];
        }
        for(int i = 1;i<=n;i++) {
            temp[i]+=temp[i-1];
        }
        for(int i = 0;i<n;i++) {
            if(nums[i]>temp[i]) return false;
        }
        return true;
    }
    int minZeroArray(vector<int>& nums, vector<vector<int>>& qu) {
        int n = qu.size();
        int l = 0, r = n;
        while(r-l>1) {
            int mid = l+(r-l)/2;
            if(check(mid,nums,qu)) {
                r = mid;
            } else {
                l = mid+1;
            }
        }
        if(check(l,nums,qu)) return l;
        if(check(r,nums,qu)) return r;
        
        return -1;
        
    }
};",1454832847
Rachana Chukala,rachanachukala,316,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        fp = [0]*(len(nums)+1)
        bp = [0]*(len(nums)+1)
        for i in range(len(nums)):
            fp[i+1] = fp[i] + nums[i]
        for i in range(len(nums)-1, -1, -1):
            bp[i] = bp[i+1]+nums[i]
        cou = 0
        for i in range(len(nums)):
            v = abs(fp[i]-bp[i])
            if nums[i]==0 and v<=1:
                cou += 1 if v==1 else 2
        return cou",1454812609
Rachana Chukala,rachanachukala,316,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        diff = [0]*(len(nums)+1)
        for l, r in queries:
            diff[l] -= 1
            diff[r+1] += 1
        cs = 0
        for i in range(len(nums)):
            cs += diff[i]
            nums[i] += cs
            if nums[i]>0:
                return False
        return True",1454825299
Rachana Chukala,rachanachukala,316,3643,python3,"class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        def ispos(n):
            diff = [0]*(len(nums)+1)
            for i in range(n):
                diff[queries[i][0]] -= queries[i][2]
                diff[queries[i][1]+1] += queries[i][2]
            cs = 0
            for i in range(len(nums)):
                cs += diff[i]
                if nums[i]+cs>0:
                    return False
            return True
        if not ispos(len(queries)):
            return -1
        low, high = 0, len(queries)
        ans = high
        while low<=high:
            mid = (low+high)//2
            if ispos(mid):
                ans = mid
                high = mid-1
            else:
                low = mid+1
        return ans",1454833188
Sandeep Maurya,sandeep413,317,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int pre = 0;
        for(auto a:nums)
        {
            pre+=a;
        }
        int ans =0;
        int p=0;
        for(auto a:nums)
        {
            p+=a;
            pre-=a;
            if(a==0 && pre==p)
            {
                ans+=2;
            }
            if(a==0 && abs(pre-p)==1)
            {
                ans+=1;
            }
        }
        return ans;
    }
};",1454808540
Sandeep Maurya,sandeep413,317,3639,cpp,"typedef long long ll;
typedef vector<int> vi;
typedef vector<ll> vl;
typedef vector<string> vs;
typedef pair<int, int> pi;
typedef vector<vector<int>> vvi;
typedef vector<vector<ll>> vvl;
typedef vector<pair<int, int>> vpi;
typedef vector<pair<ll, ll>> vpl;
#define pb push_back
#define pp pop_back
#define fori(i, a, b) for (int i = a; i < b; i++)
#define forl(i, a, b) for (ll i = a; i < b; i++)
#define asc(v) sort(v.begin(), v.end())
#define dsc(v) sort(v.rbegin(), v.rend())
#define rev(v) reverse(v.begin(), v.end())
#define print(v)     \
    for (auto a : v) \
        cout << a << "" "";
ll __lcm(ll a, ll b)
{
    return (a / __gcd(a, b)) * b;
}
ll mod = 1e9 + 7;
class Solution {
public:
    bool check(vector<int>& nums, vector<vector<int>>& q,int mid)
    {
        vector<ll> curr(nums.size(),0);
        for(int i=0;i<mid;i++)
        {
            int x=q[i][0],y=q[i][1],val=1;
            curr[x]+=val;
            if(y<nums.size()-1) curr[y+1]-=val;
        }
        fori(i,1,nums.size()) curr[i]+=curr[i-1];
        // cout<<mid<<endl;
        // print(curr); cout<<endl;
        fori(i,0,nums.size())
        {
            if(1ll*nums[i]>curr[i]) return false;
        }
        return true;
    }
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& q) {
        int ans = -1,low=0,high=q.size();
        
        while(low<=high)
        {
            int mid = (low+high)/2;
            if(check(nums,q,mid))
            {
                ans = mid; high =mid-1;
            }
            else{
                low = mid+1;
            }
        }
        return ans>=0;
    }
};",1454825857
Sandeep Maurya,sandeep413,317,3643,cpp,"typedef long long ll;
typedef vector<int> vi;
typedef vector<ll> vl;
typedef vector<string> vs;
typedef pair<int, int> pi;
typedef vector<vector<int>> vvi;
typedef vector<vector<ll>> vvl;
typedef vector<pair<int, int>> vpi;
typedef vector<pair<ll, ll>> vpl;
#define pb push_back
#define pp pop_back
#define fori(i, a, b) for (int i = a; i < b; i++)
#define forl(i, a, b) for (ll i = a; i < b; i++)
#define asc(v) sort(v.begin(), v.end())
#define dsc(v) sort(v.rbegin(), v.rend())
#define rev(v) reverse(v.begin(), v.end())
#define print(v)     \
    for (auto a : v) \
        cout << a << "" "";
ll __lcm(ll a, ll b)
{
    return (a / __gcd(a, b)) * b;
}
ll mod = 1e9 + 7;
class Solution {
public:
    bool check(vector<int>& nums, vector<vector<int>>& q,int mid)
    {
        vector<ll> curr(nums.size(),0);
        for(int i=0;i<mid;i++)
        {
            int x=q[i][0],y=q[i][1],val=q[i][2];
            curr[x]+=val;
            if(y<nums.size()-1) curr[y+1]-=val;
        }
        fori(i,1,nums.size()) curr[i]+=curr[i-1];
        // cout<<mid<<endl;
        // print(curr); cout<<endl;
        fori(i,0,nums.size())
        {
            if(1ll*nums[i]>curr[i]) return false;
        }
        return true;
    }
    int minZeroArray(vector<int>& nums, vector<vector<int>>& q) {
        int ans = -1,low=0,high=q.size();
        
        while(low<=high)
        {
            int mid = (low+high)/2;
            if(check(nums,q,mid))
            {
                ans = mid; high =mid-1;
            }
            else{
                low = mid+1;
            }
        }
        return ans;
    }
};",1454822504
wisdompeak,wisdompeak,318,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) 
    {
        int ret = 0;
        for (int i=0; i<nums.size(); i++)
        {
            if (nums[i]==0 && isOK(nums, i, 1))
                ret++;
            if (nums[i]==0 && isOK(nums, i, 0))
                ret++;
        }
            
        
        return ret;        
    }
    
    bool isOK(vector<int> nums, int start, int dir) 
    {
        int i = start;
        int n =  nums.size();        
        while (i>=0 && i<n)
        {
            if (nums[i]==0)
            {
                if (dir == 1)
                    i++;
                else
                    i--;
            }
            else
            {
                nums[i]--;
                dir = 1-dir;
                if (dir==1) i++;
                else i--;
            }
        }
        for (int i=0; i<n; i++)
            if (nums[i]!=0)
                return false;
        // cout<<start<<endl;
        return true;
    }
};",1454810931
wisdompeak,wisdompeak,318,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) 
    {
        int n = nums.size();
        vector<int>diff(n+1);
        for (auto q: queries)
        {
            int a = q[0], b = q[1];
            diff[a]-=1;
            diff[b+1]+=1;
        }
        int sum = 0;
        for (int i=0; i<n; i++)
        {
            sum += diff[i];
            if (sum + nums[i]>0)
                return false;
        }
        return true;
    }
};",1454816661
wisdompeak,wisdompeak,318,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) 
    {
        int m = queries.size();
        int left=0, right=m;
        while (left < right)
        {
            int mid = left+(right-left)/2;
            if (isOK(nums, queries, mid))
                right = mid;
            else
                left = mid+1;
        }
        if (isOK(nums, queries, left))
            return left;
        else
            return -1;
    }
    
    bool isOK(vector<int>& nums, vector<vector<int>>& queries, int m)
    {
        int n = nums.size();
        vector<int>diff(n+1);
        for (int i=0; i<m; i++)
        {
            auto q = queries[i];
            int a = q[0], b = q[1], v = q[2];
            diff[a]-=v;
            diff[b+1]+=v;
        }
        int sum = 0;
        for (int i=0; i<n; i++)
        {
            sum += diff[i];
            if (sum + nums[i]>0)
                return false;
        }
        return true;
    }
};",1454825932
Codewithnav,navpreetsingh951818,319,3616,java,"class Solution {
    public int countValidSelections(int[] nums) {
        int res = 0;
        int n = nums.length;
        for(int i = 0;i<n;i++){
            if(nums[i] != 0) continue;
            if(poss(nums,i,1)  ) res++;
            if(poss(nums,i,-1)) res++;
            
            
        }
        
        return res;
    }
    
    private boolean poss(int[] nums,int i,int d){
        
        int[] c = Arrays.copyOf(nums,nums.length);
        
        
        
        
        while(i >= 0 && i < nums.length){
            if(c[i] == 0){
                i+=d;
            }else{
                c[i]--;
                d = (d == -1) ? 1 : -1;
                i+= d;
            }
            
        }
        for(int e : c){
            if(e != 0) return false;
        }
        
        return true;
        
    }
    
    
    
    
    
}",1454833342
Codewithnav,navpreetsingh951818,319,3639,java,"class Solution {
    public boolean isZeroArray(int[] nums, int[][] q) {
        List<int[]> arr = new ArrayList<>();
        
        
        for(int[] e : q){
            arr.add(new int[]{e[0],1});
            arr.add(new int[]{e[1],-1});
        }
        int n = nums.length;
        Collections.sort(arr,(a,b)->{
            if(a[0] == b[0]) return b[1] - a[1];
            
            return a[0] - b[0];
        });
        
        long[] count = new long[n+1];
        
        for(int[] e : q){
            
            count[e[0]]++;
            count[e[1]+1]--;
        }
        
        
        for(int i = 1;i<n;i++){
            count[i]+= count[i-1];
        }
        
        
        for(int i = 0;i<n;i++){
            if(count[i] <nums[i]) return false;
        }
        
        return true;
        
    }
} ",1454816057
Codewithnav,navpreetsingh951818,319,3643,java,"class Solution {
    public int minZeroArray(int[] nums, int[][] q) {
        
        
        int l = 0;
        int r = q.length;
        
        int res = -1;
        while(l <= r){
            int mid=  ((r - l) >> 1) + l;
            
            
            if(poss(nums,q,mid)){
                res = mid;
                r = mid - 1;
            }else{
                l = mid + 1;
            }
        } 
        
        return res;
    }
    
    public boolean poss(int[] nums, int[][] q,int k) {
        List<int[]> arr = new ArrayList<>();
        int n = nums.length;
       
        long[] count = new long[n+1];
        
        for(int i =0;i<k;i++){
            int[] e = q[i];
            count[e[0]]+= e[2];
            count[e[1]+1]-= e[2];
        }
        
        
        for(int i = 1;i<n;i++){
            count[i]+= count[i-1];
        }
        
        
        for(int i = 0;i<n;i++){
            if(count[i] <nums[i]) return false;
        }
        
        return true;
        
    } 
}",1454821674
prayoffer,prayoffer,320,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        result = 0
        for i in range(len(nums)):
            if nums[i] == 0:
                if sum(nums[:i]) == sum(nums[(i+1):]):
                    result += 2
                if abs(sum(nums[:i])-sum(nums[(i+1):]))==1:
                    result += 1
        return result",1454808000
prayoffer,prayoffer,320,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        array = [0 for _ in range(len(nums))]
        for l, r in queries:
            array[l] += 1
            if r+1 < len(array):
                array[r+1] -= 1
        for i in range(1, len(array)):
            array[i] += array[i-1]
        for num, upper in zip(nums, array):
            if num > upper:
                return False
        return True",1454820055
prayoffer,prayoffer,320,3643,python3,"class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        def check(k):
            array = [0 for _ in range(len(nums))]
            for l, r, val in queries[:k]:
                array[l] += val
                if r+1 < len(array):
                    array[r+1] -= val
            for i in range(1, len(array)):
                array[i] += array[i-1]
            for num, upper in zip(nums, array):
                if num > upper:
                    return False
            return True
        l = -1
        r = len(queries)+1
        while l + 1 != r:
            m = (l+r)//2
            if check(m):
                r = m
            else:
                l = m
        if r == len(queries)+1:
            return -1
        else:
            return r",1454825987
Micheal Huang,michealhuang7,321,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        ans = 0
        for i in range(len(nums)):
            if nums[i] != 0: continue
            for odir in [-1, 1]:
                nn = nums[:]
                dir = odir
                curr = i
                while True:
                    if curr < 0 or curr > len(nums) - 1: break
                    if nn[curr] == 0: curr += dir
                    else:
                        nn[curr] -= 1
                        dir *= -1
                        curr += dir
                if sum(nn) == 0:
                    ans += 1
        return ans",1454816626
Micheal Huang,michealhuang7,321,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        l = [0] * len(nums)
        r = [0] * (len(nums) + 1)
        for a, b in queries:
            l[a] += 1
            r[b + 1] += 1
        curr = 0
        for i in range(len(nums)):
            curr += l[i]
            curr -= r[i]
            if curr < nums[i]: return False
        return True",1454820581
Micheal Huang,michealhuang7,321,3643,python3,"class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        low = 0
        high = len(queries)
        
        l = [0] * len(nums)
        r = [0] * (len(nums) + 1)
        for a, b, v in queries:
            l[a] += v
            r[b + 1] += v
        curr = 0
        for i in range(len(nums)):
            curr += l[i]
            curr -= r[i]
            if curr < nums[i]: return -1
                
        while low <= high:
            print(f'{low}, {high}')
            mid = low + (high - low) // 2
            l = [0] * len(nums)
            r = [0] * (len(nums) + 1)
            for a, b, v in queries[:mid]:
                l[a] += v
                r[b + 1] += v
            curr = 0
            for i in range(len(nums)):
                curr += l[i]
                curr -= r[i]
                if curr < nums[i]: break
            else:
                high = mid - 1
                continue
            low = mid + 1
            
        # print(f'{low}, {high}')
        return low",1454833365
cm_fast,cm_fast,322,3616,cpp,"class Solution
{
public:
    int countValidSelections(vector<int> &a)
    {
        int n = a.size();
        int ans = 0;
        for (int i = 0; i < n; ++i)
        {
            if (a[i] != 0)
            {
                continue;
            }
            int add = -1;
            int idx = i;
            vector<int> temp = a;
            while (idx >= 0 && idx < n)
            {
                if (temp[idx] == 0)
                {
                    idx += add;
                }
                else
                {
                    temp[idx] -= 1;
                    add = -add;
                    idx += add;
                }
            }
            bool flag = true;
            for (int  j = 0; j < n; j++)
            {
                if (temp[j] != 0)
                {
                    flag = false;
                    break;
                }
            }
            if (flag)
            {
                ans++;
            }
            add = 1;
            idx = i;
            temp = a;
            while (idx >= 0 && idx < n)
            {
                if (temp[idx] == 0)
                {
                    idx += add;
                }
                else
                {
                    temp[idx] -= 1;
                    add = -add;
                    idx += add;
                }
            }
             flag = true;
            for (int j = 0; j < n; j++)
            {
                if (temp[j] != 0)
                {
                    flag = false;
                    break;
                }
            }
            if (flag)
            {
                ans++;
            }
        }
        return ans;
    }
};
",1454833377
cm_fast,cm_fast,322,3639,cpp,"#include <bits/stdc++.h>
using namespace std;

class Solution
{
public:
    bool isZeroArray(vector<int> &a, vector<vector<int>> &q)
    {
        int n = a.size();
        vector<long long> pref(n + 10, 0);
        for (int i = 0; i < (int)(q.size()); i++)
        {
            pref[q[i][0]] += 1;
            pref[q[i][1]+1] -= 1;
        }
        for (int i = 1; i < n; i++)
        {
            pref[i] += pref[i - 1];
        }
        for (int i = 0; i < n; i++)
        {
            if (pref[i] < (long long)a[i])
            {
                return false;
            }
        }
        return true;
    }
};
",1454821835
cm_fast,cm_fast,322,3643,cpp,"
class Solution
{
public:
    const int mod = 1e9 + 7;
    int gcd(int a, int b)
    {
        if (b == 0)
            return a;
        return gcd(b, a % b);
    }
    int add(int x, int y)
    {
        x += y;
        while (x >= mod)
            x -= mod;
        while (x < 0)
            x += mod;
        return x;
    }

    int mul(int x, int y)
    {
        return (x * y) % mod;
    }

    int binpow(int x, int y)
    {
        int z = 1;
        while (y)
        {
            if (y & 1)
            {
                z = mul(z, x);
            }
            x = mul(x, x);
            y >>= 1;
        }
        return z;
    }

    int inv(int x)
    {
        return binpow(x, mod - 2);
    }

    int divide(int x, int y)
    {
        return mul(x, inv(y));
    }
    int minZeroArray(vector<int> &a, vector<vector<int>> &q)
    {

        int n = a.size();
        int low = 0, high = (int)(q.size());
        int ans = -1;
        while (low <= high)
        {
            int mid = low + (high - low) / 2;
            vector<long long> pref(n + 10, 0);
            // vector<long long> pref(n + 10, 0);
            for (int i = 0; i < mid; i++)
            {
                pref[q[i][0]] += q[i][2];
                pref[q[i][1] + 1] -= q[i][2];
            }
            bool flag = true;
            for (int i = 1; i < n; i++)
            {
                pref[i] += pref[i - 1];
            }
            for (int i = 0; i < n; i++)
            {
                if (pref[i] < a[i])
                {
                    flag = false;
                    break;
                }
            }
            if (flag)
            {
                ans = mid;
                high = mid - 1;
            }
            else
            {
                low = mid + 1;
            }
        }
        return ans;
    }
};
",1454813631
Beat The Sky,Beat_The_Sky,324,3616,java,"class Solution {
    public int countValidSelections(int[] nums) {
        int[] pre = new int[nums.length+1];
        for (int i = 1;i<pre.length;i++)pre[i]=pre[i-1]+nums[i-1];
        int[] s = new int[nums.length+1];
        for (int i= nums.length-1;i>=0;i--){
            s[i]=s[i+1]+nums[i];
        }
        int res = 0;
        //System.out.println(Arrays.toString(pre));
        //System.out.println(Arrays.toString(s));
        for (int i = 0 ;i<nums.length;i++){
            if (nums[i]==0){
            if (pre[i]==s[i+1])res+=2;
            else if (Math.abs(pre[i]-s[i+1])==1)res+=1;
            }
        }
        return res;
    }
}",1454814587
Beat The Sky,Beat_The_Sky,324,3639,java,"class Solution {
    public boolean isZeroArray(int[] nums, int[][] q) {
        int[] count = new int[nums.length+1];
        for (int i = 0 ;i<q.length;i++){
            count[q[i][0]]+=1;
            count[q[i][1]+1] -=1;
        }
        for (int i = 1;i<count.length;i++)count[i]+= count[i-1];
        for (int i= 0;i<nums.length;i++){
            if (nums[i]>count[i])return false;
        }
        return true;
    }
}",1454823807
Beat The Sky,Beat_The_Sky,324,3643,java,"class Solution {
    public int minZeroArray(int[] nums, int[][] queries) {
        int lo = 0 ;
        int hi = queries.length;
        int res = -1;
        while (lo<=hi){
            int mid = (lo+hi)/2;
            if (check(nums,queries,mid)){
                res = mid;
                hi  = mid-1;
            }
            else lo = mid+1;
        }
        return res ;
    }
    public boolean check(int[] nums, int[][] q , int mid){
        int[] count = new int[nums.length+1];
        for (int i = 0 ;i<mid;i++){
            count[q[i][0]]+= q[i][2];
            count[q[i][1]+1] -=q[i][2];
        }
        for (int i = 1;i<count.length;i++)count[i]+= count[i-1];
        for (int i= 0;i<nums.length;i++){
            if (nums[i]>count[i])return false;
        }
        return true;
    }
}",1454833464
Ali,changeme,325,3616,java,"class Solution {
    public int countValidSelections(int[] a) {
        int res = 0;
        for (int i = 0; i < a.length; i++) {
            if (a[i] == 0) {
                res += get(a, i, 1) + get(a, i, -1);
            }
        }        
        return res;
    }
    private int get(int[] aa, int i, int d) {
        var a = Arrays.copyOf(aa, aa.length);
        int c = 0;
        for (int j : a) {
            c += j;
        }
        while (true) {
            i += d;
            if (i == aa.length || i < 0) {
                return c == 0 ? 1 : 0;
            }
            if (a[i] > 0) {
                a[i]--;
                c--;
                d = -d;
            }
        }
    }
}",1454810927
Ali,changeme,325,3639,java,"class Solution {
    public boolean isZeroArray(int[] nums, int[][] queries) {
        var m = new int[nums.length + 1];
        for (var q : queries) {
            m[q[0]]++;
            m[q[1] + 1]--;
        }
        int c = 0;
        for (int i = 0; i < nums.length; i++) {
            c += m[i];
            if (nums[i] > c) {
                return false;
            }
        }
        
        return true;
    }
}",1454815553
Ali,changeme,325,3643,java,"class Solution {
    public int minZeroArray(int[] nums, int[][] queries) {
        int j = 0;
        int c = 0;
        var m = new int[nums.length + 1];
        for (int i = 0; i < nums.length; i++) {
            c += m[i];
            while (nums[i] > c && j < queries.length) {
                var q = queries[j];
                if (q[1] >= i) {
                    m[q[0]] += q[2];
                    m[q[1] + 1] -= q[2];
                    if (q[0] <= i) {
                        c += q[2];
                    }
                }
                j++;
            }
            if (nums[i] > c) {
                return -1;
            }
        }
        return j;
    }
}",1454826139
Akhil Rautela 1DS18CS146,akhil_rautela,326,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int n = nums.size();
        vector <int> pref(n + 1);
        int ans = 0;
        for (int i = 0; i < n; i++) {
            pref[i + 1] = pref[i] + nums[i];
        }
        for (int i = 0; i < n; i++) {
            if (nums[i] != 0) continue;
            int suf = pref[n] - pref[i];
            if (pref[i] == suf) {
                ans += 2;
            }
            else if (abs(pref[i] - suf) == 1) {
                ans += 1;
            }
        }
        return ans;
    }
};",1454812368
Akhil Rautela 1DS18CS146,akhil_rautela,326,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        vector <int> toDo(n + 1);
        for (auto z: queries) {
            toDo[z[0]] -= 1;
            toDo[z[1] + 1] += 1;
        }
        int cur = 0;
        for (int i = 0; i < n; i++) {
            cur += toDo[i];
            if (nums[i] + cur > 0) {
                return false;
            }
        }
        return true;
    }
};",1454821472
Akhil Rautela 1DS18CS146,akhil_rautela,326,3643,cpp,"class Solution {
public:
    bool pos(int mid, vector <int> &nums, vector <vector<int>> & queries) {
        int n = nums.size();
        vector <int> toDo(n + 1);
        for (int i = 0; i < mid; i++) {
            toDo[queries[i][0]] -= queries[i][2];
            toDo[queries[i][1] + 1] += queries[i][2];
        }
        int cur = 0;
        for (int i = 0; i < n; i++) {
            cur += toDo[i];
            if (nums[i] + cur > 0) {
                return false;
            }
        }
        return true;
    }
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int low = 0;
        int high = queries.size();
        int ans = -1;
        while (low <= high) {
            int mid = (low + high) / 2;
            if (pos(mid, nums, queries)) {
                high = mid - 1;
                ans = mid;
            }
            else {
                low = mid + 1;
            }
        }
        return ans;
    }
};",1454833496
German Andosov,randle999,328,3616,kotlin,"class Solution {
    fun countValidSelections(nums: IntArray): Int {
        var ans = 0

        for (start in 0..<nums.size) {
            if (nums[start] != 0) continue
            var dir = 1
            var cur = start
            var testNums = IntArray(nums.size) { nums[it] }
            while (cur >= 0 && cur < nums.size) {
                if (testNums[cur] == 0) {
                    cur += dir
                } else {
                    testNums[cur]--
                    dir *= -1
                    cur += dir
                }
            }
            if (testNums.count { it == 0} == nums.size) {
                ans++
            }
            println(testNums.toList())

            dir = -1
            cur = start
            testNums = IntArray(nums.size) { nums[it] }
            while (cur >= 0 && cur < nums.size) {
                if (testNums[cur] == 0) {
                    cur += dir
                } else {
                    testNums[cur]--
                    dir *= -1
                    cur += dir
                }
            }
            if (testNums.count { it == 0} == nums.size) {
                ans++
            }
            println(testNums.toList())
        }
        
        return ans
    }
}",1454814367
German Andosov,randle999,328,3639,kotlin,"class Solution {
    fun isZeroArray(nums: IntArray, queries: Array<IntArray>): Boolean {
        val pref = MutableList(nums.size + 1) { 0 }
        for ((l, r) in queries) {
            pref[l]++
            pref[r + 1]--
        }

        var acc = 0
        for (i in 0..<nums.size) {
            acc += pref[i]
            if (nums[i] > acc) {
                return false
            }
        }

        return true
    }
}",1454833536
German Andosov,randle999,328,3643,kotlin,"class Solution {
    fun minZeroArray(nums: IntArray, queries: Array<IntArray>): Int {
        var (l, r) = -1 to queries.size + 1

        val pref = MutableList(nums.size + 1) { 0 }
        while (r - l > 1) {
            val mid = (l + r) / 2
            var ok = true
            (0..<pref.size).forEach { pref[it] = 0 }

            for (q in 0..<mid) {
                val (segLeft, segRight, segVal) = queries[q]
                pref[segLeft] += segVal
                pref[segRight + 1] -= segVal
            }

            var acc = 0
            for (i in 0..<nums.size) {
                acc += pref[i]
                if (nums[i] > acc) {
                    ok = false
                    break
                }
            }
            
            if (ok) {
                r = mid
            } else {
                l = mid
            }
        }

        return if (r == queries.size + 1) {
            -1
        } else {
            r
        }
    }
}",1454829636
jfantasy90,jfantasy90,329,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        const int n = nums.size();
        int res = 0;
        for (int i = 0; i < n; ++i) {
            if (nums[i] > 0) continue;
            for (int j = 0; j < 2; ++j) {
                vector<int> cur = nums;
                int idx = i, dir = (j == 0 ? -1 : 1);
                while (idx >= 0 && idx < n) {
                    if (cur[idx] == 0) idx += dir;
                    else {
                        cur[idx]--;
                        dir *= -1;
                        idx += dir;
                    }
                }
                
                int t = 1;
                for (int h = 0; h < n && t; ++h) {
                    if (cur[h] != 0) t = 0;
                }
                //if (t > 0) cout << i << "" "" << j << endl;
                res += t;
            }
        }
        return res;
    }
};",1454811415
jfantasy90,jfantasy90,329,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        const int n = nums.size();
        vector<int> cnt(n + 1, 0);
        for (vector<int> query : queries) {
            cnt[query[0]] += 1;
            cnt[query[1] + 1] -= 1;
        }
        
        int s = 0;
        for (int i = 0; i < n; ++i) {
            s += cnt[i];
            if (s < nums[i]) return false;
        }
        return true;
    }
};",1454816390
jfantasy90,jfantasy90,329,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        const int m = queries.size();
        int s = 1;
        for (int i : nums) {
            if (i > 0) s = 0;
        }
        if (s == 1) return 0;
        
        int l = 1, r = m, res = -1;
        while (l <= r) {
            int mid = (l + r) / 2;
            if (check(nums, queries, mid)) {
                res = mid;
                r = mid - 1;
            } else l = mid + 1;
        }
        return res;
    }
    
private:
    bool check(const vector<int>& nums, const vector<vector<int>>& queries, int k) {
        const int n = nums.size();
        const int m = queries.size();
        vector<int> cnt(n + 1, 0);
        for (int i = 0; i < k; ++i) {
            int l = queries[i][0], r = queries[i][1], v = queries[i][2];
            cnt[l] += v;
            cnt[r + 1] -= v;
        }
        int s = 0;
        for (int i = 0; i < n; ++i) {
            s += cnt[i];
            if (nums[i] > s) return false;
        }
        return true;
    }
};",1454826188
Spryzen,Spryzen,330,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        // wantto 
        int ans=0;

        for(int i=0;i<nums.size();i++){
            if (nums[i]==0){
                ans+=(simulate(nums,i,0)+simulate(nums,i,1));
            }
        }
        return ans;
    }
    bool simulate(vector<int>& a,int i,bool dir){
        vector<int> nums;
        for(int j:a)
            nums.emplace_back(j);
        int j=i;
        while (1){
            if (j<0 || j>=nums.size())
                break;
            if (nums[j]){
                nums[j]--;
                dir^=1;
                j+=(dir?1:-1);
            }
            else
                j+=(dir?1:-1);
                
            
        }
        for(int num:nums){
            if (num)
                return 0;
        }
        return 1;
    }
};",1454809727
Spryzen,Spryzen,330,3639,cpp,"

class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        // want to find the 
        vector<int> prefix_sum(nums.size()+1);

        for(vector<int> &q:queries){
            prefix_sum[q[0]]++;
            prefix_sum[q[1]+1]--;
        }

        for(int j=1;j<=nums.size();j++){
            prefix_sum[j]+=prefix_sum[j-1];
        }

        for(int j=1;j<=nums.size();j++){
            if (prefix_sum[j-1]<nums[j-1])
                return 0;
        }
        return 1;

        
        
        
    }
};",1454821347
Spryzen,Spryzen,330,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {

        int lo=0;
        int hi=queries.size()+1;

        if (!isZeroArray(nums,queries,hi)) 
            return -1;
        
    	while (lo < hi) {
    		int mid = lo + (hi - lo) / 2;
    		if (isZeroArray(nums,queries,mid)) {
    			hi = mid;
    		} else {
    			lo = mid + 1;
    		}
    	}
        
    	return lo;
        
    }
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries,int k) {
        // want to find the 
        vector<int> prefix_sum(nums.size()+1);

        for(vector<int> &q:queries){
            if (k--==0)
                break;
            prefix_sum[q[0]]+=q[2];
            prefix_sum[q[1]+1]-=q[2];
        }

        for(int j=1;j<=nums.size();j++){
            prefix_sum[j]+=prefix_sum[j-1];
        }

        for(int j=1;j<=nums.size();j++){
            if (prefix_sum[j-1]<nums[j-1])
                return 0;
        }
        return 1;

        
        
        
    }
};",1454826283
washedup,rejudge_thiz,331,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int su = accumulate(nums.begin(),nums.end(),0),temp=0,re=0;
        for(int i:nums){
            su-=i;temp+=i;
            if(!i){
                if(abs(su-temp)==1) re++;
                else if(su==temp) re+=2;
            }
        }
        return re;
    }
};",1454808821
washedup,rejudge_thiz,331,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n=nums.size();
        vector<int> seg(2*n);
        auto add = [&](int l,int r){
            for(l+=n,r+=n;l<r;l>>=1,r>>=1){
                if(l&1) seg[l++]++;
                if(r&1) seg[--r]++;
            }
        };
        for(auto& v:queries){
            add(v[0],v[1]+1);
        }
        for(int i=0;i<n;i++) seg[i<<1]+=seg[i],seg[i<<1|1]+=seg[i];
        for(int i=0;i<n;i++) if(seg[i+n] < nums[i]) return false;
        return true;
    }
};",1454820346
washedup,rejudge_thiz,331,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n=nums.size();
        vector<int> seg(2*n);
        auto add = [&](int l,int r,int v){
            for(l+=n,r+=n;l<r;l>>=1,r>>=1){
                if(l&1) seg[l++]+=v;
                if(r&1) seg[--r]+=v;
            }
        };
        int l=0,r=queries.size() + 1;
        while(l<r){
            int m=(l+r)/2;
            for(int i=0;i<m;i++){
                add(queries[i][0],queries[i][1]+1,queries[i][2]);
            }
            for(int i=0;i<n;i++) seg[i<<1]+=seg[i],seg[i<<1|1]+=seg[i];
            // cout << l << ' ' << m << ' ' << r << '\n';
            // for(int i:seg) cout << i << ' ';
            // cout << '\n';
            bool good = true;
            for(int i=0;i<n;i++) if(seg[i+n] < nums[i]) good=false;
            fill(seg.begin(),seg.end(),0);
            if(!good) l=m+1;
            else r=m;
        }
        return l==queries.size() + 1 ? -1 : l;
    }
};",1454833753
Morampudi_Gopi_Prashanth_Raju,Morampudi_Gopi_Prashanth_Raju,332,3616,python3,"from typing import List

class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        def simulate(start: int, direction: int) -> bool:
            arr = nums[:]
            n = len(arr)
            curr = start
            
            while 0 <= curr < n:
                if arr[curr] == 0:
                    curr += direction
                else:
                    arr[curr] -= 1
                    direction *= -1
                    curr += direction
            return all(x == 0 for x in arr)
        valid_starts = [i for i, num in enumerate(nums) if num == 0]
        count = 0
        for start in valid_starts:
            if simulate(start, -1):  
                count += 1
            if simulate(start, 1):  
                count += 1
        
        return count
",1454807483
Morampudi_Gopi_Prashanth_Raju,Morampudi_Gopi_Prashanth_Raju,332,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        n=len(nums)
        dec=[0]*(n+1)
        for q in queries:
            i,j=q
            dec[i]+=1
            if j+1<n:
                dec[j+1]-=1
        d=0
        for i in range(len(nums)):
            d+=dec[i]
            if d<nums[i]:
                return False
        return True
        ",1454816155
Morampudi_Gopi_Prashanth_Raju,Morampudi_Gopi_Prashanth_Raju,332,3643,python3,"class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        n=len(nums)
        def h(k):
            dec=[0]*(n+1)
            for q in queries[:k]:
                i,j,val=q
                dec[i]+=val
                if j+1<n:
                    dec[j+1]-=val
            d=0
            for i in range(len(nums)):
                d+=dec[i]
                if d<nums[i]:
                    return False
            return True
        l=0
        r=len(queries)
        result=-1
        while l<=r:
            mid=(l+r)//2
            if h(mid):
                result=mid
                r=mid-1
            else:
                l=mid+1
        return result
                
        ",1454826401
Guddu Singh,guddusingh123,333,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& a) {
        int n = a.size();
        vector<int> pre(n + 1);
        for (int i = 0; i < n; i ++) {
            pre[i + 1] = pre[i] + a[i];
        }
        
        int res = 0;
        for (int i = 0; i < n; i++) {
            if (a[i] == 0) {
                int l = pre[i];
                int r = pre[n] - pre[i];
                if (l == r) {
                    res += 2;
                }
                else if(l == r + 1 || r == l + 1) res++;
            }
        }
        return res;
    }
};",1454807962
Guddu Singh,guddusingh123,333,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& a, vector<vector<int>>& q) {
        int n = a.size();
        vector<int> pre(n + 1);
        for(auto v: q) {
            int l = v[0];
            int r = v[1];
            pre[r + 1]--;
            pre[l]++;
        }
        for (int i = 1; i <= n; i++) {
            pre[i] += pre[i - 1];
        }
        
        for (int i = 0; i < n; i++) {
            if (a[i] > pre[i]) {
                return false;
            }
        }
        return true;
    }
};",1454813263
Guddu Singh,guddusingh123,333,3643,cpp,"class Solution {
public:
    
    int minZeroArray(vector<int>& a, vector<vector<int>>& q) {
        int n = a.size();
        int m = q.size();
        
        
        int l = 0, r = m, res = -1;
        while (l <= r) {
            int mid = (l + r) >> 1;
            vector<int> pre(n + 1);
            for (int i = 0; i < mid; i++) {
                auto v = q[i];
                int l = v[0];
                int r = v[1];
                int val = v[2];
                pre[r + 1] -= val;
                pre[l] += val;
            }
            for (int i = 1; i <= n; i++) {
                pre[i] += pre[i - 1];
            }
            bool f = true;
            for (int i = 0; i < n; i++) {
                if (a[i] > pre[i]) {
                    f = false;
                }
            }
            if (f) {
                res = mid;
                r = mid - 1;
            }
            else l = mid + 1;
        }
        return res;
    }
};",1454819532
hero777,hero777,334,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int s = accumulate(nums.begin(), nums.end(), 0);
        int ans = 0;
        int curr = 0;
        for(int n: nums){
            if(n == 0){
                if(2*curr == s)
                    ans += 2;
                if(abs(s - 2*curr) == 1)
                    ans += 1;
            }
            else{
                curr += n;
            }
        }
        return ans;
    }
};",1454809690
hero777,hero777,334,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        vector<int> x(nums.size(), 0);
        for(vector<int> q: queries){
            x[q[0]]++;
            if(q[1] != nums.size()-1)
                x[q[1]+1]--;
        }
        for(int i = 1; i < nums.size(); i++)
            x[i] += x[i-1];
        for(int i = 0; i < nums.size(); i++)
            if(x[i] < nums[i])
                return false;
        return true;
    }
};",1454814709
hero777,hero777,334,3643,cpp,"class Solution {
public:
    bool poss(vector<int> &nums, vector<vector<int>>& q, int m){
        vector<int> x(nums.size(), 0);
        for(int i = 0; i < m; i++){
            x[q[i][0]] += q[i][2];
            if(q[i][1] < nums.size() - 1)
                x[q[i][1] + 1] -= q[i][2];
        }
        if(x[0] < nums[0])
            return false;
        for(int i = 1; i < nums.size(); i++){
            x[i] += x[i-1];
            if(x[i] < nums[i])
                return false;
        }
        return true;
    }
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int l = 0;
        int r = queries.size() + 1;
        while((l < r) && l != queries.size() + 1){
            // cout << l << ' ' << r << '\n';
            int m = (l + r)/2;
            if(poss(nums, queries, m))
                r = m;
            else
                l = m+1;
        }
        if(l == queries.size() + 1)
            return -1;
        return l;
    }
};",1454833951
lihaicoder,lihaicoder,335,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        total = sum(nums)
        cur = 0
        ans = 0
        for i in range(len(nums)):
            if nums[i] == 0:
                if cur == total - cur:
                    ans += 2
                elif abs(cur - (total - cur)) == 1:
                    ans += 1
            else:
                cur += nums[i]
        return ans",1454808559
lihaicoder,lihaicoder,335,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        evts = []
        # 0: start
        # 1: end
        for l, r in queries:
            evts.append((l, 0))
            evts.append((r + 1, 1))
        evts.sort(reverse = True)
        cur = 0
        for i in range(len(nums)):
            while evts and evts[-1][0] <= i:
                _, action = evts.pop()
                if action == 0:
                    cur += 1
                else:
                    cur -= 1
            # print(i, cur)
            if nums[i] > cur:
                return False
        return True
                    
",1454817799
lihaicoder,lihaicoder,335,3643,python3,"class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        def test(k):
            evts = []
            # 0: start
            # 1: end
            for i in range(k):
                l, r, v = queries[i]
                evts.append((l, 0, v))
                evts.append((r + 1, 1, v))
            evts.sort(reverse = True)
            cur = 0
            for i in range(len(nums)):
                while evts and evts[-1][0] <= i:
                    _, action, v = evts.pop()
                    if action == 0:
                        cur += v
                    else:
                        cur -= v
                if nums[i] > cur:
                    return False
            return True
        # if not test(len(queries)):
        #     return -1
        l = 0
        r = len(queries)
        ans = -1
        while l <= r:
            mid = (l + r) // 2
            if test(mid):
                ans = mid
                r = mid - 1
            else:
                l = mid + 1
        return ans
                
        
        ",1454826569
Anshul Sharma,anshul7sh,338,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int totalSum = 0;
        for(auto x:nums) {
            totalSum+=x;
        }
        
        int res = 0;
        int currSum=0;
        
        for(auto x:nums) {
            currSum+=x;
            
            if(x==0) {
                int leftSum=totalSum-currSum;
                
                if(currSum==leftSum) {
                    res+=2;
                } else if(abs(currSum-leftSum)==1) {
                    res++;
                }
            }
        }
        
        return res;
    }
};",1454808029
Anshul Sharma,anshul7sh,338,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n=nums.size();
        vector<int> line(n+1,0);
        
        for(auto x:queries) {
            line[x[0]]++;
            line[x[1]+1]--;
        }
        
        int currDec=0;
        
        for(int i=0;i<n;i++) {
            currDec+=line[i];
            
            if(nums[i]-currDec>0)
                return false;
        }
        
        return true;
    }
};",1454811698
Anshul Sharma,anshul7sh,338,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int start=0,end=queries.size();
        
        int res = -1;
        
        while(start<=end) {
            int mid = start+(end-start)/2;
            
            if(isZeroArray(nums,queries,mid)) {
                res=mid;
                end=mid-1;
            } else {
                start=mid+1;
            }
        }
        
        return res;
    }
    
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries, int len1) {
        int n=nums.size();
        vector<int> line(n+1,0);
        
        for(int i=0;i<len1;i++) {
            auto x=queries[i];
            
            line[x[0]]+=x[2];
            line[x[1]+1]-=x[2];
        }
        
        int currDec=0;
        
        for(int i=0;i<n;i++) {
            currDec+=line[i];
            
            if(nums[i]-currDec>0)
                return false;
        }
        
        return true;
    }
};


/*

    7   6   8
    11   -2  0   -9

*/",1454819723
mdcoder123,mdcoder123,342,3616,cpp,"class Solution {
public:
    bool solve(vector<int> nums,int curr,int dir){
        int n = nums.size();
        while(curr>=0 && curr<=n-1){
            if(nums[curr]==0)
                curr+=dir;
            else{
                nums[curr]--;
                if(dir==1)
                    dir=-1;
                else
                    dir=1;
                curr+=dir;
            }
        }
        for(auto it:nums)
        {
            if(it!=0)
                return false;
        }
        return true;
    }
    int countValidSelections(vector<int>& nums) {
        int n = nums.size();
        int cnt = 0;
        for(int i=0;i<n;i++){
            if(nums[i]!=0)
                continue;
            if(solve(nums,i,1))
                cnt++;
            if(solve(nums,i,-1))
                cnt++;
        }
        return cnt;
    }
};",1454811389
mdcoder123,mdcoder123,342,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        vector<int> tmp(n+1,0);
        for(auto it:queries){
            tmp[it[0]]--;
            tmp[it[1]+1]++;
        }
        vector<int> prefix(n+1,0);
        prefix[0]=tmp[0];
        for(int i=1;i<n;i++)
        {
            prefix[i]=prefix[i-1]+tmp[i];
        }
        for(int i=0;i<n;i++){
            if(nums[i]+prefix[i]>0)
                return false;
        }
        return true;
    }
};",1454815846
mdcoder123,mdcoder123,342,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        int low = 0;
        int high = queries.size();
        int ans=-1;
        while(low<=high){
            int mid = (low+high)/2;
            vector<int> tmp(n+1,0);
            for(int i=0;i<mid;i++){
                tmp[queries[i][0]]-=queries[i][2];
                tmp[queries[i][1]+1]+=queries[i][2];
            }
            vector<int> prefix(n+1,0);
            prefix[0]=tmp[0];
            for(int i=1;i<n;i++)
            {
                prefix[i]=prefix[i-1]+tmp[i];
            }
            bool tp=true;
            for(int i=0;i<n;i++){
                if(nums[i]+prefix[i]>0)
                {
                    tp = false;
                    break;
                }
            }
            if(tp){
                ans=mid;
                high=mid-1;
            }
            else
                low=mid+1;
        }
        return ans;
    }
};",1454834274
aqxa2k,aqxa2k,343,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& a) {
        int cnt = 0; 
        int s = 0; 
        for (auto x: a) s += x; 
        int cur = 0; 
        for (int i = 0; i < a.size(); ++i) {
            if (a[i]) {
                cur += a[i]; 
                s -= a[i]; 
            } else {
                if (s == cur) cnt += 2; 
                else if (abs(s - cur) == 1) cnt++; 
            }
        }
        return cnt; 
    }
};",1454807532
aqxa2k,aqxa2k,343,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& a, vector<vector<int>>& b) {
        int n = a.size(), q = b.size(); 
        vector<int> p(n, 0); 
        for (auto x: b) {
            int l = x[0], r = x[1]; 
            p[l]++; 
            if (r + 1 < n) p[r + 1]--; 
        }
        for (int i = 1; i < n; ++i) p[i] += p[i - 1]; 
        bool ok = 1; 
        for (int i = 0; i < n; ++i) {
            ok &= p[i] >= a[i]; 
        }
        return ok; 
    }
};",1454809667
aqxa2k,aqxa2k,343,3643,cpp,"using ll = long long; 

class Solution {
public:
    int minZeroArray(vector<int>& a, vector<vector<int>>& b) {
        int n = a.size(); 

        if (*max_element(a.begin(), a.end()) == 0) return 0; 
                   
        vector<int> pp(n + 1, 0); 
        for (int i = 0; i < b.size(); ++i) {
            pp[b[i][0]] += b[i][2]; 
            pp[b[i][1] + 1] -= b[i][2]; 
        }
        for (int i = 0; i < n; ++i) pp[i + 1] += pp[i]; 
        int o = 1; 
        for (int i = 0; i < n; ++i) o &= pp[i] >= a[i]; 
        if (!o) return -1; 
        
        int lo = 0, hi = b.size() - 1; 
        while (lo < hi) {
            int md = (lo + hi) / 2; 
            vector<int> p(n + 1, 0); 
            for (int i = 0; i <= md; ++i) {
                p[b[i][0]] += b[i][2]; 
                p[b[i][1] + 1] -= b[i][2]; 
            }
            for (int i = 0; i < n; ++i) p[i + 1] += p[i]; 
            int ok = 1; 
            for (int i = 0; i < n; ++i) ok &= p[i] >= a[i]; 
            if (ok) {
                hi = md;
            } else {
                lo = md + 1; 
            }
        }

        return lo + 1; 
    }
};",1454819938
ToTea,ToTea,345,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        const int total = accumulate(nums.begin(), nums.end(), 0);
        int prefix = 0;
        int ans = 0;
        for (int i = 0; i < nums.size(); ++i) {
            prefix += nums[i];
            if (nums[i] != 0) continue;
            if (prefix == (total - prefix)+1) ans += 1;
            else if (prefix == (total - prefix)-1) ans += 1;
            else if (prefix == (total - prefix)) ans += 2;
        }
        return ans;
    }
};",1454817906
ToTea,ToTea,345,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        vector<int> runDiffs(nums.size()+1);
        for (const auto& query : queries) {
            runDiffs[query[0]] += 1;
            runDiffs[query[1]+1] -= 1;
        }
        int cur = 0;
        for (int i = 0; i < nums.size(); ++i) {
            cur += runDiffs[i];
            if (nums[i] > cur) return false;
        }
        return true;
    }
};",1454825010
ToTea,ToTea,345,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        vector<int> runDiffs(nums.size()+1);
        int needK = 0;
        int cur = 0;
        for (int i = 0; i < nums.size(); ++i) {
            cur += runDiffs[i];
            while (needK < queries.size() && nums[i] > cur) {
                const auto query = queries[needK++];
                runDiffs[query[0]] += query[2];
                if (query[0] <= i) cur += query[2];
                runDiffs[query[1]+1] -= query[2];
                if (query[1]+1 <= i) cur -= query[2];
            }
            if (nums[i] > cur) return -1;
        }
        return needK;
    }
};",1454834427
Ashutosh Krishna,ashu_2202,348,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& v) {
        int ans=0, n=v.size();
        for(int i=0;i<v.size();i++){
            if(v[i]==0){
                for(int j=0;j<2;j++){
                    // j==0 right
                    // j==1 left
                    vector<int> p;
                    for(auto&aa : v){
                        p.push_back(aa);
                    }
                    int idx = i, dir = j;
                    while(idx>=0 && idx<n){
                        if(p[idx]){
                            p[idx]--;
                            dir ^= 1;
                        }
                        if(!dir) idx++;
                        else idx--;
                    }
                    bool check=true;
                    for(int l=0;l<n;l++)
                        if(p[l] != 0){
                            check = false;
                            break;
                        }
                    if(check) ans++;
                }
            }
        }
        return ans;
    }
};",1454816865
Ashutosh Krishna,ashu_2202,348,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& v, vector<vector<int>>& q) {
        int n = v.size();
        vector<int> a(n+1, 0);
        for(auto&p : q){
            a[p[0]]--;
            a[p[1]+1]++;
        }
        int cur = 0;
        bool pos = true;
        for(int i=0;i<n;i++){
            cur += a[i];
            if(cur+v[i] > 0){
                pos = false;
                break;
            }
        }
        return pos;
    }
};",1454820220
Ashutosh Krishna,ashu_2202,348,3643,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& v, vector<vector<int>>& q, int k) {
        int n = v.size();
        vector<int> a(n+1, 0);
        for(int i=0;i<k;i++){
            a[q[i][0]] -= q[i][2];
            a[q[i][1]+1] += q[i][2];
        }
        int cur = 0;
        bool pos = true;
        for(int i=0;i<n;i++){
            cur += a[i];
            if(cur+v[i] > 0){
                pos = false;
                break;
            }
        }
        return pos;
    }
    int minZeroArray(vector<int>& v, vector<vector<int>>& q) {
        int n = v.size();
        if(isZeroArray(v,q,0))
            return 0;
        if(!isZeroArray(v,q,q.size()))
            return -1;
        
        int l=0, r= q.size();
        while(l+1 < r){
            int m = (l+r)/2;
            if(isZeroArray(v,q,m))
                r = m;
            else
                l = m;
        }
        return r;
    }
};",1454834532
Yucheng Dai,Rainingcity,352,3616,cpp,"class Solution {
private:
    int run(vector<int> nums, int st, bool dir) {
        int n = nums.size();
        int l = st - 1, r = st + 1, cur = st, cnt = 0;
        while(cur != n && cur != -1) {
            if (nums[cur] == 0) {
                if (dir) {
                    // right
                    if (cur == r) {
                        cur++;
                        r++;
                    } else {
                        cur = r;
                    }
                } else {
                    // left
                    if (cur == l) {
                        cur--;
                        l--;
                    } else {
                        cur = l;
                    }
                }
            } else {
                nums[cur]--;
                if (nums[cur] == 0) cnt++;
                dir = !dir;
                if (dir) cur++;
                else cur--;
            }
        }
        // cout << st << "" "" << dir << "" "" << cnt << endl;
        return cnt;
    }
public:
    int countValidSelections(vector<int>& nums) {
        int n = nums.size();
        int cnt = 0;
        for(int i = 0; i < n; i++) if (nums[i] != 0) cnt++;
        int ans = 0;
        for(int i = 0; i < n; i++) {
            if (nums[i] != 0) continue;
            if (run(nums, i, false) == cnt) ans++;
            if (run(nums, i, true) == cnt) ans++;
        }
        return ans;
    }
};",1454811134
Yucheng Dai,Rainingcity,352,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        vector<int> psum(n + 1, 0);
        for(auto& q: queries) {
            psum[q[0]]++;
            psum[q[1]+1]--;
        }
        for(int i = 1; i <= n; i++) psum[i] += psum[i - 1];
        for(int i = 0; i < n; i++) {
            if (nums[i] > psum[i]) return false;
        }
        return true;
    }
};",1454815745
Yucheng Dai,Rainingcity,352,3643,cpp,"class Solution {
private:
    bool run(vector<int>& nums, vector<vector<int>>& queries, int r) {
        int n = nums.size();
        vector<int> psum(n + 1, 0);
        for(int i = 0; i < r; i++) {
            psum[queries[i][0]]++;
            psum[queries[i][1]+1]--;
        }
        for(int i = 1; i <= n; i++) psum[i] += psum[i - 1];
        for(int i = 0; i < n; i++) {
            if (nums[i] > psum[i]) return false;
        }
        return true;
    }
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        bool flag = true;
        for(int x: nums) {
            if (x != 0) {
                flag = false;
                break;
            }
        }
        if (flag) return 0;
        int m = queries.size();
        vector<vector<int>> qqs{};
        for(int i = 0; i < m; i++) {
            vector<int>& q = queries[i];
            for(int c = 0; c < q[2]; c++) {
                qqs.push_back(vector<int>{q[0], q[1], i});
            }
        }
        if (!run(nums, qqs, qqs.size())) return -1;
        int l = 0, r = qqs.size() - 1;
        while(l < r) {
            int mid = (l + r) >> 1;
            if (run(nums, qqs, mid + 1)) r = mid;
            else l = mid + 1;
        }
        return qqs[r][2] + 1;
    }
};",1454834635
junbinliang,junbinliang,353,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& a) {
        int n = a.size();
        int ans = 0;
        for(int i = 0; i < a.size(); i++) {
            if(a[i] != 0) continue;
            vector<int> b(a.begin(), a.end());
            vector<int> c(a.begin(), a.end());
            
            int j = i;
            int d = 1;
            while(j < n && j >= 0) {
                if(b[j] == 0) {
                    j += d;
                    continue;
                }
                b[j]--;
                d = d * -1;
                j += d;
            }
            
            j = i;
            d = -1;
            while(j < n && j >= 0) {
                if(c[j] == 0) {
                    j += d;
                    continue;
                }
                c[j]--;
                d = d * -1;
                j += d;
                //cout << ""gg "" << i << "" "" << j << endl;
            }
              
            
            
            if(ok(b)) ans++;
            if(ok(c)) ans++;
            
        }
        
        return ans;
    }
    
    bool ok(vector<int>& a) {
        sort(a.begin(), a.end());
        return a[0] == 0 && a.back() == 0;
    }
};",1454812716
junbinliang,junbinliang,353,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& a, vector<vector<int>>& q) {
        int n = a.size();
        vector<int> line(n + 1);
        for(auto& p : q) {
            int l = p[0], r = p[1];
            line[l]++;
            line[r + 1]--;
        }
        
        int s = 0;
        for(int i = 0; i < n; i++) {
            s += line[i];
            if(s < a[i]) return false;
        }
        return true;
    }
};",1454807820
junbinliang,junbinliang,353,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& a, vector<vector<int>>& q) {
        int n = a.size();
        
        bool all = true;
        for(int x : a) {
            if(x != 0) all = false;
        }
        
        if(all) return 0;
        
        int l = 0, r = q.size() - 1;
        int ans = -1;
        while(l <= r) {
            int mid = l + (r - l) / 2;
            vector<long long> line(n + 1);
            for(int i = 0; i <= mid; i++) {
                int l = q[i][0], r = q[i][1], w = q[i][2];
                line[l] += w;
                line[r + 1] -= w;
            }
            
            long long s = 0;
            bool ok = true;
            for(int i = 0; i < n; i++) {
                s += line[i];
                if(s < a[i]) {
                    ok = false;
                    break;
                }
            }
            if(ok) {
                ans = mid + 1;
                r = mid - 1;
            } else {
                l = mid + 1;
            }
        }
        
        return ans;
    }
};

/*
[7,6,8]
[[0,0,2],[0,1,5],[2,2,5],[0,2,4]]
4
*/",1454820278
Rahul Anand,myrahulanand20,354,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int cnt =0;
        int su=0;
        for(int x:nums)su+=x;
        int kit=0;
        for(int x:nums){
            kit+=x;
            su-=x;
            if(x==0){
                int l=abs(su-kit);
                if(l==1)cnt++;
                if(l==0)cnt+=2;
                
            }
        }
        return cnt;
    }
};",1454809241
Rahul Anand,myrahulanand20,354,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        int m = queries.size();
        vector<int> cnt(100005,0);
        for(auto &x:queries){
            cnt[x[0]]++;
            cnt[x[1]+1]--;
        }
        for(int i=1;i<=100000;i++){
            cnt[i]+=cnt[i-1];
        }
        bool flag =true;
        for(int i=0;i<n;i++){
            if(nums[i]>cnt[i]){
                flag=false;
                break;
            }
        }
        return flag;
    }
};",1454815726
Rahul Anand,myrahulanand20,354,3643,cpp,"class Solution {
public:
    long long n,m;
    vector<vector<int>> queries;
    vector<int> nums;
    bool check(long long k){
        vector<long long> cnt(100005,0);
        long long ft=0;
        for(auto &x:queries){
            ft+=1;
            if(ft>k)break;
            cnt[x[0]]+=x[2];
            cnt[x[1]+1]-=x[2];
        }
        for(long long i=1;i<=n+1;i++){
            cnt[i]+=cnt[i-1];
        }
        bool flag =true;
        for(long long i=0;i<n;i++){
            if(nums[i]>cnt[i]){
                flag=false;
                break;
            }
        }
        return flag;
    }
    int minZeroArray(vector<int>& num, vector<vector<int>>& q) {
        nums=num;
        queries=q;
        n=num.size();
        m=q.size();
        long long l=0,r=m;
        long long ans=m+1;
        while(l<=r){
            long long mid = l+(r-l)/2;
            if(check(mid)){
                ans=min(ans,mid);
                r=mid-1;
            }
            else{
                l=mid+1;
            }
        }

        if(ans==m+1)ans=-1;
        return ans;
    }
};",1454827275
Yuwen Yan,yuwen-yan,355,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        total_sum = sum(nums)
        if total_sum == 0:
            return len(nums) * 2

        ans = 0
        
        curr_sum = 0
        for i in range(len(nums)):
            if nums[i] == 0:
                if total_sum == 2 * curr_sum:
                    ans += 2
                elif abs(total_sum - 2 * curr_sum) == 1:
                    ans += 1
            curr_sum += nums[i]
        return ans",1454809477
Yuwen Yan,yuwen-yan,355,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        counter = collections.Counter()
        for l, r in queries:
            counter[l] += 1
            counter[r + 1] -= 1

        current_count = 0
        for i in range(len(nums)):
            current_count += counter[i]
            if current_count < nums[i]:
                return False
        return True
            
            
        ",1454815398
Yuwen Yan,yuwen-yan,355,3643,python3,"class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        if sum(nums) == 0:
            return 0
            
        
        left = 0
        right = len(queries)

        while left < right:
            mid = (left + right) // 2
            def is_bad():
                counter = collections.Counter()
                for i in range(mid + 1):
                    counter[queries[i][0]] += queries[i][2]
                    counter[queries[i][1] + 1] -= queries[i][2]
        
                current_count = 0
                for i in range(len(nums)):
                    current_count += counter[i]
                    if current_count < nums[i]:
                        return True
                return False
            if is_bad():
                left = mid + 1
            else:
                right = mid
        return -1 if left == len(queries) else (left + 1)",1454827328
lol34,lol34,356,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        ind = []
        for i in range(len(nums)):
            if nums[i]==0:
                ind.append(i)
        ans = 0
        for j in range(len(ind)):
            left,right = 0,0
            for k in range(ind[j]):
                left+=nums[k]
            for k in range(ind[j]+1,len(nums)):
                right+=nums[k]
            if left==right:
                ans+=2
            elif abs(left-right)==1:
                ans+=1
        return ans",1454811148
lol34,lol34,356,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        arr = [0]*(len(nums)+1)
        for i,j in queries:
            arr[i]+=1
            arr[j+1]-=1
        arr = list(accumulate(arr))
        for i in range(len(nums)):
            if arr[i]>=nums[i]:
                True
            else:
                return False
        return True",1454814602
lol34,lol34,356,3643,python3,"class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        lo = 0
        hi = len(queries)
        ans = -1
        while(lo<=hi):
            mid = (lo+hi)//2
            def check(mid):
                arr = [0]*(len(nums)+1)
                for i,j,val in queries[:mid]:
                    arr[i]+=val
                    arr[j+1]-=val
                arr = list(accumulate(arr))
                # print(arr,mid)
                # print(nums)
                for i in range(len(nums)):
                    if arr[i]>=nums[i]:
                        True
                    else:
                        return False
                return True
            if check(mid):
                ans = mid
                hi = mid-1
            else:
                lo = mid+1
        return ans",1454820333
Balakrishnan Varadarajan,balakrishnan_v,358,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int n=nums.size();
        int ans=0;
        for(int i=0;i<n;i++) {
            if (nums[i]!=0) continue;
            for(int d : {-1,1}) {
                vector<int> curr = nums;
                int currd = d;
                int j = i;
                while(1) {
                    if (j < 0 || j >= n) break;
                    if (curr[j]>0) {
                        curr[j]--;
                        currd = -currd;
                    }
                    j += currd;
                }
                if (accumulate(curr.begin(),curr.end(),0)==0) ans++;
            }
        }
        return ans;
    }
};",1454834937
Balakrishnan Varadarajan,balakrishnan_v,358,3639,cpp,"
#define ll long long
class Solution {
public:
    
    bool Check(const vector<int>& nums, const vector<vector<int>>& queries, int k) {
        int n = nums.size();
        vector<ll> arr(n,0);
        for(int i=0;i<k;i++) {
            int l = queries[i][0];
            int r = queries[i][1];
            int v = 1;
            arr[l]-=v;
            if (r+1 < n) arr[r+1] += v;
        }
        for(int i=0;i<n;i++) {
            if (i) arr[i]+=arr[i-1];
            if (arr[i]+nums[i]>0) return false;
        }
        return true;
    }
    
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n=nums.size();
        int numq = queries.size();
        return Check(nums,queries,numq);
        
    }
};",1454829172
Balakrishnan Varadarajan,balakrishnan_v,358,3643,cpp,"#define ll long long
class Solution {
public:
    
    bool Check(const vector<int>& nums, const vector<vector<int>>& queries, int k) {
        int n = nums.size();
        vector<ll> arr(n,0);
        for(int i=0;i<k;i++) {
            int l = queries[i][0];
            int r = queries[i][1];
            int v = queries[i][2];
            arr[l]-=v;
            if (r+1 < n) arr[r+1] += v;
        }
        for(int i=0;i<n;i++) {
            if (i) arr[i]+=arr[i-1];
            if (arr[i]+nums[i]>0) return false;
        }
        return true;
    }
    
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n=nums.size();
        int numq = queries.size();
        if (!Check(nums,queries,numq)) return -1;
        int low=0;
        int high=numq;
        while(low<high) {
            int mid = (low+high)/2;
            if (Check(nums,queries,mid)) {
                high=mid;
            } else {
                low=mid+1;
            }
        }
        return low;
        
    }
};",1454827168
Rishabh Agarwal,ag_rishabh,359,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int n = nums.size();
        vector<int> real = nums;
        int ans = 0;
        
        for (int i = 0; i < n; i++) {
            if (nums[i] != 0) continue;

            int pos = i;
            bool left = true;
            vector<int> currentState = nums;

            while (pos >= 0 && pos < n) {
                if (nums[pos] > 0) {
                    nums[pos]--;
                    left = !left;
                    if (left) pos--;
                    else pos++;
                } else if (nums[pos] == 0) {
                    if (left) pos--;
                    else pos++;
                }
            }

            bool flag = true;
            for (auto it : nums) {
                if (it != 0) {
                    flag = false;
                    break;
                }
            }

            if (flag) ans++;

            nums = currentState;
            pos = i;
            left = false;
            while (pos >= 0 && pos < n) {
                if (nums[pos] > 0) {
                    nums[pos]--;
                    left = !left;
                    if (left) pos--;
                    else pos++;
                } else if (nums[pos] == 0) {
                    if (left) pos--;
                    else pos++;
                }
            }

            flag = true;
            for (auto it : nums) {
                if (it != 0) {
                    flag = false;
                    break;
                }
            }

            if (flag) ans++;

            nums = currentState;
        }
        
        return ans;
    }
};
",1454812205
Rishabh Agarwal,ag_rishabh,359,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        vector<int>line(1e5+10);
        int n = nums.size();
        for(int i=0;i<queries.size();i++){
            line[queries[i][0]]++;
            line[queries[i][1]+1]--;
        }
        for(int i=1;i<=n;i++){
            line[i] = line[i] + line[i-1];
        }
        bool flag = true;
        for(int i=0;i<n;i++){
            if(nums[i]==0)continue;
            if(nums[i]>line[i]){
                flag = false;
                break;
            }
        }
        return flag;
    }
};",1454817724
Rishabh Agarwal,ag_rishabh,359,3643,cpp,"class Solution {
public:
    bool check(int mid, vector<int>& nums, vector<vector<int>>& queries) {
        vector<int> line(nums.size() + 1, 0);
        int n = nums.size();
        
        for (int i = 0; i < mid; i++) {
            int start = queries[i][0];
            int end = queries[i][1];
            int val = queries[i][2];
            line[start] += val;
            if (end + 1 < n) line[end + 1] -= val;
        }
        for (int i = 1; i < n; i++) {
            line[i] += line[i - 1];
        }
        for (int i = 0; i < n; i++) {
            if (nums[i] > line[i]) {
                return false;
            }
        }
        
        return true;
    }

    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        int low = 0, high = queries.size(), ans = -1;
        
        while (low <= high) {
            int mid = low + (high - low) / 2;
            if (check(mid, nums, queries)) {
                ans = mid;  
                high = mid - 1;
            } else {
                low = mid + 1;
            }
        }
        
        return ans;
    }
};
",1454827538
Yogharaj_A_R,Yogharaj_A_R,362,3616,cpp,"class Solution {
public:
    bool find(int p,int d,vector<int> &nums) {
        vector<int> b=nums;
        while(p>=0 && p<nums.size()) {
            if(b[p]==0) {
                if(d==0) p++;
                else p--;
            }
            else if(b[p]>0) {
                b[p]--;
                d=!d;
                if(d==0) p++;
                else p--;
            }
        }
        for(auto x:b) if(x!=0) return false;
        return true;
    }
    int countValidSelections(vector<int>& nums) {
        int ans=0;
        for(int i=0;i<nums.size();i++) {
            for(int j=0;j<2;j++) {
                if(nums[i]==0 && find(i,j,nums)) {
                    ans++;
                    //cout<<i<<"" ""<<j<<endl;
                }
            }
        }
        return ans;
    }
};",1454813440
Yogharaj_A_R,Yogharaj_A_R,362,3639,cpp,"#define ll long long int
class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n=nums.size();
        vector<ll> diff(n,0);
        for(auto x:queries) {
            int l=x[0],r=x[1];
            diff[l]--;
            if(r+1<diff.size()) diff[r+1]++;
        }
        ll s=0;
        for(int i=0;i<n;i++) {
            s+=diff[i];
            int p=nums[i]+s;
            nums[i]=max(0,p);
            if(nums[i]!=0) return false;
        }
        return true;
        
    }
};",1454820328
Yogharaj_A_R,Yogharaj_A_R,362,3643,cpp,"#define ll long long int
class Solution {
public:
    bool pred(int x,vector<int> &nums,vector<vector<int>> &queries) {
        int n=nums.size();
        vector<int> diff(n,0);
        for(int i=0;i<=x;i++) {
            int l=queries[i][0],r=queries[i][1];
            int val=queries[i][2];
            diff[l]-=val;
            if(r+1<n) diff[r+1]+=val;
        }
        int s=0;
        for(int i=0;i<n;i++) {
            s+=diff[i];
            int y=max(0,nums[i]+s);
            if(y!=0) return false;
        }
        return true;
    }
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n=nums.size();
        ll s=0;
        int l=0,r=queries.size()-1;
        for(auto x:nums) s+=x;
        if(s==0) return 0;
        int ans=-1;
        while(l<=r) {
            int mid=l+(r-l)/2;
            if(pred(mid,nums,queries)) {
                ans=mid;
                r=mid-1;
            }
            else l=mid+1;
        }
        if(ans==-1) return -1;
        return ans+1;
    }
};",1454835078
Yilun Wu,yilunw1030,363,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        n = len(nums)
        res = 0
        def simulate(start, direction):
            curr = start
            tmp = nums[:]
            while 0 <= curr < n:
                if tmp[curr] == 0:
                    curr += direction
                else:
                    tmp[curr] -= 1
                    direction *= -1 
                    curr += direction
            return all(x == 0 for x in tmp)
        for i in range(n):
            if nums[i] == 0:
                if simulate(i, 1): 
                    res += 1
                if simulate(i, -1): 
                    res += 1
        return res",1454805947
Yilun Wu,yilunw1030,363,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        n = len(nums)
        cover = [0]*(n+1)
        for l, r in queries:
            cover[l] += 1
            if r+1 < n:
                cover[r+1] -= 1
        cumSum = 0
        for i in range(n):
            cumSum += cover[i]
            if nums[i] > cumSum:
                return False

        return True",1454819406
Yilun Wu,yilunw1030,363,3643,python3,"class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        n = len(nums)
        qLen = len(queries)
        def ok(k):
            cover = [0]*(n+1)
            for i in range(k):
                l, r, v = queries[i]
                cover[l] += v
                if r+1 < n:
                    cover[r+1] -= v
            cumSum = 0
            for i in range(n):
                cumSum += cover[i]
                if nums[i] > cumSum:
                    return False
            return True
        lo, hi = 0, qLen
        res = -1
        while lo <= hi:
            mid = (lo+hi)//2
            if ok(mid):
                res = mid
                hi = mid-1
            else: lo = mid+1
        return res",1454827637
radcliffe,vjcp9058,364,3616,cpp,"class Solution {
    bool f(vector<int> ns,int c,int d) {
        int sz=ns.size();
        while (c>=0&&c<sz) {
            if (ns[c]==0) c+=d;
            else {
                ns[c]--;
                d=-d;
                c+=d;
            }
        }
        for (int x:ns) {
            if (x!=0) return false;
        }
        return true;
    }
public:
    int countValidSelections(vector<int>& ns) {
        int sz=ns.size(),rs=0;
        for (int i=0;i<sz;i++) {
            if (ns[i]==0) {
                if (f(ns,i,-1)) rs++;
                if (f(ns,i,1)) rs++;
            }
        }
        return rs;
    }
};
",1454808041
radcliffe,vjcp9058,364,3639,cpp,"#include<bits/stdc++.h>
class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n=nums.size();
        int i,j,k,l,m,t=0;
        vector<int>v(n+1,0);
        for(auto itr:queries){
            v[itr[0]]++;
            v[itr[1]+1]--;
        }
        for(i=0;i<n+1;i++){
            if(i==0){
                k=v[i];
            }
            else{
                k+=v[i];
                v[i]=k;
            }
        }
        for(i=0;i<n;i++){
            if(nums[i]>v[i]){
                return 0;
            }
            
        }
        return 1;
    }
};",1454828079
radcliffe,vjcp9058,364,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        vector<int> c = nums, z(n), d(n + 1, 0);
        int i,j,k,m,t=0;
        int l = 0, r = queries.size(),ans = -1;
        bool s = false;
        if (all_of(c.begin(), c.end(), [](int x) { return x == 0; })) {
            return 0;
        }
        auto f = [&](int k) {
            fill(d.begin(), d.end(), 0);
            for (i = 0; i < k; i++) {
                int lq = queries[i][0], rq = queries[i][1], vq = queries[i][2];
                d[lq] += vq;
                if (rq + 1 < n) d[rq + 1] -= vq;
            }
             t = 0;
            for (int i = 0; i < n; i++) {
                t += d[i];
                if (t < c[i]) {
                    return false;
                }
            }
            return true;
        };

        while (l <= r) {
             m = (l + r) / 2;
            if (f(m)) {
                ans = m;
                r = m - 1;
            } else {
                l = m + 1;
            }

            if (!s && m == queries.size() / 2) {
                fill(d.begin(), d.end(), 0);
                for (i = 0; i < m; i++) {
                    int lq = queries[i][0], rq = queries[i][1], vq = queries[i][2];
                    d[lq] += vq;
                    if (rq + 1 < n) d[rq + 1] -= vq;
                }

                int t = 0;
                for (i = 0; i < n; i++) {
                    t += d[i];
                    z[i] = max(0, c[i] - t);
                }
                s = true;
            }
        }
        if(ans==-1)return -1;
        return ans;
    }
};
",1454835133
flyingmcqueen69,flyingmcqueen69,366,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        n = len(nums)
        def allZero(i, _):
            arr = [k for k in nums]+[0]
            while 0 <= i < n:
                # print(i, _)
                if _ == -1:
                    if arr[i] == 0:
                        i -= 1
                    elif arr[i] > 0:
                        arr[i] -= 1
                        _ = 1
                        i += 1
                else:
                    if arr[i] == 0:
                        i += 1
                    elif arr[i] > 0:
                        arr[i] -= 1
                        _ = -1
                        i -= 1
            # print(i, arr)
            if len(set(arr)) == 1 and list(set(arr))[0] == 0:
                return True
            return False
        res = 0
        for i in range(len(nums)):
            if nums[i] == 0:
                # print(i)
                if allZero(i, -1):
                    res += 1
                if allZero(i, 1):
                    res += 1
        return res",1454818378
flyingmcqueen69,flyingmcqueen69,366,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        n = len(nums)
        pref = [0]*(n+1)
        for st, end in queries:
            pref[st] += 1
            pref[end+1] -= 1
        for i in range(1, n+1):
            pref[i] += pref[i-1]
        for i in range(n):
            if pref[i] < nums[i]:
                return False
        return True",1454822724
flyingmcqueen69,flyingmcqueen69,366,3643,python3,"class LazySegTree:
    def __init__(self, arr):
        self.n = len(arr)
        self.arr = arr
        self.lookup = [float('-inf')] * (4 * self.n + 1)
        self.another = [0] * (4 * self.n + 1)

    def build(self, index, left, right):
        if left == right:
            self.lookup[index] = self.arr[left]
            return
        mid = (left + right) >> 1
        self.build(2 * index + 1, left, mid)
        self.build(2 * index + 2, mid + 1, right)
        self.lookup[index] = max(self.lookup[2 * index + 1], self.lookup[2 * index + 2])
        return

    def qry(self, fromIndex, toIndex):
        return self.querySolver(0, 0, self.n - 1, fromIndex, toIndex)

    def updt(self, fromIndex, toIndex, value):
        self.updateHelper(0, 0, self.n - 1, fromIndex, toIndex, value)

    def updateHelper(self, index, left, right, fromIndex, toIndex, value):
        if self.another[index]:
            self.lookup[index] -= self.another[index]
            if left != right:
                self.another[2 * index + 1] += self.another[index]
                self.another[2 * index + 2] += self.another[index]
            self.another[index] = 0

        if left > toIndex or right < fromIndex:
            return

        if left >= fromIndex and right <= toIndex:
            self.lookup[index] -= value
            if left != right:
                self.another[2 * index + 1] += value
                self.another[2 * index + 2] += value
            return

        mid = (left + right) >> 1
        self.updateHelper(2 * index + 1, left, mid, fromIndex, toIndex, value)
        self.updateHelper(2 * index + 2, mid + 1, right, fromIndex, toIndex, value)
        self.lookup[index] = max(self.lookup[2 * index + 1], self.lookup[2 * index + 2])
        return

    def querySolver(self, index, left, right, fromIndex, toIndex):
        if self.another[index]:
            self.lookup[index] -= self.another[index]
            if left != right:
                self.another[2 * index + 1] += self.another[index]
                self.another[2 * index + 2] += self.another[index]
            self.another[index] = 0

        if left > toIndex or right < fromIndex:
            return float('inf')

        if left >= fromIndex and right <= toIndex:
            return self.lookup[index]

        mid = (left + right) >> 1
        leftSol = self.querySolver(2 * index + 1, left, mid, fromIndex, toIndex)
        rightSol = self.querySolver(2 * index + 2, mid + 1, right, fromIndex, toIndex)
        return max(leftSol, rightSol)

class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        n = len(nums)
        if len(set(nums)) == 1 and 0 in set(nums):
            return 0
        segTree = LazySegTree(nums)
        segTree.build(0, 0, len(nums) - 1)
        res = 0
        for l, r, val in queries:
            segTree.updt(l, r, val)
            res += 1
            if segTree.qry(0, n-1) <= 0:
                return res
        return -1",1454835321
Devansh,GoGuru,367,3616,cpp,"class Solution {
public:
     bool dfs(vector<int>& nums, int i, bool dir, vector<int>& s) {
        int n = nums.size();

        if (i < 0 || i >= n) 
            return all_of(s.begin(), s.end(), [](int x) { return x == 0; });

        if (s[i] == 0) {
            return dfs(nums, dir ? i + 1 : i - 1, dir, s);
        } else {
            s[i]--;
            return dfs(nums, dir ? i - 1 : i + 1, !dir, s);
        }
    }

    int countValidSelections(vector<int>& nums) {
        int n = nums.size();
        int count = 0;
        
        for (int i = 0; i < n; i++) {
            if (nums[i] == 0) {
                vector<int> sl = nums;
                
                if (dfs(nums, i, false, sl)) count++;
                
                vector<int> sr = nums;
                if (dfs(nums, i, true, sr)) count++;
            }
        }
        
        return count;
    }
};",1454835327
Devansh,GoGuru,367,3639,cpp,"
#define ll long long

class SegmentTree {
private:
    vector<ll> tree;
    vector<ll> lazy;
    ll n;
    
    void build(vector<ll>& arr, ll node, ll start, ll end) {
        if (start == end) {
            tree[node] = arr[start];
            return;
        }
        ll mid = (start + end) / 2;
        build(arr, 2 * node + 1, start, mid);
        build(arr, 2 * node + 2, mid + 1, end);
        tree[node] = max(tree[2 * node + 1], tree[2 * node + 2]);
    }
    
    void propagate(ll node, ll start, ll end) {
        if (lazy[node] != 0) {
            tree[node] -= lazy[node];
            if (start != end) {
                lazy[2 * node + 1] += lazy[node];
                lazy[2 * node + 2] += lazy[node];
            }
            lazy[node] = 0;
        }
    }
    
    void decreaseRange(ll node, ll start, ll end, ll l, ll r, ll val) {
        propagate(node, start, end);
        if (start > end || start > r || end < l)
            return;
        if (l <= start && end <= r) {
            tree[node] -= val;
            if (start != end) {
                lazy[2 * node + 1] += val;
                lazy[2 * node + 2] += val;
            }
            return;
        }
        ll mid = (start + end) / 2;
        decreaseRange(2 * node + 1, start, mid, l, r, val);
        decreaseRange(2 * node + 2, mid + 1, end, l, r, val);
        tree[node] = max(tree[2 * node + 1], tree[2 * node + 2]);
    }
    
    ll queryMax(ll node, ll start, ll end, ll l, ll r) {
        if (start > end || start > r || end < l)
            return LLONG_MIN;
        propagate(node, start, end);
        if (l <= start && end <= r)
            return tree[node];
        ll mid = (start + end) / 2;
        ll left = queryMax(2 * node + 1, start, mid, l, r);
        ll right = queryMax(2 * node + 2, mid + 1, end, l, r);
        return max(left, right);
    }
    
public:
    SegmentTree(vector<ll>& arr) {
        n = arr.size();
        tree.resize(4 * n);
        lazy.resize(4 * n);
        build(arr, 0, 0, n - 1);
    }
    
    void decrease(ll left, ll right, ll val) {
        decreaseRange(0, 0, n - 1, left, right, val);
    }
    
    ll getMaximum() {
        return queryMax(0, 0, n - 1, 0, n - 1);
    }
};


class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& q) {
        vector<ll> arr(nums.begin(),nums.end());
        SegmentTree st(arr);
        if(st.getMaximum() <=0) return 1;
        for(int i = 0;i<q.size();i++){
            st.decrease(q[i][0],q[i][1],1);
            if(st.getMaximum() <=0) return 1;
        }
        return 0;
    }
};",1454829508
Devansh,GoGuru,367,3643,cpp,"#define ll long long

class SegmentTree {
private:
    vector<ll> tree;
    vector<ll> lazy;
    ll n;
    
    void build(vector<ll>& arr, ll node, ll start, ll end) {
        if (start == end) {
            tree[node] = arr[start];
            return;
        }
        ll mid = (start + end) / 2;
        build(arr, 2 * node + 1, start, mid);
        build(arr, 2 * node + 2, mid + 1, end);
        tree[node] = max(tree[2 * node + 1], tree[2 * node + 2]);
    }
    
    void propagate(ll node, ll start, ll end) {
        if (lazy[node] != 0) {
            tree[node] -= lazy[node];
            if (start != end) {
                lazy[2 * node + 1] += lazy[node];
                lazy[2 * node + 2] += lazy[node];
            }
            lazy[node] = 0;
        }
    }
    
    void decreaseRange(ll node, ll start, ll end, ll l, ll r, ll val) {
        propagate(node, start, end);
        if (start > end || start > r || end < l)
            return;
        if (l <= start && end <= r) {
            tree[node] -= val;
            if (start != end) {
                lazy[2 * node + 1] += val;
                lazy[2 * node + 2] += val;
            }
            return;
        }
        ll mid = (start + end) / 2;
        decreaseRange(2 * node + 1, start, mid, l, r, val);
        decreaseRange(2 * node + 2, mid + 1, end, l, r, val);
        tree[node] = max(tree[2 * node + 1], tree[2 * node + 2]);
    }
    
    ll queryMax(ll node, ll start, ll end, ll l, ll r) {
        if (start > end || start > r || end < l)
            return LLONG_MIN;
        propagate(node, start, end);
        if (l <= start && end <= r)
            return tree[node];
        ll mid = (start + end) / 2;
        ll left = queryMax(2 * node + 1, start, mid, l, r);
        ll right = queryMax(2 * node + 2, mid + 1, end, l, r);
        return max(left, right);
    }
    
public:
    SegmentTree(vector<ll>& arr) {
        n = arr.size();
        tree.resize(4 * n);
        lazy.resize(4 * n);
        build(arr, 0, 0, n - 1);
    }
    
    void decrease(ll left, ll right, ll val) {
        decreaseRange(0, 0, n - 1, left, right, val);
    }
    
    ll getMaximum() {
        return queryMax(0, 0, n - 1, 0, n - 1);
    }
};


class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& q) {
        vector<ll> arr(nums.begin(),nums.end());
        SegmentTree st(arr);
        if(st.getMaximum() <=0) return 0;
        for(int i = 0;i<q.size();i++){
            st.decrease(q[i][0],q[i][1],q[i][2]);
            if(st.getMaximum() <=0) return i+1;
        }
        return -1;
    }
};",1454827397
pedo_supporter,pedo_supporter,368,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int res = 0;
        int n = nums.size();
        for(int i = 0; i < n; i++){
            int left = 0, right = 0;

            if(nums[i] == 0){
                
                for(int j = 0; j < i; j++) left += nums[j];
                for(int j = i+1; j < n; j++){
                    right += nums[j];
                }
                if(abs(left - right) == 1) res++;
                else if(left == right) res+=2;
            }
        }

        return res;
    }
};",1454819996
pedo_supporter,pedo_supporter,368,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        int q = queries.size();

        vector<int> hash(n+1, 0);
        for(int i = 0; i < q; i++){
            int l = queries[i][0];
            int r = queries[i][1];

            hash[l]++;
            hash[r+1]--;
        }

        for(int i = 1; i < n; i++) hash[i] += hash[i-1];

        for(int i = 0; i < n; i++){
            if(hash[i] < nums[i]) return  0;
        }

        return 1;
    }
};",1454826767
pedo_supporter,pedo_supporter,368,3643,cpp,"class Solution {
public:

    bool check(vector<int>& nums, vector<vector<int>>& queries, int mid) {
        int n = nums.size();
        int q = queries.size();

        vector<long long> hash(n+1, 0);
        for(int i = 0; i < mid; i++){
            int l = queries[i][0];
            int r = queries[i][1];
            long long val = queries[i][2];

            hash[l]+=val;
            hash[r+1]-= val;
        }

        for(int i = 1; i < n; i++) hash[i] += hash[i-1];

        for(int i = 0; i < n; i++){
            if(hash[i] < (long long)nums[i]) return  0;
        }

        return 1;
    }

    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int lo = 0, hi = queries.size();
        int res = -1;
        while(lo <= hi){
            int mid = (lo + hi)/2;

            if(check(nums, queries, mid)){
                res = mid;
                hi = mid-1;
            }
            else lo = mid+1;
        }

        return res;
    }
};",1454835338
Fasdr,Fasdr,370,3616,java,"class Solution {
    public int countValidSelections(int[] nums) {
        int n = nums.length;
        int total = 0;
        for (int i = 0; i < n; i++) {
            total += nums[i];
        }
        int res = 0;
        int left = 0;
        for (int i = 0; i < n; i++) {
            int right = total - left - nums[i];
            if (nums[i] == 0) {
                if (right + 1 == left) {
                    res++;
                } else if (left + 1 == right) {
                    res++;
                } else if (left == right) {
                    res += 2;
                }
            }
            left += nums[i];
        }
        return res;
    }
}",1454812339
Fasdr,Fasdr,370,3639,java,"class Solution {
    public boolean isZeroArray(int[] nums, int[][] queries) {
        int n = nums.length;
        int[] free = new int[n + 1];
        for (int[] query : queries) {
            int l = query[0], r = query[1] + 1;
            free[l]++;
            free[r]--;
        }
        if (nums[0] > free[0]) {
            return false;
        }
        for (int i = 1; i < n; i++) {
            if (nums[i] > (free[i] = free[i] + free[i - 1])) {
                return false;
            }
        }
        return true;
    }
}",1454819014
Fasdr,Fasdr,370,3643,java,"class Solution {
    public int minZeroArray(int[] nums, int[][] queries) {
        int m = queries.length;
        int l = 0, r = queries.length + 1;
        while (l < r) {
            int p = l + (r - l) / 2;
            if (isGood(nums, queries, p)) {
                r = p;
            } else {
                l = p + 1;
            }
        }
        return l > m ? -1 : l;
    }
    
    private boolean isGood(int[] nums, int[][] queries, int k) {
        int m = queries.length;
        int n = nums.length;
        int[] free = new int[n + 1];
        for (int i = 0; i < k; i++) {
            int l = queries[i][0], r = queries[i][1] + 1, val = queries[i][2];
            free[l] += val;
            free[r] -= val;
        }
        if (nums[0] > free[0]) {
            return false;
        }
        for (int i = 1; i < n; i++) {
            if (nums[i] > (free[i] = free[i] + free[i - 1])) {
                return false;
            }
        }
        return true;
    }
}",1454827907
Shailesh Reddy Kanchanakuntla,shailesh_2004,371,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int sum=0;
        for(int i=0;i<nums.size();i++)
        {
            sum+=nums[i];
        }
        int val=0;
        int ans=0;
        for(int i=0;i<nums.size();i++)
        {
            val+=nums[i];
            if(val==sum/2 && sum%2==0 && nums[i]==0)ans+=2;
            if((val==sum/2 || val==sum/2+1) && sum%2==1 && nums[i]==0)ans+=1;
        }
        return ans;
    }
};",1454812197
Shailesh Reddy Kanchanakuntla,shailesh_2004,371,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int q=queries.size();
        int n=nums.size();
        vector<int>pre(n+1,0);
        for(int i=0;i<q;i++)
        {
            pre[queries[i][0]]++;
            pre[queries[i][1]+1]--;
        }
        for(int i=1;i<=n;i++)
        {
            pre[i]+=pre[i-1];
        }
        for(int i=0;i<n;i++)
        {
            if(nums[i]==0)continue;
            if(nums[i]>pre[i])return false;
        }
        return true;
    }
};",1454819300
Shailesh Reddy Kanchanakuntla,shailesh_2004,371,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int q=queries.size();
        int n=nums.size();
        int c=0;
        for(int i=0;i<n;i++)
        {
            if(nums[i]==0)c++;
        }
        if(c==n)return 0;
        int low=1;
        int high=q;
        int mid;
        int ans=-1;
        while(low<=high)
        {
            mid=(low+high)/2;
            vector<int>pre(n+1,0);
            for(int i=0;i<mid;i++)
            {
                pre[queries[i][0]]+=(queries[i][2]);
                pre[queries[i][1]+1]-=(queries[i][2]);
            }
            for(int i=1;i<n;i++)
            {
                pre[i]+=(pre[i-1]);
            }
            bool ok=true;
            for(int i=0;i<n;i++)
            {
                if(nums[i]==0)continue;
                if(nums[i]>pre[i])
                {
                    ok=false;
                    break;
                }
            }
            if(ok)
            {
                ans=mid;
                high=mid-1;
            }
            else
            {
                low=mid+1;
            }
        }
        return ans;
    }
};",1454827952
RandomUserName554,RandomUserName554,373,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:


        total = sum(nums)
        cur = 0
        ans = 0
        n = len(nums)
        for i in range(n):
            cur+=nums[i]
            if nums[i] == 0:
                left = cur
                right = total-cur
                if left == right:
                    ans+=2
                elif abs(left-right) == 1:
                    ans+=1
        return ans",1454811914
RandomUserName554,RandomUserName554,373,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:


        d = defaultdict(int)
        for start,end in queries:
            d[start]+=1
            d[end+1]-=1


        cur = 0
        n = len(nums)
        for i in range(n):
            cur+=d[i]
            if nums[i] > cur:
                return False
        return True
        ",1454816018
RandomUserName554,RandomUserName554,373,3643,python3,"class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:


        def check(k):
            d = defaultdict(int)
            
            for i in range(k):
                start, end,val = queries[i]
                d[start]+=val
                d[end+1]-=val
            cur = 0
            n = len(nums)
            for i in range(n):
                cur+=d[i]
                #print(i, cur, ""CUR"")
                if nums[i] > cur:
                    print('returning false')
                    return False
            #print('returning true')
            return True



        l = 0
        r = len(queries)

        #FFFFFFFFTTTTTTTT

        while l <= r:
            mid = l + (r-l)//2
            #print(""checking"", mid)
            if check(mid):
                r = mid - 1
            else:
                l = mid + 1

            #print(l,r)
        return l if l <= len(queries) else -1
        ",1454827954
Aman Kumar,_aman_kumar_,376,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int sum = accumulate(nums.begin(), nums.end(), 0);
        int pre = 0;
        int valids = 0;

        for(auto & val : nums)
            {
                sum -= val;
                pre += val;

                if(val) continue;
                if(sum == pre) valids+=2;
                else if(abs(sum - pre) == 1) valids += 1;
            }
        return valids;
    }
};",1454810481
Aman Kumar,_aman_kumar_,376,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        vector<int> v(n + 1, 0);

        for(auto & val : queries)
            {
                v[val[0]]++;
                v[val[1] + 1]--;
            }
        for(int i = 1 ; i< n + 1 ; i++)v[i] += v[i - 1];
        

        for(int i = 0 ; i < n ; i++)
            {
                if(nums[i] > v[i])return false;
            }
        return true;
    }
};",1454815487
Aman Kumar,_aman_kumar_,376,3643,cpp,"class Solution {
public:
    bool isPossible(vector<int> & nums , vector<vector<int>> & queries , int operations)
{
    int n = nums.size();
        vector<int> v(n + 1, 0);

        for(int i = 0 ; i < operations ; i++)
            {
                v[queries[i][0]] += queries[i][2];
                v[queries[i][1] + 1] -= queries[i][2];
            }
        for(int i = 1 ; i< n + 1 ; i++)v[i] += v[i - 1];
        

        for(int i = 0 ; i < n ; i++)
            {
                if(nums[i] > v[i])return false;
            }
        return true;
    
}


    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int hi = queries.size() , lo = 0;

        while(hi - lo > 1)
            {
                int mid = (hi + lo) / 2;
                if(isPossible(nums , queries , mid)) hi = mid;
                else lo = mid + 1;
            }

        if(isPossible(nums, queries, lo)) return lo;
        else if(isPossible(nums, queries, hi)) return hi;

        return -1 ;
    }
};",1454828013
Amit Maity,_maityamit,377,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int valid_selection = 0;
        vector<int> indices;
        for(int index=0;index<nums.size();index++) if(nums[index]==0) indices.push_back(index);
        for(auto index:indices){
            // left
            vector<int> temp(nums);
            int current_index = index;
            bool flag = true;
            while(current_index>=0 && current_index<temp.size()){
                if(temp[current_index]==0){
                    if(flag==true) current_index--;
                    else current_index++;
                }else{
                    temp[current_index]--;
                    if(flag==true) flag=false;
                    else flag=true;
                    
                    if(flag==true) current_index--;
                    else current_index++;
                }
            }
            int total_sum = 0;
            for(auto element:temp) total_sum+=element;
            valid_selection+=(total_sum==0);
            
            //right
            vector<int> temp2(nums);
            current_index = index;
            flag = true;
            while(current_index>=0 && current_index<temp2.size()){
                if(temp2[current_index]==0){
                    if(flag==true) current_index++;
                    else current_index--;
                }else{
                    temp2[current_index]--;
                    if(flag==true) flag=false;
                    else flag=true;
                    
                    if(flag==true) current_index++;
                    else current_index--;
                }
            }
            total_sum = 0;
            for(auto element:temp2) total_sum+=element;
            valid_selection+=(total_sum==0);
        }
        return valid_selection;
    }
};",1454813120
Amit Maity,_maityamit,377,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        vector<int> track_maintain(nums.size(),0);
        for(auto element:queries){
            track_maintain[element[0]]++;
            if(element[1]+1<nums.size()) track_maintain[element[1]+1]--;
        }
        int current_sum = 0;
        vector<int> prefix_sum;
        for(auto element:track_maintain){
            current_sum+=element;
            prefix_sum.push_back(current_sum);
        }
        for(int index=0;index<nums.size();index++){
            if(nums[index]>prefix_sum[index]) return false;
        }
        return true;
    }
};",1454819283
Amit Maity,_maityamit,377,3643,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries,int mid) {
        vector<int> track_maintain(nums.size(),0);
        for(int index=0;index<mid;index++){
            vector<int> element = queries[index];
            track_maintain[element[0]]+=element[2];
            if(element[1]+1<nums.size()) track_maintain[element[1]+1]-=element[2];
        }
        long long current_sum = 0;
        vector<long long> prefix_sum;
        for(auto element:track_maintain){
            current_sum+=element;
            prefix_sum.push_back(current_sum);
        }
        for(int index=0;index<nums.size();index++){
            if(nums[index]>prefix_sum[index]) return false;
        }
        return true;
    }
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int low_value = 0;
        int high_value = queries.size();
        int answer = -1;
        // ffffttttttt
        while(low_value<=high_value){
            int mid_value = (low_value+high_value)/2;
            if(isZeroArray(nums,queries,mid_value)){
                answer = mid_value;
                high_value = mid_value-1;
            }else{
                low_value = mid_value+1;
            }
        }
        return answer;
    }
};",1454828064
aaaaaaaaaa1,aaaaaaaaaaa1,378,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int n = nums.size();
        int validSelections = 0;

        // Helper function to check if all elements are zero
        auto isAllZero = [](const vector<int>& nums) {
            for (int num : nums) {
                if (num != 0) return false;
            }
            return true;
        };

        // Function to simulate the movement process
        auto simulate = [&](int start, int direction) {
            vector<int> temp = nums; // Copy of nums to manipulate
            int curr = start;
            int dir = direction;

            while (curr >= 0 && curr < n) {
                if (temp[curr] == 0) {
                    // Move in the current direction
                    curr += dir;
                } else if (temp[curr] > 0) {
                    // Decrease the value and reverse the direction
                    temp[curr]--;
                    dir = -dir; // Reverse direction
                    curr += dir;
                }
            }

            // Check if the modified array is all zeros
            return isAllZero(temp);
        };

        // Iterate over each element and check starting at 0 in both directions
        for (int i = 0; i < n; i++) {
            if (nums[i] == 0) {
                // Simulate for right direction (dir = +1)
                if (simulate(i, 1)) {
                    validSelections++;
                }
                // Simulate for left direction (dir = -1)
                if (simulate(i, -1)) {
                    validSelections++;
                }
            }
        }

        return validSelections;
    }
};
",1454805612
aaaaaaaaaa1,aaaaaaaaaaa1,378,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {

        vector<int>l(nums.size());
        for (auto i:queries){
            l[i[0]]++;
            if (i[1]+1<nums.size()){
                l[i[1]+1]--;
            }
        }

        for (int i = 1; i<l.size(); i++){
            l[i]+=l[i-1];
        }

        for (int i = 0; i<l.size();i++){
            if (nums[i]-l[i]>0){
                return false;
            }
        }
        return true;
    }
};",1454807449
aaaaaaaaaa1,aaaaaaaaaaa1,378,3643,cpp,"class Solution {
public:

    bool check(vector<int>&nums, vector<vector<int>>&queries, int k){
        int N = nums.size();
        
        vector<int>l(N);
        for (int i = 0; i<=k; i++){
            l[queries[i][0]]+=queries[i][2];
            if (queries[i][1]+1<N){
                l[queries[i][1]+1]-=queries[i][2];
            }
        }

        for (int i = 1; i<N; i++){
            l[i]+=l[i-1];
        }

        for (int i = 0; i<N;i++){
            if (nums[i]-l[i]>0){
                return false;
            }
        }
        return true;
    }

    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int l = 0, r = queries.size();

        bool b = true;
        for (auto i:nums){
            if (i>0){
                b = false;
            }
        }
        if (b){
            return 0;
        }
        while (l+1<r){
            int mid = (l+r)/2;
            if (check(nums,queries,mid)){
                r = mid;
            }else{
                l = mid;
            }
        }

        // cout<<check(nums,queries,0)<<endl;
        if (check(nums,queries,l)){
            return l+1;
        }else if (r<queries.size() and check(nums,queries,r)){
            return r+1;
        }else{
            return -1;
        }

        
        // return r+1;
        
    }
};",1454821159
JJZin,JJZin,379,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        
        def valid(sidx, increment, adday):
            cour = sidx
            nums = adday[:]
            while cour >= 0 and cour < len(nums):
                
                
                if nums[cour] > 0:
                    nums[cour]-= 1
                    increment = not increment 
                    
                if increment:
                    cour += 1
                else:
                    cour -= 1
            return all([i == 0 for i in nums])
        ans = 0
        for i in range(len(nums)):
            if nums[i] == 0:
                if valid(i, True, nums):
                    ans += 1
                if valid(i, False, nums):
                    ans += 1
        return ans
                
                    
                    
                    
        ",1454808159
JJZin,JJZin,379,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        
        walue = 1
        basis = [0 for i in range(len(nums) + 1)]
        
        for i, k in queries:
            basis[i] += walue
            basis[k + 1] -= walue
        basis = list(accumulate(basis))
        
        for i in range(len(nums)):
            if nums[i] > basis[i]:
                return False
        return True",1454811614
JJZin,JJZin,379,3643,python3,"class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:

        
            
        def recorp(basis, queries, limit):
            nums = basis[:]
            basis = [0 for i in range(len(nums) + 1)]

            for i, k, walue in queries[:limit]:
                basis[i] += walue
                basis[k + 1] -= walue
            basis = list(accumulate(basis))

            for i in range(len(nums)):
                if nums[i] > basis[i]:
                    return False
            return True
        bottom = 0
        top = len(queries)
        
        if not recorp(nums, queries, top):
            return -1
        while (bottom < top):
            middle = (top + bottom) >> 1
            if recorp(nums, queries, middle):
                top = middle
            else:
                bottom = middle + 1
        return bottom",1454821231
Sayantan Chakraborty,cavi4762,380,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int n=nums.size();
        int pre[n+1],suf[n];
        int tot=0;
        pre[0]=0;
        int i;
        for(i=1;i<=n;i++)
        {
            pre[i]=pre[i-1]+nums[i-1];
            tot+=nums[i-1];
        }
        int ans=0;
        for(i=0;i<n;i++)
        {
            if(nums[i]!=0)
                continue;
            int lsum=pre[i+1];
            int rsum=tot-lsum;
            if(lsum==rsum)
                ans+=2;
            else if(abs(lsum-rsum)==1)
                ++ans;
        }
        return ans;
            
    }
};",1454815059
Sayantan Chakraborty,cavi4762,380,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n=nums.size();
        int pre[n+1];
        memset(pre,0,sizeof(pre));
        for(auto x:queries)
        {
            pre[x[0]]++;
            pre[x[1]+1]--;
        }
        int i;
        for(i=1;i<n;i++)
            pre[i]+=pre[i-1];
        for(i=0;i<n;i++)
        {
            if(pre[i]<nums[i])
                return false;
        }
        return true;
    }
};",1454819338
Sayantan Chakraborty,cavi4762,380,3643,cpp,"bool possible(const vector<int> &nums,const vector<vector<int>> &queries,int k)
{
    int n=nums.size();
    int pre[n+1];
    memset(pre,0,sizeof(pre));
    int i;
    
    for(i=0;i<k;i++)
    {
        pre[queries[i][0]]+=queries[i][2];
        pre[queries[i][1]+1]-=queries[i][2];
    }
    for(i=1;i<n;i++)
        pre[i]+=pre[i-1];
    for(i=0;i<n;i++)
    {
        if(pre[i]<nums[i])
            return false;
    }
    return true;
}

class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n=nums.size();
        int l=0,r=queries.size();
        while(l<r)
        {
            int mid=l+(r-l)/2;
            if(possible(nums,queries,mid))
                r=mid;
            else
                l=mid+1;
        }
        if(possible(nums,queries,r))
            return r;
        return -1;
    }
};",1454828364
PyIsTheBestLang,PyIsTheBestLang,381,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        n =len(nums)
        ans = 0
        n = len(nums)
        for i in range(n):
            if nums[i] == 0:
                for x in [-1, 1]:
                    lst = nums[:]
                    cur = i
                    while 0<=cur<n:
                        if lst[cur] == 0:
                            cur += x
                            continue
                        else:
                            lst[cur] -= 1
                            x *= -1
                            cur += x
                    if all(x==0 for x in lst):
                        ans+=1
        return ans",1454835601
PyIsTheBestLang,PyIsTheBestLang,381,3639,python3,"

class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        
        n = len(nums)
        diff = [0]*n
        for i, j in queries:
            diff[i] += 1
            if j+1<n:
                diff[j+1] -= 1
        for i in range(1, n):
            diff[i] += diff[i-1]
        return all(diff[i]>=nums[i] for i in range(n))",1454835381
PyIsTheBestLang,PyIsTheBestLang,381,3643,python3,"def min(a, b):
    return a if a < b else b

class BinarySearch:
    def __init__(self):
        return

    @staticmethod
    def find_int_left(low: int, high: int, check) -> int:
        """"""find the minimum int x which make check true""""""
        while low < high:
            mid = low + (high - low) // 2
            if check(mid):
                high = mid
            else:
                low = mid + 1
        return low

    @staticmethod
    def find_int_right(low: int, high: int, check) -> int:
        """"""find the maximum int x which make check true""""""
        while low < high:
            mid = low + (high - low + 1) // 2
            if check(mid):
                low = mid
            else:
                high = mid - 1
        return high

    @staticmethod
    def find_float_left(low: float, high: float, check, error=1e-6) -> float:
        """"""find the minimum float x which make check true""""""
        while low < high - error:
            mid = low + (high - low) / 2
            if check(mid):
                high = mid
            else:
                low = mid
        return low if check(low) else high

    @staticmethod
    def find_float_right(low: float, high: float, check, error=1e-6) -> float:
        """"""find the maximum float x which make check true""""""
        while low < high - error:
            mid = low + (high - low) / 2
            if check(mid):
                low = mid
            else:
                high = mid
        return high if check(high) else low


class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        n = len(nums)
        
        def check(x):
            diff = [0] * n
            for i, j, v in queries[:x]:
                diff[i] += v
                if j + 1 < n:
                    diff[j + 1] -= v
            for i in range(1, n):
                diff[i] += diff[i - 1]
            return all(diff[i] >= nums[i] for i in range(n))
    
        ans = BinarySearch().find_int_left(0, len(queries), check)
        return ans if check(ans) else -1",1454835840
aconot10,aconot10,382,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int n = nums.size();
        int sum = 0;
        for(int i=0;i<nums.size();i++){
            sum += nums[i];
        }
        int result = 0;
        int cur_sum = 0;
        for(int i=0;i<n;i++){
            if(nums[i]==0){
                int temp_sum=sum-cur_sum;
                if(temp_sum==cur_sum)result+=2;
                else if(abs(temp_sum-cur_sum)==1)result +=1; 
            }
            cur_sum += nums[i];
        }

        return result;
    }
};",1454814121
aconot10,aconot10,382,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        vector<int>range(n+1,0);
        for(int i=0;i<queries.size();i++){
            int start = queries[i][0];
            int end = queries[i][1];

            range[start]-=1;
            range[end+1]+=1;
        }
        int pref_sum = 0;
        for(int i=0;i<n;i++){
            pref_sum += range[i];
            if(nums[i]+pref_sum>0)return false;
        }

        return true;
    }
};",1454821951
aconot10,aconot10,382,3643,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries,int limit) {
        int n = nums.size();
        vector<int>range(n+1,0);
        for(int i=0;i<limit;i++){
            int start = queries[i][0];
            int end = queries[i][1];
            int val = queries[i][2];
            range[start]-=val;
            range[end+1]+=val;
        }
        int pref_sum = 0;
        for(int i=0;i<n;i++){
            pref_sum += range[i];
            if(nums[i]+pref_sum>0)return false;
        }

        return true;
    }
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int l=0;
        int r=queries.size();
        int ans = -1;
        while(l<=r){
            int mid = (l+r)/2;
            if(isZeroArray(nums,queries,mid)){
                ans = mid;
                r = mid-1;
            }else{
                l = mid+1;
            }
        }

        return ans;
    }
};",1454828483
Trevor Sharp,sharpdevtrev,383,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        n = len(nums)
        valid_count = 0
        def simulate(curr, direction):
            nums_copy = nums[:]
            pos = curr
            move = direction 
            while 0 <= pos < n:
                if nums_copy[pos] == 0:
                    pos += move
                else:
                    nums_copy[pos] -= 1
                    move *= -1
                    pos += move
            return all(x == 0 for x in nums_copy)
        for curr in range(n):
            if nums[curr] == 0:
                if simulate(curr, 1):
                    valid_count += 1
                if simulate(curr, -1):
                    valid_count += 1
        return valid_count",1454808942
Trevor Sharp,sharpdevtrev,383,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        newVals = [0] * len(nums)
        for q in queries:
            start, end = q
            newVals[start] += 1
            if end + 1 < len(nums):
                newVals[end + 1] -= 1
        for i in range(1, len(newVals)):
            newVals[i] += newVals[i - 1]
        for i in range(len(newVals)):
            if newVals[i] < nums[i]:
                return False
        return True",1454815922
Trevor Sharp,sharpdevtrev,383,3643,python3,"class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        def canMinZero(nums, r):
            newVals = [0] * len(nums)
            for q in range(r):
                start, end, val = queries[q]
                newVals[start] += val
                if end + 1 < len(nums):
                    newVals[end + 1] -= val
            for i in range(1, len(newVals)):
                newVals[i] += newVals[i - 1]
            for i in range(len(newVals)):
                if newVals[i] < nums[i]:
                    return False
            return True
        if not canMinZero(nums, len(queries)):
            return -1
        l = 0
        r = len(queries)
        while l < r:
            m = (l+r)>>1
            if canMinZero(nums,m):
                r = m
            else:
                l = m+1
        return r",1454828523
Rajdeep Maji,bits_069,384,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int ans = 0;
        int n = nums.size();
        for(int i = 0; i<n; i++){
            vector<int> temp = nums;
            if(nums[i]==0){
                int cur = i;
                bool f = 1;
                while(cur>=0 && cur<n){
                    if(temp[cur]==0){
                        if(f) cur++;
                        else cur--;
                    }else{
                        f = 1 - f;
                        temp[cur]--;
                        if(f) cur++;
                        else cur--;
                    }
                }
                bool f1 = true;
                for(int i = 0; i<n; i++){
                    if(temp[i] != 0) f1 = false;
                }
                temp = nums;
                f = 0;
                cur = i;
                while(cur>=0 && cur<n){
                    if(temp[cur]==0){
                        if(f) cur++;
                        else cur--;
                    }else{
                        temp[cur]--;
                        f = 1 - f;
                        if(f) cur++;
                        else cur--;
                    }
                }
                bool f2 = true;
                for(int i = 0; i<n; i++){
                    if(temp[i] != 0) f2 = false;
                }
                if(f1) ans++;
                if(f2) ans++;
            }
        }
        return ans;
    }
};",1454813183
Rajdeep Maji,bits_069,384,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& q) {
        int n = nums.size();
        vector<int> val(n+1,0);
        for(auto x: q){
            val[x[0]]--;
            val[x[1]+1]++;
        }
        for(int i = 1; i<n; i++){
            val[i]+=val[i-1];
        }
        bool f = true;
        for(int i = 0; i<n; i++){
            nums[i]+=val[i];
            if(nums[i] > 0) f = false;
        }
        return f;
    }
};",1454818022
Rajdeep Maji,bits_069,384,3643,cpp,"class Solution {
public:
    bool check(vector<int> &nums, vector<vector<int>> &q, int mid){
        int n = nums.size();
        vector<int> val(n+1,0);
        for(int i = 0; i<=mid; i++){
            val[q[i][0]]-=q[i][2];
            val[q[i][1]+1]+=q[i][2];
        }
        for(int i = 1; i<n; i++){
            val[i]+=val[i-1];
        }
        bool f = true;
        for(int i = 0; i<n; i++){
            if(nums[i]+val[i]>0){
                return false;
            }
        }
        return true;
    }
    int minZeroArray(vector<int>& nums, vector<vector<int>>& q) {
        int n = nums.size();
        int m = q.size();
        bool f = true;
        for(int i = 0; i<n; i++){
            if(nums[i]) f = false;
        }
        if(f) return 0;
        int lo = 0, hi = m-1;
        int ans = -2;
        while(lo<=hi){
            int mid = (lo+hi)/2;
            if(check(nums,q,mid)){
                ans = mid;
                hi = mid-1;
            }else{
                lo = mid+1;
            }
        }
        return ans+1;
    }
};",1454828574
Mridul Pandey,mridul_cr7,386,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int n=nums.size();
        vector<int> pf(n+2),sf(n+2);
        for(int i=1;i<n;i++)
        {
            pf[i]+=pf[i-1]+nums[i-1];
        }
        for(int i=n;i>=1;i--)
        {
            sf[i]+=sf[i+1]+nums[i-1];
        }
        int ans=0;
        for(int i=1;i<=n;i++)
        {
            if(nums[i-1]==0)
            {
                if(pf[i-1]==sf[i+1])
                    ans+=2;
                else if(abs(pf[i-1]-sf[i+1])==1)
                    ans++;
            }
        }
        return ans;
    }
};",1454828654
Mridul Pandey,mridul_cr7,386,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& q) {
        int n=nums.size();
        int m=q.size();
        int ans=-1;
       int tell=1;
          
            vector<int> pf(n+2,0);
            for(int i=0;i<m;i++)
            {
                pf[q[i][0]]+=1;
                pf[q[i][1]+1]-=1;
            }
            for(int i=1;i<=n;i++)
            {
                pf[i]+=pf[i-1];
            }
            for(int i=0;i<n;i++)
            {
                if(pf[i]<nums[i])
                    return false;
            }
            
        return true;
    }
};",1454814901
Mridul Pandey,mridul_cr7,386,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& q) {
        int n=nums.size();
        int m=q.size();
        int ans=-1;
        int l=0,h=m;
        while(l<=h)
        {
            int mid=(l+h)/2;
            int tell=1;
          
            vector<int> pf(n+2,0);
            for(int i=0;i<mid;i++)
            {
                pf[q[i][0]]+=q[i][2];
                pf[q[i][1]+1]-=q[i][2];
            }
            for(int i=1;i<=n;i++)
            {
                pf[i]+=pf[i-1];
            }
            for(int i=0;i<n;i++)
            {
                if(pf[i]<nums[i])
                    tell=0;
            }
            if(tell)
            {
                ans=mid;
                h=mid-1;
            }
            else
            {
                l=mid+1;
            }
                
        }
        return ans;
    }
};",1454811981
Chuan-Chih Chou,chuan-chih,387,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        n = len(nums)
        
        def check(i, delta):
            l = list(nums)
            if l[i]:
                return False
            while True:
                i += delta
                if i >= n or i < 0:
                    break
                if l[i]:
                    l[i] -= 1
                    delta *= -1
            return not any(l)
        
        return sum(check(i, 1) + check(i, -1) for i in range(n))
                
            ",1454813059
Chuan-Chih Chou,chuan-chih,387,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        n = len(nums)
        acc = [0] * n
        for l, r in queries:
            acc[l] += 1
            if r + 1 < n:
                acc[r + 1] -= 1
        acc[:] = accumulate(acc)
        return all(x <= y for x, y in zip(nums, acc))",1454819710
Chuan-Chih Chou,chuan-chih,387,3643,python3,"class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        def check(k):
            n = len(nums)
            acc = [0] * n
            for l, r, v in queries[:k]:
                acc[l] += v
                if r + 1 < n:
                    acc[r + 1] -= v
            acc[:] = accumulate(acc)
            return all(x <= y for x, y in zip(nums, acc))
        low = 0
        high = len(queries)
        while low < high:
            mid = (low + high) // 2
            if check(mid):
                high = mid
            else:
                low = mid + 1
        return low if check(low) else -1",1454836168
Sarthak Jha,SarthakkJha,389,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int n = nums.size();
        int count = 0;

        for (int i = 0; i < n; i++) {
            if (nums[i] == 0) {
                vector<int> tempLeft = nums;
                int curr = i;
                int direction = -1;
                while (curr >= 0 && curr < n) {
                    if (tempLeft[curr] == 0) {
                        curr += direction;
                    } else {
                        tempLeft[curr]--;
                        direction = -direction;
                        curr += direction;
                    }
                }
                bool f = true;
                for (int num : tempLeft) {
                    if (num != 0) {
                        f = false;
                        break;
                    }
                }
                if (f) {
                    count++;
                }

                vector<int> tempRight = nums;
                curr = i;
                direction = 1;
                while (curr >= 0 && curr < n) {
                    if (tempRight[curr] == 0) {
                        curr += direction;
                    } else {
                        tempRight[curr]--;
                        direction = -direction;
                        curr += direction;
                    }
                }
                bool ff = true;
                for (int num : tempRight) {
                    if (num != 0) {
                        ff = false;
                        break;
                    }
                }
                if (ff) {
                    count++;
                }
            }
        }

        return count;
    }
};
",1454823955
Sarthak Jha,SarthakkJha,389,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        vector<int> pref(n + 1, 0); 

        for (auto it : queries) {
            int l = it[0], r = it[1];
            pref[l]++;
            if (r + 1 < n) pref[r + 1]--;
        }

        for (int i = 1; i < n; ++i) {
            pref[i] += pref[i - 1];
        }

        for (int i = 0; i < n; ++i) {
            if (nums[i] > pref[i]) return false;
        }

        return true; 
    }
};
",1454823798
Sarthak Jha,SarthakkJha,389,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        int m = queries.size();

        int left = 0, right = m;
        int ans = 1e9;

        while (left <= right) {
            int mid = left + (right - left) / 2;
            if (isPoss(nums, queries, mid)) {
                ans = min(ans, mid);
                right = mid - 1; 
            } else {
                left = mid + 1;
            }
        }

        return ans == 1e9 ? -1 : ans;
    }

    bool isPoss(vector<int> nums, vector<vector<int>>& queries, int k) {
        int n = nums.size();
        vector<int> diff(n + 1, 0);

        for (int i = 0; i < k; i++) {
            int l = queries[i][0];
            int r = queries[i][1];
            int val = queries[i][2];
            diff[l] -= val;
            if (r + 1 < n) diff[r + 1] += val;
        }

        vector<int> pref(n, 0);
        int sum = 0;
        for (int i = 0; i < n; i++) {
            sum += diff[i];
            pref[i] = sum; 
        }

        for (int i = 0; i < n; i++) {
            nums[i] += pref[i];
            if (nums[i] > 0) return false;
        }

        return true;
    }
};
",1454836241
u50UoHd3Oy,u50UoHd3Oy,390,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int sum = 0;
        for (auto x : nums) {
            sum += x;
        }

        int cur_sum = 0;
        int ans = 0;
        for (auto x : nums) {
            if (x == 0) {
                if (cur_sum == sum - cur_sum) {
                    ans += 2;
                } else if (abs(cur_sum - (sum - cur_sum)) == 1) {
                    ans += 1;
                }
            }

            cur_sum += x;
        }

        return ans;
    }
};",1454809937
u50UoHd3Oy,u50UoHd3Oy,390,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        vector<int> cnt(n + 1, 0);

        for (auto x : queries) {
            int l = x[0];
            int r = x[1];
            int v = 1;

            cnt[l] += v;
            cnt[r + 1] -= v;
        }

        for (int i = 1; i < n; i++) {
            cnt[i] += cnt[i - 1];

            if (nums[i] > cnt[i]) {
                return false;
            }
        }

        return nums[0] <= cnt[0];
    }
};",1454821048
u50UoHd3Oy,u50UoHd3Oy,390,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();

        int beg = 0, end = queries.size();
        int ans = -1;
        while (beg <= end) {
            int mid = (beg + end) / 2;
            vector<int> cnt(n + 1, 0);
    
            for (int i = 0; i < mid; i++) {
                auto x = queries[i];
                int l = x[0];
                int r = x[1];
                int v = x[2];
    
                cnt[l] += v;
                cnt[r + 1] -= v;
            }

            bool good = true;
            for (int i = 1; i < n; i++) {
                cnt[i] += cnt[i - 1];
    
                if (nums[i] > cnt[i]) {
                    good =  false;
                }
            }

            good &= (nums[0] <= cnt[0]);

            if (good) {
                ans = mid;
                end = mid - 1;
            } else {
                beg = mid + 1;
            }
        }

        return ans;
    }
};",1454828833
Sydney Burgess,sydneyb,391,3616,java,"class Solution {
    public static void main(String[] args) {
        System.out.println(new Solution().countValidSelections(new int[]{1, 0, 2, 0, 3}));
    }

    public int countValidSelections(int[] nums) {

        int ans = 0;
        int left = 0;
        int right = 0;
        for (int i = 1; i < nums.length; i++) {
            right += nums[i];
        }
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] == 0) {
                if (left == right) ans += 2;
                else if (left == right - 1 || left - 1 == right) ans += 1;
            }

            left += nums[i];
            if (i + 1 < nums.length) {
                right -= nums[i + 1];
            }
        }
        return ans;
    }

}",1454815966
Sydney Burgess,sydneyb,391,3639,java,"class Solution {
    public boolean isZeroArray(int[] nums, int[][] queries) {
        int[] mem = new int[nums.length];
        for (int i = 0; i < queries.length; i++) {
            int l = queries[i][0];
            int r = queries[i][1];
            int val = 1;

            mem[l] += val;
            if (r + 1 < nums.length) {
                mem[r + 1] -= val;
            }
        }

        int acc = 0;
        for (int i = 0; i < nums.length; i++) {
            acc += mem[i];
            if (acc < nums[i]) {
                return false;
            }
        }
        return true;
    }
}",1454829026
Sydney Burgess,sydneyb,391,3643,java,"class Solution {
    public int minZeroArray(int[] nums, int[][] queries) {
        int low = 0;
        int high = queries.length;
        while (low < high) {
            int mid = Math.floorDiv(low + high, 2);
            if (test(nums, queries, mid)) {
                high = mid;
            } else {
                low = mid + 1;
            }
        }

        if (test(nums, queries, low)) {
            return low;
        } else {
            return -1;
        }
    }

    boolean test(int[] nums, int[][] queries, int k) {
        int[] mem = new int[nums.length];
        for (int i = 0; i < k; i++) {
            int l = queries[i][0];
            int r = queries[i][1];
            int val = queries[i][2];

            mem[l] += val;
            if (r + 1 < nums.length) {
                mem[r + 1] -= val;
            }
        }

        int acc = 0;
        for (int i = 0; i < nums.length; i++) {
            acc += mem[i];
            if (acc < nums[i]) {
                return false;
            }
        }
        return true;
    }
}",1454836326
Jose Coves,jcoves,392,3616,cpp,"
#ifdef LOCAL_RUN
#include ""debug_leet.h""
    #else
    #define trace(...) ;
    #define dbg(...) ;
    #define dbgc(...) ;
    #define debug(x) ;
    #define debuga(a, n) ;
    #define debug2(x, y) ;
    #define debug3(x, y, z) ;
    #define debug4(x, y, z, w) ;
    #define debug5(a,b,c,d,e) ;
    #define lassert(x) ;
    #define dassert(x, ...) ;
    int recur_depth = 0; bool rec_indent = true;
    const bool isLocal = false;
    template <typename Arg, typename... Args>
    void display(TreeNode* root) {}
    #endif

    #define pb push_back
    #define eb emplace_back
    #define popb pop_back
    #define all(v) begin(v), end(v)
    #define rall(v) (v).rbegin(),(v).rend()
    #define make_unique(v) (v).erase(unique(all(v)), (v).end())
    #define sz(c) ((int) c.size())
    #define forn(i,n) for(auto i=(n)-(n);i<(n);i++)
    #define fornn(i,s,n) for(auto i=(n)-(n)+(s);i<(n);i++)
    #define forb(i,n) for(auto i=(n)-1;i>=0;i--)
    #define forbn(i,s,n) for(auto i=(n)-1;i>=(s);i--)
    #define forit(it, c) for(auto it = (c).begin(); it != (c).end(); ++it)
    #define mem(a,b) memset(a,b,sizeof(a))
    #define abs(x) (((x) < 0) ? -(x) : (x))
    #define sqr(x) ((x) * (x))
    #define sqrt(x) sqrt(abs(x))
    #define has(c,x) (c.find(x) != c.end())
    #define pw(x) (1LL << (x))
    #define ibit(x,i) (((x) >> (i)) & 1)
    #define data(v) v.data(), sz(v) // vi -> vai
    #define gtime() ((double(clock()) - 0)/CLOCKS_PER_SEC)

    typedef stringstream sstr;
    typedef long long ll;
    typedef long double ld;
    typedef pair<int, int> pii;
    typedef pair<ll,ll> pll;
    typedef pair<ld,ld> pdd;
    typedef vector<int> vi;
    typedef vector<ll> vll;
    typedef vector<pii> vpii;
    typedef vector<vi> vvi;
    typedef vector<vll> vvll;
    typedef valarray<int> vai;
    template <class T>
    using min_pq = priority_queue<T, vector<T>, greater<T>>;
    template <class T>
    using vc = vector<T>;
    template <class T>
    using vvc = vector<vc<T>>;
    template <class T>
    using vvvc = vector<vvc<T>>;
    template <class T>
    using vvvvc = vector<vvvc<T>>;
    template <class T>
    using vvvvvc = vector<vvvvc<T>>;

    template<class F>
    struct y_comb{
        F f;
        template<class T> explicit y_comb(T &&f_in): f(forward<T>(f_in)){ }
        template<class ...Args> decltype(auto) operator()(Args &&...args){ return f(ref(*this), forward<Args>(args)...); }
    };
    template<class F>
    decltype(auto) yf(F &&f){
        return y_comb<decay_t<F>>(forward<F>(f));
    }

    inline int ni(){ int x; cin >> x;   return x; }
    inline ll  nl() { ll  x; cin >> x; return x; }

    template <class T> void mmin(T& a, const T& b) {
        a = (a) < (b) ? (a) : (b);
    }
    template <class T> void mmax(T& a, const T& b) {
        a = (a) > (b) ? (a) : (b);
    }
    template <class T> int LB(vc<T> &a, T x){
        return int(lower_bound(all(a), x) - a.begin());
    }
    template <class T> int UB(vc<T> &a, T x){
        return int(upper_bound(all(a), x) - a.begin());
    }
    template <class T> T MAX(vc<T> &a, int l=0, int r=-1){
        if(r < 0) r = sz(a);
        return *max_element(a.begin()+l, a.begin()+r);
    }
    template <class T> T MIN(vc<T> &a, int l=0, int r=-1){
        if(r < 0) r = sz(a);
        return *min_element(a.begin()+l, a.begin()+r);
    }
    template <class T> auto vv(int d1, T x){
        return vc<T>(d1, x);
    }
    template <class T> auto vv(int d1, int d2, T x){
        return vc<vc<T>>(d1, vc<T>(d2, x));
    }
    template <class T> auto vv(int d1, int d2, int d3, T x){
        return vc<vc<vc<T>>>(d1, vv(d2, d3, x));
    }
    template <class T> auto vv(int d1, int d2, int d3, int d4, T x){
        return vc<vc<vc<vc<T>>>>(d1, vv(d2, d3, d4, x));
    }
    void outv(auto &v){
        for(auto &x: v) {cout<< x <<"" "";} cout<<endl;
    }
    void rvec(int &n, auto &v){
        cin >> n; v.resize(n); for(auto &x: v) cin >> (x);
    }
    template <typename Arg, typename... Args>
    void read(Arg&& arg, Args&&... args){
        cin >> std::forward<Arg>(arg); using expander = int[];
        (void)expander{0, (void(cin >> std::forward<Args>(args)),0)...};
    }
    template <typename Arg, typename... Args>
    void out(Arg&& arg, Args&&... args){
        cout << std::forward<Arg>(arg); using expander = int[];
        (void)expander{0, (void(cout << "" "" << std::forward<Args>(args)),0)...};
        cout << endl;
    }
    template <class Integer, class F>
    Integer find_first_false(Integer l, Integer r, F&& f) {
        --l; // ++r;
        while (r - l > 1) {
            Integer m = midpoint(l, r);
            if (f(m)) l = m;
            else r = m;
        }
        return r;
    }
    template <class Integer, class F>
    Integer find_last_true(Integer l, Integer r, F &&f) {
        return find_first_false(l, r, [&f](Integer i) { return f(i); }) - 1;
    }
    template <class Integer, class F>
    Integer find_first_true(Integer l, Integer r, F &&f) {
        return find_first_false(l, r, [&f](Integer i) { return !f(i); });
    }
    template <class T, class F>
    T last_true(T lo, T hi, F&& f) { 
        lo--; // if all are false, return lo-1
        while(lo < hi){
            T mid = lo + (hi - lo + 1) / 2;
            if(f(mid)) lo = mid; 
            else hi = mid - 1;
        }
        return lo;
    }
    template <class T, class F>
    T first_true(T lo, T hi, F&& f) { 
        // return last_true(lo, hi, [&](T x){ return !f(x); }) + 1;
        hi++; // if all are false, return hi+1
        while(lo < hi){
            T mid = lo + (hi - lo) / 2;
            if(f(mid)) hi = mid; 
            else lo = mid + 1;
        }
        return lo;
    }
    auto init = []() {
        ios::sync_with_stdio(0); cin.tie(NULL); cout.tie(NULL); return 'c';
    }();

    ll pwr(ll base, ll p, ll mod){
        ll ans=1; while(p) {if(p&1) ans=(ans*base)%mod;
            base=(base*base)%mod; p/=2;}
        return ans;
    }
    ll gcd(ll a, ll b) {  return b == 0 ? a : gcd(b,a%b); }
    ll lcm(ll a, ll b) {  return a*(b/gcd(a,b)); }

    const long double PI = (long double)(3.1415926535897932384626433832795);
    const ll  mx_ll   = numeric_limits<ll> :: max();
    const int mx_int  = numeric_limits<int> :: max();

    const int oo = 0x3f3f3f3f;
    const ll  OO = 0x3f3f3f3f3f3f3f3fll;
    const double eps = 1e-9;
    const int DX[8]={0,1, 0,-1,-1,1,-1, 1};
    const int DY[8]={1,0,-1, 0,-1,1, 1,-1};

const int maxn = 1e5 + 3;
const int mod = 1e9+7;
class Solution {
public:
    int countValidSelections(vector<int>& a) {
        int n = sz(a);
        int r = 0; for(int x: a) r += x;
        int l = 0, ans = 0;
        forn(i, n) {
            l += a[i];
            r -= a[i];
            if(a[i] == 0) {
                if(l == r) ans += 2;
                if(l-r == 1) ans++;
                if(r-l == 1) ans++;
            }
        }
        return ans;
    }
};

#ifdef LOCAL_RUN
void _solve(){
    Solution sol;

}


/*************************************************************************/
int main(){
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    //cout.precision(15);
    // return 0;
    while(cin.peek() == 32 or cin.peek() == 10) cin.get();
    while(cin.peek() != EOF){
        _solve();
        while(cin.peek() == 32 or cin.peek() == 10) cin.get();
    }
}
#endif
",1454807458
Jose Coves,jcoves,392,3639,cpp,"
#ifdef LOCAL_RUN
#include ""debug_leet.h""
    #else
    #define trace(...) ;
    #define dbg(...) ;
    #define dbgc(...) ;
    #define debug(x) ;
    #define debuga(a, n) ;
    #define debug2(x, y) ;
    #define debug3(x, y, z) ;
    #define debug4(x, y, z, w) ;
    #define debug5(a,b,c,d,e) ;
    #define lassert(x) ;
    #define dassert(x, ...) ;
    int recur_depth = 0; bool rec_indent = true;
    const bool isLocal = false;
    template <typename Arg, typename... Args>
    void display(TreeNode* root) {}
    #endif

    #define pb push_back
    #define eb emplace_back
    #define popb pop_back
    #define all(v) begin(v), end(v)
    #define rall(v) (v).rbegin(),(v).rend()
    #define make_unique(v) (v).erase(unique(all(v)), (v).end())
    #define sz(c) ((int) c.size())
    #define forn(i,n) for(auto i=(n)-(n);i<(n);i++)
    #define fornn(i,s,n) for(auto i=(n)-(n)+(s);i<(n);i++)
    #define forb(i,n) for(auto i=(n)-1;i>=0;i--)
    #define forbn(i,s,n) for(auto i=(n)-1;i>=(s);i--)
    #define forit(it, c) for(auto it = (c).begin(); it != (c).end(); ++it)
    #define mem(a,b) memset(a,b,sizeof(a))
    #define abs(x) (((x) < 0) ? -(x) : (x))
    #define sqr(x) ((x) * (x))
    #define sqrt(x) sqrt(abs(x))
    #define has(c,x) (c.find(x) != c.end())
    #define pw(x) (1LL << (x))
    #define ibit(x,i) (((x) >> (i)) & 1)
    #define data(v) v.data(), sz(v) // vi -> vai
    #define gtime() ((double(clock()) - 0)/CLOCKS_PER_SEC)

    typedef stringstream sstr;
    typedef long long ll;
    typedef long double ld;
    typedef pair<int, int> pii;
    typedef pair<ll,ll> pll;
    typedef pair<ld,ld> pdd;
    typedef vector<int> vi;
    typedef vector<ll> vll;
    typedef vector<pii> vpii;
    typedef vector<vi> vvi;
    typedef vector<vll> vvll;
    typedef valarray<int> vai;
    template <class T>
    using min_pq = priority_queue<T, vector<T>, greater<T>>;
    template <class T>
    using vc = vector<T>;
    template <class T>
    using vvc = vector<vc<T>>;
    template <class T>
    using vvvc = vector<vvc<T>>;
    template <class T>
    using vvvvc = vector<vvvc<T>>;
    template <class T>
    using vvvvvc = vector<vvvvc<T>>;

    template<class F>
    struct y_comb{
        F f;
        template<class T> explicit y_comb(T &&f_in): f(forward<T>(f_in)){ }
        template<class ...Args> decltype(auto) operator()(Args &&...args){ return f(ref(*this), forward<Args>(args)...); }
    };
    template<class F>
    decltype(auto) yf(F &&f){
        return y_comb<decay_t<F>>(forward<F>(f));
    }

    inline int ni(){ int x; cin >> x;   return x; }
    inline ll  nl() { ll  x; cin >> x; return x; }

    template <class T> void mmin(T& a, const T& b) {
        a = (a) < (b) ? (a) : (b);
    }
    template <class T> void mmax(T& a, const T& b) {
        a = (a) > (b) ? (a) : (b);
    }
    template <class T> int LB(vc<T> &a, T x){
        return int(lower_bound(all(a), x) - a.begin());
    }
    template <class T> int UB(vc<T> &a, T x){
        return int(upper_bound(all(a), x) - a.begin());
    }
    template <class T> T MAX(vc<T> &a, int l=0, int r=-1){
        if(r < 0) r = sz(a);
        return *max_element(a.begin()+l, a.begin()+r);
    }
    template <class T> T MIN(vc<T> &a, int l=0, int r=-1){
        if(r < 0) r = sz(a);
        return *min_element(a.begin()+l, a.begin()+r);
    }
    template <class T> auto vv(int d1, T x){
        return vc<T>(d1, x);
    }
    template <class T> auto vv(int d1, int d2, T x){
        return vc<vc<T>>(d1, vc<T>(d2, x));
    }
    template <class T> auto vv(int d1, int d2, int d3, T x){
        return vc<vc<vc<T>>>(d1, vv(d2, d3, x));
    }
    template <class T> auto vv(int d1, int d2, int d3, int d4, T x){
        return vc<vc<vc<vc<T>>>>(d1, vv(d2, d3, d4, x));
    }
    void outv(auto &v){
        for(auto &x: v) {cout<< x <<"" "";} cout<<endl;
    }
    void rvec(int &n, auto &v){
        cin >> n; v.resize(n); for(auto &x: v) cin >> (x);
    }
    template <typename Arg, typename... Args>
    void read(Arg&& arg, Args&&... args){
        cin >> std::forward<Arg>(arg); using expander = int[];
        (void)expander{0, (void(cin >> std::forward<Args>(args)),0)...};
    }
    template <typename Arg, typename... Args>
    void out(Arg&& arg, Args&&... args){
        cout << std::forward<Arg>(arg); using expander = int[];
        (void)expander{0, (void(cout << "" "" << std::forward<Args>(args)),0)...};
        cout << endl;
    }
    template <class Integer, class F>
    Integer find_first_false(Integer l, Integer r, F&& f) {
        --l; // ++r;
        while (r - l > 1) {
            Integer m = midpoint(l, r);
            if (f(m)) l = m;
            else r = m;
        }
        return r;
    }
    template <class Integer, class F>
    Integer find_last_true(Integer l, Integer r, F &&f) {
        return find_first_false(l, r, [&f](Integer i) { return f(i); }) - 1;
    }
    template <class Integer, class F>
    Integer find_first_true(Integer l, Integer r, F &&f) {
        return find_first_false(l, r, [&f](Integer i) { return !f(i); });
    }
    template <class T, class F>
    T last_true(T lo, T hi, F&& f) { 
        lo--; // if all are false, return lo-1
        while(lo < hi){
            T mid = lo + (hi - lo + 1) / 2;
            if(f(mid)) lo = mid; 
            else hi = mid - 1;
        }
        return lo;
    }
    template <class T, class F>
    T first_true(T lo, T hi, F&& f) { 
        // return last_true(lo, hi, [&](T x){ return !f(x); }) + 1;
        hi++; // if all are false, return hi+1
        while(lo < hi){
            T mid = lo + (hi - lo) / 2;
            if(f(mid)) hi = mid; 
            else lo = mid + 1;
        }
        return lo;
    }
    auto init = []() {
        ios::sync_with_stdio(0); cin.tie(NULL); cout.tie(NULL); return 'c';
    }();

    ll pwr(ll base, ll p, ll mod){
        ll ans=1; while(p) {if(p&1) ans=(ans*base)%mod;
            base=(base*base)%mod; p/=2;}
        return ans;
    }
    ll gcd(ll a, ll b) {  return b == 0 ? a : gcd(b,a%b); }
    ll lcm(ll a, ll b) {  return a*(b/gcd(a,b)); }

    const long double PI = (long double)(3.1415926535897932384626433832795);
    const ll  mx_ll   = numeric_limits<ll> :: max();
    const int mx_int  = numeric_limits<int> :: max();

    const int oo = 0x3f3f3f3f;
    const ll  OO = 0x3f3f3f3f3f3f3f3fll;
    const double eps = 1e-9;
    const int DX[8]={0,1, 0,-1,-1,1,-1, 1};
    const int DY[8]={1,0,-1, 0,-1,1, 1,-1};

const int maxn = 1e5 + 3;
const int mod = 1e9+7;
class Solution {
public:
    bool isZeroArray(vector<int>& a, vector<vector<int>>& queries) {
        int n = sz(a);
        vi f(n+2);
        for(auto &v: queries){
            int l = v[0], r = v[1];
            f[l]++; f[r+1]--;
        }
        int now = 0;
        forn(i, n){
            now += f[i];
            if(a[i] > now) return false;
        }
        return true;
    }
};

#ifdef LOCAL_RUN
void _solve(){
    Solution sol;

}


/*************************************************************************/
int main(){
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    //cout.precision(15);
    // return 0;
    while(cin.peek() == 32 or cin.peek() == 10) cin.get();
    while(cin.peek() != EOF){
        _solve();
        while(cin.peek() == 32 or cin.peek() == 10) cin.get();
    }
}
#endif
",1454809657
Jose Coves,jcoves,392,3643,cpp,"
#ifdef LOCAL_RUN
#include ""debug_leet.h""
    #else
    #define trace(...) ;
    #define dbg(...) ;
    #define dbgc(...) ;
    #define debug(x) ;
    #define debuga(a, n) ;
    #define debug2(x, y) ;
    #define debug3(x, y, z) ;
    #define debug4(x, y, z, w) ;
    #define debug5(a,b,c,d,e) ;
    #define lassert(x) ;
    #define dassert(x, ...) ;
    int recur_depth = 0; bool rec_indent = true;
    const bool isLocal = false;
    template <typename Arg, typename... Args>
    void display(TreeNode* root) {}
    #endif

    #define pb push_back
    #define eb emplace_back
    #define popb pop_back
    #define all(v) begin(v), end(v)
    #define rall(v) (v).rbegin(),(v).rend()
    #define make_unique(v) (v).erase(unique(all(v)), (v).end())
    #define sz(c) ((int) c.size())
    #define forn(i,n) for(auto i=(n)-(n);i<(n);i++)
    #define fornn(i,s,n) for(auto i=(n)-(n)+(s);i<(n);i++)
    #define forb(i,n) for(auto i=(n)-1;i>=0;i--)
    #define forbn(i,s,n) for(auto i=(n)-1;i>=(s);i--)
    #define forit(it, c) for(auto it = (c).begin(); it != (c).end(); ++it)
    #define mem(a,b) memset(a,b,sizeof(a))
    #define abs(x) (((x) < 0) ? -(x) : (x))
    #define sqr(x) ((x) * (x))
    #define sqrt(x) sqrt(abs(x))
    #define has(c,x) (c.find(x) != c.end())
    #define pw(x) (1LL << (x))
    #define ibit(x,i) (((x) >> (i)) & 1)
    #define data(v) v.data(), sz(v) // vi -> vai
    #define gtime() ((double(clock()) - 0)/CLOCKS_PER_SEC)

    typedef stringstream sstr;
    typedef long long ll;
    typedef long double ld;
    typedef pair<int, int> pii;
    typedef pair<ll,ll> pll;
    typedef pair<ld,ld> pdd;
    typedef vector<int> vi;
    typedef vector<ll> vll;
    typedef vector<pii> vpii;
    typedef vector<vi> vvi;
    typedef vector<vll> vvll;
    typedef valarray<int> vai;
    template <class T>
    using min_pq = priority_queue<T, vector<T>, greater<T>>;
    template <class T>
    using vc = vector<T>;
    template <class T>
    using vvc = vector<vc<T>>;
    template <class T>
    using vvvc = vector<vvc<T>>;
    template <class T>
    using vvvvc = vector<vvvc<T>>;
    template <class T>
    using vvvvvc = vector<vvvvc<T>>;

    template<class F>
    struct y_comb{
        F f;
        template<class T> explicit y_comb(T &&f_in): f(forward<T>(f_in)){ }
        template<class ...Args> decltype(auto) operator()(Args &&...args){ return f(ref(*this), forward<Args>(args)...); }
    };
    template<class F>
    decltype(auto) yf(F &&f){
        return y_comb<decay_t<F>>(forward<F>(f));
    }

    inline int ni(){ int x; cin >> x;   return x; }
    inline ll  nl() { ll  x; cin >> x; return x; }

    template <class T> void mmin(T& a, const T& b) {
        a = (a) < (b) ? (a) : (b);
    }
    template <class T> void mmax(T& a, const T& b) {
        a = (a) > (b) ? (a) : (b);
    }
    template <class T> int LB(vc<T> &a, T x){
        return int(lower_bound(all(a), x) - a.begin());
    }
    template <class T> int UB(vc<T> &a, T x){
        return int(upper_bound(all(a), x) - a.begin());
    }
    template <class T> T MAX(vc<T> &a, int l=0, int r=-1){
        if(r < 0) r = sz(a);
        return *max_element(a.begin()+l, a.begin()+r);
    }
    template <class T> T MIN(vc<T> &a, int l=0, int r=-1){
        if(r < 0) r = sz(a);
        return *min_element(a.begin()+l, a.begin()+r);
    }
    template <class T> auto vv(int d1, T x){
        return vc<T>(d1, x);
    }
    template <class T> auto vv(int d1, int d2, T x){
        return vc<vc<T>>(d1, vc<T>(d2, x));
    }
    template <class T> auto vv(int d1, int d2, int d3, T x){
        return vc<vc<vc<T>>>(d1, vv(d2, d3, x));
    }
    template <class T> auto vv(int d1, int d2, int d3, int d4, T x){
        return vc<vc<vc<vc<T>>>>(d1, vv(d2, d3, d4, x));
    }
    void outv(auto &v){
        for(auto &x: v) {cout<< x <<"" "";} cout<<endl;
    }
    void rvec(int &n, auto &v){
        cin >> n; v.resize(n); for(auto &x: v) cin >> (x);
    }
    template <typename Arg, typename... Args>
    void read(Arg&& arg, Args&&... args){
        cin >> std::forward<Arg>(arg); using expander = int[];
        (void)expander{0, (void(cin >> std::forward<Args>(args)),0)...};
    }
    template <typename Arg, typename... Args>
    void out(Arg&& arg, Args&&... args){
        cout << std::forward<Arg>(arg); using expander = int[];
        (void)expander{0, (void(cout << "" "" << std::forward<Args>(args)),0)...};
        cout << endl;
    }
    template <class Integer, class F>
    Integer find_first_false(Integer l, Integer r, F&& f) {
        --l; // ++r;
        while (r - l > 1) {
            Integer m = midpoint(l, r);
            if (f(m)) l = m;
            else r = m;
        }
        return r;
    }
    template <class Integer, class F>
    Integer find_last_true(Integer l, Integer r, F &&f) {
        return find_first_false(l, r, [&f](Integer i) { return f(i); }) - 1;
    }
    template <class Integer, class F>
    Integer find_first_true(Integer l, Integer r, F &&f) {
        return find_first_false(l, r, [&f](Integer i) { return !f(i); });
    }
    template <class T, class F>
    T last_true(T lo, T hi, F&& f) { 
        lo--; // if all are false, return lo-1
        while(lo < hi){
            T mid = lo + (hi - lo + 1) / 2;
            if(f(mid)) lo = mid; 
            else hi = mid - 1;
        }
        return lo;
    }
    template <class T, class F>
    T first_true(T lo, T hi, F&& f) { 
        // return last_true(lo, hi, [&](T x){ return !f(x); }) + 1;
        hi++; // if all are false, return hi+1
        while(lo < hi){
            T mid = lo + (hi - lo) / 2;
            if(f(mid)) hi = mid; 
            else lo = mid + 1;
        }
        return lo;
    }
    auto init = []() {
        ios::sync_with_stdio(0); cin.tie(NULL); cout.tie(NULL); return 'c';
    }();

    ll pwr(ll base, ll p, ll mod){
        ll ans=1; while(p) {if(p&1) ans=(ans*base)%mod;
            base=(base*base)%mod; p/=2;}
        return ans;
    }
    ll gcd(ll a, ll b) {  return b == 0 ? a : gcd(b,a%b); }
    ll lcm(ll a, ll b) {  return a*(b/gcd(a,b)); }

    const long double PI = (long double)(3.1415926535897932384626433832795);
    const ll  mx_ll   = numeric_limits<ll> :: max();
    const int mx_int  = numeric_limits<int> :: max();

    const int oo = 0x3f3f3f3f;
    const ll  OO = 0x3f3f3f3f3f3f3f3fll;
    const double eps = 1e-9;
    const int DX[8]={0,1, 0,-1,-1,1,-1, 1};
    const int DY[8]={1,0,-1, 0,-1,1, 1,-1};

const int maxn = 1e5 + 3;
const int mod = 1e9+7;
class Solution {
public:
    int minZeroArray(vector<int>& a, vector<vector<int>>& queries) {
        int n = sz(a), Q = sz(queries);
        debug(a);
        vc<array<int, 3>> qs(Q);
        forn(i, Q)  qs[i] = {queries[i][0], queries[i][1], queries[i][2]};
        debug(qs);
        int ans = first_true(0, Q, [&](int q){
            // auto qs = fullqs; qs.resize(q);
            vi f(n+2);
            forn(i, q) {
                auto [l, r, val] = qs[i];
                f[l] += val; f[r+1] -= val;
            }
            debug2(q, f);
            int now = 0;
            forn(i, n){
                now += f[i];
                if(a[i] > now) return false;
            }
            return true;
        });
        return ans <= Q ? ans : -1;
        
        // sort(rall(qs));
        // vi f(n+2);
        // int now = 0;
        // forn(i, n){
        //     // int x = a[i] + now;
        //     if(a[i] + now < 0) return false;
        //     if(a[i] + now == 0) continue;
        //     while(a[i] + now > 0) {
        //         auto [l, r, val] = qs.back(); qs.pop_back();
        //         if(l < i) continue;
        //         if(l > i) return false;
        //         int d = min(val, a[i] + now);
        //         now -= d;
        //         f[r+1] += d;
        //     }
        //     if(a[i] + now != 0) return false;
        // }
        // return true;
    }
};

#ifdef LOCAL_RUN
void _solve(){
    Solution sol;
    vi a; vvi q; read(a, q);
    out(sol.minZeroArray(a, q));
}


/*************************************************************************/
int main(){
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    //cout.precision(15);
    // return 0;
    while(cin.peek() == 32 or cin.peek() == 10) cin.get();
    while(cin.peek() != EOF){
        _solve();
        while(cin.peek() == 32 or cin.peek() == 10) cin.get();
    }
}
#endif
",1454836381
rajanand18,rajanand18,393,3616,cpp,"class Solution {
public:
    
    bool fun(vector<int> nums, int curr, int direction) {
        int n = nums.size();

        while (true) {
            if (curr < 0 || curr >= n) {
                break;
            }
            if (nums[curr] == 0) {
                curr += direction;
            } else { 
                nums[curr]--; 
                direction = -direction; 
                curr += direction;
            }
        }
        for (int num : nums) {
            if (num != 0) {
                return false;
            }
        }
        return true;
    }
    
    int countValidSelections(vector<int>& nums) {
        int n = nums.size();
        int ans = 0;

        for (int start = 0; start < n; ++start) {
            if (nums[start] == 0) {
                if (fun(nums, start, -1)) {
                    ans++;
                }
                if (fun(nums, start, 1)) {
                    ans++;
                }
            }
        }

        return ans;
    }
};",1454806777
rajanand18,rajanand18,393,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        vector<int> dc(n + 1, 0);

        for (const auto& query : queries) {
            int l = query[0];
            int r = query[1];
            dc[l]++;         
            if (r + 1 < n) {
                dc[r + 1]--; 
            }
        }

        for (int i = 1; i < n; ++i) {
            dc[i] += dc[i - 1];
        }
        for (int i = 0; i < n; ++i) {
            if (dc[i] < nums[i]) {
                return false;
            }
        }

        return true;
    }
};",1454811609
rajanand18,rajanand18,393,3643,cpp,"
class SegmentTree {
private:
    vector<int> tree;
    vector<int> lazy;
    int size;

    void build(const std::vector<int>& arr, int node, int start, int end) {
        if (start == end) {
            tree[node] = arr[start];
        } else {
            int mid = (start + end) / 2;
            build(arr, 2 * node + 1, start, mid);
            build(arr, 2 * node + 2, mid + 1, end);
            tree[node] = max(tree[2 * node + 1], tree[2 * node + 2]);
        }
    }

    void updateRangeUtil(int node, int start, int end, int l, int r, int val) {
        if (lazy[node] != 0) {
            tree[node] += lazy[node];
            if (start != end) {
                lazy[2 * node + 1] += lazy[node];
                lazy[2 * node + 2] += lazy[node];
            }
            lazy[node] = 0;
        }

        if (start > end || start > r || end < l) return;

        if (start >= l && end <= r) {
            tree[node] += val; 
            if (start != end) { 
                lazy[2 * node + 1] += val; 
                lazy[2 * node + 2] += val;
            }
            return;
        }

        int mid = (start + end) / 2;
        updateRangeUtil(2 * node + 1, start, mid, l, r, val);
        updateRangeUtil(2 * node + 2, mid + 1, end, l, r, val);

        tree[node] = max(tree[2 * node + 1], tree[2 * node + 2]);
    }

    int queryMaxUtil(int node, int start, int end, int l, int r) {
        if (lazy[node] != 0) {
            tree[node] += lazy[node]; 
            if (start != end) {
                lazy[2 * node + 1] += lazy[node];
                lazy[2 * node + 2] += lazy[node];
            }
            lazy[node] = 0; 
        }

        if (start > end || start > r || end < l) return INT_MIN;
        if (start >= l && end <= r) {
            return tree[node];
        }
        int mid = (start + end) / 2;
        int leftMax = queryMaxUtil(2 * node + 1, start, mid, l, r);
        int rightMax = queryMaxUtil(2 * node + 2, mid + 1, end, l, r);
        
        return max(leftMax, rightMax);
    }

public:
    SegmentTree(const vector<int>& arr) {
        size = arr.size();
        tree.resize(4 * size);
        lazy.resize(4 * size);
        build(arr, 0, 0, size - 1);
    }

    void updateRange(int l, int r, int val) {
        updateRangeUtil(0, 0, size - 1, l, r, val);
    }

    int queryMax(int l, int r) {
        return queryMaxUtil(0, 0, size - 1, l, r);
    }
};



class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        bool allZero=true;
        for (int i = 0; i < nums.size(); ++i) {
            if (nums[i]>0) {
                allZero = false;
                break;
            }
        }
        if(allZero){
            return 0;
        }
        SegmentTree segTree(nums);
    
        for (int k = 0; k < queries.size(); ++k) {
            int li = queries[k][0];
            int ri = queries[k][1];
            int vali = queries[k][2];

            segTree.updateRange(li, ri, -vali); 

            if (segTree.queryMax(0, nums.size() - 1) <= 0) {
                return k + 1;
            }
        }

        return -1;
    }
};",1454828958
orz,itzmytym,394,3616,python3,"class Solution:
  def countValidSelections(self, nums: List[int]) -> int:
    n = len(nums)
    dirs = [-1, 1]
    def travel(i, d, arr):
      while 0 <= i < n:
        # print(arr)
        if arr[i] == 0:
          i += dirs[d]
        elif arr[i] > 0:
          arr[i] -= 1
          d = 1-d
          i += dirs[d]
      return all(x == 0 for x in arr)
    return sum(travel(i, 0, list(nums)) + travel(i, 1, list(nums)) for i in range(n) if nums[i] == 0)
      
        ",1454813813
orz,itzmytym,394,3639,python3,"class Solution:
  def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
    deltas = defaultdict(int)
    for l, r in queries:
      deltas[l] -= 1
      deltas[r+1] += 1
    c = 0
    n = len(nums)
    for i in range(n):
      c += deltas[i]
      nums[i] = max(0, nums[i] + c)
      if nums[i] != 0:
        return False
    return True
        ",1454821631
orz,itzmytym,394,3643,python3,"class Solution:
  def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
    n = len(nums)
    def check(k):
      deltas = defaultdict(int)
      for i in range(k):
        l, r, val = queries[i]
        deltas[l] -= val
        deltas[r+1] += val
      c = 0
      arr = list(nums)
      for i in range(n):
        c += deltas[i]
        arr[i] = max(0, arr[i] + c)
        if arr[i] != 0:
          return False
      return True
    lo, hi = 0, len(queries)
    ans = inf
    while lo <= hi:
      k = lo + (hi-lo)//2
      res = check(k)
      # print(k, res)
      if res:
        ans = min(ans, k)
        hi = k-1
      else:
        lo = k+1
    return -1 if ans == inf else ans",1454836452
DARSHAN,codeWithDarshan123,396,3616,java,"class Solution {
    
    public int helper(int arr[] , int nums[] , int valid , int in){
        
     
            
            int j = in;
            
            while(j>=0 && j < nums.length){
                
                if(nums[j] == 0){
                    
                    if(valid ==1)j--;
                    else j++;
                    
                }else{
                    
                    nums[j] = nums[j]-1;
                    
                    valid = 1 - valid;
                    
                    if(valid ==1)j--;
                    else j++;
                    
                }
                
                
            }
            
            
            
            int count = 0;
            for(int i = 0 ; i < nums.length; i++){
                if(nums[i] != 0)count++;
            }
        
        
        return count;
        
    }
    
    public int countValidSelections(int[] nums) {
        
        int ans = 0;
        int arr[] = Arrays.copyOf(nums , nums.length);
        
        for(int i = 0 ; i  < nums.length; i++){
            
              nums = Arrays.copyOf(arr , arr.length);
            
            if(nums[i] != 0)continue;
            
            int count = helper(arr , nums , 1 , i);
           
            
            if(count == 0){
                ans++;
            }
            
            
              nums = Arrays.copyOf(arr ,  arr.length);
             count = helper(arr , nums , 0 , i);
            
            
            if(count == 0)ans++;
            
            
            
            
            
        }
        
        
        return ans;
    }
}",1454814123
DARSHAN,codeWithDarshan123,396,3639,java,"class Solution {
    public boolean isZeroArray(int[] nums, int[][] queries) {
        
        int n = nums.length;
        int prefix[] = new int[n];
        
        for(int temp[] : queries){
            
            int l = temp[0];
            int r = temp[1];
            
            prefix[l]++;
            
            if(r+1 < n)prefix[r+1]--;
            
        }
        
        int ans = 0;
        
        for(int i = 1;i<n; i++){
            prefix[i]+=prefix[i-1];
        }
        
        for(int i = 0 ; i < n; i++){
            
            
            if(prefix[i] < nums[i])return false;
            
        }
        return true;
        
    }
}",1454822976
DARSHAN,codeWithDarshan123,396,3643,java,"class Solution {
    
  class LazySegmentTree {
        long[] tree, lazy;
        int n;
        long[] arr;

        public LazySegmentTree(long[] arr) {
            this.n = arr.length;
            this.arr = arr;
            tree = new long[4 * n];
            lazy = new long[4 * n];
            build(0, 0, n - 1);
        }

        private void build(int node, int start, int end) {
            if (start == end) {
                tree[node] = arr[start];
            } else {
                int mid = (start + end) / 2;
                build(2 * node + 1, start, mid);
                build(2 * node + 2, mid + 1, end);
                tree[node] = Math.max(tree[2 * node + 1], tree[2 * node + 2]);
            }
        }

        private void propagate(int node, int start, int end) {
            if (lazy[node] != 0) {
                tree[node] += lazy[node];
                if (start != end) {
                    lazy[2 * node + 1] += lazy[node];
                    lazy[2 * node + 2] += lazy[node];
                }
                lazy[node] = 0;
            }
        }

        public void updateRange(int l ,int r ,  long  val){

            updateRange(0, 0, arr.length - 1, l, r, val);
        }
       private  void updateRange(int node, int start, int end, int l, int r, long val) {
            propagate(node, start, end);
            if (start > end || l > end || r < start)
                return;

            if (l <= start && end <= r) {
                tree[node] += val;
                if (start != end) {
                    lazy[2 * node + 1] += val;
                    lazy[2 * node + 2] += val;
                }
                return;
            }

            int mid = (start + end) / 2;
            updateRange(2 * node + 1, start, mid, l, r, val);
            updateRange(2 * node + 2, mid + 1, end, l, r, val);
            tree[node] = Math.max(tree[2 * node + 1], tree[2 * node + 2]);
        }

        public long queryRange(int l , int r){
            return queryRange(0, 0, arr.length - 1,  l ,r);
        }


        private  long queryRange(int node, int start, int end, int l, int r) {
            propagate(node, start, end);
            if (start > end || l > end || r < start)
                return -(long)(1e13);

            if (l <= start && end <= r)
                return tree[node];

            int mid = (start + end) / 2;
           long  p1 = queryRange(2 * node + 1, start, mid, l, r);
            long  p2 = queryRange(2 * node + 2, mid + 1, end, l, r);
            return Math.max(p1, p2);
        }

//        public static void main(String[] args) {
//            int[] arr = {1, 3, 5, 7, 9};
//            LazySegmentTree st = new LazySegmentTree(arr);
//
//            // Example usage:
//            st.updateRange(0, 0, arr.length - 1, 0, 1, 2); // Add 2 to elements in range [1, 3]
//            System.out.println(st.queryRange(0, 0, arr.length - 1, 0, 1)); // Query for max value at index 2
//        }
    }
    
    
    public int minZeroArray(int[] nums, int[][] queries) {
        
        int n = nums.length;
        
        long arr[] = new long[n];
        for(int i = 0 ; i < n; i++)arr[i] = nums[i];
        
        
        LazySegmentTree  seg = new LazySegmentTree(arr);
        
        
        long a = seg.queryRange(0 , n-1);
        
        if(a<=0)return 0;
        
        int i = -1;
        
        for(int temp[] : queries){
            
            i++;
            int l = temp[0];
            int r = temp[1];
            long val = temp[2];
            
            seg.updateRange( l , r ,    -val);
            
            if(seg.queryRange(0 , n-1) <=0)return i+1;
            
            
        }
        
        
        
        return -1;
        
        
    }
}",1454836514
ptato_god,ptato_god,397,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        x = sum(nums)
        pref = 0
        out = 0
        for n in nums:
            if n == 0:
                if x == pref:
                    out += 2
                elif -1 <= pref - x <= 1:
                    out += 1
            pref += n
            x -= n
        return out",1454807279
ptato_god,ptato_god,397,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        queries.sort()
        active = []
        ind = 0
        for i, x in enumerate(nums):
            while active and i > active[0]:
                heappop(active)
            while ind < len(queries) and i == queries[ind][0]:
                heappush(active, queries[ind][1])
                ind += 1
            if x > len(active):
                return False
        return True",1454813802
ptato_god,ptato_god,397,3643,python3,"class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        n = len(queries)
        
        lo = 0
        hi = n + 1
        while lo < hi:
            change = [0] * (len(nums) + 1)
            mid = (lo + hi) // 2
            for a, b, c in queries[:mid]:
                change[a] += c
                change[b + 1] -= c
            tally = 0
            good = True
            for i, x in enumerate(nums):
                tally += change[i]
                if x > tally:
                    good = False
            if good:
                hi = mid
            else:
                lo = mid + 1
        
        return lo if lo <= n else -1",1454829054
Citypop,Citypop,398,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int n = nums.size();
        int ans = 0;
        
        for(int i = 0; i < n; i++) {
            if(nums[i] == 0) {
                for(int d = -1; d <= 1; d += 2) {
                    std::vector<int> a(nums);
                    int p = i;
                    int k = d;
                    while(p >= 0 && p < n) {
                        if(a[p] == 0) {
                            p += k;
                        } else {
                            a[p] -= 1;
                            k *= -1;
                            p += k;
                        }
                    }
                    bool good = true;
                    for(int j = 0; j < n; j++) {
                        if(a[j] != 0) {
                            good = false;
                        }
                    }
                    if(good) {
                        ans += 1;
                    }
                }
            }
        }
        
        return ans;
    }
};",1454810134
Citypop,Citypop,398,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        int m = queries.size();
        std::vector<int> diff(n + 1, 0);
        
        for(int i = 0; i < m; i++) {
            int l = queries[i][0];
            int r = queries[i][1];
            diff[l] += 1;
            diff[r + 1] -= 1;
        }
        
        int64_t sum = 0;
        for(int i = 0; i < n; i++) {
            sum += diff[i];
            if(sum < nums[i]) {
                return false;
            }
        }
        
        return true;
    }
};",1454815376
Citypop,Citypop,398,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int ans = -1;
        int n = nums.size();
        int m = queries.size();
        
        int lo = 0;
        int hi = m;
        while(lo <= hi) {
            int mid = (lo + hi) >> 1;
            
            std::vector<int64_t> diff(n + 1, 0);
            for(int i = 0; i < mid; i++) {
                diff[queries[i][0]] += queries[i][2];
                diff[queries[i][1] + 1] -= queries[i][2];
            }
            
            int64_t sum = 0;
            bool ok = true;
            for(int i = 0; i < n; i++) {
                sum += diff[i];
                if(sum < nums[i]) {
                    ok = false;
                }
            }
            
            if(ok) {
                ans = mid;
                hi = mid - 1;
            } else {
                lo = mid + 1;
            }
        }
        
        return ans;
    }
};",1454822020
Long Le,lethanhlong582000,399,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int n = nums.size();
        vector<int> pre(n, 0);
        vector<int> suf(n, 0);
        pre[0] = nums[0];
        suf[n - 1] = nums[n - 1];

        for (int i = 1; i < n; i++) {
            pre[i] = pre[i - 1] + nums[i];
        }
        for (int i = n - 2; i >= 0; i--) {
            suf[i] = suf[i + 1] + nums[i];
        }

        int res = 0;
        for (int i = 0; i < n; i++) {
            if (nums[i] == 0) {
                if (pre[i] == suf[i]) res += 2;
                if (abs(pre[i] - suf[i]) == 1) res += 1;
            }
        }

        return res;
    }
};",1454811683
Long Le,lethanhlong582000,399,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        vector<int> ans(n + 1, 0);

        for (vector<int> q : queries) {
            int l = q[0];
            int r = q[1];
            ans[l]++;
            ans[r + 1]--;
        }

        for (int i = 1; i < n; i++) {
            ans[i] = ans[i] + ans[i - 1];
        }

        bool ok = true;
        for (int i = 0; i < n; i++) {
            // cout << ans[i] << ' ';
            if (ans[i] < nums[i]) {
                ok = false;
                break;
            }
        }

        return ok;
    }
};",1454819131
Long Le,lethanhlong582000,399,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int l = 0;
        int r = queries.size();

        int res = -1;
        while (l <= r) {
            int mid = (l + r) / 2;
            if (isValid(nums, queries, mid)) {
                res = mid;
                r = mid - 1;
            } else l = mid + 1;
        }

        return res;
    }

    bool isValid(vector<int>& nums, vector<vector<int>>& queries, int k) {
        int n = nums.size();
        vector<int> ans(n + 1, 0);

        for (int i = 0; i < k; i++) {
            vector<int> q = queries[i];
            int l = q[0];
            int r = q[1];
            int v = q[2];
            ans[l] += v;
            ans[r + 1] -= v;
        }

        for (int i = 1; i < n; i++) {
            ans[i] = ans[i] + ans[i - 1];
        }
        
        bool ok = true;
        for (int i = 0; i < n; i++) {
            // cout << ans[i] << ' ';
            if (ans[i] < nums[i]) {
                ok = false;
                break;
            }
        }

        return ok;
    }
};",1454836616
vectorLongLong,vectorLongLong,400,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int n=nums.size();
        int sum=accumulate(begin(nums),end(nums),0);
        int curr=0;
        int ans=0;
        for(int i=0;i<n;i++){
            curr+=nums[i];
            if(nums[i]==0 && curr==(sum-curr)) ans+=2;
            else if(nums[i]==0 && abs(curr-(sum-curr))==1) ans++;
        }
        return ans;
    }
};",1454807737
vectorLongLong,vectorLongLong,400,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n=nums.size();
        vector<int> diff(n+1,0);
        for(auto it:queries){
            diff[it[0]]++;
            diff[it[1]+1]--;
        }
        for(int i=1;i<n;i++) diff[i]+=diff[i-1];
        for(int i=0;i<n;i++){
            if(nums[i]>diff[i]) return 0;
        }
        return 1;
    }
};",1454809503
vectorLongLong,vectorLongLong,400,3643,cpp,"typedef long long ll;
class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int q=queries.size();
        int n=nums.size();
        if(accumulate(begin(nums),end(nums),0LL)==0) return 0;
        int low=0 , high=q-1 , ans=-1;
        auto check=[&](int mid){
            vector<ll> diff(n+1,0);
            for(int i=0;i<=mid;i++){
                auto it=queries[i];
                diff[it[0]]+=it[2];
                diff[it[1]+1]-=it[2];
            }
            for(int i=1;i<n;i++) diff[i]+=diff[i-1];
            for(int i=0;i<n;i++){
                if(nums[i]>diff[i]) return 0;
            }
            return 1;
        };
        while(low<=high){
            int mid=(low+high)/2;
            if(check(mid)){
                ans=mid+1;
                high=mid-1;
            }
            else low=mid+1;
        }
        return ans;
    }
};",1454822049
Edeeva,KYR4,401,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& a) {
        int n = a.size();
        vector<int> pref(n + 1);
        int ans = 0;
        for (int i = 1; i <= n; i++) pref[i] = pref[i - 1] + a[i - 1];
        for (int i = 1; i <= n; i++)
        {
            int valback = pref[i - 1];
            int valfront = pref[n] - pref[i];
            if (valback == valfront && a[i - 1] == 0 ){
                //cout << i << "" GOOD\n"";
                ans += 2;
            }
            else if (a[i - 1] == 0 && abs(valback - valfront) == 1) ans++;
        }
        return ans;
    }
};",1454813186
Edeeva,KYR4,401,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& a, vector<vector<int>>& qu) {
        int n = a.size();
        vector<int> diff(n + 2);
        int q = qu.size();
        for (int i = 0; i < q; i++)
        {
            int l = qu[i][0];
            int r = qu[i][1];
            diff[l]++;
            diff[r + 1]--;
        }
        for (int i = 1; i < n; i++) diff[i]+= diff[i - 1];
        for (int i = 0; i < n; i++) 
            {
                if (a[i] > diff[i]) return false;
            }
        return true;
    }
};",1454818601
Edeeva,KYR4,401,3643,cpp,"#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp> 
#include <ext/pb_ds/tree_policy.hpp>
#define rep(i,a,b) for (int i = a; i < b; i++)
#define mp make_pair
#define pii pair<int,int> 
#define pb push_back
#define pll pair<long long, long long>
#define fi first
#define se second
#define speedboost ios_base::sync_with_stdio(false); cin.tie(0); cout.tie(0)
using namespace std;
using namespace __gnu_pbds;
typedef tree<int,null_type,less<int>,rb_tree_tag,tree_order_statistics_node_update> ordered_set;
typedef tree<pair<int,int>, null_type,  less<pair<int,int>>, rb_tree_tag, tree_order_statistics_node_update> ordered_multiset;
typedef vector<int> vi;
typedef vector<string> vs;
typedef vector<long long> vll;
typedef long long ll;
typedef long double ld;
ll mod = 1000000007;
const int N = 200000;
const int dx[4]{1, 0, -1, 0}, dy[4]{0, 1, 0, -1};
const char dir[4]{'D','R','U','L'};
#define all(x) begin(x), end(x)
string yes = ""YES\n"";
string no = ""NO\n"";
int inf = 1e9;

class Solution {
public:
    int minZeroArray(vector<int>& a, vector<vector<int>>& qu) {
        int n = a.size();
        int q = qu.size();
        int low = 0;
        int high = q;
        int k = -1;
        while (low <= high)
        {
            vector<ll> diff(n + 2);
            int mid = (low + high) / 2;
            for (int i = 0; i < mid; i++)
            {
                int l = qu[i][0];
                int r = qu[i][1];
                ll val = qu[i][2];
                diff[l] += val;
                diff[r + 1] -= val;
            }
            for (int i = 1; i <= n; i++) diff[i] += diff[i - 1];
            bool valid = true;
            for (int i = 0; i < n; i++) 
            {
                if (a[i] > diff[i]) 
                {
                    valid = false;
                    break;
                }
            }
            if (valid)
            {
                k = mid;
                high = mid - 1;
            }
            else low = mid + 1;
        }
        return k;
    }
};",1454829192
pipipi,mopriestt,403,3616,cpp,"class Solution {
public:
    int n;

    bool tryPick(vector<int> &b, int x, int d) {
        vector<int> a = b;
        while (true) {
            if (x < 0 || x >= n) break;
            if (a[x] == 0) {
                x += d;
                continue;
            }

            a[x] --;
            d = -d;
            x += d;
        }
        for (int i : a) if (i != 0) return false;
        return true;
    }

    int countValidSelections(vector<int>& a) {
        int ans = 0;
        n = a.size();
        for (int i = 0; i < n; i ++) {
            if (a[i] != 0) continue;
            if (tryPick(a, i, 1)) ++ ans;
            if (tryPick(a, i, -1)) ++ ans;
        }

        return ans;
    }
};",1454812005
pipipi,mopriestt,403,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& a, vector<vector<int>>& que) {
        int n = a.size();
        vector<int> b(n + 1, 0);
        for (auto &q : que) {
            b[q[0]] ++;
            b[q[1] + 1] --;
        }

        int cur = 0;
        for (int i = 0; i < n; i ++) {
            cur += b[i];
            if (cur < a[i]) return false;
        }

        return true;;
    }
};",1454816557
pipipi,mopriestt,403,3643,cpp,"class Solution {
public:
    bool test(vector<int>& a, vector<vector<int>>& que, int k) {
        vector<int> b(a.size() + 1, 0);
        for (int i = 0; i < k; i ++) {
            b[que[i][0]] += que[i][2];
            b[que[i][1] + 1] -= que[i][2];
        }

        int cur = 0;
        for (int i = 0; i < a.size(); i ++) {
            cur += b[i];
            if (cur < a[i]) return false;
        }

        return true;
    }

    int minZeroArray(vector<int>& a, vector<vector<int>>& que) {
        int n = a.size(), m = que.size();
        int l = 0, r = m + 1;
        if (!test(a, que, m)) return -1;
        while (r > l) {
//            cout<<l<<' '<<r<<endl;
            int mid = (l + r) >> 1;
            if (test(a, que, mid)) r = mid;
            else l = mid + 1;
        }

        return l;
    }
};",1454836711
Joey Woodson,SaveVMK,405,3616,java,"class Solution {
    public int countValidSelections(int[] nums) {
        int n = nums.length;
        int ans = 0;
        for (int i = 0; i < n; ++i) {
            int left = 0;
            int exact = nums[i];
            if (exact!=0)
                continue;
            int right = 0;
            for (int j = 0; j < i; ++j)
                left+=nums[j];
            for (int j = i+1; j < n; ++j)
                right+=nums[j];
            int ld = left+exact-right;
            int rd = right+exact-left;
            if (ld==0||ld==1)
                ++ans;
            if (rd==0||rd==1)
                ++ans;
        }
        return ans;
    }
}",1454807276
Joey Woodson,SaveVMK,405,3639,java,"class Solution {
    public boolean isZeroArray(int[] nums, int[][] queries) {
        int n = nums.length;
        int ql = queries.length;
        int[] cts = new int[n+1];
        for (int[] q : queries) {
            cts[q[0]]++;
            cts[q[1]+1]--;
        }
        int curr = 0;
        for (int i = 0; i < n; ++i) {
            curr += cts[i];
            if (curr<nums[i])
                return false;
        }
        return true;
    }
}",1454809758
Joey Woodson,SaveVMK,405,3643,java,"class Solution {
    public int minZeroArray(int[] nums, int[][] queries) {
        int n = nums.length;
        int ql = queries.length;
        long[] cts = new long[n+1];
        int index = 0;
        long curr = 0;
        int ans = 0;
        for (int[] q : queries) {
            while (index<n&&curr>=nums[index]) {
                ++index;
                curr += cts[index];
            }
            if (index==n)
                return ans;
            ++ans;
            cts[q[0]]+=q[2];
            cts[q[1]+1]-=q[2];
            if (q[0]<=index)
                curr += q[2];
            if (q[1]<index)
                curr -= q[2];
            //System.out.println(cts[0]+"" ""+cts[1]+"" ""+cts[2]+"" ""+curr+"" ""+index+"" ""+ans);
        }
        while (index<n&&curr>=nums[index]) {
            ++index;
            curr += cts[index];
        }
        if (index==n)
            return ql;
        return -1;
    }
}",1454822306
Puspendra Singh Yadav,puspendra_09,406,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int n = nums.size();
        int ans = 0;
        for(int i = 0; i < n; i++) {
            if(nums[i] == 0) {
                int left = 0 , right = 0;
                for(int j = 0; j < i; j++) {
                    left += nums[j];
                }
                for(int j = i + 1; j < n; j++) {
                    right += nums[j];
                }
                if(left == right) {
                    ans += 2;
                }
                else if(abs(left - right) == 1) {
                    ans += 1;
                }
            }
        }
        return ans;
    }
};",1454836931
Puspendra Singh Yadav,puspendra_09,406,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& Q) {
        long long int n = nums.size();
        long long int q = Q.size();
        
        vector<long long int> arr(n);
        
        auto helper = [&](long long int mid) -> bool {
            for(long long int i = 0; i < n; i++) {
                arr[i] = 0;
            }
            for(long long int i = 0; i <= mid; i++) {
                
                long long int l = Q[i][0];
                long long int r = Q[i][1];
                long long int val = 1;
                
                arr[l] += val;
                if(r + 1 < n) {
                    arr[r + 1] -= val;
                }
            }
            
            for(long long int i = 1; i < n; i++) {
                arr[i] += arr[i - 1];
            }
            
            for(long long int i = 0; i < n; i++) {
                long long int res = nums[i] - arr[i];
                if(res > 0) return false;
            }
            return true;
        };
        
        return helper(q - 1);
        
    }
};",1454826576
Puspendra Singh Yadav,puspendra_09,406,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& Q) {
        long long int n = nums.size();
        long long int q = Q.size();
        
        vector<long long int> arr(n);
        
        auto helper = [&](long long int mid) -> bool {
            for(long long int i = 0; i < n; i++) {
                arr[i] = 0;
            }
            for(long long int i = 0; i <= mid; i++) {
                
                long long int l = Q[i][0];
                long long int r = Q[i][1];
                long long int val = Q[i][2];
                
                arr[l] += val;
                if(r + 1 < n) {
                    arr[r + 1] -= val;
                }
            }
            
            for(long long int i = 1; i < n; i++) {
                arr[i] += arr[i - 1];
            }
            
            for(long long int i = 0; i < n; i++) {
                long long int res = nums[i] - arr[i];
                if(res > 0) return false;
            }
            return true;
        };
        
        long long int ans = -1;
        if(count(nums.begin() , nums.end() , 0) == n) {
            return 0;
        }
        
        long long int low = 0 , high = q - 1;
        while(low <= high) {
            long long int mid = (low + high) >> 1;
            if(helper(mid)) {
                ans = mid + 1;
                high = mid - 1;
            }
            else {
                low = mid + 1;
            }
        }
        return ans;
    }
};",1454823009
Manyu,ManyuD,407,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:

        n = len(nums)
        res = 0

        def check(arr, i, d):

            vis = set()
            
            while sum(arr) > 0:
                if arr[i] == 0:
                   
                    if d:
                        i += 1
                    else:
                        i -= 1

                    if not (0 <= i < len(arr)):
                        return False
                else:
                    arr[i] -= 1

                    d = not d
                    
                    if d:
                        i += 1
                    else:
                        i -= 1

                    if not (0 <= i < len(arr)):
                        return False

            return True
                
        
        for start in range(n):
            if nums[start] == 0:
                # res += check(nums.copy(), start, True)
                # res += check(nums.copy(), start, False)

                l = sum(nums[:start])
                r = sum(nums[start + 1:])
                
                if l == r:
                    res += 2
                elif abs(l - r) == 1:
                    res += 1
            
        return res
            
            ",1454813268
Manyu,ManyuD,407,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:

        n = len(nums)
        pref = [0] * n

        for s, e in queries:

            pref[s] -= 1
            if e + 1 < n:
                pref[e + 1] += 1

        curr = 0
        # print(pref)

        for i in range(n):
            curr -= pref[i]
            
            if nums[i] - curr > 0:
                return False

        return True",1454817400
Manyu,ManyuD,407,3643,python3,"class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:


        def check(i):

            n = len(nums)
            pref = [0] * n
            # qe = queries[:i]
            
            for s, e, val in queries[:i]:
    
                pref[s] -= val
                if e + 1 < n:
                    pref[e + 1] += val
    
            curr = 0
    
            for i in range(n):
                curr -= pref[i]
                
                if nums[i] - curr > 0:
                    return False
    
            return True

        def bins(start, end):
            if start >= end:
                return math.inf
            if start + 1 == end:
                return start if check(start) else math.inf

            mid = (start + end) // 2

            if not check(mid):
                return bins(mid + 1, end)
            else:
                return min(mid, bins(start, mid))

        res = bins(0, len(queries) + 1)
        return res if res != math.inf else -1
            ",1454822397
jeremymacn,jeremymacn,408,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        res=0
        for ind,num in enumerate(nums):
            if num==0:
                l=sum(nums[:ind])
                r=sum(nums[ind+1:])
                if l==r: 
                    res+=2
                elif abs(l-r)==1:
                    res+=1
        return res",1454806810
jeremymacn,jeremymacn,408,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        heap=[]
        for l,r in queries:
            heapq.heappush(heap,(l,1))
            heapq.heappush(heap,(r+1,-1))
        cur=0
        for ind,num in enumerate(nums): 
            
            while heap[0][0]==ind:
                position,change=heapq.heappop(heap)
                cur+=change
            nums[ind]-=cur
            if nums[ind]>0:
                return False
       
        return True
                
            
            ",1454815209
jeremymacn,jeremymacn,408,3643,python3,"class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        def helper(q):
            heap=[]
            
            for l,r,val in q:
                heapq.heappush(heap,(l,val))
                heapq.heappush(heap,(r+1,-val))
            cur=0
            for ind,num in enumerate(nums): 
                
                while heap and heap[0][0]==ind:
                    position,change=heapq.heappop(heap)
                    cur+=change
                if nums[ind]-cur>0:
                    return False
           
            return True
        if not helper(queries):
            return -1
            
        l,r=0,len(queries)
        while l<=r:
            mid=(l+r)//2
            if helper(queries[:mid]):
                r=mid-1
            else:
                l=mid+1
        return l",1454829505
Miles Morales,red_spidey,409,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
            def simulate(start, direction):
                n = len(nums)
                nums_copy = nums[:]
                curr = start
                while 0 <= curr < n:
                    if nums_copy[curr] == 0:
                        curr += direction  # Move in the current direction
                    else:
                        nums_copy[curr] -= 1  # Decrement the value
                        direction = -direction  # Reverse direction
                        curr += direction  # Take a step in the new direction
                # Check if the array is all zeros
                return all(x == 0 for x in nums_copy)
            
            count = 0
            n = len(nums)
            for i in range(n):
                if nums[i] == 0:
                    # Check both left and right directions
                    if simulate(i, -1):  # Start moving left
                        count += 1
                    if simulate(i, 1):  # Start moving right
                        count += 1
            
            return count

                
                    
            
                
            ",1454818343
Miles Morales,red_spidey,409,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        n = len(nums)
        diff = [0] * (n + 1) 
        
        for li, ri in queries:
            diff[li] += 1
            if ri + 1 < n:
                diff[ri + 1] -= 1
        
        decrement = [0] * n
        running_sum = 0
        for i in range(n):
            running_sum += diff[i]
            decrement[i] = running_sum  
        
        for i in range(n):
            if nums[i] > decrement[i]:  
                return False
        return True

",1454826412
Miles Morales,red_spidey,409,3643,python3,"class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        def isZeroArray( nums: List[int], queries: List[List[int]]) -> bool:
            n = len(nums)
            diff = [0] * (n + 1) 
            
            for li, ri, val in queries:
                diff[li] += val
                if ri + 1 < n:
                    diff[ri + 1] -= val
            
            decrement = [0] * n
            running_sum = 0
            for i in range(n):
                running_sum += diff[i]
                decrement[i] = running_sum  
            
            for i in range(n):
                if nums[i] > decrement[i]:  
                    return False
            return True
        l = 0
        r = len(queries)
        if not isZeroArray(nums, queries[:r]): return -1
        while l<r:

            mid = (r+l)//2
            if isZeroArray(nums, queries[:mid]):
                r = mid
            else:
                l = mid+1
        return l
            ",1454837002
Likitha,LU9pWkWTSB,410,3616,python3,"from typing import List

class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        def simulate(curr, direction):
            nums_copy = nums[:]
            n = len(nums_copy)
            while 0 <= curr < n:
                if nums_copy[curr] == 0:
                    curr += direction
                else:
                    nums_copy[curr] -= 1
                    direction *= -1 
                    curr += direction
            return all(x == 0 for x in nums_copy)
        
        count = 0
        n = len(nums)
        
        for i in range(n):
            if nums[i] == 0:
                if simulate(i, -1):  
                    count += 1
                if simulate(i, 1):  
                    count += 1
        
        return count
",1454809145
Likitha,LU9pWkWTSB,410,3639,python3,"from typing import List

class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        n = len(nums)
        range_sums = [0] * (n + 1)  
        for l, r in queries:
            range_sums[l] += 1
            if r + 1 < n:
                range_sums[r + 1] -= 1
        decrements = [0] * n
        active_decrements = 0
        for i in range(n):
            active_decrements += range_sums[i]
            decrements[i] = active_decrements
        for i in range(n):
            if nums[i] > decrements[i]:
                return False

        return True
",1454826032
Likitha,LU9pWkWTSB,410,3643,python3,"from typing import List
class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        def can_process_k_queries(k: int) -> bool:
            n = len(nums)
            diff = [0] * (n + 1)  
            current = nums[:]  
            for i in range(k):
                l, r, val = queries[i]
                diff[l] += val
                if r + 1 < n:
                    diff[r + 1] -= val
            total_decrement = 0
            for i in range(n):
                total_decrement += diff[i]          
                current[i] = max(0, current[i] - total_decrement)
            return all(x == 0 for x in current)
        left, right = 0, len(queries)
        result = -1

        while left <= right:
            mid = (left + right) // 2
            if can_process_k_queries(mid):
                result = mid 
                right = mid - 1
            else:
                left = mid + 1
        
        return result
",1454837028
Deepak,Deepak_221,411,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int n = nums.size();
        int validCount = 0;

        // Simulate the process for a given start position and direction
        auto simulate = [&](int start, int direction) {
            vector<int> numsCopy = nums; // Create a copy of nums
            int curr = start;

            while (curr >= 0 && curr < n) {
                if (numsCopy[curr] == 0) {
                    curr += direction; // Move in the current direction
                } else {
                    numsCopy[curr]--;   // Decrement the value at the current position
                    direction = -direction; // Reverse direction
                    curr += direction; // Move in the reversed direction
                }
            }

            // Check if all elements are zero
            for (int x : numsCopy) {
                if (x != 0) return false;
            }
            return true;
        };

        // Iterate through all starting positions where nums[i] == 0
        for (int i = 0; i < n; ++i) {
            if (nums[i] == 0) {
                // Try both directions for the current starting position
                if (simulate(i, -1)) validCount++;
                if (simulate(i, 1)) validCount++;
            }
        }

        return validCount;
    }
};",1454806740
Deepak,Deepak_221,411,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        vector<int> delta(n + 1, 0); 

        for (const auto& query : queries) {
            int start = query[0], end = query[1];
            delta[start]--;          
            if (end + 1 < n) delta[end + 1]++; 
        }

        for (int i = 1; i < n; ++i) {
            delta[i] += delta[i - 1];
        }

       
        for (int i = 0; i < n; ++i) {
            if (nums[i] + delta[i] > 0) return false; 
        }

        return true; 
    }
};",1454832408
Deepak,Deepak_221,411,3643,cpp,"class Solution {
public:
    bool canZeroArray(vector<int>& nums, vector<vector<int>>& queries, int k) {
        int n = nums.size();
        vector<int> delta(n + 1, 0); // Difference array for range updates

        // Process the first k queries to update the difference array
        for (int i = 0; i < k; ++i) {
            int start = queries[i][0], end = queries[i][1], value = queries[i][2];
            delta[start] -= value;
            if (end + 1 < n) delta[end + 1] += value;
        }

        // Accumulate the range updates
        for (int i = 1; i < n; ++i) {
            delta[i] += delta[i - 1];
        }

        // Check if nums becomes a zero array after applying the updates
        for (int i = 0; i < n; ++i) {
            if (nums[i] + delta[i] > 0) {
                return false; // nums[i] is not zero or negative
            }
        }

        return true; // Successfully converted nums to a zero array
    }
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int left = 0, right = queries.size();
        int result = -1;

        while (left <= right) {
            int mid = (left + right) / 2;
            if (canZeroArray(nums, queries, mid)) {
                result = mid;      // Update result if successful
                right = mid - 1;   // Search in the lower half
            } else {
                left = mid + 1;    // Search in the upper half
            }
        }

        return result;
    }
};",1454837079
Wei Liu,nevergiveup,413,3616,java,"class Solution {

    private int[] prefix;
    private int[] suffix;

    public int countValidSelections(int[] nums) {
        int n = nums.length;
        prefix = new int[n];
        suffix = new int[n];
        for (int i = 0;i < n;i ++) {
            prefix[i] = nums[i];
            if (i > 0) {
                prefix[i] += prefix[i - 1];
            }
        }
        for (int i = n - 1;i >= 0;i --) {
            suffix[i] = nums[i];
            if (i + 1 < n) {
                suffix[i] += suffix[i + 1];
            }
        }
        // check all the zeros
        int ans = 0;
        for (int i = 0;i < n;i ++) {
            if (nums[i] == 0) {
                int leftSum = 0, rightSum = 0;
                if (i - 1 >= 0) {
                    leftSum = prefix[i - 1];
                }
                if (i + 1 < n) {
                    rightSum = suffix[i + 1];
                }
                if (leftSum == rightSum) {
                    ans += 2;
                } else {
                    int diff = Math.abs(leftSum - rightSum);
                    if (diff == 1) {
                        ans ++;
                    }
                }
            }
        }
        return ans;
    }

}",1454809267
Wei Liu,nevergiveup,413,3639,java,"class Solution {

    private int[] update = new int[100010];

    public boolean isZeroArray(int[] nums, int[][] queries) {
        for (int[] query : queries) {
            int l = query[0], r = query[1];
            update[l] ++;
            update[r + 1] --;
        }
        long acc = 0;
        for (int i = 0;i < nums.length;i ++) {
            acc += update[i];
            if (acc < nums[i]) {
                return false;
            }
        }
        return true;
    }

}",1454815295
Wei Liu,nevergiveup,413,3643,java,"class Solution {

    private boolean check(int[] nums, int[][] queries, int queryNum) {
        Arrays.fill(update, 0);
        long acc = 0;
        for (int i = 0;i < queryNum;i ++) {
            int[] query = queries[i];
            int l = query[0], r = query[1], val = query[2];
            update[l] += val;
            update[r + 1] -= val;
        }
        for (int i = 0;i < nums.length;i ++) {
            acc += update[i];
            if (acc < nums[i]) {
                return false;
            }
        }
        return true;
    }

    private int[] update = new int[100010];

    public int minZeroArray(int[] nums, int[][] queries) {
        int l = 0, r = queries.length + 1;
        while (l < r) {
            int mid = (l + r) / 2;
            if (check(nums, queries, mid)) {
                r = mid;
            } else {
                l = mid + 1;
            }
        }
        if (l == queries.length + 1) {
            return - 1;
        } else {
            return l;
        }
    }

}",1454829676
realstar,realstar,415,3616,java,"class Solution {
    public int countValidSelections(int[] nums) {
        int n = nums.length;
        int result = 0;
        int sum = 0;
        for (int num : nums)
        	sum += num;
        for (int i = 0; i < n; i++) {
        	if (nums[i] == 0) {
        		int[] clone = nums.clone();
        		if (valid(clone, n, i, sum, true))
        			result++;
        		int[] clone2 = nums.clone();
        		if (valid(clone2, n, i, sum, false))
        			result++;
        	}
        }
        return result;
    }

	
	private static boolean valid(int[] nums, int n, int index, int sum, boolean right) {
		int now = index;
		while (sum > 0) {
			if (right)
				now++;
			else
				now--;
			if (now < 0 || now >= n)
				return sum == 0;
			if (nums[now] > 0) {
				nums[now]--;
				sum--;
				right = !right;
			}
		}
		return sum == 0;
	}
}",1454816480
realstar,realstar,415,3639,java,"class Solution {
    public boolean isZeroArray(int[] nums, int[][] queries) {
        int n = nums.length;
        int[] changes = new int[n + 1];
        for (int[] query : queries) {
        	changes[query[0]]++;
        	changes[query[1] + 1]--;
        }
        if (nums[0] > changes[0])
        	return false;
        	
        for (int i = 1; i < n; i++) {
        	changes[i] += changes[i - 1];
        	if (nums[i] > changes[i])
        		return false;
        }
        return true;
    }
}",1454825912
realstar,realstar,415,3643,java,"class Solution {
    public int minZeroArray(int[] nums, int[][] queries) {
        int n = queries.length;
		if (isZeroArray(nums, 0, queries))
			return 0;
		if (!isZeroArray(nums, n, queries))
			return -1;
		int left = 0;
		int right = n;
		while (left + 1 < right) {
			int mid = left + (right - left) / 2;
			if (isZeroArray(nums, mid, queries))
				right = mid;
			else
				left = mid;
		}
		return right;
    }
	
	private static boolean isZeroArray(int[] nums, int k, int[][] queries) {
        int n = nums.length;
        int[] changes = new int[n + 1];
        for (int i = 0; i < k; i++) {
        	int[] query = queries[i];
        	changes[query[0]] += query[2];
        	changes[query[1] + 1] -= query[2];
        }
        if (nums[0] > changes[0])
        	return false;
        	
        for (int i = 1; i < n; i++) {
        	changes[i] += changes[i - 1];
        	if (nums[i] > changes[i])
        		return false;
        }
        return true;
    }
}",1454837249
Akhil,akh26,418,3616,cpp,"class Solution {
public:
    bool f(vector<int> nums, int start, int dir) {
        int curr = start;
        while (curr >= 0 && curr < nums.size()) {
            if (nums[curr] == 0) {
                curr += dir; 
            } else {
                nums[curr]--;       
                dir = -dir; 
                curr += dir; 
            }
        }
        for (int num : nums) {
            if (num != 0) return false;
        }
        return true;
    }
    int countValidSelections(vector<int>& nums) {
        int n = nums.size();
        int mx = 0;
        for (int i = 0; i < n; i++) {
            if (nums[i] == 0) {
                if (f(nums, i, -1)) mx++; 
                if (f(nums, i, 1)) mx++; 
            }
        }

        return mx;
    }
};",1454806601
Akhil,akh26,418,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        vector<int> diff(n+1,0);
        for (auto& query : queries) {
            int l = query[0], r = query[1];
            diff[l]++;          
            if (r+1<n) {
                diff[r+1]--; 
            }
        }
        int cur = 0;
        for (int i = 0; i < n; ++i) {
            cur += diff[i]; 
            if (cur < nums[i]) {
                return false; 
            }
        }

        return true; 
    }
};",1454823914
Akhil,akh26,418,3643,cpp,"class Solution {
public:
    bool f(int k,vector<int>& nums,vector<vector<int>>& queries) {
        int n = nums.size();
        vector<int> pref(n+1, 0);
        for (int i = 0; i < k; ++i) {
            int l = queries[i][0],r=queries[i][1], val=queries[i][2];
            pref[l]+=val;
            if (r+1<n) {
                pref[r+1] -= val;
            }
        }
        int sum = 0;
        for (int i = 0; i < n; ++i) {
            sum+=pref[i];
            if (sum<nums[i]){ 
                return false;
            }
        }
        return true;
    }
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        vector<int>v;
        v=nums;
        int flag=0;
        for (int i = 0; i < nums.size(); i++)
        {
            if (nums[i]!=0)
            {
                flag=1;
                break;
            }
        }
        if (flag==0)
        {
            return 0;
        }
        int lo = 0, hi = queries.size();
        int ans = -1;
        bool ok = false;
        while (lo<=hi) {
            int mid = lo+(hi-lo)/2;
            if (f(mid,nums,queries)) {
                ans=mid;
                hi=mid-1;
            }else{
                lo=mid+1;
            }
        }
        return ans;
    }
};",1454837305
Neil Chetty,neilchetty,422,3616,java,"class Solution {
    public int countValidSelections(int[] nums) {
        int right = 0, result = 0, n = nums.length;
        for(int i : nums) right += i;
        for(int i = 0, left = 0; i < n; i++) {
            right -= nums[i];
            if(nums[i] == 0) {
                if(Math.abs(left-right)==0) result += 2;
                else if(Math.abs(left - right) == 1) result += 1;
            }
            left += nums[i];
        }
        return result;
    }
}",1454815443
Neil Chetty,neilchetty,422,3639,java,"class Solution {
    public boolean isZeroArray(int[] nums, int[][] queries) {
        int n = nums.length;
        int[] ok = new int[n+1];
        for(int[] q : queries) {
            ok[q[0]]++;
            ok[q[1]+1]--;
        }
        for(int i = 0, sum = 0; i <= n; i++) {
            sum += ok[i];
            ok[i] = sum;
        }
        for(int i = 0; i < n; i++) {
            if(ok[i] < nums[i]) return false;
        }
        return true;
    }
}",1454807448
Neil Chetty,neilchetty,422,3643,java,"class Solution {
    public int minZeroArray(int[] nums, int[][] q) {
        int n = nums.length, m = q.length;
        int left = 0, right = m;
        while(left <= right) {
            int mid = left + (right - left)/2;
            if(verify(nums, q, mid)) right = mid - 1;
            else left = mid + 1;
        }
        return left > m ? -1 : left;
    }
    
    private boolean verify(int[] nums, int[][] q, int mid) {
        int n = nums.length;
        int[] ok = new int[n+1];
        for(int i = 0; i < mid; i++) {
            ok[q[i][0]] += q[i][2];
            ok[q[i][1]+1] -= q[i][2];
        }
        for(int i = 0, sum = 0; i <= n; i++) {
            sum += ok[i];
            ok[i] = sum;
        }
        for(int i = 0; i < n; i++) {
            if(ok[i] < nums[i]) return false;
        }
        return true;

    }
}",1454829992
Mohd Adil,ace_Coder121,423,3616,cpp,"class Solution {
public:
    int countValidSelections(std::vector<int>& a) {
        int v = 0, n = a.size();
        auto sim = [&](int s, int d) {
            std::vector<int> b = a;
            int p = s;
            while (p >= 0 && p < n) {
                if (b[p] == 0) p += d;
                else if (b[p] > 0) {
                    b[p]--;
                    d = -d;
                    p += d;
                }
            }
            return std::all_of(b.begin(), b.end(), [](int x) { return x == 0; });
        };
        for (int i = 0; i < n; ++i) {
            if (a[i] == 0) {
                if (sim(i, -1)) v++;
                if (sim(i, 1)) v++;
            }
        }
        return v;
    }
};
",1454806159
Mohd Adil,ace_Coder121,423,3639,cpp,"#define ll long long int
template <typename T>
class SegTree{
    void build(vector<T> &arr,int l,int r,int i){
        if(l==r){
            tree[i]=arr[l];
            return;
        }
        int mid = (l+r)/2;
        build(arr,l,mid,2*i+1);
        build(arr,mid+1,r,2*i+2);
        tree[i]=fn(tree[2*i+1],tree[2*i+2]);
    }

    void make_pure(int l,int r,int i){
    	if(is_del_update)make_pure_delta(l,r,i);
    	else make_pure_set(l,r,i);
    }


    void make_pure_set(int l,int r,int i){
    	if(lz[i]==0)return;
    	tree[i]=lz[i];
    	if(l!=r){
    		lz[2*i+1]=lz[i];
    		lz[2*i+2]=lz[i];
    	}
    	lz[i]=0;
    }

    void make_pure_delta(int l,int r,int i){
    	if(lz[i]==0)return;
    	tree[i]+=lz[i];
    	if(l!=r){
    		lz[2*i+1]+=lz[i];
    		lz[2*i+2]+=lz[i];
    	}
    	lz[i]=0;
    }

    void upd(int ql,int qr,int val,int l,int r,int i){
    	make_pure(l,r,i);
        if(ql>r || l>qr)return;
        if(ql<=l && r<=qr){
        	if(is_del_update)lz[i]+=val;
        	else lz[i]=val;
    		make_pure(l,r,i);
    		return;
        }
        int mid = (l+r)/2;
        upd(ql,qr,val,l,mid,2*i+1);
        upd(ql,qr,val,mid+1,r,2*i+2);
        tree[i]=fn(tree[2*i+1],tree[2*i+2]);
    }

    T qry(int ql,int qr,int l,int r,int i){
    	make_pure(l,r,i);
        if(ql>r || l>qr)return 0;
        if(ql<=l && r<=qr)return tree[i];
        int mid = (l+r)/2;
        return fn(qry(ql,qr,l,mid,2*i+1),qry(ql,qr,mid+1,r,2*i+2));
    }

    public:
    int n;
    function<T(T,T)> fn;
    vector<T> tree,lz;
    bool is_del_update;
    SegTree(int arr_size,function<T(T,T)> op,bool is_delta=false){
        tree.resize(4*arr_size);
        lz.resize(4*arr_size);
        n=arr_size;
        fn = op;
        is_del_update=is_delta;
    }
    void build(vector<T> &arr){
        build(arr,0,arr.size()-1,0);
    }

    void upd(int ql,int qr,T val){
        upd(ql,qr,val,0,n-1,0);
    }

    T qry(int ql,int qr){
        return qry(ql,qr,0,n-1,0);
    } 
};

class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& qr) {
        int n = nums.size();
        SegTree<ll> sg(n,[&](ll a,ll b){
            return a+b;
        },true);

        vector<ll> v;

        for(auto x:nums){
            v.push_back(x);
        }
        
        sg.build(v);


        for(auto q:qr){
            sg.upd(q[0],q[1],-1);
        }
        for(int i=0;i<n;i++){
            if(sg.qry(i,i)>0){
                return false;
            }            
        }
        return true;
    }
};",1454814092
Mohd Adil,ace_Coder121,423,3643,cpp,"#define ll long long int
template <typename T>
class SegTree{
    void build(vector<T> &arr,int l,int r,int i){
        if(l==r){
            tree[i]=arr[l];
            return;
        }
        int mid = (l+r)/2;
        build(arr,l,mid,2*i+1);
        build(arr,mid+1,r,2*i+2);
        tree[i]=fn(tree[2*i+1],tree[2*i+2]);
    }

    void make_pure(int l,int r,int i){
    	if(is_del_update)make_pure_delta(l,r,i);
    	else make_pure_set(l,r,i);
    }


    void make_pure_set(int l,int r,int i){
    	if(lz[i]==0)return;
    	tree[i]=lz[i];
    	if(l!=r){
    		lz[2*i+1]=lz[i];
    		lz[2*i+2]=lz[i];
    	}
    	lz[i]=0;
    }

    void make_pure_delta(int l,int r,int i){
    	if(lz[i]==0)return;
    	tree[i]+=lz[i];
    	if(l!=r){
    		lz[2*i+1]+=lz[i];
    		lz[2*i+2]+=lz[i];
    	}
    	lz[i]=0;
    }

    void upd(int ql,int qr,int val,int l,int r,int i){
    	make_pure(l,r,i);
        if(ql>r || l>qr)return;
        if(ql<=l && r<=qr){
        	if(is_del_update)lz[i]+=val;
        	else lz[i]=val;
    		make_pure(l,r,i);
    		return;
        }
        int mid = (l+r)/2;
        upd(ql,qr,val,l,mid,2*i+1);
        upd(ql,qr,val,mid+1,r,2*i+2);
        tree[i]=fn(tree[2*i+1],tree[2*i+2]);
    }

    T qry(int ql,int qr,int l,int r,int i){
    	make_pure(l,r,i);
        if(ql>r || l>qr)return 0;
        if(ql<=l && r<=qr)return tree[i];
        int mid = (l+r)/2;
        return fn(qry(ql,qr,l,mid,2*i+1),qry(ql,qr,mid+1,r,2*i+2));
    }

    public:
    int n;
    function<T(T,T)> fn;
    vector<T> tree,lz;
    bool is_del_update;
    SegTree(int arr_size,function<T(T,T)> op,bool is_delta=false){
        tree.resize(4*arr_size);
        lz.resize(4*arr_size);
        n=arr_size;
        fn = op;
        is_del_update=is_delta;
    }
    void build(vector<T> &arr){
        build(arr,0,arr.size()-1,0);
    }

    void upd(int ql,int qr,T val){
        upd(ql,qr,val,0,n-1,0);
    }

    T qry(int ql,int qr){
        return qry(ql,qr,0,n-1,0);
    } 
};

class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& qr) {
        int n = nums.size();
        SegTree<ll> sg(n,[&](ll a,ll b){
            return max(a,b);
        },true);

        vector<ll> v;

        for(auto x:nums){
            v.push_back(x);
        }
        
        sg.build(v);

        if(sg.qry(0,n-1)<=0){
            return 0;
        }

        int i=1;
        for(auto q:qr){
            sg.upd(q[0],q[1],-q[2]);
            if(sg.qry(0,n-1)<=0){
                return i;
            }
            i++;
        }
        return -1;
    }
};",1454822863
gjp4_,gjp4_,424,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int n = nums.size();
        auto simulate = [&](int start, int direction) {
            int cur = start;
            vector<int> tmp = nums;
            while(cur < n && cur >= 0) {
                if(tmp[cur] == 0)cur += direction;
                else if(tmp[cur] > 0) {
                    tmp[cur]--;
                    direction *= -1;
                    cur += direction;
                }
            }
            for(int i=0;i<n;i++) {
                if(tmp[i] > 0)return false;
            }
            return true;
        };
        int ans = 0;
        for(int i = 0;i<n;i++) {
            if(nums[i] == 0) {
                ans += simulate(i, 1);
                ans += simulate(i, -1);
            }
        }
        return ans;
    }
};",1454837463
gjp4_,gjp4_,424,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        vector<int> diff(n + 1, 0);
        for(auto q: queries) {
            diff[q[0]]++;
            diff[q[1] + 1]--;
        }
        for(int i=1;i<n+1;i++)diff[i] += diff[i-1];
        for(int i=0;i<n;i++)if(diff[i] < nums[i])return false;
        return true;
    }
};",1454821887
gjp4_,gjp4_,424,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size(), l = 0, r = queries.size(), mid, ans = -1;
        while(l <= r) {
            mid = (l+r)/ 2;
            vector<int> diff(n+1, 0);
            for(int i=0;i<mid;i++) {
                diff[queries[i][0]] += queries[i][2];
                diff[queries[i][1] + 1] -= queries[i][2];
            }
            for(int i=1;i<n+1;i++)diff[i] += diff[i-1];
            bool ok = true;
            for(int i=0;i<n;i++) {
                if(diff[i] < nums[i]) {
                    ok = false;
                    break;
                }
            }
            if(ok) {
                ans = mid;
                r = mid - 1;
            }
            else l = mid + 1;
        }
        return ans;
    }
};",1454821722
tomarin,tomarint,425,3616,rust,"impl Solution {
    pub fn count_valid_selections(nums: Vec<i32>) -> i32 {
        let n = nums.len();
        let mut lsum = vec![0; n+1];
        let mut rsum = vec![0; n+1];
        for i in 0..n {
            lsum[i+1] = lsum[i] + nums[i];
        }
        for i in (0..n).rev() {
            rsum[i] = rsum[i+1] + nums[i];
        }
        let mut ans = 0;
        for i in 0..n {
            if nums[i] == 0 {
                if lsum[i] == rsum[i+1] {
                    ans += 2;
                }
                else if lsum[i] == rsum[i+1] + 1 {
                    ans += 1;
                }
                else if lsum[i] + 1 == rsum[i+1] {
                    ans += 1;
                }
            }
        }
        ans
    }
}",1454808759
tomarin,tomarint,425,3639,rust,"#[derive(Clone)]
struct FenwickTree {
    n: usize,
    data: Vec<i64>,
}
impl FenwickTree {
    fn new(n: usize) -> FenwickTree {
        FenwickTree {
            n: n,
            data: vec![0; n + 1],
        }
    }
    fn add(&mut self, i: usize, x: i64) {
        let mut i = i + 1;
        while i <= self.n {
            self.data[i] += x;
            i += i & i.wrapping_neg();
        }
    }
    fn sum(&self, i: usize) -> i64 {
        let mut i = i + 1;
        let mut s = 0;
        while i > 0 {
            s += self.data[i];
            i -= i & i.wrapping_neg();
        }
        s
    }
}

impl Solution {
    pub fn is_zero_array(nums: Vec<i32>, queries: Vec<Vec<i32>>) -> bool {
        let n = nums.len();
        let mut ft = FenwickTree::new(n+1);
        for q in queries {
            let (l, r) = (q[0] as usize, q[1] as usize);
            ft.add(l, 1);
            ft.add(r + 1, -1);
        }
        for i in 0..n {
            if ft.sum(i) < nums[i] as i64 {
                return false;
            }
        }
        true
    }
}",1454815663
tomarin,tomarint,425,3643,rust,"#[derive(Clone)]
struct FenwickTree {
    n: usize,
    data: Vec<i64>,
}
impl FenwickTree {
    fn new(n: usize) -> FenwickTree {
        FenwickTree {
            n: n,
            data: vec![0; n + 1],
        }
    }
    fn add(&mut self, i: usize, x: i64) {
        let mut i = i + 1;
        while i <= self.n {
            self.data[i] += x;
            i += i & i.wrapping_neg();
        }
    }
    fn sum(&self, i: usize) -> i64 {
        let mut i = i + 1;
        let mut s = 0;
        while i > 0 {
            s += self.data[i];
            i -= i & i.wrapping_neg();
        }
        s
    }
}

impl Solution {
    pub fn min_zero_array(nums: Vec<i32>, queries: Vec<Vec<i32>>) -> i32 {
        let n = nums.len();
        // クエリをk個適用したときに、全部0になっているかどうかを判定する
        fn check(
            nums: &Vec<i32>,
            queries: &Vec<Vec<i32>>,
            k: usize,
        ) -> bool {
            let n = nums.len();
            let mut ft = FenwickTree::new(n+1);
            for q in queries.iter().take(k) {
                let (l, r, val) = (q[0] as usize, q[1] as usize, q[2] as i64);
                ft.add(l, val);
                ft.add(r + 1, -val);
            }
            for i in 0..n {
                if ft.sum(i) < nums[i] as i64 {
                    return false;
                }
            }
            true
        }
        if !check(&nums, &queries, queries.len()) {
            return -1;
        }
        else if check(&nums, &queries, 0) {
            return 0;
        }
        else {
            let mut ng = 0;
            let mut ok = queries.len();
            while ok - ng > 1 {
                let mid = (ok + ng) / 2;
                if check(&nums, &queries, mid) {
                    ok = mid;
                } else {
                    ng = mid;
                }
            }
            return ok as i32;
        }
    }
}",1454830074
Terror_404,Terror_404,428,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int n=nums.size();
      vector<int>pref(n+1,0);
        for(int i=0;i<n;i++) pref[i+1]=nums[i]+pref[i];
        vector<int>suff(n+2,0);
        for(int i=n-1;i>=0;i--) suff[i+1]=nums[i]+suff[i+2];
        int ans=0;
        for(int i=0;i<n;i++){
            if(nums[i]!=0) continue;
            if(abs(pref[i]-suff[i+1])==0)ans+=2;
            if(abs(pref[i]-suff[i+1])==1)ans++;
        }
        return ans;
    }
};",1454810836
Terror_404,Terror_404,428,3639,cpp,"class Solution {
public:
#define ll long long
class BIT {
    public:
    ll len;
    vector<ll> bit;
    BIT(ll k){
        bit.resize(k+1, 0);
        len = k;
    }
    ll sum(int i){
        ll ret = 0;
        for (; i > 0; i -= (i & (-i)))
            ret += bit[i];
            return ret;
    }
    void update(ll i, ll val){
        for (; i <= len; i += (i & (-i)))
            bit[i] += val;
    }
};
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
          int q=queries.size();
        int l=0; int r=q-1;
        int n=nums.size();
        int ans=-1; 
        
        while(l<=r){
            BIT Tr(n+5);
            int mid=(l+r)>>1;
            for(int i=0;i<=mid;i++){
                Tr.update(queries[i][0]+1,1);
                Tr.update(queries[i][1]+2,-1);
            }
            bool ok=true;
            for(int i=0;i<n;i++){
                if(Tr.sum(i+1)<nums[i]) ok=false;
            }
            if(ok){
                ans=mid+1;
                r=mid-1;
            }
            else l=mid+1;
        }
        
        sort(nums.begin(),nums.end());
        if(nums[n-1]==0) return true;
        if(ans==-1) return false;
        return true;
    }
};",1454830298
Terror_404,Terror_404,428,3643,cpp,"class Solution {
public:
#define ll long long
class BIT {
    public:
    ll len;
    vector<ll> bit;
    BIT(ll k){
        bit.resize(k+1, 0);
        len = k;
    }
    ll sum(int i){
        ll ret = 0;
        for (; i > 0; i -= (i & (-i)))
            ret += bit[i];
            return ret;
    }
    void update(ll i, ll val){
        for (; i <= len; i += (i & (-i)))
            bit[i] += val;
    }
};
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int q=queries.size();
        int l=0; int r=q-1;
        int n=nums.size();
        int ans=-1; 
        
        while(l<=r){
            BIT Tr(n+1);
            int mid=(l+r)>>1;
            for(int i=0;i<=mid;i++){
                Tr.update(queries[i][0]+1,queries[i][2]);
                Tr.update(queries[i][1]+2,-queries[i][2]);
            }
            bool ok=true;
            for(int i=0;i<n;i++){
                if(Tr.sum(i+1)<nums[i]) ok=false;
            }
            if(ok){
                ans=mid+1;
                r=mid-1;
            }
            else l=mid+1;
        }
        sort(nums.begin(),nums.end());
        if(nums[n-1]==0) return 0;
        return ans;
    }
};",1454824081
Ashwini D M,4MC22CS019,429,3616,c,"#include <stdbool.h>
#include <string.h>

// Function to check if all elements in nums are zero
bool allZeros(int* nums, int numsSize) {
    for (int i = 0; i < numsSize; i++) {
        if (nums[i] != 0) {
            return false;
        }
    }
    return true;
}

// Function to simulate the process
bool simulate(int* nums, int numsSize, int start, int direction) {
    int numsCopy[numsSize];
    memcpy(numsCopy, nums, numsSize * sizeof(int));
    int curr = start;
    
    while (curr >= 0 && curr < numsSize) {
        if (numsCopy[curr] == 0) {
            curr += direction; // Move in the current direction
        } else {
            numsCopy[curr] -= 1;  // Decrement the current element
            direction = -direction; // Reverse direction
            curr += direction; // Move in the new direction
        }
    }
    
    return allZeros(numsCopy, numsSize);
}

// Main function to count valid selections
int countValidSelections(int* nums, int numsSize) {
    int validCount = 0;
    
    for (int i = 0; i < numsSize; i++) {
        if (nums[i] == 0) {
            // Try both directions
            if (simulate(nums, numsSize, i, -1)) {
                validCount++;
            }
            if (simulate(nums, numsSize, i, 1)) {
                validCount++;
            }
        }
    }
    
    return validCount;
}
",1454824275
Ashwini D M,4MC22CS019,429,3639,c,"#include <stdbool.h>
#include <stdlib.h>
#include <string.h>

// Function to determine if nums can be transformed into a Zero Array
bool isZeroArray(int* nums, int numsSize, int** queries, int queriesSize, int* queriesColSize) {
    // Difference array for applying range updates
    int* diff = (int*)calloc(numsSize + 1, sizeof(int));

    // Process each query to apply range decrements
    for (int i = 0; i < queriesSize; i++) {
        int li = queries[i][0];
        int ri = queries[i][1];
        diff[li]++;
        if (ri + 1 < numsSize) {
            diff[ri + 1]--;
        }
    }

    // Apply the difference array to calculate decrements
    int* decrements = (int*)calloc(numsSize, sizeof(int));
    int currDecrement = 0;
    for (int i = 0; i < numsSize; i++) {
        currDecrement += diff[i];
        decrements[i] = currDecrement;
    }

    // Check if decrements meet or exceed the required values in nums
    for (int i = 0; i < numsSize; i++) {
        if (decrements[i] < nums[i]) {
            free(diff);
            free(decrements);
            return false;
        }
    }

    free(diff);
    free(decrements);
    return true;
}




",1454831118
Ashwini D M,4MC22CS019,429,3643,c,"#include <stdbool.h>
#include <stdlib.h>
#include <string.h>

bool isValid(int* nums, int numsSize, int** queries, int k, int* queriesColSize) {
    int* diff = (int*)calloc(numsSize + 1, sizeof(int)); // Difference array

    // Apply the first k queries
    for (int i = 0; i < k; i++) {
        int li = queries[i][0];
        int ri = queries[i][1];
        int val = queries[i][2];
        diff[li] -= val;
        if (ri + 1 < numsSize) {
            diff[ri + 1] += val;
        }
    }

    // Apply the difference array and validate the nums array
    int currDecrement = 0;
    bool isZero = true;
    for (int i = 0; i < numsSize; i++) {
        currDecrement += diff[i];
        if (nums[i] + currDecrement > 0) {
            isZero = false;
            break;
        }
    }

    free(diff);
    return isZero;
}

int minZeroArray(int* nums, int numsSize, int** queries, int queriesSize, int* queriesColSize) {
    int left = 0, right = queriesSize;
    int result = -1;

    // Binary search to find the minimum k
    while (left <= right) {
        int mid = left + (right - left) / 2;
        if (isValid(nums, numsSize, queries, mid, queriesColSize)) {
            result = mid;
            right = mid - 1; // Try smaller values of k
        } else {
            left = mid + 1; // Increase k
        }
    }

    return result;
}
",1454837770
Shashank Sharma,ShashankZobb,431,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int ans = 0, n = nums.size();
        int temp = 0, temp1 = 0;
        for(int i:nums)temp += i;
        for(int i=0;i<n;i++){
            temp -= nums[i];
            temp1 += nums[i];
            if(nums[i] == 0){
                if(temp == temp1)ans += 2;
                else if(abs(temp-temp1) == 1)ans++;
            }
        }
        return ans;
    }
};",1454807148
Shashank Sharma,ShashankZobb,431,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& qu) {
        int n = nums.size();
        vector<int>arr(n+1, 0);
        for(vector<int> &i:qu){
            arr[i[0]] += 1;
            arr[i[1]+1] -= 1;
        }
        for(int i=1;i<=n;i++)arr[i] += arr[i-1];
        for(int i=0;i<n;i++){
            if(nums[i] > arr[i])return false;
        }
        return true;
    }
};",1454813196
Shashank Sharma,ShashankZobb,431,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& q) {
        int t1 = 0, t2 = q.size()-1;
        int n = nums.size();
        int ans = -1;
        int f = 1;
        for(int i:nums){
            if(i != 0)f = 0;
        }
        if(f == 1)return 0;
        while(t1 <= t2){
            int mid = (t1+t2)/2;
            vector<long>arr(n+1, 0);
            for(int i=0;i<=mid;i++){
                arr[q[i][0]] += q[i][2];
                arr[q[i][1]+1] -= q[i][2];
            }
            for(int i=1;i<=n;i++)arr[i] += arr[i-1];
            int f = 1;
            for(int i=0;i<n;i++){
                // cout << arr[i] << ' ';
                if(nums[i] > arr[i])f = 0;
            }
            // cout << '\n';
            if(f == 1){
                ans = mid+1;
                t2 = mid-1;
            }
            else{
                t1 = mid+1;
            }
        }
        return ans;
    }
};",1454823307
monoidalcat,monoidalcat,432,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        idx = [j for j,i in enumerate(nums) if i == 0]

        res = 0
        prefix = [0]
        for i in nums:
            prefix.append(i+prefix[-1])

        for i in idx:
            if prefix[i+1] == prefix[-1]-prefix[i+1]:
                res+=2
            elif prefix[i+1] == prefix[-1]-prefix[i+1] +1:
                res +=1
            elif prefix[i+1] == prefix[-1]-prefix[i+1] -1:
                res+=1
        return res",1454809440
monoidalcat,monoidalcat,432,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        dp = [0]*len(nums)
        for i in queries:
            
            dp[i[0]] = dp[i[0]]+1
            if i[1]+1<len(dp):
                dp[i[1]+1] = dp[i[1]+1]-1

        prefix = [0]
        for i in dp:
            prefix.append(prefix[-1]+i)
        for j in range(len(nums)):
            if prefix[j+1]< nums[j]:
                return False
        return True",1454817199
monoidalcat,monoidalcat,432,3643,python3,"class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        def isOK(mid):
            dp = [0]*len(nums)
            for i in queries[:mid]:
                for _ in range(i[2]):
                    dp[i[0]] = dp[i[0]]+1
                    if i[1]+1<len(dp):
                        dp[i[1]+1] = dp[i[1]+1]-1
            prefix = [0]
            for i in dp:
                prefix.append(prefix[-1]+i)
            for j in range(len(nums)):
                if prefix[j+1]< nums[j]:
                    return False
            return True

        l = 0
        r = len(queries)

        if not isOK(r):
            return -1

        while l<r-1:
            mid = (l+r)//2
            if isOK(mid):
                r = mid
            else:
                l = mid

        if isOK(l):
            return l
        return r",1454823314
mustafiz05,mustafiz05,433,3616,cpp,"typedef int ll;
class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        
        
        ll total  = 0;
        for(ll i = 0; i < nums.size(); i++) {
            
            if(nums[i] != 0) continue;
            
            
            vector<int> newOne;
            for(ll j = 0; j < nums.size(); j++) newOne.push_back(nums[j]);
            ll currentDir = 0; // left
            ll pos = i - 1;
            while(pos >= 0 && pos < nums.size()) {
                if(newOne[pos] == 0 && currentDir == 0) {
                    pos--;
                }
                else if(newOne[pos] == 0 && currentDir == 1) {
                    pos++;
                }
                else if(currentDir == 0) {
                    newOne[pos]--;
                    pos++;
                    currentDir = 1;
                }
                else {
                    newOne[pos]--;
                    pos--;
                    currentDir = 0;
                }  
            }
            
            ll isIt = 0;
            for(ll j = 0; j < nums.size(); j++) if(newOne[j] >= 1) isIt = 1;
            
            if(isIt == 0) total++;
            
            
            
            for(ll j = 0; j < nums.size(); j++) newOne[j] = (nums[j]);
             currentDir = 1; // left
             pos = i + 1;
            while(pos >= 0 && pos < nums.size()) {
                if(newOne[pos] == 0 && currentDir == 0) {
                    pos--;
                }
                else if(newOne[pos] == 0 && currentDir == 1) {
                    pos++;
                }
                else if(currentDir == 0) {
                    newOne[pos]--;
                    pos++;
                    currentDir = 1;
                }
                else {
                    newOne[pos]--;
                    pos--;
                    currentDir = 0;
                }  
            }
            
             isIt = 0;
            for(ll j = 0; j < nums.size(); j++) if(newOne[j] >= 1) isIt = 1;
            
            if(isIt == 0) total++;
            
            
            
            
            
            
            
        }
        
        return total;
        
    }
};",1454816695
mustafiz05,mustafiz05,433,3639,cpp,"typedef int ll;
ll Csum[100009];
class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        
        for(ll i = 0; i < queries.size(); i++) {
            ll last = queries[i][1];
            ll fast = queries[i][0];
            Csum[last]+=1;
            if(fast > 0) Csum[fast - 1]-=1;
        }
        
        ll currentSum =  0;
        bool isPossible = true;
        for(ll i = nums.size() - 1; i >= 0; i--) {
            currentSum+=Csum[i];
            Csum[i] = 0;
            if(nums[i] > currentSum) isPossible = false;
        }
        
        
        return isPossible;
        
        
        
        
        
        
        
    }
};",1454827611
mustafiz05,mustafiz05,433,3643,cpp,"typedef int ll;
ll Csum[100009];
class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        
        
        ll lo = 0, hi = queries.size(), anss = queries.size() + 3;
        
        while(lo <= hi) {
            ll mid = (lo + hi)/2;
            
               for(ll i = 0; i < mid; i++) {
            ll last = queries[i][1];
            ll fast = queries[i][0];
            ll value =  queries[i][2]; 
            Csum[last]+=value;
            if(fast > 0) Csum[fast - 1]-=value;
        }
        
        ll currentSum =  0;
        bool isPossible = true;
        for(ll i = nums.size() - 1; i >= 0; i--) {
            currentSum+=Csum[i];
            Csum[i] = 0;
            if(nums[i] > currentSum) isPossible = false;
        }
            
            
            if(isPossible) hi = mid - 1, anss = min(anss, mid);
            else lo = mid + 1;
            
        }
        
        
        if(anss <= queries.size()) return anss;
        else return -1;
        
        
        
        
        
        
        
        
        
    }
};",1454837916
liyangzi6p626,liyangzi6p626,434,3616,java,"class Solution {
    void print(int[] a) {
        for (int x : a)
            System.out.printf("" %d"", x);
        System.out.println();
    }
    public int countValidSelections(int[] nums) {
        int n = nums.length, ans = 0;
        for (int i = 0; i < n; i++) {
            if (nums[i] != 0)
                continue;
            for (int j = -1; j <= 1; j += 2) {
                int[] a = new int[n];
                for (int k = 0; k < n; k++)
                    a[k] = nums[k];
                int p = i, d = j, c0 = 0;
                for (int x : a)
                    if (x == 0)
                        c0++;
                while (p >= 0 && p < n && c0 < n) {
                    if (a[p] > 0) {
                        a[p]--;
                        if (a[p] == 0)
                            c0++;
                        d = -d;
                    }
                    p += d;
                    //System.out.printf(""p = %d, d = %d, c0 = %d\n"", p, d, c0);
                    //print(a);
                }
                if (c0 == n)
                    ans++;
            }
        }
        return ans;
    }
}",1454818039
liyangzi6p626,liyangzi6p626,434,3639,java,"class Solution {
    public boolean isZeroArray(int[] nums, int[][] qs) {
        PriorityQueue<int[]> pq = new PriorityQueue<>((x, y) -> Integer.compare(x[0], y[0]));
        for (int[] q : qs) {
            int l = q[0], r = q[1];
            pq.add(new int[]{l, 1});
            pq.add(new int[]{r + 1, -1});
        }
        int b = 0;
        for (int i = 0; i < nums.length; i++) {
            while (!pq.isEmpty() && pq.peek()[0] <= i)
                b += pq.poll()[1];
            if (b < nums[i])
                return false;
        }
        return true;
    }
}",1454827132
liyangzi6p626,liyangzi6p626,434,3643,java,"class Solution {
    class STNode {
        long from, mid, to;
        STNode left, right;
        long maxVal;
        //parent marks have higher priority than children marks
        boolean setFlag;
        long setVal, incVal;
        STNode(long from, long to) {
            this.from = from;
            this.to = to;
            mid = from + (to - from) / 2;
            left = null;
            right = null;
            maxVal = 0;
            setFlag = false;
        }
        //for each modifying operation, it should be guarded by a pair of push and merge
        //push to clear the marks for the current node
        void push() {
            if (from == to) {
                if (setFlag) {
                    maxVal = setVal;
                    setFlag = false;
                }
                if (incVal != 0) {
                    maxVal += incVal;
                    incVal = 0;
                }
            } else {
                if (left == null)
                    left = new STNode(from, mid);
                if (right == null)
                    right = new STNode(mid + 1, to);
                if (setFlag) {
                    left.setFlag = true;
                    left.setVal = setVal;
                    left.incVal = 0;
                    right.setFlag = true;
                    right.setVal = setVal;
                    right.incVal = 0;
                    setFlag = false;
                }
                if (incVal != 0) {
                    left.incVal += incVal;
                    right.incVal += incVal;
                    incVal = 0;
                }
            }
        }
        //merge to keep data up-to-date
        void merge() {
            if (from < to) {
                long leftMax = (left.setFlag ? left.setVal : left.maxVal) + left.incVal;
                long rightMax = (right.setFlag ? right.setVal : right.maxVal) + right.incVal;
                maxVal = Math.max(leftMax, rightMax);
            }
        }
        void set(long p, long q, long val) {
            push();
            if (from == p && to == q) {
                setFlag = true;
                setVal = val;
                incVal = 0;
            } else {
                if (q <= mid)
                    left.set(p, q, val);
                else if (p > mid)
                    right.set(p, q, val);
                else {
                    left.set(p, mid, val);
                    right.set(mid + 1, q, val);
                }
            }
            merge();
        }
        void inc(long p, long q, long val) {
            push();
            if (from == p && to == q)
                incVal += val;
            else {
                if (q <= mid)
                    left.inc(p, q, val);
                else if (p > mid)
                    right.inc(p, q, val);
                else {
                    left.inc(p, mid, val);
                    right.inc(mid + 1, q, val);
                }
            }
            merge();
        }
        long max(long p, long q) {
            push();
            merge();
            if (from == p && to == q)
                return maxVal;
            else if (q <= mid)
                return left.max(p, q);
            else if (p > mid)
                return right.max(p, q);
            else
                return Math.max(left.max(p, mid), right.max(mid + 1, q));
        }
    }
    public int minZeroArray(int[] nums, int[][] qs) {
        int n = nums.length;
        STNode root = new STNode(0, n - 1);
        for (int i = 0; i < n; i++)
            root.set(i, i, nums[i]);
        if (root.max(0, n - 1) == 0)
            return 0;
        for (int i = 0; i < qs.length; i++) {
            root.inc(qs[i][0], qs[i][1], -qs[i][2]);
            if (root.max(0, n - 1) <= 0)
                return i + 1;
        }
        return -1;
    }
}",1454837978
wswatch,wswatch,435,3616,java,"class Solution {
    public int countValidSelections(int[] nums) {
        int res = 0;
        for(int i = 0; i < nums.length; ++i) {
            if (isValid(i, 1, nums)) {
                ++res;
            } 
            if (isValid(i, -1, nums)) {
                ++res;
            }
        }
        return res;
    }

    private boolean isValid(int st, int dir, int[] nums) {
        int[] road = nums.clone();
        if (road[st] != 0) {
            return false;
        } else {
            int cur = st;
            while(cur > -1 && cur < nums.length) {
                if (road[cur] > 0) {
                    road[cur] -= 1;
                    dir = -dir;
                }
                cur = cur + dir;
            }
            for(int i = 0; i < road.length; ++i) {
                if (road[i] > 0) {
                    return false;
                }
            }
            return true;
        }
    }
}",1454816012
wswatch,wswatch,435,3639,java,"class Solution {
    public boolean isZeroArray(int[] nums, int[][] queries) {
        int len = nums.length;
        int[] increase = new int[len];
        int[] decrease = new int[len];
        for(int[] query: queries) {
            increase[query[0]] += 1;
            decrease[query[1]] += 1;
        }
        int curMax = 0;
        for(int i = 0; i < nums.length; ++i) {
            curMax += increase[i];
            if (curMax < nums[i]) {
                return false;
            }
            curMax -= decrease[i];
        }
        return true;
    }
}",1454827993
wswatch,wswatch,435,3643,java,"class Solution {
    public int minZeroArray(int[] nums, int[][] queries) {
        int l = 0;
        int r = queries.length;
        int res = -1;
        while(l <= r) {
            int mid = (l + r) / 2;
            if (isZeroArray(nums, queries, mid)) {
                res = mid;
                r = mid - 1;
            } else {
                l = mid + 1;
            }
        }
        return res;
    }

    public boolean isZeroArray(int[] nums, int[][] queries, int n) {
        int len = nums.length;
        int[] increase = new int[len];
        int[] decrease = new int[len];
        for(int i = 0; i < n; ++i) {
            int[] query = queries[i];
            increase[query[0]] += query[2];
            decrease[query[1]] += query[2];
        }
        int curMax = 0;
        for(int i = 0; i < nums.length; ++i) {
            curMax += increase[i];
            if (curMax < nums[i]) {
                return false;
            }
            curMax -= decrease[i];
        }
        return true;
    }
}",1454838050
0xessam,0xessam,436,3616,cpp,"class Solution {
public:
    bool f (vector<int>a , int idx , int dir) {
        while(idx >= 0 && idx < a.size()) {
            if (a[idx] > 0) {
                a[idx]-- ; 
                dir*=-1;  
            }
            idx += dir ; 
        }
        return count(a.begin() , a.end() , 0) == a.size() ; 
    } 
    int countValidSelections(vector<int>& nums) {
        int ret = 0 ; 
        for(int i = 0 ; i < nums.size() ; ++i) {
            if (nums[i] == 0) {
                ret += f(nums , i + 1 , 1) ; 
                ret += f(nums , i - 1 , -1) ; 
            }
        }
        return ret;  
    }
};",1454809878
0xessam,0xessam,436,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size() ;
        int m = queries.size() ;
        vector<int> pref(n + 5) ;
        for(auto i : queries) {
            pref[i[0]] ++  ;
            pref[i[1] + 1] --;
        }
        for (int i = 1; i < n ; ++i) {
            pref[i] += pref[i - 1] ;
        }
        for(int i = 0 ; i < n ; ++i) {
            if (pref[i] < nums[i]) {
                return false ;
            }
        }
        return true ;
    }
};",1454816185
0xessam,0xessam,436,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size() ;
        int m = queries.size() ;
        vector<int> pref(n + 5) ;

        int l = 0 , r = m ;
        while (l <= r) {
            int mid = (l + r) / 2 ;
            bool ok = 1 ;
            pref.assign(n + 5, 0) ;
            for (int i = 0 ; i < mid ; ++i) {
                pref[queries[i][0]] += queries[i][2] ;
                pref[queries[i][1] + 1] -= queries[i][2] ;
            }
            for (int i = 0 ; i < n ; ++i) {
                if (i)
                pref[i] += pref[i - 1] ;
                if (pref[i] < nums[i]) {
                    ok = 0 ;
                    break ;
                }
            }
            if (ok) {
                r = mid - 1 ;
            }
            else {
                l = mid + 1 ;
            }
        }
        pref.assign(n + 5, 0) ;
        for (int i = 0 ; i < m ; ++i) {
            pref[queries[i][0]] += queries[i][2] ;
            pref[queries[i][1] + 1] -= queries[i][2] ;
        }
        for (int i = 0 ; i < n ; ++i) {
            if (i)
            pref[i] += pref[i - 1] ;
            if (pref[i] < nums[i]) {
                return -1 ;
            }
        }

        return l ;
    }
};",1454838118
Ashua,Night_shade_ii,437,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        n = len(nums)
        
        def check_validness(arr, idx, reverse):
            # print('start:',arr,idx)
            arr = copy.copy(arr)
            flag = True
            if reverse:
                arr = arr[::-1]
                idx = n - 1 - idx
            step = 1
            while 0<=idx<n:
                # print('step',arr,idx,arr[idx])
                if arr[idx] == 0:
                    idx += step
                else:
                    arr[idx] -= 1
                    step *= -1
                    idx += step
            return sum(arr) ==0
        
        cnt = 0
        for i in range(n):
            if(nums[i]!=0):
                continue
            if check_validness(nums,i,True):
                cnt += 1
            if check_validness(nums,i,False):
                cnt += 1
        return cnt
                
            
    
        ",1454812360
Ashua,Night_shade_ii,437,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        n = len(nums)
        
        def check_validness(k):
            
            diffArr = [0] * (n+1)
            for (l,r) in queries[:k]:
                diffArr[r+1] -= 1
                diffArr[l] += 1
            curSum = 0
            # print(k,diffArr)
            for i in range(n):
                curSum += diffArr[i]
                if curSum < nums[i]:
                    return False
            return True
        
        l = 0
        r = len(queries)
        return check_validness(r)
            ",1454830795
Ashua,Night_shade_ii,437,3643,python3,"# let us say if we fix k
# can we validate in O(n) time?
# 差分数组?
# b[i] = ai - a{i-1} (n>0) and a0 (n=0)
class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        n = len(nums)
        
        def check_validness(k):
            
            diffArr = [0] * (n+1)
            for (l,r,val) in queries[:k]:
                diffArr[r+1] -= val
                diffArr[l] += val
            curSum = 0
            # print(k,diffArr)
            for i in range(n):
                curSum += diffArr[i]
                if curSum < nums[i]:
                    return False
            return True
        
        l = 0
        r = len(queries)
        if not check_validness(r):
            return -1
        while l < r:
            mid = (l+r)//2
            if check_validness(mid):
                r = mid
            else:
                l = mid + 1
        return l
            
            
        ",1454829012
contest_taker_2134,contest_taker_2134,438,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int ans = 0;
        int n = nums.size();
        for (int i = 0; i < n; ++i) {
            if (nums[i] == 0 && simulate(nums, i, 1)) ++ans; 
            if (nums[i] == 0 && simulate(nums, i, -1)) ++ans; 
        }
        return ans;
    }

    bool simulate(vector<int> nums, int i, int dir) {
        int n = nums.size();
        while (i >= 0 && i < n) {
            if (nums[i] == 0) i += dir;
            else {
                --nums[i];
                dir = -dir;
                i += dir;
            }
        }
        for (int j : nums) if (j != 0) return false;
        return true;
    }
};",1454809560
contest_taker_2134,contest_taker_2134,438,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        vector<int> v(n+1, 0);
        for (auto& q : queries) {
            --v[q[0]];
            if (q[1] + 1 < n) ++v[q[1] + 1]; // in case i mess up lol
        }
        int cur = 0;
        for (int i = 0; i < n; ++i) {
            cur += v[i];
            if (nums[i] + cur > 0) return false;
        }
        return true;
    }
};",1454817874
contest_taker_2134,contest_taker_2134,438,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        int q = queries.size();
        vector<int> v(n + 1, 0);

        int left = 0;
        int right = q;
        int mid;
        int ans = INT_MAX;
        while (left <= right) {
            mid = left + (right - left) / 2;
            if (helper(mid, nums, queries, v)) {
                ans = min(ans, mid);
                right = mid - 1;
            } else left = mid + 1;
        }
        return ans == INT_MAX ? -1 : ans;
    }

    bool helper(int mid, vector<int>& nums, vector<vector<int>>& queries, vector<int>& v) {
        fill(v.begin(), v.end(), 0); // reset
        int n = nums.size();
        for (int i = 0; i < mid; ++i) {
            v[queries[i][0]] -= queries[i][2];
            if (queries[i][1] + 1 < n) v[queries[i][1] + 1] += queries[i][2];
        }
        int cur = 0;
        for (int i = 0; i < n; ++i) {
            cur += v[i];
            if (nums[i] + cur > 0) return false;
        }
        return true;
    }
};",1454838250
James Jialun Zhao,frixxxer,441,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        choices = 0
        ct_0 = nums.count(0)

        def simulate(arr, i, dir, ct_z):
            start = i
            
            while i >= 0 and i < len(arr):
                if arr[i] == 0:
                    i += dir
                elif arr[i] > 0:
                    arr[i] -= 1
                    if arr[i] == 0:
                        ct_z += 1
                    dir *= -1
                    i += dir
                else:
                    return False
            return ct_z == len(arr)
                
        for start in range(len(nums)):
            if nums[start] != 0:
                continue
            sim_1 = simulate(nums.copy(), start, 1, ct_0)
            sim_n1 = simulate(nums.copy(), start, -1, ct_0)
            choices += sim_1 + sim_n1
        return choices",1454814038
James Jialun Zhao,frixxxer,441,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        prefix = [0] * (len(nums) + 1)
        # [0 0 0 0]
        for a, b in queries:
            prefix[b + 1] += 1
            prefix[a] -= 1

        v = 0
        for i in range(len(nums)):
            v += prefix[-i-1]
            if v < nums[-i-1]:
                return False
        return True",1454825915
James Jialun Zhao,frixxxer,441,3643,python3,"class Solution:
    def solve(self, nums, queries, k):
        prefix = [0] * (len(nums) + 1)
        # [0 0 0 0]
        for a, b, v in queries[:k]:
            prefix[b + 1] += v
            prefix[a] -= v
        v = 0
        for i in range(len(nums)):
            v += prefix[-i-1]
            if v < nums[-i-1]:
                return False
        return True
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        lo, hi = 0, len(queries) + 1
        while lo < hi:
            mid = (lo + hi) // 2
            sol = self.solve(nums, queries, mid)
            if not sol:
                lo = mid + 1
            else:
                hi = mid
        return lo if lo <= len(queries) else -1",1454838325
boxlesscat,boxlesscat,444,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        const int size = nums.size();
        int ans = 0;
        vector<int> pfx(size + 1);
        vector<int> sfx(size + 1);
        for (int i = 0; i < size; ++i)
            pfx[i + 1] = pfx[i] + nums[i];
        for (int i = size - 1; i >= 0; --i)
            sfx[i] = sfx[i + 1] + nums[i];
        for (int i = 0; i < size; ++i)
            if (!nums[i] and abs(pfx[i] - sfx[i + 1]) == 1)
                ++ans;
            else if (!nums[i] and pfx[i] == sfx[i + 1])
                ans += 2;
        return ans;
    }
};",1454812191
boxlesscat,boxlesscat,444,3639,cpp,"using ll = long long;

class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        const int size = nums.size();
        vector<ll> sums(size + 1);
        for (auto& q: queries) {
            int l = q[0];
            int r = q[1];
            --sums[l];
            ++sums[r + 1];
        }
        for (int i = 1; i < size; ++i)
            sums[i] += sums[i - 1];
        for (int i = 0; i < size; ++i)
            if (sums[i] + nums[i] > 0)
                return false;
        return true;
    }
};",1454818137
boxlesscat,boxlesscat,444,3643,cpp,"using ll = long long;

class Solution {

    vector<vector<int>> queries;
    vector<int> nums;

    bool can(int k) {
        const int size = nums.size();
        vector<ll> sums(size + 1);
        for (int i = 0; i < k; ++i) {
            int l = queries[i][0];
            int r = queries[i][1];
            int val = queries[i][2];
            sums[l] -= val;
            sums[r + 1] += val;
        }
        for (int i = 1; i < size; ++i)
            sums[i] += sums[i - 1];
        for (int i = 0; i < size; ++i)
            if (sums[i] + nums[i] > 0)
                return false;
        return true;
    }

public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        const int q = queries.size();
        ll lo = 0;
        ll hi = q + 1;
        Solution::queries = move(queries);
        Solution::nums = move(nums);
        while (lo < hi) {
            ll md = lo + hi >> 1;
            if (can(md))
                hi = md;
            else
                lo = md + 1;
        }
        if (lo == q + 1)
            return -1;
        return lo;
    }
};",1454830956
CyberPunk,U_U,447,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {

      //  cout << Move(1, -1, nums) << endl;
      //  cout << Move(1, 1, nums) << endl;
       // return 0;
        
        int res = 0;
        for (int i = 0; i < nums.size(); ++i)
            {
                if (nums[i] == 0)
                {
                    vector<int> temp = nums;
                    if (Move(i, 1, temp))
                    {
                       // cout << i << "","" << i << endl;
                        ++res;
                    }
                    if (Move(i, -1, temp))
                    {
                        ++res;
                       // cout << i << "","" << -1 << endl;
                    }
                }
            }

        return res;
    }

    bool Move(int cur, int d, vector<int> temp)
    {
        int nonZero = 0;
        for(auto& item : temp)
            if (item > 0) nonZero++;
        
        for (; cur >= 0 && cur < temp.size(); )
            {
                if (temp[cur] == 0)
                {
                    cur += d;
                }
                else if (temp[cur] > 0)
                {
                    --temp[cur];
                    if (temp[cur] == 0) --nonZero;
                    if (d == 1) d = -1;
                            else d = 1;
                    cur += d;
                }
            }

        return nonZero == 0;
    }
};",1454813909
CyberPunk,U_U,447,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        vector<int> vec(n, 0);
        vec.push_back(0);

        for (auto& q : queries)
            {
                vec[q[0]] += 1;
                vec[q[1] + 1] -= 1;
            }

        int sum = 0;
        for (int i = 0; i < n; ++i)
            {
                sum += vec[i];
                //cout << i << "","" << sum << endl;
                if (sum < nums[i]) return false;
            }

        return true;
    }
};",1454818202
CyberPunk,U_U,447,3643,cpp,"class Solution {
public:
    int n, m;;
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        n = nums.size();
        m = queries.size();

        int lo = 0;
        int hi = m;
        vector<int> vec(n + 1, 0);
        while (lo < hi)
        {
            int mid = lo + (hi - lo) / 2;

           bool flag = Verify(vec, queries, nums, mid);
            //cout << mid << "","" << flag << endl;

            if (flag) hi = mid;
            else lo = mid + 1;
        }

        if (Verify(vec, queries, nums, lo)) return lo;
        return -1;
    }

    bool Verify(vector<int>& vec, vector< vector<int> > & queries, vector<int>& nums, int k)
    {
         vec.assign(n + 1, 0);
        for (int i = 0; i < k; ++i)            
            {
                vector<int>& q = queries[i];
                vec[q[0]] += q[2];
                vec[q[1] + 1] -= q[2];            
            }
            
            int sum = 0;
            for (int i = 0; i < n; ++i)
            {
                sum += vec[i];   
//                cout << k << "","" << i << "","" << sum << ""|"" << vec[i] << "","" << nums[i] << endl;
                if (sum < nums[i]) 
                {
                    return false;
                }
            }

        return true;
    }
};",1454831004
Pankaj Ghodla,PankajGhodla,448,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        total = sum(nums)
        ans = 0
        prefix = 0
        for i, num in enumerate(nums):
            prefix += num
            if num == 0:
                if total - prefix == prefix: ans += 2
                if total - prefix in [prefix+1, prefix-1]: ans += 1
                
        return ans",1454810987
Pankaj Ghodla,PankajGhodla,448,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        n = len(nums)
        arr = [0]*(n+1)
        for l, r in queries:
            arr[l] += 1
            arr[r+1] -= 1
        prev = 0
        for i in range(len(nums)):
            prev += arr[i]
            if prev < nums[i]:
                return False
        return True
            
        ",1454816663
Pankaj Ghodla,PankajGhodla,448,3643,python3,"class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        def canAchieve(m):
            n = len(nums)
            arr = [0]*(n+1)
            for i in range(m):
                l, r, val = queries[i]
                arr[l] += val
                arr[r+1] -= val
            prev = 0
            for i in range(len(nums)):
                prev += arr[i]
                if prev < nums[i]:
                    return False
            return True
        if not canAchieve(len(queries)): return -1
        if sum(nums) == 0: return 0
        l = 1
        r = len(queries)
        while l < r:
            m = (l+r)//2
            if canAchieve(m):
                r = m
            else:
                l = m+1
        return l",1454823839
D V Sushmanth Reddy,user2937Vz,450,3616,python3,"class Solution:
    def countValidSelections(self, a: List[int]) -> int:
        
        n = len(a)
        total , s , ans = sum(a) , 0 , 0
        for x in a:
            s += x
            if(x == 0):
                if(s == (total - s)):
                    ans += 2
                elif(abs(s - (total - s)) == 1):
                    ans += 1
        
        return ans
        ",1454808565
D V Sushmanth Reddy,user2937Vz,450,3639,python3,"class Solution:
    def isZeroArray(self, a: List[int], queries: List[List[int]]) -> bool:
        
        n = len(a)
        diff = [0 for i in range(n + 1)]
        for [l , r] in queries:
            diff[r + 1] -= 1
            diff[l] += 1
        
        for i in range(1 , n + 1):
            diff[i] += diff[i - 1]
        
        for i in range(n):
            if(diff[i] < a[i]):
                return False
        
        return True
        ",1454816223
D V Sushmanth Reddy,user2937Vz,450,3643,python3,"class Solution:
    def minZeroArray(self, a: List[int], queries: List[List[int]]) -> int:
        
        n = len(a)
        def check(x):
            
            diff = [0 for i in range(n + 1)]
            for i in range(x):
                l , r , val = queries[i]
                diff[l] += val
                diff[r + 1] -= val
            
            for i in range(1 , n + 1):
                diff[i] += diff[i - 1]
            
            for i in range(n):
                if(diff[i] < a[i]):
                    return False
            
            return True
        
        
        ans = -1
        l , h = 0 , len(queries)
        while(l <= h):
            mid = (l + h) // 2
            if(check(mid)):
                ans = mid
                h = mid - 1
            else:
                l = mid + 1
        
        
        return ans
        ",1454823848
SoulAdor,SoulAdor,451,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int sum = accumulate(nums.begin(), nums.end(), 0);
        int result = 0, left_sum = 0, right_sum;
        for(int n : nums) {
            if(n == 0) {
                right_sum = sum - left_sum;
                if(left_sum == right_sum) result += 2;
                else if(abs(left_sum - right_sum) == 1) result++;
            }
            left_sum += n;
        }
        return result;
    }
};",1454810394
SoulAdor,SoulAdor,451,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        vector<int> diff(nums.size() + 1);
        for(auto q: queries) diff[q[0]]++, diff[q[1]+1]--;
        for(int i = 1; i < diff.size(); i++) diff[i] += diff[i-1];
        
        for(int i = 0; i < nums.size(); i++) if(nums[i] > diff[i]) return false;
        return true;
    }
};",1454817270
SoulAdor,SoulAdor,451,3643,cpp,"class Solution {
    bool canZero(vector<int>& nums, vector<vector<int>>& queries, int taken) {
        vector<int> diff(nums.size() + 1);
        for(int i = 0; i < taken; i++) {
            int l = queries[i][0];
            int r = queries[i][1];
            int val = queries[i][2];
            diff[l]+=val;
            diff[r+1]-=val;
        }
        for(int i = 1; i < diff.size(); i++) diff[i] += diff[i-1];

        for(int i = 0; i < nums.size(); i++) if(nums[i] > diff[i]) return false;
        return true;
    }

public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int l = 0, r = queries.size(), m;
        while(l < r) {
            m = (l + r) / 2;
            if(canZero(nums, queries, m)) r = m;
            else l = m + 1;
        }
        if(canZero(nums, queries, l)) return l;
        return -1;
    }
};",1454831028
Ayush Gupta,ayush_gupta4,452,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int n = nums.size(), validSelections = 0;

        auto simulate = [&](int start, int direction) {
            vector<int> temp = nums;
            int curr = start;

            while (curr >= 0 && curr < n) {
                if (temp[curr] == 0) {
                    curr += direction;
                } else {
                    temp[curr]--;
                    direction = -direction;
                    curr += direction;
                }
            }
            return all_of(temp.begin(), temp.end(), [](int x) { return x == 0; });
        };

        for (int i = 0; i < n; ++i) {
            if (nums[i] == 0) {
                if (simulate(i, -1)) validSelections++;
                if (simulate(i, 1)) validSelections++;
            }
        }

        return validSelections;
    }
};
",1454808418
Ayush Gupta,ayush_gupta4,452,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& a, vector<vector<int>>& q) {
        int i, n=a.size();
        vector<int> dp(n+1, 0);
        for(auto x: q) {
            int lo=x[0], hi=x[1];
            dp[lo]++; dp[hi+1]--;
        }
        for(i=1;i<=n;i++) dp[i]+=dp[i-1];
        for(i=0;i<n;i++) {
            if(dp[i]<a[i]) return 0;
        }
        return 1;
    }
};",1454820575
Ayush Gupta,ayush_gupta4,452,3643,cpp,"class Solution {
public:
    // Helper function to check if the first `mid` queries can make `a` a Zero Array
    bool f(vector<int>& a, vector<vector<int>>& q, int mid) {
        int n = a.size();
        vector<int> dp(n + 1, 0); // Difference array to simulate range decrement operations
        
        // Apply the first `mid` queries
        for (int i = 0; i < mid; i++) {
            int lo = q[i][0], hi = q[i][1], val = q[i][2];
            dp[lo] += val;       // Add `val` at the start index
            if (hi + 1 < n) {
                dp[hi + 1] -= val; // Subtract `val` at the end+1 index
            }
        }

        // Propagate the effect of the difference array
        for (int i = 1; i < n; i++) {
            dp[i] += dp[i - 1];
        }

        // Check if `dp` satisfies the condition for making the array zero
        for (int i = 0; i < n; i++) {
            if (dp[i] < a[i]) return false; // Not enough decrements possible
        }
        return true;
    }

    // Main function to find the minimum `k`
    int minZeroArray(vector<int>& a, vector<vector<int>>& q) {
        int n = q.size(), lo = 0, hi = n, mid, ans = -1;

        while (lo <= hi) {
            mid = lo + (hi - lo) / 2;

            if (f(a, q, mid)) {
                ans = mid;  // Update the answer to the current valid `mid`
                hi = mid - 1; // Try for a smaller `k`
            } else {
                lo = mid + 1; // Try for a larger `k`
            }
        }

        return ans;
    }
};
",1454838548
5saken,5saken,453,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int res = 0,n=nums.size();
        vector<int> pre(n);
        pre[0] = nums[0];
        for(int i=1;i<n;i++) pre[i] = pre[i-1]+nums[i];
        for(int i=0;i<n;i++){
            // cout << pre[i] << "" "";
            if(nums[i]!=0) continue;
            int l=0,r=0;
            l = pre[i];
            r = pre[n-1] - pre[i];
            // cout << i<<""->""<<l << "" "" << r << endl;
            if(l==r) res += 2;
            if(abs(r-l)==1) res++;
        }
        return res;
    }
};",1454814885
5saken,5saken,453,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        vector<int> v(n);
        for(auto q: queries){
            int l=q[0], r = q[1];
            v[l]++;
            if(r+1<n) v[r+1]--;
        }
        for(int i=1;i<n;i++) v[i] += v[i-1];
        for(int i=0;i<n;i++) {
            // cout << v[i] << "" "";
            if(v[i] >= nums[i]) continue;
            return false;
        }
        return true;
    }
};",1454823396
5saken,5saken,453,3643,cpp,"class Solution {
public:
    
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        vector<int> v = nums;

        auto can = [&](int k){
            int n = nums.size();
            vector<int> diff(n + 1, 0);
            
            for (int i = 0; i < k; ++i) {
                int l = queries[i][0], r = queries[i][1], val = queries[i][2];
                diff[l] += val;
                if (r+1<n) diff[r + 1] -= val;
            }
            
            int total = 0;
            for (int i = 0; i < n; ++i) {
                total += diff[i];
                if (total < nums[i]) return false; 
            }
            return true;
        };
        
        bool f = true;
        for(int x : nums) {
            if (x != 0) {
                f = false;
                break;
            }
        }
        if(f) return 0;
        
        int l = 0, r = queries.size(), res = -1;
        bool flag = false;

        while (l <= r) {
            int mid = l + (r-l)/2;

            if (can(mid)) {
                res = mid;
                r = mid - 1;
            } else l = mid + 1;

            if (!flag && mid == queries.size() / 2) {
                vector<int> diff(n + 1, 0);
                for (int i = 0; i < mid; ++i) {
                    int l = queries[i][0], r = queries[i][1], val = queries[i][2];
                    diff[l] += val;
                    if (r+1<n) diff[r+1] -= val;
                }

                v = nums;
                int total = 0;
                for (int i = 0; i < n; i++) {
                    total += diff[i];
                    v[i] = max(0, nums[i] - total);
                }
                flag = true;
            }
        }

        if(res==-1) return -1;
        return res;
    }
};",1454838565
Ajay Singh Deopa,singh_deopa,454,3616,cpp,"class Solution {
    bool can(vector<int> arr, int& n, int pos, int dir) {
        // cout << pos << endl;

        while (pos >= 0 && pos < n) {
            if (arr[pos] != 0) {
                arr[pos]--;
                dir *= -1;
            }

            pos += dir;
        }

        for (int& i: arr) {
            if (i > 0) {
                return false;
            }
        }

        return true;
    }
public:
    int countValidSelections(vector<int>& nums) {
        int n = (int) nums.size();
        int res = 0;

        for (int i = 0; i < n; i++) {
            if (nums[i] != 0) continue;
            
            if (can(nums, n, i, -1)) {
                res++;
            }

            if (can(nums, n, i, 1)) {
                res++;
            }
        }

        return res;
    }
};",1454813203
Ajay Singh Deopa,singh_deopa,454,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = (int) nums.size();
        vector<int> cnt(n + 1);

        for (auto& query: queries) {
            int l = query[0];
            int r = query[1];

            cnt[l]++;
            cnt[r + 1]--;
        }

        for (int i = 0; i < n; i++) {
            if (i != 0) {
                cnt[i] += cnt[i - 1];
            }

            if (cnt[i] < nums[i]) {
                return false;
            }
        }

        return true;
    }
};",1454817379
Ajay Singh Deopa,singh_deopa,454,3643,cpp,"struct STree{
    vector<int> st, lazy;

    STree(int& n) {
        int sz = ceil(log2(1.0 * n));
        sz = 1 << (sz + 1);
        st = lazy = vector<int>(sz);
    }

    int mid(int& l, int& r) {
        return l + ((r - l) >> 1);
    }

    int lchild(int& i) {
        return i << 1 | 1;
    }

    void build(vector<int>& arr, int tl, int tr, int i) {
        if (tl == tr) {
            st[i] = arr[tl];
            return;
        }

        int mi = mid(tl, tr);
        int l = lchild(i);
        build(arr, tl, mi, l);
        build(arr, mi + 1, tr, l + 1);
        st[i] = max(st[l], st[l + 1]);
    }

    void lazy_prop(int& i, int& tl, int& tr) {
        if (lazy[i] == 0) {
            return;
        }

        st[i] -= lazy[i];

        if (tl != tr) {
            int l = lchild(i);
            lazy[l] += lazy[i];
            lazy[l + 1] += lazy[i];
        }

        lazy[i] = 0;
    }

    void update(int tl, int tr, int i, int ql, int qr, int val) {
        lazy_prop(i, tl, tr);

        if (ql > qr) {
            return;
        }

        if (ql <= tl && tr <= qr) {
            lazy[i] += val;
            lazy_prop(i, tl, tr);
            return;
        }

        int mi = mid(tl, tr);
        int l = lchild(i);

        update(tl, mi, l, ql, min(qr, mi), val);
        update(mi + 1, tr, l + 1, max(ql, mi + 1), qr, val);
        st[i] = max(st[l], st[l + 1]);
    }
};

class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = (int) nums.size();
        STree* stree = new STree(n);
        stree->build(nums, 0, n - 1, 0);
        int res = 0;

        for (auto& query: queries) {
            if (stree->st[0] <= 0) {
                break;
            }

            res++;
            int l = query[0];
            int r = query[1];
            stree->update(0, n - 1, 0, l, r, query[2]);
        }

        if (stree->st[0] > 0) {
            return -1;
        }

        return res;
    }
};",1454831190
yourleetcode,yourleetcode,455,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        s = sum(nums)
        left = 0
        answer = 0
        for i in range(len(nums)):
            if nums[i]==0:
                if left==s:
                    answer+=2
                if abs(s-left)==1:
                    answer+=1
            else:
                left += nums[i]
                s -= nums[i]

        return answer
            ",1454810128
yourleetcode,yourleetcode,455,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        sub = [0]*len(nums)
        for l,r in queries:
            sub[l]-=1
            if r+1<len(nums):
                sub[r+1]+=1
        v = 0
        # print(sub)
        for i in range(len(nums)):
            v+=sub[i]
            nums[i]+=v
            # print(nums[i])
            if nums[i]>0:
                return False
        return True",1454817707
yourleetcode,yourleetcode,455,3643,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]], k) -> bool:
        sub = [0]*len(nums)
        for l,r,v in queries[:k]:
            sub[l]-=v
            if r+1<len(nums):
                sub[r+1]+=v
        v = 0
        # print(sub)
        for i in range(len(nums)):
            v+=sub[i]
            # print(nums[i])
            if nums[i]+v>0:
                return False
        return True
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        if sum(nums)==0:
            return 0
        l = 1
        r = len(queries)
        if not self.isZeroArray(nums,queries,r):
            return -1
        while l<r:
            # print(l,r)
            m = (l+r)//2
            if self.isZeroArray(nums,queries,m):
                # print(""l"",m)
                r = m
            else:
                l = m+1
        return l",1454831209
KARTHIKEYAN S,karthikeya48,456,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int n = nums.size();
        auto simu = [&](int i, int flag) -> bool {
            vector<int> t = nums;
            while (i >= 0 && i < n) {
                if (t[i] == 0) {
                    i += flag;
                } else {
                    t[i]--;
                    flag *= -1;
                    i += flag;
                }
            }
            vector<int> c(n, 0);
            return c == t;
        };
        int ans = 0;
        for (int i = 0; i < n; i++) {
            if (nums[i] == 0) {
                if (simu(i, 1)) ans++;
                if (simu(i, -1)) ans++;
            }
        }
        return ans;
    }
};
",1454815410
KARTHIKEYAN S,karthikeya48,456,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        int q = queries.size();
        
        vector<int> diff(n + 1, 0);
        
        
        for(int i = 0; i < q; i++) {
            int l = queries[i][0];
            int r = queries[i][1];
            
            diff[l]++;
            diff[r + 1]--;
        }
        
        
        for(int i = 1; i < n; i++) {
            diff[i] += diff[i - 1];
        }
        
        int f = 0;
        
        for(int i = 0; i < n; i++) {
            if(nums[i] > diff[i]) return 0;
        }
        
        return 1;
    }
};",1454822017
KARTHIKEYAN S,karthikeya48,456,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        int q = queries.size();
        
        auto ok = [&](int x) -> bool {
            vector<int> diff(n + 1, 0);
        
            for(int i = 0; i < x; i++) {
                int l = queries[i][0];
                int r = queries[i][1];
                int val = queries[i][2];

                diff[l] += val;
                diff[r + 1] -= val;
            }


            for(int i = 1; i < n; i++) {
                diff[i] += diff[i - 1];
            }

            int f = 0;

            for(int i = 0; i < n; i++) {
                if(nums[i] > diff[i]) return 0;
            }

            return 1;
        };
        
        int l = 0, r = q;
        
        int ans = -1;
        
        while(l <= r) {
            int m = (l + r) / 2;
            if(ok(m)) {
                ans = m;
                r = m - 1;
            } else {
                l = m + 1;
            }
        }
        
        return ans;
    }
};",1454831214
Adi,ahimawan,457,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int sum = 0;
        for (auto &x: nums) {
            sum += x;
        }
        int lef = 0, rig = 0, ret = 0;
        for (auto &x: nums) {
            lef += x;
            rig = sum - lef;
            if (x == 0) {
                int a = abs(lef - rig);
                if (a == 1) ret++;
                else if (a == 0) ret += 2;
            }
        }
        return ret;
    }
};",1454810922
Adi,ahimawan,457,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& q) {
        map<int, int> m;
        int qi = 0;
        int qn = q.size();
        int cur = 0;
        for (int i = 0; i < nums.size(); i++) {
            while (nums[i] > cur && qi < qn) {
                int lef = q[qi][0];
                int rig = q[qi][1]+1;
                int v = 1;
                qi++;
                if (rig <= i) continue;
                m[rig] -= v;
                if (lef <= i) cur += v;
                else m[lef] += v;
            }
            if (nums[i] > cur && qi == qn) return false;
            auto it = m.find(i+1);
            if (it != m.end()) cur += it->second;
        }
        return true;
    }
};",1454838693
Adi,ahimawan,457,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& q) {
        map<int, int> m;
        int qi = 0;
        int qn = q.size();
        int cur = 0;
        for (int i = 0; i < nums.size(); i++) {
            while (nums[i] > cur && qi < qn) {
                int lef = q[qi][0];
                int rig = q[qi][1]+1;
                int v = q[qi][2];
                qi++;
                if (rig <= i) continue;
                m[rig] -= v;
                if (lef <= i) cur += v;
                else m[lef] += v;
            }
            if (nums[i] > cur && qi == qn) return -1;
            auto it = m.find(i+1);
            if (it != m.end()) cur += it->second;
        }
        return qi;
    }
};",1454835957
Aditya Kumar,adityakumar8068,458,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int n=nums.size();
        int ans=0;
        for(int i=0;i<n;i++){
            if(nums[i]==0){
                int a=0;
                int b=0;
                for(int j=0;j<i;j++){
                    a+=nums[j];
                }
                for(int j=i+1;j<n;j++){
                    b+=nums[j];
                }
                if(abs(a-b)==1){
                    ans+=1;
                }
                else if(abs(a-b)==0){
                    ans+=2;
                }
            }
        }
        return ans;
    }
};",1454811379
Aditya Kumar,adityakumar8068,458,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& q) {
        int n=nums.size();
        int m=q.size();
        vector<int>vec(n,0);
        for(int i=0;i<m;i++){
            vec[q[i][0]]++;
            if(q[i][1]<n-1){
                vec[q[i][1]+1]--;
            }
        }
        int a=0;
        for(int i=0;i<n;i++){
            a+=vec[i];
            vec[i]=a;
        }
        // for(auto it:vec){
        //     cout<<it;
        // }
        for(int i=0;i<n;i++){
            if(nums[i]>vec[i]){
                return false;
            }
        }
        return true;
    }
};",1454820106
Aditya Kumar,adityakumar8068,458,3643,cpp,"class Solution {
public:
    bool check(vector<vector<int>>&q,int mid,vector<int>&nums){
        int n=nums.size();
        int m=q.size();
        vector<long long>vec(n,0);
        for(int i=0;i<=mid;i++){
            vec[q[i][0]]+=q[i][2];
            if(q[i][1]<n-1){
                vec[q[i][1]+1]-=q[i][2];
            }
        }
        long long a=0;
        for(int i=0;i<n;i++){
            a+=vec[i];
            vec[i]=a;
        }
        for(int i=0;i<n;i++){
            if(nums[i]>vec[i]){
                return false;
            }
        }
        return true;
    }
    int minZeroArray(vector<int>& nums, vector<vector<int>>& q) {
        int n=nums.size();
        int m=q.size();
        int start=0;
        int end=m-1;
        int ans=-1;
        long long sum=0;
        for(int i=0;i<n;i++){
            sum+=nums[i];
        }
        if(sum==0)return 0;
        while(start<=end){
            int mid=start+(end-start)/2;
            if(check(q,mid,nums)){
                ans=mid+1;
                end=mid-1;
            }
            else{
                start=mid+1;
            }
        }
        return ans;
    }
};",1454831289
Harsh Yadav,Harsh_261,460,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int n = nums.size();
        vector<int> zeroPositions;

        for (int i = 0; i < n; ++i) {
            if (nums[i] == 0) zeroPositions.push_back(i);
        }

        auto isValid = [&](int start, int direction) -> bool {
            vector<int> temp = nums; 
            int curr = start;

            while (curr >= 0 && curr < n) {
                if (temp[curr] == 0) {
                    curr += direction;
                } else {
                    --temp[curr]; 
                    direction = -direction;
                    curr += direction;
                }
            }

            for (int val : temp) {
                if (val != 0) return false;
            }
            return true;
        };

        int validCount = 0;

        for (int pos : zeroPositions) {
            if (isValid(pos, -1)) ++validCount; 
            if (isValid(pos, 1)) ++validCount; 
        }

        return validCount;
    }
};",1454807569
Harsh Yadav,Harsh_261,460,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        vector<int> decrements(n + 1, 0);

        for (const auto& query : queries) 
        {
            int l = query[0], r = query[1];
            decrements[l] += 1;
            if (r + 1 < n) 
            {
                decrements[r + 1] -= 1;
            }
        }

        int currDecrement = 0;
        for (int i = 0; i < n; ++i) 
        {
            currDecrement += decrements[i];
            if (currDecrement < nums[i]) 
            {
                return false;
            }
        }

        return true;
    }
};",1454820608
Harsh Yadav,Harsh_261,460,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        int m = queries.size();

        if (all_of(nums.begin(), nums.end(), [](int x) { return x == 0; })) {
            return 0;
        }

        auto canMakeZero = [&](int k) -> bool {
            vector<int> decrements(n + 1, 0);

            for (int i = 0; i < k; ++i) {
                int l = queries[i][0], r = queries[i][1], val = queries[i][2];
                decrements[l] += val;
                if (r + 1 < n) decrements[r + 1] -= val;
            }

            int currDecrement = 0;
            for (int i = 0; i < n; ++i) {
                currDecrement += decrements[i];
                if (currDecrement < nums[i]) {
                    return false; 
                }
            }
            
            return true;
        };

        int left = 1, right = m, result = -1;
        while (left <= right) {
            int mid = left + (right - left) / 2;
            if (canMakeZero(mid)) 
            {
                result = mid;
                right = mid - 1;
            } 
            else {
                left = mid + 1;
            }
        }
        
        return result;
    }
};
",1454831315
Anav Prasad,vrangr,461,3616,cpp,"#define all(x) (x).begin(),(x).end()
#define rall(x) (x).rbegin(),(x).rend()
class Solution {
public:
    int countValidSelections(vector<int>& vals) {
        int n = vals.size();
        if (*max_element(all(vals)) == 0) return 2*n;
        vector<int> psum(n), rpsum(n);
        partial_sum(all(vals),psum.begin());
        partial_sum(rall(vals),rpsum.rbegin());
        int sol = 0;
        for (int i = 0; i < n; ++i) {
            if (vals[i] != 0) continue;
            if (i == 0) {
                if (rpsum[i] == 1) sol++;
                continue;
            }
            if (i == n-1) {
                if (psum[i] == 1) sol++;
                continue;
            }
            if (abs(rpsum[i]-psum[i]) == 1) sol++;
            if (rpsum[i] == psum[i]) sol += 2;
        }
        return sol;
    }
};",1454808800
Anav Prasad,vrangr,461,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& vals, vector<vector<int>>& qr) {
        int n = vals.size();
        vector<int> sum(n+1,0);
        for (auto &q : qr) {
            int l = q[0], r = q[1];
            sum[l]++;
            sum[r+1]--;
        }
        for (int i = 1; i < n; ++i)
            sum[i] += sum[i-1];
        for (int i = 0; i < n; ++i) {
            if (sum[i] < vals[i]) return false;
        }
        return true;
    }
};",1454815148
Anav Prasad,vrangr,461,3643,cpp,"typedef long long int ll;

#ifndef ATCODER_INTERNAL_BITOP_HPP
#define ATCODER_INTERNAL_BITOP_HPP 1

#ifdef _MSC_VER
#include <intrin.h>
#endif

#if __cplusplus >= 202002L
#include <bit>
#endif

namespace atcoder {

namespace internal {

#if __cplusplus >= 202002L

using std::bit_ceil;

#else

// @return same with std::bit::bit_ceil
unsigned int bit_ceil(unsigned int n) {
    unsigned int x = 1;
    while (x < (unsigned int)(n)) x *= 2;
    return x;
}

#endif

// @param n `1 <= n`
// @return same with std::bit::countr_zero
int countr_zero(unsigned int n) {
#ifdef _MSC_VER
    unsigned long index;
    _BitScanForward(&index, n);
    return index;
#else
    return __builtin_ctz(n);
#endif
}

// @param n `1 <= n`
// @return same with std::bit::countr_zero
constexpr int countr_zero_constexpr(unsigned int n) {
    int x = 0;
    while (!(n & (1 << x))) x++;
    return x;
}

}  // namespace internal

}  // namespace atcoder

#endif  // ATCODER_INTERNAL_BITOP_HPP


#ifndef ATCODER_LAZYSEGTREE_HPP
#define ATCODER_LAZYSEGTREE_HPP 1

#include <algorithm>
#include <cassert>
#include <functional>
#include <vector>

// #include ""atcoder/internal_bit""

namespace atcoder {

#if __cplusplus >= 201703L

template <class S,
          auto op,
          auto e,
          class F,
          auto mapping,
          auto composition,
          auto id>
struct lazy_segtree {
    static_assert(std::is_convertible_v<decltype(op), std::function<S(S, S)>>,
                  ""op must work as S(S, S)"");
    static_assert(std::is_convertible_v<decltype(e), std::function<S()>>,
                  ""e must work as S()"");
    static_assert(
        std::is_convertible_v<decltype(mapping), std::function<S(F, S)>>,
        ""mapping must work as S(F, S)"");
    static_assert(
        std::is_convertible_v<decltype(composition), std::function<F(F, F)>>,
        ""composition must work as F(F, F)"");
    static_assert(std::is_convertible_v<decltype(id), std::function<F()>>,
                  ""id must work as F()"");

#else

template <class S,
          S (*op)(S, S),
          S (*e)(),
          class F,
          S (*mapping)(F, S),
          F (*composition)(F, F),
          F (*id)()>
struct lazy_segtree {

#endif

  public:
    lazy_segtree() : lazy_segtree(0) {}
    explicit lazy_segtree(int n) : lazy_segtree(std::vector<S>(n, e())) {}
    explicit lazy_segtree(const std::vector<S>& v) : _n(int(v.size())) {
        size = (int)internal::bit_ceil((unsigned int)(_n));
        log = internal::countr_zero((unsigned int)size);
        d = std::vector<S>(2 * size, e());
        lz = std::vector<F>(size, id());
        for (int i = 0; i < _n; i++) d[size + i] = v[i];
        for (int i = size - 1; i >= 1; i--) {
            update(i);
        }
    }

    void set(int p, S x) {
        assert(0 <= p && p < _n);
        p += size;
        for (int i = log; i >= 1; i--) push(p >> i);
        d[p] = x;
        for (int i = 1; i <= log; i++) update(p >> i);
    }

    S get(int p) {
        assert(0 <= p && p < _n);
        p += size;
        for (int i = log; i >= 1; i--) push(p >> i);
        return d[p];
    }

    S prod(int l, int r) {
        assert(0 <= l && l <= r && r <= _n);
        if (l == r) return e();

        l += size;
        r += size;

        for (int i = log; i >= 1; i--) {
            if (((l >> i) << i) != l) push(l >> i);
            if (((r >> i) << i) != r) push((r - 1) >> i);
        }

        S sml = e(), smr = e();
        while (l < r) {
            if (l & 1) sml = op(sml, d[l++]);
            if (r & 1) smr = op(d[--r], smr);
            l >>= 1;
            r >>= 1;
        }

        return op(sml, smr);
    }

    S all_prod() { return d[1]; }

    void apply(int p, F f) {
        assert(0 <= p && p < _n);
        p += size;
        for (int i = log; i >= 1; i--) push(p >> i);
        d[p] = mapping(f, d[p]);
        for (int i = 1; i <= log; i++) update(p >> i);
    }
    void apply(int l, int r, F f) {
        assert(0 <= l && l <= r && r <= _n);
        if (l == r) return;

        l += size;
        r += size;

        for (int i = log; i >= 1; i--) {
            if (((l >> i) << i) != l) push(l >> i);
            if (((r >> i) << i) != r) push((r - 1) >> i);
        }

        {
            int l2 = l, r2 = r;
            while (l < r) {
                if (l & 1) all_apply(l++, f);
                if (r & 1) all_apply(--r, f);
                l >>= 1;
                r >>= 1;
            }
            l = l2;
            r = r2;
        }

        for (int i = 1; i <= log; i++) {
            if (((l >> i) << i) != l) update(l >> i);
            if (((r >> i) << i) != r) update((r - 1) >> i);
        }
    }

    template <bool (*g)(S)> int max_right(int l) {
        return max_right(l, [](S x) { return g(x); });
    }
    template <class G> int max_right(int l, G g) {
        assert(0 <= l && l <= _n);
        assert(g(e()));
        if (l == _n) return _n;
        l += size;
        for (int i = log; i >= 1; i--) push(l >> i);
        S sm = e();
        do {
            while (l % 2 == 0) l >>= 1;
            if (!g(op(sm, d[l]))) {
                while (l < size) {
                    push(l);
                    l = (2 * l);
                    if (g(op(sm, d[l]))) {
                        sm = op(sm, d[l]);
                        l++;
                    }
                }
                return l - size;
            }
            sm = op(sm, d[l]);
            l++;
        } while ((l & -l) != l);
        return _n;
    }

    template <bool (*g)(S)> int min_left(int r) {
        return min_left(r, [](S x) { return g(x); });
    }
    template <class G> int min_left(int r, G g) {
        assert(0 <= r && r <= _n);
        assert(g(e()));
        if (r == 0) return 0;
        r += size;
        for (int i = log; i >= 1; i--) push((r - 1) >> i);
        S sm = e();
        do {
            r--;
            while (r > 1 && (r % 2)) r >>= 1;
            if (!g(op(d[r], sm))) {
                while (r < size) {
                    push(r);
                    r = (2 * r + 1);
                    if (g(op(d[r], sm))) {
                        sm = op(d[r], sm);
                        r--;
                    }
                }
                return r + 1 - size;
            }
            sm = op(d[r], sm);
        } while ((r & -r) != r);
        return 0;
    }

  private:
    int _n, size, log;
    std::vector<S> d;
    std::vector<F> lz;

    void update(int k) { d[k] = op(d[2 * k], d[2 * k + 1]); }
    void all_apply(int k, F f) {
        d[k] = mapping(f, d[k]);
        if (k < size) lz[k] = composition(f, lz[k]);
    }
    void push(int k) {
        all_apply(2 * k, lz[k]);
        all_apply(2 * k + 1, lz[k]);
        lz[k] = id();
    }
};

}  // namespace atcoder

#endif  // ATCODER_LAZYSEGTREE_HPP


class S {
public:
    ll val;
    S() : val(0) {}
    S(ll v) : val(v) {}
};

S op(S a, S b) {
    return S(max(a.val,b.val));
}
    
S e() {
    return S(0);
}

class F {
public:
    ll val;
    F() : val(0) {}
    F(ll v) : val(v) {}
};

S mapping(F f, S x) {
    return S(x.val+f.val);
}

F comp(F f, F g) {
    return F(f.val+g.val);
}

F id() {
    return F();
}

class Solution {
public:
    int minZeroArray(vector<int>& vals, vector<vector<int>>& qr) {
        int n = vals.size();
        vector<S> a(n);
        for (int i = 0; i < n; ++i)
            a[i].val = vals[i];
        atcoder::lazy_segtree<S, op, e, F, mapping, comp, id> seg(a);
        if (seg.all_prod().val <= 0) return 0;
        for(int i = 0; i < qr.size(); ++i) {
            int l = qr[i][0], r = qr[i][1], val = qr[i][2];
            seg.apply(l,r+1,F(-val));
            if (seg.all_prod().val <= 0) return i+1;
        }
        return -1;
    }
};",1454838776
Gaurav Kholiya,AuRA_07,462,3616,cpp,"#include <vector>

class Solution 
{
public:
    int countValidSelections(vector<int>& nums) {
        int n = nums.size();
        int cnt = 0;
        auto solve = [&](int i, int ans) 
        {
            vector<int> temp = nums;
            int curr = i;
            while (curr >= 0 && curr < n) 
            {
                if (temp[curr] == 0) 
                {
                    curr += ans;
                } 
                else 
                {
                    temp[curr]--;
                    ans = -1* ans;
                    curr += ans;
                }
            }

            for (auto it : temp) 
            {
                if (it != 0) 
                {
                    return false;
                }
            }
            return true;
        };

        for (int i = 0; i < n; ++i) 
        {
            if (!nums[i]) 
            {
                if (solve(i, 1)) 
                {
                    cnt++;
                }
                if (solve(i, -1)) 
                {
                    cnt++;
                }
            }
        }

        return cnt;
    }
};
",1454810967
Gaurav Kholiya,AuRA_07,462,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        vector<int> prefix(n + 1, 0);
        for ( auto& it : queries) 
        {
            int i = it[0];
            int j = it[1];
            prefix[i] -= 1;
            if (j + 1 < n) 
            {
                prefix[j + 1] += 1;
            }
        }
        int cnt = 0;
        for (int i = 0; i < n; i++) 
        {
            cnt += prefix[i];
            nums[i] += cnt;
            if (nums[i] < 0) 
            {
                nums[i] = 0;
            }
            if (nums[i] != 0) 
            {
                return false;
            }
        }

        return true;
    }
};",1454821915
Gaurav Kholiya,AuRA_07,462,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& q) 
    {
        int n = nums.size();
        int m = q.size();
        auto solve = [&](int k) 
        {
            vector<int>temp(n + 1, 0);
            for (int i = 0; i < k; i++) 
            {
                int l = q[i][0];
                int r = q[i][1];
                int v = q[i][2];
                temp[l] += v;
                if (r + 1 < n) 
                {
                    temp[r + 1] -= v;
                }
            }

            int cnt = 0;
            for (int i = 0; i < n; i++)
            {
                cnt += temp[i];
                if (nums[i] > cnt) 
                {
                    return false; 
                }
            }
            return true; 
        };

        int l = 0;
        int r = m;
        int ans = -1;
        while (l <= r) 
        {
            int mid = (l + r)/2;
            if (solve(mid)) 
            {
                ans = mid;
                r = mid - 1;
            } 
            else 
            {
                l = mid + 1; 
            }
        }

        return ans;
    }
};",1454838784
Bhanu Negi,bhanunegi420,464,3616,cpp,"class Solution {
public:

bool f(vector<int> nums, int s, int direction) {
    int n = nums.size(),curr = s;
    
    while (curr >= 0 && curr < n) {
        if (nums[curr] > 0) {
            nums[curr]--;
            direction *= -1;  
        }
        curr += direction;
    }

    return all_of(nums.begin(), nums.end(), [](int x) { return x == 0; });
}

int countValidSelections(vector<int>& nums) {
    int ans = 0,n = nums.size();
    
    for (int i = 0; i < n; ++i) {
        if (nums[i] == 0) { 
            for (int dir : {-1, 1}) { 
                if (f(nums, i, dir)) {
                    ans++;
                }
            }
        }
    }
    
    return ans;
}
};",1454807642
Bhanu Negi,bhanunegi420,464,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size(),m=queries.size();
        vector<int> hash(n+1,0);
        for(auto it : queries){
            hash[it[0]]++;
            hash[it[1]+1]--;
        }
        for(int i=1; i<=n;i++){
            hash[i] += hash[i-1];
        }

        for(int i=0; i<n; i++){
            if(hash[i] - nums[i] < 0) return 0;
        }
        return 1;
    }
};",1454816505
Bhanu Negi,bhanunegi420,464,3643,cpp,"// Author : Bhanu Negi
#include <bits/stdc++.h>
#define Code ios_base::sync_with_stdio(0);
#define by cin.tie(0);
#define Bhanu cout.tie(0);
#define ll long long
#define pii pair<int,int>
#define PQ priority_queue<ll>
#define PQG priority_queue<ll,vector<ll>,greater<ll>>
#define pll pair<long long,long long>
#define F first
#define S second
#define pb push_back
#define mod 1000000007
#define inf 100000000000000000
using namespace std;

int dx[4] = {+1,-1,0,0};
int dy[4] = {0,0,+1,-1};
 
int _dx[8] = {+1,-1,0,0,+1,-1,+1,-1};
int _dy[8] = {0,0,+1,-1,+1,-1,-1,+1};

vector<pll> dxy = {{1,0},{-1,0},{0,1},{0,-1}};
vector<pll> _dxy = {{1,0},{-1,0},{0,1},{0,-1},{1,1},{-1,-1},{1,-1},{-1,1}};

class debug{
public: 
    template<class T>
    void print(vector<T>& arr){
        for(auto& it : arr) cout<<it<<"" "";
        cout<<endl;
    }
};

// Matrix Exponentiation
class Matrix{
public:
    vector<vector<ll>> mat;
    void multiply(vector<vector<ll>>& A,vector<vector<ll>>& B){
        int n = A.size();
        vector<vector<ll>> C(n, vector<ll>(n));
        for (int i = 0; i < n; i++) {
            for (int j = 0; j <n; j++) {
                for (int k = 0; k < n; k++) {
                    C[i][j] = (C[i][j] + ((A[i][k]) * (B[k][j]))%mod)%mod;
                }
            }
        }
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                A[i][j] = C[i][j];
            }
        }
    }
    vector<vector<ll>> identity(int n){
        vector<vector<ll>> ans(n,vector<ll>(n,0));
        for(int i=0; i<n; i++) ans[i][i] = 1;
        return ans;
    }
    vector<vector<ll>> exponentiate(vector<vector<ll>> M, ll expo){
        int n = M.size();
        vector<vector<ll>> ans = identity(n);
        while (expo) {
            if (expo & 1) multiply(ans, M);
            multiply(M, M);
            expo >>= 1;
        }
        return ans;
    }

};

/*****************************************************************************************************/

// Disjoint Set
class Disjoint{
public:
    vector<ll> parent,size,rank;
    Disjoint(int n){
        parent.resize(n+1);
        for(int i=0;i<=n; i++) parent[i] = i;
        size.resize(n+1,1);
        rank.resize(n+1,0);
    }

    int findUPar(int node){
        if(parent[node] == node) return node;
        return parent[node] = findUPar(parent[node]);
    }

    void union_by_rank(int u,int v){
        int ulp_u = findUPar(u);
        int ulp_v = findUPar(v);
        if(ulp_u == ulp_v) return;
        if(rank[ulp_u] > rank[ulp_v]){
            parent[ulp_v] =  ulp_u;
        }
        else if(rank[ulp_u] < rank[ulp_v]){
            parent[ulp_u] = ulp_v;
        }
        else{
            rank[ulp_u]++;
            parent[ulp_v] = ulp_u;
        }
    }

    void union_by_size(int u,int v){
        int ulp_u = findUPar(u);
        int ulp_v = findUPar(v);
        if(ulp_u == ulp_v) return;
        if(size[ulp_u] >= size[ulp_v]){
            size[ulp_u] += size[ulp_v];
            parent[ulp_v] = ulp_u;
        }
        else{
            size[ulp_v] += size[ulp_u];
            parent[ulp_u] = ulp_v;

        }
    }
};

/****************************************************************************************************/

//Trie 

struct Node {
    Node* links[26];
    bool flag = 0;
    bool containsKey(char ch){ return links[ch - 'a'] != NULL;}
    void put(char ch, Node* node) {links[ch - 'a'] = node;}
    Node* get(char ch) {return links[ch - 'a'];}
    void setEnd() {flag = 1;}
    bool isEnd() {return flag;}
    
};

class Trie {
private:
    Node* root;

public:
    Trie() {
        root = new Node();
    }
    void insert(string word) {
        Node* node = root;
        for (int i = 0; i < word.length(); i++) {
            if (!node->containsKey(word[i])) {
                node->put(word[i], new Node());
            }
            node = node->get(word[i]);
        }
        node->setEnd();
    }

    bool search(string word) {
        Node* node = root;
        for (int i = 0; i < word.length(); i++) {
            if (!node->containsKey(word[i])) {
                return 0;
            }
            node = node->get(word[i]);
        }
        return node->isEnd();
    }

    bool startsWith(string prefix) {
        Node* node = root;
        for (int i = 0; i < prefix.length(); i++) {
            if (!node->containsKey(prefix[i])) {
                return 0;
            }
            node = node->get(prefix[i]);
        }
        return 1;
    }
};

/*************************************************************************************************** */

auto bpsn = [](){
    Code by Bhanu
    return 'sk';
}();
/************************************************************************************************** */
class Solution {
public:
    vector<int> hash; 
    int minZeroArray(vector<int>& nums, vector<vector<int>>& q) {
        int n = nums.size();
        vector<int> curr = nums;  
        if (all_of(curr.begin(), curr.end(), [](int x) { return x == 0; })) {
            hash = curr;
            return 0;
        }
        
        auto f = [&](int k) -> bool {
            vector<int> diff(n + 1, 0);
            for (int i = 0; i < k; ++i) {
                int l = q[i][0], r = q[i][1], val = q[i][2];
                diff[l] += val;
                if (r + 1 < n) diff[r + 1] -= val;
            }
            
            int cnt = 0;
            for (int i = 0; i < n; ++i) {
                cnt += diff[i];
                if (cnt < curr[i]) {
                    return 0;  
                }
            }
            return 1;
        };
        
        int low = 0, high = q.size(), ans = -1;
        bool midi = 0;
        
        while (low <= high) {
            int mid = low + (high - low) / 2;
            if (f(mid)) {
                ans = mid;
                high = mid - 1;
            } else {
                low = mid + 1;
            }
            
            if (!midi && mid == q.size() / 2) {
                vector<int> diff(n + 1, 0);
                for (int i = 0; i < mid; ++i) {
                    int l = q[i][0], r = q[i][1], val = q[i][2];
                    diff[l] += val;
                    if (r + 1 < n) diff[r + 1] -= val;
                }
                
                hash = curr;
                int cnt = 0;
                for (int i = 0; i < n; ++i) {
                    cnt += diff[i];
                    hash[i] = max(0, curr[i] - cnt);
                }
                midi = 1;
            }
        }
        return ans;
    }
};",1454838804
Unicon,Unicon,465,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int ans = 0;
        int n = nums.size();
        vector<int> rsum(n + 1, 0);
        for (int i = n - 1; i >= 0; --i) {
            rsum[i] = rsum[i + 1] + nums[i];
        }
        int lsum = 0;
        for (int i = 0; i < n; ++i) {
            if (nums[i] == 0) {
                if (lsum == rsum[i + 1] || lsum - 1 == rsum[i + 1]) {
                    ++ans;
                }
                if (lsum == rsum[i + 1] || lsum == rsum[i + 1] - 1) {
                    ++ans;
                }
            }


            lsum += nums[i];
        }

        return ans;
    }
};",1454812644
Unicon,Unicon,465,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        vector<int> s(n, 0);
        vector<int> f(n, 0);
        for (int i = 0; i < queries.size(); ++i) {
            s[queries[i][0]]++;
            f[queries[i][1]]++;
        }

        int b = 0;
        for (int i = 0; i < n; ++i) {
            b += s[i];
            if (nums[i] > b) {
                return false;
            }
            b -= f[i];
        }

        return true;
    }
};",1454819947
Unicon,Unicon,465,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int l = -1, r = queries.size() + 1;
        while (l < r - 1) {
            int mid = (l + r) / 2;
            if (isZeroArray(nums, queries, mid)) {
                r = mid;
            } else {
                l = mid;
            }
        }

        if (r == queries.size() + 1) {
            return -1;
        }
        return r;
    }

private: 
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries, int k) {
        int n = nums.size();
        vector<int> s(n, 0);
        vector<int> f(n, 0);
        for (int i = 0; i < k; ++i) {
            s[queries[i][0]] += queries[i][2];
            f[queries[i][1]] += queries[i][2];
        }

        int b = 0;
        for (int i = 0; i < n; ++i) {
            b += s[i];
            if (nums[i] > b) {
                return false;
            }
            b -= f[i];
        }

        return true;
    }
};",1454831372
Chengyu Wu,dnuj4097,466,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        
        rsum = sum(nums)
        lsum = 0
        ans = 0
        for x in nums:
            if x == 0:
                if lsum == rsum: ans += 2
                elif abs(lsum - rsum) == 1:
                    ans += 1
            else:
                lsum += x
                rsum -= x
        return ans",1454810973
Chengyu Wu,dnuj4097,466,3639,python3,"from collections import defaultdict
class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        
        pts = defaultdict(int)
        for l,r in queries:
            pts[l] += 1
            pts[r + 1] -= 1

        cnt = 0
        for i,x in enumerate(nums):
            cnt += pts[i]
            if cnt < x: return False
        return True",1454815672
Chengyu Wu,dnuj4097,466,3643,python3,"from collections import defaultdict
class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        
        if sum(nums) == 0: return 0
        
        def helper(k):
            nonlocal nums, queries
            pts = defaultdict(int)
            for i in range(k):
                l,r,v = queries[i]
                pts[l] += v
                pts[r + 1] -= v
            v = 0
            for i,x in enumerate(nums):
                v += pts[i]
                if v < x: return False
            return True
        
        m = len(queries)
        if not helper(m): return -1
        lo, hi = 0, m
        while hi > lo + 1:
            k = (lo + hi) // 2
            if helper(k): hi = k
            else: lo = k
        return hi",1454831409
james-ryans,james-ryans,467,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int n = nums.size();
        vector<int> pref(n + 5), suff(n + 5);
        for (int i = 1; i <= n; i++) {
            pref[i] = pref[i - 1] + nums[i - 1];
        }
        for (int i = n; i >= 1; i--) {
            suff[i] = suff[i + 1] + nums[i - 1];
        }

        int ans = 0;
        for (int i = 1; i <= n; i++) {
            if (nums[i - 1] != 0) {
                continue;
            }

            // cout << pref[i] << ' ' << suff[i] << '\n';
            if (pref[i] == suff[i] || pref[i] - 1 == suff[i]) {
                ans++;
            }
            if (pref[i] == suff[i] || pref[i] == suff[i] - 1) {
                ans++;
            }
        }
        return ans;
    }
};",1454817415
james-ryans,james-ryans,467,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        int m = queries.size();
        vector<int> que(n);
        for (int i = 0; i < m; i++) {
            int l = queries[i][0];
            int r = queries[i][1];
            que[l]++;
            if (r + 1 < n) {
                que[r + 1]--;
            }
        }
        for (int i = 1; i < n; i++) {
            que[i] += que[i - 1];
        }

        for (int i = 0; i < n; i++) {
            if (que[i] < nums[i]) {
                return false;
            }
        }
        return true;
    }
};",1454823542
james-ryans,james-ryans,467,3643,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries, int m) {
        int n = nums.size();
        vector<int> que(n);
        for (int i = 0; i < m; i++) {
            int l = queries[i][0];
            int r = queries[i][1];
            int val = queries[i][2];
            que[l] += val;
            if (r + 1 < n) {
                que[r + 1] -= val;
            }
        }
        for (int i = 1; i < n; i++) {
            que[i] += que[i - 1];
        }

        for (int i = 0; i < n; i++) {
            if (que[i] < nums[i]) {
                return false;
            }
        }
        return true;
    }

    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        if (!isZeroArray(nums, queries, queries.size())) {
            return -1;
        }
        
        int lo = 0, hi = queries.size();
        while (lo < hi) {
            int mid = (lo + hi) / 2;
            if (isZeroArray(nums, queries, mid)) {
                hi = mid;
            } else {
                lo = mid + 1;
            }
        }
        return lo;
    }
};",1454831411
Madhav Gupta,mgups2002,470,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        n = len(nums)
        directions = [-1, 1]  # -1: left, 1: right
        count = 0

        for i in range(n):
            if nums[i] == 0:
                for dir in directions:
                    temp = nums.copy()
                    curr = i
                    direction = dir
                    while 0 <= curr < n:
                        if temp[curr] == 0:
                            curr += direction
                        else:
                            temp[curr] -= 1
                            direction = -direction
                            curr += direction
                    if all(x == 0 for x in temp):
                        count += 1
        return count",1454806882
Madhav Gupta,mgups2002,470,3639,cpp," class Solution {
 public:
     bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
         int n = nums.size();
         vector<int> diff(n + 1, 0);
         // line sweep
         for(auto& q : queries){
             int l = q[0];
             int r = q[1];
             diff[l] += 1;
             if(r + 1 < n)
                 diff[r + 1] -= 1;
         }
         vector<int> count(n, 0);
         count[0] = diff[0];
         for(int i = 1; i < n; i++)
             count[i] = count[i - 1] + diff[i];
         for(int i = 0; i < n; i++){
             if(nums[i] - count[i] > 0)
                 return false;
         }
         return true;
     }
 };",1454815029
Madhav Gupta,mgups2002,470,3643,cpp,"class Solution {
public:
    bool isPossible(vector<int>& nums, vector<vector<int>>& queries, int k, int n)
{
    vector<long long> diff(n+1, 0);
    for(int i=0; i<k; i++)
        {
            auto q=queries[i];
            int l=q[0];
            int r=q[1];
            int val=q[2];

            diff[l]+=val;
            if(r+1<n)
                diff[r+1]=diff[r+1]-val;
        }

         vector<long long> total(n, 0);
         total[0] = diff[0];
         if(total[0] < nums[0]) return false;
         for(int i = 1; i < n; i++) {
             total[i] = total[i - 1] + diff[i];
             if(total[i] < nums[i]) return false;
         }
         return true;
}
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n=nums.size();
        int m=queries.size();

        int l=0;
        int r=m;
        int ans=-1;

        while(l<=r)
            {
                int mid=l+(r-l)/2;

                if(isPossible(nums, queries, mid, n))
                {
                    ans=mid;
                    r=mid-1;
                }
                else
                    l=mid+1;
            }
        return ans;
    }


};",1454831634
tarunsingh,tarunsingh,471,3616,cpp,"class Solution {
public:

    bool check(vector<int> a){
        for(auto num: a){
            if(num != 0){
                return false;
            }
        }
        return true;
    }

    int func(vector<int> a, int n, int pos, int dir){
        if(a[pos] != 0){
            return 0;
        }
        while(pos < n && pos >= 0){
            if(a[pos] == 0){
                pos += dir;
            } else {
                a[pos]--;
                if(dir == -1){
                    dir = 1;
                } else {
                    dir = -1;
                }
                pos += dir;
            }
        }
        return check(a);
    }

    int countValidSelections(vector<int>& nums) {
        int ans = 0;
        int n = nums.size();
        for(int i = 0; i < n; i++){
            ans += func(nums, n, i, -1);
            ans += func(nums, n, i, 1);
        }
        return ans;
    }
};",1454819169
tarunsingh,tarunsingh,471,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int sum = 0;
        int n = nums.size();
        vector<int> temp(n+1, 0);
        for(auto q: queries){
            temp[q[0]]++;
            temp[q[1]+1]--;
        }
        for(int i = 0; i < n; i++){
            sum += temp[i];
            nums[i] -= sum;
        }
        for(auto num: nums){
            if(num > 0){
                return false;
            }
        }
        return true;
    }
};",1454827405
tarunsingh,tarunsingh,471,3643,cpp,"class Solution {
public:
    bool check(vector<int> a, int n, int k, vector<vector<int>> &q){
        long long sum = 0;
        vector<long long> temp(n+1, 0);
        for(int i = 0; i <= k; i++){
            temp[q[i][0]]+=q[i][2];
            temp[q[i][1]+1]-=q[i][2];
        }
        for(int i = 0; i < n; i++){
            sum += temp[i];
            a[i] -= sum;
        }
        for(auto num: a){
            if(num > 0){
                return false;
            }
        }
        return true;
    }
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        bool flag = 1;
        for(auto num: nums){
            if(num > 0){
                flag = 0;
                break;
            }
        }
        if(flag){
            return 0;
        }
        int l = 0, r = queries.size()-1;
        int ans = -1;
        int n = nums.size();
        while(l <= r){
            int mid = (l+r)/2;
            if(check(nums,n,mid,queries)){
                ans = mid;
                r = mid-1;
            } else {
                l = mid+1;
            }
        }
        if(ans != -1){
            return ans+1;
        }
        return ans;
    }
};",1454839133
congthanh2000,congthanh2000,472,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        auto ok = [&](int start, int d) {
            vector<int> nums_cur = nums;
            int sum = 0;
            for (int x : nums) sum += x;
            while (start >= 0 && start < nums.size() && sum > 0) {
                if (nums_cur[start] > 0) {
                    sum--;
                    nums_cur[start]--;
                    d *= -1;
                }
                start += d;
            }
            return sum == 0;
        };
        int ans = 0;
        for (int i = 0; i < nums.size(); i++) {
            if (nums[i] == 0) {
                ans += ok(i, -1);
                ans += ok(i, 1);
            }
        }
        return ans;
    }
};",1454814633
congthanh2000,congthanh2000,472,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        vector<int> prefix_sum(n + 1, 0);
        for (auto it : queries) {
            int L = it[0], R = it[1];
            prefix_sum[L] += 1;
            prefix_sum[R + 1] -= 1;
        }
        for (int i = 1; i <= n; i++) prefix_sum[i] += prefix_sum[i - 1];
        for (int i = 0; i < n; i++) {
            if (nums[i] > prefix_sum[i]) {
                return false;
            }
        }
        return true;
    }
};",1454819061
congthanh2000,congthanh2000,472,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        auto ok = [&](int k) {
            vector<long long> prefix_sum(n + 1, 0);
            for (int i = 0; i < k; i++) {
                int L = queries[i][0], R = queries[i][1], value = queries[i][2];
                prefix_sum[L] += value;
                prefix_sum[R + 1] -= value;
            }
            for (int i = 1; i <= n; i++) prefix_sum[i] += prefix_sum[i - 1];
            for (int i = 0; i < n; i++) {
                if (nums[i] > prefix_sum[i]) {
                    return false;
                }
            }
            return true;
        };
        int L = 0, R = queries.size(), ans = -1;
        while (L <= R) {
            int mid = (L + R) >> 1;
            if (ok(mid)) {
                ans = mid;
                R = mid - 1;
            } else {
                L = mid + 1;
            }
        }
        return ans;
    }
};",1454824508
the_average_guy,pgthakur,473,3616,cpp,"class Solution {
public:
    bool simulate(int start, int direction, vector<int> nums) {
        int n = nums.size();
        int curr = start;

        while (curr >= 0 && curr < n) {
            if (nums[curr] == 0) {
                curr += direction; 
            } else {
                nums[curr]--;     
                direction *= -1;   
                curr += direction; 
            }
        }
        return all_of(nums.begin(), nums.end(), [](int x) { return x == 0; });
    }

    int countValidSelections(vector<int>& nums) {
        int validCount = 0;
        int n = nums.size();

        for (int i = 0; i < n; ++i) {
            if (nums[i] == 0) {
                if (simulate(i, -1, nums)) {
                    validCount++;
                }
                if (simulate(i, 1, nums)) { 
                    validCount++;
                }
            }
        }

        return validCount;
    }
};",1454839170
the_average_guy,pgthakur,473,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        vector<int> v(nums.size()+1,0);
        for(auto it:queries)
            {
                v[it[0]]--;
                v[it[1]+1]++;
            }

        for(int i=1;i<v.size();i++)
            {
                v[i] = (v[i]+v[i-1]);
            }

        // for(auto it:v)
        //     {
        //         cout<<it<<"" "";
        //     }

        for(int i=0;i<nums.size();i++)
            {
                //cout<<nums[i]<<"" ""<<v[i]<<endl;
                if(nums[i]+v[i]>0)
                {
                    //cout<<i<<endl;
                    return false;
                }
            }

        return true;
    }
};",1454813998
the_average_guy,pgthakur,473,3643,cpp,"class Solution {
public:
    bool poss(vector<vector<int>>& q,vector<int>& nums,int mid){
        vector<int> v(nums.size()+1,0);
        for(int i=0;i<mid;i++)
            {
                v[q[i][0]] -= q[i][2];
                v[q[i][1]+1]+= q[i][2];
            }


        // for(auto it:v){
        //     cout<<it<<"" "";
        // }
        //cout<<endl;
        for(int i=1;i<v.size();i++)
            {
                v[i] = (v[i]+v[i-1]);
            }
        for(int i=0;i<nums.size();i++)
            {
                //cout<<nums[i]<<"" ""<<v[i]<<endl;
                if(nums[i]+v[i]>0)
                {
                    //cout<<i<<"" ""<<mid<<endl;
                    return false;
                }
            }

        return true;
    }
    int minZeroArray(vector<int>& nums, vector<vector<int>>& q) {
        int low = 0;
        int high = q.size();
        int ans = -1;

        while(low<=high)
            {
                int mid = low+(high-low)/2;
                if(poss(q,nums,mid))
                {
                    ans = mid;
                    high = mid-1;
                }
                else
                {
                    low = mid+1;
                }
            }
        return ans;
    }
};",1454829203
Keerthi Vasan S A,keerthivasansa,475,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int ans = 0;
        for (int i = 0; i < nums.size(); i++) {
            if (nums[i] == 0) {
                if (works(i, nums, 0))
                    ans++;
                if (works(i, nums, 1))
                    ans++; 
            }
        }
        return ans;
    }

    bool works(int curr, vector<int> nums, int dir) {
        int c = curr;
        while (c >= 0 && c < nums.size()) {
            if (nums[c]) {
                dir = 1 - dir;
                nums[c]--;
            }
            if (dir)
                c++;
            else
                c--;
        }
        for (int i = 0; i < nums.size(); i++)
            if (nums[i] != 0)
                return false;
        return true;
    }
};",1454815774
Keerthi Vasan S A,keerthivasansa,475,3639,cpp,"#define ll long long 

class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        vector<ll> pref(n + 1, 0);

        for (vector<int> &q: queries) {
            int l = q[0], r = q[1];
            pref[l]--;
            pref[r + 1]++;
        }

        ll p = 0;
        for (int i = 0; i < n; i++) {
            p += pref[i];
            if (p + nums[i] > 0)
                return false;
        }
        return true;
    }
};",1454821123
Keerthi Vasan S A,keerthivasansa,475,3643,cpp,"#define ll long long

class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        int low = 0, high = queries.size();
        while (low <= high) {
            int mid = (low + high) / 2;
            if (!works(mid, nums, queries))
                low = mid + 1;
            else
                high = mid - 1;
        }
        if (low == queries.size() + 1)
            return -1;
        return low;
    }

    bool works(int k, vector<int> &nums, vector<vector<int>> &queries) {
        int n = nums.size();
        vector<ll> pref(n + 1, 0);

        for (int i = 0; i < k; i++) {
            int l = queries[i][0], r = queries[i][1], val = queries[i][2];
            pref[l] -= val;
            pref[r + 1] += val;
        }
        
        ll p = 0;
        for (int i = 0; i < n; i++) {
            p += pref[i];
            if (p + nums[i] > 0)
                return false;
        }
        return true;
    }
};",1454831837
huzy,user2349xl,476,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int n = nums.size();
        int sum = accumulate(nums.begin(), nums.end(), 0);
        int left = 0;
        int ans = 0;
        
        for (int i = 0; i < n; i++) {
            left += nums[i];
            sum -= nums[i];
            if (nums[i] == 0) {
                if (left == sum) {
                    ans += 2;
                } else if (left + 1 == sum) {
                    ans += 1;
                } else if (left == sum + 1) {
                    ans += 1;
                }
            }
        }
        
        return ans;
    }
};",1454808220
huzy,user2349xl,476,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        
        int n = nums.size();
        vector<int> line(n+1, 0);
        
        for (auto &q : queries) {
            line[q[0]] += 1;
            line[q[1]+1] -= 1;
        }
        
        int curr = 0;
        for (int i = 0; i < n; i++) {
            curr += line[i];
            
            if (curr < nums[i]) {
                return false;
            }
        }
        
        return true;
    }
};",1454812531
huzy,user2349xl,476,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        vector<vector<int>> show(n+1);
        vector<vector<int>> leave(n+1);
        
        for (int i = 0; i < queries.size(); i++) {
            show[queries[i][0]].push_back(i);
            leave[queries[i][1]+1].push_back(i);
        }
        
        auto test = [&](int m) {
            int curr = 0;
            for (int i = 0; i < n; i++) {
                for (auto id : show[i]) {
                    if (id >= m) break;
                    curr += queries[id][2];
                }

                for (auto id : leave[i]) {
                    if (id >= m) break;
                    curr -= queries[id][2];
                }

                if (curr < nums[i]) {
                    return false;
                }
            }
            
            return true;
        };
        
        int l = 0;
        int r = queries.size();
        int ans = -1;
        
        while (l <= r) {
            int md = l + (r - l) / 2;
            
            if (test(md)) {
                ans = md;
                r = md - 1;
            } else {
                l = md + 1;
            }
        }
        
        return ans;
    }
};",1454831852
darkKnight,nikhil94147,479,3616,cpp,"class Solution {
public:
    
    bool simulate(vector<int> nums, int start, int direction) {
        int n = nums.size();
        int curr = start;

        while (curr >= 0 && curr < n) {
            if (nums[curr] == 0) {
                curr += direction; 
            } else {
                nums[curr] -= 1;   
                direction *= -1;   
                curr += direction; 
            }
        }
        
        for(int i=0;i<n;i++){
            if(nums[i]>0){
                return false;
            }
        }
        return true;
    }
    
    int countValidSelections(vector<int>& nums) {
        int count = 0;
        int n = nums.size();

        for (int i = 0; i < n; ++i) {
            if (nums[i] == 0) { 
                if (simulate(nums, i, -1)) {
                    // cout<<i<<"" ""<<'\n';
                    count++;
                }
                if(simulate(nums, i, 1)){
                    count++;
                }
            }
        }

        return count;
    }
};",1454810238
darkKnight,nikhil94147,479,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& a, vector<vector<int>>& q) {
        int n=a.size();
        vector<int> pref(n+1,0);
        for(auto &i:q){
            pref[i[0]]++;
            pref[i[1]+1]--;
        }
        for(int i=1;i<=n;i++){
            pref[i]+=pref[i-1];
        }
        for(int i=0;i<n;i++){
            a[i]-=pref[i];
            a[i]=max(0,a[i]);
        }
        for(int i=0;i<n;i++){
            if(a[i]!=0){
                return false;
            }
        }
        return true;
    }
};",1454820389
darkKnight,nikhil94147,479,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& a, vector<vector<int>>& q) {
        int n=a.size();
        int m=q.size();
        if(all_of(a.begin(), a.end(), [](int x) { return x == 0; })){
            return 0;
        }
        
        auto ok=[&](int mid)->bool{
            vector<int> pref(n+1,0);
            vector<int> b=a;
            for(int i=0;i<mid;i++){
                pref[q[i][0]]+=q[i][2];
                pref[q[i][1]+1]-=q[i][2];
            }
            for(int i=1;i<=n;i++){
                pref[i]+=pref[i-1];
            }
            for(int i=0;i<n;i++){
                b[i]-=pref[i];
                b[i]=max(0,b[i]);
            }
            // for(auto &i:b)  cout<<i<<"" "";
            // cout<<'\n';
            for(int i=0;i<n;i++){
                if(b[i]!=0){
                    return false;
                }
            }
            return true;
        };
        
        // cout<<ok(2)<<'\n';
        
        int ans=m+5;
        int l=1,r=m;
        while(l<=r){
            int mid=(l+r)>>1;
            if(ok(mid)){
                ans=mid;
                r=mid-1;
            }else{
                l=mid+1;
            }
        }
        if(ans==m+5) ans=-1;
        return ans;
    }
};",1454839350
Jack Deng,dj3013158,480,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        n = len(nums)
        count = 0

        def simulate(start: int, direction: int) -> bool:
            arr = nums[:]
            curr = start
            while 0 <= curr < n:
                if arr[curr] == 0:
                    curr += direction
                else:
                    arr[curr] -= 1
                    direction *= -1
                    curr += direction
            return all(x == 0 for x in arr)

        for i in range(n):
            if nums[i] == 0:
                if simulate(i, -1):
                    count += 1
                if simulate(i, 1):
                    count += 1

        return count",1454806962
Jack Deng,dj3013158,480,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        n = len(nums)
        cnt = [0] * (n + 1)
        for l, r in queries:
            cnt[l] += 1
            if r + 1 < n:
                cnt[r + 1] -= 1
        for i in range(1, n):
            cnt[i] += cnt[i - 1]
        cnt = cnt[:n]
        for i in range(n):
            if nums[i] > cnt[i]:
                return False
        total_need = sum(nums)
        total_capacity = sum(r - l + 1 for l, r in queries)
        if total_need > total_capacity:
            return False
        return True",1454811423
Jack Deng,dj3013158,480,3643,python3,"class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        class Node:
            def __init__(self, l, r):
                self.l = l
                self.r = r
                self.left = None
                self.right = None
                self.max_val = 0
                self.lazy = 0

        def build(node):
            if node.l == node.r:
                node.max_val = nums[node.l]
                return
            mid = (node.l + node.r) // 2
            node.left = Node(node.l, mid)
            node.right = Node(mid + 1, node.r)
            build(node.left)
            build(node.right)
            node.max_val = max(node.left.max_val, node.right.max_val)

        def push(node):
            if node.lazy != 0 and node.left:
                for child in [node.left, node.right]:
                    child.max_val -= node.lazy
                    child.lazy += node.lazy
                node.lazy = 0

        def update(node, l, r, val):
            if node.r < l or node.l > r:
                return
            if l <= node.l and node.r <= r:
                node.max_val -= val
                node.lazy += val
                return
            push(node)
            update(node.left, l, r, val)
            update(node.right, l, r, val)
            node.max_val = max(node.left.max_val, node.right.max_val)

        n = len(nums)
        root = Node(0, n - 1)
        build(root)

        if root.max_val <= 0:
            return 0

        for idx, (l, r, val) in enumerate(queries):
            update(root, l, r, val)
            if root.max_val <= 0:
                return idx + 1
        if root.max_val > 0:
            return -1
        return len(queries)
",1454824754
Pawan,pawan_29,482,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int n=nums.size(),ans=0;
        vector<int> pre(n+5,0),suff(n+5,0);

        for(int i=0;i<n;i++){
            pre[i+1]=pre[i]+nums[i];
        }

        for(int i=n-1;i>=0;i--){
            suff[i]=suff[i+1]+nums[i];
        }

        for(int i=0;i<n;i++){
            if(nums[i]){
                continue;
            }

            if(abs(suff[i+1]-pre[i])==0){
                ans+=2;
            }else if(abs(suff[i+1]-pre[i])==1){
                ans+=1;
            }
        }
        return ans;
    }
};",1454809942
Pawan,pawan_29,482,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        map<int,int> mpp;
        int n=nums.size();
        for(auto query:queries){
            mpp[query[0]]++;
            mpp[query[1]+1]--;
        }

        int curr=0;

        for(int i=0;i<n;i++){
            if(mpp.find(i)!=mpp.end()){
                curr+=mpp[i];
            }

            if(nums[i]>curr){
                return false;
            }
        }
        return true;
    }
};",1454816655
Pawan,pawan_29,482,3643,cpp,"class Solution {
public:
    bool isPossible(vector<int>& nums,vector<vector<int>>& queries,int l){
        unordered_map<int,int> mpp;
        int n=nums.size();
        for(int i=0;i<l;i++){
            vector<int> query = queries[i];
            mpp[query[0]]+=query[2];
            mpp[query[1]+1]-=query[2];
        }

        int curr=0;

        for(int i=0;i<n;i++){
            if(mpp.find(i)!=mpp.end()){
                curr+=mpp[i];
            }

            if(nums[i]>curr){
                return false;
            }
        }
        return true;
    }
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n=queries.size();
        if(!isPossible(nums,queries,n)){
            return -1;
        }

        int l=0,r=n,ans;

        while(l<=r){
            int mid=(l+r)/2;

            if(isPossible(nums,queries,mid)){
                r=mid-1;
                ans=mid;
            }else{
                l=mid+1;
            }
        }
        return ans;
    }
};",1454824762
zeningc,zeningc,483,3616,java,"class Solution {
    public int countValidSelections(int[] nums) {
        int ans = 0;
        int sum = 0;
        for (int num : nums)
            sum += num;
        for (int i = 0; i < nums.length; i++)   {
            if (nums[i] != 0)
                continue;
            int[] t = nums.clone();
            int j = i;
            int d = 1;
            int cnt = 0;
            while (j >= 0 && j < t.length)  {
                j += d;
                if (j < 0 || j >= t.length)
                    break;
                if (t[j] == 0)
                    continue;
                t[j]--;
                cnt++;
                d = -d;
            }
            if (cnt == sum)
                ans++;
            j = i;
            d = -1;
            cnt = 0;
            t = nums.clone();
            while (j >= 0 && j < t.length)  {
                j += d;
                if (j < 0 || j >= t.length)
                    break;
                if (t[j] == 0)
                    continue;
                t[j]--;
                cnt++;
                d = -d;
            }
            if (cnt == sum)
                ans++;
        }
        
        return ans;
    }
}",1454808350
zeningc,zeningc,483,3639,java,"class Solution {
    public boolean isZeroArray(int[] nums, int[][] queries) {
        int n = nums.length;
        int[] cnt = new int[n + 1];
        for (int[] q : queries) {
            cnt[q[0]]++;
            cnt[q[1] + 1]--;
        }
        int cur = 0;
        for (int i = 0; i < n; i++) {
            cur += cnt[i];
            if (cur < nums[i])
                return false;
        }
        return true;
    }
}",1454810651
zeningc,zeningc,483,3643,java,"class Solution {
    public int minZeroArray(int[] nums, int[][] queries) {
        int sum = 0;
        for (int num : nums)
            sum += num;
        if (sum == 0)
            return 0;
        int lo = 0;
        int hi = queries.length - 1;
        while (lo <= hi)    {
            int mid = lo + (hi - lo) / 2;
            if (check(nums, queries, mid))
                hi = mid - 1;
            else
                lo = mid + 1;
        }
        return lo == queries.length ? -1 : lo + 1;
    }
    
    boolean check(int[] nums, int[][] queries, int mid) {
        int n = nums.length;
        int[] cnt = new int[n + 1];
        for (int i = 0; i <= mid; i++) {
            int[] q = queries[i];
            cnt[q[0]] += q[2];
            cnt[q[1] + 1] -= q[2];
        }
        int cur = 0;
        for (int i = 0; i < n; i++) {
            cur += cnt[i];
            if (cur < nums[i])
                return false;
        }
        return true;
    }
}",1454831999
Ash Ketchum,user8787Y,485,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        ans = 0
        for i in range(len(nums)):
            if nums[i] == 0:
                k = abs(sum(nums[:i]) - sum(nums[i:]))
                if k==0:
                    ans += 2
                if k==1:
                    ans += 1
                
        return ans",1454808745
Ash Ketchum,user8787Y,485,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        n, m = len(nums), len(queries)
        pre = [0]*(n+1)
        for l, r in queries:
            pre[l] += 1
            pre[r+1] -= 1
        for i in range(1, n+1):
            pre[i] += pre[i-1]
        for i in range(n):
            if nums[i] > pre[i]:
                return False
        return True",1454813809
Ash Ketchum,user8787Y,485,3643,python3,"class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        n, m = len(nums), len(queries)
        l, r = 0, m
        def isPoss(ind):
            pre = [0]*(n+1)
            for l, r, val in queries[:ind]:
                pre[l] += val
                pre[r+1] -= val
            for i in range(1, n+1):
                pre[i] += pre[i-1]
            for i in range(n):
                if nums[i] > pre[i]:
                    return False
            return True
        if not isPoss(r):
            return -1
        while l < r:
            mid = (l+r)//2
            if isPoss(mid):
                r = mid
            else:
                l = mid + 1
        return l",1454839524
IvanHugh,ivanc-e,486,3616,python3,"class Solution:  
    def countValidSelections(self, nums: List[int]) -> int:  
        n = len(nums)  
        
        def simulate(start: int, direction: int, nums_copy: List[int]) -> bool:  
            curr = start  
            
            while 0 <= curr < n:  
                if nums_copy[curr] == 0:  
                    curr += direction  
                else:  
                    nums_copy[curr] -= 1  
                    direction = -direction  
                    curr += direction  
            
            return all(num == 0 for num in nums_copy)  
        
        count = 0  
        for start in range(n):  
            if nums[start] == 0:  
                for direction in [1, -1]:  
                    nums_copy = nums.copy()  
                    if simulate(start, direction, nums_copy):  
                        count += 1  
        
        return count",1454809149
IvanHugh,ivanc-e,486,3639,python3,"class Solution:  
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:  
        n = len(nums)  
        counts = [0] * n  

        for l, r in queries:  
            counts[l] += 1  
            if r + 1 < n:  
                counts[r + 1] -= 1  

        for i in range(1, n):  
            counts[i] += counts[i - 1]  

        for i in range(n):  
            if nums[i] > counts[i]:  
                return False  
        return True",1454816294
IvanHugh,ivanc-e,486,3643,python3,"class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        n = len(nums)  
        m = len(queries)
        
        if all(v == 0 for v in nums):
            return 0
        
        def check(x) -> bool:
            counts = [0] * n  
            for l, r, v in queries[:x+1]:  
                counts[l] += v
                if r + 1 < n:  
                    counts[r + 1] -= v

            for i in range(1, n):  
                counts[i] += counts[i - 1]  

            for i in range(n):  
                if nums[i] > counts[i]:  
                    return False  
            return True
        
        lo, hi = 0, m-1
        while lo <= hi:
            mid = (lo + hi) >> 1
            if check(mid):
                hi = mid - 1
            else:
                lo = mid + 1
        if lo == m:
            return -1
        return lo+1
        ",1454824854
KUNAL KUMAR,KunalKuamr1001,487,3616,java,"class Solution {
    public int countValidSelections(int[] nums) {
        int cnt = 0;
        int n = nums.length;

        for (int start = 0; start < n; start++) {
            if (nums[start] == 0) {
                for (int direction : new int[]{1, -1}) {
                    int[] copy = nums.clone();
                    if (repeate(start, direction, copy)) {
                        cnt++;
                    }
                }
            }
        }

        return cnt;
    }

    private boolean repeate(int start, int direction, int[] copy) {
        int curr = start;
        int n = copy.length;

        while (curr >= 0 && curr < n) {
            if (copy[curr] == 0) {
                curr += direction;
            } else {
                copy[curr]--;
                direction = -direction;
                curr += direction;
            }
        }

        for (int i = 0; i < n; i++) {
            if (copy[i] != 0) {
                return false;
            }
        }

        return true;
    }
}
",1454828497
KUNAL KUMAR,KunalKuamr1001,487,3639,java,"class Solution {
    public boolean isZeroArray(int[] nums, int[][] queries) {
        int n = nums.length;
        int[] diff = new int[n + 1];

        for (int[] query : queries) {
            int l = query[0];
            int r = query[1];
            diff[l] += 1;
            if (r + 1 < n) {
                diff[r + 1] -= 1;
            }
        }

        int coverage = 0;
        for (int i = 0; i < n; i++) {
            coverage += diff[i];
            if (nums[i] > coverage) {
                return false;
            }
        }

        return true;
    }
}
",1454831571
KUNAL KUMAR,KunalKuamr1001,487,3643,java,"class Solution {
    public int minZeroArray(int[] nums, int[][] queries) {
        int n = nums.length;
        int[] curr = nums.clone();
        int[] zeroArr = new int[n];
        
        if (isZero(curr)) {
            System.arraycopy(curr, 0, zeroArr, 0, n);
            return 0;
        }

        boolean midBool = false;
        int left = 0, right = queries.length;
        int ans = -1;

        while (left <= right) {
            int mid = (left + right) / 2;

            if (canBeZero(mid, queries, curr)) {
                ans = mid;
                right = mid - 1;
            } else {
                left = mid + 1;
            }

            if (!midBool && mid == queries.length / 2) {
                int[] diff = new int[n + 1];
                for (int i = 0; i < mid; i++) {
                    int l = queries[i][0], r = queries[i][1], val = queries[i][2];
                    diff[l] += val;
                    if (r + 1 < n) diff[r + 1] -= val;
                }

                int total = 0;
                for (int i = 0; i < n; i++) {
                    total += diff[i];
                    zeroArr[i] = Math.max(0, curr[i] - total);
                }
                midBool = true;
            }
        }

        return ans != -1 ? ans : -1;
    }

    private boolean canBeZero(int k, int[][] queries, int[] curr) {
        int n = curr.length;
        int[] diff = new int[n + 1];

        for (int i = 0; i < k; i++) {
            int l = queries[i][0], r = queries[i][1], val = queries[i][2];
            diff[l] += val;
            if (r + 1 < n) diff[r + 1] -= val;
        }

        int total = 0;
        for (int i = 0; i < n; i++) {
            total += diff[i];
            if (total < curr[i]) return false;
        }

        return true;
    }

    private boolean isZero(int[] nums) {
        for (int num : nums) {
            if (num != 0) return false;
        }
        return true;
    }
}
",1454839534
mui-mit-hanni,mui-mit-hanni,489,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int n = nums.size();
        int validCount = 0;
        int u=0;
        for(auto x:nums) u+=x; 
        auto allZero = [](const vector<int>& arr) {
            for (int num : arr) {
                if (num != 0) return false;
            }
            return true;
        };

        for (int start = 0; start < n; ++start) {
            if (nums[start] != 0) continue; 

            for (int direction : {-1, 1}) {
                vector<int> temp = nums; 
                int curr = start;
                int dir = direction;

                while (curr >= 0 && curr < n) {
                    if (temp[curr] == 0) {
                        curr += dir;
                    } else {
                        temp[curr]--;
                        dir = -dir;
                        curr += dir;
                    }
                }

                if (allZero(temp)) {
                    ++validCount;
                }
            }
        }

        return validCount;
    }
};
",1454809202
mui-mit-hanni,mui-mit-hanni,489,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        vector<int> diff(n + 1, 0); 
        for (const auto& query : queries) {
            int li = query[0];
            int ri = query[1];
            diff[li] -= 1;      
            if (ri + 1 < n) {
                diff[ri + 1] += 1;
            }
        }
        int currDecrement = 0;
        for (int i = 0; i < n; ++i) {
            currDecrement += diff[i];
            if (nums[i] + currDecrement > 0) {
                return false; 
            }
        }

        return true;
    }
};
",1454820925
mui-mit-hanni,mui-mit-hanni,489,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        int q = queries.size();
        vector<int> x = nums; 
        auto check = [&](int k) {
            vector<int> diff(n + 1, 0);
            for (int i = 0; i < k; ++i) {
                int li = queries[i][0], ri = queries[i][1], vali = queries[i][2];
                diff[li] -= vali;
                if (ri + 1 < n) {
                    diff[ri + 1] += vali;
                }
            }
            int currDecrement = 0;
            for (int i = 0; i < n; ++i) {
                currDecrement += diff[i];
                if (x[i] + currDecrement > 0) {
                    return false; 
                }
            }
            return true;
        };

        int left = 0, right = q, result = -1;
        while (left <= right) {
            int mid = left + (right - left) / 2;
            if (check(mid)) {
                result = mid; 
                right = mid - 1;
            } else {
                left = mid + 1;
            }
        }

        return result;
    }
};
",1454824888
Pankajkumar21,Pankajkumar21,490,3616,cpp,"class Solution {
public:
    
    int countValidSelections(vector<int>& nums) {
         int n = nums.size(), cnt = 0;
    for (int i = 0; i < n; ++i)
    {
        if (nums[i] == 0)
        {
            for (int d = 0; d < 2; ++d)
            {
                vector<int> tmp = nums;
                int curr = i, step = (d == 0) ? -1 : 1;
                while (curr >= 0 && curr < n)
                {
                    if (tmp[curr] == 0)
                        curr += step;
                    else
                    {
                        tmp[curr]--;
                        step = -step;
                        curr += step;
                    }
                }
                bool  check = true;
                for (int x : tmp)
                {
                    if (x != 0)
                    {
                         check = false;
                        break;
                    }
                }
                if ( check)
                    cnt++;
            }
        }
    }
    return cnt;
    }
};",1454813638
Pankajkumar21,Pankajkumar21,490,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        
        int n=nums.size();
        vector<int>pref(n,0);
        for(auto it:queries){
            int l=it[0],r=it[1];
            pref[l]-=1;
            if(r+1<n)pref[r+1]+=1;
        }
        int p=0;
        for(int i=0;i<n;i++){
            cout<<pref[i]<<"" "";
            p+=pref[i];
            if(nums[i]+p>0)return 0;
        }
        return 1;
    }
};",1454822192
Pankajkumar21,Pankajkumar21,490,3643,cpp,"class Solution {
public:
    bool check(vector<int>& nums) {
        for (int x : nums) {
            if (x != 0)
                return false;
        }
        return true;
    }

    bool f(vector<int> nums, const vector<vector<int>>& queries, int k) {
        vector<int> pref(nums.size() + 1, 0);

        for (int i = 0; i < k; ++i) {
            int l = queries[i][0], r = queries[i][1], val = queries[i][2];
            pref[l] -= val;
            if (r + 1 < nums.size())
                pref[r + 1] += val;
        }

        int curr = 0;
        for (int i = 0; i < nums.size(); ++i) {
            curr += pref[i];
            nums[i] += curr;
            if (nums[i] < 0)
                nums[i] = 0;
        }

        return check(nums);
    }
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        bool flag=1;
        for(auto it:nums){
            if(it>0)flag=0;
        }
        if(flag)return 0;
        int l = 1, r = queries.size(), ans = -1;

        while (l <= r) {
            int mid = l + (r - l) / 2;
            if (f(nums, queries, mid)) {
                ans = mid;
                r = mid - 1;
            } else {
                l = mid + 1;
            }
        }

        return ans;
    }
};",1454832124
abz-codes,abz-codes,491,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int ans = 0;
        for (int i = 0; i < nums.size(); i++) {
            if (nums[i] == 0)
            ans += works(nums, i, 1) + works(nums, i, -1);
        }
        return ans;
    }

    bool works(vector<int> nums, int curr, int dir) {
        int n = nums.size();

        while (curr >= 0 && curr < n) {
            if (nums[curr] == 0) {
                curr += dir;
            } else{
                nums[curr]--;
                dir*=-1;
                curr += dir;
            }
        }
        for (auto& c: nums) if (c != 0) return false;
        return true;
    }
};",1454808160
abz-codes,abz-codes,491,3639,cpp,"struct Fen{
    vector<long long> tt;
    int n;
    Fen() {}
    Fen(int nn) : n(nn+5) {
        tt.resize(n+3, 0);
    }
    void init(int nn) {
        n = nn+5;
        tt.resize(n+3, 0);
    }

    //add to [i, n]
    void add(int i, int dx) {
        i++;
        while (i <= n) {
            tt[i] += dx;
            i += i & -i;
        }
    }
    //adds to a range [l, r]
    void addR(int l, int r, int dx) {
        add(l, dx);
        add(r+1, -dx);
    }
    //gets prefix sum [0, i]
    long long getR(int i) const {
        i++;
        long long ans = 0;
        i = min(i, n);
        while (i > 0) {
            ans += tt[i];
            i -= i & -i;
        }
        return ans;
    }

    //gets value at index i
    long long get(int i) const {
        return getR(i) - getR(i - 1);
    }
};
class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        Fen fenny(n);
        for (auto& c: queries) {
            auto l = c[0] + 1;
            auto r = c[1] + 1;
            fenny.addR(l, r, 1);
        }
        for (int i = 1; i <= n; i++) {
            int cnt = fenny.getR(i);
            if (cnt < nums[i-1]) return false;
        }
        return true;
    }
};",1454813404
abz-codes,abz-codes,491,3643,cpp,"#ifndef ATCODER_INTERNAL_BITOP_HPP
#define ATCODER_INTERNAL_BITOP_HPP 1

#ifdef _MSC_VER
#include <intrin.h>
#endif

namespace atcoder {

namespace internal {

// @param n `0 <= n`
// @return minimum non-negative `x` s.t. `n <= 2**x`
int ceil_pow2(int n) {
    int x = 0;
    while ((1U << x) < (unsigned int)(n)) x++;
    return x;
}

// @param n `1 <= n`
// @return minimum non-negative `x` s.t. `(n & (1 << x)) != 0`
constexpr int bsf_constexpr(unsigned int n) {
    int x = 0;
    while (!(n & (1 << x))) x++;
    return x;
}

// @param n `1 <= n`
// @return minimum non-negative `x` s.t. `(n & (1 << x)) != 0`
int bsf(unsigned int n) {
#ifdef _MSC_VER
    unsigned long index;
    _BitScanForward(&index, n);
    return index;
#else
    return __builtin_ctz(n);
#endif
}

}  // namespace internal

}  // namespace atcoder

#endif  // ATCODER_INTERNAL_BITOP_HPP

#ifndef ATCODER_LAZYSEGTREE_HPP
#define ATCODER_LAZYSEGTREE_HPP 1

#include <algorithm>
#include <cassert>
#include <iostream>
#include <vector>

namespace atcoder {

template <class S,
          S (*op)(S, S),
          S (*e)(),
          class F,
          S (*mapping)(F, S),
          F (*composition)(F, F),
          F (*id)()>
struct lazy_segtree {
  public:
    lazy_segtree() : lazy_segtree(0) {}
    explicit lazy_segtree(int n) : lazy_segtree(std::vector<S>(n, e())) {}
    explicit lazy_segtree(const std::vector<S>& v) : _n(int(v.size())) {
        log = internal::ceil_pow2(_n);
        size = 1 << log;
        d = std::vector<S>(2 * size, e());
        lz = std::vector<F>(size, id());
        for (int i = 0; i < _n; i++) d[size + i] = v[i];
        for (int i = size - 1; i >= 1; i--) {
            update(i);
        }
    }

    void set(int p, S x) {
        assert(0 <= p && p < _n);
        p += size;
        for (int i = log; i >= 1; i--) push(p >> i);
        d[p] = x;
        for (int i = 1; i <= log; i++) update(p >> i);
    }

    S get(int p) {
        assert(0 <= p && p < _n);
        p += size;
        for (int i = log; i >= 1; i--) push(p >> i);
        return d[p];
    }

    S prod(int l, int r) {
        assert(0 <= l && l <= r && r <= _n);
        if (l == r) return e();

        l += size;
        r += size;

        for (int i = log; i >= 1; i--) {
            if (((l >> i) << i) != l) push(l >> i);
            if (((r >> i) << i) != r) push((r - 1) >> i);
        }

        S sml = e(), smr = e();
        while (l < r) {
            if (l & 1) sml = op(sml, d[l++]);
            if (r & 1) smr = op(d[--r], smr);
            l >>= 1;
            r >>= 1;
        }

        return op(sml, smr);
    }

    S all_prod() { return d[1]; }

    void apply(int p, F f) {
        assert(0 <= p && p < _n);
        p += size;
        for (int i = log; i >= 1; i--) push(p >> i);
        d[p] = mapping(f, d[p]);
        for (int i = 1; i <= log; i++) update(p >> i);
    }
    void apply(int l, int r, F f) {
        assert(0 <= l && l <= r && r <= _n);
        if (l == r) return;

        l += size;
        r += size;

        for (int i = log; i >= 1; i--) {
            if (((l >> i) << i) != l) push(l >> i);
            if (((r >> i) << i) != r) push((r - 1) >> i);
        }

        {
            int l2 = l, r2 = r;
            while (l < r) {
                if (l & 1) all_apply(l++, f);
                if (r & 1) all_apply(--r, f);
                l >>= 1;
                r >>= 1;
            }
            l = l2;
            r = r2;
        }

        for (int i = 1; i <= log; i++) {
            if (((l >> i) << i) != l) update(l >> i);
            if (((r >> i) << i) != r) update((r - 1) >> i);
        }
    }

    template <bool (*g)(S)> int max_right(int l) {
        return max_right(l, [](S x) { return g(x); });
    }
    template <class G> int max_right(int l, G g) {
        assert(0 <= l && l <= _n);
        assert(g(e()));
        if (l == _n) return _n;
        l += size;
        for (int i = log; i >= 1; i--) push(l >> i);
        S sm = e();
        do {
            while (l % 2 == 0) l >>= 1;
            if (!g(op(sm, d[l]))) {
                while (l < size) {
                    push(l);
                    l = (2 * l);
                    if (g(op(sm, d[l]))) {
                        sm = op(sm, d[l]);
                        l++;
                    }
                }
                return l - size;
            }
            sm = op(sm, d[l]);
            l++;
        } while ((l & -l) != l);
        return _n;
    }

    template <bool (*g)(S)> int min_left(int r) {
        return min_left(r, [](S x) { return g(x); });
    }
    template <class G> int min_left(int r, G g) {
        assert(0 <= r && r <= _n);
        assert(g(e()));
        if (r == 0) return 0;
        r += size;
        for (int i = log; i >= 1; i--) push((r - 1) >> i);
        S sm = e();
        do {
            r--;
            while (r > 1 && (r % 2)) r >>= 1;
            if (!g(op(d[r], sm))) {
                while (r < size) {
                    push(r);
                    r = (2 * r + 1);
                    if (g(op(d[r], sm))) {
                        sm = op(d[r], sm);
                        r--;
                    }
                }
                return r + 1 - size;
            }
            sm = op(d[r], sm);
        } while ((r & -r) != r);
        return 0;
    }

  private:
    int _n, size, log;
    std::vector<S> d;
    std::vector<F> lz;

    void update(int k) { d[k] = op(d[2 * k], d[2 * k + 1]); }
    void all_apply(int k, F f) {
        d[k] = mapping(f, d[k]);
        if (k < size) lz[k] = composition(f, lz[k]);
    }
    void push(int k) {
        all_apply(2 * k, lz[k]);
        all_apply(2 * k + 1, lz[k]);
        lz[k] = id();
    }
};

}  // namespace atcoder

#endif  // ATCODER_LAZYSEGTREE_HPP

using namespace atcoder;

using S = int;
using F = int;
S op(S l, S r) {
    return max(l, r);
}
S e() {
    return 0;
}

S mapping(F l, S r) {
    r -= l;
    return r;
}

F composition(F l, F r) {
    return l + r;
}
F id() {
    return 0;
}

class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        {
            bool ok = true;
            for (auto& c: nums) if (c != 0) {
                ok = false;
                break;
            }
            if (ok) return 0;
        }
        lazy_segtree<S, op, e, F, mapping, composition, id> seg(nums);
        int ans = INT_MAX;
        int k = 0;
        for (auto& c : queries) {
            auto l = c[0];
            auto r = c[1];
            auto val = c[2];
            int before = seg.prod(l, r+1);
            seg.apply(l, r+1, val);
            int after = seg.prod(l,r+1);
            //cout << k << "": "" << before << "", "" << after << '\n';
            if (before > 0 && after <= 0) {
                ans = k;
            }
            k++;
        }
        for (int i = 0; i < nums.size(); i++) {
            if (seg.get(i) > 0) return -1;
        }
        return ans+1;
    }
};",1454839656
Ankur kumar,ankuraj_27,493,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int n=nums.size(),cnt=0;
        for(int i=0;i<n;i++) {
            if(nums[i]==0) {
                int sum1=0,sum2=0;
                for(int j=0;j<i;j++) {
                    sum1+=nums[j];
                }
                for(int j=i+1;j<n;j++) {
                    sum2+=nums[j];
                }
                if(sum1==sum2) cnt+=2;
                else if(abs(sum1-sum2)==1) cnt++;
            }
        }
        return cnt;
    }
};",1454812634
Ankur kumar,ankuraj_27,493,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& q) {
        int n=nums.size();
        vector<int> v(n+1);
        for(int i=0;i<q.size();i++) {
            v[q[i][0]]++;
            v[q[i][1]+1]--;
        }
        for(int i=1;i<n;i++) v[i]+=v[i-1];
        for(int i=0;i<n;i++) {
            if(v[i]<nums[i]) return false;
        }
        return true;
    }
};",1454820033
Ankur kumar,ankuraj_27,493,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& q) {
        long long n=nums.size();
        long long s=1,e=q.size(),mid,ans=-1;
        int a=count(nums.begin(),nums.end(),0);
        if(a==n) return 0;
        while(s<=e) {
            mid=(s+e)/2;
            vector<long long> v(n+1);
            int x=1;
            for(int i=0;i<mid;i++) {
                v[q[i][0]]+=q[i][2];
                v[q[i][1]+1]-=q[i][2];
            }
            for(int i=1;i<n;i++) v[i]+=v[i-1];
            for(int i=0;i<n;i++) {
                if(v[i]<nums[i]) {
                    x=0;
                    break;
                }
            }
            if(x) ans=mid,e=mid-1;
            else s=mid+1;
        }
        return ans;
    }
};",1454839676
Manav Majithia,manavmajithia6,494,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& arr) {
        int n = arr.size();
        int ans = 0;
        for(int i = 0;i < n;i++){
            if(arr[i] == 0){
                int s1 = 0,s2 = 0;
                for(int j = i - 1;j >= 0;j--)
                    s1 += arr[j];
                for(int j = i + 1;j < n;j++)
                    s2 += arr[j];
                if(s1 == s2)
                    ans += 2;
                else if(abs(s1 - s2) == 1)
                    ans++;
            }
        }
        return ans;
    }
};",1454812527
Manav Majithia,manavmajithia6,494,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& q) {
        int n = nums.size();
        vector<long long> arr(n);
        
        arr.push_back(0ll);
        for(int i = 0;i < q.size();i++){
            arr[q[i][0]]--;
            arr[q[i][1] + 1]++;
        }
        for(int i = 1;i < n;i++)
            arr[i] += arr[i-1];
        for(int i = 0;i < n;i++){
            // arr[i] = (long long)nums[i];
            arr[i] += nums[i];
        }
        for(int i = 0;i < n;i++){
            // cout<<arr[i]<<"" ""<<i<<""\n"";
            if(arr[i] > 0)
                return false;
        }
        return true;
    }
};",1454830234
Manav Majithia,manavmajithia6,494,3643,cpp,"class Solution {
public:
    bool check(vector<int>& nums, vector<vector<int>>& q, int mid){
        int n = nums.size();
        vector<long long> arr(n);
        
        arr.push_back(0ll);
        for(int i = 0;i < mid;i++){
            arr[q[i][0]] -= q[i][2];
            arr[q[i][1] + 1] += q[i][2];
        }
        for(int i = 1;i < n;i++)
            arr[i] += arr[i-1];
        for(int i = 0;i < n;i++){
            // arr[i] = (long long)nums[i];
            arr[i] += nums[i];
        }
        for(int i = 0;i < n;i++){
            // cout<<arr[i]<<"" ""<<i<<""\n"";
            if(arr[i] > 0)
                return false;
        }
        return true;
    }
    int minZeroArray(vector<int>& nums, vector<vector<int>>& q) {
        int n = nums.size();
        int ans = -1;
        int l = 0,r = q.size();
        while(l <= r){
            int mid = (l + r)/2;
            if(check(nums, q, mid)){
                ans = mid;
                r = mid - 1;
            }
            else
                l = mid + 1;
        }
        return ans;
    }
};",1454839756
Shraddha Gulati,shraddha_1707,495,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int n = nums.size(), ans = 0;
        for (int i = 0; i < n; i++) {
            if (nums[i] != 0)
                continue;

            for (int dir : {-1, 1}) {
                vector<int> temp = nums;
                int curr = i, d = dir;
                while (curr >= 0 && curr < n) {
                    if (temp[curr] == 0) {
                        curr += d;
                    } else {
                        temp[curr]--;
                        d = -d;
                        curr += d;
                    }
                }
                bool flag = true;
                for (auto x : temp) {
                    if (x != 0) {
                        flag = false;
                        break;
                    }
                }
                if (flag)
                    ans += 1;
            }
        }
        return ans;
    }
};
",1454808964
Shraddha Gulati,shraddha_1707,495,3639,cpp,"#include <bits/stdc++.h>
using namespace std;
#define ll long long int

class SegTree {
public:
    ll n;
    vector<ll> seg, lazy;

    SegTree(ll N) {
        n = N;
        seg.resize(4 * n);
        lazy.resize(4 * n, 0);
    }

    void build(ll ind, ll low, ll high, vector<int> &a) {
        if (low == high) {
            seg[ind] = a[low];
            return;
        }
        ll mid = (low + high) / 2;
        build(ind * 2 + 1, low, mid, a);
        build(ind * 2 + 2, mid + 1, high, a);
        seg[ind] = max(seg[2 * ind + 1], seg[2 * ind + 2]);
    }

    ll query(ll ind, ll low, ll high, ll l, ll r) {

        if (lazy[ind] != 0) {
            seg[ind] += lazy[ind];
            if (low != high) {
                lazy[2 * ind + 1] += lazy[ind];
                lazy[2 * ind + 2] += lazy[ind];
            }
            lazy[ind] = 0;
        }

        if (high < l || r < low) {
            return LLONG_MIN; 
        }


        if (low >= l && high <= r) {
            return seg[ind];
        }


        ll mid = (low + high) / 2;
        ll left = query(2 * ind + 1, low, mid, l, r);
        ll right = query(2 * ind + 2, mid + 1, high, l, r);
        return max(left, right);
    }

    void update(ll ind, ll low, ll high, ll l, ll r, ll val) {

        if (lazy[ind] != 0) {
            seg[ind] += lazy[ind];
            if (low != high) {
                lazy[2 * ind + 1] += lazy[ind];
                lazy[2 * ind + 2] += lazy[ind];
            }
            lazy[ind] = 0;
        }

        if (high < l || r < low) {
            return;
        }

        // Complete overlap
        if (low >= l && high <= r) {
            seg[ind] += val;
            if (low != high) {
                lazy[2 * ind + 1] += val;
                lazy[2 * ind + 2] += val;
            }
            return;
        }

        // Partial overlap
        ll mid = (low + high) / 2;
        update(2 * ind + 1, low, mid, l, r, val);
        update(2 * ind + 2, mid + 1, high, l, r, val);
        seg[ind] = max(seg[2 * ind + 1], seg[2 * ind + 2]);
    }
};

class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        SegTree s1(n);
        s1.build(0, 0, n - 1, nums);
        for (int i = 0; i < queries.size(); i++) {
            ll a = queries[i][0];
            ll b = queries[i][1];
            ll u = -1; 
            s1.update(0, 0, n - 1, a, b, u);
        }
        ll maxValue = s1.query(0, 0, n - 1, 0, n - 1);
        cout << maxValue << endl;
        return maxValue <= 0; 
    }
};
",1454821889
Shraddha Gulati,shraddha_1707,495,3643,cpp,"#include <bits/stdc++.h>
using namespace std;
#define ll long long int

class SegTree {
public:
    ll n;
    vector<ll> seg, lazy;

    SegTree(ll N) {
        n = N;
        seg.resize(4 * n);
        lazy.resize(4 * n, 0);
    }

    void build(ll ind, ll low, ll high, vector<int> &a) {
        if (low == high) {
            seg[ind] = a[low];
            return;
        }
        ll mid = (low + high) / 2;
        build(ind * 2 + 1, low, mid, a);
        build(ind * 2 + 2, mid + 1, high, a);
        seg[ind] = max(seg[2 * ind + 1], seg[2 * ind + 2]);
    }

    ll query(ll ind, ll low, ll high, ll l, ll r) {

        if (lazy[ind] != 0) {
            seg[ind] += lazy[ind];
            if (low != high) {
                lazy[2 * ind + 1] += lazy[ind];
                lazy[2 * ind + 2] += lazy[ind];
            }
            lazy[ind] = 0;
        }

        if (high < l || r < low) {
            return LLONG_MIN; 
        }


        if (low >= l && high <= r) {
            return seg[ind];
        }


        ll mid = (low + high) / 2;
        ll left = query(2 * ind + 1, low, mid, l, r);
        ll right = query(2 * ind + 2, mid + 1, high, l, r);
        return max(left, right);
    }

    void update(ll ind, ll low, ll high, ll l, ll r, ll val) {

        if (lazy[ind] != 0) {
            seg[ind] += lazy[ind];
            if (low != high) {
                lazy[2 * ind + 1] += lazy[ind];
                lazy[2 * ind + 2] += lazy[ind];
            }
            lazy[ind] = 0;
        }

        if (high < l || r < low) {
            return;
        }

        // Complete overlap
        if (low >= l && high <= r) {
            seg[ind] += val;
            if (low != high) {
                lazy[2 * ind + 1] += val;
                lazy[2 * ind + 2] += val;
            }
            return;
        }

        // Partial overlap
        ll mid = (low + high) / 2;
        update(2 * ind + 1, low, mid, l, r, val);
        update(2 * ind + 2, mid + 1, high, l, r, val);
        seg[ind] = max(seg[2 * ind + 1], seg[2 * ind + 2]);
    }
};

class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        SegTree s1(n);
        s1.build(0, 0, n - 1, nums);
        ll maxValue = s1.query(0, 0, n - 1, 0, n - 1);
        if (maxValue <= 0) {
            return 0;
        }
        for (int k = 0; k < queries.size(); k++) {
            int l = queries[k][0];
            int r = queries[k][1];
            int val = -queries[k][2];
            s1.update(0, 0, n - 1, l, r, val);
            ll maxValue = s1.query(0, 0, n - 1, 0, n - 1);
            if (maxValue <= 0) {
                return k + 1; 
            }
        }
        return -1; 
    }
};
",1454832330
sunsq,sunsq,496,3616,java,"class Solution {
    public int countValidSelections(int[] nums) {
        int res = 0;
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] == 0) {
                if (can(nums.clone(), i, 1)) {
                    res++;
                }
                if (can(nums.clone(), i, -1)) {
                    res++;
                }
            }
        }
        return res;
    }

    private boolean can(int[] nums, int i, int d) {
        while (i >= 0 && i < nums.length) {
            if (nums[i] != 0) {
                nums[i]--;
                d = -d;
            }
            i += d;
        }
        for (int x : nums) {
            if (x > 0) {
                return false;
            }
        }
        return true;
    }
}",1454809679
sunsq,sunsq,496,3639,java,"class Solution {
    public boolean isZeroArray(int[] nums, int[][] queries) {
        int n = nums.length;
        int[] diff = new int[n + 1];
        for (int[] q : queries) {
            diff[q[0]]++;
            diff[q[1] + 1]--;
        }
        int sum = 0;
        for (int i = 0; i < n; i++) {
            sum += diff[i];
            if (nums[i] > sum) {
                return false;
            }
        }
        return true;
    }
}",1454814766
sunsq,sunsq,496,3643,java,"class Solution {
    public int minZeroArray(int[] nums, int[][] queries) {
        int lo = 0;
        int hi = queries.length + 1;
        while (lo < hi) {
            int mid = lo + (hi - lo) / 2;
            if (can(nums, queries, mid)) {
                hi = mid;
            } else {
                lo = mid + 1;
            }
        }
        return lo == queries.length + 1 ? -1 : lo;
    }

    private boolean can(int[] nums, int[][] queries, int k) {
        int n = nums.length;
        int[] diff = new int[n + 1];
        for (int i = 0; i < k; i++) {
            int[] q = queries[i];
            diff[q[0]] += q[2];
            diff[q[1] + 1] -= q[2];
        }
        // System.out.println(k + "" "" + Arrays.toString(diff));
        int sum = 0;
        for (int i = 0; i < n; i++) {
            sum += diff[i];
            if (nums[i] > sum) {
                return false;
            }
        }
        return true;
    }
}

/*

[7,6,8]
[[0,0,2],[0,1,5],[2,2,5],[0,2,4]]

4

*/",1454832390
Aryabhatta Aryan,aryabhatta0,497,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int n = nums.size(), result = 0;

        auto simulate = [&](int start, int direction) {
            vector<int> temp = nums;
            int curr = start;
            while (curr >= 0 && curr < n) {
                if (temp[curr] == 0) {
                    curr += direction;
                } else {
                    temp[curr]--;
                    direction = -direction;
                    curr += direction;
                }
            }
            return all_of(temp.begin(), temp.end(), [](int x) { return x == 0; });
        };

        for (int i = 0; i < n; i++) {
            if (nums[i] == 0) {
                result += simulate(i, 1);
                result += simulate(i, -1);
            }
        }
        return result;
    }
};
",1454809350
Aryabhatta Aryan,aryabhatta0,497,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        // < 0 is allowed
        int n = nums.size();
        vector<int> pre(n, 0);
        for(auto it: queries) {
            pre[it[0]]--;
            if (it[1]<n-1) pre[it[1]+1]++;
        }

        for(int i=1; i<n; i++) pre[i] += pre[i-1];
        for(int i=0; i<n; i++) {
            if(nums[i]+pre[i]>0) return false;
        }
        return true;
    }
};
",1454818960
Aryabhatta Aryan,aryabhatta0,497,3643,cpp,"class Solution {
public:
    bool check(vector<int>& nums, vector<vector<int>>& queries, int k) {
        int n = nums.size();
        vector<int> pre(n+1, 0);
        for(int i=0; i<k; i++) {
            pre[queries[i][0]] -= queries[i][2];
            pre[queries[i][1]+1] += queries[i][2];
        }

        for(int i=1; i<n; i++) pre[i] += pre[i-1];
        for(int i=0; i<n; i++) {
            if(nums[i]+pre[i]>0) return false;
        }
        return true;
    }

    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {

        // har query ke baad prefix sum? No!
        int m = queries.size();
        int lo=0, hi=m;
        int ans=-1;
        while(lo<=hi) {
            int mid = lo + (hi-lo)/2;
            if(check(nums, queries, mid)) {
                ans = mid;
                hi = mid-1;
            } else lo = mid+1;
        }

        return ans;
    }
};",1454839825
Vlad,votrubac,498,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int res = 0;
        int suml = 0, sumr = accumulate(begin(nums), end(nums), 0);
        for (int i = 0; i < nums.size(); ++i) {
            suml += nums[i];
            sumr -= nums[i];
            if (nums[i] == 0) {
                if (suml == sumr)
                    res += 2;
                else if (abs(suml - sumr) == 1)
                    res += 1;
            }
        }
        return res;
    }
};",1454809075
Vlad,votrubac,498,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        vector<int> line(nums.size() + 1);
        for (auto &q : queries) {
            ++line[q[0]];
            --line[q[1] + 1];
        }
        int cur = 0;
        for (int i = 0; i < nums.size(); ++i) {
            cur += line[i];
            if (nums[i] > cur)
                return false;
        }
        return true;
    }
};",1454816730
Vlad,votrubac,498,3643,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& q, int right) {
        vector<int> line(nums.size() + 1);
        for (int i = 0; i < right; ++i) {
            line[q[i][0]] += q[i][2];
            line[q[i][1] + 1] -= q[i][2];
        }
        int cur = 0;
        for (int i = 0; i < nums.size(); ++i) {
            cur += line[i];
            if (nums[i] > cur)
                return false;
        }
        return true;
    }    
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int l = 0, r = queries.size() + 1;
        while (l < r) {
            int m = (l + r) / 2;
            if (isZeroArray(nums, queries, m)) {
                r = m;
            }
            else {
                l = m + 1;
            }
        }
        return l <= queries.size() ? l : -1;
    }
};",1454825283
TJC,Chiouchiouok,500,3616,cpp,"class Solution {
    bool allzero(vector<int>& tmp) {
        for (int num : tmp) {
            if (num != 0) {
                return false;
            }
        }

        return true;
    }

    void process(vector<int>& nums, int cur, int dir) {
        if (cur < 0 || cur >= nums.size()) {
            return;
        }

        if (nums[cur] == 0) {
            process(nums, cur + dir, dir);
        } else if (nums[cur] > 0) {
            nums[cur]--;
            dir = -dir;
            process(nums, cur + dir, dir);
        }
    }


public:
    int countValidSelections(vector<int>& nums) {
        int ret = 0;
        int n = nums.size();

        for (int i = 0; i < n; i++) {
            if (nums[i] != 0) {
                continue;
            }
            auto tmp1 = nums;
            process(tmp1, i, 1);
            
            if (allzero(tmp1)) {
                ret++;
            }
            auto tmp2 = nums;
            process(tmp2, i, -1);
            if (allzero(tmp2)) {
                ret++;
            }
            
        }

        return ret;
    }
};",1454813405
TJC,Chiouchiouok,500,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        vector<int> start(n, 0);
        vector<int> end(n, 0);

        for (auto q : queries) {
            start[q[0]]++;
            end[q[1]]++;
        }

        vector<int> v(n);

        int count = 0;

        for (int i = 0; i < n; i++) {
            count += start[i];
            v[i] = count;
            count -= end[i];

            if (v[i] < nums[i]) {
                return false;
            }
        }

        return true;

        
    }
};


// 0   2
//   1   3

//     count",1454824658
TJC,Chiouchiouok,500,3643,cpp,"class Solution {
    bool helper(vector<int>& nums, vector<vector<int>>& queries, int k) {
        
        int n = nums.size();
        
        vector<int> start(n, 0);
        vector<int> end(n, 0);
        
        for (int i = 0; i < k; i++) {
            auto q = queries[i];
            start[q[0]] += q[2];
            end[q[1]] += q[2];
        }

        int count = 0;
        
        for (int i = 0; i < n; i++) {
            count += start[i];

            if (count < nums[i]) {
                return false;
            }
            
            count -= end[i];
        }

        return true;
    }
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        
        if (!helper(nums, queries, queries.size())) {
            return -1;
        }

        int left = 0;
        int right = queries.size();

        while (left < right) {
            int mid = left + (right - left) / 2;

            if (helper(nums, queries, mid)) {
                right = mid;
            } else {
                left = mid + 1;
            }
        }

        return left;
        
    }
};",1454839989
Abhay_Ps1,Abhay_Ps1,501,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int size = nums.size();
int countValid = 0;

// Function to simulate the process given a start index and direction
auto runSimulation = [&](int startIdx, int moveDirection) {
    vector<int> numsCopy = nums;  // Work with a copy of the original array
    int currentIndex = startIdx;

    while (currentIndex >= 0 && currentIndex < size) {
        if (numsCopy[currentIndex] == 0) {
            currentIndex += moveDirection;  // Move in the specified direction
        } else {
            numsCopy[currentIndex]--;   // Decrement the value at current index
            moveDirection = -moveDirection;  // Reverse the direction
            currentIndex += moveDirection;  // Move in the new direction
        }
    }

    // Check if all elements are zero after the simulation
    for (int val : numsCopy) {
        if (val != 0) return false;
    }
    return true;
};

// Iterate through all indices to check where nums[i] is 0
for (int i = 0; i < size; ++i) {
    if (nums[i] == 0) {
        // Try both directions (left and right) from the current index
        if (runSimulation(i, -1)) countValid++;
        if (runSimulation(i, 1)) countValid++;
    }
}

return countValid;

    }
};",1454832628
Abhay_Ps1,Abhay_Ps1,501,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n=nums.size();
        vector<int>pref(n+1,0);
        for(auto q:queries){
            pref[q[0]]=pref[q[0]]-1;
            pref[q[1]+1]+=1;
        }
        for(int i=1;i<n+1;i++){
            pref[i]+=pref[i-1];
        }
        for(int i=0;i<n;i++){
            if(nums[i]+pref[i]>0) return false;
            // cout<<nums[i]+pref[i]<<"" "";
        }
        // cout<<""\n"";
        return true;
    }
};",1454819122
Abhay_Ps1,Abhay_Ps1,501,3643,cpp,"class Solution {
public:
    bool done(vector<int>&nums,vector<vector<int>>&queries,int k){
        int n=nums.size();
        vector<int>pref(n+1,0);
        for(int i=0;i<k;i++){
            pref[queries[i][0]]=pref[queries[i][0]]-queries[i][2];
            pref[queries[i][1]+1]=pref[queries[i][1]+1]+queries[i][2];
        }
        for(int i=1;i<n+1;i++){
            pref[i]+=pref[i-1];
        }
        for(int i=0;i<n;i++){
            if(nums[i]+pref[i]>0) return false;
            // cout<<nums[i]+pref[i]<<"" "";
        }
        // cout<<""\n"";
        return true;
    }
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int low=0,high=queries.size();
        int ans=-1;
        while(low<=high){
            int mid=(low+high)/2;
            if(done(nums,queries,mid)){
                ans=mid;
                high=mid-1;
            } else low=mid+1;
        }
        return ans;
    }
};",1454827404
Sanket Disale,sanke_tdisale871,502,3616,cpp,"class Solution {
public:
 bool performSimulation(vector<int> arr, int idx, int dir) {
        int len = arr.size();

        while (idx >= 0 && idx < len) {
            if (arr[idx] == 0) {
                idx += dir;
            } else {
                arr[idx]--;
                dir *= -1;
                idx += dir;
            }
        }
     for (int val : arr) {
            if (val != 0) {
                return false;
            }
        }
        return true;
    }
    int countValidSelections(vector<int>& nums) {
        int len = nums.size();
        int count = 0;

        for (int i = 0; i < len; ++i) {
            if (nums[i] == 0) {
                if (performSimulation(nums, i, 1)) {
                    count++;
                }
                if (performSimulation(nums, i, -1)) {
                    count++;
                }
            }
        }
        return count;
    }
};",1454829496
Sanket Disale,sanke_tdisale871,502,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& arr, vector<vector<int>>& ops) {
        int len = arr.size();
        vector<int> d(len + 1, 0);

        for (const auto& op : ops) {
            int start = op[0];
            int end = op[1];
            d[start]--;
            if (end + 1 < len) d[end + 1]++;
        }

        int curr = 0;
        for (int i = 0; i < len; ++i) {
            curr += d[i];
            arr[i] += curr;
            if (arr[i] > 0) return false;
        }

        return true;
    }
    
};",1454826584
Sanket Disale,sanke_tdisale871,502,3643,cpp,"class Solution {
private:
bool checkZeroArray(vector<int> arr, vector<vector<int>>& qry, int limit) {
        int sz = arr.size();
        vector<int> delta(sz + 1, 0);

        for (int i = 0; i < limit; ++i) {
            int start = qry[i][0];
            int end = qry[i][1];
            int val = qry[i][2];

            delta[start] -= val;
            if (end + 1 < sz) {
                delta[end + 1] += val;
            }
        }

        int sum = 0;
        for (int i = 0; i < sz; ++i) {
            sum += delta[i];
            arr[i] += sum;
            if (arr[i] > 0) {
                return false;
            }
        }
        return true;
    }
public:
    int minZeroArray(vector<int>& arr, vector<vector<int>>& qry) {
        int low = 0, high = qry.size();
        int res = -1;

        while (low <= high) {
            int mid = low + (high - low) / 2;

            if (checkZeroArray(arr, qry, mid)) {
                res = mid;
                high = mid - 1;
            } else {
                low = mid + 1;
            }
        }
        return res;
    }
};",1454840082
hope_ma,hope_ma,503,3616,python3,"class Solution:
  def countValidSelections(self, nums: List[int]) -> int:
    n = len(nums)
    left = [0 for _ in range(n)]
    left[0] = nums[0]
    for i in range(1, n):
      left[i] = left[i - 1] + nums[i]
    right = [0 for _ in range(n)]
    right[n - 1] = nums[n - 1]
    for i in range(n - 2, -1, -1):
      right[i] = right[i + 1] + nums[i]

    ret = 0
    for i in range(n):
      if nums[i] == 0:
        if left[i] == right[i]:
          ret += 2
        elif abs(left[i] - right[i]) == 1:
          ret += 1
    return ret",1454809888
hope_ma,hope_ma,503,3639,python3,"class Solution:
  def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
    n = len(nums)
    diffs = [0 for _ in range(n + 1)]
    for a, b in queries:
      diffs[a] += 1
      diffs[b + 1] -= 1
    
    acc = 0
    for i in range(n):
      acc += diffs[i]
      if acc < nums[i]:
        return False
    return True",1454818330
hope_ma,hope_ma,503,3643,python3,"class Solution:
  def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
    n = len(nums)
    n_queries = len(queries)
    low = 0
    high = n_queries + 1
    while low < high:
      mid = low + ((high - low) >> 1)
      diffs = [0 for _ in range(n + 1)]
      for i in range(mid):
        a, b, v = queries[i]
        diffs[a] += v
        diffs[b + 1] -= v
      acc = 0
      done = True
      for i in range(n):
        acc += diffs[i]
        if nums[i] > acc:
          done = False
          break
      
      if done:
        high = mid
      else:
        low = mid + 1
    return -1 if high == n_queries + 1 else high
    ",1454832782
pawan kumar,pkpawan,504,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int tot = 0;
        for(auto&x:nums)tot += x;
        
        int sum = 0,ans = 0;
        for(auto&x:nums){
            int rem = tot-sum;
            if(x == 0){
                if(sum == rem)ans+=2;
                else if(abs(sum-rem) == 1)ans++;
            }
            sum += x;
        }
        return ans;
    }
};",1454832783
pawan kumar,pkpawan,504,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        vector<int>mark(n+1);
        for(auto&x:queries){
            mark[x[0]]++;
            mark[x[1]+1]--;
        }
        int tot = 0;
        for(int i=0;i<n;++i){
            tot += mark[i];
            if(tot < nums[i])return false;
        }
        return true;
    }
};",1454811789
pawan kumar,pkpawan,504,3643,cpp,"class Solution {
public:
    bool find(vector<vector<int>>&queries,int k,vector<int>&nums){
        int n = nums.size();
        vector<int>mark(n+1);
        for(int i=0;i<k;++i){
            vector<int>x = queries[i];
            mark[x[0]]+=x[2];
            mark[x[1]+1]-=x[2];
        }
        int tot = 0;
        for(int i=0;i<n;++i){
            tot += mark[i];
            if(tot < nums[i])return false;
        }
        return true;
    }
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int start = 0,end = queries.size(),mid = (start+end)/2;
        int ans = -1;
        
        while(start<=end){
            if(find(queries,mid,nums)){
                ans = mid;
                end = mid-1;
            }
            else start = mid+1;
            mid = (start+end)/2;
        }
        
        return ans;
        
    }
};",1454811596
Harshsingh_26,Harshsingh_26,505,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {

        int tot = 0;
        for (auto it : nums) {
            tot += it;
        }
        int cur =0;
        int ans =0;
        for (int i = 0; i < nums.size(); i++) {

            tot-=nums[i];
            cur+=nums[i];
            if(nums[i]!=0)continue;
            if(tot==cur)
            {
                ans+=2;
            }
            else if(abs(tot-cur)==1)
            {
                ans++;
            }
        }
        return ans;
    }
};",1454813003
Harshsingh_26,Harshsingh_26,505,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {

        int n= nums.size();
        vector<int>op(n+1,0);
        for(auto it:queries)
            {
                op[it[0]]++;
                op[it[1]+1]--;
            }
        for(int i=1;i<=n;i++)
            {
                op[i]+=op[i-1];
            }
        bool ans = true;
        for(int i=0;i<n;i++)
            {
                if(nums[i]>op[i])
                {
                    ans = false;
                }
            }
        return ans;
        
    }
};",1454819268
Harshsingh_26,Harshsingh_26,505,3643,cpp,"class Solution {
public:
    bool check(vector<int> nums, vector<vector<int>>& queries, int mid) {
        int n = nums.size();
        vector<int> op(n + 1, 0);
        for (int i = 0; i < mid; i++) {
            int l = queries[i][0];
            int r = queries[i][1];
            int val = queries[i][2];
            op[l] -= val;
            op[r + 1] += val;
        }
        for (int i = 1; i <= n; i++) {
            op[i] += op[i - 1];
        }
        for (int i = 0; i < nums.size(); i++) {
            nums[i] += op[i];
            if (nums[i] > 0)
                return false;
        }
        return true;
    }
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {

        int lo = 0, hi = queries.size(), ans = -1;
        // check(nums, queries, 2);
        while(lo<=hi)
            {
                int mid = (lo+hi)/2;
                if(check(nums,queries,mid))
                {
                    hi = mid-1;
                    ans = mid;
                }
                else
                {
                    lo = mid+1;
                }
            }
        return ans;
    }
};",1454832810
Pankaj Ananda Bhosale,pankaj_777,506,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int n = nums.size();
        
        int res = 0;
        int pref = 0, suff = accumulate(nums.begin(), nums.end(), 0);
        for (int i = 0; i < n; i++) {
            pref += nums[i];
            suff -= nums[i];
            
            res += 2 * (nums[i] == 0 and pref == suff);
            res += (nums[i] == 0 and abs(pref - suff) == 1);
        }
        
        return res;
    }
};",1454810750
Pankaj Ananda Bhosale,pankaj_777,506,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        vector<int> diff(n + 1);
        for (auto query : queries) {
            int l = query[0], r = query[1];
            diff[l]++, diff[r + 1]--;
        }
        
        for (int i = 1; i < n; i++) {
            diff[i] += diff[i - 1];
        }
        
        for (int i = 0; i < n; i++) {
            if (nums[i] > diff[i]) 
                return false;
        }
        
        return true;
    }
};",1454815083
Pankaj Ananda Bhosale,pankaj_777,506,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        auto possible = [&] (int mid) -> bool {
            vector<int> diff(n + 3);
            for (int i = 0; i < mid; i++) {
                int l = queries[i][0], r = queries[i][1], val = queries[i][2];
                diff[l] += val, diff[r + 1] -= val;
            }

            for (int i = 1; i < n; i++) {
                diff[i] += diff[i - 1];
            }

            for (int i = 0; i < n; i++) {
                if (nums[i] > diff[i]) 
                    return false;
            }

            return true;
        };
        
        if (!possible(queries.size())) return -1;
        
        int low = 0, high = queries.size();
        while (low <= high) {
            int mid = low + (high - low) / 2;
            if (possible (mid)) {
                high = mid - 1;
            } else {
                low = mid + 1;
            }
        }
        
        return high + 1;
    }
};",1454832831
birds3345,birds3345,507,3616,cpp,"class Solution {
public:
    int solve(int i, int dir, vector<int> nums)
    {     
        while (i >= 0 && i < nums.size())
        {
            if (nums[i] == 0)
                i += dir;
            else
            {
                nums[i]--;
                dir *= -1;
                
                i += dir;
            }
        }
        
        for (int n: nums)
        {
            if (n > 0)
                return false;
        }
                    
        return true;
    }
    
    int countValidSelections(vector<int>& nums) {
        int res = 0;
        
        for (int i = 0; i < nums.size(); i++)
        {
            if (nums[i] == 0)
            {
                res += solve(i, -1, nums);
                res += solve(i, 1, nums);
            }
        }
        
        return res;
    }
};",1454811517
birds3345,birds3345,507,3639,cpp,"struct FenwickTreeOneBasedIndexing {
    vector<int> bit;  // binary indexed tree
    int n;

    FenwickTreeOneBasedIndexing(int n) {
        this->n = n + 1;
        bit.assign(n + 1, 0);
    }

    FenwickTreeOneBasedIndexing(vector<int> a)
        : FenwickTreeOneBasedIndexing(a.size()) {
        for (size_t i = 0; i < a.size(); i++)
            add(i, a[i]);
    }

    int sum(int idx) {
        int ret = 0;
        for (++idx; idx > 0; idx -= idx & -idx)
            ret += bit[idx];
        return ret;
    }

    int sum(int l, int r) {
        return sum(r) - sum(l - 1);
    }

    void add(int idx, int val) {
        for (++idx; idx < n; idx += idx & -idx)
            bit[idx] += val;
    }

    void range_add(int l, int r, int val) {
        add(l, val);
        add(r + 1, -val);
    }

    int point_query(int idx) {
        int ret = 0;
        for (++idx; idx > 0; idx -= idx & -idx)
            ret += bit[idx];
        return ret;
    }
};

class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        FenwickTreeOneBasedIndexing fenwick(nums.size());
        
        for (auto& query: queries)
            fenwick.range_add(query[0], query[1], 1);
        
        for (int i = 0; i < nums.size(); i++)
        {
            if (fenwick.point_query(i) < nums[i])
                return false;
        }
        
        return true;
    }
};",1454816025
birds3345,birds3345,507,3643,cpp,"class SegmentTree {
    vector<int> tree, lazy;
    int size;

public:
    SegmentTree(int n) : size(n) {
        tree.assign(4 * n, INT_MIN);
        lazy.assign(4 * n, 0);
    }

    void build(const vector<int>& arr, int start, int end, int node) {
        if (start == end) {
            tree[node] = arr[start];
            return;
        }
        int mid = (start + end) / 2;
        build(arr, start, mid, 2 * node + 1);
        build(arr, mid + 1, end, 2 * node + 2);
        tree[node] = max(tree[2 * node + 1], tree[2 * node + 2]);
    }

    void updateRange(int l, int r, int val, int start, int end, int node) {
        if (lazy[node] != 0) {
            tree[node] += lazy[node];
            if (start != end) {
                lazy[2 * node + 1] += lazy[node];
                lazy[2 * node + 2] += lazy[node];
            }
            lazy[node] = 0;
        }

        if (start > end || start > r || end < l)
            return;

        if (start >= l && end <= r) {
            tree[node] += val;
            if (start != end) {
                lazy[2 * node + 1] += val;
                lazy[2 * node + 2] += val;
            }
            return;
        }

        int mid = (start + end) / 2;
        updateRange(l, r, val, start, mid, 2 * node + 1);
        updateRange(l, r, val, mid + 1, end, 2 * node + 2);
        tree[node] = max(tree[2 * node + 1], tree[2 * node + 2]);
    }

    int queryMax(int l, int r, int start, int end, int node) {
        if (lazy[node] != 0) {
            tree[node] += lazy[node];
            if (start != end) {
                lazy[2 * node + 1] += lazy[node];
                lazy[2 * node + 2] += lazy[node];
            }
            lazy[node] = 0;
        }

        if (start > end || start > r || end < l)
            return INT_MIN;

        if (start >= l && end <= r)
            return tree[node];

        int mid = (start + end) / 2;
        return max(queryMax(l, r, start, mid, 2 * node + 1), queryMax(l, r, mid + 1, end, 2 * node + 2));
    }
};

class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        SegmentTree  seg(nums.size());
        seg.build(nums, 0, nums.size() - 1, 0);
        
        if (seg.queryMax(0, nums.size(), 0, nums.size() - 1, 0) <= 0)
            return 0;
        
        for (int i = 0; i < queries.size(); i++)
        {
            auto& query = queries[i];
            seg.updateRange(query[0], query[1], -query[2], 0, nums.size() - 1, 0);
            
            if (seg.queryMax(0, nums.size(), 0, nums.size() - 1, 0) <= 0)
                return i + 1;
        }
        
        return -1;
    }
};",1454832899
Varun Muthanna K A,varunmuthannaka,508,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int n = nums.size(), cnt = 0;
        vector<int> z;
        for (int i = 0; i < n; ++i) {
            if (nums[i] == 0) z.push_back(i);
        }
        for (int i : z) {
            for (int d = -1; d <= 1; d += 2) {
                vector<int> a = nums;
                int c = i, dir = d;
                while (c >= 0 && c < n) {
                    if (a[c] == 0) {
                        c += dir;
                    } else {
                        a[c] -= 1;
                        dir = -dir;
                        c += dir;
                    }
                }
                bool ok = true;
                for (int x : a) {
                    if (x != 0) {
                        ok = false;
                        break;
                    }
                }
                if (ok) cnt++;
            }
        }
        return cnt;
    }
};
",1454840287
Varun Muthanna K A,varunmuthannaka,508,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        bool isPossible=true;
        int n=nums.size();
        vector<int>sweep(n+1);

        for(auto &i:queries) sweep[i[0]]+=1,sweep[i[1]+1]-=1;

        for(auto i=1;i<n;i++) sweep[i]+=sweep[i-1];

        for(auto i=0;i<n;i++) if(sweep[i]<nums[i]) isPossible=false;

        return isPossible;

        
        
    }
};",1454816261
Varun Muthanna K A,varunmuthannaka,508,3643,cpp,"class Solution {
public:
    bool check(vector<int>& nums, vector<vector<int>>& queries,int x){
        bool isPossible=true;
        int n=nums.size();
        vector<int>sweep(n+1);

        for(auto i=0;i<=x;i++) sweep[queries[i][0]]+=queries[i][2],sweep[queries[i][1]+1]-=queries[i][2];

        for(auto i=1;i<n;i++) sweep[i]+=sweep[i-1];

        for(auto i=0;i<n;i++) if(sweep[i]<nums[i]) isPossible=false;

        return isPossible;
        
    }


    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int l=0,r=queries.size()-1,res=-1;

        if(check(nums,queries,-1)) return 0;
        
        while(l<=r){
            int mid= l +(r-l)/2;

            if(check(nums,queries,mid)) res=mid+1,r=mid-1;
            else l=mid+1;
        }

        return res;
        
    }
};",1454829237
hocln,hocln,510,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& a) {
        int ans = 0,n=a.size();
        for(int i = 0;i < n;i++) {
            if(a[i] != 0) continue;
            for(int d : {1,0}) {
                auto c = a;
                int j = i;
            while(j >= 0 && j < n) {
                if(c[j]) {
                    d = !d;
                    --c[j];
                }
                j += d ? 1 : -1;
            }
            if(count(c.begin(),c.end(),0) == n) {
                ++ans;
            }
            }
        }
        return ans;
    }
};",1454811639
hocln,hocln,510,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& a, vector<vector<int>>& q) {
        int n = a.size();
        vector<int>cnt(n+1);
        for(auto& i : q) {
            ++cnt[i[0]];
            --cnt[i[1]+1];
        }
        for(int i = 1;i < n;i++) cnt[i] += cnt[i-1];
        for(int i = 0;i < n;i++) if(a[i] > cnt[i]) return false;
        return true;
    }
};",1454814345
hocln,hocln,510,3643,cpp,"template <class T> class BIT {
  private:
	int size;
	vector<T> bit;
	vector<T> arr;

  public:
	BIT(int size) : size(size), bit(size + 1), arr(size) {}
	void set(int ind, T val) { add(ind, val - arr[ind]); }
	void add(int ind, T val) {
		arr[ind] += val;
		ind++;
		for (; ind <= size; ind += ind & -ind) { bit[ind] += val; }
	}
	T pref_sum(int ind) {
		ind++;
		T total = 0;
		for (; ind > 0; ind -= ind & -ind) { total += bit[ind]; }
		return total;
	}
};
class Solution {
public:
    int minZeroArray(vector<int>& a, vector<vector<int>>& q) {
        int g = 0, n = a.size();
        int j = 0;
        vector<int>cnt(n+3);
        BIT<long long>b(n+1);
        if(count(a.begin(),a.end(),0) == n) return 0;
        int mat = 0;
        for(auto& i : q) {
            ++mat;
            b.add(i[0],i[2]);
            b.add(i[1]+1,-i[2]);
            while(j < n && b.pref_sum(j) >= a[j])++j;
            if(j == n) return mat;
        }
        return -1;
    }
};",1454825759
Nguyen Duc Linh,linhnd99hit,511,3616,cpp,"class Solution {
int isOK(vector<int> nums, int pos, int bias) {
    int current = pos;

    while (current >= 0 && current < nums.size()) {
        if (nums[current] > 0) {
            bias = -bias;
            nums[current]--;   
        }

        current += bias;
    }

    for (int i=0;i<nums.size();i++) {
        if (nums[i] != 0) return 0;
    }

    return 1;
}
public:
    int countValidSelections(vector<int>& nums) {
        int res=0;
        for (int i=0;i<nums.size();i++) {
            if (nums[i] == 0) {
                res += isOK(nums, i, 1) + isOK(nums,i,-1);
            }
        }

        return res;
    }
};",1454822956
Nguyen Duc Linh,linhnd99hit,511,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int f[100002] = {};
        for (int i=0; i<queries.size(); i++) {
            f[queries[i][0]]++;
            f[queries[i][1]+1]--;
        }

        int c = 0;
        for (int i=0;i<nums.size();i++) {
            c += f[i];
            if (nums[i] > c) {
                return false;
            }
        }

        return true;
    }
};",1454815118
Nguyen Duc Linh,linhnd99hit,511,3643,cpp,"class Solution {
    bool isOK(vector<int> &nums, vector<vector<int>> &queries, int numberOfQueries) {
        long long f[100002] = {};
        for (int i=0; i<numberOfQueries; i++) {
            f[queries[i][0]] += (long long)queries[i][2];
            f[queries[i][1]+1] -= (long long)queries[i][2];
        }
        
        long long c = 0;
        for (int i=0;i<nums.size();i++) {
            c += f[i];
            if ((long long)nums[i] > c) {
                return false;
            }
        }
    
        return true;
    }
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int l = 0;
        int r = queries.size() - 1;
        while (l<=r) {
            int mid = (l+r)/2;
            if (isOK(nums, queries, mid)) {
                r = mid - 1;
            } else {
                l = mid + 1;
            }
        }

        if (isOK(nums, queries, l)) {
            return l;
        }

        return -1;
    }
};",1454840462
resotto,resotto,512,3616,java,"class Solution {
    public int countValidSelections(int[] nums) {
        int ans = 0, n = nums.length;
        for (int i = 0; i < n; i++) {
            int[] left = new int[n], right = new int[n];
            for (int j = 0; j < n; j++) {
                left[j] = nums[j];
                right[j] = nums[j];
            }
            move(i, -1, left);
            move(i, 1, right);
            ans += isValid(left) ? 1 : 0;
            ans += isValid(right) ? 1 : 0;
        }
        return ans;
    }
    private boolean isValid(int[] arr) {
        for (int p : arr) {
            if (p != 0) {
                return false;
            }
        }
        return true;
    }
    private void move(int i, int d, int[] arr) {
        if (arr[i] != 0) {
            return;
        }
        while (0 <= i && i < arr.length && arr[i] == 0) {
        // while (arr[i] == 0) {
            i += d;
        }
        if (i < 0 || i == arr.length) {
        // if (0 < i || i == arr.length) {
            return;
        }
        arr[i]--;
        move(i + (d * -1), d * -1, arr);
        // move(i, d * -1, arr);
    }
}",1454820052
resotto,resotto,512,3639,java,"class Solution {
    public boolean isZeroArray(int[] nums, int[][] queries) {
        var diff = new HashMap<Integer, Integer>();
        for (int[] q : queries) {
            diff.put(q[0], diff.getOrDefault(q[0], 0) - 1);
            // diff.put(q[0], diff.getOrDefault(q[0], 0) + 1);
            diff.put(q[1]+1, diff.getOrDefault(q[1]+1, 0) + 1);
            // diff.put(q[1]+1, diff.getOrDefault(q[1]+1, 0) - 1);
        }
        for (int i = 0, d = 0; i < nums.length; i++) {
            d += diff.getOrDefault(i, 0);
            if (0 < nums[i] + d) {
                return false;
            }
        }
        return true;
    }
}",1454824827
resotto,resotto,512,3643,java,"class Solution {
    public int minZeroArray(int[] nums, int[][] queries) {
        int n = nums.length, l = 0, r = queries.length, ans = r + 1;
        while (l <= r) {
            int m = l + (r - l) / 2;
            var diff = new HashMap<Integer, Integer>();
            for (int k = 0; k < m; k++) {
                int[] q = queries[k];
                diff.put(q[0], diff.getOrDefault(q[0], 0) - q[2]);
                diff.put(q[1]+1, diff.getOrDefault(q[1]+1, 0) + q[2]);
            }
            var valid = true;
            for (int i = 0, d = 0; i < n; i++) {
                d += diff.getOrDefault(i, 0);
                if (0 < nums[i] + d) {
                    valid = false;
                    break;
                }
            }
            if (valid) {
                ans = m;
                r = m - 1;
            } else {
                l = m + 1;
            }
        }
        return ans == queries.length+1 ? -1 : ans;        
        // return ans == r+1 ? -1 : ans;        
    }
}

/*


    public int minZeroArray(int[] nums, int[][] queries) {
        int n = nums.length, l = 0, r = queries.length, ans = r + 1;
        while (l <= r) {
            int m = l + (r - l) / 2;
            var diff = new HashMap<Integer, Integer>();
            for (int k = 0; k < m; k++) {
                int[] q = queries[k];
                diff.put(q[0], diff.getOrDefault(q[0], 0) - q[2]);
                diff.put(q[1]+1, diff.getOrDefault(q[1]+1, 0) + q[2]);
            }
            var valid = true;
            for (int i = 0, d = 0; i < n; i++) {
                d += diff.getOrDefault(i, 0);
                if (0 < nums[i] + d) {
                    valid = false;
                    break;
                }
            }
            if (valid) {
                ans = m;
                r = m - 1;
            } else {
                l = m + 1;
            }
        }
        return ans == r+1 ? -1 : ans;        
    }
*/",1454840531
lxw1092772959,lxw1092772959,513,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int result = 0;
        for (int i = 0; i < nums.size(); ++i) {
            if (nums[i] != 0) {
                continue;
            }
            if (is_valid(nums, i, 1)) {
                result++;
            }
            if (is_valid(nums, i, -1)) {
                result++;
            }
        }
        return result;
    }

    bool is_valid(vector<int> nums, int pos, int dir = 1) {
        int count = 0;
        int pre_pos = -1;
        for (;pos >= 0 && pos < nums.size(); ) {
            if (pre_pos == pos) {
                break;
            }
            pre_pos = pos;
            if (nums[pos] == 0) {
                pos += dir;
            } else if (nums[pos] > 0) {
                nums[pos]--;
                dir *= -1;
                pos += dir;
            }
        }

        for (auto & num : nums) {
            if (num > 0) {
                return false;
            }
        }
        return true;
    }
};",1454816140
lxw1092772959,lxw1092772959,513,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int N = nums.size();
        vector<int> pre_sum(N, 0);
        for (auto & q : queries) {
            int L = q[0], R = q[1];
            pre_sum[L]++;
            if (R + 1 < N) {    
                pre_sum[R + 1]--;
            }
        }
        int pre = 0;
        for (int i = 0; i < N; ++i) {
            pre += pre_sum[i];
            if (nums[i] > pre) {
                return false;
            }
        }
        return true;
    }
};",1454819360
lxw1092772959,lxw1092772959,513,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int N = nums.size();
        int M = queries.size();
        if (!isZeroArray(nums, queries, M)) {
            return -1;
        }
        
        int L = 0;
        int R = M;
        while (L < R) {
            int mid = (L + R) / 2;
            // cout << L << "" "" << R << "" "" << mid << endl;
            if (!isZeroArray(nums, queries, mid)) {
                L = mid + 1;
            } else {
                R = mid;
            }
        }
        return L;
    }

    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries, int k) {
        int N = nums.size();
        vector<int> pre_sum(N, 0);
        for (int i = 0; i < k; ++i) {
            auto &q = queries[i];
            int L = q[0], R = q[1];
            int val = q[2];
            pre_sum[L] += val;
            if (R + 1 < N) {    
                pre_sum[R + 1] -= val;
            }
        }
        int pre = 0;
        for (int i = 0; i < N; ++i) {
            pre += pre_sum[i];
            if (nums[i] > pre) {
                return false;
            }
        }
        return true;
    }
};",1454833201
Suvendu Dalbehera,SUVU01,514,3616,cpp,"class Solution {
private:
    bool valid(vector<int> A, int i, int d, int &count)
    {
        int C = 0;
        while(i >= 0 and i < A.size())
        {
            if(A[i] == 0)
            {
                if(d < 0)
                    i--;
                else
                    i++;
            }
            else
            {
                A[i]--;
                if(A[i] == 0)
                    C++;
                if(d == -1)
                    d = 1, i++;
                else
                    d = -1, i--;
            }
        }
        return C + count == A.size();
    }
public:
    int countValidSelections(vector<int>& nums) {
        int n = nums.size();
        int ans = 0, count = 0;
        for(int i = 0; i < n; i++)
            count += (nums[i] == 0);
        for(int i = 0; i < n; i++)
            if((nums[i] == 0))
            {
                if(valid(nums, i, -1, count))
                    ans++;
                if(valid(nums, i, 1, count))
                    ans++;
            }
        return ans;
    }
};",1454816217
Suvendu Dalbehera,SUVU01,514,3639,cpp,"class Solution {
private:
    bool process(int &n, vector<int> &nums, vector<vector<int>> &queries)
    {
        vector<int> count(n + 1, 0);
        for(int i = 0; i < queries.size(); i++)
        {
            int l = queries[i][0], r = queries[i][1], val = 1;
            count[l] += val, count[r + 1] -= val;
        }
        for(int i = 1; i < n; i++)
            count[i] += count[i - 1];
        for(int i = 0; i < n; i++)
            if(nums[i] - count[i] > 0)
                return false;
        return true;
    }
public:
    int isZeroArray(vector<int>& nums, vector<vector<int>>& queries) 
    {
        int n = nums.size(), m = queries.size();
        return process(n, nums, queries);
    }
};",1454833214
Suvendu Dalbehera,SUVU01,514,3643,cpp,"class Solution {
private:
    bool check(int &M, int &n, vector<int> nums, vector<vector<int>> &queries)
    {
        vector<int> count(n + 1, 0);
        for(int i = 0; i < M; i++)
        {
            int l = queries[i][0], r = queries[i][1], val = queries[i][2];
            count[l] += val, count[r + 1] -= val;
        }
        for(int i = 1; i < n; i++)
            count[i] += count[i - 1];
        for(int i = 0; i < n; i++)
            if(nums[i] - count[i] > 0)
                return false;
        return true;
    }
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) 
    {
        int n = nums.size(), m = queries.size(), low = 0, high = m, ans = -1;
        while(low <= high)
        {
            int mid = (low + high) >> 1;
            if(check(mid, n, nums, queries))
                ans = mid, high = mid - 1;
            else
                low = mid + 1;
        }
        return ans;        
    }
};",1454829133
uf21-6,uf21-6,515,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        n = len(nums)
        valid_selections = 0
        
        # Helper function to simulate the process
        def simulate(start_pos, direction):
            # Copy the array to simulate changes
            nums_copy = nums[:]
            curr = start_pos
            while 0 <= curr < n:
                if nums_copy[curr] == 0:
                    # Move in the current direction
                    curr += direction
                else:
                    # Decrement the current element by 1 and reverse the direction
                    nums_copy[curr] -= 1
                    direction *= -1
                    curr += direction
            
            # Check if all elements are zero
            return all(x == 0 for x in nums_copy)
        
        # Find all positions where nums[i] == 0 and simulate from there
        for i in range(n):
            if nums[i] == 0:
                # Simulate for both left (-1) and right (+1)
                if simulate(i, -1):  # Move left
                    valid_selections += 1
                if simulate(i, 1):   # Move right
                    valid_selections += 1
        
        return valid_selections",1454806482
uf21-6,uf21-6,515,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        n = len(nums)
        diff = [0] * (n + 1)  # Create a difference array
        
        # Apply the difference array logic based on the queries
        for start, end in queries:
            diff[start] -= 1
            if end + 1 < n:
                diff[end + 1] += 1
        
        # Calculate the cumulative effect and modify the original array
        decrement = 0
        for i in range(n):
            decrement += diff[i]
            nums[i] += decrement
            if nums[i] > 0:
                return False  # If any element is positive, return False
        
        return True  # All elements are non-positive
",1454828351
uf21-6,uf21-6,515,3643,java,"class Solution {
    public int minZeroArray(int[] nums, int[][] queries) {
        int n = nums.length;
        int[] current = nums.clone();
        int[] midState = null;  // To store state at midpoint of queries

        // Check if the array is already all zeros
        boolean allZero = true;
        for (int num : current) {
            if (num != 0) {
                allZero = false;
                break;
            }
        }
        if (allZero) {
            return 0;
        }

        // Binary search to find the minimum number of queries
        int left = 0, right = queries.length, answer = -1;
        boolean midStateStored = false;

        while (left <= right) {
            int mid = left + (right - left) / 2;

            if (canMakeZero(current, queries, mid, n)) {
                answer = mid;
                right = mid - 1;
            } else {
                left = mid + 1;
            }

            // Store state at midpoint of queries
            if (!midStateStored && mid == queries.length / 2) {
                int[] diff = new int[n + 1];
                for (int i = 0; i < mid; i++) {
                    int l = queries[i][0];
                    int r = queries[i][1];
                    int value = queries[i][2];
                    diff[l] += value;
                    if (r + 1 < diff.length) {
                        diff[r + 1] -= value;
                    }
                }

                midState = current.clone();
                int total = 0;
                for (int i = 0; i < n; i++) {
                    total += diff[i];
                    midState[i] = Math.max(0, current[i] - total);
                }
                midStateStored = true;
            }
        }

        return answer;
    }

    private boolean canMakeZero(int[] current, int[][] queries, int k, int n) {
        int[] diff = new int[n + 1];

        // Apply difference array logic for the first k queries
        for (int i = 0; i < k; i++) {
            int l = queries[i][0];
            int r = queries[i][1];
            int value = queries[i][2];
            diff[l] += value;
            if (r + 1 < diff.length) {
                diff[r + 1] -= value;
            }
        }

        // Use prefix sum to calculate the actual changes
        int total = 0;
        for (int i = 0; i < n; i++) {
            total += diff[i];
            if (total < current[i]) {
                return false; // Not enough reduction
            }
        }
        return true;
    }
}
",1454833275
Abdullah Elkhteeb,abdullahElkhteeb2002,517,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int ans = 0;
        int n = nums.size();
        for(int i = 0; i < n; ++i) {
            if(nums[i])  
                continue;
            
            vector<int> a = nums;
            //Moving left;
            bool left = 1;
            int j = i;
            while(j >= 0 and j < n) {
                if(a[j]) {
                    a[j]--;
                    left = 1 - left;
                } 
                if(left)
                    j--;
                else 
                    j++;
            }

            if(accumulate(a.begin(), a.end(), 0) == 0) {
                ans++;
            }

            a = nums;
            //Moving left;
             left = 0;
             j = i;
            while(j >= 0 and j < n) {
                if(a[j]) {
                    a[j]--;
                    left = 1 - left;
                } 
                if(left)
                    j--;
                else 
                    j++;
            }

            if(accumulate(a.begin(), a.end(), 0) == 0) {
                ans++;
                continue;
            }
            
        }

        return ans;
    }
};",1454809254
Abdullah Elkhteeb,abdullahElkhteeb2002,517,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        vector<int> a(nums.size() + 1);
        int n = nums.size();
        for(auto &v : queries) {
            int l = v[0];
            int r = v[1];
            a[l]--;
            a[r + 1]++;
        } 

        for(int i = 1; i <= n; ++i)
            a[i] += a[i - 1];

        // for(int i = 0; i < n; ++i)
        //     cout << a[i] << ' ';
        // cout << endl;
        
        bool flg = 1;
        for(int i = 0; i < n; ++i) {
            nums[i] += a[i];
            if(nums[i] > 0)
                flg = 0;
        }

        

        return flg;
    }
};",1454813595
Abdullah Elkhteeb,abdullahElkhteeb2002,517,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        int l = 0, r = queries.size() - 1, pos = -1;
        if(accumulate(nums.begin(), nums.end(), 0ll) == 0ll) 
            return 0;
    
        while(l <= r) {
            vector<long long> cnt(n + 1, 0);
            int mid = (l + r) / 2;
            bool flg = 1;
            for(int i = 0; i <= mid; ++i) {
                
                
                cnt[queries[i][0]] += queries[i][2];
                cnt[queries[i][1] + 1] -= queries[i][2];
            }

            for(int i = 1; i < n; ++i)
                cnt[i] += cnt[i - 1];

            for(int i = 0; i < n; ++i) {
                if(nums[i] > cnt[i]) {
                    flg = 0;
                    break;
                }
            }

            if(flg) {
                pos = mid;
                r = mid - 1;
            } else {
                l = mid + 1;
            }


            // cout << mid << ' ' << flg << endl;
        }

        return (pos == -1 ? pos : pos + 1);
    }
};",1454825992
chintsai,chintsai,518,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int n = nums.size(), res = 0;
        int dx[2] = {-1, 1};
        auto check = [&](int x, int d) {
            auto a = nums;
            while (true) {
                if (x < 0 || x == n) {
                    break;
                }
                if (a[x] == 0) {
                    x += dx[d];
                }
                else if (a[x]) {
                    a[x]--;
                    d = (d + 1) % 2;
                    x += dx[d];
                }
            }
            for (int x: a) {
                if (x) {
                    return false;
                }
            }
            return true;
        };
        for (int i = 0; i < n; i++) {
            if (nums[i] == 0) {
                if (check(i, 0)) {
                    res++;
                }
                if (check(i, 1)) {
                    res++;
                }
            }
        }
        return res;
    }
};",1454812966
chintsai,chintsai,518,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        int diff[n + 2];
        memset(diff, 0, sizeof diff);
        for (auto &q: queries) {
            diff[q[0]]--, diff[q[1]+1]++;
        }
        for (int s = 0, i = 0;i < n; i++) {
            s += diff[i];
            if (nums[i] + s > 0) {
                return false;
            }
        }
        return true;
    }
};",1454819304
chintsai,chintsai,518,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = queries.size();
        int l = 0, r = n + 1;
        auto check = [&](int mid) {
            // printf(""mid: %d\n"",mid);
            int m = nums.size();
            int d[m + 2];
            memset(d, 0, sizeof d);
            for (int i = 0; i < mid; i++) {
                d[queries[i][0]]-= queries[i][2];
                d[queries[i][1] + 1]+=queries[i][2];
            }
            for (int s = 0, i = 0; i < m; i++) {
                s += d[i];
                // printf(""s: %d, i: %d, d[i]: %d\n"", s, i, d[i]);
                if (nums[i] + s > 0) {
                    return false;
                }
            }
            return true;
        };
        while (l < r) {
            int mid = (l + r) >> 1;
            if (check(mid)) {
                r = mid;
            } else {
                l = mid + 1;
            }
        }
        return l == n + 1 ? -1 : l;
    }
};",1454833362
Kar Deepak Kumar,kardeepakkumar,519,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        result = 0
        total = sum(nums)

        curSum = 0
        for num in nums:
            curSum += num
            if num == 0 and total%2 == 0 and curSum == total//2:
                result += 2
            elif num == 0 and total%2 == 1 and (curSum == total//2 or curSum == total//2 + 1):
                result += 1
        return result",1454808138
Kar Deepak Kumar,kardeepakkumar,519,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        increments = []
        for l, r in queries:
            increments.append((l, 1))
            increments.append((r+1, -1))
        increments.sort()

        curIncrement = 0
        incIdx = 0
        for i in range(len(nums)):
            while incIdx < len(increments) and increments[incIdx][0] <= i:
                curIncrement += increments[incIdx][1]
                incIdx += 1
            if nums[i] > curIncrement:
                return False
        return True",1454814319
Kar Deepak Kumar,kardeepakkumar,519,3643,python3,"class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:

        if sum(nums) == 0:
            return 0

        def isPossible(lastIdx):
            increments = []
            for i in range(lastIdx + 1):
                increments.append((queries[i][0], queries[i][2]))
                increments.append((queries[i][1]+1, -1*queries[i][2]))
            increments.sort()
    
            curIncrement = 0
            incIdx = 0
            for i in range(len(nums)):
                while incIdx < len(increments) and increments[incIdx][0] <= i:
                    curIncrement += increments[incIdx][1]
                    incIdx += 1
                if nums[i] > curIncrement:
                    return False
            return True


        left, right = 0, len(queries)-1
        result = -1
        while left <= right:
            mid = (left + right)//2
            if isPossible(mid):
                result = mid + 1
                right = mid - 1
            else:
                left = mid + 1

        return result",1454826071
pocochuk,pocochuk,520,3616,cpp,"// #pragma GCC optimize (""Ofast"")
#include <bits/stdc++.h>
using namespace std;



#ifdef LOCAL
    #include ""helpers/debug.h""
    #define GA dbg(0);
#else
    #define dbg(...)     0
    #define chk(...)     0
    #define GA 0;

    #define RAYA         0
#endif



const auto beg_time = std::chrono::high_resolution_clock::now();
double time_elapsed() { return chrono::duration<double>(std::chrono::high_resolution_clock::now() - beg_time) .count(); }



// building blocks
using ll  = long long;
using db  = long double;
using str = string;

//? priority_queue for minimum
template<class T> using pqg = priority_queue<T, vector<T>, greater<T>>;
 
using ull  = unsigned long long;
//? using i64  = long long;
//? using u64  = uint64_t;
//? using i128 = __int128;
//? using u128 = __uint128_t;
//? using f128 = __float128;



// pairs
using pi = pair<int, int>;
using pl = pair<ll, ll>;
using pd = pair<db, db>;

#define mp make_pair
#define f  first
#define s  second



#define tcT template <class T
#define tcTU tcT, class U

tcT > using V = vector<T>;
tcT, size_t SZ > using AR = array<T, SZ>;
using vi = V<int>;
using vb = V<bool>;
using vl = V<ll>;
using vd = V<db>;
using vs = V<str>;
using vpi = V<pi>;
using vpl = V<pl>;
using vpd = V<pd>;

using vvi = V<vi>;
using vvl = V<vl>;
using vvb = V<vb>;

// vectors
// oops size(x), rbegin(x), rend(x) need C++17
#define sz(x) int((x).size())
#define bg(x) begin(x)
#define all(x) bg(x), end(x)
#define rall(x) x.rbegin(), x.rend()
#define sor(x) sort(all(x))
#define rsz resize
#define ins insert
#define pb push_back
#define eb emplace_back
#define ft front()
#define bk back()
#define ts to_string

#define lb lower_bound
#define ub upper_bound



// loops
#define FOR(i, a, b) for (int i = (a); i < (b); ++i)
#define F0R(i, a) FOR(i, 0, a)
#define ROF(i, a, b) for (int i = (b)-1; i >= (a); --i)
#define R0F(i, a) ROF(i, 0, a)
#define rep(a) F0R(_, a)
#define each(a, x) for (auto &a : x)



//? Template
const int MOD = 998244353;
const int MX = (int)2e5 + 5;
const ll BIG = 1e18;  //? not too close to LLONG_MAX
const ll INF = 1e18;
const db PI = acos((db)-1);
const int dx[4]{1, 0, -1, 0}, dy[4]{0, 1, 0, -1};  //? for every grid problem!!
mt19937 rng((uint32_t)chrono::steady_clock::now().time_since_epoch().count());

//? Generator
int rng_int(int L, int R) {
    assert(L <= R);
    return uniform_int_distribution<int>(L, R)(rng);
} 
ll rng_ll(ll L, ll R) {
    assert(L <= R);
    return uniform_int_distribution<ll>(L, R)(rng);
}
//? /Generator

#define lb lower_bound
#define ub upper_bound
tcT > int lwb(V<T>& a, const T& b) { return int(lb(all(a), b) - bg(a)); }
tcT > int upb(V<T>& a, const T& b) { return int(ub(all(a), b) - bg(a)); }

ll cdiv(ll a, ll b) {
	return a / b + ((a ^ b) > 0 && a % b);
}  // divide a by b rounded up
ll fdiv(ll a, ll b) {
	return a / b - ((a ^ b) < 0 && a % b);
}  // divide a by b rounded down

tcT > bool ckmin(T &a, const T &b) {
	return b < a ? a = b, 1 : 0;
}  // set a = min(a,b)
tcT > bool ckmax(T &a, const T &b) {
	return a < b ? a = b, 1 : 0;
}  // set a = max(a,b)
                
class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int response = 0;
        int n = sz(nums);
        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < 2; ++j) {
                cout << ""i: "" << i << "" j: "" << j << endl;
                int cur = i;
                int dir = j;
                vi nums2 = nums;
                if (nums2[cur] != 0) continue;

                while (0 <= cur && cur < n) {
                    if (nums2[cur] == 0) {
                        if (dir == 0) {
                            cur++;
                        } else {
                            cur--;
                        }
                    } else {
                        nums2[cur]--;
                        if (dir == 0) dir = 1;
                        else dir = 0;
                        if (dir == 0) {
                            cur++;
                        } else {
                            cur--;
                        }
                    }
                }

                bool valid = true;
                for (int p = 0; p < n; ++p) {
                    cout << nums2[p] << "" "";
                    if (nums2[p] != 0) valid = false;
                }
                cout << endl;

                if (valid) response++;
            }
        }
        return response;
    }
};",1454818538
pocochuk,pocochuk,520,3639,cpp,"// #pragma GCC optimize (""Ofast"")
#include <bits/stdc++.h>
using namespace std;



#ifdef LOCAL
    #include ""helpers/debug.h""
    #define GA dbg(0);
#else
    #define dbg(...)     0
    #define chk(...)     0
    #define GA 0;

    #define RAYA         0
#endif



const auto beg_time = std::chrono::high_resolution_clock::now();
double time_elapsed() { return chrono::duration<double>(std::chrono::high_resolution_clock::now() - beg_time) .count(); }



// building blocks
using ll  = long long;
using db  = long double;
using str = string;

//? priority_queue for minimum
template<class T> using pqg = priority_queue<T, vector<T>, greater<T>>;
 
using ull  = unsigned long long;
//? using i64  = long long;
//? using u64  = uint64_t;
//? using i128 = __int128;
//? using u128 = __uint128_t;
//? using f128 = __float128;



// pairs
using pi = pair<int, int>;
using pl = pair<ll, ll>;
using pd = pair<db, db>;

#define mp make_pair
#define f  first
#define s  second



#define tcT template <class T
#define tcTU tcT, class U

tcT > using V = vector<T>;
tcT, size_t SZ > using AR = array<T, SZ>;
using vi = V<int>;
using vb = V<bool>;
using vl = V<ll>;
using vd = V<db>;
using vs = V<str>;
using vpi = V<pi>;
using vpl = V<pl>;
using vpd = V<pd>;

using vvi = V<vi>;
using vvl = V<vl>;
using vvb = V<vb>;

// vectors
// oops size(x), rbegin(x), rend(x) need C++17
#define sz(x) int((x).size())
#define bg(x) begin(x)
#define all(x) bg(x), end(x)
#define rall(x) x.rbegin(), x.rend()
#define sor(x) sort(all(x))
#define rsz resize
#define ins insert
#define pb push_back
#define eb emplace_back
#define ft front()
#define bk back()
#define ts to_string

#define lb lower_bound
#define ub upper_bound



// loops
#define FOR(i, a, b) for (int i = (a); i < (b); ++i)
#define F0R(i, a) FOR(i, 0, a)
#define ROF(i, a, b) for (int i = (b)-1; i >= (a); --i)
#define R0F(i, a) ROF(i, 0, a)
#define rep(a) F0R(_, a)
#define each(a, x) for (auto &a : x)



//? Template
const int MOD = 998244353;
const int MX = (int)2e5 + 5;
const ll BIG = 1e18;  //? not too close to LLONG_MAX
const ll INF = 1e18;
const db PI = acos((db)-1);
const int dx[4]{1, 0, -1, 0}, dy[4]{0, 1, 0, -1};  //? for every grid problem!!
mt19937 rng((uint32_t)chrono::steady_clock::now().time_since_epoch().count());

//? Generator
int rng_int(int L, int R) {
    assert(L <= R);
    return uniform_int_distribution<int>(L, R)(rng);
} 
ll rng_ll(ll L, ll R) {
    assert(L <= R);
    return uniform_int_distribution<ll>(L, R)(rng);
}
//? /Generator

#define lb lower_bound
#define ub upper_bound
tcT > int lwb(V<T>& a, const T& b) { return int(lb(all(a), b) - bg(a)); }
tcT > int upb(V<T>& a, const T& b) { return int(ub(all(a), b) - bg(a)); }

ll cdiv(ll a, ll b) {
	return a / b + ((a ^ b) > 0 && a % b);
}  // divide a by b rounded up
                
ll fdiv(ll a, ll b) {
	return a / b - ((a ^ b) < 0 && a % b);
}  // divide a by b rounded down

tcT > bool ckmin(T &a, const T &b) {
	return b < a ? a = b, 1 : 0;
}  // set a = min(a,b)
tcT > bool ckmax(T &a, const T &b) {
	return a < b ? a = b, 1 : 0;
}
                
class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = sz(nums);
        vi a(n);
        cout << ""hola2"" << endl;
        for (auto e : queries) {
            int l = e[0], r = e[1]; 
            a[l]++;
            if (r + 1 < n) a[r + 1]--;
        }

        int tmp = 0;
        cout << ""hola1"" << endl;
        for (int i = 0; i < n; ++i) {
            tmp += a[i];
            a[i] = tmp;
        }

        bool possible = true;
        for (int i = 0; i < n; ++i) {
            if (a[i] < nums[i]) possible = false;
        }

        return possible;
    }
};",1454826830
pocochuk,pocochuk,520,3643,cpp,"// #pragma GCC optimize (""Ofast"")
#include <bits/stdc++.h>
using namespace std;



#ifdef LOCAL
    #include ""helpers/debug.h""
    #define GA dbg(0);
#else
    #define dbg(...)     0
    #define chk(...)     0
    #define GA 0;

    #define RAYA         0
#endif



const auto beg_time = std::chrono::high_resolution_clock::now();
double time_elapsed() { return chrono::duration<double>(std::chrono::high_resolution_clock::now() - beg_time) .count(); }



// building blocks
using ll  = long long;
using db  = long double;
using str = string;

//? priority_queue for minimum
template<class T> using pqg = priority_queue<T, vector<T>, greater<T>>;
 
using ull  = unsigned long long;
//? using i64  = long long;
//? using u64  = uint64_t;
//? using i128 = __int128;
//? using u128 = __uint128_t;
//? using f128 = __float128;



// pairs
using pi = pair<int, int>;
using pl = pair<ll, ll>;
using pd = pair<db, db>;

#define mp make_pair
#define f  first
#define s  second



#define tcT template <class T
#define tcTU tcT, class U

tcT > using V = vector<T>;
tcT, size_t SZ > using AR = array<T, SZ>;
using vi = V<int>;
using vb = V<bool>;
using vl = V<ll>;
using vd = V<db>;
using vs = V<str>;
using vpi = V<pi>;
using vpl = V<pl>;
using vpd = V<pd>;

using vvi = V<vi>;
using vvl = V<vl>;
using vvb = V<vb>;

// vectors
// oops size(x), rbegin(x), rend(x) need C++17
#define sz(x) int((x).size())
#define bg(x) begin(x)
#define all(x) bg(x), end(x)
#define rall(x) x.rbegin(), x.rend()
#define sor(x) sort(all(x))
#define rsz resize
#define ins insert
#define pb push_back
#define eb emplace_back
#define ft front()
#define bk back()
#define ts to_string

#define lb lower_bound
#define ub upper_bound



// loops
#define FOR(i, a, b) for (int i = (a); i < (b); ++i)
#define F0R(i, a) FOR(i, 0, a)
#define ROF(i, a, b) for (int i = (b)-1; i >= (a); --i)
#define R0F(i, a) ROF(i, 0, a)
#define rep(a) F0R(_, a)
#define each(a, x) for (auto &a : x)



//? Template
const int MOD = 998244353;
const int MX = (int)2e5 + 5;
const ll BIG = 1e18;  //? not too close to LLONG_MAX
const ll INF = 1e18;
const db PI = acos((db)-1);
const int dx[4]{1, 0, -1, 0}, dy[4]{0, 1, 0, -1};  //? for every grid problem!!
mt19937 rng((uint32_t)chrono::steady_clock::now().time_since_epoch().count());

//? Generator
int rng_int(int L, int R) {
    assert(L <= R);
    return uniform_int_distribution<int>(L, R)(rng);
} 
ll rng_ll(ll L, ll R) {
    assert(L <= R);
    return uniform_int_distribution<ll>(L, R)(rng);
}
//? /Generator

#define lb lower_bound
#define ub upper_bound
tcT > int lwb(V<T>& a, const T& b) { return int(lb(all(a), b) - bg(a)); }
tcT > int upb(V<T>& a, const T& b) { return int(ub(all(a), b) - bg(a)); }

ll cdiv(ll a, ll b) {
	return a / b + ((a ^ b) > 0 && a % b);
}  // divide a by b rounded up
ll fdiv(ll a, ll b) {
	return a / b - ((a ^ b) < 0 && a % b);
}  // divide a by b rounded down

tcT > bool ckmin(T &a, const T &b) {
	return b < a ? a = b, 1 : 0;
}  // set a = min(a,b)
tcT > bool ckmax(T &a, const T &b) {
	return a < b ? a = b, 1 : 0;
}

/**
 * Description: 1D range increment and sum query.
 * Source: USACO Counting Haybales
 	* https://codeforces.com/blog/entry/82400
 * Verification: USACO Counting Haybales
 */

struct LazySeg { 
	struct F { // lazy update
		ll inc = 0;
		F() {}
		F(ll x) { inc = x; }
		F& operator*=(const F& a) { inc += a.inc; return *this; }
	}; V<F> lazy;
	struct T { // data you need to store for each interval
		ll sz = 1, mx = -INF, sum = 0;
		T() {}
		T(ll x) { mx = sum = x; }
		friend T operator+(const T& a, const T& b) {
			T res; res.sz = a.sz+b.sz;
			res.mx = max(a.mx,b.mx), res.sum = a.sum+b.sum;
			return res;
		}
		T& operator*=(const F& a) {
			mx += a.inc; sum += (ll)sz*a.inc; return *this; }
	}; V<T> seg;
	int SZ = 1;
	void init(const V<T>& _seg) {
		while (SZ < sz(_seg)) SZ *= 2;
		seg.rsz(2*SZ); lazy.rsz(2*SZ);
		F0R(i,SZ) seg[SZ+i] = _seg[i];
		ROF(i,1,SZ) pull(i);
	}
	void push(int ind) { /// modify values for current node
		seg[ind] *= lazy[ind];
		if (ind < SZ) F0R(i,2) lazy[2*ind+i] *= lazy[ind];
		lazy[ind] = F();
	} // recalc values for current node
	void pull(int ind) { seg[ind] = seg[2*ind]+seg[2*ind+1]; }
	void upd(int lo, int hi, F inc, int ind, int L, int R) {
		push(ind); if (hi < L || R < lo) return;
		if (lo <= L && R <= hi) { 
			lazy[ind] = inc; push(ind); return; }
		int M = (L+R)/2; upd(lo,hi,inc,2*ind,L,M); 
		upd(lo,hi,inc,2*ind+1,M+1,R); pull(ind);
	}
	void upd(int lo, int hi, ll inc) { upd(lo,hi,{inc},1,0,SZ-1); }
	T query(int lo, int hi, int ind, int L, int R) {
		push(ind); if (lo > R || L > hi) return T();
		if (lo <= L && R <= hi) return seg[ind];
		int M = (L+R)/2; 
		return query(lo,hi,2*ind,L,M)+query(lo,hi,2*ind+1,M+1,R);
	}
	T query(int lo, int hi) { return query(lo,hi,1,0,SZ-1); }
};
                
class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = sz(nums);
        LazySeg st;
        st.seg.resize(n);
        for (int i = 0; i < n; ++i) {
            st.seg[i] = nums[i];
        }
            
        st.init(st.seg);
        cout << ""hola"" << endl;
        int q = sz(queries);
        int response = -1;
        if (st.query(0, n-1).mx <= 0) {
            return 0;
        }
        
        for (int i = 0; i < q; ++i) {
            int l = queries[i][0], r = queries[i][1];
            ll val = queries[i][2];

            st.upd(l, r, -val);

            if (st.query(0, n - 1).mx <= 0) {
                response = i + 1;
                break;
            }
        }

        return response;
    }
};",1454840746
dirigibility,dirigibility,522,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        s = sum(nums)
        acc = count = 0
        for n in nums:
            acc += n
            if n == 0 and abs(acc*2-s) <= 1:
                count += 2 if acc*2 == s else 1
        return count",1454807921
dirigibility,dirigibility,522,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        queries.sort()
        k = 0
        heap = []
        for i,n in enumerate(nums):
            while k < len(queries) and queries[k][0] == i:
                heappush(heap,queries[k][1])
                k += 1
            while heap and heap[0] < i:
                heappop(heap)
            if len(heap) < n:
                return False
        return True",1454819973
dirigibility,dirigibility,522,3643,python3,"class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        def good(l):
            q = sorted(queries[:l])
            k = 0
            heap = []
            s = 0
            for i,n in enumerate(nums):
                while k < len(q) and q[k][0] == i:
                    s += q[k][2]
                    heappush(heap,q[k][1:])
                    k += 1
                while heap and heap[0][0] < i:
                    s -= heappop(heap)[1]
                if s < n:
                    return False
            return True
        m = len(queries)+1
        result = bisect_left(range(m),True,key=good)
        return result if result < m else -1",1454826187
helinaik_11,helinaik_11,524,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {

        vector<int> w=nums;
        vector<int> zeros;
        int n=nums.size();
        for(int i=0;i<n;i++)
        {
            if(nums[i]==0) zeros.push_back(i);
        }
        int count=0;
        for(auto &i: zeros)
        {
            
            w=nums;
            char move='l';
            int curr=i;
            curr--;
            while(curr>=0 && curr<n)
            {
                if(w[curr]==0 && move=='l') curr--;
                else if(w[curr]==0 && move=='r') curr++;
                else
                {
                    w[curr]--;
                    if(move=='l') 
                    {
                        move='r';
                        curr++;
                    }
                    else
                    {
                        move='l';
                        curr--;
                    }
                }
            }
            int f=0;
            for(auto &it: w)
            {
                if(it!=0) 
                {
                    f=1;
                    break;
                }
            }
            count+=(f==0);
            //right

            w=nums;
            move='r';
            curr=i;
            curr++;
            while(curr>=0 && curr<n)
            {
                if(w[curr]==0 && move=='l') curr--;
                else if(w[curr]==0 && move=='r') curr++;
                else
                {
                    w[curr]--;
                    if(move=='l') 
                    {
                        move='r';
                        curr++;
                    }
                    else
                    {
                        move='l';
                        curr--;
                    }
                }
            }
            f=0;
            for(auto &it: w)
            {
                if(it!=0) 
                {
                    f=1;
                    break;
                }
            }
            count+=(f==0);
 
        }
        return count;
    }
};",1454813679
helinaik_11,helinaik_11,524,3639,cpp,"class Solution {
public:
        bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {

        int n=nums.size();
        vector<int> count(n+1,0);

        for(auto &query: queries)
        {
            count[query[0]]++;
            count[query[1]+1]--;
        }

        for(int i=1;i<count.size();i++)
        {
            count[i]=count[i]+count[i-1];
        }

        for(int i=0;i<n;i++)
        {
            if(count[i]<nums[i]) return false;
        }

        return true;
    }
};",1454823024
helinaik_11,helinaik_11,524,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {

        int n=nums.size();
        int left=0,right=queries.size(),k;
        int mn=INT_MAX;
        while(left<=right)
        {
            k=(left+right)/2;
            vector<int> count(n+1,0);

            for(int i=0;i<k;i++)
            {
                count[queries[i][0]]+=queries[i][2];
                count[queries[i][1]+1]-=queries[i][2];
            }
            for(int i=1;i<n;i++)
                {
                    count[i]+=count[i-1];
                }
            int f=0;
            for(int i=0;i<n;i++)
            {
                if(nums[i]>count[i])
                {
                    f=1;
                    break;
                }
            }
            if(f==0) 
            {
                right=k-1;
                mn=min(k,mn);
            }
            else left=k+1;
        }
        if(mn==INT_MAX) return -1;
        return mn;
    }
};",1454840901
Kinon,Kinon,528,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        bool is0 = true;
        for(int i=0; i<nums.size(); i++) is0 = (nums[i] == 0 && is0);
        if(is0) return 0;
        long long lo = 0, hi = queries.size()+1;
        while(hi-lo > 1){
            long long mid = (lo+hi)/2, delta[nums.size()+1];
            for(int i=0; i<=nums.size(); i++) delta[i] = 0;
            for(int i=0; i<mid; i++){
                delta[queries[i][0]] += queries[i][2];
                delta[queries[i][1]+1] -= queries[i][2]; 
            }
            bool bisa = true;
            long long cur = 0, idx = 0;
            for(int i=0; i<nums.size(); i++){
                cur += delta[i];
                bisa = (nums[i] <= cur && bisa);
            }
            if(bisa){
                hi = mid;
            }else{
                lo = mid;
            }
        }
        if(hi > queries.size()) return -1;
        return hi;
    }
};",1454838323
kasi nathan,kasinathansj,529,3616,java,"class Solution {
    public int countValidSelections(int[] nums) {
        int sum = 0;
        for(int i : nums){
            sum += i;
        }
        int ans = 0;
        int sum1 = 0;
        for(int i : nums){
            sum1 += i;
            sum -= i;
            if(i==0){
                if(sum1-sum == 0)ans += 2;
                else if(sum1-sum==1)ans++;
                else if(sum1-sum==-1)ans++;
            }
        }
        return ans;
    }
}",1454808081
kasi nathan,kasinathansj,529,3639,java,"class Solution {
    public boolean isZeroArray(int[] nums, int[][] queries) {
        HashMap<Integer,Integer> hm = new HashMap<>();
        for(int q[] : queries){
            hm.merge(q[0],1,Integer::sum);
            hm.merge(q[1]+1,-1,Integer::sum);
        }
        int sum = 0;
        for(int i = 0 ; i < nums.length ; i++){
            sum += hm.getOrDefault(i,0);
            if(sum<nums[i])return false;
        }
        return true;
    }
}",1454811133
kasi nathan,kasinathansj,529,3643,java,"class Solution {
    public int minZeroArray(int[] nums, int[][] queries) {
        int lo = 0;
        int hi = queries.length;
        int ans = -1;
        while(lo<=hi){
            int mid = (lo+hi)/2;
            boolean is = isZeroArray(nums,queries,mid);
            if(is){
                ans = mid;
                hi = mid-1;
            }else{
                lo = mid+1;
            }
        }
        return ans;
    }
    public boolean isZeroArray(int[] nums, int[][] queries , int ql) {
        HashMap<Integer,Integer> hm = new HashMap<>();
        for(int i = 0 ; i < ql ; i++){
            int q[] = queries[i];
            hm.merge(q[0],q[2],Integer::sum);
            hm.merge(q[1]+1,-q[2],Integer::sum);
        }
        int sum = 0;
        for(int i = 0 ; i < nums.length ; i++){
            sum += hm.getOrDefault(i,0);
            if(sum<nums[i])return false;
        }
        return true;
    }
}",1454826296
shivam gupta,gupta_shivam234,530,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int n=nums.size();
        vector<int>arr(n);
        for(int i=0; i<n; i++){
            arr[i]=nums[i];
        }
        int ans=0;
        for(int i=0; i<n; i++){
            if(nums[i]==0){
                int curr=i;
                int dir=1;
                while(curr<n && curr>=0){
                    if(arr[curr]==0){
                        curr=curr+dir;
                    }
                    else{
                        arr[curr]--;
                        if(dir==1) dir=-1;
                        else dir=1;
                        curr=curr+dir;
                    }
                }
                int flag=0;
                for(int i=0; i<n; i++){
                    if(arr[i]!=0){
                        flag=1;
                        break;
                    }
                }
                if(flag==0) ans++;
                for(int i=0; i<n; i++){
                    arr[i]=nums[i];
                }
                curr=i;
                dir=-1;
                while(curr<n && curr>=0){
                    if(arr[curr]==0){
                        curr=curr+dir;
                    }
                    else{
                        arr[curr]--;
                        if(dir==1) dir=-1;
                        else dir=1;
                        curr=curr+dir;
                    }
                }
                flag=0;
                for(int i=0; i<n; i++){
                    if(arr[i]!=0){
                        flag=1;
                        break;
                    }
                }
                if(flag==0) ans++;
                for(int i=0; i<n; i++){
                    arr[i]=nums[i];
                }
            }
        }
        return ans;
    }
};",1454814629
shivam gupta,gupta_shivam234,530,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n=nums.size();
        vector<int>pref(n+1,0);
        for(auto it: queries){
            pref[it[0]]++;
            pref[it[1]+1]--;
        }
        for(int i=1; i<=n; i++){
            pref[i]=pref[i-1]+pref[i];
        }
        for(int i=0; i<n; i++){
            if(nums[i]>pref[i]) return false;
        }
        return true;
    }
};",1454824004
shivam gupta,gupta_shivam234,530,3643,cpp,"class Solution {
public:
    bool check(int mid,vector<int>&nums,vector<vector<int>>&queries){
        int n=nums.size();
        vector<int>pref(n+1,0);
        for(int i=0; i<mid; i++){
            int l=queries[i][0];
            int r=queries[i][1];
            int w=queries[i][2];
            pref[l]+=w;
            pref[r+1]-=w;
        }
        for(int i=1; i<=n; i++){
            pref[i]+=pref[i-1];
        }
        for(int i=0; i<n; i++){
            if(nums[i]>pref[i]) return false;
        }
        return true;
    }
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n=nums.size();
        int m=queries.size();
        int ans=-1,mid;
        int low=0,high=m;
        while(low<=high){
            mid=low+(high-low)/2;
            if(check(mid,nums,queries)){
                ans=mid;
                high=mid-1;
            }
            else low=mid+1;
        }
        return ans;
    }
};",1454841017
Sunny Sehwag,sunnny0502,531,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        
        vector<int> leftsum , rightsum;
        
        int sum = 0;
        
        for(int i = 0 ; i < nums.size() ; i++){
            
            sum += nums[i];
            
            leftsum.push_back(sum);
        }
        
        sum = 0;
        
        for(int i = nums.size() - 1 ; i >= 0 ; i--){
            
            sum += nums[i];
            
            rightsum.push_back(sum);
        }
        
        reverse(rightsum.begin() , rightsum.end());
        
        int ans = 0;
        
        for(int i = 0 ; i < nums.size() ; i++){
            
            if(nums[i] == 0 and rightsum[i] == leftsum[i])      ans += 2;
            
            if(nums[i] == 0 and rightsum[i] == 1 + leftsum[i])      ans += 1;
            
            if(nums[i] == 0 and 1 + rightsum[i] == leftsum[i])      ans += 1;
        }
        
        return ans;
    }
};",1454809385
Sunny Sehwag,sunnny0502,531,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        
        vector<int> q(nums.size() + 1 , 0);
        
        for(auto &it : queries){
            
            q[it[0]]--;
            
            q[it[1] + 1]++;
        }
        
        int sum = 0;
        
        for(int i = 0 ; i < q.size() ; i++){
            
            sum += q[i];
            
            q[i] = sum;
        }
        
        for(int i = 0 ; i < nums.size() ; i++){
            
            if(nums[i] + q[i] <= 0)     continue;
            
            else        return false;
        }
        
        return true;
    }
};",1454819539
Sunny Sehwag,sunnny0502,531,3643,cpp,"// 2nd ques plus binary search kar deta hun 

class Solution {
public:
    
    bool ispos(int mid , vector<int> &nums , vector<vector<int>> &queries){
        
        vector<int> q(nums.size() + 1 , 0);
        
        for(int i = 0 ; i < mid ; i++){
            
            int l = queries[i][0] , r = queries[i][1] , val = queries[i][2];
            
            q[l] -= val;
            
            q[r + 1] += val;
        }
        
        int sum = 0;
        
        for(int i = 0 ; i < q.size() ; i++){
            
            sum += q[i];
            
            q[i] = sum;
        }
        
        for(int i = 0 ; i < nums.size() ; i++){
            
            if(nums[i] + q[i] <= 0)     continue;
            
            else        return false;
        }
        
        return true;
    }
    
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        
        int low = 0 , high = queries.size() , ans = -1;
        
        while(low <= high){
            
            int mid = low + (high - low) / 2;
            
            if(ispos(mid , nums , queries) == true){
                
                ans = mid;
                
                high = mid - 1;
            }
            
            else        low = mid + 1;
        }
        
        return ans;
    }
};",1454841031
Megh Shah,megh_2535,532,3616,cpp,"class Solution {
public:
    bool find(vector<int> nums, int start, int dir) {
        int n = nums.size();
        int curr = start;
        while (curr >= 0 && curr < n) {
            if (nums[curr] == 0) {
                curr += dir;
            } else {
                nums[curr]--;
                dir *= -1;
                curr += dir;
            }
        }
        for (int num : nums) {
            if (num != 0)
                return false;
        }
        return true;
    }
    int countValidSelections(vector<int>& nums) {
        int n = nums.size();
        int ans = 0;
        for (int i = 0; i < n; ++i) {
            if (nums[i] == 0) {
                if (find(nums, i, -1)) {
                    ans++;
                }
                if (find(nums, i, 1)) {
                    ans++;
                }
            }
        }
        return ans;
    }
};",1454809589
Megh Shah,megh_2535,532,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        vector<int>temp(n,0);
        for(int  i = 0; i < queries.size(); i++){
            int x = queries[i][0];
            int y = queries[i][1];
            temp[x] += 1;
            if(y < n - 1){
                 temp[y+1] += -1;
            }
        }
        if(temp[0] < nums[0]){
             return false;
        }
        for(int  i = 1 ; i< n;i++){
             temp[i] += temp[i-1];
            if(temp[i] < nums[i]){
                 return false;
            }
        }
        return true;
    }
};",1454821804
Megh Shah,megh_2535,532,3643,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums,vector<vector<int>>& queries, int k) {
        int n = nums.size();
        vector<int> temp(n, 0);
        for (int i = 0; i < k; ++i) {
            int x = queries[i][0];
            int y = queries[i][1];
            int val = queries[i][2];
            temp[x] += val;
            if (y + 1 < n) {
                temp[y + 1] -= val;
            }
        }
        for (int i = 1; i < n; ++i) {
            temp[i] += temp[i - 1];
        }
        for (int i = 0; i < n; ++i) {
            if (temp[i] < nums[i]) {
                return false;
            }
        }
        return true;
    }
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int m = queries.size();
        int left = 0, right = m;
        int result = -1;
        while (left <= right) {
            int mid = left + (right - left) / 2;
            if (isZeroArray(nums, queries, mid)) {
                result = mid;
                right = mid - 1;
            } else {
                left = mid + 1;
            }
        }
        return result;
    }
}
;",1454833744
ASB_,ASB_,533,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums)
    {
        int n = nums.size();
        int ans = 0;
        
        auto f = [&](vector<int> a, int pos, int dir) {
            if (a[pos] != 0)
                return 0;
            int cur = pos;
            while (cur < n && cur > -1) {
                if (a[cur] > 0) {
                    a[cur]--;
                    dir = !dir;
                }
                if (dir == 1) {
                    cur++;
                } else
                    cur--;
            }
            int fg = 0;
            for (int i = 0; i < n; i++) {
                if (a[i] != 0)
                    fg = 1;
            }
            if (fg == 0)
                return 1;
            else
                return 0;
        };
        for (int i = 0; i < n; i++) {
            ans += f(nums,i, 1);
            ans += f(nums,i, 0);
        }
        return ans;
    }
};",1454816924
ASB_,ASB_,533,3639,cpp,"typedef long long ll;
class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries)
    {
        ll n = nums.size();
        vector<ll> sw(n + 1, 0);
        for (auto u : queries) {
            sw[u[0]] += 1;
            sw[u[1] + 1] -= 1;
        }
        nums[0] -= sw[0];
        for (ll i = 1; i < n; i++) {
            sw[i] += sw[i - 1];
            nums[i] -= sw[i];
        }
        ll fg = 0;
        for (auto u : nums) {
            if (u > 0)
                fg = 1;
        }
        if (fg == 0)
            return true;
        else
            return false;
    }
};",1454827542
ASB_,ASB_,533,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries)
    {
        auto a = nums;
        int n = a.size();
        auto check = [&](int x) {
            vector<int> sw(n + 1, 0);
            for (int i = 0; i < x; i++) {
                auto u = queries[i];
                sw[u[0]] += u[2];
                sw[u[1] + 1] -= u[2];
            }
            for (int i = 1; i < n; i++) {
                sw[i] += sw[i - 1];
            }
            int fg = 1;
            for (int i = 0; i < n; i++) {
                if (a[i] > sw[i]) {
                    fg = 0;
                }
            }
            return fg;
        };
        if (!check(queries.size())) {
            return -1;
        }
        if(check(0)) {
            return 0;
        }
        int l = 0;
        int r = queries.size() + 1;
        cout << check(2) << endl;
        while (r - l > 1) {
            int mid = (r + l) >> 1;
            if (check(mid)) {
                r = mid;
            } else
                l = mid;
        }
        return r;
    }
};",1454841081
Eric Ge,ericlege98,534,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        su = sum(nums)
        ans = 0
        if su % 2 == 0:
            target = su // 2
            run = 0
            for i in nums:
                if i == 0 and run == target:
                    ans += 2
                run += i
        else:
            target = su // 2
            run = 0
            for i in nums:
                if i == 0 and (run == target or run == target + 1):
                    ans += 1
                run += i
        return ans",1454807776
Eric Ge,ericlege98,534,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        if sum(nums) == 0:
            return True
        def ok(k):
            events = []
            for l, r in queries[:k]:
                events.append((l, 1))
                events.append((r+1, -1))
            events.sort()
            ind = 0
            run = 0
            for i, n in enumerate(nums):
                while ind < len(events) and events[ind][0] == i:
                    run += events[ind][1]
                    ind += 1
                if n > run:
                    return False
            return True


            
        lo, hi = 1, len(queries) + 1
        while hi - lo > 1:
            mid = (hi + lo) // 2
            if not ok(mid):
                lo = mid
            else:
                return True
        if ok(lo):
            return True
        if lo == len(queries):
            return False
        if ok(lo+1):
            return True
        return False
        ",1454833763
Eric Ge,ericlege98,534,3643,python3,"class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        if sum(nums) == 0:
            return 0
        def ok(k):
            events = []
            for l, r, v in queries[:k]:
                events.append((l, v))
                events.append((r+1, -v))
            events.sort()
            ind = 0
            run = 0
            for i, n in enumerate(nums):
                while ind < len(events) and events[ind][0] == i:
                    run += events[ind][1]
                    ind += 1
                if n > run:
                    return False
            return True


            
        lo, hi = 1, len(queries) + 1
        while hi - lo > 1:
            mid = (hi + lo) // 2
            if not ok(mid):
                lo = mid
            else:
                hi = mid
        if ok(lo):
            return lo
        if lo == len(queries):
            return -1
        if ok(lo+1):
            return lo+1
        return -1
        ",1454830604
josh7788,josh7788,538,3616,java,"class Solution {
    public int countValidSelections(int[] nums) {
        int res = 0;
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] != 0) {
                continue;
            }
            if (can(Arrays.copyOf(nums, nums.length),i,1)) {
                res++;
            }
            if (can(Arrays.copyOf(nums, nums.length),i,-1)) {
                res++;
            }
        }
        return res;
    }

    private static boolean can(int[] nums, int i , int dir) {
        if (i >= nums.length || i < 0) {
            return check(nums);
        }

        if (nums[i] == 0) {
            return can(nums, i + dir, dir);
        }

        nums[i]--;
        dir = -dir;
        return can(nums, i + dir, dir);
    }

    private static boolean check(int[] nums) {
        for (int i : nums) {
            if (i > 0) {
                return false;
            }
        }

        return true;
    }
}",1454841351
josh7788,josh7788,538,3639,java,"class Solution {
    public boolean isZeroArray(int[] nums, int[][] queries) {
        int[] change = new int[nums.length + 1];

        for (int[] q : queries) {
            change[q[0]]--;
            change[q[1] + 1]++;
        }

        int sum = 0;

        for (int i = 0 ; i < nums.length; i++) {
            sum += change[i];
            if (nums[i] + sum > 0) {
                return false;
            }
        }

        return true;
    }
}",1454809188
josh7788,josh7788,538,3643,java,"class Solution {
    public int minZeroArray(int[] nums, int[][] queries) {
        if (!can(nums, queries, queries.length)) {
            return -1;
        }

        if (can(nums, queries, 0)) {
            return 0;
        }

        int l = 0, r = queries.length;

        while (l < r) {
            int mid = (l + r) / 2;

            boolean can = can(nums, queries, mid);

            if (can) {
                r = mid;
            } else {
                l = mid + 1;
            }
        }

        return l;
    }

    private static boolean can(int[] nums, int[][] queries, int k) {
        int[] change = new int[nums.length + 1];

        for (int i = 0; i< k; i++) {
            int[] q = queries[i];
            change[q[0]] -= q[2];
            change[q[1] + 1] += q[2];
        }

        int sum = 0;

        for (int i = 0 ; i < nums.length; i++) {
            sum += change[i];
            if (nums[i] + sum > 0) {
                return false;
            }
        }

        return true;
    }
}",1454823520
otto,_otto,540,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        
        
        ans = 0
        dd = ['L', 'R']
        start = [i for i, val in enumerate(nums) if val == 0]
        n = len(nums)
        for curr in start:
            for d in dd:
                fuck = nums[:]
                fuckc = curr
                curr_d = d
                while 0 <= fuckc < n:
                    if fuck[fuckc] == 0:
                        if curr_d == 'R':
                            fuckc += 1
                        else:
                            fuckc -= 1
                    elif fuck[fuckc] > 0:
                        fuck[fuckc] -= 1
                        curr_d = 'L' if curr_d == 'R' else 'R'
                        if curr_d == 'R':
                            fuckc += 1
                        else:
                            fuckc -= 1
                if all(val == 0 for val in fuck):
                    ans += 1
        return ans
",1454819290
otto,_otto,540,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        n = len(nums)
        diff = [0] * (n + 1)
        for l, r in queries:
            diff[l] += 1
            if r + 1 < n:
                diff[r + 1] -= 1
        cnt = [0] * n
        cnt[0] = diff[0]
        for i in range(1, n):
            cnt[i] = cnt[i - 1] + diff[i]
        for i in range(n):
            if cnt[i] < nums[i]:
                return False
        return True",1454816398
otto,_otto,540,3643,python3,"class lazysgt:
    def __init__(self, l, r):
        self.l = l
        self.r = r
        self.left = None
        self.right = None
        self.max = 0
        self.lazy = 0

def build(node, nums):
    if node.l == node.r:
        node.max = nums[node.l]
        return
    mid = (node.l + node.r) // 2
    node.left = lazysgt(node.l, mid)
    node.right = lazysgt(mid + 1, node.r)
    build(node.left, nums)
    build(node.right, nums)
    node.max = max(node.left.max, node.right.max)

def push_down(node):
    if node.lazy != 0:
        if node.left:
            node.left.max -= node.lazy
            node.left.lazy += node.lazy
        if node.right:
            node.right.max -= node.lazy
            node.right.lazy += node.lazy
        node.lazy = 0

def update(node, l, r, val):
    if node.r < l or node.l > r:
        return
    if l <= node.l and node.r <= r:
        node.max -= val
        node.lazy += val
        return
    push_down(node)
    update(node.left, l, r, val)
    update(node.right, l, r, val)
    node.max = max(node.left.max, node.right.max)

def query(node):
    return node.max
    
class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        n = len(nums)
        t = lazysgt(0, n - 1)
        build(t, nums)
        if all(x == 0 for x in nums): return 0
        for k, (l, r, val) in enumerate(queries, 1):
            update(t, l, r, val)
            ma = query(t)
            if ma <= 0:
                return k
        return -1
        ",1454826678
noBODY,9BODY,541,3616,cpp,"class Solution {
public:
    bool isValid(int pos,int dir,int total,vector<int> nums){

        int i=pos;
        int n = nums.size();
        int sum  = 0;
        while(i<n &&  i>=0){

            if(nums[i]==0){
                i += dir;
            }else if(nums[i]>0){
                sum++;
                nums[i]--;
                dir = (-1)*dir;
                i+=dir;
            }
        }
        return sum == total;
    }
    int countValidSelections(vector<int>& nums) {
        int sum =0;
        for(auto x : nums){
            sum+=x;
        }
        int count = 0;
        for(int i=0;i<nums.size();i++){
            if(nums[i]==0){
                if(isValid(i,1,sum,nums)) count++;
                if(isValid(i,-1,sum,nums)) count++;
            }
        }
        return count;
    }
};",1454819249
noBODY,9BODY,541,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        vector<int>arr(n+1,0);
        for(auto x : queries){
            arr[x[0]]++;
            arr[x[1]+1]--;
        }
        for(int i=0;i<n;i++){
            arr[i+1] += arr[i];
        }
        for(int i=0;i<n;i++){
            if(nums[i] > arr[i]){
                return false;
            }
        }
        return true;
    }
};",1454830501
noBODY,9BODY,541,3643,cpp,"class Solution {
public:
    bool isValid(int k,auto& nums,auto&q){
        int n = nums.size();
        vector<int>arr(n+1,0);
        for(int i=0;i<k;i++){
            auto x = q[i];
            arr[x[0]] += x[2];
            arr[x[1]+1] -= x[2];
        }
        for(int i=0;i<n;i++){
            arr[i+1] += arr[i];
        }
        for(int i=0;i<n;i++){
            if(nums[i] > arr[i]){
                return false;
            }
        }
        return true;
    }
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        vector<int>arr(n+1,0);
        int l = 0,r=queries.size();
        int ans = -1;
        while(l<=r){
            int mid = l + (r-l)/2;
            if(isValid(mid,nums,queries)){
                ans = mid;
                r = mid-1;
            }else{
                l = mid+1;
            }
        }
        return ans;
        
        return true;
    }
};",1454841471
Ritik,Saber2k18,542,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int n = nums.size();
        int sum = accumulate(nums.begin(), nums.end(),0);
        int p = 0;
        int ans = 0;
        for(int i=0;i<n;i++){
            p+=nums[i];
            if(nums[i]==0){
                if(p==sum-p)
                    ans+=2;
                else if(p+1==sum-p || p==sum-p+1)
                    ++ans;
            }
        }
        return ans;
    }
};",1454814682
Ritik,Saber2k18,542,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        vector<int> p(n, 0);
        for(auto x: queries){
            --p[x[0]];
            if(x[1]+1<n)
                ++p[x[1]+1];
        }
        for(int i=0;i<n;i++){
            p[i]=(i>0?p[i-1]:0)+p[i];
        }
        for(int i=0;i<n;++i){
            nums[i]+=p[i];
            if(nums[i]>0)
                return false;
        }
        return true;
    }
};",1454822032
Ritik,Saber2k18,542,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        bool okk = true;
        for(int i=0;i<n;i++){
            if(nums[i]!=0){
                okk = false;
                break;
            }
        }
        if(okk)
            return 0;
        int l=0, r=queries.size()-1;
        int ans = (int)queries.size();
        while(l<=r){
            int m = (l+r)/2;
            bool ok = true;
            vector<int> p(n, 0);
            vector<int> tnums = nums;
            tnums.resize(n);
            for(int i=0;i<=m;++i){
                p[queries[i][0]]-=queries[i][2];
                if(queries[i][1]+1<n)
                    p[queries[i][1]+1]+=queries[i][2];
            }
            for(int i=0;i<n;++i){
                p[i]=(i>0?p[i-1]:0)+p[i];
            }
            for(int i=0;i<n;i++){
                tnums[i]+=p[i];
                if(tnums[i]>0){
                    ok = false;
                    break;
                }
            }
            if(ok){
                ans = min(ans, m);
                r = m - 1;
            } else {
                l = m + 1;
            }
        }
        if(ans==(int)queries.size())
            return -1;
        return ans + 1;
    }
};",1454834174
Shivank Dixit,dshivank630,543,3616,cpp,"// lc
#define vi vector<int>
#define vvii vector<vi>
#define vpii vector<pair<int,int>>
#define vs vector<string>
#define mii map<int, int>
#define umii unordered_map<int, int>
#define minpq(a) priority_queue<a,vi,greater<a>> pq
#define maxpq(a) priority_queue<a> pq 
#define lb lower_bound
#define ub upper_bound
#define all(x) x.begin(), x.end()
#define sall(x) sort(x.begin(), x.end());
#define rall(x) sort(x.rbegin(), x.rend())
#define pb push_back 
#define in insert
#define ff first
#define ss second
#define rep(i, a, b) for (int i = a; i < b; i++)
#define all(x) x.begin(), x.end()
#define sall(x) sort(x.begin(), x.end());
#define rall(x) sort(x.rbegin(), x.rend())
#define MAX(x) *max_element(x.begin(), x.end())
#define MIN(x) *min_element(x.begin(), x.end())
#define SUM(X) accumulate(X.begin(), X.end(), 0LL)
#define rev(a) reverse(a.begin(), a.end());

class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int ans =0, n = nums.size();
        rep(i,0,n) {
            vi temp = nums;
            if(temp[i]!=0) continue;
            int j = i;
            //left
            bool l = true, r = false;
            while(true) {
                if(temp[j]==0) {
                    if(l) j--;
                    else j++;

                    if(j<0 or j>=n) break;
                } else {
                    temp[j]--;
                     if(l) l = false,r=true;
                    else l=true,r=false;
                    if(l) j--;
                    else j++;
                    
                     if(j<0 or j>=n) break;
                }
            } 
            bool flag = true;
              rep(j,0,n) {
                    if(temp[j]!=0) {
                        flag = false;
                        break;
                    }
                }
            if(flag) ans++;

             //right
            temp = nums; j=i;
            l = false, r = true;
            while(true) {
                if(temp[j]==0) {
                    if(l) j--;
                    else j++;

                    if(j<0 or j>=n) break;
                } else {
                    temp[j]--;
                     if(l) l = false,r=true;
                    else l=true,r=false;
                    if(l) j--;
                    else j++;
                    
                     if(j<0 or j>=n) break;
                }
            }
              flag = true;
              rep(j,0,n) {
                    if(temp[j]!=0) {
                        flag = false;
                        break;
                    }
                }
            if(flag) ans++;
        }
        return ans;
    }
};",1454817713
Shivank Dixit,dshivank630,543,3639,cpp,"// lc
#define vi vector<int>
#define vvii vector<vi>
#define vpii vector<pair<int,int>>
#define vs vector<string>
#define mii map<int, int>
#define umii unordered_map<int, int>
#define minpq(a) priority_queue<a,vi,greater<a>> pq
#define maxpq(a) priority_queue<a> pq 
#define lb lower_bound
#define ub upper_bound
#define all(x) x.begin(), x.end()
#define sall(x) sort(x.begin(), x.end());
#define rall(x) sort(x.rbegin(), x.rend())
#define pb push_back 
#define in insert
#define ff first
#define ss second
#define rep(i, a, b) for (int i = a; i < b; i++)
#define all(x) x.begin(), x.end()
#define sall(x) sort(x.begin(), x.end());
#define rall(x) sort(x.rbegin(), x.rend())
#define MAX(x) *max_element(x.begin(), x.end())
#define MIN(x) *min_element(x.begin(), x.end())
#define SUM(X) accumulate(X.begin(), X.end(), 0LL)
#define rev(a) reverse(a.begin(), a.end());


class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
         int n = nums.size();
         vi psum(n+1,0);

         for(auto it:queries) {
             int l = it[0];
             int r = it[1];

             psum[l]++;
             psum[r+1]--;
         }
        rep(i,1,n+1) psum[i]+=psum[i-1];

        bool flag = true;
        rep(i,0,n) {
            if(nums[i]>psum[i]) {
                flag = false;
                break;
            }
        }
        return flag;

    }
};",1454824027
Shivank Dixit,dshivank630,543,3643,cpp,"// lc
#define vi vector<int>
#define vvii vector<vi>
#define vpii vector<pair<int,int>>
#define vs vector<string>
#define mii map<int, int>
#define umii unordered_map<int, int>
#define minpq(a) priority_queue<a,vi,greater<a>> pq
#define maxpq(a) priority_queue<a> pq 
#define lb lower_bound
#define ub upper_bound
#define all(x) x.begin(), x.end()
#define sall(x) sort(x.begin(), x.end());
#define rall(x) sort(x.rbegin(), x.rend())
#define pb push_back 
#define in insert
#define ff first
#define ss second
#define rep(i, a, b) for (int i = a; i < b; i++)
#define all(x) x.begin(), x.end()
#define sall(x) sort(x.begin(), x.end());
#define rall(x) sort(x.rbegin(), x.rend())
#define MAX(x) *max_element(x.begin(), x.end())
#define MIN(x) *min_element(x.begin(), x.end())
#define SUM(X) accumulate(X.begin(), X.end(), 0LL)
#define rev(a) reverse(a.begin(), a.end());



class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();

        auto check = [&](int mid) {
                 vi psum(n+1,0);
        
                 rep(i,0,mid) {
                     int l = queries[i][0];
                     int r = queries[i][1];
                     int val = queries[i][2];
        
                     psum[l]+=val;
                     psum[r+1]-=val;
                 }
                rep(i,1,n+1) psum[i]+=psum[i-1];
        
                bool flag = true;
                rep(i,0,n) {
                    if(nums[i]>psum[i]) {
                        flag = false;
                        break;
                    }
                }
                return flag;
        };
        int low=0,high=queries.size(), ans = -1;
        while(low <= high) {
            int mid = (low+high)>>1;
            if(check(mid)) {
                ans = mid;
                high = mid-1;
            } else {
                low = mid+1;
            }
        }
        return ans;
    }
};",1454834177
reobb,reobb,544,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        res = 0
        for i in range(len(nums)):
            if nums[i] == 0 and sum(nums[0:i]) == sum(nums[i+1:]):
                res += 2
            elif nums[i] == 0 and abs(sum(nums[0:i]) - sum(nums[i+1:])) == 1:
                res += 1
        return res",1454808514
reobb,reobb,544,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        deductions = [0 for i in range(len(nums))]
        for i, j in queries:
            deductions[i] += 1
            if j+1 < len(nums):
                deductions[j+1] -= 1        
        curr = 0
        for i in range(len(nums)):
            curr += deductions[i]
            if curr < nums[i]:
                return False
        return True
        ",1454820653
reobb,reobb,544,3643,python3,"class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        start = 0
        end = len(queries)
        while start + 1 < end:
            mid = (start + end)//2
            if self.process(nums, queries, mid):
                end = mid
            else:
                start = mid
        if self.process(nums, queries, start):
            return start
        elif self.process(nums, queries, end):
            return end
        else:
            return -1

    def process(self, nums, queries, k):
        deductions = [0 for i in range(len(nums))]
        for i, j, v in queries[0:k]:
            deductions[i] += v
            if j + 1 < len(deductions):
                deductions[j+1] -= v
        curr = 0
        for i in range(len(nums)):
            curr += deductions[i]
            if nums[i] > curr:
                #print(nums, k, False)
                return False
        #print(nums, k, True)
        return True",1454834275
xymabinogi,xymabinogi,546,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int n = nums.size();
        
        auto check = [&](int idx, int dir) -> bool {
            auto a = nums;
            while(true){
                idx += dir;
                if (idx < 0 || idx >= n) break;
                if (a[idx] == 0){
                    continue;
                }
                else {
                    // > 0
                    a[idx]--;
                    dir = -dir;
                }
            }
            for (int i = 0; i < n; i++){
                if (a[i] > 0) return false;
            }
            return true;
        };
        int res = 0;
        for (int i = 0; i < n; i++) if (nums[i] == 0){
            res += check(i, 1);
            res += check(i, -1);
        }
        return res;
    }
};",1454809684
xymabinogi,xymabinogi,546,3639,cpp,"using i64 = long long;
class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        vector<int> delta(n + 1, 0);
        for (auto q : queries){
            delta[q[0]]++;
            delta[q[1] + 1]--;
        }
        for (int i = 1; i <= n; i++){
            delta[i] += delta[i - 1];
        } 
        for (int i = 0; i < n; i++){
            if (delta[i] < nums[i]) return false;
        }
        return true;
        
        
    }
};",1454826239
xymabinogi,xymabinogi,546,3643,cpp,"using i64 = long long;
class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        int m = queries.size();
        
        bool ok = true;
        for (int i = 0; i < n; i++) {
            if (nums[i]){
                ok = false;
                break;
            }
        }
        if (ok) return 0;
        
        auto check = [&](int mx) -> bool {
            vector<i64> delta(n + 1, 0);
            for (int i = 0; i <= mx; i++){
                auto q = queries[i];
                delta[q[0]] += q[2];
                delta[q[1] + 1] -= q[2];
            }
            for (int i = 1; i <= n; i++){
                delta[i] += delta[i - 1];
            } 
            for (int i = 0; i < n; i++){
                if (delta[i] < nums[i]) return false;
            }
            return true;        
        };
        
        
        int l = 0, r = m;
        while(l < r){
            int mid = (l + r) / 2;
            if (check(mid)){
                r = mid;
            }
            else l = mid + 1;
        }
        if (l == m) return -1;
        return l + 1;
          
    }
};",1454834396
drifter,_drifter,547,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {

        vector<long long> vec;
        for (long long v: nums) {
            vec.push_back(v);
        }

        vector<long long> pre_sum((int) vec.size() + 1);
        vector<long long> suf_sum((int) vec.size() + 1);
        partial_sum(vec.begin(), vec.end(), pre_sum.begin() + 1);
        partial_sum(vec.rbegin(), vec.rend(), suf_sum.begin() + 1);

        int n = nums.size();
        int ans = 0;

        for (int i = 0; i < n; i++) {

            if (nums[i] != 0) {
                continue;
            }

            int rev_index = n - 1 - i;
            if (pre_sum[i] == suf_sum[rev_index]) {
                ans += 2;
            } else if (pre_sum[i] + 1 == suf_sum[rev_index] || suf_sum[rev_index] + 1 == pre_sum[i]) {
                ++ans;
            } else {

            }
        }

        return ans;
    }
};",1454812371
drifter,_drifter,547,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {

        int n = nums.size();
        vector<int> pre_sum(n + 1, 0);

        for (const vector<int> &query : queries) {
            pre_sum[query.front()] += 1;
            pre_sum[query.back() + 1] -= 1;
        }

        for (int i = 0; i < n; i++) {
            pre_sum[i + 1] += pre_sum[i];
        }

        bool ans = true;

        for (int i = 0; i < n; i++) {

            if (nums[i] <= pre_sum[i]) {
                continue;
            } else {
                ans = false;
                break;
            }
        }

        return ans;
    }
};",1454820038
drifter,_drifter,547,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {

        int n = nums.size();

        auto check = [&] (int k) -> bool {

            vector<int> pre_sum(n + 1, 0);

            for (int i = 0; i < k; i++) {
                pre_sum[queries[i][0]] += queries[i][2];
                pre_sum[queries[i][1] + 1] -= queries[i][2];
            }

            for (int i = 0; i < n; i++) {
                pre_sum[i + 1] += pre_sum[i];
            }

            for (int i = 0; i < n; i++) {

                if (nums[i] <= pre_sum[i]) {
                    continue;
                } else {
                    return false;
                }
            }

            return true;
        };

        int q = queries.size();
        if (!check(q)) {
            return -1;
        }

        int right = q;
        int left = -1;

        while (1 < right - left) {

            int mid = (left + right) >> 1;

            if (check(mid)) {
                right = mid;
            } else {
                left = mid;
            }
        }

        return right;
    }
};",1454841741
Sohail Kazi,sohailkazi,549,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& a) {
        int ans = 0;
        int n = a.size();
        for (int i = 0; i < n; i++)
            {
                int cur = i;
                if (a[i] != 0) continue;
                int dir = 0;
                vector<int> b = a;
                while (cur >= 0 && cur < n)
                {
                    if (b[cur] == 0)
                    {
                        if (dir) cur++;
                        else cur--;
                    }
                    else
                    {
                        b[cur]--;
                        dir ^= 1;
                        if (dir) cur++;
                        else cur--;
                    }
                    
                }
                bool found = true;
                if (count(b.begin(), b.end(), 0) == n)
                {
                    ans++;
                }

                if (found)
                {
                    cur = i;
                    dir = 1;
                    b = a;

                    while (cur >= 0 && cur < n)
                    {
                        if (b[cur] == 0)
                        {
                            if (dir) cur++;
                            else cur--;
                        }
                        else
                        {
                            b[cur]--;
                            dir ^= 1;
                            if (dir) cur++;
                            else cur--;
                        }
                        
                    }
                    if (count(b.begin(), b.end(), 0) == n)
                    {
                        ans++;
                    }

                }
            }

        return ans;
    }
};",1454819658
Sohail Kazi,sohailkazi,549,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& a, vector<vector<int>>& q) {
        int n = a.size();
        vector<int> diff(n);

        for (auto k : q)
        {
            int x = k[0], y = k[1];
            diff[x]++;
            if (y < n - 1) diff[y + 1]--;
        }
        for (int i = 1; i < n; i++) diff[i] += diff[i - 1];

        for (int i = 0; i < n; i++)
        {
            int val = a[i] - diff[i];
            if (val > 0) return false;
        }
        return true;
    }
};",1454828429
Sohail Kazi,sohailkazi,549,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& a, vector<vector<int>>& q) {
        int n = a.size();
        int qn = q.size();

        auto check = [&](int k) -> bool
        {
            vector<int> diff(n);

            for (int i = 0; i < k; i++)
            {
                int l = q[i][0];
                int r = q[i][1];
                int v = q[i][2];

                diff[l] += v;
                if (r < n - 1) diff[r + 1] -= v;
            }

            for (int i = 1; i < n; i++) diff[i] += diff[i - 1];

            for (int i = 0; i < n; i++)
            {
                int val = a[i] - diff[i];
                if (val > 0) return false;
                
            }
            return true;
        };

        int l = -1, r = qn;

        while (r - l > 1)
        {
            int mid = midpoint(l, r);

            if (check(mid)) r = mid;
            else l = mid;
        }

        if (check(r)) return r;
        else return -1;
        return r;
    }
};",1454841768
Facundo Galán,facug91,550,3616,cpp,"class Solution {
public:
	int countValidSelections(vector<int>& nums) {
		int total = std::reduce(nums.begin(), nums.end());
		int l = 0, r = total, ans = 0;
		for (int i = 0; i < nums.size(); i++) {
			if (nums[i] == 0) {
				if (l == r) ans += 2;
				if (l + 1 == r || l - 1 == r) ans++;
			} else {
				l += nums[i];
				r -= nums[i];
			}
		}
		return ans;
	}
};",1454813608
Facundo Galán,facug91,550,3639,cpp,"static const int fastIO = [] {
	std::ios_base::sync_with_stdio(false), std::cin.tie(nullptr), std::cout.tie(nullptr);
	return 0;
}();

class Solution {
public:
	bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
		int n = (int)nums.size();
		vector<int> RSQ(n + 5, 0);
//		for (int i = 0; i < n; i++) {
//			RSQ[i] += nums[i];
//			RSQ[i + 1] -= nums[i];
//		}
		for (const auto& query: queries) {
			RSQ[query[0]]++;
			RSQ[query[1] + 1]--;
		}
		int curr = 0;
		for (int i = 0; i < n; i++) {
			curr += RSQ[i];
			if (nums[i] > curr) return false;
		}
		return true;
	}
};",1454819514
Facundo Galán,facug91,550,3643,cpp,"static const int fastIO = [] {
	std::ios_base::sync_with_stdio(false), std::cin.tie(nullptr), std::cout.tie(nullptr);
	return 0;
}();

class Solution {
private:
	bool check(vector<int>& nums, vector<vector<int>>& queries, int q) {
		int n = (int)nums.size();
		vector<int> RSQ(n + 5, 0);
		for (int i = 0; i < q; i++) {
			RSQ[queries[i][0]] += queries[i][2];
			RSQ[queries[i][1] + 1] -= queries[i][2];
		}
		int curr = 0;
		for (int i = 0; i < n; i++) {
			curr += RSQ[i];
			if (nums[i] > curr) return false;
		}
		return true;
	}

public:
	int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
		int lo = 0, hi = queries.size();
		if (!check(nums, queries, hi)) return -1;
		while (lo < hi) {
			int mid = (lo + hi) / 2;
			if (check(nums, queries, mid)) hi = mid;
			else lo = mid + 1;
		}
		return lo;
	}
};",1454841793
tmimotw,tmimotw,552,3616,java,"class Solution {
public int countValidSelections(int[] nums) {
        var result = 0;
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] == 0) {
                result += countValidSelectionsSolve(nums.clone(), i, 1);
                result += countValidSelectionsSolve(nums.clone(), i, -1);
            }
        }
        return result;
    }

    private int countValidSelectionsSolve(int[] nums, int currentIndex, int currentDirection) {
        if (currentIndex < 0 || currentIndex == nums.length) {
            for (int i = 0; i < nums.length; i++) {
                if (nums[i] != 0)
                    return 0;
            }
            return 1;
        }
        if (nums[currentIndex] == 0)
            return countValidSelectionsSolve(nums, currentIndex + currentDirection, currentDirection);
        nums[currentIndex]--;
        return countValidSelectionsSolve(nums, currentIndex - currentDirection, -currentDirection);
    }
}",1454813585
tmimotw,tmimotw,552,3639,java,"class Solution {
    public boolean isZeroArray(int[] nums, int[][] queries) {
        var delta = new int[nums.length];
        for (var query : queries) {
            delta[query[0]]++;
            if (query[1] < nums.length - 1) {
                delta[query[1] + 1]--;
            }
        }
        var prefixArr = new int[nums.length];
        prefixArr[0] = delta[0];
        for (int i = 1; i < prefixArr.length; i++) {
            prefixArr[i] = prefixArr[i - 1] + delta[i];
        }

        for (int i = 0; i < nums.length; i++) {
            if (nums[i] > prefixArr[i]) {
                return false;
            }
        }
        return true;
    }
}",1454830154
tmimotw,tmimotw,552,3643,java,"class Solution {
public int minZeroArray(int[] nums, int[][] queries) {
        var segmentTree = new SegmentTreeMax(nums);
        var max = segmentTree.maxRange(0, nums.length - 1);
        if (max <= 0)
            return 0;
        for (int i = 0; i < queries.length; i++) {
            segmentTree.updateRange(queries[i][0], queries[i][1], -queries[i][2]);
            max = segmentTree.maxRange(0, nums.length - 1);
            if (max <= 0)
                return i + 1;
        }
        return -1;
    }
}

class SegmentTreeMax {

    private int[] t;

    private int n;
    private int[] lazy;

    public SegmentTreeMax(int[] nums) {
        n = nums.length;
        t = new int[4 * n + 1];
        lazy = new int[4 * n + 1];
        build(nums, 1, 0, nums.length - 1);
    }

    private void build(int[] nums, int v, int tl, int tr) {
        if (tl == tr) {
            t[v] = nums[tl];
        } else {
            var tm = (tl + tr) / 2;
            build(nums, 2 * v, tl, tm);
            build(nums, 2 * v + 1, tm + 1, tr);
            t[v] = Math.max(t[2 * v], t[2 * v + 1]);
        }
    }

    public void updateRange(int l, int r, int add) {
        updateRange(1, 0, n - 1, l, r, add);
    }

    private void updateRange(int v, int tl, int tr, int l, int r, int add) {
        if (l > r)
            return;
        if (l == tl && r == tr) {
            t[v] += add;
            lazy[v] += add;
        } else {
            push(v);
            int tm = (tl + tr) / 2;
            updateRange(v * 2, tl, tm, l, Math.min(r, tm), add);
            updateRange(v * 2 + 1, tm + 1, tr, Math.max(l, tm + 1), r, add);
            t[v] = Math.max(t[v * 2], t[v * 2 + 1]);
        }
    }

    void push(int v) {
        t[v * 2] += lazy[v];
        lazy[v * 2] += lazy[v];
        t[v * 2 + 1] += lazy[v];
        lazy[v * 2 + 1] += lazy[v];
        lazy[v] = 0;
    }

    public int maxRange(int left, int right) {
        return max(1, 0, n - 1, left, right);
    }

    private int max(int v, int tl, int tr, int l, int r) {
        if (l > r)
            return 0;
        if (l == tl && r == tr)
            return t[v];
        push(v);
        var tm = (tl + tr) / 2;
        return Math.max(max(v * 2, tl, tm, l, Math.min(r, tm)), max(v * 2 + 1, tm + 1, tr, Math.max(l, tm + 1), r));
    }
}",1454841895
Gokul1230,Gokul1230,553,3616,cpp,"class Solution {
public:
    bool check(vector<int>nums,int i,int d){
        while(i<nums.size() && i>=0){
            if(nums[i]!=0) nums[i]--,d*=-1;
            i+=d;
        }
        for(int i:nums) if(i!=0) return false;
        return true;
    }
    int countValidSelections(vector<int>& nums) {
        int ans =0;
        for(int i=0;i<nums.size();i++){
            if(nums[i]==0) ans+= check(nums,i,1) + check(nums,i,-1);
        }
        return ans;
    }
};",1454817813
Gokul1230,Gokul1230,553,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& q) {
        int n = nums.size();
        vector<int>pre(n+1);
        for(int i=0;i<q.size();i++){
            pre[q[i][0]]--;
            pre[q[i][1]+1]++;
        }
        for(int i=1;i<=n;i++) pre[i]+=pre[i-1];
        for(int i=0;i<n;i++) if(pre[i] + nums[i]>0) return false;
        return true;
    }
};",1454824917
Gokul1230,Gokul1230,553,3643,cpp,"class Solution {
public:
    #define ll long long
    bool check(vector<int>& nums, vector<vector<int>>& q,ll m) {
        ll n = nums.size();
        vector<ll>pre(n+1);
        for(ll i=0;i<m;i++){
            pre[q[i][0]]-= q[i][2];
            pre[q[i][1]+1]+= q[i][2];
        }
        for(ll i=1;i<=n;i++) pre[i]+=pre[i-1];
        for(ll i=0;i<n;i++) if(pre[i] + nums[i]>0) return false;
        return true;
    }
    int minZeroArray(vector<int>& nums, vector<vector<int>>& q) {
        ll n = nums.size();
        ll l = 0 , r = q.size(),ans =-1;
        while(l<=r){
            ll mid = l+ (r-l)/2;
            if(check(nums,q,mid)){
                ans = mid;
                r = mid-1;
            }
            else l  = mid+1;
        }
        return ans;
    }
};",1454834574
Farhaan Habeeb Gazi,fhgazi,556,3616,cpp,"#define PList(V)    {for(auto x:(V)) cout<<x<<"" ""; cout<<endl;}
#define all(V)      (V).begin(),(V).end()
#define rall(V)     (V).rbegin(),(V).rend()
#define sz(V)       int(V.size())
#define fi          first
#define se          second
#define p_b         push_back
#define ll          long long
#define double      long double

typedef vector<ll>   vi;
typedef pair<ll,ll> ii;
typedef vector<ii>   vii;
typedef vector<vi>   vvi;
typedef vector<vii>   vvii;

#define MOD         1000000007
//#define MOD         998244353
#define INF         500000000000000000
#define ZERO        (ll)0
#define ONE         (ll)1

inline ll add(ll a, ll b){ a%=MOD; b%=MOD; return (a+b)%MOD; }
inline ll sub(ll a, ll b){ a%=MOD; return (a-b+MOD)%MOD; }
inline ll mul(ll a, ll b){ a%=MOD; b%=MOD; return (a*b)%MOD; }
ll bpow(ll A, ll p){
    if(p==0) return 1;
    ll tmp = bpow(A, p/2);
    return mul( mul(tmp, tmp), (p%2 ? A : 1) );
}
ll inv(int N){ return bpow(N, MOD-2); }
inline ll dvd(int a, int b){ return mul(a, inv(b)); }

inline int preSm(vi &A, int l, int r){ if(r<l) return 0; return A[r]-(l-1>=0 ? A[l-1] : 0); };


class Solution {
public:
    int countValidSelections(vector<int>& A) {
        int N = sz(A);
        vi pA(N); pA[0]=A[0]; for(int i=1; i<N; i++) pA[i]=A[i]+pA[i-1];
        
        int ans = 0;
        for(int i=0; i<N; i++) if(A[i]==0) {
            int d = preSm(pA, 0, i-1)-preSm(pA, i+1, N-1);
            if(d==0) ans+=2;
            if(abs(d)==1) ans+=1;
        }
        return ans;
        
    }
};",1454817935
Farhaan Habeeb Gazi,fhgazi,556,3639,cpp,"#define PList(V)    {for(auto x:(V)) cout<<x<<"" ""; cout<<endl;}
#define all(V)      (V).begin(),(V).end()
#define rall(V)     (V).rbegin(),(V).rend()
#define sz(V)       int(V.size())
#define fi          first
#define se          second
#define p_b         push_back
#define ll          long long
#define double      long double

typedef vector<ll>   vi;
typedef pair<ll,ll> ii;
typedef vector<ii>   vii;
typedef vector<vi>   vvi;
typedef vector<vii>   vvii;

#define MOD         1000000007
//#define MOD         998244353
#define INF         500000000000000000
#define ZERO        (ll)0
#define ONE         (ll)1

inline ll add(ll a, ll b){ a%=MOD; b%=MOD; return (a+b)%MOD; }
inline ll sub(ll a, ll b){ a%=MOD; return (a-b+MOD)%MOD; }
inline ll mul(ll a, ll b){ a%=MOD; b%=MOD; return (a*b)%MOD; }
ll bpow(ll A, ll p){
    if(p==0) return 1;
    ll tmp = bpow(A, p/2);
    return mul( mul(tmp, tmp), (p%2 ? A : 1) );
}
ll inv(int N){ return bpow(N, MOD-2); }
inline ll dvd(int a, int b){ return mul(a, inv(b)); }

class Solution {
public:
    bool isZeroArray(vector<int>& V, vector<vector<int>>& Qry) {
        int N = sz(V);
        vi P(N+1);
        for(auto &Q : Qry){
            int L = Q[0], R = Q[1];
            P[L]++, P[R+1]--;
        }
        
        //PList(P);
        for(int i=1; i<sz(P); i++) P[i]+=P[i-1];
        
        for(int i=0; i<N; i++) if(V[i]-P[i]>0) return false;
        return true;
        
        
    }
};",1454824420
Farhaan Habeeb Gazi,fhgazi,556,3643,cpp,"#define PList(V)    {for(auto x:(V)) cout<<x<<"" ""; cout<<endl;}
#define all(V)      (V).begin(),(V).end()
#define rall(V)     (V).rbegin(),(V).rend()
#define sz(V)       int(V.size())
#define fi          first
#define se          second
#define p_b         push_back
#define ll          long long
#define double      long double

typedef vector<ll>   vi;
typedef pair<ll,ll> ii;
typedef vector<ii>   vii;
typedef vector<vi>   vvi;
typedef vector<vii>   vvii;

#define MOD         1000000007
//#define MOD         998244353
#define INF         500000000000000000
#define ZERO        (ll)0
#define ONE         (ll)1

inline ll add(ll a, ll b){ a%=MOD; b%=MOD; return (a+b)%MOD; }
inline ll sub(ll a, ll b){ a%=MOD; return (a-b+MOD)%MOD; }
inline ll mul(ll a, ll b){ a%=MOD; b%=MOD; return (a*b)%MOD; }
ll bpow(ll A, ll p){
    if(p==0) return 1;
    ll tmp = bpow(A, p/2);
    return mul( mul(tmp, tmp), (p%2 ? A : 1) );
}
ll inv(int N){ return bpow(N, MOD-2); }
inline ll dvd(int a, int b){ return mul(a, inv(b)); }

class Solution {
public:
    int minZeroArray(vector<int>& V, vector<vector<int>>& Qry) {
       int N = sz(V);
        
        auto valid = [&](int Q)->bool{
            vi P(N+1);
            for(int q=0; q<Q; q++){
                vector<int> &Q = Qry[q];
                int L = Q[0], R = Q[1], X = Q[2];
                P[L]+=X, P[R+1]-=X;
            }
            for(int i=1; i<sz(P); i++) P[i]+=P[i-1];

            for(int i=0; i<N; i++) if(V[i]-P[i]>0) return false;
            return true; 
        };
        
        int l = 0, r = sz(Qry);
        while(l<r){
            int m = (l+r)/2;
            
            if(valid(m)) r=m;
            else l = m+1;
        }
        
        return (valid(l) ? l : -1);
    }
};",1454834660
Denis,LLIEPJIOK,557,3616,cpp,"class Solution {
public:
    bool check(vector<int> nums, int move, int cur, int sum) {
        while (sum != 0) {
            cur += move;
            if (cur < 0 || cur >= nums.size()) {
                return false;
            }
            
            if (nums[cur] != 0) {
                nums[cur]--;
                move *= -1;
                sum--;
            }
        }

        return true;
    }
    int countValidSelections(vector<int>& nums) {
        int sum = accumulate(nums.begin(), nums.end(), 0);
        int cnt = 0;
        for (int i = 0; i < nums.size(); i++) {
            if (nums[i] == 0) {
            cnt += check(nums, 1, i, sum);
            cnt += check(nums, -1, i, sum);
            }
        }

        return cnt;
    }
};",1454811023
Denis,LLIEPJIOK,557,3639,cpp,"class Solution {
public:
    vector<pair<int, int>> st;

    void build(int cur, int l, int r, vector<int>& a) {
        if (l + 1 == r) {
            st[cur] = {a[l], 0};
            return;
        }

        int mid = (l + r) / 2;
        build(2 * cur, l, mid, a);
        build(2 * cur + 1, mid, r, a);

        st[cur] = {max(st[2 * cur].first, st[2 * cur + 1].first), 0};
    }

    void update_promise(int cur, int l, int r) {
        if (l + 1 != r) {
            st[2 * cur].second += st[cur].second;
            st[2 * cur + 1].second += st[cur].second;
        }

        st[cur].first -= st[cur].second;
        st[cur].second = 0;
    }

    void update(int cur, int l, int r, int nl, int nr, int x) {
        update_promise(cur, l, r);
        
        if (r <= nl || l >= nr) {
            return;
        }

        if (nl <= l && r <= nr) {
            st[cur].second += x;
            update_promise(cur, l, r);
            return;
        }

        int mid = (l + r) / 2;
        update(2 * cur, l, mid, nl, nr, x);
        update(2 * cur + 1, mid, r, nl, nr, x);

        st[cur].first = max(st[2 * cur].first, st[2 * cur + 1].first);
    }

    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();   
        st.resize(4 * n);
        build(1, 0, n, nums);
        int cnt = 0;
        while (st[1].first > 0) {
            if (cnt == queries.size()) {
                return false;
            }
            
            update(1, 0, n, queries[cnt][0], queries[cnt][1] + 1, 1);
            cnt++;
        }

        return true;
    }
};",1454842019
Denis,LLIEPJIOK,557,3643,cpp,"class Solution {
public:
    vector<pair<int, int>> st;

    void build(int cur, int l, int r, vector<int>& a) {
        if (l + 1 == r) {
            st[cur] = {a[l], 0};
            return;
        }

        int mid = (l + r) / 2;
        build(2 * cur, l, mid, a);
        build(2 * cur + 1, mid, r, a);

        st[cur] = {max(st[2 * cur].first, st[2 * cur + 1].first), 0};
    }

    void update_promise(int cur, int l, int r) {
        if (l + 1 != r) {
            st[2 * cur].second += st[cur].second;
            st[2 * cur + 1].second += st[cur].second;
        }

        st[cur].first -= st[cur].second;
        st[cur].second = 0;
    }

    void update(int cur, int l, int r, int nl, int nr, int x) {
        update_promise(cur, l, r);
        
        if (r <= nl || l >= nr) {
            return;
        }

        if (nl <= l && r <= nr) {
            st[cur].second += x;
            update_promise(cur, l, r);
            return;
        }

        int mid = (l + r) / 2;
        update(2 * cur, l, mid, nl, nr, x);
        update(2 * cur + 1, mid, r, nl, nr, x);

        st[cur].first = max(st[2 * cur].first, st[2 * cur + 1].first);
    }

    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();   
        st.resize(4 * n);
        build(1, 0, n, nums);
        int cnt = 0;
        while (st[1].first > 0) {
            if (cnt == queries.size()) {
                return -1;
            }
            
            update(1, 0, n, queries[cnt][0], queries[cnt][1] + 1, queries[cnt][2]);
            cnt++;
        }

        return cnt;
    }
};",1454840907
Yash Kumar Gupta,ykgupta2411,558,3616,java,"class Solution {
    public int countValidSelections(int[] nums) {
        int ans = 0;
        int n = nums.length;
        int sum = 0;
        for(int i : nums)
            sum += i;
        for(int i = 0, prefix = 0; i < n; i++)
        {
            prefix += nums[i];
            if(nums[i] != 0)
                continue;
            if(prefix == sum - prefix)
                ans += 2;
            else if(Math.abs(prefix - (sum - prefix)) == 1)
                ans++;
        }
        return ans;
    }
}",1454808988
Yash Kumar Gupta,ykgupta2411,558,3639,java,"class Solution {
    public boolean isZeroArray(int[] nums, int[][] queries) {
        int n = nums.length;
        int[] f = new int[n+1];
        for(int[] q : queries)
        {
            f[q[0]]++;
            f[q[1] + 1]--;
        }
        for(int i = 0, c = 0; i < n; i++)
        {
            c += f[i];
            if(c < nums[i])
                return false;
        }
        return true;
    }
}",1454811062
Yash Kumar Gupta,ykgupta2411,558,3643,java,"class Solution {
    public int minZeroArray(int[] nums, int[][] queries) {
        int n = queries.length;
        int beg = 0, end = n, ans = -1;
        while(beg <= end)
        {
            int mid = beg + (end - beg) / 2;
            if(canDo(mid, nums, queries))
            {
                ans = mid;
                end = mid - 1;
            }
            else
                beg = mid + 1;
        }
        return ans;
    }
    
    private boolean canDo(int k, int[] ar, int[][] queries)
    {
        int n = ar.length;
        int[] f = new int[n+1];
        for(int i = 0; i < k; i++)
        {
            f[queries[i][0]] += queries[i][2];
            f[queries[i][1] + 1] -= queries[i][2];
        }
        for(int i = 0, c = 0; i < n; i++)
        {
            c += f[i];
            if(c < ar[i])
                return false;
        }
        return true;
    }
}",1454820315
david,testimony2014,560,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int ans = 0;
        int n = nums.size();
        for (int i = 0; i < n; ++i) {
            if (nums[i] != 0) {
                continue;
            }
            if (check(nums, i, -1)) {
                ans++;
            }
            if (check(nums, i, 1)) {
                ans++;
            }
            
        }
        return ans;
    }
private:
    bool check(const vector<int>& input, int pos, int dir) {
        vector<int> nums = input;
        int n = nums.size();
        while (pos >= 0 && pos < n) {
            if (nums[pos] > 0) {
                nums[pos]--;
                dir = -dir;
            }
            pos += dir;
        }
        for (int i = 0; i < n; ++i) {
            if (nums[i] != 0) {
                return false;
            }
        }
        return true;
    }
};",1454816553
david,testimony2014,560,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        vector<int> diff(n + 1);
        for (auto &query : queries) {
            diff[query[0]]++;
            if (query[1] + 1 < n) {
                diff[query[1] + 1]--;
            }
        }

        int cur = 0;
        for (int i = 0; i < n; ++i) {
            cur += diff[i];
            if (nums[i] > cur) {
                return false;
            }
        }
        return true;
    }
};",1454824132
david,testimony2014,560,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int l = 0, r = queries.size();
        while (l + 1 < r) {
            int mid = l + (r - l) / 2;
            if (check(nums, queries, mid)) {
                r = mid;
            } else {
                l = mid;
            }
        }
        if (check(nums, queries, l)) {
            return l;
        }
        if (check(nums, queries, r)) {
            return r;
        }
        return -1;
    }
private:
    bool check(vector<int>& nums, vector<vector<int>>& queries, int k) {
        int n = nums.size();
        vector<int> diff(n + 1);
        for (int i = 0; i < k; ++i) {
            auto& query = queries[i];
            diff[query[0]] += query[2];
            if (query[1] + 1 < n) {
                diff[query[1] + 1] -= query[2];
            }
        }

        int cur = 0;
        for (int i = 0; i < n; ++i) {
            cur += diff[i];
            if (nums[i] > cur) {
                return false;
            }
        }
        return true;
    }
};",1454834762
Nilanjan Das,forasssk,561,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int n = nums.size();
        vector <int> ps(n);
        for (int i = 0; i < n; i ++) {
            ps[i] = nums[i];
            if (i) {
                ps[i] += ps[i - 1];
            }
        }
        int ans = 0;
        for (int i = 0; i < n; i ++) {
            if (nums[i] == 0) {
                if (ps[i] == ps[n - 1] - ps[i]) {
                    ans += 2;
                }
                else if (ps[i] + 1 == ps[n - 1] - ps[i] || ps[i] == ps[n - 1] - ps[i] + 1) {
                    ans ++;
                }
            }
        }
        return ans;
    }
};",1454814138
Nilanjan Das,forasssk,561,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        vector <int> add(n, 0);
        for (auto q: queries) {
            int lt = q[0], rt = q[1];
            add[lt] --;
            if (rt + 1 < n) add[rt + 1] ++;
        }
        for (int i = 1; i < n; i ++) {
            add[i] += add[i - 1];
        }
        for (int i = 0; i < n; i ++) {
            nums[i] += add[i];
            if (nums[i] > 0) {
                return 0;
            }
        }
        return 1;
    }
};",1454820671
Nilanjan Das,forasssk,561,3643,cpp,"class Solution {
public:
    bool check (vector<int>& nums, vector<vector<int>>& queries, int k) {
        int n = nums.size();
        vector <int> add(n, 0);
        for (int i = 0; i < k; i ++) {
            int lt = queries[i][0], rt = queries[i][1], val = queries[i][2];
            add[lt] -= val;
            if (rt + 1 < n) add[rt + 1] += val;
        }
        for (int i = 1; i < n; i ++) {
            add[i] += add[i - 1];
        }
        for (int i = 0; i < n; i ++) {
            if (nums[i] + add[i] > 0) {
                return 0;
            }
        }
        return 1;
    }
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int q = queries.size();
        if (check(nums, queries, 0)) {
            return 0;
        }
        if (!check(nums, queries, q)) {
            return -1;
        }
        int lo = 0, hi = q, ans = hi;
        while (lo <= hi) {
            int mid = (lo + hi) / 2;
            if (check(nums, queries, mid)) {
                ans = mid;
                hi = mid - 1;
            }
            else {
                lo = mid + 1;
            }
        }
        return ans;
    }
};",1454834849
ItsOver9000,ItsOver9000,562,3616,javascript,"/**
 * @param {number[]} nums
 * @return {number}
 */
var countValidSelections = function(nums) {
    const check = (i, d)=>{
        const copy = [...nums];
        for(; i >= 0 && i <copy.length; ) {
            i += d;
            if(i>=0 && i < copy.length) {
                if(copy[i]>0){
                    copy[i]-=1;
                    d*=-1;
                }
            }
        }
        for(let i = 0;i<copy.length;i+=1){
            if(copy[i]!==0){
                return 0;
            }
        }
        return 1;
    }
    let result=0;
    for(let i = 0;i<nums.length;i+=1){
        if(nums[i]===0){
            result+=check(i,-1);
            result+=check(i,1);
        }
    }
    return result;
};",1454810025
ItsOver9000,ItsOver9000,562,3639,javascript,"/**
 * @param {number[]} nums
 * @param {number[][]} queries
 * @return {boolean}
 */
var isZeroArray = function(nums, queries) {
    linesweep = new Array(nums.length+1);
    linesweep.fill(0);
    for(const [a, b] of queries) {
        linesweep[a]+=1;
        linesweep[b+1]-=1;
    }
    for(let i = 1;i<linesweep.length;i+=1){
        linesweep[i]+=linesweep[i-1];
    }
    for(let i = 0;i<nums.length;i+=1){
        if(linesweep[i]<nums[i]) {
            return false;
        }
    }
    return true;
};",1454814679
ItsOver9000,ItsOver9000,562,3643,javascript,"/**
 * @param {number[]} nums
 * @param {number[][]} queries
 * @return {number}
 */
var minZeroArray = function(nums, queries) {
    let allzero=true;
    for(let i = 0;i<nums.length && allzero; allzero=allzero&&nums[i]===0,i+=1){
        
    }
    if(allzero){
        return 0;
    }
    const check = k => {
        linesweep = new Array(nums.length+1);
        linesweep.fill(0);
        for(let i = 0; i<=k;i+=1){
            linesweep[queries[i][0]] += queries[i][2];
            linesweep[queries[i][1]+1] -= queries[i][2];
        }
        for(let i = 1;i<linesweep.length;i+=1){
            linesweep[i]+=linesweep[i-1];
        }
        for(let i = 0;i<nums.length;i+=1){
            if(linesweep[i]<nums[i]) {
                return false;
            }
        }
        return true;
    };
    
    
    let result = Infinity;
    for(let i = 0, j = queries.length-1;i<=j;){
        const mid = Math.floor((i+j)/2);
        if (check(mid)) {
            result=Math.min(result,mid);
            j = mid-1;
        } else{
            i = mid+1;
        }
    }
    return result===Infinity?-1:result+1;
};",1454834851
Manideep Kaparthi,manideepkaparthi,563,3616,cpp,"#include <bits/stdc++.h>
using namespace std;
#define vii vector<vector<int>>
#define vi vector<int>
#define pb push_back
#define fi first
#define se second
#define s(v) sort(v.begin(), v.end())
#define r(v) reverse(v.begin(), v.end())
class Solution {
public:
    int countValidSelections(vector<int>& nums) {
      
    int n = nums.size();
    int ans = 0;

    auto fun = [&](int st, int dir) {
        vector<int> v(nums);
        int cur = st;
        int ap = dir;

        while (cur >= 0 && cur < n) {
            if (v[cur] == 0) {
                cur += ap;
            } else {
                v[cur]--;
                ap = -ap;
                cur += ap;
            }
        }

        for (int it : v) {
            if (it != 0) return false;
        }
        return true;
    };

    for (int i = 0; i < n; ++i) {
        if (nums[i] == 0) {
            if (fun(i, 1)) ans++;
            if (fun(i, -1)) ans++;
        }
    }

    return ans;


        
        
    }
};",1454807406
Manideep Kaparthi,manideepkaparthi,563,3639,cpp,"#include <bits/stdc++.h>
using namespace std;
#define vii vector<vector<int>>
#define vi vector<int>
#define pb push_back
#define fi first
#define se second
#define s(v) sort(v.begin(), v.end())
#define r(v) reverse(v.begin(), v.end())

class Solution
{
public:
  bool isZeroArray(vector<int> &nums, vector<vector<int>> &queries)
  {
    vi v = nums;
    int n = nums.size();
    vi x(n + 1, 0);

    for (int i = 0; i < queries.size(); i++)
    {
      x[queries[i][0]] += 1;
      if (queries[i][1] + 1 < n)
        x[queries[i][1] + 1] -= 1;
    }

    for (int i = 1; i < n; i++)
    {
      x[i] += x[i - 1];
    }

    for (int i = 0; i < n; i++)
    {
      v[i] = max(0, v[i] - x[i]);
    }

    for (int i = 0; i < n; i++)
    {
      if (v[i] != 0)
      {
        return false;
      }
    }

    return true;
  }
};
",1454818301
Manideep Kaparthi,manideepkaparthi,563,3643,cpp,"#include <bits/stdc++.h>
using namespace std;
#define vii vector<vector<int>>
#define vi vector<int>
#define pb push_back
#define fi first
#define se second
#define s(v) sort(v.begin(), v.end())
#define r(v) reverse(v.begin(), v.end())

class Solution
{
public:
  int minZeroArray(vector<int> &nums, vector<vector<int>> &queries)
  {
    int l = 1, h = queries.size(), ans = -1;
    auto fun = [&](int k)
    {
      int n = nums.size();
      vector<long long> v1(nums.begin(), nums.end());
      
      vector<long long> x1(n + 1, 0);

      for (int i = 0; i < k; i++)
      {
        int l = queries[i][0], r = queries[i][1];
        long long up = queries[i][2];
        x1[l] += up;
        if (r + 1 < n)
        {
          x1[r + 1] = x1[r + 1] - up;
        }
      }

      for (int i = 1; i < n; i++)
      {
        x1[i] += x1[i - 1];
      }

      for (int i = 0; i < n; i++)
      {
        long long bp = v1[i] - x1[i];
        v1[i] = max(0LL, bp);
      }

      for (int i = 0; i < n; i++)
      {
        if (v1[i] != 0)
        {
          return false;
        }
      }

      return true;
    };
    int flag=0;
    for(int i=0;i<nums.size();i++){
      if(nums[i]!=0){
        flag=1;
        break;
      }
    }
    if(flag==0){
      return 0;
    }


    while (l <= h)
    {
      int md = l + (h - l) / 2;
      if (fun(md))
      {
        ans = md;
        h = md - 1;
      }
      else
      {
        l = md + 1;
      }
    }

    return ans;
  }
};
",1454834864
coding_boss,AlGrekor2M,564,3616,cpp,"class Solution {
public:
    bool isValid(vector<int>& nums, int start, int dir) {
        vector<int> temp = nums;
        int n = temp.size();
        int ind = start;

        while (ind >= 0 && ind < n) {
            if (temp[ind] == 0) {
                ind += (dir == 0 ? -1 : 1);
            } else {
                temp[ind]--;
                dir = 1 - dir;
                ind += (dir == 0 ? -1 : 1);
            }
        }

        for(int i=0;i<temp.size();i++) {
            if(temp[i] != 0) return false;
        }
        return true;
    }

    int countValidSelections(vector<int>& nums) {
        int n = nums.size(), cnt = 0;

        for (int i = 0; i < n; i++) {
            if (nums[i] == 0) {
                if (isValid(nums, i, 0)) cnt++;
                if (isValid(nums, i, 1)) cnt++;
            }
        }

        return cnt;
    }
};
",1454830485
coding_boss,AlGrekor2M,564,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        int p = queries.size();
        
        vector<int>v(1e5+1,0);
        for(int i=0;i<p;i++){
            v[queries[i][0]]++;
            v[queries[i][1]+1]--;
        }
        
        for(int i=1;i<v.size();i++) v[i] += v[i-1];
        // bool p = false;
        for(int i=0;i<n;i++){
            if(nums[i] != 0){
                if(v[i]<nums[i]) return false;
            }
        }
        return true;
    }
};",1454815939
coding_boss,AlGrekor2M,564,3643,cpp,"class Solution {
public:
    bool valid(int mid, vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        vector<int> p(1e5 + 1, 0);

        for (int i = 0; i < mid; i++) {
            p[queries[i][0]] += queries[i][2];
            p[queries[i][1] + 1] -= queries[i][2];
        }

        for (int i = 1; i < p.size(); i++) {
            p[i] += p[i - 1];
        }

        for (int i = 0; i < n; i++) {
            if (nums[i] > 0 && nums[i] > p[i]) {
                return false;
            }
        }

        return true;
    }

    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int low = 0, high = queries.size(), ans = -1;

        while (low <= high) {
            int mid = (low + high) / 2;
            if (valid(mid, nums, queries)) {
                ans = mid;
                high = mid - 1;
            } else {
                low = mid + 1;
            }
        }

        return ans;
    }
};
",1454842189
Sanyam Pandey,EzzPzz,566,3616,cpp,"class Solution {
public:

    int countValidSelections(vector<int>& nums) {
        int ans = 0;
        int n = nums.size();

        auto fx = [&](vector<int> nums, int start, bool flg) {
            int curr = start;

            while (curr >= 0 && curr < n) {
                if (nums[curr] == 0) {
                    curr = flg ? curr + 1 : curr - 1;
                } else if (nums[curr] > 0) {
                    nums[curr]--;
                    flg = !flg;
                    curr = flg ? curr + 1 : curr - 1;
                }
            }

            return count(nums.begin(), nums.end(), 0) == nums.size();
        };

        for (int i = 0; i < n; i++) {
            if (!nums[i]) {
                if (fx(nums, i, true))
                    ans++;
                if (fx(nums, i, false))
                    ans++;
            }
        }

        return ans;
    }
};",1454820076
Sanyam Pandey,EzzPzz,566,3639,cpp,";class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        vector <int> pre (nums.size()+1)  ; 
        for (auto q : queries) {
            pre[q[0]] ++ ; 
            pre[q[1]+1] -- ; 
        }
        // for(auto i : pre) cout << i <<"" "" ;cout << endl ;
        for (int i = 1; i < pre.size() ; i++) pre[i] += pre[i-1] ; 
        // for (auto i : pre) cout << i << endl; 
        for (int i = 0 ;i < nums.size() ; i++) {
            if (nums[i] > pre[i]) return 0 ; 
        }
        return 1 ;
    }
};",1454811200
Sanyam Pandey,EzzPzz,566,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        if (count (nums.begin() , nums.end () , 0) == nums.size()) return 0 ;
        auto fx = [&](int mi) {
            vector<int> pre(nums.size() + 1);
            for (int i = 0; i <= mi; i++) {
                auto q = queries[i];
                pre[q[0]] += q[2];
                pre[q[1] + 1] -= q[2];
            }
            
            vector<int> temp = nums;
            for (int i = 1; i < nums.size(); i++) {
                pre[i] += pre[i - 1];
            }
            
            for (int i = 0; i < nums.size(); i++) {
                temp[i] = max(0, temp[i] - pre[i]);
                if (temp[i] > 0) return false;
            }
            return true;
        };
        
        if (queries.empty()) return -1;
        
        int lo = 0, hi = queries.size() - 1;
        while (lo <= hi) {
            int mid = (lo + hi) >> 1;
            if (fx(mid))
                hi = mid - 1;
            else
                lo = mid + 1;
        }
        return lo >= queries.size() ? -1 : lo + 1;
    }
};",1454835005
Ranjith Reddy,crazyfoxx,567,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
       
        n = len(nums)
        def fun(start, d):
            nums_copy = nums[:]
            curr = start
            inc = d
            
            while 0 <= curr < n:
                if nums_copy[curr] == 0:
                    if inc == 'left':
                        curr -= 1
                    else:
                        curr += 1
                else:
                    nums_copy[curr] -= 1
                    inc = 'right' if inc == 'left' else 'left'
                    if inc == 'left':
                        curr -= 1
                    else:
                        curr += 1
            return all(x == 0 for x in nums_copy)
        
        valid_count = 0
        
        for i in range(n):
            if nums[i] == 0:
                if fun(i, 'left'):
                    valid_count += 1
                if fun(i, 'right'):
                    valid_count += 1
        
        return valid_count
",1454835106
Ranjith Reddy,crazyfoxx,567,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        m = len(queries)
        n = len(nums)
        flag = True
        for i in nums:
            if i != 0:
                flag = False
                break
        if flag == True:
            return 0
        def check(x):
            #print(x)
            l = [0]*(n+1)
            for u,v in queries[:x+1]:
                l[u]+=1
                l[v+1]-=1
            cum = 0
            #print(l)
            for i in range(n+1):
                cum+=l[i]
                l[i] = cum
            # print(l)
            # print(nums)
            for i in range(n):
                if nums[i]>l[i]:
                    return False
            return True
        low = 0
        high = m-1
        ans = None
        while low<=high:
            mid = (low+high)//2
            if check(mid):
                ans = mid+1
                high = mid-1
    
            else:
                low = mid+1
        if ans == None:
            return False
        return True
                ",1454821974
Ranjith Reddy,crazyfoxx,567,3643,python3,"class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:

        m = len(queries)
        n = len(nums)
        flag = True
        for i in nums:
            if i != 0:
                flag = False
                break
        if flag == True:
            return 0
        def check(x):
            #print(x)
            l = [0]*(n+1)
            for u,v, w in queries[:x+1]:
                l[u]+=w
                l[v+1]-=w
            cum = 0
            #print(l)
            for i in range(n+1):
                cum+=l[i]
                l[i] = cum
            # print(l)
            # print(nums)
            for i in range(n):
                if nums[i]>l[i]:
                    return False
            return True
        low = 0
        high = m-1
        ans = None
        while low<=high:
            mid = (low+high)//2
            if check(mid):
                ans = mid+1
                high = mid-1
    
            else:
                low = mid+1
        if ans == None:
            return -1
        return ans
                ",1454820199
Cursed_Individual_99,Cursed_Individual_99,568,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int sum=0, presum=0, ans=0;
        for(int i:nums)
            sum+=i;
        for(int i:nums){
            presum+=i;
            sum-=i;
            if(i==0){
                if(sum==presum)
                    ans+=2;
                else if(abs(sum-presum)==1)
                    ans++;
            }
        }
        return ans;
    }
};",1454807471
Cursed_Individual_99,Cursed_Individual_99,568,3639,cpp,"struct Compare {
    bool operator()(const vector<int>& a, const vector<int>& b) {
        return a[1] > b[1];
    }
};
class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        sort(queries.begin(), queries.end());
        int n=nums.size(), m=queries.size(), index=0;
        vector<int> maxi(n);
        priority_queue<vector<int>, vector<vector<int>>, Compare> pq;
        for(int i=0;i<n;i++){
            while(index<m && queries[index][0]==i){
                pq.push(queries[index]);
                index++;
            }
            maxi[i]=pq.size();
            while(!pq.empty() && pq.top()[1]==i)
                pq.pop();
        }
        for(int i=0;i<n;i++){
            if(nums[i]>maxi[i])
                return false;
        }
        return true;
    }
};",1454824830
Cursed_Individual_99,Cursed_Individual_99,568,3643,cpp,"class Solution {
public:
    bool f(int mid, vector<int>& nums, vector<vector<int>>& q) {
        int n = nums.size();
        vector<int> diff(n + 1, 0);
        for (int i = 0; i < mid; ++i) {
            int l = q[i][0], r = q[i][1], val = q[i][2];
            diff[l] -= val;
            if (r + 1 < n)
                diff[r + 1] += val;
        }
        int curr_decrement = 0;
        for (int i = 0; i < n; ++i) {
            curr_decrement += diff[i];
            if (nums[i] + curr_decrement > 0) {
                return false;
            }
        }
        return true;
    }
    int minZeroArray(vector<int>& nums, vector<vector<int>>& q) {
        int m = q.size(), low = 0, high = m, ans = -1;
        while (low <= high) {
            int mid = low + (high - low) / 2;
            if (f(mid, nums, q)) {
                ans = mid;
                high = mid - 1;
            } else {
                low = mid + 1;
            }
        }
        return ans;
    }
};
",1454842497
Hsu-Huai,aarontsaai,569,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        def process(copied_nums: List[int], cur_pos: int, direction: int, total_sum: int):
            while 0 <= cur_pos < len(copied_nums):
                if copied_nums[cur_pos] == 0:
                    cur_pos += direction
                else:
                    if copied_nums[cur_pos] > 0:
                        total_sum -= 1
                    copied_nums[cur_pos] -= 1
                    direction = -direction
                    cur_pos += direction

                if total_sum == 0:
                    return True

            return False            


        total_sum = sum(nums)
        res = 0
        for i in range(len(nums)):
            if nums[i] != 0:
                continue
                
            if process([x for x in nums], i, 1, total_sum):
                res += 1
            if process([x for x in nums], i, -1, total_sum):
                res += 1
        return res",1454835195
Hsu-Huai,aarontsaai,569,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        diff = [0] * (len(nums) + 1)
        for l, r in queries:
            diff[l] += 1
            diff[r + 1] -= 1

        cur_diff = 0
        for i in range(len(nums)):
            cur_diff += diff[i]
            if cur_diff < nums[i]:
                return False
        return True
                ",1454824949
Hsu-Huai,aarontsaai,569,3643,python3,"class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        def is_valid(k_queries: int):
            diff = [0] * (len(nums) + 1)
            for l, r, val in queries[: k_queries]:
                diff[l] += val
                diff[r + 1] -= val
    
            cur_diff = 0
            for i in range(len(nums)):
                cur_diff += diff[i]
                if cur_diff < nums[i]:
                    return False
            return True


        if not is_valid(len(queries)):
            return -1
            
        l, r = 0, len(queries)
        while l < r:
            mid = (l + r) // 2
            if is_valid(mid):
                r = mid
            else:
                l = mid + 1
        return l",1454830805
Trent Haines,trentinitaco,570,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        // if 0, move same way.
        // if > 0, you have to go back, and reduce by 1.
        // parity and walls

        // count on left has to be the same as count on right. or +-1

        int n = nums.size();
        vector<int> prefix(n+1);
        for(int i = 0; i < n; ++i){
            prefix[i+1] = prefix[i] + nums[i];
        }

        int possible = 0;
        
        for(int i = 0; i < n; ++i){
            if(nums[i] == 0){
                int left = prefix[i];
                int right = prefix[n]-prefix[i];
                if(left == right)
                    possible += 2;
                if(abs(left-right) == 1)
                    possible++;
            }
        }
        return possible;
            
    }
};",1454811974
Trent Haines,trentinitaco,570,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        // basically, add up the max subtraction using prefix.

        int n = nums.size();
        vector<int> prefix(n+1);
        for(auto& q: queries){
            prefix[q[0]]++;
            prefix[q[1]+1]--;
        }

        int cur = 0;
        for(int i = 0 ; i < n; ++i){
            cur += prefix[i];
            if(cur < nums[i])
                return false;
        }

        return true;
    }
};",1454818730
Trent Haines,trentinitaco,570,3643,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries, int k) {
        // basically, add up the max subtraction using prefix.

        int n = nums.size();
        vector<int> prefix(n+1);
        for(int i = 0 ; i < k; i++){
            auto& q = queries[i];
            prefix[q[0]] += q[2];
            prefix[q[1]+1] -= q[2];
        }

        int cur = 0;
        for(int i = 0 ; i < n; ++i){
            cur += prefix[i];
            if(cur < nums[i])
                return false;
        }

        return true;
    }


    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        // binary search for the answer? 10^5 * log 2 (10^5) = 10^7
        if(!isZeroArray(nums, queries, queries.size()))
            return -1;
        int l = 0; int r = queries.size();
        while(l < r){
            int m = l + (r-l)/2;
            if(isZeroArray(nums, queries, m)){
                r = m; 
            }
            else{
                l = m+1;
            }
        }
        return l;
        // remember to return -1
    }
};",1454835201
Lasya,lasyacheela,571,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int n = nums.size(), v = 0;

        for (int s = 0; s < n; ++s) {
            if (nums[s] != 0) continue;

            for (int d : {-1, 1}) {
                vector<int> t = nums;
                int c = s, dir = d;

                while (c >= 0 && c < n) {
                    if (t[c] == 0) {
                        c += dir;
                    } else {
                        t[c]--;
                        dir = -dir;
                        c += dir;
                    }
                }

                if (t == vector<int>(n, 0)) v++;
            }
        }

        return v;
    }
};
",1454805957
Lasya,lasyacheela,571,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& q) {
        int m=q.size();
        vector<long long>vec(100001,0);
        for(int i=0;i<m;i++){
            vec[q[i][0]]++;
            vec[q[i][1]+1]--;
        }
        vector<int> prefix(vec.size());
    prefix[0] = vec[0];
    for (size_t i = 1; i < vec.size(); ++i) {
        prefix[i] = prefix[i - 1] + vec[i];
    }
       // for(auto it:prefix)cout<<it<<"" "" ;cout<<endl;
        for(int i=0;i<nums.size();i++){
            if(prefix[i]<nums[i]){//cout<<i<<"" "";cout<<vec[i]<<""l""<<nums[i]<<endl;
                                  return false;}
        }
        return true;
    }
};",1454816996
Lasya,lasyacheela,571,3643,cpp,"class Solution {
private:
    bool check(int k, int n, const vector<int>& nums, const vector<vector<int>>& q) {
        vector<long long> d(n + 1, 0), c(nums.begin(), nums.end());
 for (int i = 0; i < k; i++) {
            int l = q[i][0], r = q[i][1], v = q[i][2];
            d[l] -= v;
            d[r + 1] += v;
        }long long s = 0;
        for (int i = 0; i < n; i++) {
            s += d[i];c[i] += s;
            if (c[i] > 0) return false;
        }
        return true;
    }

public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& q) {
        int n = nums.size(), m = q.size();
        int flag=0;
        for(auto it:nums){
            if(it!=0)flag=1;
        }
        if(flag==0)return 0;
        int l = 1, r = m, ans = -1;
      while (l <= r) {
            int mid = l + (r-l)/2;
            if (check(mid, n, nums, q)) {
                ans = mid; r = mid - 1;
            } else { l = mid + 1;
            }
        }

        return ans;
    }
};
",1454835241
Pro Coder,pro_coderLC,572,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        count = 0
        n = len(nums)
        zero_positions = [i for i, val in enumerate(nums) if val == 0]
        directions = [-1, 1] 
        
        for start in zero_positions:
            for dir in directions:
                nums_copy = nums[:]
                curr = start
                direction = dir
                while True:
                    if curr < 0 or curr >= n:
                        break
                        
                    if nums_copy[curr] == 0:
                        curr += direction
                    else:
                        nums_copy[curr] -= 1
                        direction = -direction
                        curr += direction
                if all(x == 0 for x in nums_copy):
                    count += 1
        return count
",1454807171
Pro Coder,pro_coderLC,572,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        n = len(nums)
        c = [0]*(n+1)
        for l, r in queries:
            c[l] +=1
            if r+1 < n:
                c[r+1] -=1
        
        for i in range(1, n):
            c[i] += c[i-1]
        c = c[:n]
        
        for i in range(n):
            if c[i] < nums[i]:
                return False
        return True
",1454813707
Pro Coder,pro_coderLC,572,3643,python3,"class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        n = len(nums)
        q_len = len(queries)
        
        left = 0
        right = q_len
        answer = -1

        
        while left <= right:
            mid = (left + right) // 2
            
            cumulative_capacity_diff = [0] * (n + 2)  
            for i in range(mid):
                li, ri, vali = queries[i]
                
                cumulative_capacity_diff[li] += vali
                cumulative_capacity_diff[ri + 1] -= vali
                
            possible = True
            cumulative_capacity = [0] * n
            curr = 0
            
            for i in range(n):
                curr += cumulative_capacity_diff[i]
                cumulative_capacity[i] = curr
                if cumulative_capacity[i] < nums[i]:
                    possible = False
                    break 
                    
            if possible:
                answer = mid
                right = mid - 1
            else:
                left = mid + 1
        return answer
",1454835256
Nihal,nsk_91,573,3616,cpp,"
class Solution {
private:
    bool var_200(vector<int>& var_201, int var_202, bool var_203) {
        vector<int> var_204 = var_201;
        int var_205 = var_201.size();
        for (; var_202 >= 0 && var_202 < var_205;) {
            switch (var_204[var_202] == 0) {
                case true:
                    var_202 += var_203 ? 1 : -1;
                    break;
                default:
                    var_204[var_202]--;
                    var_203 = !var_203;
                    var_202 += var_203 ? 1 : -1;
                    break;
            }
        }
        int var_206 = 0;
        while (var_206 < var_205) {
            switch (var_204[var_206] != 0) {
                case true:
                    return false;
                default:
                    break;
            }
            var_206++;
        }
        return true;
    }

public:
    int countValidSelections(vector<int>& var_208) {
        int var_209 = var_208.size();
        int var_210 = 0;
        int var_211 = 0;
        while (var_211 < var_209) {
            switch (var_208[var_211] == 0) {
                case true:
                    if (var_200(var_208, var_211, true))
                        var_210++;
                    if (var_200(var_208, var_211, false))
                        var_210++;
                    break;
                default:
                    break;
            }
            var_211++;
        }
        return var_210;
    }
};
",1454806739
Nihal,nsk_91,573,3639,cpp,"
class Solution {
public:
    bool isZeroArray(vector<int>& var_201, vector<vector<int>>& var_202) {
        int var_203 = var_201.size();
        vector<int> var_204(var_203 + 1, 0);
        int var_205 = 0;
        for (; var_205 < var_202.size(); var_205++) {
            int var_206 = var_202[var_205][0];
            int var_207 = var_202[var_205][1];
            var_204[var_206]++;
            switch (var_207 + 1 < var_203) {
                case true:
                    var_204[var_207 + 1]--;
                    break;
                default:
                    break;
            }
        }
        int var_208 = 1;
        while (var_208 < var_203) {
            var_204[var_208] += var_204[var_208 - 1];
            var_208++;
        }
        int var_209 = 0;
        while (var_209 < var_203) {
            switch (var_204[var_209] < var_201[var_209]) {
                case true:
                    return false;
                default:
                    break;
            }
            var_209++;
        }
        return true;
    }
};
",1454815824
Nihal,nsk_91,573,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& var_200, vector<vector<int>>& var_201) {
        int var_202 = var_200.size();
        vector<int> var_203 = var_200;
        vector<int> var_204;

        switch (all_of(var_203.begin(), var_203.end(), [](int var_205) { return var_205 == 0; })) {
        case true:
            var_204 = var_203;
            return 0;
        }

        auto var_206 = [&](int var_207) -> bool {
            vector<int> var_208(var_202 + 1, 0);

            int var_209 = 0;
            while (var_209 < var_207) {
                int var_210 = var_201[var_209][0], var_211 = var_201[var_209][1], var_212 = var_201[var_209][2];
                var_208[var_210] += var_212;
                if (var_211 + 1 < var_202) {
                    var_208[var_211 + 1] -= var_212;
                }
                var_209++;
            }

            for (int var_213 = 0, var_214 = 0; var_213 < var_202; var_213++) {
                var_214 += var_208[var_213];
                if (var_214 < var_203[var_213]) {
                    return false;
                }
            }
            return true;
        };

        int var_215 = 0, var_216 = var_201.size();
        int var_217 = -1;
        bool var_218 = false;

        for (; var_215 <= var_216;) {
            int var_219 = (var_215 + var_216) / 2;

            switch (var_206(var_219)) {
            case true:
                var_217 = var_219;
                var_216 = var_219 - 1;
                break;
            default:
                var_215 = var_219 + 1;
                break;
            }

            if (!var_218 && var_219 == (int)var_201.size() / 2) {
                vector<int> var_220(var_202 + 1, 0);
                int var_221 = 0;
                while (var_221 < var_219) {
                    int var_222 = var_201[var_221][0], var_223 = var_201[var_221][1], var_224 = var_201[var_221][2];
                    var_220[var_222] += var_224;
                    if (var_223 + 1 < var_202) {
                        var_220[var_223 + 1] -= var_224;
                    }
                    var_221++;
                }

                var_204 = var_203;
                int var_225 = 0;
                for (int var_226 = 0; var_226 < var_202; var_226++) {
                    var_225 += var_220[var_226];
                    var_204[var_226] = max(0, var_203[var_226] - var_225);
                }
                var_218 = true;
            }
        }

        return var_217 != -1 ? var_217 : -1;
    }
};
",1454827801
jjzzzmd,jjzzzmd,574,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        ll=len(nums)
        def check(nums,i,d):
            nums=nums[:]
            # print('i',i)
            while True:
                # print(nums)
                i+=d
                if i<0 or i>=ll:
                    break
                if nums[i]>0:
                    nums[i]-=1
                    d=-d
            for num in nums:
                if num!=0:
                    return False
            return True
        res=0
        for i,num in enumerate(nums):
            if num==0:
                if check(nums,i,1):
                    res+=1
                if check(nums,i,-1):
                    res+=1
        return res
            ",1454816208
jjzzzmd,jjzzzmd,574,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        ll=len(nums)
        delta=[0 for _ in range(ll+1)]
        for s,e in queries:
            delta[s]-=1
            delta[e+1]+=1
        ps=[delta[0]]
        for i in range(1,len(delta)):
            ps.append(ps[-1]+delta[i])
        for i,num in enumerate(nums):
            if ps[i]+num>0:
                return False
        return True",1454827693
jjzzzmd,jjzzzmd,574,3643,python3,"class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        def check(k):
            ll=len(nums)
            delta=[0 for _ in range(ll+1)]
            for s,e,val in queries[:k]:
                delta[s]-=val
                delta[e+1]+=val
            ps=[delta[0]]
            for i in range(1,len(delta)):
                ps.append(ps[-1]+delta[i])
            for i,num in enumerate(nums):
                if ps[i]+num>0:
                    return False
            return True

        left=-1
        right=len(queries)+2
        oright=right
        while left+1!=right:
            mid=(left+right)//2
            if check(mid):
                right=mid
            else:
                left=mid
        # print(right)
        if right<oright:
            return right
        return -1",1454835318
Brian Ahaneku,Ruvxei,575,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        n = len(nums)
        ans = 0
        for i in range(n):
            if nums[i] == 0:
                left = sum(nums[:i])
                right = sum(nums[i + 1:])
                if left == right:
                    ans += 2
                elif abs(left - right) == 1:
                    ans += 1
        return ans",1454808036
Brian Ahaneku,Ruvxei,575,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        n = len(nums)
        diff = [0 for _ in range(n)]
        for l, r in queries:
            diff[l] -= 1
            if r + 1 < n:
                diff[r + 1] += 1
        dec = 0
        for i in range(n):
            dec += diff[i]
            if nums[i] + dec > 0:
                return False
        return True
            ",1454811569
Brian Ahaneku,Ruvxei,575,3643,python3,"class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        m = len(queries)
        n = len(nums)
        def can(length):
            diff = [0 for _ in range(n)]
            for i in range(length + 1):
                l, r, x = queries[i]
                diff[l] -= x
                if r + 1 < n:
                    diff[r + 1] += x
            dec = 0
            for i in range(n):
                dec += diff[i]
                if nums[i] + dec > 0:
                    return False
            return True
        a = -1
        b = m - 1
        ans = float('inf')
        while a <= b:
            c = (a + b) // 2
            if can(c):
                ans = min(ans, c)
                b = c - 1
            else:
                a = c + 1
        return ans + 1 if ans != float('inf') else -1
                ",1454820822
nemesis_S,nemesis_S,576,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {

        int n = nums.size();
        vector<int> pre(n + 1);
        for (int i = 0; i < n; i++) {
            pre[i + 1] += pre[i] + nums[i];
        }
        int ans = 0;
        for (int i = 1; i <= n; i++) {
            if (nums[i - 1] == 0) {
                if (abs(pre[i] - (pre[n] - pre[i])) == 0) ans += 2;
                else if (abs(pre[i] - (pre[n] - pre[i])) == 1) ans++;
            } 
        }
        return ans;
    }
};",1454812692
nemesis_S,nemesis_S,576,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size(), m = queries.size();
        vector<int> dif(n + 1);
        for (int i = 0; i < m; i++) {
            dif[queries[i][0]]++;
            dif[queries[i][1] + 1]--;
        }
        for (int i = 1; i <= n; i++) {
            dif[i] += dif[i - 1];
        }
        bool f = true;
        for (int i = 0; i < n; i++) {
            if (nums[i] > dif[i]) f = false;
        }
        return f;
    }
};",1454819070
nemesis_S,nemesis_S,576,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size(), m = queries.size();
        int ans = -1;
        int lo = 0, hi = m - 1, p = 1;
        for (int i = 0; i < n; i++) {
            if (nums[i]) p = 0;
        }
        if (p) return 0;
        while (lo <= hi) {
            int mid = (lo + hi) / 2;
            vector<int> dif(n + 1);
            for (int i = 0; i <= mid; i++) {
                dif[queries[i][0]] += queries[i][2];
                dif[queries[i][1] + 1] -= queries[i][2];
            }
            for (int i = 1; i <= n; i++) {
                dif[i] += dif[i - 1];
            }
            bool f = true;
            for (int i = 0; i < n; i++) {
                if (nums[i] > dif[i]) f = false;
            }
            if (f) {
                ans = mid + 1;
                hi = mid - 1;
            }
            else lo = mid + 1;
        }
        return ans;
    }
};",1454827893
H3PMo12O40,H3PMo12O40,577,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        prefix=[0]
        for i in nums:
            prefix.append(prefix[-1]+i)
        ans=0
        for i in range(len(nums)):
            if nums[i]==0:
                vl,vr=prefix[i],prefix[-1]-prefix[i+1]
                if vl==vr:
                    ans+=2
                elif abs(vl-vr)==1:
                    ans+=1
        return ans",1454811659
H3PMo12O40,H3PMo12O40,577,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        l=len(nums)
        diff=[0]*(l+1)
        for i in queries:
            diff[i[0]]-=1
            diff[i[1]+1]+=1
        #print(diff)
        for i in range(l):
            nums[i]+=diff[i]
            diff[i+1]+=diff[i]
        #print(diff)
        #print(nums)
        for i in nums:
            if i>0:
                return False
        return True",1454819350
H3PMo12O40,H3PMo12O40,577,3643,python3,"class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        def decide(r):
            l=len(nums)
            diff=[0]*(l+1)
            for i in queries[:r]:
                diff[i[0]]-=i[2]
                diff[i[1]+1]+=i[2]

            for i in range(l):
                if nums[i]+diff[i]>0:
                    return False
                diff[i+1]+=diff[i]
            return True
            
        L=len(queries)
        if not decide(L):
            return (-1)
        all0=True
        for i in nums:
            if i!=0:
                all0=False
                break
        if all0:
            return 0
        
        left,right=0,L
        while right-left>1:
            mid=(left+right)>>1
            if decide(mid):
                right=mid
            else:
                left=mid
        #print(left,right)
        if decide(left):
            return left
        else:
            return right",1454842737
Mark,chanhung,578,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int sum = 0, tmp = 0, ans = 0;
        for(auto &n : nums){
            sum += n;
        }
        for(auto &n:nums){
            tmp += n;
            if(n == 0){
                if(tmp * 2 == sum) ans += 2;
                if(tmp * 2 + 1 == sum) ans += 1;
                if(tmp * 2 - 1 == sum) ans += 1;
            }
        }
        return ans;
    }
};",1454809129
Mark,chanhung,578,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        vector<int> dif(n+1, 0);
        for(auto &q:queries){
            dif[q[0]]--;
            dif[q[1]+1]++;
        }
        int diff = 0;
        for(int i=0;i<n;i++){
            diff += dif[i];
            if(nums[i]+diff > 0) return false;
        }
        return true;
    }
};",1454813204
Mark,chanhung,578,3643,cpp,"class Solution {
    bool check(vector<int>& nums, vector<vector<int>>& queries, int id){
        int n = nums.size();
        vector<int> dif(n+1, 0);
        for(int i=0;i<id;i++){
            auto q = queries[i];
            dif[q[0]] -= q[2];
            dif[q[1]+1] += q[2];
        }
        int diff = 0;
        for(int i=0;i<n;i++){
            diff += dif[i];
            if(nums[i]+diff > 0) return false;
        }
        return true;
    }
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        // X X O O O O
        int l = 1, r = queries.size();
        
        if(!check(nums, queries, r))  return -1;
        if(check(nums, queries, 0))  return 0;
        if(check(nums, queries, 1))  return 1;
        
        while(l<r){
            int m = (l+r)/2;
            if(check(nums, queries, m))  r = m;
            else                         l = m+1;
        }
        return l;
    }
};",1454827974
Ineesh,Ineesh,580,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        
        auto check = [&](int cur, int ok){ 
        vector<int> v = nums;
        int n = v.size();
        while(cur < n && cur >= 0){
            int x = v[cur];
            if(x == 0){
                if(ok){
                    cur++;
                }
                else{
                    cur--;
                }
            }
            else{
                v[cur]--;
                ok ^= 1;
                if(ok) cur++;
                else cur--;
                continue;
            }
        }
        return (count(v.begin(), v.end(), 0) == n);    
    };
        int ans = 0;
    for(int i = 0; i < (int)nums.size(); i++){
         if(nums[i] != 0) continue;
         if(check(i, 0)){
             // cout << i << ' ';
             ans++;
         }
         if(check(i, 1)){
             // cout << i << "" "";
             ans++;
         }
    }
        cout << endl;
        return ans;
    }        
};",1454816026
Ineesh,Ineesh,580,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
       vector<int> v = nums;
        int n = (int)v.size();
        vector<int> d(n);
        for(auto it : queries){
             int x = it[0], y = it[1];
             d[x] ++;
            if(y + 1 < n) d[y + 1]--;
        }
        vector<int> pr(n);
        pr[0] = d[0];
        for(int i = 1; i < n; i++) pr[i] += pr[i - 1] + d[i];
        for(int i = 0; i < n; i++){
             if(nums[i] > pr[i]) return false;
        }
        return true;
    }
};",1454823318
Ineesh,Ineesh,580,3643,cpp,"
struct SegTree{
     int size;
     vector<int> tree;
     vector<int> lazy;
 
     int merge(int l, int r) {return max(l, r); }
 
     int query(int lx, int rx, int i, int l, int r){
          tree[i] += lazy[i];
          if(l != r){
             lazy[2 * i] += lazy[i];
             lazy[2 * i + 1] += lazy[i];
          } lazy[i] = 0;
          if(l > rx || r < lx) return 0LL;
          if(l >= lx && r <= rx) return tree[i];
          int m = (l + r) / 2;
          int left = query(lx, rx, 2 * i, l, m);
          int right = query(lx, rx, 2 * i + 1, m + 1, r);
          return merge(left, right);
     }
 
 
     void set(int lx, int rx, int val, int i, int l, int r){
              tree[i] += lazy[i];
              if(l != r){
                 lazy[2 * i] += lazy[i];
                 lazy[2 * i + 1] += lazy[i];
              } lazy[i] = 0;
              if(l > rx || r < lx){
                 return;
              }
              if(l >= lx && r <= rx){
                   tree[i] += val;
                   if(l != r){
                     lazy[2 * i] += val;
                     lazy[2 * i + 1] += val;
                   }
                   return;
              }
              int m = (l + r) / 2;
              set(lx, rx, val, 2 * i, l, m);
              set(lx, rx, val, 2 * i + 1, m + 1, r);
              tree[i] = merge(tree[2 * i], tree[2 * i + 1]);
     }
 
 
     SegTree(int n){
       tree.resize(4 * n);
       lazy.resize(4 * n);
       size = n - 1;
     }
 
     void set(int lx, int rx, int val) {set(lx, rx, val, 1, 0, size); }
     int query(int lx, int rx) {return query(lx, rx, 1, 0, size); }
};
class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
      int n = nums.size();
      int ans = -1;
      vector<int> v = nums;
      SegTree st(n);
      for(int i = 0; i < n; i++) st.set(i, i, v[i]);
        int z = st.query(0, n - 1);
        if(z <= 0){
            return 0;
        }
        int cnt = 1;
      for(auto it : queries){
          int l = it[0], r = it[1], val = it[2];
          st.set(l, r, -val);
          z = st.query(0, n - 1);
          if(z <= 0){
              return cnt;
          }
          cnt++;
      }
        
     return ans;
    }
};",1454835515
Algernon_5,Algernon_5,581,3616,java,"class Solution {
    public int countValidSelections(int[] nums) {
        int n = nums.length;
        int[] prefix = new int[n + 1];
        for(int i = 0; i < n; i++) {
            prefix[i + 1] = prefix[i] + nums[i];
        }

        int res = 0;
        int suffix = 0;
        for(int i = n - 1; i >= 0; i--) {
            suffix += nums[i];
            if(nums[i] != 0) {
                continue;
            }
            if(prefix[i] == suffix) {
                res += 2;
            } else if((prefix[i] - suffix == 1) || (suffix - prefix[i] == 1)) {
                res++;
            }
        }

        return res;
    }
}",1454810983
Algernon_5,Algernon_5,581,3639,java,"class Solution {
    public boolean isZeroArray(int[] nums, int[][] queries) {
        int n = nums.length;
        int[] dp = new int[n + 1];
        for(int[] q : queries) {
            dp[q[0]]++;
            dp[q[1] + 1]--;
        }

        int diff = 0;
        for(int i = 0; i < n; i++) {
            diff += dp[i];
            if(diff < nums[i]) {
                return false;
            }
        }

        return true;
    }
}",1454815644
Algernon_5,Algernon_5,581,3643,java,"class Solution {
    public int minZeroArray(int[] nums, int[][] queries) {
        int n = nums.length;
        int[] dp = new int[n + 1];
        int diff = 0;
        int k = 0;
        int qn = queries.length;
        for(int i = 0; i < n; i++) {
            while(diff + dp[i] < nums[i]) {
                if(k == qn) {
                    return -1;
                }
                int l = queries[k][0];
                int r = queries[k][1];
                int v = queries[k][2];
                if(l >= i) {
                    dp[l] += v;
                    dp[r + 1] -= v;
                } else if(l < i && r + 1 >= i) {
                    diff += v;
                    dp[r + 1] -= v;
                }
                k++;
            }
            diff += dp[i];
        }

        return k;
    }
}",1454828042
E C Bhaavan Sai,bhaavan8911,583,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& v) {
        int ans=0;
        for(int i=0;i<v.size();i++){
            if(v[i]==0){
                int a=0,b=0;
                for(int j=0;j<i;j++)a+=v[j];
                for(int j=i+1;j<v.size();j++)b+=v[j];
                if(a==b)ans+=2;
                else if(abs(a-b)==1)ans+=1;
            }
        }
        return ans;
    }
};",1454811292
E C Bhaavan Sai,bhaavan8911,583,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& v, vector<vector<int>>& q) {
        int n=v.size();
        vector<int> v1(n+1);
        for(int i=0;i<q.size();i++){
            v1[q[i][0]]++;v1[q[i][1]+1]--;
        }
        for(int i=1;i<=n;i++){
            v1[i]+=v1[i-1];
        }
        //for(auto i:v1)cout<<i<<"" "";
        for(int i=0;i<n;i++){
            if(v1[i]<v[i])return 0;
        }
        
        return 1;
    }
};",1454824383
E C Bhaavan Sai,bhaavan8911,583,3643,cpp,"class Solution {
public:
    int fun(int mid,vector<int> &v,vector<vector<int>> &q){
        int n=v.size();
        vector<int> v1(n+1);
        for(int i=0;i<mid;i++){
            v1[q[i][0]]+=q[i][2];
            v1[q[i][1]+1]-=q[i][2];
        }
        for(int i=1;i<=n;i++)v1[i]+=v1[i-1];
        for(int i=0;i<n;i++){
            if(v1[i]<v[i])return 0;
        }
        return 1;
    }
    int minZeroArray(vector<int>& v, vector<vector<int>>& q) {
        int n=v.size(),m=q.size();
        int lo=0,hi=m,mid,ans=-1;
        while(lo<=hi){
            mid=(lo+hi)/2;
            if(fun(mid,v,q)){
                ans=mid;hi=mid-1;
            }
            else lo=mid+1;
        }
        return ans;
    }
};",1454835630
yolo12345,yolo12345,585,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int sum=0;
        int ans=0;
        int n=nums.size();
        for(int i=0;i<n;i++) sum+=nums[i];
        int res=0;
        for(int i=0;i<n;i++){
            if(nums[i]==0){
                int x=sum-res; int p=abs(x-res);
                if(p==1) ans++;
                if(p==0) ans+=2;
            }
            res+=nums[i];
        }
        return ans;
    }
};",1454835715
yolo12345,yolo12345,585,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& q) {
        int sz=q.size(),n=nums.size();
        vector<int> cnt(n,0);
        for(int j=0;j<sz;j++){
                    cnt[q[j][0]]--;
                    if(q[j][1]<n-1) cnt[q[j][1]+1]++;
        }
        vector<int> pre(n);
            pre[0]=cnt[0];
            for(int i=1;i<n;i++) pre[i]=cnt[i]+pre[i-1];
            bool f=true;
            for(int i=0;i<n;i++){
                if(nums[i]+pre[i]>0) f=false;
            }
        return f;
    }
};",1454828258
yolo12345,yolo12345,585,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& q) {
        int sz=q.size(),n=nums.size();
        int yolo=0;
        for(int i=0;i<n;i++){
            if(nums[i]==0) yolo++;
        }
        if(yolo==n) return 0;
        int l=0,h=sz-1;
        vector<int> cnt(n,0);
        int ans=sz;
        int prev=-1;
        while(l<=h){
            int m=(l+h)/2;
            if(prev<m){
                for(int j=prev+1;j<=m;j++){
                    cnt[q[j][0]]-=q[j][2];
                    if(q[j][1]<n-1) cnt[q[j][1]+1]+=q[j][2];
                }
            }
            else{
                for(int j=m+1;j<=prev;j++){
                    cnt[q[j][0]]+=q[j][2];
                    if(q[j][1]<n-1) cnt[q[j][1]+1]-=q[j][2];
                }
            }
            vector<int> pre(n);
            pre[0]=cnt[0];
            for(int i=1;i<n;i++) pre[i]=cnt[i]+pre[i-1];
            bool f=true;
            for(int i=0;i<n;i++){
                if(nums[i]+pre[i]>0) f=false;
            }
            prev=m;
            if(f){
                ans=min(ans,m); h=m-1;
            }
            else l=m+1;
        }
        if(ans==sz) return -1;
        return ans+1;
    }
};",1454825138
Wilsano,Wilsano,587,3616,cpp,"class Solution {
public:
    bool valid(int cur, vector<int> nums, int direction){
        int n = nums.size();
        while(0 <= cur && cur < n){
            if(nums[cur] == 0){
                cur += direction;
            }
            else{
                nums[cur] -= 1;
                direction *= -1;
                cur += direction;
            }
        }
        
        return (accumulate(nums.begin(), nums.end(), 0) == 0);
    }

    int countValidSelections(vector<int>& nums) {
        int count = 0;
        for(int i = 0; i < nums.size(); ++i){
            if(nums[i] == 0){
                count += valid(i, nums, 1);
                count += valid(i, nums, -1);
            }
        }
        return count;
    }
};",1454808571
Wilsano,Wilsano,587,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        vector<int> dp(n + 1);
        for(auto& q : queries){
            dp[q[0]] += 1;
            dp[q[1] + 1] -= 1;
        }
        
        int count = 0;
        for(int i = 0; i < n; ++i){
            count += dp[i];
            if(count < nums[i]){
                return false;
            }
        }
        
        return true;
    }
};",1454811713
Wilsano,Wilsano,587,3643,cpp,"class Solution {
public:
    bool valid(int k, vector<int>& nums, vector<vector<int>>& queries){
        int n = nums.size();
        vector<int> dp(n + 1);
        for(int i = 0; i < k; ++i){
            dp[queries[i][0]] += queries[i][2];
            dp[queries[i][1] + 1] -= queries[i][2];
        }
        
        int count = 0;
        for(int i = 0; i < n; ++i){
            count += dp[i];
            if(count < nums[i]){
                return false;
            }
        }

        return true;
    }

    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int left = 0, right = queries.size();
        while(left < right){
            int mid = left + (right - left) / 2;
            if(valid(mid, nums, queries)){
                right = mid;
            }
            else{
                left = mid + 1;
            }
        }

        if(valid(queries.size(), nums, queries)){
            return left;
        }
        return -1;
    }
};",1454828310
Adarsh Sahu,adarshsahu460,592,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int n = nums.size();
        int pre[n], suff[n];
        pre[0] = nums[0];
        for(int i=1;i<n;i++){
            pre[i] = pre[i-1]+nums[i];
        }
        suff[n-1] = nums[n-1];
        for(int i=n-2;i>=0;i--){
            suff[i] = suff[i+1]+nums[i];
        }
        int ans = 0;
        for(int i=0;i<n;i++){
            if(nums[i]==0 && abs(pre[i]-suff[i])<=1){
                if(abs(pre[i]-suff[i])<1){
                    ans+=2;
                }else{
                    ans++;
                }
            }
        }
        return ans;
    }
};",1454811642
Adarsh Sahu,adarshsahu460,592,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        vector<int> calc(n,0);
        for(auto i:queries){
            calc[i[0]]++;
            if(i[1]+1<n) calc[i[1]+1]--;
        }
        int prev = 0;
        for(int i=0;i<n;i++){
            if(prev+calc[i]<nums[i]) return false;
            prev+=calc[i];
        }
        return true;
    }
};",1454815945
Adarsh Sahu,adarshsahu460,592,3643,cpp,"class Solution {
public:
    bool isZeroArray(vector<int> nums, vector<vector<int>>&queries, int j) {
        int n = nums.size();
        vector<int> calc(n,0);
        for(int i=0;i<=j;i++){
            calc[queries[i][0]]+=queries[i][2];
            if(queries[i][1]+1<n) calc[queries[i][1]+1]-=queries[i][2];
        }
        int prev = 0;
        for(int i=0;i<n;i++){
            if(prev+calc[i]<nums[i]) return false;
            prev+=calc[i];
        }
        return true;
    }
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int low = 0, high = queries.size()-1;
        bool check = true;
        for(auto i:nums) if(i!=0) check = false;
        if(check) return 0;
        int ans = -1;
        while(low<=high){
            int mid = (low+high)/2;
            if(isZeroArray(nums,queries,mid)){
                ans = mid+1;
                high = mid-1;
            }else{
                low = mid+1;
            }
        }
        return ans;
    }
};",1454828410
raararaara,raararaara,593,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& a) {
        int n = int(size(a));
        int tot = accumulate(begin(a), end(a), 0);
        vector<int> p(n+1);
        for(int i = 1; i <= n; i++) {
            p[i] = p[i-1] + a[i-1];
        }
        auto f = [&](int l, int r) {
            if(r<l) return 0;
            return p[r] - p[l-1];
        };
        
        int ret = 0;
        for(int i = 0; i < n; i++) {
            if(a[i]) continue;
            int l = f(1,i), r = f(i+2,n);
            if(l==r) ret += 2;
            else if(abs(l-r) == 1) ret += 1;
        }

        return ret;
    }
};",1454840316
raararaara,raararaara,593,3639,cpp,"#include<bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
//#include <atcoder/all>
//using mint = atcoder::modint998244353;
using namespace std;
using namespace __gnu_pbds;
template<class key, class cmp = std::less<key>>
using ordered_set = tree<key, null_type, cmp, rb_tree_tag,tree_order_statistics_node_update>;
template<class key, class value, class cmp = std::less<key>>
using ordered_map = tree<key, value, cmp, rb_tree_tag, tree_order_statistics_node_update>;

using lint = long long;
using ii = pair<int, int>;
using il = pair<int, lint>;
using li = pair<lint, int>;
using ll = pair<lint, lint>;

const int mxn = 1000100, mxp = 1000001;
const int MOD = 998244353, inf = -1e9 - 7, INF = 1e9 + 1;
const lint lnf = -4e18, LNF = 5e18;
const double eps = 1e-10;
const int sqrtN = 200;

#define sz(x) int(size(x))
#define all(x) (x).begin(),(x).end()
#define compress(x) sort(all(x)), (x).erase(unique(all(x)), (x).end())
#define lb(x, v) (lower_bound(all(x), v) - (x).begin())
#define ub(x, v) (upper_bound(all(x), v) - (x).begin())
#define eb emplace_back
#define pb push_back
#define getName(var)  #var
vector<lint> xl, yl;

#define Yes ""Yes\n""
#define No ""No\n""

const int dr[] = {-1, 0, 1, 0};
const int dc[] = {0, -1, 0, 1};

inline int inRange(int r, int c, int R, int C) {
    return 0 <= r && r < R && 0 <= c && c < C;
}

lint N, M, Q, R, C, H, K, T;

void init() {

}

template<typename T_Node,
        typename T_Lazy,
        typename F_Merge,
        typename F_Update,
        typename F_Prop>
struct LazySegTree {
    int N{}, base{};
    vector<T_Node> tree;
    vector<T_Lazy> lz;

    const F_Merge m;
    const F_Update u;
    const F_Prop p;
    const T_Node I;
    const T_Lazy lzI;

    LazySegTree() = default;

    LazySegTree(int n,
                F_Merge _m, F_Update _u, F_Prop _p,
                const T_Node &I, const T_Lazy &lzI)
            : N(n), m(_m), u(_u), p(_p), I(I), lzI(lzI) {
        for (base = 1; base < N; base <<= 1);
        tree.resize(base * 2 + 1, I);
        lz.resize(base * 2 + 1, lzI);
    }

    void lazy(int n) {
        if(lz[n] == lzI) return;
        tree[n] = u(tree[n], lz[n]);
        if (n < base) {
            lz[n<<1] = p(lz[n<<1], lz[n]);
            lz[n<<1|1] = p(lz[n<<1|1], lz[n]);
        }
        lz[n] = lzI;
    }

    void build() {
        for (int i = base - 1; i; i--) {
            tree[i] = m(tree[i << 1], tree[i << 1 | 1]);
        }
    }

    T_Node get(int i) { return tree[i + base]; }

    void set(int i, T_Node v) { tree[i + base] = v; }

    void upd(int l, int r, T_Lazy v) {
        upd(l, r, 1, 0, base - 1, v);
    }
    void upd(int l, int r, int n, int nl, int nr, T_Lazy v) {
        lazy(n);
        if (r < nl || nr < l) return;
        if (l <= nl && nr <= r) {
            lz[n] = p(lz[n], v);
            lazy(n);
            return;
        }
        int mid = (nl + nr) >> 1;
        upd(l, r, n<<1, nl, mid, v);
        upd(l, r, n<<1|1, mid+1, nr, v);

        tree[n] = m(tree[n<<1], tree[n<<1|1]);
    }

    T_Node qry(int l, int r) {
        return qry(l, r, 1, 0, base - 1);
    }
    T_Node qry(int l, int r, int n, int nl, int nr) {
        lazy(n);
        if (r < nl || nr < l) return I;
        if (l <= nl && nr <= r) return tree[n];
        int mid = (nl + nr) >> 1;
        return m(qry(l, r, n<<1, nl, mid), qry(l, r, n<<1|1, mid+1, nr));
    }
};

class Solution {
public:
    bool isZeroArray(vector<int>& a, vector<vector<int>>& queries) {
        auto m = [](lint a, lint b) {
            return max(a,b);
        };
        auto u = [](lint a, lint b) {
            return a + b;
        };
        auto p = [](lint a, lint b) {
            return a + b;
        };
        N = sz(a);
        LazySegTree<lint, lint, decltype(m), decltype(u), decltype(p)> seg(N, m, u, p, 0, 0);
        int mx = inf;
        for(int i = 0; i < N; i++) {
            seg.set(i, a[i]);
            mx = max(mx, a[i]);
        }
        if(mx == 0) return 0;
        seg.build();
        for(auto &vec: queries) {
            int l = vec[0], r = vec[1];
            seg.upd(l, r, -1);
        }
        if(seg.qry(0,N-1) <= 0) return true;
        return false;
    }
};
",1454843208
raararaara,raararaara,593,3643,cpp,"#include<bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
//#include <atcoder/all>
//using mint = atcoder::modint998244353;
using namespace std;
using namespace __gnu_pbds;
template<class key, class cmp = std::less<key>>
using ordered_set = tree<key, null_type, cmp, rb_tree_tag,tree_order_statistics_node_update>;
template<class key, class value, class cmp = std::less<key>>
using ordered_map = tree<key, value, cmp, rb_tree_tag, tree_order_statistics_node_update>;

using lint = long long;
using ii = pair<int, int>;
using il = pair<int, lint>;
using li = pair<lint, int>;
using ll = pair<lint, lint>;

const int mxn = 1000100, mxp = 1000001;
const int MOD = 998244353, inf = -1e9 - 7, INF = 1e9 + 1;
const lint lnf = -4e18, LNF = 5e18;
const double eps = 1e-10;
const int sqrtN = 200;

#define sz(x) int(size(x))
#define all(x) (x).begin(),(x).end()
#define compress(x) sort(all(x)), (x).erase(unique(all(x)), (x).end())
#define lb(x, v) (lower_bound(all(x), v) - (x).begin())
#define ub(x, v) (upper_bound(all(x), v) - (x).begin())
#define eb emplace_back
#define pb push_back
#define getName(var)  #var
vector<lint> xl, yl;

#define Yes ""Yes\n""
#define No ""No\n""

const int dr[] = {-1, 0, 1, 0};
const int dc[] = {0, -1, 0, 1};

inline int inRange(int r, int c, int R, int C) {
    return 0 <= r && r < R && 0 <= c && c < C;
}

lint N, M, Q, R, C, H, K, T;

void init() {

}

template<typename T_Node,
        typename T_Lazy,
        typename F_Merge,
        typename F_Update,
        typename F_Prop>
struct LazySegTree {
    int N{}, base{};
    vector<T_Node> tree;
    vector<T_Lazy> lz;

    const F_Merge m;
    const F_Update u;
    const F_Prop p;
    const T_Node I;
    const T_Lazy lzI;

    LazySegTree() = default;

    LazySegTree(int n,
                F_Merge _m, F_Update _u, F_Prop _p,
                const T_Node &I, const T_Lazy &lzI)
            : N(n), m(_m), u(_u), p(_p), I(I), lzI(lzI) {
        for (base = 1; base < N; base <<= 1);
        tree.resize(base * 2 + 1, I);
        lz.resize(base * 2 + 1, lzI);
    }

    void lazy(int n) {
        if(lz[n] == lzI) return;
        tree[n] = u(tree[n], lz[n]);
        if (n < base) {
            lz[n<<1] = p(lz[n<<1], lz[n]);
            lz[n<<1|1] = p(lz[n<<1|1], lz[n]);
        }
        lz[n] = lzI;
    }

    void build() {
        for (int i = base - 1; i; i--) {
            tree[i] = m(tree[i << 1], tree[i << 1 | 1]);
        }
    }

    T_Node get(int i) { return tree[i + base]; }

    void set(int i, T_Node v) { tree[i + base] = v; }

    void upd(int l, int r, T_Lazy v) {
        upd(l, r, 1, 0, base - 1, v);
    }
    void upd(int l, int r, int n, int nl, int nr, T_Lazy v) {
        lazy(n);
        if (r < nl || nr < l) return;
        if (l <= nl && nr <= r) {
            lz[n] = p(lz[n], v);
            lazy(n);
            return;
        }
        int mid = (nl + nr) >> 1;
        upd(l, r, n<<1, nl, mid, v);
        upd(l, r, n<<1|1, mid+1, nr, v);

        tree[n] = m(tree[n<<1], tree[n<<1|1]);
    }

    T_Node qry(int l, int r) {
        return qry(l, r, 1, 0, base - 1);
    }
    T_Node qry(int l, int r, int n, int nl, int nr) {
        lazy(n);
        if (r < nl || nr < l) return I;
        if (l <= nl && nr <= r) return tree[n];
        int mid = (nl + nr) >> 1;
        return m(qry(l, r, n<<1, nl, mid), qry(l, r, n<<1|1, mid+1, nr));
    }
};


class Solution {
public:
    int minZeroArray(vector<int>& a, vector<vector<int>>& queries) {
        auto m = [](lint a, lint b) {
            return max(a,b);
        };
        auto u = [](lint a, lint b) {
            return a + b;
        };
        auto p = [](lint a, lint b) {
            return a + b;
        };
        N = sz(a);
        LazySegTree<lint, lint, decltype(m), decltype(u), decltype(p)> seg(N, m, u, p, 0, 0);
        int mx = inf;
        for(int i = 0; i < N; i++) {
            seg.set(i, a[i]);
            mx = max(mx, a[i]);
        }
        if(mx == 0) return 0;
        seg.build();
        for(int i = 1; auto &vec: queries) {
            int l = vec[0], r = vec[1], k = vec[2];
            seg.upd(l, r, -k);
            int cand = seg.qry(0,N-1);
            if(cand <= 0) return i;
            i++;
        }
        return -1;
    }
};
",1454840103
Md Nahid Chowdhury,MdNahidCHY,594,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        
        int n = nums.size(),ans = 0;
        vector<int>sum(n+2);
        
        sum[0] = 0;
        for(int i=1; i<=n; ++i)
            sum[i] = sum[i-1]+nums[i-1];
        
        for(int i=1; i<=n; ++i)
            if(!nums[i-1] && sum[i] == sum[n]-sum[i-1])
                ans += 2;
        else if(!nums[i-1] && abs(sum[i]-  (sum[n]-sum[i-1]))==1)
            ans++;
        
        return ans;
    }
};",1454814934
Md Nahid Chowdhury,MdNahidCHY,594,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        
        int m = queries.size();
        int n = nums.size();
        
        vector<int>sum(n+2,0);
        for(auto it:queries)
        sum[it[0]]++,sum[it[1]+1]--;
        
        for(int i=1; i<n; ++i)
            sum[i] += sum[i-1];
        
        for(int i=0; i<n; ++i)
         if(sum[i]<nums[i]) 
             return false;
        
        return true;
    }
};",1454824099
Md Nahid Chowdhury,MdNahidCHY,594,3643,cpp,"class Solution {
public:
    
    bool solve(vector<int>& num, vector<vector<int>>& q,int mid)
    {
        int n = num.size();
        vector<int>sum(n+2,0);
        
        for(int i=0; i<mid; ++i)
        sum[q[i][0]] += q[i][2],sum[q[i][1]+1] -= q[i][2];
        
        for(int i=1; i<n; ++i)
            sum[i] += sum[i-1];
        
        for(int i=0; i<n; ++i)
            if(sum[i]<num[i])
                return false;
        
        return true;
    }
        
    int minZeroArray(vector<int>& num, vector<vector<int>>& q) {
     
        int m = q.size();
        
        int l = 0, r = m;
        while(l<=r)
        {
            int mid = (l+r)/2;
            
            if(!solve(num,q,mid))
                l = mid+1;
            else
                r = mid-1;
        }
        
        if(l>m)
            return -1;
        else
            return l;
    }
};",1454835897
BT22CSE1832026,BT22CSE1832026,595,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int n = nums.size();
        int validSelections = 0;
        
        auto simulate = [&](int start, int direction) {
            vector<int> temp = nums; 
            int curr = start;
            while (curr >= 0 && curr < n) {
                if (temp[curr] == 0) {
                    curr += direction;
                } else {
                    temp[curr]--;
                    direction = -direction;
                    curr += direction;
                }
            }
            for (int x : temp) {
                if (x != 0) return false;
            }
            return true;
        };
        
        for (int i = 0; i < n; i++) {
            if (nums[i] == 0) {
                if (simulate(i, -1)) validSelections++;
                if (simulate(i, 1)) validSelections++;
            }
        }
        
        return validSelections;
    }
};
",1454807758
BT22CSE1832026,BT22CSE1832026,595,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        vector<int> count(n + 1, 0);  
        
        for (const auto& query : queries) {
            int l = query[0];
            int r = query[1];
            count[l] += 1;
            if (r + 1 < n) count[r + 1] -= 1;
        }

        int availableDecrements = 0;
        for (int i = 0; i < n; ++i) {
            availableDecrements += count[i];
            if (availableDecrements < nums[i]) {
                return false;  
            }
        }
        
        return true;
    }
};
",1454814685
BT22CSE1832026,BT22CSE1832026,595,3643,cpp,"class Solution {
public:

    bool fn(vector<int>& nums, int mid, vector<vector<int>>& queries) {
        int n = nums.size();
        vector<int> count(n + 1, 0);  

        for (int i = 0; i < mid; i++) {
            int l = queries[i][0];
            int r = queries[i][1];
            int val=queries[i][2];
            count[l] += val;
            if (r + 1 < n) count[r + 1] -= val;
        }

        int availableDecrements = 0;
        for (int i = 0; i < n; ++i) {
            availableDecrements += count[i];
            if (availableDecrements < nums[i]) {
                return false;  
            }
        }
        
        return true;
    }

    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int low = 0;
        int high = queries.size();
        int ans = -1;
        while (low <= high) {  
            int mid = low + (high - low) / 2;
            if (fn(nums, mid, queries)) {
                ans = mid;
                high = mid - 1;
            } else {
                low = mid + 1;
            }
        }
        return ans;
    }
};
",1454828525
leet-22R01A05L0,leet-22R01A05L0,597,3616,python3,"from typing import List
class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        n=len(nums)
        valid=0
        def simulate(start:int,direction:int) -> bool:
            nums_copy=nums[:]
            curr=start
            while 0<=curr<n:
                if nums_copy[curr]==0:
                    curr+=direction
                else:
                    nums_copy[curr]-=1
                    direction*=-1
                    curr+=direction
            return all(x==0 for x in nums_copy)
        for i in range(n):
            if nums[i]==0:
                if simulate(i,-1):
                    valid+=1
                if simulate(i,1):
                    valid+=1
        return valid",1454822488
leet-22R01A05L0,leet-22R01A05L0,597,3639,python3,"from typing import List
class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        n=len(nums)
        delta=[0]*(n+1)
        for l1,r1 in queries:
            delta[l1]+=1
            if r1+1<n:
                delta[r1+1]-=1
        cover=[0]*n
        curr=0
        for i in range(n):
            curr+=delta[i]
            cover[i]=curr
        for i in range(n):
            if nums[i]>cover[i]:
                return False
        return True",1454829541
leet-22R01A05L0,leet-22R01A05L0,597,3643,python3,"from typing import List
class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        zero=nums[:]
        def can_zero(k:int)->bool:
            n=len(nums)
            delta=[0]*(n+1)
            for i in range(k):
                li,ri,vali=queries[i]
                delta[li]+=vali
                if ri+1<n:
                    delta[ri+1]-=vali
            curr=0
            for i in range(n):
                curr+=delta[i]
                if zero[i]>curr:
                    return False
            return True
        left,right=0,len(queries)
        res=-1
        while left<=right:
            mid=(left+right)//2
            if can_zero(mid):
                res=mid
                right=mid-1
            else:
                left=mid+1
        return res",1454843389
sleepySasank,sleepySasank,598,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        N = len(nums)
        def ok(i,g):
            f = nums.copy()
            curr = i
            dire = g 
            while 0<=curr<N:
                if f[curr] > 0:
                    f[curr]-=1
                    g = 1 if g==-1 else -1
                curr+=g
            return all(f[i]==0 for i in range(N))
        ans = 0
        for i in range(N):
            if (nums[i]==0 and (ok(i,1))):
                ans+=1
            if nums[i]==0 and ok(i,-1):ans+=1
        return ans",1454814145
sleepySasank,sleepySasank,598,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        N = len(nums)
        prefix =[0]*(N + 1)
        for l,r in queries:
            prefix[l]-=1
            prefix[r + 1]+=1
        prefix.pop()
        for i in range(1,len(prefix)):
            prefix[i]+=prefix[i-1]
        return all(max(0,x + y)==0 for x,y in zip(nums,prefix))",1454818926
sleepySasank,sleepySasank,598,3643,python3,"

class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        N = len(nums)
        
        def good(mid):
            prefix = [0] * (N + 1)
            for l, r, val in queries[:mid]:
                prefix[l] -= val
                prefix[r + 1] += val
            for i in range(1, N):
                prefix[i] += prefix[i - 1]
            return all(max(0,x + y)==0 for x,y in zip(prefix,nums))
        l, r = 0, len(queries)
        ans = len(queries)
        
        while l <= r:
            mid = (l + r) // 2
            if good(mid):
                ans = mid
                r = mid - 1  
            else:
                l = mid + 1  
        return ans if good(ans) else -1
",1454836154
Prabal Pratap Singh,prabalpsingh7115,599,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int n=nums.size();
        int suf=accumulate(nums.begin(),nums.end(),0);
        int pre=0;
        int ans=0;
        for(int i=0;i<n;i++)
        {
            suf-=nums[i];
            if(nums[i]==0)
            {
                if(pre==suf)
                {
                    ans+=2;
                }
                else if(abs(pre-suf)==1)
                {
                    ans++;
                }
        
            }
            pre+=nums[i];
        }
        return ans;
        
        
    }
};",1454811833
Prabal Pratap Singh,prabalpsingh7115,599,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n=nums.size();
        vector<int>diff(n+1);
        for(auto &i:queries)
        {
            int l=i[0];
            int r=i[1];
            diff[l]--;
            
            diff[r+1]++;
            
        }
        
        for(int i=1;i<n;i++)
        {
            diff[i]+=diff[i-1];    
        }
        for(int i=0;i<n;i++)
        {
            if(nums[i]!=0&&nums[i]+diff[i]>0)
            {
                return false;
            }
        }
        return true;
        
    }
};",1454820770
Prabal Pratap Singh,prabalpsingh7115,599,3643,cpp,"class Solution {
public:

    bool check(int mid,vector<int>&nums,vector<vector<int>>&queries)
    {
        int n=nums.size();
        vector<int>diff(n+1);
        for(int i=0;i<mid;i++)
        {
            int l=queries[i][0];
            int r=queries[i][1];
            int val=queries[i][2];
            diff[l]-=val;
            diff[r+1]+=val;
        }
        
        for(int i=1;i<n;i++)
        {
            diff[i]+=diff[i-1];    
        }
        for(int i=0;i<n;i++)
        {
            if(nums[i]!=0&&nums[i]+diff[i]>0)
            {
                return false;
            }
        }
        return true;
        
    }
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int q=queries.size();
        int l=0;
        int r=q;
        int ans=-1;
        while(r>=l)
        {
            int mid=l+(r-l)/2;
            if(check(mid,nums,queries))
            {
                ans=mid;
                r=mid-1;
            }
            else
            {
                l=mid+1;
            }
        }
        
        return ans;
    }
};",1454828719
Hanzhou Tang,hanzhoutang,600,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int ret = 0; 
        for(int i = 0;i<nums.size();i++) {
            if(nums[i] == 0) {
                int l = 0; 
                int r = 0; 
                for(int j = 0;j<i;j++) {
                    l += nums[j];
                }
                for(int j = i + 1;j<nums.size();j++) {
                    r += nums[j];
                }
                if(l == r) {
                    ret += 2; 
                } else if(l + 1 == r) {
                    ret += 1; 
                } else if(r + 1 == l) {
                    ret += 1; 
                }
            }
        }
        return ret; 
    }
};",1454814490
Hanzhou Tang,hanzhoutang,600,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        vector<int> tmp(nums.size() + 1);
        for(auto& q : queries) {
            int l = q[0];
            int r = q[1];
            tmp[l] -= 1;
            tmp[r+1] += 1; 
        }
        int v = 0; 
        for(int i = 0;i<nums.size();i++) {
            v += tmp[i];
            if(v + nums[i] > 0) {
                return false; 
            }
        }
        return true; 
    }
};",1454819017
Hanzhou Tang,hanzhoutang,600,3643,cpp,"class Solution {
public:
    bool be_zero(vector<int>& nums, vector<vector<int>>& queries, int k) {
        vector<int> tmp(nums.size() + 1);
        for(int i = 1;i<=k;i++) {
            const auto& q = queries[i-1];
            int l = q[0];
            int r = q[1];
            int v = q[2];
            tmp[l] -= v;
            tmp[r+1] += v;
        }
        int v = 0; 
        for(int i = 0;i<nums.size();i++) {
            v += tmp[i];
            if(v + nums[i] > 0) {
                return false; 
            }
        }
        return true; 
    }
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int l = 0; 
        int r = queries.size(); 
        int ret = queries.size() + 5; 
        while(l<=r) {
            int m = l + (r-l) / 2; 
            if(be_zero(nums, queries, m)) {
                ret = min(ret, m);
                r = m - 1; 
            } else {
                l = m + 1; 
            }
        }
        if(ret > queries.size()) {
            return -1; 
        }
        return ret; 
    }
};",1454828782
sweety rani,sweetyrani005,601,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int n=nums.size();
        vector<int>ps(n),sm(n);
        ps[0]=nums[0];
        sm[n-1]=nums[n-1];
        for(int i=1;i<n;i++){
            ps[i]=ps[i-1]+nums[i];
        }
        for(int i=n-2;i>=0;i--){
            sm[i]=sm[i+1]+nums[i];
        }
        int cnt=0;
        for(int i=0;i<n;i++){
            if(nums[i]==0){
                if(ps[i]==sm[i])cnt+=2;
                else if(abs(ps[i]-sm[i])==1)cnt+=1;
            }
        }
        return cnt;
    }
};",1454813231
sweety rani,sweetyrani005,601,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n=nums.size();
        vector<int>v(n+2);
        for(auto it:queries){
            v[it[0]]++;
            v[it[1]+1]--;
        }
        for(int i=1;i<=n;i++){
            v[i]=v[i]+v[i-1];
        }
        for(int i=0;i<n;i++){
            if(v[i]<nums[i])return false;
        }
        return true;
    }
};",1454818421
sweety rani,sweetyrani005,601,3643,cpp,"class Solution {
public:
    
    int solve(vector<int>& nums, vector<vector<int>>& queries,int mid){
        int n=nums.size();
        vector<long long>ps(n+2);
        for(int i=0;i<mid;i++){
            int l=queries[i][0],r=queries[i][1],val=queries[i][2];
            ps[l]+=val;
            ps[r+1]-=val;
        }
        for(int i=1;i<n;i++){
            ps[i]+=ps[i-1];
        }
        for(int i=0;i<n;i++){
            if(ps[i]<nums[i])return false;
        }
        return true;
    }
    
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n=nums.size();
        int q=queries.size();
        int l=0,r=q;
        int res=q+1;
        while(l<=r){
            int mid=l+(r-l)/2;
            if(solve(nums,queries,mid)){
                res=mid;
                r=mid-1;
            }
            else l=mid+1;
        }
        if(res==q+1)return -1;
        return res;
    }
};",1454828814
Ivyan,Ivyan,602,3616,java,"class Solution {
    public int countValidSelections(int[] nums) {
        int n = nums.length;
        int validSelections = 0;

        for (int start = 0; start < n; start++) {
            if (nums[start] != 0) continue; // Starting position must have nums[curr] == 0

            // Check both directions
            if (isValid(nums.clone(), start, true)) validSelections++;
            if (isValid(nums.clone(), start, false)) validSelections++;
        }

        return validSelections;
    }

    private boolean isValid(int[] nums, int start, boolean moveRight) {
        int curr = start;
        int n = nums.length;

        while (curr >= 0 && curr < n) {
            if (nums[curr] == 0) {
                curr += moveRight ? 1 : -1; // Move in the current direction
            } else if (nums[curr] > 0) {
                nums[curr]--; // Decrement the value
                moveRight = !moveRight; // Reverse direction
                curr += moveRight ? 1 : -1; // Move in the new direction
            }
        }

        // Check if all elements have become zero
        for (int num : nums) {
            if (num != 0) return false;
        }
        return true;
        
    }
}",1454814113
Ivyan,Ivyan,602,3639,java,"class Solution {
    public boolean isZeroArray(int[] nums, int[][] queries) {
         int n = nums.length;
        int[] rangeEffect = new int[n + 1];  
        for (int[] query : queries) {
            int start = query[0];
            int end = query[1];
            rangeEffect[start] += 1; 
            if (end + 1 < n) {
                rangeEffect[end + 1] -= 1; 
            }
        }      
        int cumulativeEffect = 0;
        for (int i = 0; i < n; i++) {
            cumulativeEffect += rangeEffect[i];
            
            if (nums[i] > cumulativeEffect) {
                return false;
            }
        }

        return true;    
    }
}",1454827822
Ivyan,Ivyan,602,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        vector<int> originalState = nums;
        vector<int> midState(n, 0);
        bool midStateCaptured = false;
        
        bool allZeros = true;
        for (int num : nums) {
            if (num != 0) {
                allZeros = false;
                break;
            }
        }

        if (allZeros) {
            midState = nums;
            return 0;
        }

        auto canMakeZero = [&](int k) {
            vector<int> diff(n + 1, 0);

            
            for (int i = 0; i < k; i++) {
                int left = queries[i][0];
                int right = queries[i][1];
                int value = queries[i][2];
                diff[left] += value;
                if (right + 1 < n) {
                    diff[right + 1] -= value;
                }
            }

            
            int runningSum = 0;
            for (int i = 0; i < n; i++) {
                runningSum += diff[i];
                if (runningSum < originalState[i]) {
                    return false; 
                }
            }
            return true;
        };

        
        int left = 0, right = queries.size(), result = -1;

        while (left <= right) {
            int mid = (left + right) / 2;

            if (canMakeZero(mid)) {
                result = mid;
                right = mid - 1;
            } else {
                left = mid + 1;
            }

          
            if (!midStateCaptured && mid == (int)queries.size() / 2) {
                vector<int> diff(n + 1, 0);

                for (int i = 0; i < mid; i++) {
                    int leftIdx = queries[i][0];
                    int rightIdx = queries[i][1];
                    int value = queries[i][2];
                    diff[leftIdx] += value;
                    if (rightIdx + 1 < n) {
                        diff[rightIdx + 1] -= value;
                    }
                }

                int runningSum = 0;
                for (int i = 0; i < n; i++) {
                    runningSum += diff[i];
                    midState[i] = max(0, originalState[i] - runningSum);
                }

                midStateCaptured = true;
            }
        }

        return result;
    }
};
",1454843703
Santosh Kumar,scarywitcher,603,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int n = nums.size();
        vector<int>pref(n), suff(n);
        for(int i=0;i<n;i++){
            pref[i]=nums[i];
            if(i>0)pref[i]+=pref[i-1];
        }
        for(int i=n-1;i>=0;i--){
            suff[i]=nums[i];
            if(i<n-1)suff[i]+=suff[i+1];
        }
        int cnt=0;
        for(int i=0;i<n;i++){
            if(nums[i]==0){
                if(pref[i]==suff[i])cnt+=2;
                else if(abs(pref[i]-suff[i])==1)cnt++;
            }
        }
        return cnt;
    }
};",1454811960
Santosh Kumar,scarywitcher,603,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size(),  q= queries.size();
        vector<int>a(n+1);
        for(int i=0;i<q;i++){
            int l = queries[i][0], r = queries[i][1];
            a[l]++;
            a[r+1]--;
        }
        for(int i=1;i<n;i++){
            a[i]+=a[i-1];
        }
      bool ok = true;
        for(int i=0;i<n;i++){
            if(a[i]< nums[i])ok=false;
        }
        return ok;
    }
};",1454821775
Santosh Kumar,scarywitcher,603,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
         int n = nums.size(),  q= queries.size();

         auto f = [&](int m)->bool{
               vector<int>a(n+1);
        for(int i=0;i<m;i++){
            int l = queries[i][0], r = queries[i][1], v = queries[i][2];
            a[l]+=v;
            a[r+1]-=v;
        }
        for(int i=1;i<n;i++){
            a[i]+=a[i-1];
        }
     
    bool ok = true;
        for(int i=0;i<n;i++){
            if(a[i]< nums[i])ok=false;
        }
             return ok;
       
         };
        int ans = -1;

        int l =0, r =q;
        while(l<=r){
            int m = l+(r-l)/2;
            if(f(m)){
                ans = m;
                r= m-1;
            }else{
                l=m+1;
            }
        }

        return ans;
   
    }
};",1454843725
Arjun Aggarwal,arjune,605,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& arr) {
        int n = arr.size();
        int pre[n];
        int post[n];
        int sum = 0;
        for(int i=0;i<n;i++) {
            sum += arr[i];
            pre[i] = sum;
        }
        
        sum = 0;
        for (int i=n-1;i>=0;i--) {
            sum += arr[i];
            post[i] = sum;
        }
        int ans = 0;
        for(int i=0;i<n;i++) {
            if (arr[i] != 0) continue;
            int left = 0;
            if (i-1 >= 0) {
                left = pre[i-1];
            }
            int right = 0;
            if (i+1 < n) {
                right = post[i+1];
            }
            if (left == right) {
                ans += 2;
            }
            else {
                if (abs(left - right) == 1) ans++;
            }
        }
        return ans;
    }
};",1454813072
Arjun Aggarwal,arjune,605,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& arr, vector<vector<int>>& brr) {
        int n = arr.size();
        vector<int> crr(n);
        for (auto it : brr) {
            int l = it[0], r = it[1];
            crr[l]--;
            if (r+1 < n) {
                crr[r+1]++;
            }
        }
        int sum = 0;
        for (int i=0;i<n;i++) {
            sum += crr[i];
            arr[i] += sum;
            if (arr[i] > 0) return false;
        }
        return true;
    }
};",1454819298
Arjun Aggarwal,arjune,605,3643,cpp,"class Solution {
public:

    bool isZeroArray(vector<int>arr, vector<vector<int>>& brr, int mid) {
        int n = arr.size();
        vector<int> crr(n);
        for (int i=0;i<=mid;i++) {
            auto it = brr[i];
            int l = it[0], r = it[1], val = it[2];
            crr[l]-=val;
            if (r+1 < n) {
                crr[r+1]+=val;
            }
            
            
        }
        int sum = 0;
        for (int i=0;i<n;i++) {
            //     if (mid == 0) {
            //     cout << arr[i] << "" "" << crr[i] << endl;
            // }
            sum += crr[i];
            arr[i] += sum;
            if (arr[i] > 0) return false;
            // if (mid == 0) {
            //     cout << arr[i] << "" "" << crr[i] << endl;
            // }
        }
        return true;
    }

    int minZeroArray(vector<int>& arr, vector<vector<int>>& brr) {
        int n = arr.size();
        int m = brr.size();
        int left = -1, right = m-1;
        int ans = -1;
        while(left <= right) {
            int mid = (left + right)/2;
            
            int v = isZeroArray(arr, brr, mid);
            // if (mid == 0) {
            //     cout << v << endl;
            // }
            if (v) {
                right = mid-1;
                ans = mid+1;
            } else {
                left = mid+1;
            }
        }
        return ans;
    }
};",1454836497
Shubhanshu,PlayDate,606,3616,java,"class Solution {
    public int countValidSelections(int[] nums) {
        int n = nums.length;
        int[] pre = new int[n], suff = new int[n];
        int sum = 0;
        for (int i = 0; i < n; i++){
            sum += nums[i];
            pre[i] = sum;
        }
        sum = 0;
        int ans = 0;
        for (int i = n-1; i >= 0; i--){
            sum += nums[i];
            suff[i] = sum;
            if (nums[i] == 0 && suff[i] == pre[i]) ans += 2;
            else if (nums[i] == 0 && Math.abs(suff[i] - pre[i]) == 1) ans++;
        }
        
        // System.out.println(Arrays.toString(pre));
        // System.out.println(Arrays.toString(suff));
        return ans;
    }
}",1454813036
Shubhanshu,PlayDate,606,3639,java,"class Solution {
    public boolean isZeroArray(int[] nums, int[][] queries) {
        int n = nums.length;
        int[] pre = new int[n+1];
        for (int[] query : queries){
            pre[query[0]]++;
            pre[query[1]+1]--;
        }
        int curr = 0;
        for (int i = 0; i < n; i++){
            curr += pre[i];
            if (curr < nums[i]) return false;
        }
        return true;
    }
}",1454817485
Shubhanshu,PlayDate,606,3643,java,"class Solution {
    public int minZeroArray(int[] nums, int[][] queries) {
        int s = 0, e = queries.length;
        while (s <= e){
            int m = s + (e-s)/2;
            if (isZeroArray(nums,queries,m)) e = m-1;
            else s = m+1;
        }
        return (s > queries.length) ? -1 : s;
    }
    
    public boolean isZeroArray(int[] nums, int[][] queries, int target) {
        int n = nums.length;
        int[] pre = new int[n+1];
        for (int i = 0; i < target; i++){
            int[] query = queries[i];
            pre[query[0]]+=query[2];
            pre[query[1]+1]-=query[2];
        }
        
        int curr = 0;
        for (int i = 0; i < n; i++){
            curr += pre[i];
            if (curr < nums[i]) return false;
        }
        return true;
    }
}",1454829067
Shivam Kumar Pathak,Shivam_610,609,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int n = nums.size();
        int validCount = 0;
        for (int start = 0; start < n; start++) {
            if (nums[start] != 0) continue;

            for (int direction : {-1, 1}) {
                vector<int> numsCopy = nums; 
                int curr = start;
                int dir = direction;

                while (curr >= 0 && curr < n) {
                    if (numsCopy[curr] == 0) {
                        curr += dir;
                    } else {
                        numsCopy[curr] -= 1; 
                        dir = -dir;          
                        curr += dir;         
                    }
                }

                bool allZero = true;
                for (int num : numsCopy) {
                    if (num != 0) {
                        allZero = false;
                        break;
                    }
                }
                if (allZero) {
                    validCount++;
                }
            }
        }

        return validCount;
    }
};
",1454810930
Shivam Kumar Pathak,Shivam_610,609,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        vector<int> diff(n + 1, 0);
        applyQueries(diff, queries, n);
        
        int effect = 0;
        for (int i = 0; i < n; ++i) {
            effect += diff[i];
            nums[i] -= effect;
            if (nums[i] > 0) return false;
        }
        return true;
    }
    
private:
    void applyQueries(vector<int>& diff, const vector<vector<int>>& q, int n) {
        for (const auto& query : q) {
            int l = query[0], r = query[1];
            diff[l] += 1;
            if (r + 1 < n) diff[r + 1] -= 1;
        }
    }
};
",1454840711
Shivam Kumar Pathak,Shivam_610,609,3643,cpp,"bool canZero(vector<int>& nums, vector<vector<int>>& queries, int k) {
    int n = nums.size();
    vector<int> diff(n + 1, 0), temp = nums;

    for (int i = 0; i < k; ++i) {
        int l = queries[i][0], r = queries[i][1], v = queries[i][2];
        diff[l] += v;
        if (r + 1 < n) diff[r + 1] -= v;
    }

    int effect = 0;
    for (int i = 0; i < n; ++i) {
        effect += diff[i];
        temp[i] = max(0, temp[i] - effect);
        if (temp[i] > 0) return false;
    }

    return true;
}

class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int l = 0, r = queries.size(), res = -1;
        while (l <= r) {
            int mid = l + (r - l) / 2;
            if (canZero(nums, queries, mid)) {
                res = mid;
                r = mid - 1;
            } else {
                l = mid + 1;
            }
        }
        return res;
    }
};
",1454843983
Nelson,Nelson84,610,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int n = nums.size();
        vector<int> prefix_sum(n, 0);
        vector<int> suffix_sum(n, 0);
        prefix_sum[0] = nums[0];
        suffix_sum[n-1] = nums[n-1];
        for(int i=1; i<n; i++) prefix_sum[i] = prefix_sum[i-1] + nums[i];
        for(int i=n-2; i>=0; i--) suffix_sum[i] = suffix_sum[i+1] + nums[i];

        int res = 0;
        for(int i=0; i<n; i++){
            if(nums[i]!=0) continue;

            int l_sum = (i-1>=0 ?prefix_sum[i-1] :0);
            int r_sum = (i+1<n ?suffix_sum[i+1] : 0);
            if(l_sum==r_sum) res+=2;
            else if(abs(l_sum-r_sum)==1) res++;
        }
        return res;
    }
};",1454814684
Nelson,Nelson84,610,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        vector<int> diff(n, 0);
        for(auto& query: queries){
            int l = query[0];
            int r = query[1];
            diff[l]++;
            if(r+1<n) diff[r+1]--;
        }

        for(int i=1; i<n; i++) diff[i] += diff[i-1];
        for(int i=0; i<n; i++) if(diff[i]<nums[i]) return false;
        return true;
    }
};",1454820408
Nelson,Nelson84,610,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        bool all_zero = true;
        for(int i=0; i<nums.size(); i++){
            if(nums[i]!=0){
                all_zero = false;
                break;
            }
        }
        if(all_zero) return 0;
        
        int l = 0;
        int r = queries.size()-1;
        int res = -1;
        while(l<=r){
            int mid = l+(r-l)/2;
            if(valid(nums, queries, mid)){
                res = mid+1;
                r = mid-1;
            }
            else l = mid+1;
        }
        return res;
    }

    bool valid(vector<int>& nums, vector<vector<int>>& queries, int query_index){
        int n = nums.size();
        vector<int> diff(n, 0);
        for(int i=0; i<=query_index; i++){
            int l = queries[i][0];
            int r = queries[i][1];
            int val = queries[i][2];
            diff[l]+=val;
            if(r+1<n) diff[r+1]-=val;
        }

        for(int i=1; i<n; i++) diff[i] += diff[i-1];
        for(int i=0; i<n; i++) if(diff[i]<nums[i]) return false;
        return true;
    }
};",1454829186
Navneet,yhYTzMtNQt,613,3616,cpp,"
class Solution {
public:
       int countValidSelections(vector<int>& nums) {
        int n = nums.size();
        int count = 0;
        auto simulate = [&](int start, int direction) -> bool {
            vector<int> temp = nums; 
            int curr = start;
            while (curr >= 0 && curr < n) {
                if (temp[curr] == 0) curr += direction;
                else {temp[curr]--;
                    direction = -direction; 
                    curr += direction;
                }
            }
           
            for (auto  val : temp) {
                if (val != 0) return false;
            }
            return true;
        };
int ct=0;
       for(auto i:nums){
           if(i==0){ct++;}
       }
        for (int i = 0; i < n; i++) {
            if(nums[i]!=0)continue;
            else if (nums[i] == 0) {if (simulate(i, 1)) count++;  
                if (simulate(i, -1)) count++; 
            }
        }

        return count;
    }
};",1454844201
Navneet,yhYTzMtNQt,613,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n=queries.size();
      
         
            vector<int> v(nums.size()+1,0);
            for(int i=0;i<n;i++){
                auto it=queries[i];
                v[it[0]]+=1;
                v[it[1]+1]-=1;
            }
            int flag=1;
            int sum=0;
            for(int i=0;i<nums.size();i++){
                sum+=v[i];
                if(sum<nums[i]){
                    flag=false;
                    break;
                }
            }
  
        return flag==1;
        
    }
};",1454833009
Navneet,yhYTzMtNQt,613,3643,cpp,"#define ff first
#define sz size()
#define ss second
#define ll long long 
#define pb push_back
#define vll vector<ll>
#define ump unordered_map
#define all(x) x.begin(),x.end()
#define vllp vector<pair<ll,ll>>  
class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n=queries.size();
        int s=0,e=n;
        int ans=-1;
        while(e>=s){
            int mid=(e+s)/2;
            vector<int> v(nums.size()+1,0);
            for(int i=0;i<mid;i++){
                auto it=queries[i];
                v[it[0]]+=it[2];
                v[it[1]+1]-=it[2];
            }
            int flag=1;
            int sum=0;
            for(int i=0;i<nums.size();i++){
                sum+=v[i];
                if(sum<nums[i]){
                    flag=false;
                    break;
                }
            }
            if(flag){
                e=mid-1;
                ans=mid;
            }
            else s=mid+1;
            
            
        }
        return ans;
        
        
    }
};",1454829709
lyronly,lyronly,614,3616,cpp,"typedef long long ll; 
class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        ll sum = 0;
        int n = nums.size();
        for (int i = 0; i < n; i++) sum += nums[i];

        int ans = 0;
        ll cur = 0;
        for (int i = 0; i < n; i++)
            {
                cur += nums[i];
                ll left = sum - cur;

                if (nums[i] == 0)
                {
                    if (cur == left) ans += 2;
                    else if ((cur - 1 == left) || (cur + 1 == left))
                    {
                        ans += 1;
                    }
                }
            }
        return ans;
    }
};",1454817513
lyronly,lyronly,614,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& qs) {
        int n = nums.size();
        vector<int> dp(n + 1, 0);
        for (auto& q : qs)
        {
            dp[q[0]]++;
            dp[q[1] + 1]--;
        }

        int cur = 0;
        for (int i = 0; i < n; i++)
            {
                cur += dp[i];
                if (cur < nums[i]) return false;
            }
        return true;
        
    }
};",1454823471
lyronly,lyronly,614,3643,cpp,"typedef long long ll;
class Solution {
public:
    int n;
    int m;
    vector<ll> dp;
    bool test(vector<int>& nums, vector<vector<int>>& qs, int k)
    {
        for (int i = 0; i < n; i++) dp[i] = 0;
        for (int i = 0; i < k; i++)
        {
            auto& q = qs[i];
            dp[q[0]] += q[2];
            dp[q[1] + 1] -= q[2];
        }
        ll cur = 0;
        for (int i = 0; i < n; i++) 
        {
            cur += dp[i];
            if (nums[i] > cur) return false;
        }
        return true;
    }
    int minZeroArray(vector<int>& nums, vector<vector<int>>& qs) {
        n = nums.size();
        m = qs.size();
        dp = vector<ll>(n + 1, 0);
        int l = 0;
        int r = qs.size();
        int ans = -1;
        while (l <= r)
        {
            int m = (l + r) / 2;
            bool res = test(nums, qs, m);
            if (res == true)
            {
                ans = m;
                r = m - 1;
            }
            else 
            {
                l = m + 1;
            }
        }
        return ans;
        
    }
};",1454844270
Joel Jhotan Chavez Chico,JhoZzel,615,3616,cpp,"class Solution {
public:
    bool check(vector<int> a, int i, bool go) {
        const int n = a.size();
        while(i < n and i >= 0) {
            if (a[i] != 0) {
                a[i]--;
                go ^= 1;
            }
            if (go) i++;
            else i--;
        }
        for (int i = 0; i < n; i++) {
            if (a[i] != 0) return 0;
        }
        return 1;
    }
    int countValidSelections(vector<int>& a) {
        const int n = a.size();
        int cnt = 0;
        for (int i = 0; i < n; i++) {
            if (a[i] == 0) {
                cnt += check(a, i, 0);
                cnt += check(a, i, 1);
            }
        }
        return cnt;
    }
};",1454812458
Joel Jhotan Chavez Chico,JhoZzel,615,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& a, vector<vector<int>>& Q) {
        const int n = a.size();
        vector<int> dif(n);
        for (int i = 0; i < Q.size(); i++) {
            int l = Q[i][0], r = Q[i][1];
            dif[l] += 1;
            if (r + 1 < n) dif[r + 1] -= 1;
        }
        for (int i = 1; i < n; i++) dif[i] += dif[i - 1];
        
        for (int i = 0; i < n; i++) {
            if (dif[i] < a[i]) return 0;
        }
        return 1;
    }
};",1454822450
Joel Jhotan Chavez Chico,JhoZzel,615,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& a, vector<vector<int>>& Q) {
        const int n = a.size();
        auto p = [&](int q) -> bool {
             vector<int> dif(n);
            for (int i = 0; i < q; i++) {
                int l = Q[i][0], r = Q[i][1], v = Q[i][2];
                dif[l] += v;
                if (r + 1 < n) dif[r + 1] -= v;
            }
            for (int i = 1; i < n; i++) dif[i] += dif[i - 1];
            for (int i = 0; i < n; i++) {
                if (dif[i] < a[i]) return 0;
            }   
            return 1;
        };
        int lo = 0, hi = Q.size();
        while(lo < hi) {
            int mid = (lo + hi) / 2;
            if (p(mid)) hi = mid;
            else lo = mid + 1;
        }
        return p(lo) ? lo : -1;
    }
};",1454829450
Reso_valid,Reso_valid,616,3616,cpp,"class Solution {
public:
    bool chk(vector<int> nums, int start, int d) {
    int n = nums.size();
    int curr = start;

    while (curr >= 0 && curr < n) {
        if (nums[curr] == 0) {
            curr += d; 
        } else {
            nums[curr] -= 1;    
            d = -d;  
            curr += d;  
        }
    }

    return all_of(nums.begin(), nums.end(), [](int x) { return x == 0; });
}

int countValidSelections(vector<int>& nums) {
    int n = nums.size();
    int c = 0;

    for (int start = 0; start < n; ++start) {
        if (nums[start] == 0) {
            if (chk(nums, start, 1)) {
                c++;
            }
            if (chk(nums, start, -1)) {
                c++;
            }
        }
    }

    return c;
}

};",1454811314
Reso_valid,Reso_valid,616,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        vector<int> pr(n + 1, 0);

        for (auto& i : queries) {
            int l = i[0];
            int r = i[1];
            pr[l] += 1;
            if (r + 1 < n) {
                pr[r + 1] -= 1;
            }
        }

        vector<int> dec(n, 0);
        int current = 0;

        for (int i = 0; i < n; ++i) {
            current += pr[i];
            dec[i] = current;
        }

        bool chk = false;
        for (int i = 0; i < n; ++i) {
            if (dec[i] < nums[i]) {
                chk = true;
                break;
            }
        }

        if (chk) return false;
        return true;
    }
};",1454819501
Reso_valid,Reso_valid,616,3643,cpp,"class Solution {
public:
    bool chk(vector<int>& nums, vector<vector<int>>& queries, int k) {
        int n = nums.size();
        vector<int> diff(n + 1, 0);

        for (int i = 0; i < k; i++) {
            int l = queries[i][0], r = queries[i][1], val = queries[i][2];
            diff[l] -= val;
            if (r + 1 < n)
                diff[r + 1] += val;
        }

        vector<int> final(nums.begin(), nums.end());
        int c = 0;
        for (int i = 0; i < n; i++) {
            c += diff[i];
            final[i] += c;
            if (final[i] > 0)
                return false;
        }
        return true;
    }

    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int s = 0, e = queries.size(), result = -1;
        while (s <= e) {
            int mid = s + (e - s) / 2;
            if (chk(nums, queries, mid)) {
                result = mid;
                e = mid - 1;
            } else {
                s = mid + 1;
            }
        }
        return result;
    }
};",1454836949
Abhinav Reddy,EchoAbhinav,617,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:


        def canMakeAllZero(nums, start, goRight):
            nums = nums.copy()
            n = len(nums)
            curr = start

            while 0 <= curr < n:
                if nums[curr] == 0:
                    curr = curr + 1 if goRight else curr - 1
                else:
                    nums[curr] -= 1
                    goRight = not goRight
                    curr = curr + 1 if goRight else curr - 1

            return all(x == 0 for x in nums)
                

        count = 0
        n = len(nums)

        for i in range(n):
            if nums[i] == 0:
                if canMakeAllZero(nums, i, True):
                    count += 1
                if canMakeAllZero(nums, i, False):
                    count += 1
        
        return count

                
        ",1454807871
Abhinav Reddy,EchoAbhinav,617,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:

        n = len(nums)
        a = [0] * n

        for q in queries:
            l,r = q[0],q[1]
            a[l] += 1
            if(r+1 != n):
                a[r+1] -= 1


        b = []
        cs = 0
        for i in range(n):
            cs += a[i]
            b.append(cs)

        print(b)

        for i in range(n):
            if(b[i] < nums[i]):
                return False

        return True
            
            ",1454816375
Abhinav Reddy,EchoAbhinav,617,3643,python3,"class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:

        n = len(nums)


        def check(x):
            a = [0] * n
    
            for q in queries[:x]:
                l,r,v = q[0],q[1],q[2]
                a[l] += v
                if(r+1 != n):
                    a[r+1] -= v
    
    
            b = []
            cs = 0
            for i in range(n):
                cs += a[i]
                b.append(cs)
    
            #print(b)
    
            for i in range(n):
                if(b[i] < nums[i]):
                    return False
    
            return True

        left, right = 0, len(queries)
        result = -1
        
        while left <= right:
            mid = (left + right) // 2
            if check(mid):
                result = mid
                right = mid - 1
            else:
                left = mid + 1
        
        return result
        ",1454829510
John Rigby,vanshkunwarji41,619,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int n=nums.size();
        int a[n+2];
        a[0]=0;
        for(int i=1;i<=n;i++){
            a[i]=a[i-1]+nums[i-1];
        }
        a[n+1]=a[n];
        int r=0;
        for(int i=0;i<n;i++){
            if(nums[i]==0){
                if(a[i]==a[n]-a[i]){
                    r+=2;
                }
                if(abs(2*a[i]-a[n])==1){
                    r++;
                }
            }
        }
        return r;
    }
};",1454810715
John Rigby,vanshkunwarji41,619,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int a[nums.size()+1];
        memset(a,0,sizeof(a));
        for(auto i:queries){
            a[i[0]]++;
            a[i[1]+1]--;
        }
        int p=0;
        for(int i=0;i<nums.size();i++){
            p+=a[i];
            if(nums[i]>p){
                return 0;
            }
        }
        return 1;
    }
};",1454814736
John Rigby,vanshkunwarji41,619,3643,cpp,"    typedef int td;
    //
    static const td idn=0;

    struct Node{
        td val;
        Node(){
            val=idn;
        }
        Node(long long p){
            val=p;
        }
        //
        void merge(Node &n1, Node &n2){
            val=max(n1.val,n2.val);
        }
    };

    struct Update {
        td val;
        Update(){ 
            val = idn;
        }
        Update(td val1) { 
            val = val1;
        }
        void apply(Node &a, int start, int end) { 
            a.val += val; 
        }
        void combine(Update& new_update, int start, int end){
            val += new_update.val;
        }
    };

    // Node treenodes[400000];
    // Update lazy[400000];

struct Segtree{

    vector<Node> treenodes;
    vector<Update> lazy;  
    int n;
    int s;

    Segtree(int n1){
        s=1;
        n=n1;
        while(s<2*n){
            s<<=1;
        }
        treenodes.resize(s,Node());
        lazy.resize(s,Update());
    }

    Segtree(int n1, vector<int> &arr){
        s=1;
        n=n1;
        while(s<2*n){
            s<<=1;
        }
        treenodes.resize(s,Node());
        lazy.resize(s,Update());
        build(0,n-1,1,arr); 
    }

    void build(int start, int end, int index,vector<int> &arr){
        if(start==end){
            treenodes[index]=Node(arr[start]);
            return;
        }
        int mid=(start+end)/2;
        build(start,mid,index<<1,arr);
        build(mid+1,end,(index<<1)|1,arr);
        treenodes[index].merge(treenodes[(index<<1)],treenodes[(index<<1)|1]);
    }

    void prop(int index, int start, int end){
        if(lazy[index].val!=idn){
            int mid=(start+end)/2;
            propdown(2*index,start,mid,lazy[index]);
            propdown(2*index+1,mid+1,end,lazy[index]);
            lazy[index]=Update();
        }
    }

    void propdown(int index, int start, int end, Update& parent){
        if(start!=end){
            lazy[index].combine(parent,start,end);
        }
        parent.apply(treenodes[index],start,end);
    }
    
    void update(int start, int end, int index, int left,int right, Update& parent){
        if(start>right || end<left){
            return;
        }
        if(start>=left && end<=right){
            propdown(index, start, end, parent);
            return;
        }   
        prop(index,start,end);
        int mid=(start+end)/2;
	    update(start,mid,2*index,left,right,parent);
		update(mid+1,end,2*index+1,left,right,parent);
		treenodes[index].merge(treenodes[2*index],treenodes[2*index+1]);
    }

    Node query(int start, int end, int index, int left, int right){
        if(start>right || end<left){
            return Node();
        }
        prop(index,start,end);
        if (start>=left && end<=right){
            return treenodes[index];
        }
        int mid=(start+end)/2;
        Node l=query(start,mid,2*index,left,right);
        Node r=query(mid+1,end,2*index+1,left,right);
        Node ans;
        ans.merge(l,r);
        return ans;
    }

    void upd(int left,int right, td val){
        Update newUpdate= Update(val);
        update(0,n-1,1,left,right,newUpdate);
    }

    td que(int left, int right){
        Node ans= query(0,n-1,1,left,right);
        return ans.val;
    }


};
class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        Segtree tree(nums.size(),nums);
        int n=nums.size();
        if(tree.que(0,n-1)==0){
            return 0;
        }
        for(int i=0;i<queries.size();i++){
            tree.upd(queries[i][0],queries[i][1],-queries[i][2]);
            tree.que(0,n-1);
            if(tree.que(0,n-1)<=0){
                return i+1;
            }
        }
        return -1;
    }
};",1454837030
Nisarg Patel,Nisarg_Pat,620,3616,java,"class Solution {
    public int countValidSelections(int[] nums) {
        int rightSum = 0;
        for(int num: nums) {
            rightSum += num;
        }
        int currSum = 0;
        int count = 0;
        for(int i=0;i<nums.length;i++) {
            if(nums[i] != 0) {
                currSum += nums[i];
                rightSum -= nums[i];
            } else {
                if(currSum == rightSum) {
                    count +=2;  
                } else if(Math.abs(currSum - rightSum) == 1) {
                    count +=1;
                }
            }
        }
        return count;
    }
}",1454810479
Nisarg Patel,Nisarg_Pat,620,3639,java,"class Solution {
    public boolean isZeroArray(int[] nums, int[][] queries) {
        int n = nums.length;
        int[] lazySum = new int[n+1];
        for(int[] q: queries) {
            lazySum[q[0]]++;
            lazySum[q[1]+1]--;
        }
        if(lazySum[0] < nums[0]) {
            return false;
        }
        for(int i=1;i<n;i++) {
            lazySum[i] += lazySum[i-1];
            if(lazySum[i] < nums[i]) {
                return false;
            }
        }
        return true;
    }
}",1454816344
Nisarg Patel,Nisarg_Pat,620,3643,java,"class Solution {
    public int minZeroArray(int[] nums, int[][] queries) {
        int n = nums.length;
        int l = 0;
        int r = queries.length;
        int min = Integer.MAX_VALUE;
        while(l<=r) {
            int mid = (l+r)/2;
            boolean possible = possible(nums, queries, mid);
            //System.out.println(l+"" ""+r+"" ""+mid+"" ""+possible);
            if(possible) {
                min = Math.min(min, mid);
                r = mid-1;
            } else {
                l = mid+1;
            }
        }
        return min == Integer.MAX_VALUE ? -1 : min;
    }

    public boolean possible(int[] nums, int[][] queries, int k) {
        int n = nums.length;
        int[] lazySum = new int[n+1];
        for(int i=0;i<k;i++) {
            lazySum[queries[i][0]] += queries[i][2];
            lazySum[queries[i][1]+1] -= queries[i][2];
        }
        if(lazySum[0] < nums[0]) {
            return false;
        }
        for(int i=1;i<n;i++) {
            lazySum[i] += lazySum[i-1];
            if(lazySum[i] < nums[i]) {
                return false;
            }
        }
        return true;
    }
}",1454837064
princeraj847211,princeraj847211,623,3616,cpp,"class Solution {
public:
    bool simulate(vector<int>& nums, int pos, bool goRight) {
        vector<int> temp = nums;
        int n = nums.size();
        
        while (pos >= 0 && pos < n) {
            if (temp[pos] == 0) {
                if (goRight) pos++;
                else pos--;
            } else {
                temp[pos]--;
                goRight = !goRight;
                if (goRight) pos++;
                else pos--;
            }
        }
        
        for (int x : temp) {
            if (x != 0) return false;
        }
        return true;
    }
    
    int countValidSelections(vector<int>& nums) {
        int count = 0;
        int n = nums.size();
        
        for (int i = 0; i < n; i++) {
            if (nums[i] == 0) {
                count += simulate(nums, i, true);
                count += simulate(nums, i, false);
            }
        }
        
        return count;
    }
};",1454806558
princeraj847211,princeraj847211,623,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        vector<long long> coverage(n + 1, 0);
        
        for (const auto& query : queries) {
            int left = query[0];
            int right = query[1];
            
            coverage[left]++;
            coverage[right + 1]--;
        }
        
        for (int i = 1; i < n; i++) {
            coverage[i] += coverage[i - 1];
        }
        
        for (int i = 0; i < n; i++) {
            if (nums[i] > coverage[i]) {
                return false;
            }
        }
        return true;
    }
};",1454810116
princeraj847211,princeraj847211,623,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int maxNum = 0;
        bool allZero = true;
        for (int num : nums) {
            maxNum = max(maxNum, num);
            if (num) allZero = false;
        }
        if (allZero) return 0;
        
        int n = nums.size(), q = queries.size();
        int left = 1, right = q;
        
        while (left <= right) {
            int mid = left + (right - left) / 2;
            vector<long long> decrements(n, 0);
            
            for (int i = 0; i < mid; i++) {
                int l = queries[i][0], r = queries[i][1], val = queries[i][2];
                decrements[l] += val;
                if (r + 1 < n) decrements[r + 1] -= val;
            }
            
            bool possible = true;
            long long curr = 0;
            
            for (int i = 0; i < n; i++) {
                curr += decrements[i];
                if (nums[i] > curr) {
                    possible = false;
                    break;
                }
            }
            
            if (possible) right = mid - 1;
            else left = mid + 1;
        }
        
        return left > q ? -1 : left;
    }
};",1454822716
minamego001,minamego001,624,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int ans = 0;
        for(int i = 0 ; i<nums.size(); ++i) {
            if(nums[i] != 0) continue;
            for(int j = -1; j<=1; ++j) {
                if(j == 0) continue;
                vector<int>tmp = nums;
                int x = i;
                int a = j;
                while(x>= 0 && x < nums.size()) {
                    if(tmp[x] == 0) x += a;
                    else {
                        tmp[x]--;
                        a*=-1;
                        x += a;
                    }
                }
                bool f = 1;
                for(auto m : tmp) if(m != 0) {f = 0; break;}
                if(f) ans++;
            }
        }
        return ans;
    }
};",1454808186
minamego001,minamego001,624,3639,cpp,"class Solution {
public:
    int ans[100001];
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        for(auto q : queries) {
            ans[q[0]]++;
            ans[q[1]+1]--;
        }
        for(int i = 0 ; i < nums.size(); ++i) {
            if(i) ans[i] += ans[i-1];
            if(nums[i] > ans[i]) return 0;
        }
        return 1;
    }
};",1454810185
minamego001,minamego001,624,3643,cpp,"class Solution {
public:
    int ans[100001];
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int l = 0, r = queries.size();
        bool exist = 0;
        while (l < r) {
            int mid = l + (r - l) / 2;
            memset(ans, 0, sizeof(ans));
            for (int i = 0; i < mid; ++i) {
                auto q = queries[i];
                ans[q[0]] += q[2];
                ans[q[1] + 1] -= q[2];
            }
            bool f = 1;
            for (int i = 0; i < nums.size(); ++i) {
                if (i)
                    ans[i] += ans[i - 1];
                if (nums[i] > ans[i]) {
                    f = 0;
                    break;
                }
            }
            if (f) {
                exist = 1;
                r = mid;
            } else {
                l = mid + 1;
            }
        }
        memset(ans, 0, sizeof(ans));
        for (int i = 0; i < r; ++i) {
            auto q = queries[i];
            ans[q[0]] += q[2];
            ans[q[1] + 1] -= q[2];
        }
        bool f = 1;
        for (int i = 0; i < nums.size(); ++i) {
            if (i)
                ans[i] += ans[i - 1];
            if (nums[i] > ans[i]) {
                f = 0;
                break;
            }
        }
        return f ? r : -1;
    }
};",1454822723
bigbooom,bigbooom,625,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int c = 0;
        for(int i=0;i<nums.size();++i) {
            if(!nums[i]) {
                for(int j=0;j<2;++j) {
                    vector<int> v = nums;
                    int x = i;
                    int d = j;
                    set<int> s;
                    for(int k=0;k<v.size();++k) if(!v[k]) s.insert(k);
                    while(~x&&x<v.size()&&s.size()<v.size()) {
                        if(v[x]) {
                            --v[x];
                            d = 1-d;
                        } 
                        if(!v[x]) s.insert(x);
                        if(d) ++x;
                        else --x;
                    }
                    c += s.size()==v.size();
                }
            }
        } return c;
    }
};",1454821714
bigbooom,bigbooom,625,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        vector<int> d(nums.size()+1);
        int x = 0;
        for(const auto&e:queries) {
            --d[e[0]];
            ++d[e[1]+1];
        } for(int i=0;i<nums.size();++i) {
            x += d[i];
            if(nums[i]+x>0) return 0;
        } return 1;
    }
};",1454825744
bigbooom,bigbooom,625,3643,cpp,"class Solution {
public:
    bool f(const int& k, const vector<int>& nums, const vector<vector<int>>& queries) {
        vector<int> d(nums.size()+1);
        int x = 0;
        for(int i=0;i<k;++i) {
            d[queries[i][0]] -= queries[i][2];
            d[queries[i][1]+1] += queries[i][2];
        } for(int i=0;i<nums.size();++i) {
            x += d[i];
            if(nums[i]+x>0) return 0;
        } return 1;
    }
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int l = 0, h = queries.size()+1;
        while(l<h) {
            int m = l+(h-l)/2;
            if(f(m, nums, queries)) h = m;
            else l = m+1;
        } 
        return l>queries.size()?-1:l;
    }
};",1454837311
Biplab Roy,Biplabroy,626,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int n = nums.size();
        vector<int> leftSum(n, 0), rightSum(n, 0);
        leftSum[0] = nums[0];
        for(int i = 1; i < n; i++) leftSum[i] = leftSum[i - 1] + nums[i];
        rightSum[n - 1] = nums[n - 1];
        for(int i = n - 2; i >= 0; i--) rightSum[i] = rightSum[i + 1] + nums[i];

        int ans = 0;
        for(int i = 0; i < n; i++) {
            if(nums[i] == 0 && leftSum[i] == rightSum[i]) ans += 2;
            else if(nums[i] == 0 && abs(leftSum[i] - rightSum[i]) == 1) ans += 1;
        }
        return ans;
    }
};",1454810844
Biplab Roy,Biplabroy,626,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        vector<int> dp(n + 1, 0);
        for(auto &query : queries) {
            int l = query[0], r = query[1];
            dp[l]++, dp[r + 1]--;
        }
        for(int i = 1; i < n; i++) dp[i] += dp[i - 1];
        for(int i = 0; i < n; i++) {
            if(nums[i] - dp[i] > 0) return false;
        }
        return true;
    }
};",1454818083
Biplab Roy,Biplabroy,626,3643,cpp,"class Solution {
public:

    bool possibleSolution(int end, vector<vector<int>>& queries, vector<int>& nums) {
        int n = nums.size();
        vector<int> dp(n + 1, 0);
        
        for(int i = 0; i <= end; i++) {
            auto &query = queries[i];
            int l = query[0], r = query[1], val = query[2];
            dp[l] += val;
            dp[r + 1] -= val;
        }
        
        for(int i = 1; i < n; i++) dp[i] += dp[i - 1];
        for(int i = 0; i < n; i++) {
            if(nums[i] - dp[i] > 0) return false;
        }
        return true;
    }

    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        long long sum = accumulate(nums.begin(), nums.end(), 0ll);
        if(sum == 0) return 0;
        int low = 0, high = queries.size() - 1;
        int ans = -1;
        
        while(low <= high) {
            int mid = (low + high) / 2;
            if(possibleSolution(mid, queries, nums)) {
                ans = mid;
                high = mid - 1;
            } else {
                low = mid + 1;
            }
        }

        return ans == -1 ? -1 : ans + 1;
    }
};",1454829887
MDai99,MDai99,627,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int total = 0;
        for (int i = 0; i < nums.size(); ++i) {
            total += nums[i];
        }

        int curr = 0;
        int complement;
        int ret = 0;
        for (int i = 0; i < nums.size(); ++i) {
            curr += nums[i];
            complement = total - curr;
            if (nums[i] == 0) {
                            if (complement == curr) ret += 2;
            if (abs(curr - complement) == 1) {
                ret += 1;
            }
            }

        }
        return ret;
    }
};",1454811457
MDai99,MDai99,627,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        vector<int> summarized_queries(nums.size(), 0);
        for (vector<int> query: queries) {
            summarized_queries[query[0]] += 1;
            if (query[1] < nums.size() - 1) {
                summarized_queries[query[1] + 1] -= 1;
            }
        }
        //std::cout << ""first"" << endl;
        vector<int> increments(nums.size(), 0);
        for (int i = 0; i < nums.size(); ++i) {
            increments[i] = increments[std::max(0, i-1)] + summarized_queries[i];
        }
                //std::cout << ""first"" << endl;

        for (int i = 0; i < nums.size(); ++i) {
            if (nums[i] > increments[i]) return false;
        }
        return true;
    }
};",1454821363
MDai99,MDai99,627,3643,cpp,"class Solution {
public:

    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries, int k) {
        vector<int> summarized_queries(nums.size(), 0);
        for (int i = 0; i < k; ++i) {
            summarized_queries[queries[i][0]] += queries[i][2];
            if (queries[i][1] < nums.size() - 1) {
                summarized_queries[queries[i][1] + 1] -= queries[i][2];
            }
        }
        vector<int> increments(nums.size(), 0);
        for (int i = 0; i < nums.size(); ++i) {
            increments[i] = increments[std::max(0, i-1)] + summarized_queries[i];
        }

        for (int i = 0; i < nums.size(); ++i) {
            if (nums[i] > increments[i]) return false;
        }
        return true;
    }

    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int lo = 0;
        int hi = queries.size();
        if (!isZeroArray(nums, queries, hi)) return -1;
        while (lo < hi) {
            int mid = (lo + hi)/2;
            if (isZeroArray(nums, queries, mid)) {
                hi = mid;
            }
            else {
                lo = mid + 1;
            }
        }
        return hi;
    }
};",1454837354
js kao,kjs314,628,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        n = len(nums)
        prefix, suffix = [0] * n, [0] * n
        prefix[0] = nums[0]
        suffix[n-1] = nums[n-1]
        for i in range(1, n):
            prefix[i] = prefix[i -1] + nums[i]
        for i in range(n -2, -1, -1):
            suffix[i] = suffix[i +1] + nums[i]
        
        res = 0
        for i in range(n):
            if nums[i] == 0:
                if prefix[i] == suffix[i]:
                    res += 2
                elif abs(prefix[i] - suffix[i]) == 1:
                    res += 1
        return res",1454813119
js kao,kjs314,628,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        # [1, 0, 0]
        
        # [1, 1, 0, -1]
        # [1, 2, 2, 1]
        n = len(nums)
        accu = [0] * (n +1)
        for l, r in queries:
            accu[l] += 1
            accu[r +1] -= 1
        
        for i in range(1, len(accu)):
            accu[i] += accu[i -1]
        
        for i in range(n):
            if accu[i] < nums[i]:
                return False
        return True",1454822251
js kao,kjs314,628,3643,python3,"class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        
        def check(k):
            n = len(nums)
            accu = [0] * (n +1)
            # print(k)
            for i in range(k):
                l, r, v = queries[i]
                accu[l] += v
                accu[r +1] -= v
            
            # print(accu)
            for i in range(1, len(accu)):
                accu[i] += accu[i -1]
        
            for i in range(n):
                if accu[i] < nums[i]:
                    return False
            return True
        
        l, r = 0, len(queries)
        while l <= r:
            # print(""{} {}"".format(l, r))
            mid = (l + r) //2
            if check(mid):
                r = mid -1
            else:
                l = mid +1
        if l == len(queries) +1:
            return -1
        else:
            return l",1454837474
nghia0510,phantrongnghia510,629,3616,python,"class Solution(object):
    def countValidSelections(self, nums):
        n = len(nums)
        count = 0
        zeros = [i for i, v in enumerate(nums) if v == 0]

        def simulate(curr, s, d):
            i, curr_d = s, d

            while 0 <= i < n:
                if curr[i] == 0:
                    i += curr_d
                elif curr[i] > 0:
                    curr[i] -= 1
                    curr_d *= -1
                    i += curr_d
            return all(x == 0 for x in curr)

            
        for s in zeros:
            for d in [1, -1]:
                curr = nums[::]
                if simulate(curr, s, d):
                    count += 1
        return count
        ",1454814668
nghia0510,phantrongnghia510,629,3639,python,"class Solution(object):
    def isZeroArray(self, nums, queries):
        n, q = len(nums), len(queries)
        
        delta = [0] * (n + 1)
        for i in range(q):
            l, r = queries[i]
            delta[l] += 1
            if r + 1 < n:
                delta[r + 1] -= 1

        prefix = 0
        for i in range(n):
            prefix += delta[i]
            if prefix < nums[i]: return False
                
        return True
            

        
        
        ",1454837483
nghia0510,phantrongnghia510,629,3643,python,"class Solution(object):
    def minZeroArray(self, nums, queries):
        n, q = len(nums), len(queries)
        def valid(mid):
            delta = [0] * (n + 1)
            for i in range(mid):
                l, r, v = queries[i]
                delta[l] += v
                if r + 1 < n:
                    delta[r + 1] -= v

            prefix = 0
            for i in range(n):
                prefix += delta[i]
                if prefix < nums[i]: return False
                    
            return True
            

        l, r, res = 1, q, -1
        if all(x == 0 for x in nums): return 0

        while l <= r:
            m = (l + r) >> 1
            if valid(m):
                res = m
                r = m - 1
            else:
                l = m + 1
                
        return res
        ",1454833008
Rajan Keshari,rajankeshari,630,3616,cpp,"class Solution {
public:
    bool ok(int i,int j,int n,vector<int>&nums){
        if(i<0 || i>=n){
            for(int x:nums){
                if(x!=0) return false;
            }
            return true;
        }
        if(nums[i]==0){
            if(j==0) i--;
            else i++;
        }
        else{
            nums[i]--;
            if(j==0) i++;
            else i--;
            j^=1;
        }
        return ok(i,j,n,nums);
    }
    int countValidSelections(vector<int>& nums) {
        int n=nums.size();
        int ans=0;
        for(int i=0;i<n;i++){
            for(int j=0;j<2;j++){
                vector<int> tmp=nums;
                if(nums[i]==0) ans+=ok(i,j,n,tmp);
            }
        }
        return ans;
    }
};",1454818122
Rajan Keshari,rajankeshari,630,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n=nums.size();
        vector<int> a(n);
        for(auto q:queries){
            a[q[0]]++;
            if(q[1]+1<n) a[q[1]+1]--;
        }
        for(int i=1;i<n;i++) a[i]+=a[i-1];
        for(int i=0;i<n;i++){
            if(a[i]<nums[i]) return false;
        }
        return true;
    }
};",1454824583
Rajan Keshari,rajankeshari,630,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int allz=1;
        for(auto x:nums) allz&=(x==0);
        if(allz) return 0;
        int n=nums.size();
        int m=queries.size();
        int l=0,r=m-1,ans=-1;
        while(l<=r){
            int mid=(l+r)>>1;
            vector<int> a(n);
            for(int i=0;i<=mid;i++){
                vector<int> q=queries[i];
                a[q[0]]+=q[2];
                if(q[1]+1<n) a[q[1]+1]-=q[2];
            }
            for(int i=1;i<n;i++) a[i]+=a[i-1];
            bool ok=1;
            for(int i=0;i<n;i++){
                if(a[i]<nums[i]) ok=0;
            }
            if(ok){
                ans=mid+1;
                r=mid-1;
            }
            else l=mid+1;
        }
        return ans;
    }
};",1454837535
Chandraveer Singh,imveer2003,631,3616,cpp,"class Solution {
public:
    int helper(int i, int dx, vector<int> nums){
        int n = nums.size();
        while(true){
            int ni = i + dx;
            if(nums[i] == 0){
                if(ni >= 0 && ni < n) i = ni;
                else break;
            }else{
                nums[i]--;
                if(dx == -1) dx = 1;
                else dx = -1;
                ni = i + dx;
                i = ni;
            }
        }
        for(int i = 0; i < n; ++i){
            if(nums[i] != 0) return 0;
        }
        return 1;
    }
    int countValidSelections(vector<int>& nums) {
        int n = nums.size();
        int ans = 0;
        for(int i = 0; i < n; ++i){
            if(nums[i] == 0){
                ans += helper(i,-1,nums);
                ans += helper(i,1,nums);
            }
        }
        return ans;
    }
};",1454809737
Chandraveer Singh,imveer2003,631,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        vector<int> pref(n+2);
        for(auto i: queries){
            pref[i[0]]++;
            pref[i[1]+1]--;
        }
        for(int i = 1; i < n + 2; ++i) pref[i] += pref[i-1];
        for(int i = 0; i < n; ++i){
            if(pref[i] < nums[i]) return false;
        }
        return true;
    }
};",1454822240
Chandraveer Singh,imveer2003,631,3643,cpp,"class Solution {
public:
    int helper(int mid, vector<int> &nums, vector<vector<int>> &q){
        int n = nums.size();
        vector<long long> pref(n+2);
        for(int i = 0; i < mid; ++i){
            pref[q[i][0]] += 1LL*q[i][2];
            pref[q[i][1] + 1] -= 1LL*q[i][2];
        }
        for(int i = 1; i < n + 2; ++i) pref[i] += pref[i-1];
        for(int i = 0; i < n; ++i){
            if(pref[i] < nums[i]) return false;
        }
        return true;
    }
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        int k = queries.size();
        int low = 0, high = k;
        int ans = -1;
        while(low <= high){
            int mid = (low + high)/2;
            if(helper(mid,nums,queries)){
                ans = mid;
                high = mid - 1;
            }else{
                low = mid + 1;
            }
        }
        return ans;
    }
};",1454844908
Sourabh,gamer37,634,3616,cpp,"void solve1(int i, bool f, vector<int> &v)
{
    if(i<0 || i>=v.size())
        return;
    
    if(v[i])
        v[i]--,f=!f;
    
    if(f)
        solve1(i+1,f,v);
    else
        solve1(i-1,f,v);
}

bool solve(int st, bool f, vector<int> &nums)
{
    vector<int> v(nums.begin(),nums.end());
    int n=v.size(),i,j;
    
    solve1(st,f,v);
    for(i=0;i<n;i++)
    {
        if(v[i]!=0)
            return 0;
    }
    return 1;
}

class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int i,j,n=nums.size(),cnt=0;
        for(i=0;i<n;i++)
        {
            if(nums[i]==0)
            {
                if(solve(i,0,nums))
                    cnt++;
                if(solve(i,1,nums))
                    cnt++;
            }
        }
        return cnt;
    }
};",1454821711
Sourabh,gamer37,634,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n=nums.size(),m=queries.size(),i,j;
        vector<int> pre(n+1);
        for(auto x:queries)
        {
            pre[x[0]]++;
            pre[x[1]+1]--;
        }
        for(i=1;i<=n;i++)
            pre[i]=pre[i-1]+pre[i];
        for(i=0;i<n;i++)
        {
            if(nums[i]>pre[i])
                return 0;
        }
        return 1;
    }
};",1454829573
Sourabh,gamer37,634,3643,cpp,"bool solve(int mid, vector<int>& nums, vector<vector<int>>& queries)
{
    int n=nums.size(),i;
    vector<int> pre(n+1);
    for(i=0;i<mid;i++)
    {
        pre[queries[i][0]]+=queries[i][2];
        pre[queries[i][1]+1]-=queries[i][2];
    }
    for(i=1;i<=n;i++)
        pre[i]=pre[i-1]+pre[i];
    for(i=0;i<n;i++)
    {
        if(nums[i]>pre[i])
            return 0;
    }
    return 1;
}

class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n=nums.size(),m=queries.size(),i,j,f=0;
        for(i=0;i<n;i++)
        {
            if(nums[i])
                f=1;
        }
        if(f==0)
            return 0;
        int low=1,high=m,mid=(low+high)/2,ans=m+1;
        while(low<=high)
        {
            if(solve(mid,nums,queries))
                ans=mid,high=mid-1;
            else
                low=mid+1;
            mid=(low+high)/2;
        }
        if(ans==m+1)
            ans=-1;
        return ans;
    }
};",1454844953
HustleAgainstOdds,HustleAgainstOdds,635,3616,java,"class Solution {
    public int countValidSelections(int[] nums) {
        int n = nums.length, res = 0;
        for (int i = 0; i < n; ++i) {
            if (nums[i] != 0) continue;
            int leftSum = 0, rightSum = 0;
            for (int j = 0; j < i; ++j) {
                leftSum += nums[j];
            }
            for (int j = i + 1; j < n; ++j) {
                rightSum += nums[j];
            }
            if (leftSum == rightSum) res += 2;
            else if (Math.abs(leftSum - rightSum) == 1) res += 1;
        }
        return res;
    }
}
",1454830159
HustleAgainstOdds,HustleAgainstOdds,635,3639,java,"class Solution {
    public boolean isZeroArray(int[] nums, int[][] queries) {
        int n = nums.length;
        int[] diff = new int[n];
        for (int[] each : queries) {
            int l = each[0], r = each[1];
            diff[l]++;
            if (r != n - 1) diff[r + 1]--;
        }
        for (int i = 1; i < n; ++i) diff[i] += diff[i - 1];
        for (int i = 0; i < n; ++i) {
            int currVal = nums[i] - diff[i];
            if (currVal > 0) return false;
        }
        return true;
    }
}",1454809879
HustleAgainstOdds,HustleAgainstOdds,635,3643,java,"class Solution {
    public int minZeroArray(int[] nums, int[][] queries) {
        int n = queries.length;
        int lo = 0, hi = n, res = -1;
        while (lo <= hi) {
            int mid = (lo + hi) >> 1;
            if (check(nums, queries, mid)) {
                res = mid;
                hi = mid - 1;
            } else {
                lo = mid + 1;
            }
        }
        return res;
    }

    private boolean check(int[] a, int[][] queries, int k) {
        int n = a.length;
        int[] diff = new int[n];
        for (int i = 0; i < k; ++i) {
            diff[queries[i][0]] += queries[i][2];
            if (queries[i][1] != n - 1) diff[queries[i][1] + 1] -= queries[i][2];
        }
        for (int i = 1; i < n; ++i) diff[i] += diff[i - 1];
        for (int i = 0; i < n; ++i) {
            if (a[i] > diff[i]) return false;
        }
        return true;
    }
}",1454821091
usib2787,usib2787,636,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int sum = 0;
        for(auto&e:nums){
            sum+=e;
            
        }
        int ans=0;
        int x = 0;
        for(auto&e:nums){
            if(e==0){
                if(x==sum/2||x==(sum+1)/2){
                    if(sum%2==0){
                        ans+=2;
                    }
                    else{
                        ans+=1;
                    }
                }
            }
            x+=e;
        }
        return ans;
    }
};",1454808830
usib2787,usib2787,636,3639,cpp,"class Solution {
public:
vector<int> countRanges(int n, vector<vector<int>>& ranges) {
    vector<int> result(n + 1, 0);  
    for (auto& range : ranges) {
        int l = range[0];
        int r = range[1];

        result[l] += 1;
        if (r + 1 < n) {
            result[r + 1] -= 1;
        }
    }

    for (int i = 1; i < n; ++i) {
        result[i] += result[i - 1];
    }
    result.pop_back();

    return result;
}
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        vector<int>op = countRanges(nums.size(), queries);
        for(int i=0;i<nums.size();i++){
            if(op[i]<nums[i]){
                return false;
            }
        }
        return true;
    }
};",1454820905
usib2787,usib2787,636,3643,cpp,"class Solution {
public:
bool countRanges(int n,vector<int>&nums, vector<vector<int>>& ranges, int x) {
    vector<int> result(n + 1, 0);  
    for (int i=0;i<x;i++) {
        vector<int>range= ranges[i];
        int l = range[0];
        int r = range[1];

        result[l] += range[2];
        if (r + 1 < n) {
            result[r + 1] -= range[2];
        }
    }

    for (int i = 1; i < n; ++i) {
        result[i] += result[i - 1];
    }
    result.pop_back();

    for(int i=0;i<nums.size();i++){
            if(result[i]<nums[i]){
                return false;
            }
        }
    return true;
}
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int l = 0;
        int r = queries.size();
        int ans=-1;
        while(l<=r){
            int m = (l+r)/2;
            if(countRanges(nums.size(), nums, queries, m)){
                ans=m;
                r=m-1;
            }
            else{
                l=m+1;
            }
            
        }
        return ans;
        
        
    }
};",1454837621
Mayukh Banerjee,big_M_13,637,3616,cpp,"class Solution {
public:
    static bool chk(vector<int>& nums, int st, int d) {
        int n = nums.size();
        vector<int> temp(nums);
        int curr = st;
        while (curr >= 0 && curr < n) {
            if (temp[curr] == 0) {
                curr += d;
            } else {
                temp[curr]--;
                d = -d;
                curr += d;
            }
        }
        for (int x : temp) {
            if (x != 0) return false;
        }
        return true;
    }

    int countValidSelections(vector<int>& nums) {
        int n = nums.size();
        int ans = 0;
        for (int i = 0; i < n; i++) {
            if (nums[i] == 0) {
                ans += chk(nums, i, 1);
                ans += chk(nums, i, -1);
            }
        }
        return ans;
    }
};
",1454808986
Mayukh Banerjee,big_M_13,637,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& q) {
        int n=nums.size();
        nums.push_back(0);
        vector<int> p(n+1);
        for(auto x:q)
        {
            int l=x[0];
            int r=x[1];
            p[l]-=1;
            p[r+1]+=1;
        }
        for(int i=1;i<n;i++)
        {
            p[i]+=p[i-1];
        }
        for(int i=0;i<n;i++)
        {
            if(p[i]+nums[i]>0) return false;
        }
        return true;
    }
};",1454823138
Mayukh Banerjee,big_M_13,637,3643,cpp,"class Solution {
public:
    bool chk(vector<int>& nums, vector<vector<int>>& q,int k) {
        int n=nums.size();
        nums.push_back(0);
        vector<int> p(n+1);
        for(int i=0;i<k;i++)
        {
            auto x=q[i];
            int l=x[0];
            int r=x[1];
            int v=x[2];
            p[l]-=v;
            p[r+1]+=v;
        }
        for(int i=1;i<n;i++)
        {
            p[i]+=p[i-1];
        }
        for(int i=0;i<n;i++)
        {
            if(p[i]+nums[i]>0) return false;
        }
        return true;
    }
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n=queries.size();
        if(!chk(nums,queries,n)) return -1;
        int low=0,high=n;
        while(low<=high)
        {
            int mid=low+(high-low)/2;
            if(chk(nums,queries,mid))
            {
                high=mid-1;
            }
            else
            {
                low=mid+1;
            }
        }
        return low;
    }
};",1454837623
Nishant Singh,nishant_7366,638,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int sum=0;
        for(auto i:nums)
            {
                sum+=i;
            }
        int curr=0;
        int sol=0;
        for(auto i:nums)
            {
                curr+=i;
                sum-=i;
                if(curr==sum && i==0)
                    sol+=2;
                else if(abs(curr-sum)==1 && i==0)
                    sol++;
            }
        return sol;
    }
};",1454809249
Nishant Singh,nishant_7366,638,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n=nums.size();
        vector<int> freq(n+1,0);
        for(auto i:queries)
            {
                freq[i[0]]+=1;
                freq[i[1]+1]-=1;
            }
        int curr=0;
        for(int i=0;i<n;i++)
            {
                curr+=freq[i];
                freq[i]=curr;
            }
        for(int i=0;i<n;i++)
            {
                if(freq[i]<nums[i])
                    return false;
            }
        return true;
    }
};",1454812681
Nishant Singh,nishant_7366,638,3643,cpp,"class Solution {
public:
    bool check(vector<int>&nums,vector<vector<int>>&queries,int mid)
{
    int n=nums.size();
    vector<int> freq(n+1,0);
    for(int i=0;i<=mid;i++)
        {
            freq[queries[i][0]]+=queries[i][2];
            freq[queries[i][1]+1]-=queries[i][2];
        }
    int curr=0;
    for(int i=0;i<n;i++)
        {
            curr+=freq[i];
            freq[i]=curr;
        }
    for(int i=0;i<n;i++)
        {
            if(freq[i]<nums[i])
                return false;
            
        }
    return true;
}
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n=queries.size();
        int lo=0;
        int hi=n-1;
        int z=0;
        for(auto i:nums)
            {
                if(i==0)
                    z++;
            }
        if(z==nums.size())
            return 0;

        int ans=-1;
        while(lo<=hi)
            {
                int mid=lo+(hi-lo)/2;
                if(check(nums,queries,mid))
                {
                    ans=mid;
                    hi=mid-1;
                }
                else
                {
                    lo=mid+1;
                }
            }
        return ans==-1?-1:ans+1;
    }
};",1454830195
amez,amezzz,639,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        pre = list(accumulate(nums, initial=0))
        n = len(nums)
        ans = 0
        for i, v in enumerate(nums):
            if v == 0:
                if abs(pre[i] - pre[0] - (pre[n] - pre[i + 1])) == 0:
                    ans += 2
                elif abs(pre[i] - pre[0] - (pre[n] - pre[i + 1])) == 1:
                    ans += 1
        return ans
        ",1454812244
amez,amezzz,639,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        diff = [nums[0]]
        for a, b in pairwise(nums):
            diff.append(b - a)
        n = len(diff)
        for a, b in queries:
            diff[a] -= 1
            if b + 1 < n:
                diff[b + 1] += 1
        ans = list(accumulate(diff))
        return all(a <= 0 for a in ans)
        ",1454822561
amez,amezzz,639,3643,python3,"class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        def check(i) -> bool:
            diff = [nums[0]]
            for a, b in pairwise(nums):
                diff.append(b - a)
            for j in range(i):
                a, b, v = queries[j]
                diff[a] -= v
                if b + 1 < m:
                    diff[b + 1] += v
            ans = list(accumulate(diff))
            return all(a <= 0 for a in ans)

        n = len(queries)
        m = len(nums)
        l, r = 0, n
        while l <= r:
            mid = (l + r) // 2
            if check(mid):
                r = mid - 1
            else:
                l = mid + 1
        return r + 1 if r + 1 <= n else -1
        ",1454837672
nguyenducthinhdl,nguyenducthinhdl,640,3616,cpp,"class Solution {
    int check(vector<int>& nums, int i) {
        int n = nums.size();
        int ans = 0;
        for (int g = -1; g <= 1; g += 2) {
            vector<int> a(n);
            for (int k = 0; k < n; ++k) {
                a[k] = nums[k];
            }
            
            int j = i, d = g;
            while (0 <= j && j < n) {
                if (a[j] == 0) {
                    j += d;
                } else if (a[j] > 0) {
                    a[j]--;
                    d *= -1;
                    j += d;
                }
            }

            bool goal = true;
            for (int i = 0; i < n; ++i) {
                if (a[i] != 0) {
                    goal = false;
                    break;
                }
            }

            if (goal) ans++;
        }

        return ans;
    }

public:
    int countValidSelections(vector<int>& nums) {
        int n = nums.size(), ans = 0;
        for (int i = 0; i < n; ++i) {
            if (nums[i] == 0) {
                ans += check(nums, i);
               
            }
        }

        return ans;
    }
};",1454817501
nguyenducthinhdl,nguyenducthinhdl,640,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        vector<int> f(n, 0);
        for (auto& q: queries) {
            f[q[0]]++;
            if (q[1] < n - 1) {
                f[q[1] + 1]--;
            }
        }

        int s = 0;
        for (int i = 0; i < n; ++i) {
            s += f[i];
            f[i] = s;
            if (f[i] < nums[i]) return false;
        }

        return true;
    }
};",1454828797
nguyenducthinhdl,nguyenducthinhdl,640,3643,cpp,"class Solution {
    bool check(vector<int>& nums, vector<vector<int>>& queries, int k) {
        
        int n = nums.size();
        vector<int> f(n, 0);
        for (int i = 0; i < k; ++i) {
            auto q = queries[i];
            f[q[0]] += q[2];
            if (q[1] < n - 1) {
                f[q[1] + 1] -= q[2];
            }
        }

        int s = 0;
        for (int i = 0; i < n; ++i) {
            s += f[i];
            f[i] = s;
            if (f[i] < nums[i]) return false;
        }

        return true;
    }
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size(), m = queries.size();
        int lo = 0, hi = m;
        if (!check(nums, queries, m)) {
            return -1;
        }

        while (lo < hi) {
            int med = lo + (hi - lo)/2;
            if (check(nums, queries, med)) {
                hi = med;
            } else {
                lo = med + 1;
            }
        }
        
        return lo;
    }
};",1454845040
Aditya Todi,adityatodi97,642,3616,java,"class Solution {
    public int countValidSelections(int[] nums) {
        int n = nums.length;
        int[] prefixSum = new int[n];
        int[] suffixSum = new int[n];

        for(int i=1; i<n; i++) {
            prefixSum[i] = prefixSum[i-1] + nums[i-1];
        }

        for(int i=n-2; i>=0; i--) {
            suffixSum[i] = suffixSum[i+1] + nums[i+1];
        }
        
        int valid = 0;
        for(int i=0; i<n; i++) {
            if (nums[i] == 0) {
                if (prefixSum[i] == suffixSum[i]) {
                    valid += 2;
                } else if (Math.abs(prefixSum[i] - suffixSum[i]) == 1) {
                    valid += 1;
                }
            }
        }

        return valid;
    }
}",1454811787
Aditya Todi,adityatodi97,642,3639,java,"class Solution {
    public boolean isZeroArray(int[] nums, int[][] queries) {
        int n = nums.length;
        Map<Integer, Integer> deltaMap = new HashMap<>();
        for(int[] q: queries) {
            deltaMap.put(q[0], deltaMap.getOrDefault(q[0], 0) + 1);
            deltaMap.put(q[1] + 1, deltaMap.getOrDefault(q[1] + 1, 0) - 1);
        }

        int delta = 0;
        for(int i=0; i<n; i++) {
            delta += deltaMap.getOrDefault(i, 0);
            if (delta < nums[i]) {
                return false;
            }
        }

        return true;
    }
}",1454819823
Aditya Todi,adityatodi97,642,3643,java,"class Solution {
    public int minZeroArray(int[] nums, int[][] queries) {
        int q = queries.length;
        if (!isZeroArray(nums, queries, q-1)) {
            return -1;
        }

        int l = -1, r = q - 1;
        while(l < r) {
            int mid = l + (r - l)/2;
            if (isZeroArray(nums, queries, mid)) {
                r = mid;
            } else {
                l = mid + 1;
            }
        }

        return r + 1;
    }

    private boolean isZeroArray(int[] nums, int[][] queries, int limit) {
        int n = nums.length;
        Map<Integer, Integer> deltaMap = new HashMap<>();
        for(int i=0; i<=limit; i++) {
            int[] q = queries[i];
            deltaMap.put(q[0], deltaMap.getOrDefault(q[0], 0) + q[2]);
            deltaMap.put(q[1] + 1, deltaMap.getOrDefault(q[1] + 1, 0) - q[2]);
        }

        int delta = 0;
        for(int i=0; i<n; i++) {
            delta += deltaMap.getOrDefault(i, 0);
            if (delta < nums[i]) {
                return false;
            }
        }

        return true;
    }
}
",1454837774
infinitepotentialmonkey,monkeymonkeybrain,643,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        n = len(nums)
        # you need zeros to be surrounded by values 
        # at each zero you either go left or right
        # you want the sum of values on each side of zero to be equal 
        pfx = [0 for _ in range(n + 1)]
        for i in range(n):
            pfx[i + 1] = pfx[i] + nums[i]
        ans = 0
        for i in range(n):
            if nums[i] == 0:
                left = pfx[i]
                right = pfx[-1] - pfx[i]
                if left + 1 == right:
                    ans += 1
                elif left == right + 1:
                    ans += 1
                elif left == right:
                    ans += 2
        return ans
                ",1454810813
infinitepotentialmonkey,monkeymonkeybrain,643,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        # sweep range -> compare values
        n = len(nums)
        line = [0 for _ in range(n + 1)]
        for l, r in queries:
            line[l] += 1
            line[r + 1] -= 1
        for i in range(n):
            line[i + 1] += line[i]

        works = True
        for i in range(n):
            if nums[i] > line[i]:
                works = False
                break
        return works",1454815275
infinitepotentialmonkey,monkeymonkeybrain,643,3643,python3,"class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        # sweep range -> compare values
        n = len(nums)
        def check(k):
            line = [0 for _ in range(n + 1)]
            for l, r, val in queries[:k]:
                line[l] += val
                line[r + 1] -= val
            for i in range(n):
                line[i + 1] += line[i]
    
            works = True
            for i in range(n):
                if nums[i] > line[i]:
                    works = False
                    break
            return works
        l, r = 0, len(queries)
        ans = -1
        while l <= r:
            mid = (l + r) // 2
            if check(mid):
                ans = mid
                r = mid - 1
            else:
                l = mid + 1
        return ans
        ",1454823197
Xiaoping Hu,xiaoping3418,644,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int n = nums.size(), ret = 0;
        for (int i = 0; i < n; ++i) {
            if (nums[i] != 0) continue;
            int left = 0, right = 0;
            for (int j = 0; j < i; ++j) left += nums[j];
            for (int j = i + 1; j < n; ++j) right += nums[j];
            
            if (abs(left - right) == 0) ret += 2;
            if (abs(left - right) == 1) ret += 1; 
        }
        
        return ret;
    }
};",1454837869
Xiaoping Hu,xiaoping3418,644,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        vector<int> sum(n + 1);
        
        for (auto &q: queries) {
            sum[q[0]] += 1;
            sum[q[1] + 1] -= 1;
        }
        
        int t = 0;
        for (int i = 0; i < n; ++i) {
            t += sum[i];
            if (t < nums[i]) return false;
        }
        
        return true;
    }
};",1454812110
Xiaoping Hu,xiaoping3418,644,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        vector<int> sum(n + 1);
        
        for (auto &q: queries) {
            sum[q[0]] += q[2];
            sum[q[1] + 1] -= q[2];
        }
        
        int t = 0;
        for (int i = 0; i < n; ++i) {
            t += sum[i];
            if (t < nums[i]) return -1;
        }
        
        int l = 0, r = queries.size();
        while (l < r) {
            int m = l + (r - l) / 2;
            sum.assign(n + 1, 0);
            for (int i = 0; i < m; ++i) {
                auto q = queries[i];
                sum[q[0]] += q[2];
                sum[q[1] + 1] -= q[2];
            }
            
            bool good = true; 
            int t = 0;
            for (int i = 0; i < n; ++i) {
                t += sum[i];
                if (t < nums[i]) good = false;
            }
            if (good) r = m;
            else l = m + 1;
        }
        
        return l;
    }
};",1454824914
Abhay Tiwari,deepatiwari048,645,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& v) {
        int n=v.size();
        vector<int> prefix(n+1,0);
        vector<int> suffix(n+2,0);
        for(int i=0;i<n;i++){
            prefix[i+1]=prefix[i]+v[i];
        }
        for(int i=n-1;i>=0;i--){
            suffix[i]=suffix[i+1]+v[i];
        }
        int ans=0;
        for(int i=0;i<n;i++){
            if(v[i]==0&&prefix[i]==suffix[i+1]){
                ans+=2;
            }
            else if(v[i]==0&&prefix[i]==suffix[i+1]+1){
                ans++;
            }
            else if(v[i]==0&&prefix[i]+1==suffix[i+1]){
                ans++;
            }
        }
        return ans;
    }
};",1454810221
Abhay Tiwari,deepatiwari048,645,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n=nums.size();
        vector<int> sweep(n+1,0);
        for(int i=0;i<queries.size();i++){
            sweep[queries[i][0]]++;
            sweep[queries[i][1]+1]--;
        }
        for(int i=1;i<sweep.size();i++){
            sweep[i]+=sweep[i-1];
        }
        int flag=0;
        for(int i=0;i<n;i++){
            if(nums[i]-sweep[i]>0){
                flag=1;
                break;
            }
        }
        return !flag;
    }
};",1454822407
Abhay Tiwari,deepatiwari048,645,3643,cpp,"class Solution {
public:
    int find(vector<int> &nums,vector<vector<int>> &queries,int r){
        int n=nums.size();
        vector<int> sweep(n+1,0);
        for(int i=0;i<r;i++){
            sweep[queries[i][0]]+=queries[i][2];
            sweep[queries[i][1]+1]-=queries[i][2];
        }
        for(int i=1;i<sweep.size();i++){
            sweep[i]+=sweep[i-1];
        }
        int flag=0;
        for(int i=0;i<n;i++){
            if(nums[i]-sweep[i]>0){
                flag=1;
                break;
            }
        }
        return !flag;    
    }
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int low=0,mid,high=queries.size();
        while(high>=low){
            int mid=(low+high)/2;
            if(find(nums,queries,mid)){
                high=mid-1;
            }
            else{
                low=mid+1;
            }
        }
        if(high==queries.size()) return -1;
        return high+1;
    }

};",1454837885
abhi2004iiti,abhi2004iiti,646,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int cnt=0;
        int sum=0;
        int n=nums.size();
        for(int i=0;i<n;i++){
            sum+=nums[i];
        }
        int s=0;
        int ans=0;
        for(int i=0;i<n;i++){
            s+=nums[i];
            if(nums[i]==0){
                if(sum-s==(s+1) || sum-s==(s-1)){
                    ans+=1;
                }else if(sum-s==s){
                    ans+=2;
                }
            }
        }
        return ans;
    }
};",1454813445
abhi2004iiti,abhi2004iiti,646,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& q) {
        int n=nums.size();
        vector<int> v(n,0);
        for(int i=0;i<q.size();i++){
            v[q[i][0]]-=1;
            if(q[i][1]+1>=n){
                continue;
            }
            v[q[i][1]+1]+=1;
        }
        for(int i=1;i<n;i++){
            v[i]+=v[i-1];
        }
        bool ok=true;
        for(int i=0;i<n;i++){
            nums[i]+=v[i];
            nums[i]=max(0,nums[i]);
            if(nums[i]>0){
                ok=false;
            }
        }
        return ok;
    }
};",1454827214
abhi2004iiti,abhi2004iiti,646,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& v, vector<vector<int>>& q) {
        int l=0;
        int r=q.size();
        int n=v.size();
        int ans=1e9;
        while(l<=r){
            int mid=l+(r-l)/2;
            vector<int> v1(n,0);
            for(int i=0;i<mid;i++){
                v1[q[i][0]]-=q[i][2];
                if(q[i][1]+1<n){
                    v1[q[i][1]+1]+=q[i][2];
                }
            }
            for(int i=1;i<n;i++){
                v1[i]+=v1[i-1];
            }
            bool ok=true;
            for(int i=0;i<n;i++){
                if(v[i]+v1[i]<=0){
                    ;
                }else{
                    ok=false;
                    break;
                }
            }
            if(ok){
                ans=min(ans,mid);
                r=mid-1;
            }else{
                l=mid+1;
            }
        }
        if(ans==1e9){
            return -1;
        }
        return ans;
    }
};",1454837893
yllej,yllej,647,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        N = len(nums)

        ans = 0

        for i in range(N):
            if nums[i] != 0:
                continue
            left_sum = 0
            right_sum = 0
            for j in range(i):
                left_sum += nums[j]

            for k in range(i + 1, N):
                right_sum += nums[k]

            if abs(left_sum - right_sum) == 1:
                ans += 1
            elif abs(left_sum - right_sum) == 0:
                ans += 2

        return ans
                ",1454807773
yllej,yllej,647,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        curr = 0

        line_s = defaultdict(int)

        for start, end in queries:
            line_s[start] += 1
            line_s[end + 1] -= 1

        N = len(nums)
        for i in range(N):
            curr += line_s[i]
            if nums[i] > curr:
                return False
        return True",1454811283
yllej,yllej,647,3643,python3,"class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        def fn(index):
            # can we satisfy using only up to [:k] of queries
            line_s = defaultdict(int)

            for i in range(index + 1):
                start, end, val = queries[i]
                line_s[start] += val
                line_s[end + 1] -= val

            curr = 0
            for i in range(N):
                curr += line_s[i]
                if nums[i] > curr:
                    return False
            return True

        # NlogK + K + N
        if nums == [0] * len(nums):
            return 0

        # for each num, need to find earliest query index that this can be made 
        N = len(nums)
        ans = float(""inf"")
        l, r = 0, len(queries) - 1
        while l <= r:
            mid = l + (r - l) // 2
            if fn(mid): # mid is index of queries
                ans = mid + 1
                r = mid - 1
            else:
                l = mid + 1
        return ans if ans != float(""inf"") else -1",1454837955
sanket871,sanket871,649,3616,cpp,"class Solution {
private:
bool simulate(vector<int> nums, int curr, int direction) {
    int n = nums.size();

    while (curr >= 0 && curr < n) {
        if (nums[curr] == 0) {
            curr += direction; 
        } else {
            nums[curr]--; 
            direction *= -1; 
            curr += direction; 
        }
    }

    for (int num : nums) {
        if (num != 0) {
            return false;
        }
    }
    return true;
}
public:
    int countValidSelections(vector<int>& nums) {
        int n = nums.size();
        int validCount = 0;

    
        for (int i = 0; i < n; ++i) {
            if (nums[i] == 0) {
                if (simulate(nums, i, 1)) {
                    validCount++;
                }
                if (simulate(nums, i, -1)) {
                    validCount++;
                }
            }
        }
    
        return validCount;
    }
};",1454812182
sanket871,sanket871,649,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
    vector<int> diff(n + 1, 0); // Difference array for range updates

    // Process each query
    for (const auto& query : queries) {
        int l = query[0];
        int r = query[1];

        diff[l]--; // Start decrementing at index l
        if (r + 1 < n) {
            diff[r + 1]++; // Stop decrementing after index r
        }
    }

    // Apply the difference array to the original nums array
    int currentDecrement = 0;
    for (int i = 0; i < n; ++i) {
        currentDecrement += diff[i];
        nums[i] += currentDecrement; // Adjust nums based on decrements
        if (nums[i] > 0) {
            // If any value becomes negative, it's impossible to achieve Zero Array
            return false;
        }
    }
        return true;
    }
};",1454822128
sanket871,sanket871,649,3643,cpp,"class Solution {
private:
 bool isZeroArray(vector<int> nums, vector<vector<int>>& query,int k) {
        int n = nums.size();
        vector<int> diff(n + 1, 0); 


    for (int i=0;i<k;i++) {
        int l = query[i][0];
        int r = query[i][1];
        int val = query[i][2];

        diff[l]-=val; 
        if (r + 1 < n) {
            diff[r + 1]+=val; 
        }
    }

    
    int currentDecrement = 0;
    for (int i = 0; i < n; ++i) {
        currentDecrement += diff[i];
        nums[i] += currentDecrement; // Adjust nums based on decrements
        if (nums[i] > 0) {
            // If any value becomes negative, it's impossible to achieve Zero Array
            return false;
        }
    }
        return true;
    }
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int low=0;
        int high = queries.size();
        int ans = -1;

        while(low<=high){
            int mid = low + (high-low)/2;

            if(isZeroArray(nums,queries,mid)){
                ans = mid;
                high = mid-1;
            }
            else{
                low = mid+1;
            }
        }
        return ans;
        
    }
};",1454838033
Ajay Maheshwari,unknown_ajay,651,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& arr) 
    {
        int cnt = 0;
        int n = arr.size();
        for(int i=0;i<n;i++)
        {
            if(arr[i] > 0) continue;
            auto f = [&](int cur,bool dir) -> int 
            {
                vector<int> v = arr;
                while(cur<n && cur>=0)
                {
                    if(dir) 
                    {
                        if(cur+1<n && v[cur+1] > 0) dir=1-dir;
                        if(cur+1<n && v[cur+1] > 0) v[cur+1]-=1;
                        cur+=1;
                    }
                    else 
                    {
                        if(cur-1>=0 && v[cur-1] > 0) dir=1-dir;
                        if(cur-1>=0 && v[cur-1] > 0) v[cur-1]-=1;
                        cur-=1;
                    }
                }

                bool ok = 1;
                for(auto &x:v) ok &= (x == 0);
                return ok;
            };
            
            cnt += f(i,1);
            cnt += f(i,0);
        }
        return cnt;
    }
};",1454845463
Ajay Maheshwari,unknown_ajay,651,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& v, vector<vector<int>>& q) {
        int n = v.size();
        auto isposs = [&](int k) -> bool 
        {
            bool ok = 1;
            vector< int > op(n,0);
            for(int i=0;i < q.size(); i++)
            {
                int l = q[i][0], r = q[i][1], val = 1;
                op[l]+= val;
                if(r+1<n) op[r+1]-=val;
            }
            
            vector<long> pre(n); pre[0] = op[0];
            for(int i=1;i<n;i++) pre[i] = pre[i-1] + op[i];
            
            for(int i=0;i<n;i++) {
                if( v[i] - pre[i] > 0 ) ok = 0;
            }
            
            // for(auto &x:pre) cout << x << "" ""; cout << ""\n"";
            
            return ok;
        };
        
        return isposs(q.size()-1);
    }
};",1454840359
Ajay Maheshwari,unknown_ajay,651,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& v, vector<vector<int>>& q) 
    {
        int n = v.size();
        int l = 0, r = q.size();
        
        auto isposs = [&](int k) -> bool {
            
            bool ok = 1;
            if(k == 0) {
                for(auto &x:v) if(x != 0) ok = 0;
                return ok;
            }
            
            vector< int > op(n,0);
            for(int i=0;i<= k-1; i++)
            {
                int l = q[i][0], r = q[i][1], val = q[i][2];
                op[l]+= val;
                if(r+1<n) op[r+1]-=val;
            }
            
            vector<long> pre(n); pre[0] = op[0];
            for(int i=1;i<n;i++) pre[i] = pre[i-1] + op[i];
            
            for(int i=0;i<n;i++) {
                if( v[i] - pre[i] > 0 ) ok = 0;
            }
            
            // for(auto &x:pre) cout << x << "" ""; cout << ""\n"";
            
            return ok;
        };
        
        // cout << isposs(2) << ""\n"";
        
        while(l+1<r)
        {
            int md = (r-l)/2 + l;
            if( isposs(md) ) r = md;
            else l = md;
        }
        
        int ans = -1;
        if( isposs(r) ) ans = r;
        if( isposs(l) ) ans = l;
        return ans;
    }
};",1454838077
Jyothika_inti,Jyothika_inti,652,3616,python3,"
class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        n = len(nums)
        result = 0

        def is_valid(start: int, direction: int) -> bool:
            # Make a copy of the array to simulate changes
            temp_nums = nums[:]
            curr = start
            
            while 0 <= curr < n:
                if temp_nums[curr] == 0:
                    curr += direction
                else:
                    temp_nums[curr] -= 1
                    direction = -direction  # Reverse direction
                    curr += direction
            
            return all(val == 0 for val in temp_nums)

        for i in range(n):
            if nums[i] == 0:
                # Check both directions for each zero position
                if is_valid(i, -1):  # Left direction
                    result += 1
                if is_valid(i, 1):  # Right direction
                    result += 1
        
        return result

        ",1454833155
Jyothika_inti,Jyothika_inti,652,3639,python3,"from typing import List

class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        n = len(nums)
        coverage = [0] * (n + 1)  # Difference array to track range coverage
        
        # Apply queries to build the coverage array
        for l, r in queries:
            coverage[l] += 1
            if r + 1 < n:
                coverage[r + 1] -= 1
        
        # Calculate the cumulative coverage
        for i in range(1, n):
            coverage[i] += coverage[i - 1]
        
        # Check if every element in nums can be decremented to zero
        for i in range(n):
            if nums[i] > coverage[i]:
                return False  # Not enough coverage to decrement nums[i] to 0
        
        return True
",1454842722
Jyothika_inti,Jyothika_inti,652,3643,python3,"
class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        def can_make_zero(k):
            # Reset the difference array
            diff = [0] * (n + 1)
            
            # Apply the first k queries
            for i in range(k):
                l, r, val = queries[i]
                diff[l] -= val
                if r + 1 < n:
                    diff[r + 1] += val
            
            # Apply the difference array to nums
            current = nums[:]
            for i in range(n):
                if i > 0:
                    diff[i] += diff[i - 1]
                current[i] += diff[i]
                if current[i] > 0:
                    return False
            
            return True
        
        n = len(nums)
        low, high = 0, len(queries)
        result = -1
        
        # Binary search to find the minimum k
        while low <= high:
            mid = (low + high) // 2
            if can_make_zero(mid):
                result = mid
                high = mid - 1
            else:
                low = mid + 1
        
        return result

        ",1454845464
Sai Krishna,saikrishna17394,653,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int n = nums.size();

        int ans = 0;
        int left_sum = 0;
        int right_sum = 0;

        for (int i = 0; i < n; i++) {
            right_sum += nums[i];
        }
        
        for (int i = 0; i < n; i++) {
            right_sum -= nums[i];

            if (i > 0) {
                left_sum += nums[i - 1];
            }

            if (nums[i] != 0) { continue; }
            
            if (left_sum == right_sum) {
                ans += 2;
            }
            else if (abs(left_sum - right_sum) == 1) {
                ans++;
            }
        }

        return ans;
    }
};",1454812290
Sai Krishna,saikrishna17394,653,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        vector<int> del(n, 0);
        vector<int> add(n, 0);

        for (const auto& query: queries) {
            add[query[0]]++;
            del[query[1]]++;
        }

        int cnt = 0;

        for (int i = 0; i < n; i++) {
            cnt += add[i];

            if (cnt < nums[i]) { return false; }

            cnt -= del[i];
        }
        

        return true;
    }
};",1454820831
Sai Krishna,saikrishna17394,653,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int big = *max_element(nums.begin(), nums.end());

        if (big == 0) { return 0; }
        
        int n = nums.size();
        vector<int> del(n, 0);
        vector<int> add(n, 0);

        for (const auto& query: queries) {
            add[query[0]] += query[2];
            del[query[1]] += query[2];
        }

        int cnt = 0;

        for (int i = 0; i < n; i++) {
            cnt += add[i];

            if (cnt < nums[i]) { return -1; }

            cnt -= del[i];
        }

        int k = queries.size();
        int l = 0, r = k - 1;
        int mid;

        while (l < r) {
            mid = (l + r) / 2;

            for (int i = 0; i < n; i++) {
                add[i] = 0;
                del[i] = 0;
            }

            for (int i = 0; i <= mid; i++) {
                add[queries[i][0]] += queries[i][2];
                del[queries[i][1]] += queries[i][2];
            }

            cnt = 0;

            bool ok = true;
            
            for (int i = 0; i < n; i++) {
                cnt += add[i];
    
                if (cnt < nums[i]) {
                    ok = false;
                    break;
                }
    
                cnt -= del[i];
            }

            if (ok) {
                r = mid;
            }
            else {
                l = mid + 1;
            }
        }
        
        return (l + 1);
    }
};",1454830669
vinay peddinti,pvssvinay,654,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& a) {
        int n=a.size(),i;
        vector<int> p(n),s(n);
        p[0]=a[0];
        for(i=1;i<n;i++){
            p[i]=p[i-1]+a[i];
        }
        s[n-1]=a[n-1];
        for(i=n-2;i>=0;i--){
            s[i]=s[i+1]+a[i];
        }
        int c=0;
        for(i=0;i<n;i++){
            if(a[i]==0){
                if(p[i]==s[i])
                    c+=2;
                else if(abs(p[i]-s[i])==1)
                    c++;
            }
        }
        return c;
    }
};",1454808630
vinay peddinti,pvssvinay,654,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& a, vector<vector<int>>& q) {
        int i,n=a.size();
        vector<int> d(n,0);
        for(auto &it:q){
            int l=it[0];
            int r=it[1];
            d[l]--;
            if(r+1<n)
                d[r+1]++;
        }


        int cd=0;
        for(i=0;i<n;i++){
            cd+=d[i];
            a[i]+=cd;
            if(a[i]<0)
                a[i]=0;
        }

        for(auto &it:a){
            if(it!=0)
                return false;
        }
        return true;
    }
};",1454822452
vinay peddinti,pvssvinay,654,3643,cpp,"class Solution {
public:

    bool predicate(vector<int> &b, vector<vector<int>>& q,int m){
        vector<int> a=b;
        int i,n=a.size();
        vector<int> d(n,0);
        for(i=0;i<m;i++){
            int l=q[i][0];
            int r=q[i][1];
            int val=q[i][2];
            d[l]-=val;
            if(r+1<n)
                d[r+1]+=val;
        }


        int cd=0;
        for(i=0;i<n;i++){
            cd+=d[i];
            a[i]+=cd;
            if(a[i]<0)
                a[i]=0;
        }

        for(auto &it:a){
            if(it!=0)
                return false;
        }
        return true;
    }

    int minZeroArray(vector<int>& a, vector<vector<int>>& q) {
        int ans=-1,l=0,h=q.size();
        while(l<=h){
            int m=(l+h)/2;
            if(predicate(a,q,m)){
                ans=m;
                h=m-1;
            }
            else
                l=m+1;
        }
        // cout<<predicate(a,q,0)<<endl;
        return ans;
    }
};",1454838149
khtp91113,khtp91113,655,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int ans = 0;
        vector<int> pre(nums.size(), 0), post(nums.size(), 0);
        for(int i=1;i<nums.size();i++){
            pre[i] = pre[i-1]+nums[i-1];
        }
        for(int i=nums.size()-2;i>=0;i--){
            post[i] = post[i+1]+nums[i+1];
        }
        for(int i=0;i<nums.size();i++){
            if (nums[i] == 0){
                if (pre[i] == post[i])
                    ans += 2;
                else if (abs(pre[i]-post[i]) == 1)
                    ans++;
            }
        }
        return ans;
    }
};",1454811219
khtp91113,khtp91113,655,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        vector<int> v(nums.size()+1, 0);
        long long sum = 0;
        for(int i=0;i<queries.size();i++){
            v[queries[i][0]]++;
            v[queries[i][1]+1]--;
        }
        for(int i=0;i<nums.size();i++){
            sum += v[i];
            if (nums[i] > sum)
                return false;
        }
        return true;
    }
};",1454815069
khtp91113,khtp91113,655,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        vector<int> v(nums.size()+1, 0);
        long long sum = 0;
        bool flag = true;
        int left = 0, right = queries.size(), mid, ans = INT_MAX;
        while (left <= right){
            mid = (left+right)/2;
            flag = true;
            sum = 0;
            for(int i=0;i<v.size();i++)
                v[i] = 0;
            for(int i=0;i<mid;i++){
                v[queries[i][0]] += queries[i][2];
                v[queries[i][1]+1] -= queries[i][2];
            }
            for(int i=0;i<nums.size();i++){
                sum += v[i];
                if (nums[i] > sum){
                    flag = false;
                }
            }
            if (flag){
                ans = min(ans, mid);
                right = mid-1;
            }
            else{
                left = mid+1;
            }
        }
        return ans==INT_MAX?-1:ans;
    }
};",1454830832
Aditya Kumar Lal,choco_waffle,657,3616,cpp,"class Solution {
public:
    long long getL(vector<int>& nums,int index){
        long sum=0;
        for(int i=0;i<index;i++){
            sum+=nums[i];
        }
        return sum;
    }
    long long getR(vector<int>& nums,int index){
        long sum=0;
        for(int i=nums.size()-1;i>index;i--){
            sum+=nums[i];
        }
        return sum;
    }
    int countValidSelections(vector<int>& nums) {
        int ans=0;
        for(int i=0;i<nums.size();i++){
            if (nums[i]==0){
                long long leftSum=getL(nums,i);
                long long rightSum=getR(nums,i);
                if (leftSum==rightSum) ans+=2;
                else if (abs(leftSum-rightSum)==1)ans++;
            }
        }
        return ans;
    }
};",1454809326
Aditya Kumar Lal,choco_waffle,657,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        vector<int> vec(nums.size(),0);
        vector<int> check(nums.size(),0);
        for(auto it:queries){
            vec[it[0]]++;
            if (it[1]+1<nums.size())vec[it[1]+1]--;
        }
        int sum=0;
        for(int i=0;i<nums.size();i++){
            sum+=vec[i];
            check[i]=sum;
        }
        // for(auto i:check)cout<<i<<"" "";
        for(int i=0;i<nums.size();i++){
            if (check[i]<nums[i])return false;
        }
        return true;
    }
};",1454816751
Aditya Kumar Lal,choco_waffle,657,3643,cpp,"class Solution {
public:
    bool zero(vector<int>& nums, vector<vector<int>>& queries,int mid){
        vector<int> vec(nums.size(),0);
        vector<int> check(nums.size(),0);
        for(int i=0;i<mid;i++){
            vec[queries[i][0]]+=queries[i][2];
            if (queries[i][1]+1<nums.size())vec[queries[i][1]+1]-=queries[i][2];
        }
        long sum=0;
        for(int i=0;i<nums.size();i++){
            sum+=vec[i];
            check[i]=sum;
        }
        for(int i=0;i<nums.size();i++){
            if (check[i]<nums[i])return false;
        }
        return true;
    }
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        if (!zero(nums,queries,queries.size()))return -1;
        int s=0;
        int e=queries.size();
        int ans=queries.size();
        while(s<=e){
            int mid=s+(e-s)/2;
            if (zero(nums,queries,mid)){
                ans=min(mid,ans);
                e=mid-1;
            }
            else{ 
                s=mid+1;
            }
        }
        return ans;
    }
};",1454845680
OmkarKanade,OmkarKanade,659,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int sum = 0;
        int total = 0;
        for (int num : nums) {
            total += num;
        }
        int cnt = 0;
        for (int num : nums) {
            if (num == 0 && abs((2 * sum) - total) == 0) {
                cnt += 2;
            } else if (num == 0 && abs((2 * sum) - total) == 1) {
                cnt += 1;
            }
            sum += num;
        }
        return cnt;
    }
};",1454809156
OmkarKanade,OmkarKanade,659,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        vector<int> arr(n + 1);
        int l, r;
        for (int i=0; i<queries.size(); i++) {
            l = queries[i][0];
            r = queries[i][1];
            arr[l] += 1;
            arr[r + 1] -= 1;
        }

        for (int i=1; i<=n; i++) {
            arr[i] += arr[i - 1];
        }
        for (int i=0; i<n; i++) {
            if (arr[i] < nums[i]) {
                return false;
            }
        }
        return true;
    }
};",1454816474
OmkarKanade,OmkarKanade,659,3643,cpp,"class Solution {
public:
    bool checkFirstK(vector<int>& nums, vector<vector<int>>& queries, int k) {
        int n = nums.size();
        vector<int> arr(n + 1);
        int l, r, val;
        for (int i=0; i<k; i++) {
            l = queries[i][0];
            r = queries[i][1];
            val = queries[i][2];
            arr[l] += val;
            arr[r + 1] -= val;
        }

        for (int i=1; i<=n; i++) {
            arr[i] += arr[i - 1];
        }
        for (int i=0; i<n; i++) {
            if (arr[i] < nums[i]) {
                return false;
            }
        }
        return true;
    }

    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        int q = queries.size();
        int l = 0, r = q;
        int m;
        if (!checkFirstK(nums, queries, q)) {
            return -1;
        }
        while (l < r) {
            m = l + (r - l) / 2;
            if (checkFirstK(nums, queries, m)) {
                r = m;
            } else {
                l = m + 1;
            }
        }
        return l;
    }
};",1454830909
IphoneX,hahahiehie,660,3616,java,"import java.util.*;

class Utils {
    public static int log2(long n) {
        return 63 - Long.numberOfLeadingZeros(n);
    }

    // nums = ""aaabaaaba"" odd d[1] return [1, 2, 1, 4, 1, 2, 2]
    // d[0] for even, d[1] for odd
    public static int[][] manacher(String s) {
        int n = s.length();
        int[] d1 = new int[n];
        for (int i = 0, l = 0, r = -1; i < n; ++i) {
            int k = (i > r) ? 1 : Math.min(d1[l + r - i], r - i + 1);
            while (0 <= i - k && i + k < n && s.charAt(i - k) == s.charAt(i + k)) k++;
            d1[i] = k;
            if (i + k - 1 > r) {
                l = i - k + 1;
                r = i + k - 1;
            }
        }

        int[] d0 = new int[n];
        for (int i = 0, l = 0, r = -1; i < n; i++) {
            int k = (i > r) ? 0 : Math.min(d0[l + r - i + 1], r - i + 1);
            while (0 <= i - k - 1 && i + k < n && s.charAt(i - k - 1) == s.charAt(i + k)) {
                k++;
            }
            d0[i] = k;
            if (i + k - 1 > r) {
                l = i - k;
                r = i + k - 1;
            }
        }
        return new int[][]{d0, d1};
    }

    // generate primes that is <= n
    public static int[] genPrimes(int n) {
        if (n <= 1) return new int[0];
        boolean[] isComp = new boolean[n + 1];
        int len = 0;
        for (int i = 2; i <= n; i++) {
            if (!isComp[i]) {
                len++;
                for (int j = i + i; j <= n; j += i) {
                    isComp[j] = true;
                }
            }
        }
        int[] ans = new int[len];
        for (int i = 2, j = 0; i <= n; i++) {
            if (!isComp[i]) {
                ans[j++] = i;
            }
        }
        return ans;
    }

    // int[0] = primeFactor, int[1] = count of that primeFactor
    // NOTE: factors[0] and factors[1] are empty list.
    public static List<int[]>[] genPrimeFactors(int n) {
        List<int[]>[] factors = new List[n + 1];
        for (int i = 0; i <= n; i++) {
            factors[i] = new ArrayList<>();
        }
        boolean[] isComp = new boolean[n + 1];
        for (int i = 2; i <= n; i++) {
            if (!isComp[i]) {
                factors[i].add(new int[]{i, 1});
                for (int j = i + i; j <= n; j += i) {
                    isComp[j] = true;
                    int t = j, count = 0;
                    while (t % i == 0) {
                        count++;
                        t /= i;
                    }
                    factors[j].add(new int[]{i, count});
                }
            }
        }
        return factors;
    }

    // generate factors (not prime factors), factors[0] is empty list.
    public static List<Integer>[] genFactors(int n) {
        List<Integer>[] factors = new List[n + 1];
        for (int i = 0; i <= n; i++) factors[i] = new ArrayList<>();
        for (int i = 1; i <= n; i++) {
            for (int j = i; j <= n; j += i) {
                factors[j].add(i);
            }
        }
        return factors;
    }

    public static int lowerBound(int[] a, int target) {
        return lowerBound(a, target, a.length);
    }

    public static int lowerBound(int[] a, int target, int n) {
        int low = 0;
        int high = n;
        while (low < high) {
            int mid = low + ((high - low) >> 1);
            if (a[mid] < target) {
                low = mid + 1;
            } else {
                high = mid;
            }
        }
        return low;
    }

    public static int upperBound(int[] a, int target) {
        return upperBound(a, target, a.length);
    }

    public static int upperBound(int[] a, int target, int n) {
        int low = 0;
        int high = n;
        while (low < high) {
            int mid = low + ((high - low) >> 1);
            if (a[mid] <= target) {
                low = mid + 1;
            } else {
                high = mid;
            }
        }
        return low;
    }

    public static int lowerBound(long[] a, long target) {
        return lowerBound(a, target, a.length);
    }

    public static int lowerBound(long[] a, long target, int n) {
        int low = 0;
        int high = n;
        while (low < high) {
            int mid = low + ((high - low) >> 1);
            if (a[mid] < target) {
                low = mid + 1;
            } else {
                high = mid;
            }
        }
        return low;
    }

    public static int upperBound(long[] a, long target) {
        return upperBound(a, target, a.length);
    }

    public static int upperBound(long[] a, long target, int n) {
        int low = 0;
        int high = n;
        while (low < high) {
            int mid = low + ((high - low) >> 1);
            if (a[mid] <= target) {
                low = mid + 1;
            } else {
                high = mid;
            }
        }
        return low;
    }

    public static <T extends Comparable<T>> int lowerBound(T[] a, T target, int n) {
        int low = 0;
        int high = n;
        while (low < high) {
            int mid = low + ((high - low) >> 1);
            if (a[mid].compareTo(target) < 0) {
                low = mid + 1;
            } else {
                high = mid;
            }
        }
        return low;
    }

    public static <T extends Comparable<T>> int upperBound(T[] a, T target, int n) {
        int low = 0;
        int high = n;
        while (low < high) {
            int mid = low + ((high - low) >> 1);
            if (a[mid].compareTo(target) <= 0) {
                low = mid + 1;
            } else {
                high = mid;
            }
        }
        return low;
    }

    public static <T extends Comparable<T>> int lowerBound(List<T> a, T target) {
        int low = 0;
        int high = a.size();
        while (low < high) {
            int mid = low + ((high - low) >> 1);
            if (a.get(mid).compareTo(target) < 0) {
                low = mid + 1;
            } else {
                high = mid;
            }
        }
        return low;
    }

    public static <T extends Comparable<T>> int upperBound(List<T> a, T target) {
        int low = 0;
        int high = a.size();
        while (low < high) {
            int mid = low + ((high - low) >> 1);
            if (a.get(mid).compareTo(target) <= 0) {
                low = mid + 1;
            } else {
                high = mid;
            }
        }
        return low;
    }

    public static long or(int x, int y) {
        return ((long) x << 32) | ((long) y << 32 >>> 32);
    }

    // k = 0...nums.length - 1
    // After calling this function, nums[k] is the k-th number.
    public static int kthNumber(int[] nums, int k) {
        return kthNumberHelper(nums, k, 0, nums.length - 1);
    }

    // end is inclusive (0 to nums.length - 1)
    private static int kthNumberHelper(int[] nums, int K, int start, int end) {
        if (start == end) return nums[start];
        int i = partition(nums, start, end);
        return K <= i ? kthNumberHelper(nums, K, start, i) : kthNumberHelper(nums, K, i + 1, end);
    }

    // end is inclusive (0 to nums.length - 1)
    public static int partition(int[] nums, int start, int end) {
        int pos = start + ((end - start) >> 1);
        int pivot = nums[pos];

        int i = start, j = end;
        nums[pos] = nums[end];
        while (i < j) {
            while (i < j && nums[i] < pivot) i++;
            if (i < j) nums[j--] = nums[i];

            while (i < j && pivot < nums[j]) j--;
            if (i < j) nums[i++] = nums[j];
        }

        // pos is the final position for pivot.
        nums[i] = pivot;
        return i;
    }

    public static void swap(int[] nums, int i, int j) {
        int t = nums[i];
        nums[i] = nums[j];
        nums[j] = t;
    }

    // partition nums into 3 parts [smaller than pivot, equal to pivot, larger than pivot]
    public static void partition3(int[] nums, int pivot) {
        int n = nums.length;
        int l = 0, r = n - 1;
        for (int i = 0; i <= r; i++) {
            if (nums[i] < pivot) {
                swap(nums, l++, i);
            } else if (nums[i] > pivot) {
                swap(nums, r--, i--);
            }
        }
    }

    // end is inclusive
    public static void reverse(int[] nums, int start, int end) {
        for (int i = start, j = end; i < j; i++, j--) {
            int t = nums[i];
            nums[i] = nums[j];
            nums[j] = t;
        }
    }

    // Return false if next permutation is not available. (nums is not changed for this case)
    public static boolean nextPermutation(int[] nums) {
        int n = nums.length;
        if (n <= 1) return false;
        int i = n - 1;
        while (i - 1 >= 0 && nums[i - 1] >= nums[i]) {
            i--;
        }
        if (i <= 0) return false;
        for (int j = n - 1; j >= i; j--) {
            if (nums[j] > nums[i - 1]) {
                int t = nums[j];
                nums[j] = nums[i - 1];
                nums[i - 1] = t;

                reverse(nums, i, n - 1);
                break;
            }
        }
        return true;
    }

    // Return false if previous permutation is not available. (nums is not changed for this case)
    public static boolean prevPermutation(int[] nums) {
        int n = nums.length;
        if (n <= 1) return false;
        int i = n - 1;
        while (i - 1 >= 0 && nums[i - 1] <= nums[i]) {
            i--;
        }
        if (i <= 0) return false;
        for (int j = n - 1; j >= i; j--) {
            if (nums[j] < nums[i - 1]) {
                int t = nums[j];
                nums[j] = nums[i - 1];
                nums[i - 1] = t;

                reverse(nums, i, n - 1);
                break;
            }
        }
        return true;
    }


    // a, b could be negative
    // remainder >= 0
    // return [a / b, a % b]
    public static int[] divMod(int a, int b) {
        int r = a % b;
        int c = a / b;
        if (r < 0) {
            r += Math.abs(b);
            c++;
        }
        return new int[]{c, r};
    }

    public static List<Integer> negativeBase(int n, int base) {
        List<Integer> digits = new ArrayList<>();
        if (n == 0) {
            digits.add(0);
            return digits;
        }
        while (n != 0) {
            // t[0] = n / base
            // t[1] = n % base;
            int[] t = divMod(n, base);
            digits.add(t[1]);
            n = t[0];
        }
        Collections.reverse(digits);
        return digits;
    }

    // (a ^ b) % MOD
    public static long powMod(long a, long b, long MOD) {
        long res = 1L;
        a %= MOD; // In case a * a is overflow
        while (b > 0) {
            if ((b & 1) != 0) res = (res * a) % MOD;
            a = a * a % MOD;
            b >>= 1;
        }
        return res;
    }

    public static long[][] genCombination(int n) {
        long[][] C = new long[n + 1][n + 1];
        for (int i = 0; i <= n; i++) {
            for (int j = 0; j <= i && j <= n; j++) {
                if (j == 0 || i == j) C[i][j] = 1;
                else C[i][j] = (C[i - 1][j - 1] + C[i - 1][j]);
            }
        }
        return C;
    }

    public static long[][] genPermutation(int n) {
        long[][] P = new long[n + 1][n + 1];
        for (int i = 0; i <= n; i++) {
            for (int j = 0; j <= i && j <= n; j++) {
                if (i == 0 || j == 0) P[i][j] = 1;
                else P[i][j] = P[i][j - 1] * (i - j + 1);
            }
        }
        return P;
    }

    public static long gcd(long x, long y) {
        return x != 0 ? gcd(y % x, x) : y;
    }

    public static int[] preprocessLog2(int n) { // from log2(0) .... log2(n) inclusive
        int[] lg = new int[n + 1];
        for (int k = 0, i = 1; i <= n; lg[i++] = k - 1) {
            while ((1 << k) <= i) {
                k++;
            }
        }
        return lg;
    }

    public static long max(long[] nums) {
        long ret = Long.MIN_VALUE;
        for (long v : nums) ret = Math.max(ret, v);
        return ret;
    }

    public static int max(int[] nums) {
        int ret = Integer.MIN_VALUE;
        for (int v : nums) ret = Math.max(ret, v);
        return ret;
    }
}

// Tested by leetcode 1163
class SuffixArray {
    int[] s;
    int[] SA; // SA[i] => index of the i-th ranked suffix
    int[] rank; // rank[i] => the rank of i-th suffix, SA[rank[i]] == i
    int[] height; // height[i] = LCP(s[SA[i]], s[SA[i - 1]]).

    private int[][] d;
    private int n;
    private int[] lg;

    private int log2(int n) {
        return 31 - Integer.numberOfLeadingZeros(n);
    }

    private static int[] stringToIntArray(String str) {
        int[] nums = new int[str.length()];
        for (int i = 0; i < str.length(); i++) nums[i] = str.charAt(i);
        return nums;
    }

    public SuffixArray(String str) {
        this(str, true);
    }

    public SuffixArray(String str, boolean toBuildRMQ) {
        this(stringToIntArray(str), toBuildRMQ);
    }

    public SuffixArray(int[] nums) {
        this(nums, true);
    }

    public SuffixArray(int[] nums, boolean toBuildRMQ) {
        this.s = nums;
        this.n = nums.length;
        this.SA = new int[n];
        this.rank = new int[n];
        suffixSort(s);
        if (toBuildRMQ) {
            this.height = new int[n];
            this.d = new int[log2(n) + 1][n];
            this.lg = new int[n + 1];
            buildHeight();
            buildRMQ();
        }
    }

    // height[i] = LCP(s[SA[i]], s[SA[i - 1]]).
    // ?? s[n] = 0 or s[n] = -INF.
    private void buildHeight() {
        int i, j, h;
        height[0] = 0;
        for (i = 0; i < n; i++)
            rank[SA[i]] = i;
        for (h = i = 0; i < n; i++)
            if (rank[i] > 0) {
                j = SA[rank[i] - 1];
                while (i + h < n && j + h < n && s[i + h] == s[j + h]) ++h;
                height[rank[i]] = h;
                if (h > 0) --h;
            }
    }

    // LCP(i, j) = LCP(s[SA[i]], s[SA[j]]) = min{height[k] | i + 1 <= k <= j}.
    private void buildRMQ() {
        int i, j, k;
        for (i = 0; i < n; i++)
            d[0][i] = height[i];
        for (j = 1; (1 << j) <= n; j++)
            for (i = 0; i + (1 << j) <= n; i++)
                d[j][i] = Math.min(d[j - 1][i], d[j - 1][i + (1 << (j - 1))]);
        for (lg[0] = k = 0, i = 1; i <= n; lg[i++] = k - 1)
            while ((1 << k) <= i) k++;
    }

    // LCP(i, j) = LCP(s[SA[i]], s[SA[j]]) = min{height[k] | i + 1 <= k <= j}.
    public int LCP(int i, int j) {
        if (i == j) return n - SA[i];
        if (i > j) {
            int t = i;
            i = j;
            j = t;
        }
        int k = lg[j - (++i) + 1];
        return Math.min(d[k][i], d[k][j - (1 << k) + 1]);
    }

    // LCPIndex(i, j) = LCP(s[i], s[j])
    public int LCPIndex(int i, int j) {
        return LCP(rank[i], rank[j]);
    }

    private void sortIndex(int[] nums, int start, int end) {
        if (start >= end) return;
        int pos = start + ((end - start) >> 1);
        int pivot = nums[pos];

        int i = start, j = end;
        nums[pos] = nums[end];
        while (i < j) {
            while (i < j && s[nums[i]] < s[pivot]) i++;
            if (i < j) nums[j--] = nums[i];

            while (i < j && s[pivot] < s[nums[j]]) j--;
            if (i < j) nums[i++] = nums[j];
        }
        nums[i] = pivot; // index i is the final position for pivot.
        sortIndex(nums, start, i - 1);
        sortIndex(nums, i + 1, end);
    }

    private void suffixSort(int[] s) {
        int[] count = new int[n], t;
        int[] nSA = new int[n];
        int[] nRank = new int[n];
//        Integer[] tempArray = new Integer[n];
//        for (int x = 0; x < n; x++) tempArray[x] = x;
//        Arrays.sort(tempArray, (a, b) -> Integer.compare(s[a], s[b]));
//        for (int x = 0; x < n; x++) SA[x] = tempArray[x];
        int i, k;
        int minV = s[0], maxV = s[0];
        for (i = 1; i < n; i++) {
            minV = Math.min(minV, s[i]);
            maxV = Math.max(maxV, s[i]);
        }
        if ((long) maxV - minV + 1 <= (long) n) { // radix sort if alphabet size is small
            for (i = 0; i < n; i++) count[s[i] - minV]++;
            for (i = minV + 1; i <= maxV; i++) count[i - minV] += count[i - minV - 1];
            for (i = n - 1; i >= 0; i--) SA[--count[s[i] - minV]] = i;
        } else {
            for (i = 0; i < n; i++) SA[i] = i;
            sortIndex(SA, 0, n - 1);
        }
        for (rank[SA[0]] = 0, i = 1; i < n; i++) {
            rank[SA[i]] = (s[SA[i]] != s[SA[i - 1]]) ? rank[SA[i - 1]] + 1 : rank[SA[i - 1]];
        }
        for (k = 1; k < n && rank[SA[n - 1]] < n - 1; k <<= 1) {
            for (i = 0; i < n; i++) count[rank[SA[i]]] = i + 1;
            for (i = n - 1; i >= 0; i--) if (SA[i] >= k) nSA[--count[rank[SA[i] - k]]] = SA[i] - k;
            for (i = n - k; i < n; i++) nSA[--count[rank[i]]] = i;
            t = SA;
            SA = nSA;
            nSA = t;
            for (nRank[SA[0]] = 0, i = 1; i < n; i++) {
                nRank[SA[i]] = (SA[i] + k >= n || SA[i - 1] + k >= n || rank[SA[i]] != rank[SA[i - 1]] || rank[SA[i] + k] != rank[SA[i - 1] + k]) ? nRank[SA[i - 1]] + 1 : nRank[SA[i - 1]];
            }
            t = rank;
            rank = nRank;
            nRank = t;
        }
    }
}

class Combination {
    long[] factorial;
    long[] inverseFactorial;
    long MOD;

    // O(maxSize) for preprocessing
    // MOD must be prime
    public Combination(int maxSize, long MOD) {
        factorial = new long[maxSize + 1];
        inverseFactorial = new long[maxSize + 1];
        factorial[0] = 1;
        inverseFactorial[0] = 1;
        this.MOD = MOD;
        for (int i = 1; i <= maxSize; i++) {
            factorial[i] = factorial[i - 1] * i % MOD;
            inverseFactorial[i] = inverse(factorial[i]);
        }
    }

    // x, y are long[1]
    // ax + by = gcd(a, b)
    private long extGcd(long a, long b, long[] x, long[] y) {
        if (b == 0) {
            x[0] = 1;
            y[0] = 0;
            return a;
        } else {
            long r = extGcd(b, a % b, y, x);
            y[0] -= x[0] * (a / b);
            return r;
        }
    }

    // (a * x) % MOD = 1
    // x is the inverse element
    public long inverse(long a) {
        long[] x = new long[1], y = new long[1];
        extGcd(a, MOD, x, y);
        return (x[0] % MOD + MOD) % MOD;
    }

    // m >= n
    // O(1)
    public long P(int m, int n) {
        if (m == 0 || n == 0) return 1;
        else if (m == n) return factorial[m];
            //return factorial[m] * inverse(factorial[m - n]) % MOD;
        else return factorial[m] * inverseFactorial[m - n] % MOD;
    }

    // m >= n
    // O(1)
    public long C(int m, int n) {
        if (m == 0 || n == 0 || m == n) return 1;
            //return factorial[m] * inverse(factorial[m - n]) % MOD * inverse(factorial[n]) % MOD;
        else return factorial[m] * inverseFactorial[m - n] % MOD * inverseFactorial[n] % MOD;
    }
}

class CombinationNoMod {

    long[][] C;
    long[][] P;

    public CombinationNoMod(int maxSize) {
        C = new long[maxSize + 1][maxSize + 1];
        P = new long[maxSize + 1][maxSize + 1];
        int m = C.length;
        int n = C[0].length;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j <= i && j < n; j++) {
                if (j == 0 || i == j) C[i][j] = 1;
                else C[i][j] = (C[i - 1][j - 1] + C[i - 1][j]);
            }
        }
        for (int i = 0; i < m; i++) {
            for (int j = 0; j <= i && j < n; j++) {
                if (i == 0 || j == 0) P[i][j] = 1;
                else P[i][j] = P[i][j - 1] * (i - j + 1);
            }
        }
    }

    // m >= n. O(1)
    public long P(int m, int n) {
        if (m == 0 || n == 0) return 1;
        return P[m][n];
    }

    // m >= n. O(1)
    public long C(int m, int n) {
        if (m == 0 || n == 0 || m == n) return 1;
        return C[m][n];
    }
}

class Fraction {
    long n, d; // n / d (d != 0)

    public Fraction(long n, long d) {
        if (d == 0) {
            this.n = Long.MAX_VALUE;
            this.d = 1;
            return;
        }
        long g = gcd(Math.abs(n), Math.abs(d));
        this.n = n / g;
        this.d = d / g;
        if (this.d < 0) {
            this.d = -this.d;
            this.n = -this.n;
        }
    }

    public void add(Fraction other) {
        long numerator = this.n * other.d + this.d * other.n;
        long denominator = this.d * other.d;
        long g = gcd(Math.abs(numerator), Math.abs(denominator));
        this.n = numerator / g;
        this.d = denominator / g;
        if (this.d < 0) {
            this.d = -this.d;
            this.n = -this.n;
        }
    }

    @Override
    public boolean equals(Object anObject) {
        if (this == anObject) {
            return true;
        }
        if (anObject instanceof Fraction) {
            Fraction anotherObject = (Fraction) anObject;
            return n == anotherObject.n && d == anotherObject.d;
        }
        return false;
    }

    @Override
    public int hashCode() {
        return (int) (n * 31 + d);
    }

    private long gcd(long x, long y) {
        return x != 0 ? gcd(y % x, x) : y;
    }
}

class UnionFind {
    int[] parent;
    int[] sz;

    // from 0 ... n - 1
    public UnionFind(int n) {
        parent = new int[n];
        sz = new int[n];
        for (int i = 0; i < n; i++) {
            parent[i] = i;
            sz[i] = 1;
        }
    }

    public void clear() {
        for (int i = 0; i < parent.length; i++) {
            parent[i] = i;
            sz[i] = 1;
        }
    }

    public int find(int x) {
        //return parent[x] == x ? x : (parent[x] = find(parent[x]));
        if (parent[x] == x) return x;
        int px = x;
        while (px != parent[px]) px = parent[px];
        while (x != px) {
            int next = parent[x];
            parent[x] = px;
            x = next;
        }
        return px;
    }

    // px is the final parent
    public boolean union(int x, int y) {
        int px = find(x);
        int py = find(y);
        if (px == py) return false;
        parent[py] = px;
        sz[px] += sz[py];
        return true;
    }

    public int size(int x) {
        return sz[find(x)];
    }

    public UnionFind clone() {
        UnionFind cloned = new UnionFind(parent.length);
        for (int i = 0; i < parent.length; i++) {
            cloned.parent[i] = parent[i];
            cloned.sz[i] = sz[i];
        }
        return cloned;
    }
}

class Trie {
    static class TrieNode {
        TrieNode[] next = new TrieNode[26];
        boolean isWord = false;
        long count = 0L;
    }

    TrieNode root = new TrieNode();

    public void add(String word) {
        add(word, 1L);
    }

    public void remove(String word) {
        add(word, -1L);
    }

    private void add(String word, long count) {
        TrieNode cur = root;
        cur.count += count;
        for (int i = 0; i < word.length(); i++) {
            int c = word.charAt(i) - 'a';
            if (cur.next[c] == null) cur.next[c] = new TrieNode();
            cur = cur.next[c];
            cur.count += count;
        }
        cur.isWord = true;
    }

    public boolean contains(String word) {
        TrieNode cur = root;
        for (int i = 0; i < word.length(); i++) {
            int c = word.charAt(i) - 'a';
            if (cur.next[c] == null || cur.next[c].count <= 0L) return false;
            cur = cur.next[c];
            //if (cur.isWord) return true;
        }
        return cur.isWord;
    }
}

// Tested by Leetcode 1707 and Leetcode 1803
class TrieBinary {
    static class TrieNode {
        TrieNode[] next = new TrieNode[2];
        long count;
    }

    private TrieNode root;
    private int numOfBits;

    public TrieBinary(int numOfBits) { // normally 31 for int and 63 for long
        this.numOfBits = numOfBits;
        this.root = new TrieNode();
    }

    public void add(long v) {
        add(v, 1L);
    }

    public void remove(long v) { // Tested by Leetcode 1938
        add(v, -1L);
    }

    public void add(long v, long count) {
        TrieNode cur = root;
        root.count += count;
        for (int i = numOfBits - 1; i >= 0; i--) {
            int b = ((v >>> i) & 1) == 0 ? 0 : 1;
            if (cur.next[b] == null) cur.next[b] = new TrieNode();
            cur = cur.next[b];
            cur.count += count;
        }
    }

    // Tested by Leetcode 1707
    public long xorMax(long v) {
        TrieNode cur = root;
        long key = 0;
        for (int i = numOfBits - 1; i >= 0; i--) {
            int b = ((v >>> i) & 1) == 0 ? 0 : 1;
            if (cur.next[1 - b] != null && cur.next[1 - b].count > 0) {
                cur = cur.next[1 - b];
                key |= (1L - b) << i;
            } else {
                cur = cur.next[b];
                key |= (long) b << i;
            }
        }
        return key ^ v;
    }

    public boolean contains(long v) {
        TrieNode cur = root;
        for (int i = numOfBits - 1; i >= 0; i--) {
            int b = ((v >>> i) & 1) == 0 ? 0 : 1;
            if (cur.next[b] == null || cur.next[b].count <= 0) return false;
            cur = cur.next[b];
        }
        return true;
    }

    // Tested by Leetcode 1803
    // count(x ^ v <= limit)
    public long xorLessOrEqualCount(long v, long limit) {
        if (limit < 0) return 0;
        TrieNode cur = root;
        long ans = 0;
        for (int i = numOfBits - 1; i >= 0; i--) {
            int bitLimit = ((limit >>> i) & 1) == 0 ? 0 : 1;
            int bitV = ((v >>> i) & 1) == 0 ? 0 : 1;
            if (bitLimit == 1) {
                ans += (cur.next[bitV] != null ? cur.next[bitV].count : 0);
            }
            cur = cur.next[bitV ^ bitLimit];
            if (cur == null) break;
            if (i == 0) ans += cur.count;
        }
        return ans;
    }
}

// Lazy execution example is in https://leetcode.com/submissions/detail/1034182539/
// Refer to AlgorithmCompilation.java

// [Template] Classic Segment Tree (Range Sum), used for Template
class ClassicSegmentTree { // For Range Sum
    class TreeNode {
        TreeNode left, right;
        long sum;
    }

    private final TreeNode root;
    private final int L, R;

    public ClassicSegmentTree(int[] input) {
        L = 0;
        R = input.length - 1;
        root = new TreeNode();
        build(root, L, R, input);
    }

    private void build(TreeNode root, int l, int r, int[] input) {
        if (l == r) {
            root.sum = input[l];
            return;
        }
        int m = (l + r) >> 1;
        root.left = new TreeNode();
        root.right = new TreeNode();
        build(root.left, l, m, input);
        build(root.right, m + 1, r, input);
        root.sum = root.left.sum + root.right.sum;
    }

    public void set(int index, int value) {
        set(root, L, R, index, value);
    }

    private void set(TreeNode root, int L, int R, int index, int value) {
        if (index < L || R < index) return;
        if (L == R) {
            root.sum = value;
            return;
        }
        int M = L + ((R - L) >> 1);
        if (index <= M) {
            set(root.left, L, M, index, value);
        } else {
            set(root.right, M + 1, R, index, value);
        }
        root.sum = root.left.sum + root.right.sum;
    }

    // Sum[queryL...queryR] inclusive
    public long query(int queryL, int queryR) {
        return query(root, L, R, queryL, queryR);
    }

    // [queryL, queryR] is range of query, [L, R] are range of TreeNode.
    private long query(TreeNode root, int L, int R, int queryL, int queryR) {
        if (root == null || queryL > R || queryR < L) return 0L;
        if (queryL <= L && R <= queryR) return root.sum;
        int M = L + ((R - L) >> 1);
        return query(root.left, L, M, queryL, queryR) + query(root.right, M + 1, R, queryL, queryR);
    }
}

// Tested by Leetcode 307
class DynamicSegmentTreeRangeSum {
    class TreeNode {
        TreeNode left, right;
        long sum;
    }

    private final TreeNode root;
    private final long L, R;

    public DynamicSegmentTreeRangeSum(long l, long r) {
        L = l;
        R = r;
        root = new TreeNode();
    }

    public long get(long index) {
        long l = L, r = R;
        TreeNode cur = root;
        while (l < r && cur != null) {
            long m = (l + r) >> 1;
            if (index <= m) {
                cur = cur.left;
                r = m;
            } else {
                cur = cur.right;
                l = m + 1;
            }
        }
        return sum(cur);
    }

    public void add(long index, long value) {
        set(index, get(index) + value);
    }

    private long sum(TreeNode node) {
        return node == null ? 0L : node.sum;
    }

    public void set(long index, long value) {
        set(root, L, R, index, value);
    }

    private void set(TreeNode root, long L, long R, long index, long value) {
        if (index < L || R < index) return;
        if (L == R) {
            root.sum = value;
            return;
        }
        long M = L + ((R - L) >> 1);
        if (index <= M) {
            if (root.left == null) root.left = new TreeNode();
            set(root.left, L, M, index, value);
        } else {
            if (root.right == null) root.right = new TreeNode();
            set(root.right, M + 1, R, index, value);
        }
        root.sum = sum(root.left) + sum(root.right);
    }

    // Sum[queryL...queryR] inclusive
    public long query(long queryL, long queryR) {
        return query(root, L, R, queryL, queryR);
    }

    // [queryL, queryR] is range of query, [L, R] are range of TreeNode.
    private long query(TreeNode root, long L, long R, long queryL, long queryR) {
        if (root == null || queryL > R || queryR < L) return 0L;
        if (queryL <= L && R <= queryR) return root.sum;
        long M = L + ((R - L) >> 1);
        return query(root.left, L, M, queryL, queryR) + query(root.right, M + 1, R, queryL, queryR);
    }
}

// Tested by Leetcode 239, 2926
class DynamicSegmentTreeRangeMax {
    class TreeNode {
        TreeNode left, right;
        long max = Long.MIN_VALUE;
    }

    private final TreeNode root;
    private final long L, R;

    public DynamicSegmentTreeRangeMax(long l, long r) {  // [l, r] inclusive
        L = l;
        R = r;
        root = new TreeNode();
    }

    public long get(long index) {
        long l = L, r = R;
        TreeNode cur = root;
        while (l < r && cur != null) {
            long m = (l + r) >> 1;
            if (index <= m) {
                cur = cur.left;
                r = m;
            } else {
                cur = cur.right;
                l = m + 1;
            }
        }
        return max(cur);
    }

    private long max(TreeNode node) {
        return node == null ? Long.MIN_VALUE : node.max;
    }

    public void set(long index, long value) {
        set(root, L, R, index, value);
    }

    private void set(TreeNode root, long L, long R, long index, long value) {
        if (index < L || R < index) return;
        if (L == R) {
            root.max = value;
            return;
        }

        long M = L + ((R - L) >> 1);
        if (index <= M) {
            if (root.left == null) root.left = new TreeNode();
            set(root.left, L, M, index, value);
        } else {
            if (root.right == null) root.right = new TreeNode();
            set(root.right, M + 1, R, index, value);
        }
        root.max = Math.max(max(root.left), max(root.right));
    }

    // Max[queryL...queryR] inclusive
    public long query(long queryL, long queryR) {
        return query(root, L, R, queryL, queryR);
    }

    // [queryL, queryR] is range of query, [L, R] are range of TreeNode.
    private long query(TreeNode root, long L, long R, long queryL, long queryR) {
        if (root == null || queryL > R || queryR < L) return Long.MIN_VALUE;
        if (queryL <= L && R <= queryR) return root.max;
        long M = L + ((R - L) >> 1);
        return Math.max(query(root.left, L, M, queryL, queryR), query(root.right, M + 1, R, queryL, queryR));
    }
}

class DynamicSegmentTreeRangeMin {
    class TreeNode {
        TreeNode left, right;
        long min = Long.MAX_VALUE;
    }

    private final TreeNode root;
    private final long L, R;

    public DynamicSegmentTreeRangeMin(long l, long r) {  // [l, r] inclusive
        L = l;
        R = r;
        root = new TreeNode();
    }

    public long get(long index) {
        long l = L, r = R;
        TreeNode cur = root;
        while (l < r && cur != null) {
            long m = (l + r) >> 1;
            if (index <= m) {
                cur = cur.left;
                r = m;
            } else {
                cur = cur.right;
                l = m + 1;
            }
        }
        return min(cur);
    }

    private long min(TreeNode node) {
        return node == null ? Long.MAX_VALUE : node.min;
    }

    public void set(long index, long value) {
        set(root, L, R, index, value);
    }

    private void set(TreeNode root, long L, long R, long index, long value) {
        if (index < L || R < index) return;
        if (L == R) {
            root.min = value;
            return;
        }

        long M = L + ((R - L) >> 1);
        if (index <= M) {
            if (root.left == null) root.left = new TreeNode();
            set(root.left, L, M, index, value);
        } else {
            if (root.right == null) root.right = new TreeNode();
            set(root.right, M + 1, R, index, value);
        }
        root.min = Math.min(min(root.left), min(root.right));
    }

    // Max[queryL...queryR] inclusive
    public long query(long queryL, long queryR) {
        return query(root, L, R, queryL, queryR);
    }

    // [queryL, queryR] is range of query, [L, R] are range of TreeNode.
    private long query(TreeNode root, long L, long R, long queryL, long queryR) {
        if (root == null || queryL > R || queryR < L) return Long.MAX_VALUE;
        if (queryL <= L && R <= queryR) return root.min;
        long M = L + ((R - L) >> 1);
        return Math.min(query(root.left, L, M, queryL, queryR), query(root.right, M + 1, R, queryL, queryR));
    }
}

class BinaryIndexTree {
    private long[] c;
    private int n;

    // NOTE: index is from 1 to n. (NOT 0 ... n - 1)
    public BinaryIndexTree(int n) {
        this.n = n;
        this.c = new long[n + 1];
    }

    // Add value to position k, k is from 1 to n.
    public void add(int k, long value) {
        while (k <= n) {
            c[k] += value;
            k += (k & (k ^ (k - 1)));
        }
    }

    // k is from 1 to n.
    public long getSum(int k) {
        long sum = 0;
        while (k > 0) {
            sum += c[k];
            k -= (k & (k ^ (k - 1)));
        }
        return sum;
    }
}

class RangeSum {
    BinaryIndexTree tree;
    int start;

    // [low, high] inclusive
    public RangeSum(int low, int high) {
        start = low;
        tree = new BinaryIndexTree(high - low + 1);
    }

    public void add(int index, long value) {
        tree.add(index - start + 1, value);
    }

    public long get(int index) {
        return tree.getSum(index - start + 1) - tree.getSum(index - start);
    }

    public void set(int index, long value) {
        tree.add(index - start + 1, value - get(index));
    }

    // [l, r] inclusive
    public long getSum(int l, int r) {
        return tree.getSum(r - start + 1) - tree.getSum(l - start);
    }
}

class RangeMax {
    int start;
    int n;
    long[] t;

    // [low, high] inclusive
    public RangeMax(int low, int high) {
        start = low;
        n = high - low + 1;
        t = new long[n * 2 + 2];
        Arrays.fill(t, Long.MIN_VALUE);
    }

    public RangeMax(int low, int high, long defaultValue) {
        start = low;
        n = high - low + 1;
        t = new long[n * 2 + 2];
        Arrays.fill(t, defaultValue);
    }

    long get(int index) {
        return t[index - start + n];
    }

    void set(int index, long value) {
        index -= start;
        for (t[index += n] = value; (index >>= 1) > 0; ) {
            t[index] = Math.max(t[index << 1], t[index << 1 | 1]);
        }
    }

    // [l, r] inclusive
    long getMax(int l, int r) {
        l -= start;
        r = (r + 1 - start); // make it as [l, r)
        long resl = Long.MIN_VALUE, resr = Long.MIN_VALUE;
        for (l += n, r += n; l < r; l >>= 1, r >>= 1) {
            if ((l & 1) != 0) resl = Math.max(resl, t[l++]);
            if ((r & 1) != 0) resr = Math.max(t[--r], resr);
        }
        return Math.max(resl, resr);
    }
}

class RangeMin {
    int start;
    int n;
    long[] t;

    // [low, high] inclusive
    public RangeMin(int low, int high) {
        start = low;
        n = high - low + 1;
        t = new long[n * 2 + 2];
        Arrays.fill(t, Long.MAX_VALUE);
    }

    public RangeMin(int low, int high, long defaultValue) {
        start = low;
        n = high - low + 1;
        t = new long[n * 2 + 2];
        Arrays.fill(t, defaultValue);
    }

    long get(int index) {
        return t[index - start + n];
    }

    void set(int index, long value) {
        index -= start;
        for (t[index += n] = value; (index >>= 1) > 0; ) {
            t[index] = Math.min(t[index << 1], t[index << 1 | 1]);
        }
    }

    // [l, r] inclusive
    long getMin(int l, int r) {
        l -= start;
        r = (r + 1 - start); // make it as [l, r)
        long resl = Long.MAX_VALUE, resr = Long.MAX_VALUE;
        for (l += n, r += n; l < r; l >>= 1, r >>= 1) {
            if ((l & 1) != 0) resl = Math.min(resl, t[l++]);
            if ((r & 1) != 0) resr = Math.min(t[--r], resr);
        }
        return Math.min(resl, resr);
    }
}

// Including topological sort.
class GraphIntegerFaster {
    public List<Integer>[] adj;

    public GraphIntegerFaster(int n) {
        adj = new List[n];
        for (int i = 0; i < n; i++) adj[i] = new ArrayList<>();
    }

    // directed edge x -> y
    public void link(int x, int y) {
        adj[x].add(y);
    }

    public List<Integer> getChildren(int x) {
        return adj[x];
    }

    private static final int TEMPORARY = 1;
    private static final int PERMANENT = 2;

    // x -> y means x should be processed before y
    // The input is a directed graph.
    // 1. return null, means there is a cycle inside the graph, or the input is
    // invalid.
    // 2. return List<Node> as the result.
    public List<Integer> topologicalSort() {
        //Map<E, Integer> vst = new HashMap<>();
        int n = adj.length;
        int[] vst = new int[n];
        List<Integer> result = new ArrayList<>();
        for (int x = 0; x < n; x++) {
            if (!topologicalSort(x, vst, result)) {
                return null;
            }
        }
        Collections.reverse(result);
        return result;
    }

    private boolean topologicalSort(int root, int[] vst, List<Integer> result) {
        if (vst[root] == PERMANENT) {
            return true;
        }
        if (vst[root] == TEMPORARY) { // found cycle
            return false;
        }

        vst[root] = TEMPORARY;
        for (int child : getChildren(root)) {
            if (!topologicalSort(child, vst, result)) {
                return false;
            }
        }
        result.add(root);
        vst[root] = PERMANENT;
        return true;
    }
}

class DijkstraLongFaster {
    public static class Edge {
        int to;
        long w;

        public Edge(int to, long w) {
            this.to = to;
            this.w = w;
        }
    }

    public static final long INF = Long.MAX_VALUE / 4;
    public List<Edge>[] adj;

    public DijkstraLongFaster(int n) {
        this.adj = new List[n];
        for (int i = 0; i < n; i++) adj[i] = new ArrayList<>();
    }

    public void link(int x, int y, long w) {
        adj[x].add(new Edge(y, w));
    }

    public long[] shortestPath(int src) {
        int n = adj.length;
        long[] dist = new long[n];
        boolean[] vst = new boolean[n];
        Arrays.fill(dist, INF);

        PriorityQueue<Edge> q = new PriorityQueue<>((a, b) -> Long.compare(a.w, b.w));
        q.add(new Edge(src, 0));
        dist[src] = 0;

        while (!q.isEmpty()) {
            Edge cur = q.poll();
            if (vst[cur.to]) continue;
            int u = cur.to;
            long w = cur.w;
            vst[u] = true;

            for (Edge e : adj[u]) {
                if (!vst[e.to] && dist[e.to] > w + e.w) {
                    dist[e.to] = w + e.w;
                    q.add(new Edge(e.to, dist[e.to]));
                }
            }
        }
        return dist;
    }

    // NOTE: w of each edge must be the same.
    public long[] bfs(int src) {
        int n = adj.length;
        long[] dist = new long[n];
        boolean[] vst = new boolean[n];
        Arrays.fill(dist, INF);

        Queue<Integer> q = new ArrayDeque<>();
        q.add(src);
        dist[src] = 0;
        vst[src] = true;

        while (!q.isEmpty()) {
            int u = q.poll();
            long w = dist[u];
            for (Edge e : adj[u]) {
                if (!vst[e.to]) {
                    dist[e.to] = w + e.w;
                    vst[e.to] = true;
                    q.add(e.to);
                }
            }
        }
        return dist;
    }
}

class TreapSet<E> {
    private class Node {
        E key;
        int priority, count, total;
        Node left, right, pnt;

        public Node(E key, int priority, Node pnt) {
            this.key = key;
            this.priority = priority;
            this.pnt = pnt;
            this.count = 1;
            this.total = 1;
        }
    }

    private static final Random RANDOM = new Random();
    private final Comparator<? super E> comparator;
    private Node root;

    public TreapSet(Comparator<? super E> comparator) {
        this.comparator = comparator;
    }

    public boolean isEmpty() {
        return root == null;
    }

    public void clear() {
        root = null;
    }

    public int size() {
        return root == null ? 0 : root.total;
    }

    private int leftRank(Node p) {
        return p.left != null ? p.left.total : 0;
    }

    private int rightRank(Node p) {
        return p.right != null ? p.right.total : 0;
    }

    private void rotateLeft(Node x) {
        Node y = x.right;
        if ((x.right = y.left) != null) y.left.pnt = x;
        y.pnt = x.pnt;
        if (x == root) root = y;
        else if (x == x.pnt.left) x.pnt.left = y;
        else x.pnt.right = y;
        y.left = x;
        x.pnt = y;
        x.total = leftRank(x) + rightRank(x) + x.count;
        y.total = leftRank(y) + rightRank(y) + y.count;
    }

    private void rotateRight(Node x) {
        Node y = x.left;
        if ((x.left = y.right) != null) y.right.pnt = x;
        y.pnt = x.pnt;
        if (x == root) root = y;
        else if (x == x.pnt.right) x.pnt.right = y;
        else x.pnt.left = y;
        y.right = x;
        x.pnt = y;
        x.total = leftRank(x) + rightRank(x) + x.count;
        y.total = leftRank(y) + rightRank(y) + y.count;
    }

    public void add(E key) {
        if (root == null) {
            root = new Node(key, RANDOM.nextInt(), null);
            return;
        }
        Node x = root, p = null;
        while (x != null) {
            ++((p = x).total);
            int cmp = comparator.compare(key, x.key);
            if (cmp < 0) x = x.left;
            else if (cmp > 0) x = x.right;
            else {
                ++(x.count);
                return;
            }
        }

        x = new Node(key, RANDOM.nextInt(), p);
        if (comparator.compare(key, p.key) < 0) p.left = x;
        else p.right = x;
        while ((p = x.pnt) != null && p.priority < x.priority) {
            if (p.left == x) rotateRight(p);
            else rotateLeft(p);
        }
    }

    public void remove(E key) {
        Node x = root, p = null;
        while (x != null) {
            --(x.total);
            int cmp = comparator.compare(key, x.key);
            if (cmp < 0) x = x.left;
            else if (cmp > 0) x = x.right;
            else {
                if (--(x.count) > 0) return;
                break;
            }
        }
        if (x == null) return;
        while (x.left != null || x.right != null) {
            if (x.left == null || (x.right != null && x.right.priority > x.left.priority)) {
                rotateLeft(x);
            } else {
                rotateRight(x);
            }
        }
        if ((p = x.pnt) != null) {
            if (p.left == x) p.left = null;
            else p.right = null;
        } else {
            root = null;
        }
        // delete x;
    }

    // number of elements smaller than key
    public int lowerCount(E key) {
        int sum = 0;
        Node x = root;
        while (x != null) {
            int cmp = comparator.compare(key, x.key);
            if (cmp < 0) x = x.left;
            else if (cmp > 0) {
                sum += leftRank(x) + x.count;
                x = x.right;
            } else {
                sum += leftRank(x);
                break;
            }
        }
        return sum;
    }

    // number of elements larger than key
    public int higherCount(E key) {
        //return size() - lowerCount(key) - count(key);
        int sum = 0;
        Node x = root;
        while (x != null) {
            int cmp = comparator.compare(key, x.key);
            if (cmp > 0) x = x.right;
            else if (cmp < 0) {
                sum += rightRank(x) + x.count;
                x = x.left;
            } else {
                sum += rightRank(x);
                break;
            }
        }
        return sum;
    }

    public int index(E key) {
        return lowerCount(key);
    }

    public E get(int index) // index = 0 ... size - 1
    {
        Node p = root;
        ++index;
        while (true) {
            int t = leftRank(p);
            if (index <= t) p = p.left;
            else {
                if ((index -= t + p.count) <= 0) break;
                p = p.right;
            }
        }
        return p.key;
    }

    public int count(E key) {
        Node x = root;
        while (x != null) {
            int cmp = comparator.compare(key, x.key);
            if (cmp < 0) x = x.left;
            else if (cmp > 0) {
                x = x.right;
            } else {
                return x.count;
            }
        }
        return 0;
    }

    public E first() {
        if (root == null) return null;
        Node x = root;
        while (x.left != null) {
            x = x.left;
        }
        return x.key;
    }

    public E last() {
        if (root == null) return null;
        Node x = root;
        while (x.right != null) {
            x = x.right;
        }
        return x.key;
    }

    public boolean contains(E key) {
        return count(key) > 0;
    }

    public E ceiling(E key) {
        int id = lowerCount(key);
        return id >= size() ? null : get(id);
    }

    public E floor(E key) {
        int id = size() - higherCount(key) - 1;
        return id < 0 ? null : get(id);
    }

    public E lower(E key) {
        int id = lowerCount(key) - 1;
        return id < 0 ? null : get(id);
    }

    public E higher(E key) {
        int id = size() - higherCount(key);
        return id >= size() ? null : get(id);
    }

    // return the first index whose value >= target
    // if this value doesn't exist, return index = size()
    public int lowerBound(E target) {
        return lowerCount(target);
    }

    // return the first index whose value > target
    // if this value doesn't exist, return index = size()
    public int upperBound(E target) {
        return size() - higherCount(target);
    }

    public List<E> keys() {
        List<E> list = new ArrayList<>();
        inorder(root, list);
        return list;
    }

    private void inorder(Node x, List<E> list) {
        if (x == null) return;
        inorder(x.left, list);
        list.add(x.key);
        inorder(x.right, list);
    }
}

class ArraySum {
    long[] sum;
    int n;

    // nums index starts from 0 to nums.length - 1;
    public ArraySum(int[] nums) {
        n = nums.length;
        sum = new long[nums.length + 1];
        for (int i = 1; i <= nums.length; i++) {
            sum[i] = sum[i - 1] + nums[i - 1];
        }
    }

    public ArraySum(long[] nums) {
        n = nums.length;
        sum = new long[nums.length + 1];
        for (int i = 1; i <= nums.length; i++) {
            sum[i] = sum[i - 1] + nums[i - 1];
        }
    }

    // [l, r], index starts from 0
    public long getSum(int l, int r) {
        // error handling
        if (l > r || !(l >= 0 && l < n && r >= 0 && r < n)) return 0L;
        return sum[r + 1] - sum[l];
    }
}

class TwoDArraySum {
    int[][] sum;
    int m, n;

    // nums index starts from 0
    public TwoDArraySum(final int[][] nums) {
        m = nums.length;
        n = nums[0].length;
        sum = new int[m + 1][n + 1];
        for (int i = 1; i <= m; i++) {
            for (int j = 1; j <= n; j++) {
                sum[i][j] = sum[i][j - 1] + sum[i - 1][j] - sum[i - 1][j - 1] + nums[i - 1][j - 1];
            }
        }
    }

    // [(x1, y1), (x2, y2)], index starts from 0
    // x1 <= x2 and y1 <= y2
    public int getSum(int x1, int y1, int x2, int y2) {
        if (!(x1 >= 0 && x1 < m && y1 >= 0 && y1 < n && x2 >= 0 && x2 < m && y2 >= 0 && y2 < n) || x1 > x2 || y1 > y2)
            return 0;
        return sum[x2 + 1][y2 + 1] - sum[x2 + 1][y1] - sum[x1][y2 + 1] + sum[x1][y1];
    }
}

class ArrayUtils {
    static void fill(int[] array, int defaultValue) {
        Arrays.fill(array, defaultValue);
    }

    static void fill(int[][] array, int defaultValue) {
        for (int[] a1 : array) {
            Arrays.fill(a1, defaultValue);
        }
    }

    static void fill(int[][][] array, int defaultValue) {
        for (int[][] a2 : array) {
            for (int[] a1 : a2) {
                Arrays.fill(a1, defaultValue);
            }
        }
    }

    static void fill(int[][][][] array, int defaultValue) {
        for (int[][][] a3 : array) {
            for (int[][] a2 : a3) {
                for (int[] a1 : a2) {
                    Arrays.fill(a1, defaultValue);
                }
            }
        }
    }

    static void fill(int[][][][][] array, int defaultValue) {
        for (int[][][][] a4 : array) {
            for (int[][][] a3 : a4) {
                for (int[][] a2 : a3) {
                    for (int[] a1 : a2) {
                        Arrays.fill(a1, defaultValue);
                    }
                }
            }
        }
    }

    static void fill(int[][][][][][] array, int defaultValue) {
        for (int[][][][][] a5 : array) {
            for (int[][][][] a4 : a5) {
                for (int[][][] a3 : a4) {
                    for (int[][] a2 : a3) {
                        for (int[] a1 : a2) {
                            Arrays.fill(a1, defaultValue);
                        }
                    }
                }
            }
        }
    }

    static void fill(long[] array, long defaultValue) {
        Arrays.fill(array, defaultValue);
    }

    static void fill(long[][] array, long defaultValue) {
        for (long[] a1 : array) {
            Arrays.fill(a1, defaultValue);
        }
    }

    static void fill(long[][][] array, long defaultValue) {
        for (long[][] a2 : array) {
            for (long[] a1 : a2) {
                Arrays.fill(a1, defaultValue);
            }
        }
    }

    static void fill(long[][][][] array, long defaultValue) {
        for (long[][][] a3 : array) {
            for (long[][] a2 : a3) {
                for (long[] a1 : a2) {
                    Arrays.fill(a1, defaultValue);
                }
            }
        }
    }

    static void fill(long[][][][][] array, long defaultValue) {
        for (long[][][][] a4 : array) {
            for (long[][][] a3 : a4) {
                for (long[][] a2 : a3) {
                    for (long[] a1 : a2) {
                        Arrays.fill(a1, defaultValue);
                    }
                }
            }
        }
    }

    static void fill(long[][][][][][] array, long defaultValue) {
        for (long[][][][][] a5 : array) {
            for (long[][][][] a4 : a5) {
                for (long[][][] a3 : a4) {
                    for (long[][] a2 : a3) {
                        for (long[] a1 : a2) {
                            Arrays.fill(a1, defaultValue);
                        }
                    }
                }
            }
        }
    }
}

class CharacterUtils {
    static boolean[] vowel = new boolean[128];

    static {
        vowel['a'] = vowel['e'] = vowel['i'] = vowel['o'] = vowel['u'] = true;
        vowel['A'] = vowel['E'] = vowel['I'] = vowel['O'] = vowel['U'] = true;
    }

    static boolean isVowel(char ch) {
        return vowel[ch];
    }

    static boolean isLetter(char ch) {
        return ((ch - 'a') >= 0 && (ch - 'a') < 26) ||
                ((ch - 'A') >= 0 && (ch - 'A') < 26);
    }

    static boolean isLowerCase(char ch) {
        return (ch - 'a') >= 0 && (ch - 'a') < 26;
    }

    static boolean isUpperCase(char ch) {
        return (ch - 'A') >= 0 && (ch - 'A') < 26;
    }

    static boolean isDigit(char ch) {
        return (ch - '0') >= 0 && (ch - '0') <= 9;
    }
}

class DoubleUtils {
    private static final double EPS = 1e-8;

    public static int compare(double a, double b) {
        if (a - b > EPS) return 1;
        else if (a - b < -EPS) return -1;
        else return 0;
    }

    public static boolean isInteger(double a) {
        return compare(floor(a), a) == 0;
    }

    public static double floor(double a) {
        return Math.floor(a + EPS);
    }

    public static double ceil(double a) {
        return Math.ceil(a - EPS);
    }
}

class MatrixUtils {
    static final long MOD = 1_000_000_007L;

    // matrix[n][n], matrix[i][i] = 1
    static long[][] genIdentityMatrix(int n) {
        long[][] matrix = new long[n][n];
        for (int i = 0; i < n; i++) matrix[i][i] = 1;
        return matrix;
    }

    static long[][] multiply(long[][] a, long[][] b, long MOD) {
        int m1 = a.length;
        int n1 = a[0].length;
        int m2 = b.length;
        int n2 = b[0].length;
        if (n1 != m2) return null;
        long[][] res = new long[m1][n2];
        for (int i = 0; i < m1; i++) {
            for (int j = 0; j < n2; j++) {
                for (int k = 0; k < n1; k++) {
                    res[i][j] = (res[i][j] + a[i][k] * b[k][j]) % MOD;
                }
            }
        }
        return res;
    }

    static long[][] multiply(long[][] a, long[][] b) {
        int m1 = a.length;
        int n1 = a[0].length;
        int m2 = b.length;
        int n2 = b[0].length;
        if (n1 != m2) return null;
        long[][] res = new long[m1][n2];
        for (int i = 0; i < m1; i++) {
            for (int j = 0; j < n2; j++) {
                for (int k = 0; k < n1; k++) {
                    res[i][j] = (res[i][j] + a[i][k] * b[k][j]);
                }
            }
        }
        return res;
    }

    // a^b % MOD
    static long[][] powMod(long[][] a, long b, long MOD) {
        int n = a.length;
        long[][] res = genIdentityMatrix(n);
        while (b > 0) {
            if ((b & 1) != 0) res = multiply(res, a, MOD);
            a = multiply(a, a, MOD);
            b >>= 1;
        }
        return res;
    }

    static void print(long[][] matrix) {
        for (int i = 0; i < matrix.length; i++) {
            System.out.println(Arrays.toString(matrix[i]));
        }
    }
}

class IntegerUtils {
    static long[] power10 = new long[19]; // 10^i

    static {
        power10[0] = 1L;
        for (int i = 1; i < power10.length; i++) {
            power10[i] = power10[i - 1] * 10;
        }
    }

    // swap index i and j of integer (long) num. i == 0 means the lowest position.
    static long swapDigit(long num, int i, int j) {
        if (i == j) return num;
        long di = num / power10[i] % 10L;
        long dj = num / power10[j] % 10L;
        return num - di * power10[i] - dj * power10[j] + dj * power10[i] + di * power10[j];
    }
}

class StringUtils {
    // This function is deprecated, please hash(int l, int r) in class StableStringHash or StringHash
    // rolling hash of substrings of 's' with length == k
    // long[pos] = hash(s.substring(pos, pos + k))
    public static long[] rollingHash(String s, int k) {
        long[] ans = new long[s.length() - k + 1];
        int seed1 = 31;
        int seed2 = 131;
        int h1 = 0, h2 = 0, power1 = 1, power2 = 1;
        for (int i = 0; i < k; i++) {
            h1 = h1 * seed1 + s.charAt(i);
            h2 = h2 * seed2 + s.charAt(i);

            power1 *= seed1;
            power2 *= seed2;
        }

        ans[0] = ((long) h1 << 32) | ((long) h2 << 32 >>> 32);
        for (int i = k; i < s.length(); i++) {
            h1 = h1 * seed1 + s.charAt(i) - power1 * s.charAt(i - k);
            h2 = h2 * seed2 + s.charAt(i) - power2 * s.charAt(i - k);
            ans[i - k + 1] = ((long) h1 << 32) | ((long) h2 << 32 >>> 32);
        }

        return ans;
    }

    public static int[] kmpNext(String s) {
        int n = s.length();
        int[] next = new int[n];
        next[0] = 0;
        for (int i = 1; i < n; i++) {
            int k = next[i - 1];
            while (k > 0 && s.charAt(i) != s.charAt(k)) k = next[k - 1];
            if (s.charAt(i) == s.charAt(k)) {
                next[i] = k + 1;
            } else {
                next[i] = 0;
            }
        }
        return next;
    }

    // s is the original String
    // p is the pattern String
    public static boolean kmpMatch(String s, String p) {
        int[] next = kmpNext(p);
        int n = s.length();
        int m = p.length();
        for (int i = 0, j = 0; i < n; i++) {
            while (j > 0 && p.charAt(j) != s.charAt(i)) {
                j = next[j - 1];
            }
            if (p.charAt(j) == s.charAt(i)) j++;
            if (j == m) return true;
        }
        return false;
    }

    public static int[] kmpNext(int[] s) {
        int n = s.length;
        int[] next = new int[n];
        next[0] = 0;
        for (int i = 1; i < n; i++) {
            int k = next[i - 1];
            while (k > 0 && s[i] != s[k]) k = next[k - 1];
            if (s[i] == s[k]) {
                next[i] = k + 1;
            } else {
                next[i] = 0;
            }
        }
        return next;
    }

    // s is the original String
    // p is the pattern String
    public static boolean kmpMatch(int[] s, int[] p) {
        int[] next = kmpNext(p);
        int n = s.length;
        int m = p.length;
        for (int i = 0, j = 0; i < n; i++) {
            while (j > 0 && p[j] != s[i]) {
                j = next[j - 1];
            }
            if (p[j] == s[i]) j++;
            if (j == m) return true;
        }
        return false;
    }

    // Z[i] = longest length of common prefix of str[0 ... n - 1] and str[i ... n - 1]
    // Tested by LC2223, LC459
    public static int[] zFunction(String str) {
        int n = str.length();
        int[] Z = new int[n];
        // [L,R] makes a window which matches with prefix of s
        int L = 0, R = 0;
        Z[0] = n;
        for (int i = 1; i < n; ++i) {
            if (i > R) {
                L = R = i;
                while (R < n && str.charAt(R - L) == str.charAt(R)) R++;
                Z[i] = R - L;
                R--;
            } else {
                int k = i - L;
                if (Z[k] < R - i + 1) {
                    Z[i] = Z[k];
                } else {
                    L = i;
                    while (R < n && str.charAt(R - L) == str.charAt(R)) R++;
                    Z[i] = R - L;
                    R--;
                }
            }
        }
        return Z;
    }
}

// Better to use this when length of string >= 2^11
class StringHash {
    static class SingleStringHash {
        long[] h;
        long[] pow;
        final long SEED;
        final long MOD;

        public SingleStringHash(String s, long SEED, long MOD) { // example: SEED = 131L;
            this.SEED = SEED;
            this.MOD = MOD;
            int n = s.length();
            h = new long[n + 1];
            pow = new long[n + 1];
            pow[0] = 1;
            for (int i = 1; i <= n; i++) pow[i] = (pow[i - 1] * SEED) % MOD;
            //h[i] = hash[s[0...i - 1]]
            h[0] = 0;
            for (int i = 1; i <= n; i++) {
                h[i] = (h[i - 1] * SEED + s.charAt(i - 1)) % MOD;
            }
        }

        // hash[s[l....r]]
        public long hash(int l, int r) {
            long ret = (h[r + 1] - h[l] * pow[r - l + 1]) % MOD;
            return ret >= 0 ? ret : ret + MOD;
        }
    }

    private SingleStringHash hash1, hash2;
    static final long SEED1 = 31L, SEED2 = 131L;
    static final long MOD = 1_000_000_007L;

    public StringHash(String s) {
        hash1 = new SingleStringHash(s, SEED1, MOD);
        hash2 = new SingleStringHash(s, SEED2, MOD);
    }

    public long hash(int l, int r) {
        return (hash1.hash(l, r) << 32) | (hash2.hash(l, r) << 32 >>> 32);
    }

    public static long hashCode(String s) {
        long h1 = 0, h2 = 0;
        for (int i = 0; i < s.length(); i++) {
            h1 = (h1 * SEED1 + s.charAt(i)) % MOD;
            h2 = (h2 * SEED2 + s.charAt(i)) % MOD;
        }
        return (h1 << 32) | (h2 << 32 >>> 32);
    }

    public static long hashCode(char[] s) {
        long h1 = 0, h2 = 0;
        for (int i = 0; i < s.length; i++) {
            h1 = (h1 * SEED1 + s[i]) % MOD;
            h2 = (h2 * SEED2 + s[i]) % MOD;
        }
        return (h1 << 32) | (h2 << 32 >>> 32);
    }
}

class IntegerArrayHash {
    static class SingleIntegerArrayHash {
        long[] h;
        long[] pow;
        final long SEED;
        final long MOD;

        public SingleIntegerArrayHash(int[] s, long SEED, long MOD) { // example: SEED = 131L;
            this.SEED = SEED;
            this.MOD = MOD;
            int n = s.length;
            h = new long[n + 1];
            pow = new long[n + 1];
            pow[0] = 1;
            for (int i = 1; i <= n; i++) pow[i] = (pow[i - 1] * SEED) % MOD;
            //h[i] = hash[s[0...i - 1]]
            h[0] = 0;
            for (int i = 1; i <= n; i++) {
                h[i] = (h[i - 1] * SEED + s[i - 1]) % MOD;
                if (h[i] < 0) h[i] += MOD;
            }
        }

        // hash[s[l....r]]
        public long hash(int l, int r) {
            long ret = (h[r + 1] - h[l] * pow[r - l + 1]) % MOD;
            return ret >= 0 ? ret : ret + MOD;
        }
    }

    private SingleIntegerArrayHash hash1, hash2;
    static final long SEED1 = 31L, SEED2 = 131L;
    static final long MOD = 1_000_000_007L; // or 1_000_000_123L

    public IntegerArrayHash(int[] s) {
        hash1 = new SingleIntegerArrayHash(s, SEED1, MOD);
        hash2 = new SingleIntegerArrayHash(s, SEED2, MOD);
    }

    public long hash(int l, int r) {
        return (hash1.hash(l, r) << 32) | (hash2.hash(l, r) << 32 >>> 32);
    }

    public static long hashCode(int[] s) {
        long h1 = 0, h2 = 0;
        for (int i = 0; i < s.length; i++) {
            h1 = (h1 * SEED1 + s[i]) % MOD;
            if (h1 < 0) h1 += MOD;
            h2 = (h2 * SEED2 + s[i]) % MOD;
            if (h2 < 0) h2 += MOD;
        }
        return (h1 << 32) | (h2 << 32 >>> 32);
    }

    public static long hashCode(List<Integer> s) {
        long h1 = 0, h2 = 0;
        for (int i = 0; i < s.size(); i++) {
            h1 = (h1 * SEED1 + s.get(i)) % MOD;
            if (h1 < 0) h1 += MOD;
            h2 = (h2 * SEED2 + s.get(i)) % MOD;
            if (h2 < 0) h2 += MOD;
        }
        return (h1 << 32) | (h2 << 32 >>> 32);
    }
}

class RMQ { // NOTE!!! query return index, not value
    // tested by LC 1438,239
    final long[] a; // input data array copy
    int[][] d;

    int[] log2;
    boolean useMax;

    private static long[] intArrayToLongArray(int[] nums) {
        long[] ret = new long[nums.length];
        for (int i = 0; i < nums.length; i++) ret[i] = nums[i];
        return ret;
    }

    // useMax == true means RMQMax
    public RMQ(int[] input, boolean useMax) {
        this(intArrayToLongArray(input), useMax);
    }

    public RMQ(long[] input, boolean useMax) {
        int n = input.length;
        this.a = input;
        this.log2 = Utils.preprocessLog2(n);
        this.useMax = useMax;
        this.d = new int[log2[n] + 1][n];
        for (int i = 0; i < n; i++) d[0][i] = i;
        for (int j = 1; (1 << j) <= n; j++)
            for (int i = 0; i + (1 << j) <= n; i++)
                if (useMax) {
                    d[j][i] = a[d[j - 1][i]] >= a[d[j - 1][i + (1 << (j - 1))]] ? d[j - 1][i] : d[j - 1][i + (1 << (j - 1))];
                } else {
                    d[j][i] = a[d[j - 1][i]] <= a[d[j - 1][i + (1 << (j - 1))]] ? d[j - 1][i] : d[j - 1][i + (1 << (j - 1))];
                }
    }

    // i <= j, and index starts from 0.
    public int query(int i, int j) { // NOTE!!! return index, not value
        int k = log2[j - i + 1];
        if (useMax) return a[d[k][i]] >= a[d[k][j - (1 << k) + 1]] ? d[k][i] : d[k][j - (1 << k) + 1];
        else return a[d[k][i]] <= a[d[k][j - (1 << k) + 1]] ? d[k][i] : d[k][j - (1 << k) + 1];
    }
}

class RMQValue { // NOTE!!! query return value, not index
    final long[] a; // input data array copy
    long[][] d;

    int[] log2;
    boolean useMax;

    private static long[] intArrayToLongArray(int[] nums) {
        long[] ret = new long[nums.length];
        for (int i = 0; i < nums.length; i++) ret[i] = nums[i];
        return ret;
    }

    // useMax == true means RMQMax
    public RMQValue(int[] input, boolean useMax) {
        this(intArrayToLongArray(input), useMax);
    }

    public RMQValue(long[] input, boolean useMax) {
        int n = input.length;
        this.a = input;
        this.log2 = Utils.preprocessLog2(n);
        this.useMax = useMax;
        this.d = new long[log2[n] + 1][n];
        for (int i = 0; i < n; i++) d[0][i] = a[i];
        for (int j = 1; (1 << j) <= n; j++)
            for (int i = 0; i + (1 << j) <= n; i++)
                if (useMax) {
                    d[j][i] = Math.max(d[j - 1][i], d[j - 1][i + (1 << (j - 1))]);
                } else {
                    d[j][i] = Math.min(d[j - 1][i], d[j - 1][i + (1 << (j - 1))]);
                }
    }

    // i <= j, and index starts from 0.
    public long query(int i, int j) {
        int k = log2[j - i + 1];
        if (useMax) return Math.max(d[k][i], d[k][j - (1 << k) + 1]);
        else return Math.min(d[k][i], d[k][j - (1 << k) + 1]);
    }
}

// Tested by 2827
// Similar: 1012, 2376, 902, 2719, 2801, 357, 1215, 1397
class DigitDP {
    static final boolean ENABLE_DEBUG_MODE = false; // TODO: set it to true if you want to print more debug info
    static final long UNSET = -1;
    // dp[isStart][hasLimit][pos] | [odd][even][r]
    // (isStart, hasLimit, pos) is generic, (odd, even, r) is use case specific
    long[][][][][][] dp;
    int K;

    public long digitDP(long num, int k) {
        String numString = String.valueOf(num); // TODO
        this.dp = new long[2][2][numString.length()][numString.length() + 1][numString.length() + 1][k];
        this.K = k;

        if (ENABLE_DEBUG_MODE) System.out.println(""num = "" + numString);
        ArrayUtils.fill(dp, UNSET);
        long ans = dfs(new StringBuilder(), numString, 1, 1, 0, 0, 0, 0);
        if (ENABLE_DEBUG_MODE) System.out.println(""---------------------\n"");
        return ans;
    }

    long dfs(StringBuilder curResult, String s, int isStart, int hasLimit, int pos, int odd, int even, int r) {
        if (pos == s.length()) {
            if (isStart == 1) return 0; // NOTE: special check for num == 0. TODO
            if (r == 0 && odd == even) { // TODO
                if (ENABLE_DEBUG_MODE) System.out.println(""result = "" + curResult);
                return 1;
            } else {
                return 0;
            }
        }
        if (dp[isStart][hasLimit][pos][odd][even][r] != UNSET) return dp[isStart][hasLimit][pos][odd][even][r];

        int start = 0;
        int end = (hasLimit == 1) ? s.charAt(pos) - '0' : 9; // TODO: check if it is binary string or not

        long ans = 0;
        for (int digit = start; digit <= end; digit++) {
            if (isStart == 1 && digit == 0) { // NOTE: handle leading zeros
                // [0, 999..9]
                // [0， 10^(len(s) - pos - 1) - 1]
                ans += dfs(new StringBuilder(), s, 1, 0, pos + 1, 0, 0, 0);
                continue;
            }
            int newHasLimit = (hasLimit == 1 && digit == s.charAt(pos) - '0') ? 1 : 0;

            int newOdd = odd + (digit % 2); // TODO
            int newEven = even + (digit % 2 == 0 ? 1 : 0); // TODO
            int newR = (isStart == 1 ? digit % this.K : (r * 10 + digit) % this.K); // TODO;

            if (ENABLE_DEBUG_MODE) curResult.append(digit);
            ans += dfs(curResult, s, 0, newHasLimit, pos + 1, newOdd, newEven, newR);
            if (ENABLE_DEBUG_MODE) curResult.deleteCharAt(curResult.length() - 1);

        }
        return dp[isStart][hasLimit][pos][odd][even][r] = ans;
    }
}

class Printer {
    static boolean ENABLE_LOCAL_PRINT = false;

    static void println(String x) {
        if (!ENABLE_LOCAL_PRINT) return; // do nothing
        System.out.println(x);
    }

    static void printf(String format, Object... args) {
        if (!ENABLE_LOCAL_PRINT) return; // do nothing
        System.out.printf(format, args);
    }
}


public class Solution {
    private static final int INF = 1_000_000_001;
    private static final long MOD = 1_000_000_007L;

    private static final int UNSET = -131;
    // 4 neighbors
    private static final int[] DX = {-1, 0, 1, 0}; // up, right, down, left
    private static final int[] DY = {0, 1, 0, -1};

    // 8 neighbors
    //    private static final int[] DX = {-1, -1, 0, 1, 1,  1, 0,  -1};
    //    private static final int[] DY = {0,   1, 1, 1, 0, -1, -1, -1};

    // knight
    //    private static final int[] DX = {-2, -2, -1, 1, 2, 2, 1, -1};
    //    private static final int[] DY = {-1, 1, 2, 2, 1, -1, -2, -2};

    public int countValidSelections(int[] nums) {
        ArraySum sum = new ArraySum(nums);

        int ans = 0;
        int n = nums.length;
        for (int i = 0; i < n; i++) {
            if (nums[i] != 0) continue;
            int l = (i - 1 >= 0 ? (int) sum.getSum(0, i - 1) : 0);
            int r = (i + 1 < n ? (int) sum.getSum(i + 1, n - 1) : 0);
            if (l == r) {
                ans += 2;
            } else if (Math.abs(l - r) == 1) {
                ans++;
            }
        }
        return ans;
    }

    public static void main(String[] args) throws Exception {
        long startTime = System.currentTimeMillis();
        Printer.ENABLE_LOCAL_PRINT = true;
        /* ------------------------------------------------------- */
        /* ------------------------------------------------------- */
        /* ------------------------------------------------------- */



        /* ------------------------------------------------------- */
        /* ------------------------------------------------------- */
        /* ------------------------------------------------------- */
        System.out.println((System.currentTimeMillis() - startTime) + ""ms"");
    }
}",1454809017
IphoneX,hahahiehie,660,3639,java,"import java.util.*;

class Utils {
    public static int log2(long n) {
        return 63 - Long.numberOfLeadingZeros(n);
    }

    // nums = ""aaabaaaba"" odd d[1] return [1, 2, 1, 4, 1, 2, 2]
    // d[0] for even, d[1] for odd
    public static int[][] manacher(String s) {
        int n = s.length();
        int[] d1 = new int[n];
        for (int i = 0, l = 0, r = -1; i < n; ++i) {
            int k = (i > r) ? 1 : Math.min(d1[l + r - i], r - i + 1);
            while (0 <= i - k && i + k < n && s.charAt(i - k) == s.charAt(i + k)) k++;
            d1[i] = k;
            if (i + k - 1 > r) {
                l = i - k + 1;
                r = i + k - 1;
            }
        }

        int[] d0 = new int[n];
        for (int i = 0, l = 0, r = -1; i < n; i++) {
            int k = (i > r) ? 0 : Math.min(d0[l + r - i + 1], r - i + 1);
            while (0 <= i - k - 1 && i + k < n && s.charAt(i - k - 1) == s.charAt(i + k)) {
                k++;
            }
            d0[i] = k;
            if (i + k - 1 > r) {
                l = i - k;
                r = i + k - 1;
            }
        }
        return new int[][]{d0, d1};
    }

    // generate primes that is <= n
    public static int[] genPrimes(int n) {
        if (n <= 1) return new int[0];
        boolean[] isComp = new boolean[n + 1];
        int len = 0;
        for (int i = 2; i <= n; i++) {
            if (!isComp[i]) {
                len++;
                for (int j = i + i; j <= n; j += i) {
                    isComp[j] = true;
                }
            }
        }
        int[] ans = new int[len];
        for (int i = 2, j = 0; i <= n; i++) {
            if (!isComp[i]) {
                ans[j++] = i;
            }
        }
        return ans;
    }

    // int[0] = primeFactor, int[1] = count of that primeFactor
    // NOTE: factors[0] and factors[1] are empty list.
    public static List<int[]>[] genPrimeFactors(int n) {
        List<int[]>[] factors = new List[n + 1];
        for (int i = 0; i <= n; i++) {
            factors[i] = new ArrayList<>();
        }
        boolean[] isComp = new boolean[n + 1];
        for (int i = 2; i <= n; i++) {
            if (!isComp[i]) {
                factors[i].add(new int[]{i, 1});
                for (int j = i + i; j <= n; j += i) {
                    isComp[j] = true;
                    int t = j, count = 0;
                    while (t % i == 0) {
                        count++;
                        t /= i;
                    }
                    factors[j].add(new int[]{i, count});
                }
            }
        }
        return factors;
    }

    // generate factors (not prime factors), factors[0] is empty list.
    public static List<Integer>[] genFactors(int n) {
        List<Integer>[] factors = new List[n + 1];
        for (int i = 0; i <= n; i++) factors[i] = new ArrayList<>();
        for (int i = 1; i <= n; i++) {
            for (int j = i; j <= n; j += i) {
                factors[j].add(i);
            }
        }
        return factors;
    }

    public static int lowerBound(int[] a, int target) {
        return lowerBound(a, target, a.length);
    }

    public static int lowerBound(int[] a, int target, int n) {
        int low = 0;
        int high = n;
        while (low < high) {
            int mid = low + ((high - low) >> 1);
            if (a[mid] < target) {
                low = mid + 1;
            } else {
                high = mid;
            }
        }
        return low;
    }

    public static int upperBound(int[] a, int target) {
        return upperBound(a, target, a.length);
    }

    public static int upperBound(int[] a, int target, int n) {
        int low = 0;
        int high = n;
        while (low < high) {
            int mid = low + ((high - low) >> 1);
            if (a[mid] <= target) {
                low = mid + 1;
            } else {
                high = mid;
            }
        }
        return low;
    }

    public static int lowerBound(long[] a, long target) {
        return lowerBound(a, target, a.length);
    }

    public static int lowerBound(long[] a, long target, int n) {
        int low = 0;
        int high = n;
        while (low < high) {
            int mid = low + ((high - low) >> 1);
            if (a[mid] < target) {
                low = mid + 1;
            } else {
                high = mid;
            }
        }
        return low;
    }

    public static int upperBound(long[] a, long target) {
        return upperBound(a, target, a.length);
    }

    public static int upperBound(long[] a, long target, int n) {
        int low = 0;
        int high = n;
        while (low < high) {
            int mid = low + ((high - low) >> 1);
            if (a[mid] <= target) {
                low = mid + 1;
            } else {
                high = mid;
            }
        }
        return low;
    }

    public static <T extends Comparable<T>> int lowerBound(T[] a, T target, int n) {
        int low = 0;
        int high = n;
        while (low < high) {
            int mid = low + ((high - low) >> 1);
            if (a[mid].compareTo(target) < 0) {
                low = mid + 1;
            } else {
                high = mid;
            }
        }
        return low;
    }

    public static <T extends Comparable<T>> int upperBound(T[] a, T target, int n) {
        int low = 0;
        int high = n;
        while (low < high) {
            int mid = low + ((high - low) >> 1);
            if (a[mid].compareTo(target) <= 0) {
                low = mid + 1;
            } else {
                high = mid;
            }
        }
        return low;
    }

    public static <T extends Comparable<T>> int lowerBound(List<T> a, T target) {
        int low = 0;
        int high = a.size();
        while (low < high) {
            int mid = low + ((high - low) >> 1);
            if (a.get(mid).compareTo(target) < 0) {
                low = mid + 1;
            } else {
                high = mid;
            }
        }
        return low;
    }

    public static <T extends Comparable<T>> int upperBound(List<T> a, T target) {
        int low = 0;
        int high = a.size();
        while (low < high) {
            int mid = low + ((high - low) >> 1);
            if (a.get(mid).compareTo(target) <= 0) {
                low = mid + 1;
            } else {
                high = mid;
            }
        }
        return low;
    }

    public static long or(int x, int y) {
        return ((long) x << 32) | ((long) y << 32 >>> 32);
    }

    // k = 0...nums.length - 1
    // After calling this function, nums[k] is the k-th number.
    public static int kthNumber(int[] nums, int k) {
        return kthNumberHelper(nums, k, 0, nums.length - 1);
    }

    // end is inclusive (0 to nums.length - 1)
    private static int kthNumberHelper(int[] nums, int K, int start, int end) {
        if (start == end) return nums[start];
        int i = partition(nums, start, end);
        return K <= i ? kthNumberHelper(nums, K, start, i) : kthNumberHelper(nums, K, i + 1, end);
    }

    // end is inclusive (0 to nums.length - 1)
    public static int partition(int[] nums, int start, int end) {
        int pos = start + ((end - start) >> 1);
        int pivot = nums[pos];

        int i = start, j = end;
        nums[pos] = nums[end];
        while (i < j) {
            while (i < j && nums[i] < pivot) i++;
            if (i < j) nums[j--] = nums[i];

            while (i < j && pivot < nums[j]) j--;
            if (i < j) nums[i++] = nums[j];
        }

        // pos is the final position for pivot.
        nums[i] = pivot;
        return i;
    }

    public static void swap(int[] nums, int i, int j) {
        int t = nums[i];
        nums[i] = nums[j];
        nums[j] = t;
    }

    // partition nums into 3 parts [smaller than pivot, equal to pivot, larger than pivot]
    public static void partition3(int[] nums, int pivot) {
        int n = nums.length;
        int l = 0, r = n - 1;
        for (int i = 0; i <= r; i++) {
            if (nums[i] < pivot) {
                swap(nums, l++, i);
            } else if (nums[i] > pivot) {
                swap(nums, r--, i--);
            }
        }
    }

    // end is inclusive
    public static void reverse(int[] nums, int start, int end) {
        for (int i = start, j = end; i < j; i++, j--) {
            int t = nums[i];
            nums[i] = nums[j];
            nums[j] = t;
        }
    }

    // Return false if next permutation is not available. (nums is not changed for this case)
    public static boolean nextPermutation(int[] nums) {
        int n = nums.length;
        if (n <= 1) return false;
        int i = n - 1;
        while (i - 1 >= 0 && nums[i - 1] >= nums[i]) {
            i--;
        }
        if (i <= 0) return false;
        for (int j = n - 1; j >= i; j--) {
            if (nums[j] > nums[i - 1]) {
                int t = nums[j];
                nums[j] = nums[i - 1];
                nums[i - 1] = t;

                reverse(nums, i, n - 1);
                break;
            }
        }
        return true;
    }

    // Return false if previous permutation is not available. (nums is not changed for this case)
    public static boolean prevPermutation(int[] nums) {
        int n = nums.length;
        if (n <= 1) return false;
        int i = n - 1;
        while (i - 1 >= 0 && nums[i - 1] <= nums[i]) {
            i--;
        }
        if (i <= 0) return false;
        for (int j = n - 1; j >= i; j--) {
            if (nums[j] < nums[i - 1]) {
                int t = nums[j];
                nums[j] = nums[i - 1];
                nums[i - 1] = t;

                reverse(nums, i, n - 1);
                break;
            }
        }
        return true;
    }


    // a, b could be negative
    // remainder >= 0
    // return [a / b, a % b]
    public static int[] divMod(int a, int b) {
        int r = a % b;
        int c = a / b;
        if (r < 0) {
            r += Math.abs(b);
            c++;
        }
        return new int[]{c, r};
    }

    public static List<Integer> negativeBase(int n, int base) {
        List<Integer> digits = new ArrayList<>();
        if (n == 0) {
            digits.add(0);
            return digits;
        }
        while (n != 0) {
            // t[0] = n / base
            // t[1] = n % base;
            int[] t = divMod(n, base);
            digits.add(t[1]);
            n = t[0];
        }
        Collections.reverse(digits);
        return digits;
    }

    // (a ^ b) % MOD
    public static long powMod(long a, long b, long MOD) {
        long res = 1L;
        a %= MOD; // In case a * a is overflow
        while (b > 0) {
            if ((b & 1) != 0) res = (res * a) % MOD;
            a = a * a % MOD;
            b >>= 1;
        }
        return res;
    }

    public static long[][] genCombination(int n) {
        long[][] C = new long[n + 1][n + 1];
        for (int i = 0; i <= n; i++) {
            for (int j = 0; j <= i && j <= n; j++) {
                if (j == 0 || i == j) C[i][j] = 1;
                else C[i][j] = (C[i - 1][j - 1] + C[i - 1][j]);
            }
        }
        return C;
    }

    public static long[][] genPermutation(int n) {
        long[][] P = new long[n + 1][n + 1];
        for (int i = 0; i <= n; i++) {
            for (int j = 0; j <= i && j <= n; j++) {
                if (i == 0 || j == 0) P[i][j] = 1;
                else P[i][j] = P[i][j - 1] * (i - j + 1);
            }
        }
        return P;
    }

    public static long gcd(long x, long y) {
        return x != 0 ? gcd(y % x, x) : y;
    }

    public static int[] preprocessLog2(int n) { // from log2(0) .... log2(n) inclusive
        int[] lg = new int[n + 1];
        for (int k = 0, i = 1; i <= n; lg[i++] = k - 1) {
            while ((1 << k) <= i) {
                k++;
            }
        }
        return lg;
    }

    public static long max(long[] nums) {
        long ret = Long.MIN_VALUE;
        for (long v : nums) ret = Math.max(ret, v);
        return ret;
    }

    public static int max(int[] nums) {
        int ret = Integer.MIN_VALUE;
        for (int v : nums) ret = Math.max(ret, v);
        return ret;
    }
}

// Tested by leetcode 1163
class SuffixArray {
    int[] s;
    int[] SA; // SA[i] => index of the i-th ranked suffix
    int[] rank; // rank[i] => the rank of i-th suffix, SA[rank[i]] == i
    int[] height; // height[i] = LCP(s[SA[i]], s[SA[i - 1]]).

    private int[][] d;
    private int n;
    private int[] lg;

    private int log2(int n) {
        return 31 - Integer.numberOfLeadingZeros(n);
    }

    private static int[] stringToIntArray(String str) {
        int[] nums = new int[str.length()];
        for (int i = 0; i < str.length(); i++) nums[i] = str.charAt(i);
        return nums;
    }

    public SuffixArray(String str) {
        this(str, true);
    }

    public SuffixArray(String str, boolean toBuildRMQ) {
        this(stringToIntArray(str), toBuildRMQ);
    }

    public SuffixArray(int[] nums) {
        this(nums, true);
    }

    public SuffixArray(int[] nums, boolean toBuildRMQ) {
        this.s = nums;
        this.n = nums.length;
        this.SA = new int[n];
        this.rank = new int[n];
        suffixSort(s);
        if (toBuildRMQ) {
            this.height = new int[n];
            this.d = new int[log2(n) + 1][n];
            this.lg = new int[n + 1];
            buildHeight();
            buildRMQ();
        }
    }

    // height[i] = LCP(s[SA[i]], s[SA[i - 1]]).
    // ?? s[n] = 0 or s[n] = -INF.
    private void buildHeight() {
        int i, j, h;
        height[0] = 0;
        for (i = 0; i < n; i++)
            rank[SA[i]] = i;
        for (h = i = 0; i < n; i++)
            if (rank[i] > 0) {
                j = SA[rank[i] - 1];
                while (i + h < n && j + h < n && s[i + h] == s[j + h]) ++h;
                height[rank[i]] = h;
                if (h > 0) --h;
            }
    }

    // LCP(i, j) = LCP(s[SA[i]], s[SA[j]]) = min{height[k] | i + 1 <= k <= j}.
    private void buildRMQ() {
        int i, j, k;
        for (i = 0; i < n; i++)
            d[0][i] = height[i];
        for (j = 1; (1 << j) <= n; j++)
            for (i = 0; i + (1 << j) <= n; i++)
                d[j][i] = Math.min(d[j - 1][i], d[j - 1][i + (1 << (j - 1))]);
        for (lg[0] = k = 0, i = 1; i <= n; lg[i++] = k - 1)
            while ((1 << k) <= i) k++;
    }

    // LCP(i, j) = LCP(s[SA[i]], s[SA[j]]) = min{height[k] | i + 1 <= k <= j}.
    public int LCP(int i, int j) {
        if (i == j) return n - SA[i];
        if (i > j) {
            int t = i;
            i = j;
            j = t;
        }
        int k = lg[j - (++i) + 1];
        return Math.min(d[k][i], d[k][j - (1 << k) + 1]);
    }

    // LCPIndex(i, j) = LCP(s[i], s[j])
    public int LCPIndex(int i, int j) {
        return LCP(rank[i], rank[j]);
    }

    private void sortIndex(int[] nums, int start, int end) {
        if (start >= end) return;
        int pos = start + ((end - start) >> 1);
        int pivot = nums[pos];

        int i = start, j = end;
        nums[pos] = nums[end];
        while (i < j) {
            while (i < j && s[nums[i]] < s[pivot]) i++;
            if (i < j) nums[j--] = nums[i];

            while (i < j && s[pivot] < s[nums[j]]) j--;
            if (i < j) nums[i++] = nums[j];
        }
        nums[i] = pivot; // index i is the final position for pivot.
        sortIndex(nums, start, i - 1);
        sortIndex(nums, i + 1, end);
    }

    private void suffixSort(int[] s) {
        int[] count = new int[n], t;
        int[] nSA = new int[n];
        int[] nRank = new int[n];
//        Integer[] tempArray = new Integer[n];
//        for (int x = 0; x < n; x++) tempArray[x] = x;
//        Arrays.sort(tempArray, (a, b) -> Integer.compare(s[a], s[b]));
//        for (int x = 0; x < n; x++) SA[x] = tempArray[x];
        int i, k;
        int minV = s[0], maxV = s[0];
        for (i = 1; i < n; i++) {
            minV = Math.min(minV, s[i]);
            maxV = Math.max(maxV, s[i]);
        }
        if ((long) maxV - minV + 1 <= (long) n) { // radix sort if alphabet size is small
            for (i = 0; i < n; i++) count[s[i] - minV]++;
            for (i = minV + 1; i <= maxV; i++) count[i - minV] += count[i - minV - 1];
            for (i = n - 1; i >= 0; i--) SA[--count[s[i] - minV]] = i;
        } else {
            for (i = 0; i < n; i++) SA[i] = i;
            sortIndex(SA, 0, n - 1);
        }
        for (rank[SA[0]] = 0, i = 1; i < n; i++) {
            rank[SA[i]] = (s[SA[i]] != s[SA[i - 1]]) ? rank[SA[i - 1]] + 1 : rank[SA[i - 1]];
        }
        for (k = 1; k < n && rank[SA[n - 1]] < n - 1; k <<= 1) {
            for (i = 0; i < n; i++) count[rank[SA[i]]] = i + 1;
            for (i = n - 1; i >= 0; i--) if (SA[i] >= k) nSA[--count[rank[SA[i] - k]]] = SA[i] - k;
            for (i = n - k; i < n; i++) nSA[--count[rank[i]]] = i;
            t = SA;
            SA = nSA;
            nSA = t;
            for (nRank[SA[0]] = 0, i = 1; i < n; i++) {
                nRank[SA[i]] = (SA[i] + k >= n || SA[i - 1] + k >= n || rank[SA[i]] != rank[SA[i - 1]] || rank[SA[i] + k] != rank[SA[i - 1] + k]) ? nRank[SA[i - 1]] + 1 : nRank[SA[i - 1]];
            }
            t = rank;
            rank = nRank;
            nRank = t;
        }
    }
}

class Combination {
    long[] factorial;
    long[] inverseFactorial;
    long MOD;

    // O(maxSize) for preprocessing
    // MOD must be prime
    public Combination(int maxSize, long MOD) {
        factorial = new long[maxSize + 1];
        inverseFactorial = new long[maxSize + 1];
        factorial[0] = 1;
        inverseFactorial[0] = 1;
        this.MOD = MOD;
        for (int i = 1; i <= maxSize; i++) {
            factorial[i] = factorial[i - 1] * i % MOD;
            inverseFactorial[i] = inverse(factorial[i]);
        }
    }

    // x, y are long[1]
    // ax + by = gcd(a, b)
    private long extGcd(long a, long b, long[] x, long[] y) {
        if (b == 0) {
            x[0] = 1;
            y[0] = 0;
            return a;
        } else {
            long r = extGcd(b, a % b, y, x);
            y[0] -= x[0] * (a / b);
            return r;
        }
    }

    // (a * x) % MOD = 1
    // x is the inverse element
    public long inverse(long a) {
        long[] x = new long[1], y = new long[1];
        extGcd(a, MOD, x, y);
        return (x[0] % MOD + MOD) % MOD;
    }

    // m >= n
    // O(1)
    public long P(int m, int n) {
        if (m == 0 || n == 0) return 1;
        else if (m == n) return factorial[m];
            //return factorial[m] * inverse(factorial[m - n]) % MOD;
        else return factorial[m] * inverseFactorial[m - n] % MOD;
    }

    // m >= n
    // O(1)
    public long C(int m, int n) {
        if (m == 0 || n == 0 || m == n) return 1;
            //return factorial[m] * inverse(factorial[m - n]) % MOD * inverse(factorial[n]) % MOD;
        else return factorial[m] * inverseFactorial[m - n] % MOD * inverseFactorial[n] % MOD;
    }
}

class CombinationNoMod {

    long[][] C;
    long[][] P;

    public CombinationNoMod(int maxSize) {
        C = new long[maxSize + 1][maxSize + 1];
        P = new long[maxSize + 1][maxSize + 1];
        int m = C.length;
        int n = C[0].length;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j <= i && j < n; j++) {
                if (j == 0 || i == j) C[i][j] = 1;
                else C[i][j] = (C[i - 1][j - 1] + C[i - 1][j]);
            }
        }
        for (int i = 0; i < m; i++) {
            for (int j = 0; j <= i && j < n; j++) {
                if (i == 0 || j == 0) P[i][j] = 1;
                else P[i][j] = P[i][j - 1] * (i - j + 1);
            }
        }
    }

    // m >= n. O(1)
    public long P(int m, int n) {
        if (m == 0 || n == 0) return 1;
        return P[m][n];
    }

    // m >= n. O(1)
    public long C(int m, int n) {
        if (m == 0 || n == 0 || m == n) return 1;
        return C[m][n];
    }
}

class Fraction {
    long n, d; // n / d (d != 0)

    public Fraction(long n, long d) {
        if (d == 0) {
            this.n = Long.MAX_VALUE;
            this.d = 1;
            return;
        }
        long g = gcd(Math.abs(n), Math.abs(d));
        this.n = n / g;
        this.d = d / g;
        if (this.d < 0) {
            this.d = -this.d;
            this.n = -this.n;
        }
    }

    public void add(Fraction other) {
        long numerator = this.n * other.d + this.d * other.n;
        long denominator = this.d * other.d;
        long g = gcd(Math.abs(numerator), Math.abs(denominator));
        this.n = numerator / g;
        this.d = denominator / g;
        if (this.d < 0) {
            this.d = -this.d;
            this.n = -this.n;
        }
    }

    @Override
    public boolean equals(Object anObject) {
        if (this == anObject) {
            return true;
        }
        if (anObject instanceof Fraction) {
            Fraction anotherObject = (Fraction) anObject;
            return n == anotherObject.n && d == anotherObject.d;
        }
        return false;
    }

    @Override
    public int hashCode() {
        return (int) (n * 31 + d);
    }

    private long gcd(long x, long y) {
        return x != 0 ? gcd(y % x, x) : y;
    }
}

class UnionFind {
    int[] parent;
    int[] sz;

    // from 0 ... n - 1
    public UnionFind(int n) {
        parent = new int[n];
        sz = new int[n];
        for (int i = 0; i < n; i++) {
            parent[i] = i;
            sz[i] = 1;
        }
    }

    public void clear() {
        for (int i = 0; i < parent.length; i++) {
            parent[i] = i;
            sz[i] = 1;
        }
    }

    public int find(int x) {
        //return parent[x] == x ? x : (parent[x] = find(parent[x]));
        if (parent[x] == x) return x;
        int px = x;
        while (px != parent[px]) px = parent[px];
        while (x != px) {
            int next = parent[x];
            parent[x] = px;
            x = next;
        }
        return px;
    }

    // px is the final parent
    public boolean union(int x, int y) {
        int px = find(x);
        int py = find(y);
        if (px == py) return false;
        parent[py] = px;
        sz[px] += sz[py];
        return true;
    }

    public int size(int x) {
        return sz[find(x)];
    }

    public UnionFind clone() {
        UnionFind cloned = new UnionFind(parent.length);
        for (int i = 0; i < parent.length; i++) {
            cloned.parent[i] = parent[i];
            cloned.sz[i] = sz[i];
        }
        return cloned;
    }
}

class Trie {
    static class TrieNode {
        TrieNode[] next = new TrieNode[26];
        boolean isWord = false;
        long count = 0L;
    }

    TrieNode root = new TrieNode();

    public void add(String word) {
        add(word, 1L);
    }

    public void remove(String word) {
        add(word, -1L);
    }

    private void add(String word, long count) {
        TrieNode cur = root;
        cur.count += count;
        for (int i = 0; i < word.length(); i++) {
            int c = word.charAt(i) - 'a';
            if (cur.next[c] == null) cur.next[c] = new TrieNode();
            cur = cur.next[c];
            cur.count += count;
        }
        cur.isWord = true;
    }

    public boolean contains(String word) {
        TrieNode cur = root;
        for (int i = 0; i < word.length(); i++) {
            int c = word.charAt(i) - 'a';
            if (cur.next[c] == null || cur.next[c].count <= 0L) return false;
            cur = cur.next[c];
            //if (cur.isWord) return true;
        }
        return cur.isWord;
    }
}

// Tested by Leetcode 1707 and Leetcode 1803
class TrieBinary {
    static class TrieNode {
        TrieNode[] next = new TrieNode[2];
        long count;
    }

    private TrieNode root;
    private int numOfBits;

    public TrieBinary(int numOfBits) { // normally 31 for int and 63 for long
        this.numOfBits = numOfBits;
        this.root = new TrieNode();
    }

    public void add(long v) {
        add(v, 1L);
    }

    public void remove(long v) { // Tested by Leetcode 1938
        add(v, -1L);
    }

    public void add(long v, long count) {
        TrieNode cur = root;
        root.count += count;
        for (int i = numOfBits - 1; i >= 0; i--) {
            int b = ((v >>> i) & 1) == 0 ? 0 : 1;
            if (cur.next[b] == null) cur.next[b] = new TrieNode();
            cur = cur.next[b];
            cur.count += count;
        }
    }

    // Tested by Leetcode 1707
    public long xorMax(long v) {
        TrieNode cur = root;
        long key = 0;
        for (int i = numOfBits - 1; i >= 0; i--) {
            int b = ((v >>> i) & 1) == 0 ? 0 : 1;
            if (cur.next[1 - b] != null && cur.next[1 - b].count > 0) {
                cur = cur.next[1 - b];
                key |= (1L - b) << i;
            } else {
                cur = cur.next[b];
                key |= (long) b << i;
            }
        }
        return key ^ v;
    }

    public boolean contains(long v) {
        TrieNode cur = root;
        for (int i = numOfBits - 1; i >= 0; i--) {
            int b = ((v >>> i) & 1) == 0 ? 0 : 1;
            if (cur.next[b] == null || cur.next[b].count <= 0) return false;
            cur = cur.next[b];
        }
        return true;
    }

    // Tested by Leetcode 1803
    // count(x ^ v <= limit)
    public long xorLessOrEqualCount(long v, long limit) {
        if (limit < 0) return 0;
        TrieNode cur = root;
        long ans = 0;
        for (int i = numOfBits - 1; i >= 0; i--) {
            int bitLimit = ((limit >>> i) & 1) == 0 ? 0 : 1;
            int bitV = ((v >>> i) & 1) == 0 ? 0 : 1;
            if (bitLimit == 1) {
                ans += (cur.next[bitV] != null ? cur.next[bitV].count : 0);
            }
            cur = cur.next[bitV ^ bitLimit];
            if (cur == null) break;
            if (i == 0) ans += cur.count;
        }
        return ans;
    }
}

// Lazy execution example is in https://leetcode.com/submissions/detail/1034182539/
// Refer to AlgorithmCompilation.java

// [Template] Classic Segment Tree (Range Sum), used for Template
class ClassicSegmentTree { // For Range Sum
    class TreeNode {
        TreeNode left, right;
        long sum;
    }

    private final TreeNode root;
    private final int L, R;

    public ClassicSegmentTree(int[] input) {
        L = 0;
        R = input.length - 1;
        root = new TreeNode();
        build(root, L, R, input);
    }

    private void build(TreeNode root, int l, int r, int[] input) {
        if (l == r) {
            root.sum = input[l];
            return;
        }
        int m = (l + r) >> 1;
        root.left = new TreeNode();
        root.right = new TreeNode();
        build(root.left, l, m, input);
        build(root.right, m + 1, r, input);
        root.sum = root.left.sum + root.right.sum;
    }

    public void set(int index, int value) {
        set(root, L, R, index, value);
    }

    private void set(TreeNode root, int L, int R, int index, int value) {
        if (index < L || R < index) return;
        if (L == R) {
            root.sum = value;
            return;
        }
        int M = L + ((R - L) >> 1);
        if (index <= M) {
            set(root.left, L, M, index, value);
        } else {
            set(root.right, M + 1, R, index, value);
        }
        root.sum = root.left.sum + root.right.sum;
    }

    // Sum[queryL...queryR] inclusive
    public long query(int queryL, int queryR) {
        return query(root, L, R, queryL, queryR);
    }

    // [queryL, queryR] is range of query, [L, R] are range of TreeNode.
    private long query(TreeNode root, int L, int R, int queryL, int queryR) {
        if (root == null || queryL > R || queryR < L) return 0L;
        if (queryL <= L && R <= queryR) return root.sum;
        int M = L + ((R - L) >> 1);
        return query(root.left, L, M, queryL, queryR) + query(root.right, M + 1, R, queryL, queryR);
    }
}

// Tested by Leetcode 307
class DynamicSegmentTreeRangeSum {
    class TreeNode {
        TreeNode left, right;
        long sum;
    }

    private final TreeNode root;
    private final long L, R;

    public DynamicSegmentTreeRangeSum(long l, long r) {
        L = l;
        R = r;
        root = new TreeNode();
    }

    public long get(long index) {
        long l = L, r = R;
        TreeNode cur = root;
        while (l < r && cur != null) {
            long m = (l + r) >> 1;
            if (index <= m) {
                cur = cur.left;
                r = m;
            } else {
                cur = cur.right;
                l = m + 1;
            }
        }
        return sum(cur);
    }

    public void add(long index, long value) {
        set(index, get(index) + value);
    }

    private long sum(TreeNode node) {
        return node == null ? 0L : node.sum;
    }

    public void set(long index, long value) {
        set(root, L, R, index, value);
    }

    private void set(TreeNode root, long L, long R, long index, long value) {
        if (index < L || R < index) return;
        if (L == R) {
            root.sum = value;
            return;
        }
        long M = L + ((R - L) >> 1);
        if (index <= M) {
            if (root.left == null) root.left = new TreeNode();
            set(root.left, L, M, index, value);
        } else {
            if (root.right == null) root.right = new TreeNode();
            set(root.right, M + 1, R, index, value);
        }
        root.sum = sum(root.left) + sum(root.right);
    }

    // Sum[queryL...queryR] inclusive
    public long query(long queryL, long queryR) {
        return query(root, L, R, queryL, queryR);
    }

    // [queryL, queryR] is range of query, [L, R] are range of TreeNode.
    private long query(TreeNode root, long L, long R, long queryL, long queryR) {
        if (root == null || queryL > R || queryR < L) return 0L;
        if (queryL <= L && R <= queryR) return root.sum;
        long M = L + ((R - L) >> 1);
        return query(root.left, L, M, queryL, queryR) + query(root.right, M + 1, R, queryL, queryR);
    }
}

// Tested by Leetcode 239, 2926
class DynamicSegmentTreeRangeMax {
    class TreeNode {
        TreeNode left, right;
        long max = Long.MIN_VALUE;
    }

    private final TreeNode root;
    private final long L, R;

    public DynamicSegmentTreeRangeMax(long l, long r) {  // [l, r] inclusive
        L = l;
        R = r;
        root = new TreeNode();
    }

    public long get(long index) {
        long l = L, r = R;
        TreeNode cur = root;
        while (l < r && cur != null) {
            long m = (l + r) >> 1;
            if (index <= m) {
                cur = cur.left;
                r = m;
            } else {
                cur = cur.right;
                l = m + 1;
            }
        }
        return max(cur);
    }

    private long max(TreeNode node) {
        return node == null ? Long.MIN_VALUE : node.max;
    }

    public void set(long index, long value) {
        set(root, L, R, index, value);
    }

    private void set(TreeNode root, long L, long R, long index, long value) {
        if (index < L || R < index) return;
        if (L == R) {
            root.max = value;
            return;
        }

        long M = L + ((R - L) >> 1);
        if (index <= M) {
            if (root.left == null) root.left = new TreeNode();
            set(root.left, L, M, index, value);
        } else {
            if (root.right == null) root.right = new TreeNode();
            set(root.right, M + 1, R, index, value);
        }
        root.max = Math.max(max(root.left), max(root.right));
    }

    // Max[queryL...queryR] inclusive
    public long query(long queryL, long queryR) {
        return query(root, L, R, queryL, queryR);
    }

    // [queryL, queryR] is range of query, [L, R] are range of TreeNode.
    private long query(TreeNode root, long L, long R, long queryL, long queryR) {
        if (root == null || queryL > R || queryR < L) return Long.MIN_VALUE;
        if (queryL <= L && R <= queryR) return root.max;
        long M = L + ((R - L) >> 1);
        return Math.max(query(root.left, L, M, queryL, queryR), query(root.right, M + 1, R, queryL, queryR));
    }
}

class DynamicSegmentTreeRangeMin {
    class TreeNode {
        TreeNode left, right;
        long min = Long.MAX_VALUE;
    }

    private final TreeNode root;
    private final long L, R;

    public DynamicSegmentTreeRangeMin(long l, long r) {  // [l, r] inclusive
        L = l;
        R = r;
        root = new TreeNode();
    }

    public long get(long index) {
        long l = L, r = R;
        TreeNode cur = root;
        while (l < r && cur != null) {
            long m = (l + r) >> 1;
            if (index <= m) {
                cur = cur.left;
                r = m;
            } else {
                cur = cur.right;
                l = m + 1;
            }
        }
        return min(cur);
    }

    private long min(TreeNode node) {
        return node == null ? Long.MAX_VALUE : node.min;
    }

    public void set(long index, long value) {
        set(root, L, R, index, value);
    }

    private void set(TreeNode root, long L, long R, long index, long value) {
        if (index < L || R < index) return;
        if (L == R) {
            root.min = value;
            return;
        }

        long M = L + ((R - L) >> 1);
        if (index <= M) {
            if (root.left == null) root.left = new TreeNode();
            set(root.left, L, M, index, value);
        } else {
            if (root.right == null) root.right = new TreeNode();
            set(root.right, M + 1, R, index, value);
        }
        root.min = Math.min(min(root.left), min(root.right));
    }

    // Max[queryL...queryR] inclusive
    public long query(long queryL, long queryR) {
        return query(root, L, R, queryL, queryR);
    }

    // [queryL, queryR] is range of query, [L, R] are range of TreeNode.
    private long query(TreeNode root, long L, long R, long queryL, long queryR) {
        if (root == null || queryL > R || queryR < L) return Long.MAX_VALUE;
        if (queryL <= L && R <= queryR) return root.min;
        long M = L + ((R - L) >> 1);
        return Math.min(query(root.left, L, M, queryL, queryR), query(root.right, M + 1, R, queryL, queryR));
    }
}

class BinaryIndexTree {
    private long[] c;
    private int n;

    // NOTE: index is from 1 to n. (NOT 0 ... n - 1)
    public BinaryIndexTree(int n) {
        this.n = n;
        this.c = new long[n + 1];
    }

    // Add value to position k, k is from 1 to n.
    public void add(int k, long value) {
        while (k <= n) {
            c[k] += value;
            k += (k & (k ^ (k - 1)));
        }
    }

    // k is from 1 to n.
    public long getSum(int k) {
        long sum = 0;
        while (k > 0) {
            sum += c[k];
            k -= (k & (k ^ (k - 1)));
        }
        return sum;
    }
}

class RangeSum {
    BinaryIndexTree tree;
    int start;

    // [low, high] inclusive
    public RangeSum(int low, int high) {
        start = low;
        tree = new BinaryIndexTree(high - low + 1);
    }

    public void add(int index, long value) {
        tree.add(index - start + 1, value);
    }

    public long get(int index) {
        return tree.getSum(index - start + 1) - tree.getSum(index - start);
    }

    public void set(int index, long value) {
        tree.add(index - start + 1, value - get(index));
    }

    // [l, r] inclusive
    public long getSum(int l, int r) {
        return tree.getSum(r - start + 1) - tree.getSum(l - start);
    }
}

class RangeMax {
    int start;
    int n;
    long[] t;

    // [low, high] inclusive
    public RangeMax(int low, int high) {
        start = low;
        n = high - low + 1;
        t = new long[n * 2 + 2];
        Arrays.fill(t, Long.MIN_VALUE);
    }

    public RangeMax(int low, int high, long defaultValue) {
        start = low;
        n = high - low + 1;
        t = new long[n * 2 + 2];
        Arrays.fill(t, defaultValue);
    }

    long get(int index) {
        return t[index - start + n];
    }

    void set(int index, long value) {
        index -= start;
        for (t[index += n] = value; (index >>= 1) > 0; ) {
            t[index] = Math.max(t[index << 1], t[index << 1 | 1]);
        }
    }

    // [l, r] inclusive
    long getMax(int l, int r) {
        l -= start;
        r = (r + 1 - start); // make it as [l, r)
        long resl = Long.MIN_VALUE, resr = Long.MIN_VALUE;
        for (l += n, r += n; l < r; l >>= 1, r >>= 1) {
            if ((l & 1) != 0) resl = Math.max(resl, t[l++]);
            if ((r & 1) != 0) resr = Math.max(t[--r], resr);
        }
        return Math.max(resl, resr);
    }
}

class RangeMin {
    int start;
    int n;
    long[] t;

    // [low, high] inclusive
    public RangeMin(int low, int high) {
        start = low;
        n = high - low + 1;
        t = new long[n * 2 + 2];
        Arrays.fill(t, Long.MAX_VALUE);
    }

    public RangeMin(int low, int high, long defaultValue) {
        start = low;
        n = high - low + 1;
        t = new long[n * 2 + 2];
        Arrays.fill(t, defaultValue);
    }

    long get(int index) {
        return t[index - start + n];
    }

    void set(int index, long value) {
        index -= start;
        for (t[index += n] = value; (index >>= 1) > 0; ) {
            t[index] = Math.min(t[index << 1], t[index << 1 | 1]);
        }
    }

    // [l, r] inclusive
    long getMin(int l, int r) {
        l -= start;
        r = (r + 1 - start); // make it as [l, r)
        long resl = Long.MAX_VALUE, resr = Long.MAX_VALUE;
        for (l += n, r += n; l < r; l >>= 1, r >>= 1) {
            if ((l & 1) != 0) resl = Math.min(resl, t[l++]);
            if ((r & 1) != 0) resr = Math.min(t[--r], resr);
        }
        return Math.min(resl, resr);
    }
}

// Including topological sort.
class GraphIntegerFaster {
    public List<Integer>[] adj;

    public GraphIntegerFaster(int n) {
        adj = new List[n];
        for (int i = 0; i < n; i++) adj[i] = new ArrayList<>();
    }

    // directed edge x -> y
    public void link(int x, int y) {
        adj[x].add(y);
    }

    public List<Integer> getChildren(int x) {
        return adj[x];
    }

    private static final int TEMPORARY = 1;
    private static final int PERMANENT = 2;

    // x -> y means x should be processed before y
    // The input is a directed graph.
    // 1. return null, means there is a cycle inside the graph, or the input is
    // invalid.
    // 2. return List<Node> as the result.
    public List<Integer> topologicalSort() {
        //Map<E, Integer> vst = new HashMap<>();
        int n = adj.length;
        int[] vst = new int[n];
        List<Integer> result = new ArrayList<>();
        for (int x = 0; x < n; x++) {
            if (!topologicalSort(x, vst, result)) {
                return null;
            }
        }
        Collections.reverse(result);
        return result;
    }

    private boolean topologicalSort(int root, int[] vst, List<Integer> result) {
        if (vst[root] == PERMANENT) {
            return true;
        }
        if (vst[root] == TEMPORARY) { // found cycle
            return false;
        }

        vst[root] = TEMPORARY;
        for (int child : getChildren(root)) {
            if (!topologicalSort(child, vst, result)) {
                return false;
            }
        }
        result.add(root);
        vst[root] = PERMANENT;
        return true;
    }
}

class DijkstraLongFaster {
    public static class Edge {
        int to;
        long w;

        public Edge(int to, long w) {
            this.to = to;
            this.w = w;
        }
    }

    public static final long INF = Long.MAX_VALUE / 4;
    public List<Edge>[] adj;

    public DijkstraLongFaster(int n) {
        this.adj = new List[n];
        for (int i = 0; i < n; i++) adj[i] = new ArrayList<>();
    }

    public void link(int x, int y, long w) {
        adj[x].add(new Edge(y, w));
    }

    public long[] shortestPath(int src) {
        int n = adj.length;
        long[] dist = new long[n];
        boolean[] vst = new boolean[n];
        Arrays.fill(dist, INF);

        PriorityQueue<Edge> q = new PriorityQueue<>((a, b) -> Long.compare(a.w, b.w));
        q.add(new Edge(src, 0));
        dist[src] = 0;

        while (!q.isEmpty()) {
            Edge cur = q.poll();
            if (vst[cur.to]) continue;
            int u = cur.to;
            long w = cur.w;
            vst[u] = true;

            for (Edge e : adj[u]) {
                if (!vst[e.to] && dist[e.to] > w + e.w) {
                    dist[e.to] = w + e.w;
                    q.add(new Edge(e.to, dist[e.to]));
                }
            }
        }
        return dist;
    }

    // NOTE: w of each edge must be the same.
    public long[] bfs(int src) {
        int n = adj.length;
        long[] dist = new long[n];
        boolean[] vst = new boolean[n];
        Arrays.fill(dist, INF);

        Queue<Integer> q = new ArrayDeque<>();
        q.add(src);
        dist[src] = 0;
        vst[src] = true;

        while (!q.isEmpty()) {
            int u = q.poll();
            long w = dist[u];
            for (Edge e : adj[u]) {
                if (!vst[e.to]) {
                    dist[e.to] = w + e.w;
                    vst[e.to] = true;
                    q.add(e.to);
                }
            }
        }
        return dist;
    }
}

class TreapSet<E> {
    private class Node {
        E key;
        int priority, count, total;
        Node left, right, pnt;

        public Node(E key, int priority, Node pnt) {
            this.key = key;
            this.priority = priority;
            this.pnt = pnt;
            this.count = 1;
            this.total = 1;
        }
    }

    private static final Random RANDOM = new Random();
    private final Comparator<? super E> comparator;
    private Node root;

    public TreapSet(Comparator<? super E> comparator) {
        this.comparator = comparator;
    }

    public boolean isEmpty() {
        return root == null;
    }

    public void clear() {
        root = null;
    }

    public int size() {
        return root == null ? 0 : root.total;
    }

    private int leftRank(Node p) {
        return p.left != null ? p.left.total : 0;
    }

    private int rightRank(Node p) {
        return p.right != null ? p.right.total : 0;
    }

    private void rotateLeft(Node x) {
        Node y = x.right;
        if ((x.right = y.left) != null) y.left.pnt = x;
        y.pnt = x.pnt;
        if (x == root) root = y;
        else if (x == x.pnt.left) x.pnt.left = y;
        else x.pnt.right = y;
        y.left = x;
        x.pnt = y;
        x.total = leftRank(x) + rightRank(x) + x.count;
        y.total = leftRank(y) + rightRank(y) + y.count;
    }

    private void rotateRight(Node x) {
        Node y = x.left;
        if ((x.left = y.right) != null) y.right.pnt = x;
        y.pnt = x.pnt;
        if (x == root) root = y;
        else if (x == x.pnt.right) x.pnt.right = y;
        else x.pnt.left = y;
        y.right = x;
        x.pnt = y;
        x.total = leftRank(x) + rightRank(x) + x.count;
        y.total = leftRank(y) + rightRank(y) + y.count;
    }

    public void add(E key) {
        if (root == null) {
            root = new Node(key, RANDOM.nextInt(), null);
            return;
        }
        Node x = root, p = null;
        while (x != null) {
            ++((p = x).total);
            int cmp = comparator.compare(key, x.key);
            if (cmp < 0) x = x.left;
            else if (cmp > 0) x = x.right;
            else {
                ++(x.count);
                return;
            }
        }

        x = new Node(key, RANDOM.nextInt(), p);
        if (comparator.compare(key, p.key) < 0) p.left = x;
        else p.right = x;
        while ((p = x.pnt) != null && p.priority < x.priority) {
            if (p.left == x) rotateRight(p);
            else rotateLeft(p);
        }
    }

    public void remove(E key) {
        Node x = root, p = null;
        while (x != null) {
            --(x.total);
            int cmp = comparator.compare(key, x.key);
            if (cmp < 0) x = x.left;
            else if (cmp > 0) x = x.right;
            else {
                if (--(x.count) > 0) return;
                break;
            }
        }
        if (x == null) return;
        while (x.left != null || x.right != null) {
            if (x.left == null || (x.right != null && x.right.priority > x.left.priority)) {
                rotateLeft(x);
            } else {
                rotateRight(x);
            }
        }
        if ((p = x.pnt) != null) {
            if (p.left == x) p.left = null;
            else p.right = null;
        } else {
            root = null;
        }
        // delete x;
    }

    // number of elements smaller than key
    public int lowerCount(E key) {
        int sum = 0;
        Node x = root;
        while (x != null) {
            int cmp = comparator.compare(key, x.key);
            if (cmp < 0) x = x.left;
            else if (cmp > 0) {
                sum += leftRank(x) + x.count;
                x = x.right;
            } else {
                sum += leftRank(x);
                break;
            }
        }
        return sum;
    }

    // number of elements larger than key
    public int higherCount(E key) {
        //return size() - lowerCount(key) - count(key);
        int sum = 0;
        Node x = root;
        while (x != null) {
            int cmp = comparator.compare(key, x.key);
            if (cmp > 0) x = x.right;
            else if (cmp < 0) {
                sum += rightRank(x) + x.count;
                x = x.left;
            } else {
                sum += rightRank(x);
                break;
            }
        }
        return sum;
    }

    public int index(E key) {
        return lowerCount(key);
    }

    public E get(int index) // index = 0 ... size - 1
    {
        Node p = root;
        ++index;
        while (true) {
            int t = leftRank(p);
            if (index <= t) p = p.left;
            else {
                if ((index -= t + p.count) <= 0) break;
                p = p.right;
            }
        }
        return p.key;
    }

    public int count(E key) {
        Node x = root;
        while (x != null) {
            int cmp = comparator.compare(key, x.key);
            if (cmp < 0) x = x.left;
            else if (cmp > 0) {
                x = x.right;
            } else {
                return x.count;
            }
        }
        return 0;
    }

    public E first() {
        if (root == null) return null;
        Node x = root;
        while (x.left != null) {
            x = x.left;
        }
        return x.key;
    }

    public E last() {
        if (root == null) return null;
        Node x = root;
        while (x.right != null) {
            x = x.right;
        }
        return x.key;
    }

    public boolean contains(E key) {
        return count(key) > 0;
    }

    public E ceiling(E key) {
        int id = lowerCount(key);
        return id >= size() ? null : get(id);
    }

    public E floor(E key) {
        int id = size() - higherCount(key) - 1;
        return id < 0 ? null : get(id);
    }

    public E lower(E key) {
        int id = lowerCount(key) - 1;
        return id < 0 ? null : get(id);
    }

    public E higher(E key) {
        int id = size() - higherCount(key);
        return id >= size() ? null : get(id);
    }

    // return the first index whose value >= target
    // if this value doesn't exist, return index = size()
    public int lowerBound(E target) {
        return lowerCount(target);
    }

    // return the first index whose value > target
    // if this value doesn't exist, return index = size()
    public int upperBound(E target) {
        return size() - higherCount(target);
    }

    public List<E> keys() {
        List<E> list = new ArrayList<>();
        inorder(root, list);
        return list;
    }

    private void inorder(Node x, List<E> list) {
        if (x == null) return;
        inorder(x.left, list);
        list.add(x.key);
        inorder(x.right, list);
    }
}

class ArraySum {
    long[] sum;
    int n;

    // nums index starts from 0 to nums.length - 1;
    public ArraySum(int[] nums) {
        n = nums.length;
        sum = new long[nums.length + 1];
        for (int i = 1; i <= nums.length; i++) {
            sum[i] = sum[i - 1] + nums[i - 1];
        }
    }

    public ArraySum(long[] nums) {
        n = nums.length;
        sum = new long[nums.length + 1];
        for (int i = 1; i <= nums.length; i++) {
            sum[i] = sum[i - 1] + nums[i - 1];
        }
    }

    // [l, r], index starts from 0
    public long getSum(int l, int r) {
        // error handling
        if (l > r || !(l >= 0 && l < n && r >= 0 && r < n)) return 0L;
        return sum[r + 1] - sum[l];
    }
}

class TwoDArraySum {
    int[][] sum;
    int m, n;

    // nums index starts from 0
    public TwoDArraySum(final int[][] nums) {
        m = nums.length;
        n = nums[0].length;
        sum = new int[m + 1][n + 1];
        for (int i = 1; i <= m; i++) {
            for (int j = 1; j <= n; j++) {
                sum[i][j] = sum[i][j - 1] + sum[i - 1][j] - sum[i - 1][j - 1] + nums[i - 1][j - 1];
            }
        }
    }

    // [(x1, y1), (x2, y2)], index starts from 0
    // x1 <= x2 and y1 <= y2
    public int getSum(int x1, int y1, int x2, int y2) {
        if (!(x1 >= 0 && x1 < m && y1 >= 0 && y1 < n && x2 >= 0 && x2 < m && y2 >= 0 && y2 < n) || x1 > x2 || y1 > y2)
            return 0;
        return sum[x2 + 1][y2 + 1] - sum[x2 + 1][y1] - sum[x1][y2 + 1] + sum[x1][y1];
    }
}

class ArrayUtils {
    static void fill(int[] array, int defaultValue) {
        Arrays.fill(array, defaultValue);
    }

    static void fill(int[][] array, int defaultValue) {
        for (int[] a1 : array) {
            Arrays.fill(a1, defaultValue);
        }
    }

    static void fill(int[][][] array, int defaultValue) {
        for (int[][] a2 : array) {
            for (int[] a1 : a2) {
                Arrays.fill(a1, defaultValue);
            }
        }
    }

    static void fill(int[][][][] array, int defaultValue) {
        for (int[][][] a3 : array) {
            for (int[][] a2 : a3) {
                for (int[] a1 : a2) {
                    Arrays.fill(a1, defaultValue);
                }
            }
        }
    }

    static void fill(int[][][][][] array, int defaultValue) {
        for (int[][][][] a4 : array) {
            for (int[][][] a3 : a4) {
                for (int[][] a2 : a3) {
                    for (int[] a1 : a2) {
                        Arrays.fill(a1, defaultValue);
                    }
                }
            }
        }
    }

    static void fill(int[][][][][][] array, int defaultValue) {
        for (int[][][][][] a5 : array) {
            for (int[][][][] a4 : a5) {
                for (int[][][] a3 : a4) {
                    for (int[][] a2 : a3) {
                        for (int[] a1 : a2) {
                            Arrays.fill(a1, defaultValue);
                        }
                    }
                }
            }
        }
    }

    static void fill(long[] array, long defaultValue) {
        Arrays.fill(array, defaultValue);
    }

    static void fill(long[][] array, long defaultValue) {
        for (long[] a1 : array) {
            Arrays.fill(a1, defaultValue);
        }
    }

    static void fill(long[][][] array, long defaultValue) {
        for (long[][] a2 : array) {
            for (long[] a1 : a2) {
                Arrays.fill(a1, defaultValue);
            }
        }
    }

    static void fill(long[][][][] array, long defaultValue) {
        for (long[][][] a3 : array) {
            for (long[][] a2 : a3) {
                for (long[] a1 : a2) {
                    Arrays.fill(a1, defaultValue);
                }
            }
        }
    }

    static void fill(long[][][][][] array, long defaultValue) {
        for (long[][][][] a4 : array) {
            for (long[][][] a3 : a4) {
                for (long[][] a2 : a3) {
                    for (long[] a1 : a2) {
                        Arrays.fill(a1, defaultValue);
                    }
                }
            }
        }
    }

    static void fill(long[][][][][][] array, long defaultValue) {
        for (long[][][][][] a5 : array) {
            for (long[][][][] a4 : a5) {
                for (long[][][] a3 : a4) {
                    for (long[][] a2 : a3) {
                        for (long[] a1 : a2) {
                            Arrays.fill(a1, defaultValue);
                        }
                    }
                }
            }
        }
    }
}

class CharacterUtils {
    static boolean[] vowel = new boolean[128];

    static {
        vowel['a'] = vowel['e'] = vowel['i'] = vowel['o'] = vowel['u'] = true;
        vowel['A'] = vowel['E'] = vowel['I'] = vowel['O'] = vowel['U'] = true;
    }

    static boolean isVowel(char ch) {
        return vowel[ch];
    }

    static boolean isLetter(char ch) {
        return ((ch - 'a') >= 0 && (ch - 'a') < 26) ||
                ((ch - 'A') >= 0 && (ch - 'A') < 26);
    }

    static boolean isLowerCase(char ch) {
        return (ch - 'a') >= 0 && (ch - 'a') < 26;
    }

    static boolean isUpperCase(char ch) {
        return (ch - 'A') >= 0 && (ch - 'A') < 26;
    }

    static boolean isDigit(char ch) {
        return (ch - '0') >= 0 && (ch - '0') <= 9;
    }
}

class DoubleUtils {
    private static final double EPS = 1e-8;

    public static int compare(double a, double b) {
        if (a - b > EPS) return 1;
        else if (a - b < -EPS) return -1;
        else return 0;
    }

    public static boolean isInteger(double a) {
        return compare(floor(a), a) == 0;
    }

    public static double floor(double a) {
        return Math.floor(a + EPS);
    }

    public static double ceil(double a) {
        return Math.ceil(a - EPS);
    }
}

class MatrixUtils {
    static final long MOD = 1_000_000_007L;

    // matrix[n][n], matrix[i][i] = 1
    static long[][] genIdentityMatrix(int n) {
        long[][] matrix = new long[n][n];
        for (int i = 0; i < n; i++) matrix[i][i] = 1;
        return matrix;
    }

    static long[][] multiply(long[][] a, long[][] b, long MOD) {
        int m1 = a.length;
        int n1 = a[0].length;
        int m2 = b.length;
        int n2 = b[0].length;
        if (n1 != m2) return null;
        long[][] res = new long[m1][n2];
        for (int i = 0; i < m1; i++) {
            for (int j = 0; j < n2; j++) {
                for (int k = 0; k < n1; k++) {
                    res[i][j] = (res[i][j] + a[i][k] * b[k][j]) % MOD;
                }
            }
        }
        return res;
    }

    static long[][] multiply(long[][] a, long[][] b) {
        int m1 = a.length;
        int n1 = a[0].length;
        int m2 = b.length;
        int n2 = b[0].length;
        if (n1 != m2) return null;
        long[][] res = new long[m1][n2];
        for (int i = 0; i < m1; i++) {
            for (int j = 0; j < n2; j++) {
                for (int k = 0; k < n1; k++) {
                    res[i][j] = (res[i][j] + a[i][k] * b[k][j]);
                }
            }
        }
        return res;
    }

    // a^b % MOD
    static long[][] powMod(long[][] a, long b, long MOD) {
        int n = a.length;
        long[][] res = genIdentityMatrix(n);
        while (b > 0) {
            if ((b & 1) != 0) res = multiply(res, a, MOD);
            a = multiply(a, a, MOD);
            b >>= 1;
        }
        return res;
    }

    static void print(long[][] matrix) {
        for (int i = 0; i < matrix.length; i++) {
            System.out.println(Arrays.toString(matrix[i]));
        }
    }
}

class IntegerUtils {
    static long[] power10 = new long[19]; // 10^i

    static {
        power10[0] = 1L;
        for (int i = 1; i < power10.length; i++) {
            power10[i] = power10[i - 1] * 10;
        }
    }

    // swap index i and j of integer (long) num. i == 0 means the lowest position.
    static long swapDigit(long num, int i, int j) {
        if (i == j) return num;
        long di = num / power10[i] % 10L;
        long dj = num / power10[j] % 10L;
        return num - di * power10[i] - dj * power10[j] + dj * power10[i] + di * power10[j];
    }
}

class StringUtils {
    // This function is deprecated, please hash(int l, int r) in class StableStringHash or StringHash
    // rolling hash of substrings of 's' with length == k
    // long[pos] = hash(s.substring(pos, pos + k))
    public static long[] rollingHash(String s, int k) {
        long[] ans = new long[s.length() - k + 1];
        int seed1 = 31;
        int seed2 = 131;
        int h1 = 0, h2 = 0, power1 = 1, power2 = 1;
        for (int i = 0; i < k; i++) {
            h1 = h1 * seed1 + s.charAt(i);
            h2 = h2 * seed2 + s.charAt(i);

            power1 *= seed1;
            power2 *= seed2;
        }

        ans[0] = ((long) h1 << 32) | ((long) h2 << 32 >>> 32);
        for (int i = k; i < s.length(); i++) {
            h1 = h1 * seed1 + s.charAt(i) - power1 * s.charAt(i - k);
            h2 = h2 * seed2 + s.charAt(i) - power2 * s.charAt(i - k);
            ans[i - k + 1] = ((long) h1 << 32) | ((long) h2 << 32 >>> 32);
        }

        return ans;
    }

    public static int[] kmpNext(String s) {
        int n = s.length();
        int[] next = new int[n];
        next[0] = 0;
        for (int i = 1; i < n; i++) {
            int k = next[i - 1];
            while (k > 0 && s.charAt(i) != s.charAt(k)) k = next[k - 1];
            if (s.charAt(i) == s.charAt(k)) {
                next[i] = k + 1;
            } else {
                next[i] = 0;
            }
        }
        return next;
    }

    // s is the original String
    // p is the pattern String
    public static boolean kmpMatch(String s, String p) {
        int[] next = kmpNext(p);
        int n = s.length();
        int m = p.length();
        for (int i = 0, j = 0; i < n; i++) {
            while (j > 0 && p.charAt(j) != s.charAt(i)) {
                j = next[j - 1];
            }
            if (p.charAt(j) == s.charAt(i)) j++;
            if (j == m) return true;
        }
        return false;
    }

    public static int[] kmpNext(int[] s) {
        int n = s.length;
        int[] next = new int[n];
        next[0] = 0;
        for (int i = 1; i < n; i++) {
            int k = next[i - 1];
            while (k > 0 && s[i] != s[k]) k = next[k - 1];
            if (s[i] == s[k]) {
                next[i] = k + 1;
            } else {
                next[i] = 0;
            }
        }
        return next;
    }

    // s is the original String
    // p is the pattern String
    public static boolean kmpMatch(int[] s, int[] p) {
        int[] next = kmpNext(p);
        int n = s.length;
        int m = p.length;
        for (int i = 0, j = 0; i < n; i++) {
            while (j > 0 && p[j] != s[i]) {
                j = next[j - 1];
            }
            if (p[j] == s[i]) j++;
            if (j == m) return true;
        }
        return false;
    }

    // Z[i] = longest length of common prefix of str[0 ... n - 1] and str[i ... n - 1]
    // Tested by LC2223, LC459
    public static int[] zFunction(String str) {
        int n = str.length();
        int[] Z = new int[n];
        // [L,R] makes a window which matches with prefix of s
        int L = 0, R = 0;
        Z[0] = n;
        for (int i = 1; i < n; ++i) {
            if (i > R) {
                L = R = i;
                while (R < n && str.charAt(R - L) == str.charAt(R)) R++;
                Z[i] = R - L;
                R--;
            } else {
                int k = i - L;
                if (Z[k] < R - i + 1) {
                    Z[i] = Z[k];
                } else {
                    L = i;
                    while (R < n && str.charAt(R - L) == str.charAt(R)) R++;
                    Z[i] = R - L;
                    R--;
                }
            }
        }
        return Z;
    }
}

// Better to use this when length of string >= 2^11
class StringHash {
    static class SingleStringHash {
        long[] h;
        long[] pow;
        final long SEED;
        final long MOD;

        public SingleStringHash(String s, long SEED, long MOD) { // example: SEED = 131L;
            this.SEED = SEED;
            this.MOD = MOD;
            int n = s.length();
            h = new long[n + 1];
            pow = new long[n + 1];
            pow[0] = 1;
            for (int i = 1; i <= n; i++) pow[i] = (pow[i - 1] * SEED) % MOD;
            //h[i] = hash[s[0...i - 1]]
            h[0] = 0;
            for (int i = 1; i <= n; i++) {
                h[i] = (h[i - 1] * SEED + s.charAt(i - 1)) % MOD;
            }
        }

        // hash[s[l....r]]
        public long hash(int l, int r) {
            long ret = (h[r + 1] - h[l] * pow[r - l + 1]) % MOD;
            return ret >= 0 ? ret : ret + MOD;
        }
    }

    private SingleStringHash hash1, hash2;
    static final long SEED1 = 31L, SEED2 = 131L;
    static final long MOD = 1_000_000_007L;

    public StringHash(String s) {
        hash1 = new SingleStringHash(s, SEED1, MOD);
        hash2 = new SingleStringHash(s, SEED2, MOD);
    }

    public long hash(int l, int r) {
        return (hash1.hash(l, r) << 32) | (hash2.hash(l, r) << 32 >>> 32);
    }

    public static long hashCode(String s) {
        long h1 = 0, h2 = 0;
        for (int i = 0; i < s.length(); i++) {
            h1 = (h1 * SEED1 + s.charAt(i)) % MOD;
            h2 = (h2 * SEED2 + s.charAt(i)) % MOD;
        }
        return (h1 << 32) | (h2 << 32 >>> 32);
    }

    public static long hashCode(char[] s) {
        long h1 = 0, h2 = 0;
        for (int i = 0; i < s.length; i++) {
            h1 = (h1 * SEED1 + s[i]) % MOD;
            h2 = (h2 * SEED2 + s[i]) % MOD;
        }
        return (h1 << 32) | (h2 << 32 >>> 32);
    }
}

class IntegerArrayHash {
    static class SingleIntegerArrayHash {
        long[] h;
        long[] pow;
        final long SEED;
        final long MOD;

        public SingleIntegerArrayHash(int[] s, long SEED, long MOD) { // example: SEED = 131L;
            this.SEED = SEED;
            this.MOD = MOD;
            int n = s.length;
            h = new long[n + 1];
            pow = new long[n + 1];
            pow[0] = 1;
            for (int i = 1; i <= n; i++) pow[i] = (pow[i - 1] * SEED) % MOD;
            //h[i] = hash[s[0...i - 1]]
            h[0] = 0;
            for (int i = 1; i <= n; i++) {
                h[i] = (h[i - 1] * SEED + s[i - 1]) % MOD;
                if (h[i] < 0) h[i] += MOD;
            }
        }

        // hash[s[l....r]]
        public long hash(int l, int r) {
            long ret = (h[r + 1] - h[l] * pow[r - l + 1]) % MOD;
            return ret >= 0 ? ret : ret + MOD;
        }
    }

    private SingleIntegerArrayHash hash1, hash2;
    static final long SEED1 = 31L, SEED2 = 131L;
    static final long MOD = 1_000_000_007L; // or 1_000_000_123L

    public IntegerArrayHash(int[] s) {
        hash1 = new SingleIntegerArrayHash(s, SEED1, MOD);
        hash2 = new SingleIntegerArrayHash(s, SEED2, MOD);
    }

    public long hash(int l, int r) {
        return (hash1.hash(l, r) << 32) | (hash2.hash(l, r) << 32 >>> 32);
    }

    public static long hashCode(int[] s) {
        long h1 = 0, h2 = 0;
        for (int i = 0; i < s.length; i++) {
            h1 = (h1 * SEED1 + s[i]) % MOD;
            if (h1 < 0) h1 += MOD;
            h2 = (h2 * SEED2 + s[i]) % MOD;
            if (h2 < 0) h2 += MOD;
        }
        return (h1 << 32) | (h2 << 32 >>> 32);
    }

    public static long hashCode(List<Integer> s) {
        long h1 = 0, h2 = 0;
        for (int i = 0; i < s.size(); i++) {
            h1 = (h1 * SEED1 + s.get(i)) % MOD;
            if (h1 < 0) h1 += MOD;
            h2 = (h2 * SEED2 + s.get(i)) % MOD;
            if (h2 < 0) h2 += MOD;
        }
        return (h1 << 32) | (h2 << 32 >>> 32);
    }
}

class RMQ { // NOTE!!! query return index, not value
    // tested by LC 1438,239
    final long[] a; // input data array copy
    int[][] d;

    int[] log2;
    boolean useMax;

    private static long[] intArrayToLongArray(int[] nums) {
        long[] ret = new long[nums.length];
        for (int i = 0; i < nums.length; i++) ret[i] = nums[i];
        return ret;
    }

    // useMax == true means RMQMax
    public RMQ(int[] input, boolean useMax) {
        this(intArrayToLongArray(input), useMax);
    }

    public RMQ(long[] input, boolean useMax) {
        int n = input.length;
        this.a = input;
        this.log2 = Utils.preprocessLog2(n);
        this.useMax = useMax;
        this.d = new int[log2[n] + 1][n];
        for (int i = 0; i < n; i++) d[0][i] = i;
        for (int j = 1; (1 << j) <= n; j++)
            for (int i = 0; i + (1 << j) <= n; i++)
                if (useMax) {
                    d[j][i] = a[d[j - 1][i]] >= a[d[j - 1][i + (1 << (j - 1))]] ? d[j - 1][i] : d[j - 1][i + (1 << (j - 1))];
                } else {
                    d[j][i] = a[d[j - 1][i]] <= a[d[j - 1][i + (1 << (j - 1))]] ? d[j - 1][i] : d[j - 1][i + (1 << (j - 1))];
                }
    }

    // i <= j, and index starts from 0.
    public int query(int i, int j) { // NOTE!!! return index, not value
        int k = log2[j - i + 1];
        if (useMax) return a[d[k][i]] >= a[d[k][j - (1 << k) + 1]] ? d[k][i] : d[k][j - (1 << k) + 1];
        else return a[d[k][i]] <= a[d[k][j - (1 << k) + 1]] ? d[k][i] : d[k][j - (1 << k) + 1];
    }
}

class RMQValue { // NOTE!!! query return value, not index
    final long[] a; // input data array copy
    long[][] d;

    int[] log2;
    boolean useMax;

    private static long[] intArrayToLongArray(int[] nums) {
        long[] ret = new long[nums.length];
        for (int i = 0; i < nums.length; i++) ret[i] = nums[i];
        return ret;
    }

    // useMax == true means RMQMax
    public RMQValue(int[] input, boolean useMax) {
        this(intArrayToLongArray(input), useMax);
    }

    public RMQValue(long[] input, boolean useMax) {
        int n = input.length;
        this.a = input;
        this.log2 = Utils.preprocessLog2(n);
        this.useMax = useMax;
        this.d = new long[log2[n] + 1][n];
        for (int i = 0; i < n; i++) d[0][i] = a[i];
        for (int j = 1; (1 << j) <= n; j++)
            for (int i = 0; i + (1 << j) <= n; i++)
                if (useMax) {
                    d[j][i] = Math.max(d[j - 1][i], d[j - 1][i + (1 << (j - 1))]);
                } else {
                    d[j][i] = Math.min(d[j - 1][i], d[j - 1][i + (1 << (j - 1))]);
                }
    }

    // i <= j, and index starts from 0.
    public long query(int i, int j) {
        int k = log2[j - i + 1];
        if (useMax) return Math.max(d[k][i], d[k][j - (1 << k) + 1]);
        else return Math.min(d[k][i], d[k][j - (1 << k) + 1]);
    }
}

// Tested by 2827
// Similar: 1012, 2376, 902, 2719, 2801, 357, 1215, 1397
class DigitDP {
    static final boolean ENABLE_DEBUG_MODE = false; // TODO: set it to true if you want to print more debug info
    static final long UNSET = -1;
    // dp[isStart][hasLimit][pos] | [odd][even][r]
    // (isStart, hasLimit, pos) is generic, (odd, even, r) is use case specific
    long[][][][][][] dp;
    int K;

    public long digitDP(long num, int k) {
        String numString = String.valueOf(num); // TODO
        this.dp = new long[2][2][numString.length()][numString.length() + 1][numString.length() + 1][k];
        this.K = k;

        if (ENABLE_DEBUG_MODE) System.out.println(""num = "" + numString);
        ArrayUtils.fill(dp, UNSET);
        long ans = dfs(new StringBuilder(), numString, 1, 1, 0, 0, 0, 0);
        if (ENABLE_DEBUG_MODE) System.out.println(""---------------------\n"");
        return ans;
    }

    long dfs(StringBuilder curResult, String s, int isStart, int hasLimit, int pos, int odd, int even, int r) {
        if (pos == s.length()) {
            if (isStart == 1) return 0; // NOTE: special check for num == 0. TODO
            if (r == 0 && odd == even) { // TODO
                if (ENABLE_DEBUG_MODE) System.out.println(""result = "" + curResult);
                return 1;
            } else {
                return 0;
            }
        }
        if (dp[isStart][hasLimit][pos][odd][even][r] != UNSET) return dp[isStart][hasLimit][pos][odd][even][r];

        int start = 0;
        int end = (hasLimit == 1) ? s.charAt(pos) - '0' : 9; // TODO: check if it is binary string or not

        long ans = 0;
        for (int digit = start; digit <= end; digit++) {
            if (isStart == 1 && digit == 0) { // NOTE: handle leading zeros
                // [0, 999..9]
                // [0， 10^(len(s) - pos - 1) - 1]
                ans += dfs(new StringBuilder(), s, 1, 0, pos + 1, 0, 0, 0);
                continue;
            }
            int newHasLimit = (hasLimit == 1 && digit == s.charAt(pos) - '0') ? 1 : 0;

            int newOdd = odd + (digit % 2); // TODO
            int newEven = even + (digit % 2 == 0 ? 1 : 0); // TODO
            int newR = (isStart == 1 ? digit % this.K : (r * 10 + digit) % this.K); // TODO;

            if (ENABLE_DEBUG_MODE) curResult.append(digit);
            ans += dfs(curResult, s, 0, newHasLimit, pos + 1, newOdd, newEven, newR);
            if (ENABLE_DEBUG_MODE) curResult.deleteCharAt(curResult.length() - 1);

        }
        return dp[isStart][hasLimit][pos][odd][even][r] = ans;
    }
}

class Printer {
    static boolean ENABLE_LOCAL_PRINT = false;

    static void println(String x) {
        if (!ENABLE_LOCAL_PRINT) return; // do nothing
        System.out.println(x);
    }

    static void printf(String format, Object... args) {
        if (!ENABLE_LOCAL_PRINT) return; // do nothing
        System.out.printf(format, args);
    }
}


public class Solution {
    private static final int INF = 1_000_000_001;
    private static final long MOD = 1_000_000_007L;

    private static final int UNSET = -131;
    // 4 neighbors
    private static final int[] DX = {-1, 0, 1, 0}; // up, right, down, left
    private static final int[] DY = {0, 1, 0, -1};

    // 8 neighbors
    //    private static final int[] DX = {-1, -1, 0, 1, 1,  1, 0,  -1};
    //    private static final int[] DY = {0,   1, 1, 1, 0, -1, -1, -1};

    // knight
    //    private static final int[] DX = {-2, -2, -1, 1, 2, 2, 1, -1};
    //    private static final int[] DY = {-1, 1, 2, 2, 1, -1, -2, -2};

    static class DynamicSegmentTreeRangeAddRangeSum {
        private class TreeNode {
            TreeNode left, right;
            long lazy = 0;
            long sum = 0;
        }

        private TreeNode root;
        final long L, R;

        public DynamicSegmentTreeRangeAddRangeSum(long l, long r) { // [l, r] inclusive
            L = l;
            R = r;
            root = new TreeNode();
        }

        private void pushDown(TreeNode root, long L, long R) {
            if (root.lazy != 0) {
                long M = (L + R) >> 1;
                root.left.lazy += root.lazy;
                root.right.lazy += root.lazy;
                root.left.sum += root.lazy * (M - L + 1);
                root.right.sum += root.lazy * (R - (M + 1) + 1);
                root.lazy = 0;
            }
        }

        private void extend(TreeNode root) {
            if (root.left == null) {
                root.left = new TreeNode();
                root.right = new TreeNode();
            }
        }

        public void update(long queryL, long queryR, long value) {
            update(root, L, R, queryL, queryR, value);
        }

        private void update(TreeNode root, long L, long R, long queryL, long queryR, long value) {
            if (queryR < L || R < queryL) return;
            if (queryL <= L && R <= queryR) {
                root.lazy += value;
                root.sum += value * (R - L + 1);
                return;
            }
            long M = (L + R) >> 1;
            extend(root);
            pushDown(root, L, R);
            update(root.left, L, M, queryL, queryR, value);
            update(root.right, M + 1, R, queryL, queryR, value);
            root.sum = root.left.sum + root.right.sum;
        }

        public long query(long queryL, long queryR) {
            return query(root, L, R, queryL, queryR);
        }

        private long query(TreeNode root, long L, long R, long queryL, long queryR) {
            if (queryR < L || R < queryL) return 0;
            if (queryL <= L && R <= queryR) {
                return root.sum;
            }
            long M = (L + R) >> 1;
            extend(root);
            pushDown(root, L, R);
            return query(root.left, L, M, queryL, queryR) + query(root.right, M + 1, R, queryL, queryR);
        }
    }
    public boolean isZeroArray(int[] nums, int[][] queries) {
        int n = nums.length;
        DynamicSegmentTreeRangeAddRangeSum tree = new DynamicSegmentTreeRangeAddRangeSum(0, n - 1);
//        for (int i = 0; i < n; i++) {
//            tree.update(i, i, nums[i]);
//        }
        for (int i = 0; i < queries.length; i++) {
            int l = queries[i][0];
            int r = queries[i][1];
            tree.update(l, r, -1);

        }
        for (int i = 0; i < n; i++) {
            //System.out.println(""i = "" + tree.query(i, i));
            if (tree.query(i, i) + nums[i] > 0) return false;
        }
        return true;
    }

    public static void main(String[] args) throws Exception {
        long startTime = System.currentTimeMillis();
        Printer.ENABLE_LOCAL_PRINT = true;
        /* ------------------------------------------------------- */
        /* ------------------------------------------------------- */
        /* ------------------------------------------------------- */



        /* ------------------------------------------------------- */
        /* ------------------------------------------------------- */
        /* ------------------------------------------------------- */
        System.out.println((System.currentTimeMillis() - startTime) + ""ms"");
    }
}",1454821504
IphoneX,hahahiehie,660,3643,java,"import java.util.*;

class Utils {
    public static int log2(long n) {
        return 63 - Long.numberOfLeadingZeros(n);
    }

    // nums = ""aaabaaaba"" odd d[1] return [1, 2, 1, 4, 1, 2, 2]
    // d[0] for even, d[1] for odd
    public static int[][] manacher(String s) {
        int n = s.length();
        int[] d1 = new int[n];
        for (int i = 0, l = 0, r = -1; i < n; ++i) {
            int k = (i > r) ? 1 : Math.min(d1[l + r - i], r - i + 1);
            while (0 <= i - k && i + k < n && s.charAt(i - k) == s.charAt(i + k)) k++;
            d1[i] = k;
            if (i + k - 1 > r) {
                l = i - k + 1;
                r = i + k - 1;
            }
        }

        int[] d0 = new int[n];
        for (int i = 0, l = 0, r = -1; i < n; i++) {
            int k = (i > r) ? 0 : Math.min(d0[l + r - i + 1], r - i + 1);
            while (0 <= i - k - 1 && i + k < n && s.charAt(i - k - 1) == s.charAt(i + k)) {
                k++;
            }
            d0[i] = k;
            if (i + k - 1 > r) {
                l = i - k;
                r = i + k - 1;
            }
        }
        return new int[][]{d0, d1};
    }

    // generate primes that is <= n
    public static int[] genPrimes(int n) {
        if (n <= 1) return new int[0];
        boolean[] isComp = new boolean[n + 1];
        int len = 0;
        for (int i = 2; i <= n; i++) {
            if (!isComp[i]) {
                len++;
                for (int j = i + i; j <= n; j += i) {
                    isComp[j] = true;
                }
            }
        }
        int[] ans = new int[len];
        for (int i = 2, j = 0; i <= n; i++) {
            if (!isComp[i]) {
                ans[j++] = i;
            }
        }
        return ans;
    }

    // int[0] = primeFactor, int[1] = count of that primeFactor
    // NOTE: factors[0] and factors[1] are empty list.
    public static List<int[]>[] genPrimeFactors(int n) {
        List<int[]>[] factors = new List[n + 1];
        for (int i = 0; i <= n; i++) {
            factors[i] = new ArrayList<>();
        }
        boolean[] isComp = new boolean[n + 1];
        for (int i = 2; i <= n; i++) {
            if (!isComp[i]) {
                factors[i].add(new int[]{i, 1});
                for (int j = i + i; j <= n; j += i) {
                    isComp[j] = true;
                    int t = j, count = 0;
                    while (t % i == 0) {
                        count++;
                        t /= i;
                    }
                    factors[j].add(new int[]{i, count});
                }
            }
        }
        return factors;
    }

    // generate factors (not prime factors), factors[0] is empty list.
    public static List<Integer>[] genFactors(int n) {
        List<Integer>[] factors = new List[n + 1];
        for (int i = 0; i <= n; i++) factors[i] = new ArrayList<>();
        for (int i = 1; i <= n; i++) {
            for (int j = i; j <= n; j += i) {
                factors[j].add(i);
            }
        }
        return factors;
    }

    public static int lowerBound(int[] a, int target) {
        return lowerBound(a, target, a.length);
    }

    public static int lowerBound(int[] a, int target, int n) {
        int low = 0;
        int high = n;
        while (low < high) {
            int mid = low + ((high - low) >> 1);
            if (a[mid] < target) {
                low = mid + 1;
            } else {
                high = mid;
            }
        }
        return low;
    }

    public static int upperBound(int[] a, int target) {
        return upperBound(a, target, a.length);
    }

    public static int upperBound(int[] a, int target, int n) {
        int low = 0;
        int high = n;
        while (low < high) {
            int mid = low + ((high - low) >> 1);
            if (a[mid] <= target) {
                low = mid + 1;
            } else {
                high = mid;
            }
        }
        return low;
    }

    public static int lowerBound(long[] a, long target) {
        return lowerBound(a, target, a.length);
    }

    public static int lowerBound(long[] a, long target, int n) {
        int low = 0;
        int high = n;
        while (low < high) {
            int mid = low + ((high - low) >> 1);
            if (a[mid] < target) {
                low = mid + 1;
            } else {
                high = mid;
            }
        }
        return low;
    }

    public static int upperBound(long[] a, long target) {
        return upperBound(a, target, a.length);
    }

    public static int upperBound(long[] a, long target, int n) {
        int low = 0;
        int high = n;
        while (low < high) {
            int mid = low + ((high - low) >> 1);
            if (a[mid] <= target) {
                low = mid + 1;
            } else {
                high = mid;
            }
        }
        return low;
    }

    public static <T extends Comparable<T>> int lowerBound(T[] a, T target, int n) {
        int low = 0;
        int high = n;
        while (low < high) {
            int mid = low + ((high - low) >> 1);
            if (a[mid].compareTo(target) < 0) {
                low = mid + 1;
            } else {
                high = mid;
            }
        }
        return low;
    }

    public static <T extends Comparable<T>> int upperBound(T[] a, T target, int n) {
        int low = 0;
        int high = n;
        while (low < high) {
            int mid = low + ((high - low) >> 1);
            if (a[mid].compareTo(target) <= 0) {
                low = mid + 1;
            } else {
                high = mid;
            }
        }
        return low;
    }

    public static <T extends Comparable<T>> int lowerBound(List<T> a, T target) {
        int low = 0;
        int high = a.size();
        while (low < high) {
            int mid = low + ((high - low) >> 1);
            if (a.get(mid).compareTo(target) < 0) {
                low = mid + 1;
            } else {
                high = mid;
            }
        }
        return low;
    }

    public static <T extends Comparable<T>> int upperBound(List<T> a, T target) {
        int low = 0;
        int high = a.size();
        while (low < high) {
            int mid = low + ((high - low) >> 1);
            if (a.get(mid).compareTo(target) <= 0) {
                low = mid + 1;
            } else {
                high = mid;
            }
        }
        return low;
    }

    public static long or(int x, int y) {
        return ((long) x << 32) | ((long) y << 32 >>> 32);
    }

    // k = 0...nums.length - 1
    // After calling this function, nums[k] is the k-th number.
    public static int kthNumber(int[] nums, int k) {
        return kthNumberHelper(nums, k, 0, nums.length - 1);
    }

    // end is inclusive (0 to nums.length - 1)
    private static int kthNumberHelper(int[] nums, int K, int start, int end) {
        if (start == end) return nums[start];
        int i = partition(nums, start, end);
        return K <= i ? kthNumberHelper(nums, K, start, i) : kthNumberHelper(nums, K, i + 1, end);
    }

    // end is inclusive (0 to nums.length - 1)
    public static int partition(int[] nums, int start, int end) {
        int pos = start + ((end - start) >> 1);
        int pivot = nums[pos];

        int i = start, j = end;
        nums[pos] = nums[end];
        while (i < j) {
            while (i < j && nums[i] < pivot) i++;
            if (i < j) nums[j--] = nums[i];

            while (i < j && pivot < nums[j]) j--;
            if (i < j) nums[i++] = nums[j];
        }

        // pos is the final position for pivot.
        nums[i] = pivot;
        return i;
    }

    public static void swap(int[] nums, int i, int j) {
        int t = nums[i];
        nums[i] = nums[j];
        nums[j] = t;
    }

    // partition nums into 3 parts [smaller than pivot, equal to pivot, larger than pivot]
    public static void partition3(int[] nums, int pivot) {
        int n = nums.length;
        int l = 0, r = n - 1;
        for (int i = 0; i <= r; i++) {
            if (nums[i] < pivot) {
                swap(nums, l++, i);
            } else if (nums[i] > pivot) {
                swap(nums, r--, i--);
            }
        }
    }

    // end is inclusive
    public static void reverse(int[] nums, int start, int end) {
        for (int i = start, j = end; i < j; i++, j--) {
            int t = nums[i];
            nums[i] = nums[j];
            nums[j] = t;
        }
    }

    // Return false if next permutation is not available. (nums is not changed for this case)
    public static boolean nextPermutation(int[] nums) {
        int n = nums.length;
        if (n <= 1) return false;
        int i = n - 1;
        while (i - 1 >= 0 && nums[i - 1] >= nums[i]) {
            i--;
        }
        if (i <= 0) return false;
        for (int j = n - 1; j >= i; j--) {
            if (nums[j] > nums[i - 1]) {
                int t = nums[j];
                nums[j] = nums[i - 1];
                nums[i - 1] = t;

                reverse(nums, i, n - 1);
                break;
            }
        }
        return true;
    }

    // Return false if previous permutation is not available. (nums is not changed for this case)
    public static boolean prevPermutation(int[] nums) {
        int n = nums.length;
        if (n <= 1) return false;
        int i = n - 1;
        while (i - 1 >= 0 && nums[i - 1] <= nums[i]) {
            i--;
        }
        if (i <= 0) return false;
        for (int j = n - 1; j >= i; j--) {
            if (nums[j] < nums[i - 1]) {
                int t = nums[j];
                nums[j] = nums[i - 1];
                nums[i - 1] = t;

                reverse(nums, i, n - 1);
                break;
            }
        }
        return true;
    }


    // a, b could be negative
    // remainder >= 0
    // return [a / b, a % b]
    public static int[] divMod(int a, int b) {
        int r = a % b;
        int c = a / b;
        if (r < 0) {
            r += Math.abs(b);
            c++;
        }
        return new int[]{c, r};
    }

    public static List<Integer> negativeBase(int n, int base) {
        List<Integer> digits = new ArrayList<>();
        if (n == 0) {
            digits.add(0);
            return digits;
        }
        while (n != 0) {
            // t[0] = n / base
            // t[1] = n % base;
            int[] t = divMod(n, base);
            digits.add(t[1]);
            n = t[0];
        }
        Collections.reverse(digits);
        return digits;
    }

    // (a ^ b) % MOD
    public static long powMod(long a, long b, long MOD) {
        long res = 1L;
        a %= MOD; // In case a * a is overflow
        while (b > 0) {
            if ((b & 1) != 0) res = (res * a) % MOD;
            a = a * a % MOD;
            b >>= 1;
        }
        return res;
    }

    public static long[][] genCombination(int n) {
        long[][] C = new long[n + 1][n + 1];
        for (int i = 0; i <= n; i++) {
            for (int j = 0; j <= i && j <= n; j++) {
                if (j == 0 || i == j) C[i][j] = 1;
                else C[i][j] = (C[i - 1][j - 1] + C[i - 1][j]);
            }
        }
        return C;
    }

    public static long[][] genPermutation(int n) {
        long[][] P = new long[n + 1][n + 1];
        for (int i = 0; i <= n; i++) {
            for (int j = 0; j <= i && j <= n; j++) {
                if (i == 0 || j == 0) P[i][j] = 1;
                else P[i][j] = P[i][j - 1] * (i - j + 1);
            }
        }
        return P;
    }

    public static long gcd(long x, long y) {
        return x != 0 ? gcd(y % x, x) : y;
    }

    public static int[] preprocessLog2(int n) { // from log2(0) .... log2(n) inclusive
        int[] lg = new int[n + 1];
        for (int k = 0, i = 1; i <= n; lg[i++] = k - 1) {
            while ((1 << k) <= i) {
                k++;
            }
        }
        return lg;
    }

    public static long max(long[] nums) {
        long ret = Long.MIN_VALUE;
        for (long v : nums) ret = Math.max(ret, v);
        return ret;
    }

    public static int max(int[] nums) {
        int ret = Integer.MIN_VALUE;
        for (int v : nums) ret = Math.max(ret, v);
        return ret;
    }
}

// Tested by leetcode 1163
class SuffixArray {
    int[] s;
    int[] SA; // SA[i] => index of the i-th ranked suffix
    int[] rank; // rank[i] => the rank of i-th suffix, SA[rank[i]] == i
    int[] height; // height[i] = LCP(s[SA[i]], s[SA[i - 1]]).

    private int[][] d;
    private int n;
    private int[] lg;

    private int log2(int n) {
        return 31 - Integer.numberOfLeadingZeros(n);
    }

    private static int[] stringToIntArray(String str) {
        int[] nums = new int[str.length()];
        for (int i = 0; i < str.length(); i++) nums[i] = str.charAt(i);
        return nums;
    }

    public SuffixArray(String str) {
        this(str, true);
    }

    public SuffixArray(String str, boolean toBuildRMQ) {
        this(stringToIntArray(str), toBuildRMQ);
    }

    public SuffixArray(int[] nums) {
        this(nums, true);
    }

    public SuffixArray(int[] nums, boolean toBuildRMQ) {
        this.s = nums;
        this.n = nums.length;
        this.SA = new int[n];
        this.rank = new int[n];
        suffixSort(s);
        if (toBuildRMQ) {
            this.height = new int[n];
            this.d = new int[log2(n) + 1][n];
            this.lg = new int[n + 1];
            buildHeight();
            buildRMQ();
        }
    }

    // height[i] = LCP(s[SA[i]], s[SA[i - 1]]).
    // ?? s[n] = 0 or s[n] = -INF.
    private void buildHeight() {
        int i, j, h;
        height[0] = 0;
        for (i = 0; i < n; i++)
            rank[SA[i]] = i;
        for (h = i = 0; i < n; i++)
            if (rank[i] > 0) {
                j = SA[rank[i] - 1];
                while (i + h < n && j + h < n && s[i + h] == s[j + h]) ++h;
                height[rank[i]] = h;
                if (h > 0) --h;
            }
    }

    // LCP(i, j) = LCP(s[SA[i]], s[SA[j]]) = min{height[k] | i + 1 <= k <= j}.
    private void buildRMQ() {
        int i, j, k;
        for (i = 0; i < n; i++)
            d[0][i] = height[i];
        for (j = 1; (1 << j) <= n; j++)
            for (i = 0; i + (1 << j) <= n; i++)
                d[j][i] = Math.min(d[j - 1][i], d[j - 1][i + (1 << (j - 1))]);
        for (lg[0] = k = 0, i = 1; i <= n; lg[i++] = k - 1)
            while ((1 << k) <= i) k++;
    }

    // LCP(i, j) = LCP(s[SA[i]], s[SA[j]]) = min{height[k] | i + 1 <= k <= j}.
    public int LCP(int i, int j) {
        if (i == j) return n - SA[i];
        if (i > j) {
            int t = i;
            i = j;
            j = t;
        }
        int k = lg[j - (++i) + 1];
        return Math.min(d[k][i], d[k][j - (1 << k) + 1]);
    }

    // LCPIndex(i, j) = LCP(s[i], s[j])
    public int LCPIndex(int i, int j) {
        return LCP(rank[i], rank[j]);
    }

    private void sortIndex(int[] nums, int start, int end) {
        if (start >= end) return;
        int pos = start + ((end - start) >> 1);
        int pivot = nums[pos];

        int i = start, j = end;
        nums[pos] = nums[end];
        while (i < j) {
            while (i < j && s[nums[i]] < s[pivot]) i++;
            if (i < j) nums[j--] = nums[i];

            while (i < j && s[pivot] < s[nums[j]]) j--;
            if (i < j) nums[i++] = nums[j];
        }
        nums[i] = pivot; // index i is the final position for pivot.
        sortIndex(nums, start, i - 1);
        sortIndex(nums, i + 1, end);
    }

    private void suffixSort(int[] s) {
        int[] count = new int[n], t;
        int[] nSA = new int[n];
        int[] nRank = new int[n];
//        Integer[] tempArray = new Integer[n];
//        for (int x = 0; x < n; x++) tempArray[x] = x;
//        Arrays.sort(tempArray, (a, b) -> Integer.compare(s[a], s[b]));
//        for (int x = 0; x < n; x++) SA[x] = tempArray[x];
        int i, k;
        int minV = s[0], maxV = s[0];
        for (i = 1; i < n; i++) {
            minV = Math.min(minV, s[i]);
            maxV = Math.max(maxV, s[i]);
        }
        if ((long) maxV - minV + 1 <= (long) n) { // radix sort if alphabet size is small
            for (i = 0; i < n; i++) count[s[i] - minV]++;
            for (i = minV + 1; i <= maxV; i++) count[i - minV] += count[i - minV - 1];
            for (i = n - 1; i >= 0; i--) SA[--count[s[i] - minV]] = i;
        } else {
            for (i = 0; i < n; i++) SA[i] = i;
            sortIndex(SA, 0, n - 1);
        }
        for (rank[SA[0]] = 0, i = 1; i < n; i++) {
            rank[SA[i]] = (s[SA[i]] != s[SA[i - 1]]) ? rank[SA[i - 1]] + 1 : rank[SA[i - 1]];
        }
        for (k = 1; k < n && rank[SA[n - 1]] < n - 1; k <<= 1) {
            for (i = 0; i < n; i++) count[rank[SA[i]]] = i + 1;
            for (i = n - 1; i >= 0; i--) if (SA[i] >= k) nSA[--count[rank[SA[i] - k]]] = SA[i] - k;
            for (i = n - k; i < n; i++) nSA[--count[rank[i]]] = i;
            t = SA;
            SA = nSA;
            nSA = t;
            for (nRank[SA[0]] = 0, i = 1; i < n; i++) {
                nRank[SA[i]] = (SA[i] + k >= n || SA[i - 1] + k >= n || rank[SA[i]] != rank[SA[i - 1]] || rank[SA[i] + k] != rank[SA[i - 1] + k]) ? nRank[SA[i - 1]] + 1 : nRank[SA[i - 1]];
            }
            t = rank;
            rank = nRank;
            nRank = t;
        }
    }
}

class Combination {
    long[] factorial;
    long[] inverseFactorial;
    long MOD;

    // O(maxSize) for preprocessing
    // MOD must be prime
    public Combination(int maxSize, long MOD) {
        factorial = new long[maxSize + 1];
        inverseFactorial = new long[maxSize + 1];
        factorial[0] = 1;
        inverseFactorial[0] = 1;
        this.MOD = MOD;
        for (int i = 1; i <= maxSize; i++) {
            factorial[i] = factorial[i - 1] * i % MOD;
            inverseFactorial[i] = inverse(factorial[i]);
        }
    }

    // x, y are long[1]
    // ax + by = gcd(a, b)
    private long extGcd(long a, long b, long[] x, long[] y) {
        if (b == 0) {
            x[0] = 1;
            y[0] = 0;
            return a;
        } else {
            long r = extGcd(b, a % b, y, x);
            y[0] -= x[0] * (a / b);
            return r;
        }
    }

    // (a * x) % MOD = 1
    // x is the inverse element
    public long inverse(long a) {
        long[] x = new long[1], y = new long[1];
        extGcd(a, MOD, x, y);
        return (x[0] % MOD + MOD) % MOD;
    }

    // m >= n
    // O(1)
    public long P(int m, int n) {
        if (m == 0 || n == 0) return 1;
        else if (m == n) return factorial[m];
            //return factorial[m] * inverse(factorial[m - n]) % MOD;
        else return factorial[m] * inverseFactorial[m - n] % MOD;
    }

    // m >= n
    // O(1)
    public long C(int m, int n) {
        if (m == 0 || n == 0 || m == n) return 1;
            //return factorial[m] * inverse(factorial[m - n]) % MOD * inverse(factorial[n]) % MOD;
        else return factorial[m] * inverseFactorial[m - n] % MOD * inverseFactorial[n] % MOD;
    }
}

class CombinationNoMod {

    long[][] C;
    long[][] P;

    public CombinationNoMod(int maxSize) {
        C = new long[maxSize + 1][maxSize + 1];
        P = new long[maxSize + 1][maxSize + 1];
        int m = C.length;
        int n = C[0].length;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j <= i && j < n; j++) {
                if (j == 0 || i == j) C[i][j] = 1;
                else C[i][j] = (C[i - 1][j - 1] + C[i - 1][j]);
            }
        }
        for (int i = 0; i < m; i++) {
            for (int j = 0; j <= i && j < n; j++) {
                if (i == 0 || j == 0) P[i][j] = 1;
                else P[i][j] = P[i][j - 1] * (i - j + 1);
            }
        }
    }

    // m >= n. O(1)
    public long P(int m, int n) {
        if (m == 0 || n == 0) return 1;
        return P[m][n];
    }

    // m >= n. O(1)
    public long C(int m, int n) {
        if (m == 0 || n == 0 || m == n) return 1;
        return C[m][n];
    }
}

class Fraction {
    long n, d; // n / d (d != 0)

    public Fraction(long n, long d) {
        if (d == 0) {
            this.n = Long.MAX_VALUE;
            this.d = 1;
            return;
        }
        long g = gcd(Math.abs(n), Math.abs(d));
        this.n = n / g;
        this.d = d / g;
        if (this.d < 0) {
            this.d = -this.d;
            this.n = -this.n;
        }
    }

    public void add(Fraction other) {
        long numerator = this.n * other.d + this.d * other.n;
        long denominator = this.d * other.d;
        long g = gcd(Math.abs(numerator), Math.abs(denominator));
        this.n = numerator / g;
        this.d = denominator / g;
        if (this.d < 0) {
            this.d = -this.d;
            this.n = -this.n;
        }
    }

    @Override
    public boolean equals(Object anObject) {
        if (this == anObject) {
            return true;
        }
        if (anObject instanceof Fraction) {
            Fraction anotherObject = (Fraction) anObject;
            return n == anotherObject.n && d == anotherObject.d;
        }
        return false;
    }

    @Override
    public int hashCode() {
        return (int) (n * 31 + d);
    }

    private long gcd(long x, long y) {
        return x != 0 ? gcd(y % x, x) : y;
    }
}

class UnionFind {
    int[] parent;
    int[] sz;

    // from 0 ... n - 1
    public UnionFind(int n) {
        parent = new int[n];
        sz = new int[n];
        for (int i = 0; i < n; i++) {
            parent[i] = i;
            sz[i] = 1;
        }
    }

    public void clear() {
        for (int i = 0; i < parent.length; i++) {
            parent[i] = i;
            sz[i] = 1;
        }
    }

    public int find(int x) {
        //return parent[x] == x ? x : (parent[x] = find(parent[x]));
        if (parent[x] == x) return x;
        int px = x;
        while (px != parent[px]) px = parent[px];
        while (x != px) {
            int next = parent[x];
            parent[x] = px;
            x = next;
        }
        return px;
    }

    // px is the final parent
    public boolean union(int x, int y) {
        int px = find(x);
        int py = find(y);
        if (px == py) return false;
        parent[py] = px;
        sz[px] += sz[py];
        return true;
    }

    public int size(int x) {
        return sz[find(x)];
    }

    public UnionFind clone() {
        UnionFind cloned = new UnionFind(parent.length);
        for (int i = 0; i < parent.length; i++) {
            cloned.parent[i] = parent[i];
            cloned.sz[i] = sz[i];
        }
        return cloned;
    }
}

class Trie {
    static class TrieNode {
        TrieNode[] next = new TrieNode[26];
        boolean isWord = false;
        long count = 0L;
    }

    TrieNode root = new TrieNode();

    public void add(String word) {
        add(word, 1L);
    }

    public void remove(String word) {
        add(word, -1L);
    }

    private void add(String word, long count) {
        TrieNode cur = root;
        cur.count += count;
        for (int i = 0; i < word.length(); i++) {
            int c = word.charAt(i) - 'a';
            if (cur.next[c] == null) cur.next[c] = new TrieNode();
            cur = cur.next[c];
            cur.count += count;
        }
        cur.isWord = true;
    }

    public boolean contains(String word) {
        TrieNode cur = root;
        for (int i = 0; i < word.length(); i++) {
            int c = word.charAt(i) - 'a';
            if (cur.next[c] == null || cur.next[c].count <= 0L) return false;
            cur = cur.next[c];
            //if (cur.isWord) return true;
        }
        return cur.isWord;
    }
}

// Tested by Leetcode 1707 and Leetcode 1803
class TrieBinary {
    static class TrieNode {
        TrieNode[] next = new TrieNode[2];
        long count;
    }

    private TrieNode root;
    private int numOfBits;

    public TrieBinary(int numOfBits) { // normally 31 for int and 63 for long
        this.numOfBits = numOfBits;
        this.root = new TrieNode();
    }

    public void add(long v) {
        add(v, 1L);
    }

    public void remove(long v) { // Tested by Leetcode 1938
        add(v, -1L);
    }

    public void add(long v, long count) {
        TrieNode cur = root;
        root.count += count;
        for (int i = numOfBits - 1; i >= 0; i--) {
            int b = ((v >>> i) & 1) == 0 ? 0 : 1;
            if (cur.next[b] == null) cur.next[b] = new TrieNode();
            cur = cur.next[b];
            cur.count += count;
        }
    }

    // Tested by Leetcode 1707
    public long xorMax(long v) {
        TrieNode cur = root;
        long key = 0;
        for (int i = numOfBits - 1; i >= 0; i--) {
            int b = ((v >>> i) & 1) == 0 ? 0 : 1;
            if (cur.next[1 - b] != null && cur.next[1 - b].count > 0) {
                cur = cur.next[1 - b];
                key |= (1L - b) << i;
            } else {
                cur = cur.next[b];
                key |= (long) b << i;
            }
        }
        return key ^ v;
    }

    public boolean contains(long v) {
        TrieNode cur = root;
        for (int i = numOfBits - 1; i >= 0; i--) {
            int b = ((v >>> i) & 1) == 0 ? 0 : 1;
            if (cur.next[b] == null || cur.next[b].count <= 0) return false;
            cur = cur.next[b];
        }
        return true;
    }

    // Tested by Leetcode 1803
    // count(x ^ v <= limit)
    public long xorLessOrEqualCount(long v, long limit) {
        if (limit < 0) return 0;
        TrieNode cur = root;
        long ans = 0;
        for (int i = numOfBits - 1; i >= 0; i--) {
            int bitLimit = ((limit >>> i) & 1) == 0 ? 0 : 1;
            int bitV = ((v >>> i) & 1) == 0 ? 0 : 1;
            if (bitLimit == 1) {
                ans += (cur.next[bitV] != null ? cur.next[bitV].count : 0);
            }
            cur = cur.next[bitV ^ bitLimit];
            if (cur == null) break;
            if (i == 0) ans += cur.count;
        }
        return ans;
    }
}

// Lazy execution example is in https://leetcode.com/submissions/detail/1034182539/
// Refer to AlgorithmCompilation.java

// [Template] Classic Segment Tree (Range Sum), used for Template
class ClassicSegmentTree { // For Range Sum
    class TreeNode {
        TreeNode left, right;
        long sum;
    }

    private final TreeNode root;
    private final int L, R;

    public ClassicSegmentTree(int[] input) {
        L = 0;
        R = input.length - 1;
        root = new TreeNode();
        build(root, L, R, input);
    }

    private void build(TreeNode root, int l, int r, int[] input) {
        if (l == r) {
            root.sum = input[l];
            return;
        }
        int m = (l + r) >> 1;
        root.left = new TreeNode();
        root.right = new TreeNode();
        build(root.left, l, m, input);
        build(root.right, m + 1, r, input);
        root.sum = root.left.sum + root.right.sum;
    }

    public void set(int index, int value) {
        set(root, L, R, index, value);
    }

    private void set(TreeNode root, int L, int R, int index, int value) {
        if (index < L || R < index) return;
        if (L == R) {
            root.sum = value;
            return;
        }
        int M = L + ((R - L) >> 1);
        if (index <= M) {
            set(root.left, L, M, index, value);
        } else {
            set(root.right, M + 1, R, index, value);
        }
        root.sum = root.left.sum + root.right.sum;
    }

    // Sum[queryL...queryR] inclusive
    public long query(int queryL, int queryR) {
        return query(root, L, R, queryL, queryR);
    }

    // [queryL, queryR] is range of query, [L, R] are range of TreeNode.
    private long query(TreeNode root, int L, int R, int queryL, int queryR) {
        if (root == null || queryL > R || queryR < L) return 0L;
        if (queryL <= L && R <= queryR) return root.sum;
        int M = L + ((R - L) >> 1);
        return query(root.left, L, M, queryL, queryR) + query(root.right, M + 1, R, queryL, queryR);
    }
}

// Tested by Leetcode 307
class DynamicSegmentTreeRangeSum {
    class TreeNode {
        TreeNode left, right;
        long sum;
    }

    private final TreeNode root;
    private final long L, R;

    public DynamicSegmentTreeRangeSum(long l, long r) {
        L = l;
        R = r;
        root = new TreeNode();
    }

    public long get(long index) {
        long l = L, r = R;
        TreeNode cur = root;
        while (l < r && cur != null) {
            long m = (l + r) >> 1;
            if (index <= m) {
                cur = cur.left;
                r = m;
            } else {
                cur = cur.right;
                l = m + 1;
            }
        }
        return sum(cur);
    }

    public void add(long index, long value) {
        set(index, get(index) + value);
    }

    private long sum(TreeNode node) {
        return node == null ? 0L : node.sum;
    }

    public void set(long index, long value) {
        set(root, L, R, index, value);
    }

    private void set(TreeNode root, long L, long R, long index, long value) {
        if (index < L || R < index) return;
        if (L == R) {
            root.sum = value;
            return;
        }
        long M = L + ((R - L) >> 1);
        if (index <= M) {
            if (root.left == null) root.left = new TreeNode();
            set(root.left, L, M, index, value);
        } else {
            if (root.right == null) root.right = new TreeNode();
            set(root.right, M + 1, R, index, value);
        }
        root.sum = sum(root.left) + sum(root.right);
    }

    // Sum[queryL...queryR] inclusive
    public long query(long queryL, long queryR) {
        return query(root, L, R, queryL, queryR);
    }

    // [queryL, queryR] is range of query, [L, R] are range of TreeNode.
    private long query(TreeNode root, long L, long R, long queryL, long queryR) {
        if (root == null || queryL > R || queryR < L) return 0L;
        if (queryL <= L && R <= queryR) return root.sum;
        long M = L + ((R - L) >> 1);
        return query(root.left, L, M, queryL, queryR) + query(root.right, M + 1, R, queryL, queryR);
    }
}

// Tested by Leetcode 239, 2926
class DynamicSegmentTreeRangeMax {
    class TreeNode {
        TreeNode left, right;
        long max = Long.MIN_VALUE;
    }

    private final TreeNode root;
    private final long L, R;

    public DynamicSegmentTreeRangeMax(long l, long r) {  // [l, r] inclusive
        L = l;
        R = r;
        root = new TreeNode();
    }

    public long get(long index) {
        long l = L, r = R;
        TreeNode cur = root;
        while (l < r && cur != null) {
            long m = (l + r) >> 1;
            if (index <= m) {
                cur = cur.left;
                r = m;
            } else {
                cur = cur.right;
                l = m + 1;
            }
        }
        return max(cur);
    }

    private long max(TreeNode node) {
        return node == null ? Long.MIN_VALUE : node.max;
    }

    public void set(long index, long value) {
        set(root, L, R, index, value);
    }

    private void set(TreeNode root, long L, long R, long index, long value) {
        if (index < L || R < index) return;
        if (L == R) {
            root.max = value;
            return;
        }

        long M = L + ((R - L) >> 1);
        if (index <= M) {
            if (root.left == null) root.left = new TreeNode();
            set(root.left, L, M, index, value);
        } else {
            if (root.right == null) root.right = new TreeNode();
            set(root.right, M + 1, R, index, value);
        }
        root.max = Math.max(max(root.left), max(root.right));
    }

    // Max[queryL...queryR] inclusive
    public long query(long queryL, long queryR) {
        return query(root, L, R, queryL, queryR);
    }

    // [queryL, queryR] is range of query, [L, R] are range of TreeNode.
    private long query(TreeNode root, long L, long R, long queryL, long queryR) {
        if (root == null || queryL > R || queryR < L) return Long.MIN_VALUE;
        if (queryL <= L && R <= queryR) return root.max;
        long M = L + ((R - L) >> 1);
        return Math.max(query(root.left, L, M, queryL, queryR), query(root.right, M + 1, R, queryL, queryR));
    }
}

class DynamicSegmentTreeRangeMin {
    class TreeNode {
        TreeNode left, right;
        long min = Long.MAX_VALUE;
    }

    private final TreeNode root;
    private final long L, R;

    public DynamicSegmentTreeRangeMin(long l, long r) {  // [l, r] inclusive
        L = l;
        R = r;
        root = new TreeNode();
    }

    public long get(long index) {
        long l = L, r = R;
        TreeNode cur = root;
        while (l < r && cur != null) {
            long m = (l + r) >> 1;
            if (index <= m) {
                cur = cur.left;
                r = m;
            } else {
                cur = cur.right;
                l = m + 1;
            }
        }
        return min(cur);
    }

    private long min(TreeNode node) {
        return node == null ? Long.MAX_VALUE : node.min;
    }

    public void set(long index, long value) {
        set(root, L, R, index, value);
    }

    private void set(TreeNode root, long L, long R, long index, long value) {
        if (index < L || R < index) return;
        if (L == R) {
            root.min = value;
            return;
        }

        long M = L + ((R - L) >> 1);
        if (index <= M) {
            if (root.left == null) root.left = new TreeNode();
            set(root.left, L, M, index, value);
        } else {
            if (root.right == null) root.right = new TreeNode();
            set(root.right, M + 1, R, index, value);
        }
        root.min = Math.min(min(root.left), min(root.right));
    }

    // Max[queryL...queryR] inclusive
    public long query(long queryL, long queryR) {
        return query(root, L, R, queryL, queryR);
    }

    // [queryL, queryR] is range of query, [L, R] are range of TreeNode.
    private long query(TreeNode root, long L, long R, long queryL, long queryR) {
        if (root == null || queryL > R || queryR < L) return Long.MAX_VALUE;
        if (queryL <= L && R <= queryR) return root.min;
        long M = L + ((R - L) >> 1);
        return Math.min(query(root.left, L, M, queryL, queryR), query(root.right, M + 1, R, queryL, queryR));
    }
}

class BinaryIndexTree {
    private long[] c;
    private int n;

    // NOTE: index is from 1 to n. (NOT 0 ... n - 1)
    public BinaryIndexTree(int n) {
        this.n = n;
        this.c = new long[n + 1];
    }

    // Add value to position k, k is from 1 to n.
    public void add(int k, long value) {
        while (k <= n) {
            c[k] += value;
            k += (k & (k ^ (k - 1)));
        }
    }

    // k is from 1 to n.
    public long getSum(int k) {
        long sum = 0;
        while (k > 0) {
            sum += c[k];
            k -= (k & (k ^ (k - 1)));
        }
        return sum;
    }
}

class RangeSum {
    BinaryIndexTree tree;
    int start;

    // [low, high] inclusive
    public RangeSum(int low, int high) {
        start = low;
        tree = new BinaryIndexTree(high - low + 1);
    }

    public void add(int index, long value) {
        tree.add(index - start + 1, value);
    }

    public long get(int index) {
        return tree.getSum(index - start + 1) - tree.getSum(index - start);
    }

    public void set(int index, long value) {
        tree.add(index - start + 1, value - get(index));
    }

    // [l, r] inclusive
    public long getSum(int l, int r) {
        return tree.getSum(r - start + 1) - tree.getSum(l - start);
    }
}

class RangeMax {
    int start;
    int n;
    long[] t;

    // [low, high] inclusive
    public RangeMax(int low, int high) {
        start = low;
        n = high - low + 1;
        t = new long[n * 2 + 2];
        Arrays.fill(t, Long.MIN_VALUE);
    }

    public RangeMax(int low, int high, long defaultValue) {
        start = low;
        n = high - low + 1;
        t = new long[n * 2 + 2];
        Arrays.fill(t, defaultValue);
    }

    long get(int index) {
        return t[index - start + n];
    }

    void set(int index, long value) {
        index -= start;
        for (t[index += n] = value; (index >>= 1) > 0; ) {
            t[index] = Math.max(t[index << 1], t[index << 1 | 1]);
        }
    }

    // [l, r] inclusive
    long getMax(int l, int r) {
        l -= start;
        r = (r + 1 - start); // make it as [l, r)
        long resl = Long.MIN_VALUE, resr = Long.MIN_VALUE;
        for (l += n, r += n; l < r; l >>= 1, r >>= 1) {
            if ((l & 1) != 0) resl = Math.max(resl, t[l++]);
            if ((r & 1) != 0) resr = Math.max(t[--r], resr);
        }
        return Math.max(resl, resr);
    }
}

class RangeMin {
    int start;
    int n;
    long[] t;

    // [low, high] inclusive
    public RangeMin(int low, int high) {
        start = low;
        n = high - low + 1;
        t = new long[n * 2 + 2];
        Arrays.fill(t, Long.MAX_VALUE);
    }

    public RangeMin(int low, int high, long defaultValue) {
        start = low;
        n = high - low + 1;
        t = new long[n * 2 + 2];
        Arrays.fill(t, defaultValue);
    }

    long get(int index) {
        return t[index - start + n];
    }

    void set(int index, long value) {
        index -= start;
        for (t[index += n] = value; (index >>= 1) > 0; ) {
            t[index] = Math.min(t[index << 1], t[index << 1 | 1]);
        }
    }

    // [l, r] inclusive
    long getMin(int l, int r) {
        l -= start;
        r = (r + 1 - start); // make it as [l, r)
        long resl = Long.MAX_VALUE, resr = Long.MAX_VALUE;
        for (l += n, r += n; l < r; l >>= 1, r >>= 1) {
            if ((l & 1) != 0) resl = Math.min(resl, t[l++]);
            if ((r & 1) != 0) resr = Math.min(t[--r], resr);
        }
        return Math.min(resl, resr);
    }
}

// Including topological sort.
class GraphIntegerFaster {
    public List<Integer>[] adj;

    public GraphIntegerFaster(int n) {
        adj = new List[n];
        for (int i = 0; i < n; i++) adj[i] = new ArrayList<>();
    }

    // directed edge x -> y
    public void link(int x, int y) {
        adj[x].add(y);
    }

    public List<Integer> getChildren(int x) {
        return adj[x];
    }

    private static final int TEMPORARY = 1;
    private static final int PERMANENT = 2;

    // x -> y means x should be processed before y
    // The input is a directed graph.
    // 1. return null, means there is a cycle inside the graph, or the input is
    // invalid.
    // 2. return List<Node> as the result.
    public List<Integer> topologicalSort() {
        //Map<E, Integer> vst = new HashMap<>();
        int n = adj.length;
        int[] vst = new int[n];
        List<Integer> result = new ArrayList<>();
        for (int x = 0; x < n; x++) {
            if (!topologicalSort(x, vst, result)) {
                return null;
            }
        }
        Collections.reverse(result);
        return result;
    }

    private boolean topologicalSort(int root, int[] vst, List<Integer> result) {
        if (vst[root] == PERMANENT) {
            return true;
        }
        if (vst[root] == TEMPORARY) { // found cycle
            return false;
        }

        vst[root] = TEMPORARY;
        for (int child : getChildren(root)) {
            if (!topologicalSort(child, vst, result)) {
                return false;
            }
        }
        result.add(root);
        vst[root] = PERMANENT;
        return true;
    }
}

class DijkstraLongFaster {
    public static class Edge {
        int to;
        long w;

        public Edge(int to, long w) {
            this.to = to;
            this.w = w;
        }
    }

    public static final long INF = Long.MAX_VALUE / 4;
    public List<Edge>[] adj;

    public DijkstraLongFaster(int n) {
        this.adj = new List[n];
        for (int i = 0; i < n; i++) adj[i] = new ArrayList<>();
    }

    public void link(int x, int y, long w) {
        adj[x].add(new Edge(y, w));
    }

    public long[] shortestPath(int src) {
        int n = adj.length;
        long[] dist = new long[n];
        boolean[] vst = new boolean[n];
        Arrays.fill(dist, INF);

        PriorityQueue<Edge> q = new PriorityQueue<>((a, b) -> Long.compare(a.w, b.w));
        q.add(new Edge(src, 0));
        dist[src] = 0;

        while (!q.isEmpty()) {
            Edge cur = q.poll();
            if (vst[cur.to]) continue;
            int u = cur.to;
            long w = cur.w;
            vst[u] = true;

            for (Edge e : adj[u]) {
                if (!vst[e.to] && dist[e.to] > w + e.w) {
                    dist[e.to] = w + e.w;
                    q.add(new Edge(e.to, dist[e.to]));
                }
            }
        }
        return dist;
    }

    // NOTE: w of each edge must be the same.
    public long[] bfs(int src) {
        int n = adj.length;
        long[] dist = new long[n];
        boolean[] vst = new boolean[n];
        Arrays.fill(dist, INF);

        Queue<Integer> q = new ArrayDeque<>();
        q.add(src);
        dist[src] = 0;
        vst[src] = true;

        while (!q.isEmpty()) {
            int u = q.poll();
            long w = dist[u];
            for (Edge e : adj[u]) {
                if (!vst[e.to]) {
                    dist[e.to] = w + e.w;
                    vst[e.to] = true;
                    q.add(e.to);
                }
            }
        }
        return dist;
    }
}

class TreapSet<E> {
    private class Node {
        E key;
        int priority, count, total;
        Node left, right, pnt;

        public Node(E key, int priority, Node pnt) {
            this.key = key;
            this.priority = priority;
            this.pnt = pnt;
            this.count = 1;
            this.total = 1;
        }
    }

    private static final Random RANDOM = new Random();
    private final Comparator<? super E> comparator;
    private Node root;

    public TreapSet(Comparator<? super E> comparator) {
        this.comparator = comparator;
    }

    public boolean isEmpty() {
        return root == null;
    }

    public void clear() {
        root = null;
    }

    public int size() {
        return root == null ? 0 : root.total;
    }

    private int leftRank(Node p) {
        return p.left != null ? p.left.total : 0;
    }

    private int rightRank(Node p) {
        return p.right != null ? p.right.total : 0;
    }

    private void rotateLeft(Node x) {
        Node y = x.right;
        if ((x.right = y.left) != null) y.left.pnt = x;
        y.pnt = x.pnt;
        if (x == root) root = y;
        else if (x == x.pnt.left) x.pnt.left = y;
        else x.pnt.right = y;
        y.left = x;
        x.pnt = y;
        x.total = leftRank(x) + rightRank(x) + x.count;
        y.total = leftRank(y) + rightRank(y) + y.count;
    }

    private void rotateRight(Node x) {
        Node y = x.left;
        if ((x.left = y.right) != null) y.right.pnt = x;
        y.pnt = x.pnt;
        if (x == root) root = y;
        else if (x == x.pnt.right) x.pnt.right = y;
        else x.pnt.left = y;
        y.right = x;
        x.pnt = y;
        x.total = leftRank(x) + rightRank(x) + x.count;
        y.total = leftRank(y) + rightRank(y) + y.count;
    }

    public void add(E key) {
        if (root == null) {
            root = new Node(key, RANDOM.nextInt(), null);
            return;
        }
        Node x = root, p = null;
        while (x != null) {
            ++((p = x).total);
            int cmp = comparator.compare(key, x.key);
            if (cmp < 0) x = x.left;
            else if (cmp > 0) x = x.right;
            else {
                ++(x.count);
                return;
            }
        }

        x = new Node(key, RANDOM.nextInt(), p);
        if (comparator.compare(key, p.key) < 0) p.left = x;
        else p.right = x;
        while ((p = x.pnt) != null && p.priority < x.priority) {
            if (p.left == x) rotateRight(p);
            else rotateLeft(p);
        }
    }

    public void remove(E key) {
        Node x = root, p = null;
        while (x != null) {
            --(x.total);
            int cmp = comparator.compare(key, x.key);
            if (cmp < 0) x = x.left;
            else if (cmp > 0) x = x.right;
            else {
                if (--(x.count) > 0) return;
                break;
            }
        }
        if (x == null) return;
        while (x.left != null || x.right != null) {
            if (x.left == null || (x.right != null && x.right.priority > x.left.priority)) {
                rotateLeft(x);
            } else {
                rotateRight(x);
            }
        }
        if ((p = x.pnt) != null) {
            if (p.left == x) p.left = null;
            else p.right = null;
        } else {
            root = null;
        }
        // delete x;
    }

    // number of elements smaller than key
    public int lowerCount(E key) {
        int sum = 0;
        Node x = root;
        while (x != null) {
            int cmp = comparator.compare(key, x.key);
            if (cmp < 0) x = x.left;
            else if (cmp > 0) {
                sum += leftRank(x) + x.count;
                x = x.right;
            } else {
                sum += leftRank(x);
                break;
            }
        }
        return sum;
    }

    // number of elements larger than key
    public int higherCount(E key) {
        //return size() - lowerCount(key) - count(key);
        int sum = 0;
        Node x = root;
        while (x != null) {
            int cmp = comparator.compare(key, x.key);
            if (cmp > 0) x = x.right;
            else if (cmp < 0) {
                sum += rightRank(x) + x.count;
                x = x.left;
            } else {
                sum += rightRank(x);
                break;
            }
        }
        return sum;
    }

    public int index(E key) {
        return lowerCount(key);
    }

    public E get(int index) // index = 0 ... size - 1
    {
        Node p = root;
        ++index;
        while (true) {
            int t = leftRank(p);
            if (index <= t) p = p.left;
            else {
                if ((index -= t + p.count) <= 0) break;
                p = p.right;
            }
        }
        return p.key;
    }

    public int count(E key) {
        Node x = root;
        while (x != null) {
            int cmp = comparator.compare(key, x.key);
            if (cmp < 0) x = x.left;
            else if (cmp > 0) {
                x = x.right;
            } else {
                return x.count;
            }
        }
        return 0;
    }

    public E first() {
        if (root == null) return null;
        Node x = root;
        while (x.left != null) {
            x = x.left;
        }
        return x.key;
    }

    public E last() {
        if (root == null) return null;
        Node x = root;
        while (x.right != null) {
            x = x.right;
        }
        return x.key;
    }

    public boolean contains(E key) {
        return count(key) > 0;
    }

    public E ceiling(E key) {
        int id = lowerCount(key);
        return id >= size() ? null : get(id);
    }

    public E floor(E key) {
        int id = size() - higherCount(key) - 1;
        return id < 0 ? null : get(id);
    }

    public E lower(E key) {
        int id = lowerCount(key) - 1;
        return id < 0 ? null : get(id);
    }

    public E higher(E key) {
        int id = size() - higherCount(key);
        return id >= size() ? null : get(id);
    }

    // return the first index whose value >= target
    // if this value doesn't exist, return index = size()
    public int lowerBound(E target) {
        return lowerCount(target);
    }

    // return the first index whose value > target
    // if this value doesn't exist, return index = size()
    public int upperBound(E target) {
        return size() - higherCount(target);
    }

    public List<E> keys() {
        List<E> list = new ArrayList<>();
        inorder(root, list);
        return list;
    }

    private void inorder(Node x, List<E> list) {
        if (x == null) return;
        inorder(x.left, list);
        list.add(x.key);
        inorder(x.right, list);
    }
}

class ArraySum {
    long[] sum;
    int n;

    // nums index starts from 0 to nums.length - 1;
    public ArraySum(int[] nums) {
        n = nums.length;
        sum = new long[nums.length + 1];
        for (int i = 1; i <= nums.length; i++) {
            sum[i] = sum[i - 1] + nums[i - 1];
        }
    }

    public ArraySum(long[] nums) {
        n = nums.length;
        sum = new long[nums.length + 1];
        for (int i = 1; i <= nums.length; i++) {
            sum[i] = sum[i - 1] + nums[i - 1];
        }
    }

    // [l, r], index starts from 0
    public long getSum(int l, int r) {
        // error handling
        if (l > r || !(l >= 0 && l < n && r >= 0 && r < n)) return 0L;
        return sum[r + 1] - sum[l];
    }
}

class TwoDArraySum {
    int[][] sum;
    int m, n;

    // nums index starts from 0
    public TwoDArraySum(final int[][] nums) {
        m = nums.length;
        n = nums[0].length;
        sum = new int[m + 1][n + 1];
        for (int i = 1; i <= m; i++) {
            for (int j = 1; j <= n; j++) {
                sum[i][j] = sum[i][j - 1] + sum[i - 1][j] - sum[i - 1][j - 1] + nums[i - 1][j - 1];
            }
        }
    }

    // [(x1, y1), (x2, y2)], index starts from 0
    // x1 <= x2 and y1 <= y2
    public int getSum(int x1, int y1, int x2, int y2) {
        if (!(x1 >= 0 && x1 < m && y1 >= 0 && y1 < n && x2 >= 0 && x2 < m && y2 >= 0 && y2 < n) || x1 > x2 || y1 > y2)
            return 0;
        return sum[x2 + 1][y2 + 1] - sum[x2 + 1][y1] - sum[x1][y2 + 1] + sum[x1][y1];
    }
}

class ArrayUtils {
    static void fill(int[] array, int defaultValue) {
        Arrays.fill(array, defaultValue);
    }

    static void fill(int[][] array, int defaultValue) {
        for (int[] a1 : array) {
            Arrays.fill(a1, defaultValue);
        }
    }

    static void fill(int[][][] array, int defaultValue) {
        for (int[][] a2 : array) {
            for (int[] a1 : a2) {
                Arrays.fill(a1, defaultValue);
            }
        }
    }

    static void fill(int[][][][] array, int defaultValue) {
        for (int[][][] a3 : array) {
            for (int[][] a2 : a3) {
                for (int[] a1 : a2) {
                    Arrays.fill(a1, defaultValue);
                }
            }
        }
    }

    static void fill(int[][][][][] array, int defaultValue) {
        for (int[][][][] a4 : array) {
            for (int[][][] a3 : a4) {
                for (int[][] a2 : a3) {
                    for (int[] a1 : a2) {
                        Arrays.fill(a1, defaultValue);
                    }
                }
            }
        }
    }

    static void fill(int[][][][][][] array, int defaultValue) {
        for (int[][][][][] a5 : array) {
            for (int[][][][] a4 : a5) {
                for (int[][][] a3 : a4) {
                    for (int[][] a2 : a3) {
                        for (int[] a1 : a2) {
                            Arrays.fill(a1, defaultValue);
                        }
                    }
                }
            }
        }
    }

    static void fill(long[] array, long defaultValue) {
        Arrays.fill(array, defaultValue);
    }

    static void fill(long[][] array, long defaultValue) {
        for (long[] a1 : array) {
            Arrays.fill(a1, defaultValue);
        }
    }

    static void fill(long[][][] array, long defaultValue) {
        for (long[][] a2 : array) {
            for (long[] a1 : a2) {
                Arrays.fill(a1, defaultValue);
            }
        }
    }

    static void fill(long[][][][] array, long defaultValue) {
        for (long[][][] a3 : array) {
            for (long[][] a2 : a3) {
                for (long[] a1 : a2) {
                    Arrays.fill(a1, defaultValue);
                }
            }
        }
    }

    static void fill(long[][][][][] array, long defaultValue) {
        for (long[][][][] a4 : array) {
            for (long[][][] a3 : a4) {
                for (long[][] a2 : a3) {
                    for (long[] a1 : a2) {
                        Arrays.fill(a1, defaultValue);
                    }
                }
            }
        }
    }

    static void fill(long[][][][][][] array, long defaultValue) {
        for (long[][][][][] a5 : array) {
            for (long[][][][] a4 : a5) {
                for (long[][][] a3 : a4) {
                    for (long[][] a2 : a3) {
                        for (long[] a1 : a2) {
                            Arrays.fill(a1, defaultValue);
                        }
                    }
                }
            }
        }
    }
}

class CharacterUtils {
    static boolean[] vowel = new boolean[128];

    static {
        vowel['a'] = vowel['e'] = vowel['i'] = vowel['o'] = vowel['u'] = true;
        vowel['A'] = vowel['E'] = vowel['I'] = vowel['O'] = vowel['U'] = true;
    }

    static boolean isVowel(char ch) {
        return vowel[ch];
    }

    static boolean isLetter(char ch) {
        return ((ch - 'a') >= 0 && (ch - 'a') < 26) ||
                ((ch - 'A') >= 0 && (ch - 'A') < 26);
    }

    static boolean isLowerCase(char ch) {
        return (ch - 'a') >= 0 && (ch - 'a') < 26;
    }

    static boolean isUpperCase(char ch) {
        return (ch - 'A') >= 0 && (ch - 'A') < 26;
    }

    static boolean isDigit(char ch) {
        return (ch - '0') >= 0 && (ch - '0') <= 9;
    }
}

class DoubleUtils {
    private static final double EPS = 1e-8;

    public static int compare(double a, double b) {
        if (a - b > EPS) return 1;
        else if (a - b < -EPS) return -1;
        else return 0;
    }

    public static boolean isInteger(double a) {
        return compare(floor(a), a) == 0;
    }

    public static double floor(double a) {
        return Math.floor(a + EPS);
    }

    public static double ceil(double a) {
        return Math.ceil(a - EPS);
    }
}

class MatrixUtils {
    static final long MOD = 1_000_000_007L;

    // matrix[n][n], matrix[i][i] = 1
    static long[][] genIdentityMatrix(int n) {
        long[][] matrix = new long[n][n];
        for (int i = 0; i < n; i++) matrix[i][i] = 1;
        return matrix;
    }

    static long[][] multiply(long[][] a, long[][] b, long MOD) {
        int m1 = a.length;
        int n1 = a[0].length;
        int m2 = b.length;
        int n2 = b[0].length;
        if (n1 != m2) return null;
        long[][] res = new long[m1][n2];
        for (int i = 0; i < m1; i++) {
            for (int j = 0; j < n2; j++) {
                for (int k = 0; k < n1; k++) {
                    res[i][j] = (res[i][j] + a[i][k] * b[k][j]) % MOD;
                }
            }
        }
        return res;
    }

    static long[][] multiply(long[][] a, long[][] b) {
        int m1 = a.length;
        int n1 = a[0].length;
        int m2 = b.length;
        int n2 = b[0].length;
        if (n1 != m2) return null;
        long[][] res = new long[m1][n2];
        for (int i = 0; i < m1; i++) {
            for (int j = 0; j < n2; j++) {
                for (int k = 0; k < n1; k++) {
                    res[i][j] = (res[i][j] + a[i][k] * b[k][j]);
                }
            }
        }
        return res;
    }

    // a^b % MOD
    static long[][] powMod(long[][] a, long b, long MOD) {
        int n = a.length;
        long[][] res = genIdentityMatrix(n);
        while (b > 0) {
            if ((b & 1) != 0) res = multiply(res, a, MOD);
            a = multiply(a, a, MOD);
            b >>= 1;
        }
        return res;
    }

    static void print(long[][] matrix) {
        for (int i = 0; i < matrix.length; i++) {
            System.out.println(Arrays.toString(matrix[i]));
        }
    }
}

class IntegerUtils {
    static long[] power10 = new long[19]; // 10^i

    static {
        power10[0] = 1L;
        for (int i = 1; i < power10.length; i++) {
            power10[i] = power10[i - 1] * 10;
        }
    }

    // swap index i and j of integer (long) num. i == 0 means the lowest position.
    static long swapDigit(long num, int i, int j) {
        if (i == j) return num;
        long di = num / power10[i] % 10L;
        long dj = num / power10[j] % 10L;
        return num - di * power10[i] - dj * power10[j] + dj * power10[i] + di * power10[j];
    }
}

class StringUtils {
    // This function is deprecated, please hash(int l, int r) in class StableStringHash or StringHash
    // rolling hash of substrings of 's' with length == k
    // long[pos] = hash(s.substring(pos, pos + k))
    public static long[] rollingHash(String s, int k) {
        long[] ans = new long[s.length() - k + 1];
        int seed1 = 31;
        int seed2 = 131;
        int h1 = 0, h2 = 0, power1 = 1, power2 = 1;
        for (int i = 0; i < k; i++) {
            h1 = h1 * seed1 + s.charAt(i);
            h2 = h2 * seed2 + s.charAt(i);

            power1 *= seed1;
            power2 *= seed2;
        }

        ans[0] = ((long) h1 << 32) | ((long) h2 << 32 >>> 32);
        for (int i = k; i < s.length(); i++) {
            h1 = h1 * seed1 + s.charAt(i) - power1 * s.charAt(i - k);
            h2 = h2 * seed2 + s.charAt(i) - power2 * s.charAt(i - k);
            ans[i - k + 1] = ((long) h1 << 32) | ((long) h2 << 32 >>> 32);
        }

        return ans;
    }

    public static int[] kmpNext(String s) {
        int n = s.length();
        int[] next = new int[n];
        next[0] = 0;
        for (int i = 1; i < n; i++) {
            int k = next[i - 1];
            while (k > 0 && s.charAt(i) != s.charAt(k)) k = next[k - 1];
            if (s.charAt(i) == s.charAt(k)) {
                next[i] = k + 1;
            } else {
                next[i] = 0;
            }
        }
        return next;
    }

    // s is the original String
    // p is the pattern String
    public static boolean kmpMatch(String s, String p) {
        int[] next = kmpNext(p);
        int n = s.length();
        int m = p.length();
        for (int i = 0, j = 0; i < n; i++) {
            while (j > 0 && p.charAt(j) != s.charAt(i)) {
                j = next[j - 1];
            }
            if (p.charAt(j) == s.charAt(i)) j++;
            if (j == m) return true;
        }
        return false;
    }

    public static int[] kmpNext(int[] s) {
        int n = s.length;
        int[] next = new int[n];
        next[0] = 0;
        for (int i = 1; i < n; i++) {
            int k = next[i - 1];
            while (k > 0 && s[i] != s[k]) k = next[k - 1];
            if (s[i] == s[k]) {
                next[i] = k + 1;
            } else {
                next[i] = 0;
            }
        }
        return next;
    }

    // s is the original String
    // p is the pattern String
    public static boolean kmpMatch(int[] s, int[] p) {
        int[] next = kmpNext(p);
        int n = s.length;
        int m = p.length;
        for (int i = 0, j = 0; i < n; i++) {
            while (j > 0 && p[j] != s[i]) {
                j = next[j - 1];
            }
            if (p[j] == s[i]) j++;
            if (j == m) return true;
        }
        return false;
    }

    // Z[i] = longest length of common prefix of str[0 ... n - 1] and str[i ... n - 1]
    // Tested by LC2223, LC459
    public static int[] zFunction(String str) {
        int n = str.length();
        int[] Z = new int[n];
        // [L,R] makes a window which matches with prefix of s
        int L = 0, R = 0;
        Z[0] = n;
        for (int i = 1; i < n; ++i) {
            if (i > R) {
                L = R = i;
                while (R < n && str.charAt(R - L) == str.charAt(R)) R++;
                Z[i] = R - L;
                R--;
            } else {
                int k = i - L;
                if (Z[k] < R - i + 1) {
                    Z[i] = Z[k];
                } else {
                    L = i;
                    while (R < n && str.charAt(R - L) == str.charAt(R)) R++;
                    Z[i] = R - L;
                    R--;
                }
            }
        }
        return Z;
    }
}

// Better to use this when length of string >= 2^11
class StringHash {
    static class SingleStringHash {
        long[] h;
        long[] pow;
        final long SEED;
        final long MOD;

        public SingleStringHash(String s, long SEED, long MOD) { // example: SEED = 131L;
            this.SEED = SEED;
            this.MOD = MOD;
            int n = s.length();
            h = new long[n + 1];
            pow = new long[n + 1];
            pow[0] = 1;
            for (int i = 1; i <= n; i++) pow[i] = (pow[i - 1] * SEED) % MOD;
            //h[i] = hash[s[0...i - 1]]
            h[0] = 0;
            for (int i = 1; i <= n; i++) {
                h[i] = (h[i - 1] * SEED + s.charAt(i - 1)) % MOD;
            }
        }

        // hash[s[l....r]]
        public long hash(int l, int r) {
            long ret = (h[r + 1] - h[l] * pow[r - l + 1]) % MOD;
            return ret >= 0 ? ret : ret + MOD;
        }
    }

    private SingleStringHash hash1, hash2;
    static final long SEED1 = 31L, SEED2 = 131L;
    static final long MOD = 1_000_000_007L;

    public StringHash(String s) {
        hash1 = new SingleStringHash(s, SEED1, MOD);
        hash2 = new SingleStringHash(s, SEED2, MOD);
    }

    public long hash(int l, int r) {
        return (hash1.hash(l, r) << 32) | (hash2.hash(l, r) << 32 >>> 32);
    }

    public static long hashCode(String s) {
        long h1 = 0, h2 = 0;
        for (int i = 0; i < s.length(); i++) {
            h1 = (h1 * SEED1 + s.charAt(i)) % MOD;
            h2 = (h2 * SEED2 + s.charAt(i)) % MOD;
        }
        return (h1 << 32) | (h2 << 32 >>> 32);
    }

    public static long hashCode(char[] s) {
        long h1 = 0, h2 = 0;
        for (int i = 0; i < s.length; i++) {
            h1 = (h1 * SEED1 + s[i]) % MOD;
            h2 = (h2 * SEED2 + s[i]) % MOD;
        }
        return (h1 << 32) | (h2 << 32 >>> 32);
    }
}

class IntegerArrayHash {
    static class SingleIntegerArrayHash {
        long[] h;
        long[] pow;
        final long SEED;
        final long MOD;

        public SingleIntegerArrayHash(int[] s, long SEED, long MOD) { // example: SEED = 131L;
            this.SEED = SEED;
            this.MOD = MOD;
            int n = s.length;
            h = new long[n + 1];
            pow = new long[n + 1];
            pow[0] = 1;
            for (int i = 1; i <= n; i++) pow[i] = (pow[i - 1] * SEED) % MOD;
            //h[i] = hash[s[0...i - 1]]
            h[0] = 0;
            for (int i = 1; i <= n; i++) {
                h[i] = (h[i - 1] * SEED + s[i - 1]) % MOD;
                if (h[i] < 0) h[i] += MOD;
            }
        }

        // hash[s[l....r]]
        public long hash(int l, int r) {
            long ret = (h[r + 1] - h[l] * pow[r - l + 1]) % MOD;
            return ret >= 0 ? ret : ret + MOD;
        }
    }

    private SingleIntegerArrayHash hash1, hash2;
    static final long SEED1 = 31L, SEED2 = 131L;
    static final long MOD = 1_000_000_007L; // or 1_000_000_123L

    public IntegerArrayHash(int[] s) {
        hash1 = new SingleIntegerArrayHash(s, SEED1, MOD);
        hash2 = new SingleIntegerArrayHash(s, SEED2, MOD);
    }

    public long hash(int l, int r) {
        return (hash1.hash(l, r) << 32) | (hash2.hash(l, r) << 32 >>> 32);
    }

    public static long hashCode(int[] s) {
        long h1 = 0, h2 = 0;
        for (int i = 0; i < s.length; i++) {
            h1 = (h1 * SEED1 + s[i]) % MOD;
            if (h1 < 0) h1 += MOD;
            h2 = (h2 * SEED2 + s[i]) % MOD;
            if (h2 < 0) h2 += MOD;
        }
        return (h1 << 32) | (h2 << 32 >>> 32);
    }

    public static long hashCode(List<Integer> s) {
        long h1 = 0, h2 = 0;
        for (int i = 0; i < s.size(); i++) {
            h1 = (h1 * SEED1 + s.get(i)) % MOD;
            if (h1 < 0) h1 += MOD;
            h2 = (h2 * SEED2 + s.get(i)) % MOD;
            if (h2 < 0) h2 += MOD;
        }
        return (h1 << 32) | (h2 << 32 >>> 32);
    }
}

class RMQ { // NOTE!!! query return index, not value
    // tested by LC 1438,239
    final long[] a; // input data array copy
    int[][] d;

    int[] log2;
    boolean useMax;

    private static long[] intArrayToLongArray(int[] nums) {
        long[] ret = new long[nums.length];
        for (int i = 0; i < nums.length; i++) ret[i] = nums[i];
        return ret;
    }

    // useMax == true means RMQMax
    public RMQ(int[] input, boolean useMax) {
        this(intArrayToLongArray(input), useMax);
    }

    public RMQ(long[] input, boolean useMax) {
        int n = input.length;
        this.a = input;
        this.log2 = Utils.preprocessLog2(n);
        this.useMax = useMax;
        this.d = new int[log2[n] + 1][n];
        for (int i = 0; i < n; i++) d[0][i] = i;
        for (int j = 1; (1 << j) <= n; j++)
            for (int i = 0; i + (1 << j) <= n; i++)
                if (useMax) {
                    d[j][i] = a[d[j - 1][i]] >= a[d[j - 1][i + (1 << (j - 1))]] ? d[j - 1][i] : d[j - 1][i + (1 << (j - 1))];
                } else {
                    d[j][i] = a[d[j - 1][i]] <= a[d[j - 1][i + (1 << (j - 1))]] ? d[j - 1][i] : d[j - 1][i + (1 << (j - 1))];
                }
    }

    // i <= j, and index starts from 0.
    public int query(int i, int j) { // NOTE!!! return index, not value
        int k = log2[j - i + 1];
        if (useMax) return a[d[k][i]] >= a[d[k][j - (1 << k) + 1]] ? d[k][i] : d[k][j - (1 << k) + 1];
        else return a[d[k][i]] <= a[d[k][j - (1 << k) + 1]] ? d[k][i] : d[k][j - (1 << k) + 1];
    }
}

class RMQValue { // NOTE!!! query return value, not index
    final long[] a; // input data array copy
    long[][] d;

    int[] log2;
    boolean useMax;

    private static long[] intArrayToLongArray(int[] nums) {
        long[] ret = new long[nums.length];
        for (int i = 0; i < nums.length; i++) ret[i] = nums[i];
        return ret;
    }

    // useMax == true means RMQMax
    public RMQValue(int[] input, boolean useMax) {
        this(intArrayToLongArray(input), useMax);
    }

    public RMQValue(long[] input, boolean useMax) {
        int n = input.length;
        this.a = input;
        this.log2 = Utils.preprocessLog2(n);
        this.useMax = useMax;
        this.d = new long[log2[n] + 1][n];
        for (int i = 0; i < n; i++) d[0][i] = a[i];
        for (int j = 1; (1 << j) <= n; j++)
            for (int i = 0; i + (1 << j) <= n; i++)
                if (useMax) {
                    d[j][i] = Math.max(d[j - 1][i], d[j - 1][i + (1 << (j - 1))]);
                } else {
                    d[j][i] = Math.min(d[j - 1][i], d[j - 1][i + (1 << (j - 1))]);
                }
    }

    // i <= j, and index starts from 0.
    public long query(int i, int j) {
        int k = log2[j - i + 1];
        if (useMax) return Math.max(d[k][i], d[k][j - (1 << k) + 1]);
        else return Math.min(d[k][i], d[k][j - (1 << k) + 1]);
    }
}

// Tested by 2827
// Similar: 1012, 2376, 902, 2719, 2801, 357, 1215, 1397
class DigitDP {
    static final boolean ENABLE_DEBUG_MODE = false; // TODO: set it to true if you want to print more debug info
    static final long UNSET = -1;
    // dp[isStart][hasLimit][pos] | [odd][even][r]
    // (isStart, hasLimit, pos) is generic, (odd, even, r) is use case specific
    long[][][][][][] dp;
    int K;

    public long digitDP(long num, int k) {
        String numString = String.valueOf(num); // TODO
        this.dp = new long[2][2][numString.length()][numString.length() + 1][numString.length() + 1][k];
        this.K = k;

        if (ENABLE_DEBUG_MODE) System.out.println(""num = "" + numString);
        ArrayUtils.fill(dp, UNSET);
        long ans = dfs(new StringBuilder(), numString, 1, 1, 0, 0, 0, 0);
        if (ENABLE_DEBUG_MODE) System.out.println(""---------------------\n"");
        return ans;
    }

    long dfs(StringBuilder curResult, String s, int isStart, int hasLimit, int pos, int odd, int even, int r) {
        if (pos == s.length()) {
            if (isStart == 1) return 0; // NOTE: special check for num == 0. TODO
            if (r == 0 && odd == even) { // TODO
                if (ENABLE_DEBUG_MODE) System.out.println(""result = "" + curResult);
                return 1;
            } else {
                return 0;
            }
        }
        if (dp[isStart][hasLimit][pos][odd][even][r] != UNSET) return dp[isStart][hasLimit][pos][odd][even][r];

        int start = 0;
        int end = (hasLimit == 1) ? s.charAt(pos) - '0' : 9; // TODO: check if it is binary string or not

        long ans = 0;
        for (int digit = start; digit <= end; digit++) {
            if (isStart == 1 && digit == 0) { // NOTE: handle leading zeros
                // [0, 999..9]
                // [0， 10^(len(s) - pos - 1) - 1]
                ans += dfs(new StringBuilder(), s, 1, 0, pos + 1, 0, 0, 0);
                continue;
            }
            int newHasLimit = (hasLimit == 1 && digit == s.charAt(pos) - '0') ? 1 : 0;

            int newOdd = odd + (digit % 2); // TODO
            int newEven = even + (digit % 2 == 0 ? 1 : 0); // TODO
            int newR = (isStart == 1 ? digit % this.K : (r * 10 + digit) % this.K); // TODO;

            if (ENABLE_DEBUG_MODE) curResult.append(digit);
            ans += dfs(curResult, s, 0, newHasLimit, pos + 1, newOdd, newEven, newR);
            if (ENABLE_DEBUG_MODE) curResult.deleteCharAt(curResult.length() - 1);

        }
        return dp[isStart][hasLimit][pos][odd][even][r] = ans;
    }
}

class Printer {
    static boolean ENABLE_LOCAL_PRINT = false;

    static void println(String x) {
        if (!ENABLE_LOCAL_PRINT) return; // do nothing
        System.out.println(x);
    }

    static void printf(String format, Object... args) {
        if (!ENABLE_LOCAL_PRINT) return; // do nothing
        System.out.printf(format, args);
    }
}


public class Solution {
    private static final int INF = 1_000_000_001;
    private static final long MOD = 1_000_000_007L;

    private static final int UNSET = -131;
    // 4 neighbors
    private static final int[] DX = {-1, 0, 1, 0}; // up, right, down, left
    private static final int[] DY = {0, 1, 0, -1};

    // 8 neighbors
    //    private static final int[] DX = {-1, -1, 0, 1, 1,  1, 0,  -1};
    //    private static final int[] DY = {0,   1, 1, 1, 0, -1, -1, -1};

    // knight
    //    private static final int[] DX = {-2, -2, -1, 1, 2, 2, 1, -1};
    //    private static final int[] DY = {-1, 1, 2, 2, 1, -1, -2, -2};

    static class DynamicSegmentTreeRangeAddRangeMin {
        static final long DEFAULT_VALUE = 0;

        private class TreeNode {
            TreeNode left, right;
            long lazy = 0;
            long min = DEFAULT_VALUE;
        }

        private TreeNode root;
        final long L, R;

        public DynamicSegmentTreeRangeAddRangeMin(long l, long r) { // [l, r] inclusive
            L = l;
            R = r;
            root = new TreeNode();
        }

        private void pushDown(TreeNode root) {
            if (root.lazy != 0) {
                root.left.lazy += root.lazy;
                root.right.lazy += root.lazy;
                root.left.min += root.lazy;
                root.right.min += root.lazy;
                root.lazy = 0;
            }
        }

        private void extend(TreeNode root) {
            if (root.left == null) {
                root.left = new TreeNode();
                root.right = new TreeNode();
            }
        }

        public void update(long queryL, long queryR, long value) {
            update(root, L, R, queryL, queryR, value);
        }

        private void update(TreeNode root, long L, long R, long queryL, long queryR, long value) {
            if (queryR < L || R < queryL) return;
            if (queryL <= L && R <= queryR) {
                root.lazy += value;
                root.min += value;
                return;
            }
            long M = (L + R) >> 1;
            extend(root);
            pushDown(root);
            update(root.left, L, M, queryL, queryR, value);
            update(root.right, M + 1, R, queryL, queryR, value);
            root.min = Math.min(root.left.min, root.right.min);
        }

        public long query(long queryL, long queryR) {
            return query(root, L, R, queryL, queryR);
        }

        private long query(TreeNode root, long L, long R, long queryL, long queryR) {
            if (queryR < L || R < queryL) return DEFAULT_VALUE;
            if (queryL <= L && R <= queryR) {
                return root.min;
            }
            long M = (L + R) >> 1;
            extend(root);
            pushDown(root);
            return Math.min(query(root.left, L, M, queryL, queryR), query(root.right, M + 1, R, queryL, queryR));
        }
    }
    public int minZeroArray(int[] nums, int[][] queries) {
        int n = nums.length;
        DynamicSegmentTreeRangeAddRangeMin tree = new DynamicSegmentTreeRangeAddRangeMin(0, n - 1);
        for (int i = 0; i < n; i++) {
            tree.update(i, i, -nums[i]);
        }

        int maxValue = nums[0];
        for (int i = 0; i < n; i++) {
            maxValue = Math.max(maxValue, nums[i]);
        }
        if (maxValue == 0) return 0;
        for (int i = 0; i < queries.length; i++) {
            int l = queries[i][0];
            int r = queries[i][1];
            int v = queries[i][2];
            tree.update(l, r, v);
            if (tree.query(0, n - 1) >= 0) return (i + 1);

        }

        return -1;
    }

    public static void main(String[] args) throws Exception {
        long startTime = System.currentTimeMillis();
        Printer.ENABLE_LOCAL_PRINT = true;
        /* ------------------------------------------------------- */
        /* ------------------------------------------------------- */
        /* ------------------------------------------------------- */



        /* ------------------------------------------------------- */
        /* ------------------------------------------------------- */
        /* ------------------------------------------------------- */
        System.out.println((System.currentTimeMillis() - startTime) + ""ms"");
    }
}",1454830955
Biren Amanta,birenamanta,661,3616,java,"import java.util.Arrays;

class Solution {
    boolean simulate(int start, int direction, int[] nums, int n) {
        int[] temp = Arrays.copyOf(nums, nums.length); 
        int curr = start;

        while (curr >= 0 && curr < n) {
            if (temp[curr] == 0) {
                curr += direction;
            } else {
                temp[curr]--; 
                direction = -direction; 
                curr += direction;
            }
        }

        for (int value : temp) {
            if (value != 0) return false;
        }
        return true;
    }

    public int countValidSelections(int[] nums) {
        int n = nums.length, result = 0;
        for (int i = 0; i < n; ++i) {
            if (nums[i] == 0) { 
                if (simulate(i, -1, nums, n)) result++; 
                if (simulate(i, 1, nums, n)) result++;
            }
        }
        return result;
    }
}
",1454815161
Biren Amanta,birenamanta,661,3639,java,"class Solution {
    public boolean isZeroArray(int[] nums, int[][] queries) {
        int n = nums.length;
        int[] diff = new int[n + 1];
        for (int[] query : queries) {
            int start = query[0];
            int end = query[1];
            diff[start]--;
            if (end + 1 < n) {
                diff[end + 1]++;
            }
        }
        int cumulativeChange = 0;
        for (int i = 0; i < n; i++) {
            cumulativeChange += diff[i];
            nums[i] += cumulativeChange; 
            if (nums[i] > 0) {
                return false;
            }
        }

        return true;
    }
}
",1454824037
Biren Amanta,birenamanta,661,3643,java,"import java.util.Arrays;

class Solution {
    
    private void applyQuery(int left, int right, int value, int[] diff, int n) {
        diff[left] -= value; 
        if (right + 1 < n) {
            diff[right + 1] += value; 
        }
    }

    public int minZeroArray(int[] nums, int[][] queries) {
        int n = nums.length;

        int left = 0, right = queries.length;
        int result = -1;

        while (left <= right) {
            int mid = left + (right - left) / 2;

            int[] diff = new int[n + 1];
            int[] modifiedArray = nums.clone();
            boolean isZeroArray = true;

            for (int i = 0; i < mid; i++) {
                int leftIndex = queries[i][0];
                int rightIndex = queries[i][1];
                int value = queries[i][2];
                applyQuery(leftIndex, rightIndex, value, diff, n);
            }
            int cumulativeChange = 0;
            for (int i = 0; i < n; i++) {
                cumulativeChange += diff[i];
                modifiedArray[i] += cumulativeChange;
                if (modifiedArray[i] > 0) {
                    isZeroArray = false;
                    break;
                }
            }

            if (isZeroArray) {
                result = mid;
                right = mid - 1;
            } else {
                left = mid + 1;
            }
        }

        return result;
    }
}
",1454838430
Yijie Lu,ZMXZZ,662,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        prefix_sum = []
        suffix_sum = []
        val1 = 0
        val2 = 0
        for i in range(len(nums)):
            val1 += nums[i]
            prefix_sum.append(val1)
            val2 += nums[len(nums) - i - 1]
            suffix_sum.append(val2)

        suffix_sum.reverse()
        res = 0
        for i in range(len(nums)):
            if nums[i] == 0 and prefix_sum[i] == suffix_sum[i]:
                res += 2
            elif nums[i] == 0 and abs(prefix_sum[i] - suffix_sum[i]) == 1:
                res += 1
        return res
",1454809763
Yijie Lu,ZMXZZ,662,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        l = len(nums)
        arr = [0] * l
        for [i, j] in queries:
            arr[i] += 1
            if j + 1 < l:
                arr[j+1] -= 1
        for i in range(l):
            if i > 0:
                arr[i] += arr[i-1]
            if arr[i] < nums[i]:
                return False
        return True

        # [1, 0, 0, -1, 0, 0, 1, 1, 0, -1, 0, -1, 0]
        # [1, 1, 1, 0, 0, 0, 1, 2, 2, 1, 0, 0, 0]",1454819285
Yijie Lu,ZMXZZ,662,3643,python3,"class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        def valid(cur: int):
            l = len(nums)
            arr = [0] * l
            for [i, j, v] in queries[:cur]:
                arr[i] += v
                if j + 1 < l:
                    arr[j+1] -= v
            for i in range(l):
                if i > 0:
                    arr[i] += arr[i-1]
                if arr[i] < nums[i]:
                    return False
            return True
        left = 0
        right = len(queries)
        while left < right:
            mid = (left + right) // 2
            if valid(mid):
                right = mid
            else:
                left = mid + 1
        if valid(left):
            return left
        return -1",1454838431
lilPeep,stupidRR,663,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int ans=0;
        int n=nums.size();
        for(int i=0;i<n;i++)
        {
            if(nums[i])
                continue;
            for(int dir=-1;dir<=1;dir+=2)
            {
                auto curr=nums;
                int tmp=dir;
                int ind=i;
                while(ind<n && ind>-1)
                {
                    if(curr[ind]!=0)
                    {
                        curr[ind]--;
                        tmp=-tmp;
                    }
                    ind+=tmp;
                }
                
                bool ok=true;
                for(auto ele : curr)
                {
                    if(ele)
                        ok=false;
                }
                
                ans=ans+ok;
            }
        }
        return ans;
    }
};",1454838470
lilPeep,stupidRR,663,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n=nums.size();
        vector<int> pre(n+1);
        for(auto query : queries)
        {
            pre[ query[0] ]++;
            pre[ query[1]+1 ]--;
        }
        for(int i=1;i<=n;i++)
            pre[i]+=pre[i-1];
        for(int i=0;i<n;i++)
        {
            if(pre[i]<nums[i])
                return false;
        }
        return true;
    }
};",1454807462
lilPeep,stupidRR,663,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int low=0;
        int high=queries.size();
        int ans=-1;
        while(low<=high)
        {
            int mid=(low+high)/2;
            
            int n=nums.size();
            vector<long long> pre(n+1);
            for(int i=0;i<mid;i++)
            {
                pre[ queries[i][0] ]=pre[ queries[i][0] ]+queries[i][2];
                pre[ queries[i][1]+1 ]=pre[ queries[i][1]+1 ]-queries[i][2];
            }
            
            bool ok=true;
            for(int i=1;i<=n;i++)
                pre[i]+=pre[i-1];
            for(int i=0;i<n;i++)
            {
                if(pre[i]<nums[i])
                    ok=false;
            }
            
            if(ok)
            {
                ans=mid;
                high=mid-1;
            }
            else
                low=mid+1;
        }
        return ans;
    }
};",1454814364
Mridul Gupta,mridulgupta9,664,3616,cpp,"class Solution {
public:
    int check_validity(vector<int> nums, int cur_idx, int dir)
    {
        while(cur_idx >= 0 && cur_idx < nums.size())
        {
            if(nums[cur_idx]==0)
                cur_idx += dir;
            else if(nums[cur_idx] < 0)
            {
                return 0;
            }
            else
            {
                nums[cur_idx]--;
                dir *= (-1);
                cur_idx +=dir;
            }
        }
        for(int i=0;i<nums.size();i++)
            if(nums[i]!=0)
                return 0;
        return 1;
    }
    int countValidSelections(vector<int>& nums) {
        int count=0;
        for(int i=0;i<nums.size();i++)
        {
            if(nums[i]==0)
            {
                count += check_validity(nums,i,-1); //move left
                count += check_validity(nums,i,1); //move right
            }
            
        }
        return count;
    }
};",1454812663
Mridul Gupta,mridulgupta9,664,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        vector<int>diff(nums.size(),0);
        for(vector<int>& q: queries)
        {
            diff[q[0]]+=1;
            if(q[1]+1 < nums.size())
            diff[q[1]+1]-=1;
        }
        if(diff[0] < nums[0])
            return 0;
        for(int i=1;i<nums.size();i++)
        {
            diff[i] += diff[i-1];
            if(diff[i] < nums[i])
                return 0;
        }
        return 1;
        
    }
};",1454835006
Mridul Gupta,mridulgupta9,664,3643,cpp,"class Solution {
public:
    bool canMakeZero(vector<int>& nums,vector<vector<int>>& queries, int query_count)
    {
        vector<int>diff(nums.size(),0);
        for(int i=0; i < query_count;i++)
        {
            vector<int>&q = queries[i];
            diff[q[0]]+=q[2];
            if(q[1]+1 < nums.size())
            diff[q[1]+1]-=q[2];
        }
        if(diff[0] < nums[0])
            return 0;
        
        for(int i=1;i<nums.size();i++)
        {
            diff[i] += diff[i-1];
            if(diff[i] < nums[i])
                return 0;
        }
        return 1;
    }
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int lo=0; //no queries are needed
        int hi = queries.size(); //all queries are needed
        while(lo < hi)
        {
            int mid = lo + (hi - lo)/2;
            if(canMakeZero(nums,queries, mid))
                hi = mid;
            else
                lo = mid+1;
        }
        return canMakeZero(nums,queries, lo)==1?lo:-1;
    }
};",1454845890
Max Chang,BreadMuMu,665,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        n = len(nums)
        count = 0
        for i in range(n):
            if self.check(i, 1, nums.copy()):
                count += 1
            if self.check(i, -1, nums.copy()):
                count += 1
        return count
    
    def check(self, curr, move, nums):
        n = len(nums)
        if nums[curr] != 0: return False
        while curr >= 0 and curr < n:
            if nums[curr] == 0:
                curr += move
            elif nums[curr] > 0:
                nums[curr] -= 1
                move *= -1
                curr += move
        return sum(nums) == 0
            ",1454823080
Max Chang,BreadMuMu,665,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        n = len(nums)
        diff = [0] * (n+1)
        m = len(queries)
        for i in range(m):
            a, b = queries[i]
            diff[a] += 1
            diff[b+1] -= 1
        
        prefix = 0
        answer = True
        for i in range(n):
            prefix += diff[i]
            if nums[i] > prefix:
                return False
        return True",1454833418
Max Chang,BreadMuMu,665,3643,python3,"class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        if sum(nums) == 0:
            return 0
    
        m = len(queries)
        left, right = 1, m+1
        while left < right:
            mid = left + (right-left)//2
            if self.isOK(mid, nums, queries):
                right = mid
            else:
                left = mid+1
        if left == m+1:
            return -1
        return left
    
    def isOK(self, k, nums, queries):
        n, m = len(nums), len(queries)
        diff = [0] * (n+1)
        for i in range(k):
            a, b, v = queries[i]
            diff[a] += v
            diff[b+1] -= v
        
        result = True
        prefix = 0
        for i in range(n):
            prefix += diff[i]
            if nums[i] > prefix:
                return False
        return True
        ",1454845900
Soutik Dey,braindroid,666,3616,cpp,"class Solution {
public:
    int start(int i , vector<int>A , int dir ) {
        int n = (int)A.size();
        int sum = 0;
        for(auto &x : A) sum += x;
        if(sum == 0) return 1;
        if(i < 0 || i >= n) {
            return 0;
        }

        while(i >= 0 && i < n) {
            if(sum == 0) {
                return 1;
            }
            if(A[i] == 0) {
                i += dir;
            } else if(A[i] > 0) {
                A[i]--;
                sum--;
                dir *= -1;
                i += dir;
            }
        }
        return 0;
    }
    int countValidSelections(vector<int>& a) {
        int n = (int)a.size();
        int sum = 0;
        for(auto &x : a) sum += x;
        int curr = 0;
        int ans = 0;
        for(int i = 0 ; i < n ; i++) {
            vector<int>A = a;
            if(A[i] == 0) {
                ans += start(i,A,1);
                ans += start(i,A,-1);
            }
        }
        return ans;
    }
};",1454817572
Soutik Dey,braindroid,666,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& a, vector<vector<int>>& queries) {
        int n = (int)a.size();
        vector<int>pref(n+2,0);
        for(auto &x : queries) {
            pref[x[0]]++;
            pref[x[1]+1]--;
        }
        for(int i = 0 ; i < n ; i++) {
            if(i) {
                pref[i] += pref[i-1];
            }
        }
        for(int i = 0 ; i < n ; i++) {
            if(a[i] - pref[i] > 0) {
                return 0;
            }
        }
        return 1;
    }
};",1454822577
Soutik Dey,braindroid,666,3643,cpp,"class Solution {
public:
    bool ok(int x, vector<int>&a , vector<vector<int>> &queries) {
        int n = (int)a.size();
        vector<long long>pref(n+2,0LL);
        for(auto &x : queries) {
            pref[x[0]] += x[2];
            pref[x[1]+1] -= x[2];
        }
        for(int i = 0 ; i < n ; i++) {
            if(i) {
                pref[i] += pref[i-1];
            }
        }
        for(int i = 0 ; i < n ; i++) {
            if(a[i] - pref[i] > 0) {
                return 0;
            }
        }
        return 1;
    }
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = (int)nums.size();
        int l = -1;
        int r = (int)queries.size()+1;
        while(r > l + 1) {
            int m = (l+r) >> 1;
            vector<vector<int>>q;
            for(int j = 0 ; j < m ; j++) {
                q.push_back({queries[j][0],queries[j][1],queries[j][2]});
            }
            if(ok(m,nums,q)) {
                r = m;
            } else {
                l = m;
            }
        }
        if(r > (int)queries.size()) {
            return -1;
        }
        return r;
    }
};",1454838500
notnotharsh,notnotharsh,667,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int n = nums.size();
        vector<int> pre(n, 0);
        vector<int> post(n, 0);

        int presum = 0;
        for (int i = 0; i < n; i++) {
            presum += nums[i];
            pre[i] = presum;
        }

        int postsum = 0;
        for (int i = n - 1; i >= 0; i--) {
            postsum += nums[i];
            post[i] = postsum;
        }

        int ans = 0;
        for (int i = 0; i < n; i++) {
            if (nums[i]) continue;
            int diff = abs(pre[i] - post[i]);
            if (diff == 1) ans += 1;
            else if (diff == 0) ans += 2;
        }

        return ans;
    }
};",1454811117
notnotharsh,notnotharsh,667,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int q = queries.size();
        int n = nums.size();

        vector<int> diffs(n, 0);
        for (auto& p : queries) {
            diffs[p[0]]++;
            if (p[1] < n - 1) diffs[p[1] + 1]--;
        }

        vector<int> times(n, 0); int time = 0;
        for (int i = 0; i < n; i++) {
            time += diffs[i];
            times[i] = time;
            if (time < nums[i]) return false;
        }
        return true;
    }
};",1454822375
notnotharsh,notnotharsh,667,3643,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries, int k) {
        int n = nums.size();

        vector<int> diffs(n, 0);
        for (int i = 0; i < k; i++) {
            auto p = queries[i];
            diffs[p[0]] += p[2];
            if (p[1] < n - 1) diffs[p[1] + 1] -= p[2];
        }

        vector<int> times(n, 0); int time = 0;
        for (int i = 0; i < n; i++) {
            time += diffs[i];
            times[i] = time;
            if (time < nums[i]) return false;
        }
        return true;
    }

    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int q = queries.size();

        int lo = 0;
        int hi = q;

        int best = -1;

        while (lo <= hi) {
            int mid = (lo + hi) / 2;
            if (isZeroArray(nums, queries, mid)) {
                best = mid;
                hi = mid - 1;
            } else lo = mid + 1;
        }

        return best;
    }
};",1454838507
mark93192,mark93192,669,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int ans=0;
        for(int i=0;i<nums.size();i++){
            if(nums[i]==0){
                vector<int> temp=nums;            
                int now=i;
                int direction_now=1;
                while(1){
                    if(now==-1||now==nums.size()){
                        int check=1;
                        for(int j=0;j<nums.size();j++){
                            if(temp[j]!=0){
                                check=0;
                                break;
                            }
                        }
                        ans+=check;
                        break;
                    }
                    else if(temp[now]==0){
                        now+=direction_now;
                    }
                    else{
                        temp[now]--;
                        direction_now*=-1;
                        now+=direction_now;
                    }
                }
            }
        }
        for(int i=0;i<nums.size();i++){
            if(nums[i]==0){
                vector<int> temp=nums;
                int now=i;
                int direction_now=-1;
                while(1){
                    if(now==-1||now==nums.size()){
                        int check=1;
                        for(int j=0;j<nums.size();j++){
                            if(temp[j]!=0){
                                check=0;
                                break;
                            }
                        }
                        ans+=check;
                        break;
                    }
                    else if(temp[now]==0){
                        now+=direction_now;
                    }
                    else{
                        temp[now]--;
                        direction_now*=-1;
                        now=now+direction_now;
                    }
                }
            }
        }
        return ans;
    }
};",1454816267
mark93192,mark93192,669,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        vector<int> to_add(nums.size()+1,0);
        for(int i=0;i<queries.size();i++){
            to_add[queries[i][0]]-=1;
            to_add[queries[i][1]+1]+=1;
        }
        int to_add_now=0;
        bool ans=1;
        for(int i=0;i<nums.size();i++){
            to_add_now+=to_add[i];
            if(nums[i]+to_add_now>0){
                ans=0;
            }
        }
        return ans;
    }
};",1454820486
mark93192,mark93192,669,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int left=0,right=queries.size()-1;
        int ans=1e9;
        while(1){
            if(right<left){
                break;
            }
            else{
                int med=left+(right-left)/2;
                vector<int> to_add(nums.size()+1,0);
                for(int i=0;i<=med;i++){
                    to_add[queries[i][0]]-=queries[i][2];
                    to_add[queries[i][1]+1]+=queries[i][2];
                }
                int check=1;
                int to_add_now=0;
                for(int i=0;i<nums.size();i++){
                    to_add_now+=to_add[i];
                    if(nums[i]+to_add_now>0){
                        check=0;
                        break;
                    }
                }
                if(check==0){
                    left=med+1;
                }
                else{
                    if(med<ans){
                        ans=med;
                    }
                    right=med-1;
                }
            }
        }
        if(ans==1e9){
            ans=-1;
        }
        else{
            ans=ans+1;
        }
        int check2=1;
        for(int i=0;i<nums.size();i++){
            if(nums[i]!=0){
                check2=0;
            }
        }
        if(check2==1){
            ans=0;
        }
        return ans;
    }
};",1454838586
win2,win2002,670,3616,java,"class Solution {
    public int countValidSelections(int[] nums) {
        int[] pre = new int[nums.length];
        
        for(int i=0 ; i<nums.length ; i++){
            pre[i]= nums[i];
            if(i>0){
                pre[i]+=pre[i-1];
            }
        }
        
        int[] post = new int[nums.length];
        for(int i=nums.length-1 ; i>=0 ;i--){
            post[i] = nums[i];
            if(i<nums.length-1){
                post[i]+=post[i+1];
            }
        }
        
        
        int ans =0;
        for(int i=0 ; i<nums.length ; i++){
            if(nums[i]==0){
                if(pre[i]==post[i]){
                    ans+=2;
                }
                else if(pre[i]==post[i]+1 || pre[i]==post[i]-1){
                    ans++;
                } 
                
            }
        }
        
        return ans;
    }
}",1454808253
win2,win2002,670,3639,java,"class Solution {
    public boolean isZeroArray(int[] nums, int[][] q) {
        int[] aux = new int[nums.length+1];
        
        for(int i=0 ; i<q.length ; i++){
            int l = q[i][0];
            int r = q[i][1];
            aux[l] ++;
            aux[r+1]--;
        }
        
        for(int i=1 ; i<aux.length ; i++){
            aux[i]+=aux[i-1];
        }
        
        for(int i=0 ; i<nums.length ; i++){
            if(nums[i]>aux[i]){
                return false;
            }
        }
        
        return true;
    }
}",1454811781
win2,win2002,670,3643,java,"class Solution {
    public int minZeroArray(int[] arr, int[][] q) {

        boolean c = true;
        for(int i=0 ; i<arr.length ; i++){
            if(arr[i]!=0){
                c = false;
                break;
            }
        }
        
        if(c){
            return 0;
        }

        int st=0;
        int j = q.length-1;

        int ans = -2;
        while(st<=j){
            int mid = st+(j-st)/2;

            int[] aux = new int[arr.length+1];
        
            for(int i=0 ; i<=mid ; i++){
                int l = q[i][0];
                int r = q[i][1];
                aux[l] +=q[i][2];
                aux[r+1]-=q[i][2];
            }
            boolean check = true;
            for(int i=1 ; i<aux.length ; i++){
                aux[i]+=aux[i-1];
            }
            
            for(int i=0 ; i<arr.length ; i++){
                if(arr[i]>aux[i]){
                    check = false;
                    break;
                }
            }

            if(check){
                ans = mid;
                j=mid-1;
            }
            else{
                st=mid+1;
            }
        }
        
        
        return ans+1;
        
    }
}",1454831156
Dan Xin,DaVinci42,672,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        initialPos = [i for i in range(len(nums)) if nums[i] == 0]

        def f(i: int, isLeft: bool) -> bool:
            cur = nums[::]
            while 0 <= i < len(cur):
                if cur[i] == 0:
                    if isLeft:
                        i -= 1
                    else:
                        i += 1
                else:
                    cur[i] -= 1
                    if isLeft:
                        i += 1
                    else:
                        i -= 1
                    isLeft = not isLeft
            return all(n == 0 for n in cur)

        return sum(f(i, True) + f(i, False) for i in initialPos)",1454810031
Dan Xin,DaVinci42,672,3639,python3,"
class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        startCounter, endCounter = Counter(), Counter()
        for s, e in queries:
            startCounter[s] += 1
            endCounter[e] += 1

        counter, cur = [], 0
        for i in range(len(nums)):
            cur += startCounter[i]
            counter += [cur]
            cur -= endCounter[i]
        return all(counter[i] >= nums[i] for i in range(len(nums)))",1454821016
Dan Xin,DaVinci42,672,3643,python3,"class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        def f(k: int) -> bool:
            startCount, endCounter = Counter(), Counter()
            for s, e, v in queries[:k]:
                startCount[s] += v
                endCounter[e] += v
            counter, cur = [0 for _ in nums], 0
            for i in range(len(nums)):
                cur += startCount[i]
                counter[i] += cur
                cur -= endCounter[i]
                if counter[i] < nums[i]:
                    return False
            return True

        if all(n == 0 for n in nums):
            return 0
        if not f(len(queries)):
            return -1
        left, right = -1, len(queries)
        while left + 1 < right:
            mid = (left + right) // 2
            if not f(mid):
                left = mid
            else:
                right = mid
        return right",1454838709
Aaditya Rajendra Patil,daemon_exe_2,674,3616,cpp,"#include <iostream>
#include <bits/stdc++.h>
using namespace std;
class Solution
{
public:
    int countValidSelections(vector<int> &nums)
    {
        int n = nums.size();
        vector<int> preSum(n, 0);
        vector<int> suffSum(n, 0);
        int cnt = 0;
        for (int i = 1; i < n; i++)
        {
            preSum[i] += preSum[i - 1] + nums[i - 1];
        }
        for (int i = n - 2; i >= 0; i--)
        {
            suffSum[i] += suffSum[i + 1] + nums[i + 1];
        }
        for (int i = 0; i < n; i++)
        {
            if (nums[i] == 0)
            {
                if (preSum[i] == suffSum[i])
                    cnt += 2;
                else if((preSum[i]==suffSum[i]+1)||(preSum[i]+1==suffSum[i]))
                    cnt++;
            }
        }
        return cnt;
    }
};",1454810695
Aaditya Rajendra Patil,daemon_exe_2,674,3639,cpp,"#include <vector>
using namespace std;

class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        vector<long long> arr(n + 1, 0);
        
        
        for(auto &query : queries){
            int li = query[0];
            int ri = query[1];
            arr[li] += 1;
            if(ri + 1 < n){
                arr[ri + 1] -=1;
            }
        }
        
        
        vector<long long> arr2(n, 0);
        long long current = 0;
        for(int i=0;i<n;i++){
            current += arr[i];
            arr2[i] = current;
        }
        
       
        for(int i=0;i<n;i++){
            if(arr2[i] < (long long)nums[i]){
                return false;
            }
        }
        
        return true;
    }
};
",1454821983
Aaditya Rajendra Patil,daemon_exe_2,674,3643,cpp,"#include <iostream>
#include <bits/stdc++.h>
using namespace std;
class Solution
{
public:
    bool checkIfPossible(vector<int> &nums, vector<vector<int>> &queries, int mid)
    {
        int n = nums.size();
        vector<long long> preSum(n + 1, 0);
        for (int i = 0; i < mid; i++)
        {
            int val = queries[i][2];
            preSum[queries[i][0]] += val;
            preSum[queries[i][1] + 1] -= val;
        }
        for (int i = 1; i < n; i++)
        {
            preSum[i] += preSum[i - 1];
        }
        for (int i = 0; i < nums.size(); i++)
        {
            if (preSum[i] < nums[i])
                return false;
        }
        return true;
    }
    int minZeroArray(vector<int> &nums, vector<vector<int>> &queries)
    {
        int low = 0, high = queries.size();
        int ans =INT_MAX;
        while (low <= high)
        {
            int mid = (low + high) / 2;
            if (checkIfPossible(nums, queries, mid))
            {
                ans = mid;
                high = mid - 1;
            }
            else
            {
                low = mid + 1;
            }
        }
        if(ans==INT_MAX)
            return -1;
        return ans;
    }
};",1454838727
TryingToBePerfect,RKS_755,675,3616,java,"class Solution {
    public int countValidSelections(int[] nums) {
        int prefix[]=new int[nums.length];
        int res=0;
        for(int i=0;i<nums.length;i++)
            {
                if(i==0)
                {
                    prefix[0]=nums[0];
                    continue;
                }
                prefix[i]=prefix[i-1]+nums[i];
            }

           for(int i=0;i<nums.length;i++)
            {
                if(nums[i]==0)
                {
                    if(i==0)
                    {
                        if(prefix[nums.length-1]==1)
                        {
                            res++;
                        }else if(prefix[nums.length-1]==0)res+=2;
                    }
                    else if((prefix[i-1]==(prefix[nums.length-1]-prefix[i])))
                    {
                        res+=2;
                    }else if((Math.abs(prefix[i-1]-(prefix[nums.length-1]-prefix[i])))==1)
                    {
                        res++;
                    }
                }
            }
            if(nums.length==1)return nums[0]==0?2:0;
        return res;
    }
}",1454846103
TryingToBePerfect,RKS_755,675,3639,java,"class Solution {
    public boolean isZeroArray(int[] nums, int[][] queries) {

        int p[]=new int[nums.length+1];

        for(int []q:queries)
            {
                p[q[0]]++;
                p[q[1]+1]--;
            }
        for(int i=1;i<=nums.length;i++)
            {
                p[i]+=p[i-1];
            }
        for(int i=0;i<nums.length;i++)
            {
                if((nums[i]-p[i])>0)return false;
            }
        return true;
    }
}",1454839813
TryingToBePerfect,RKS_755,675,3643,java,"class Solution {
    public int minZeroArray(int[] nums, int[][] queries) {
        int ans=-1;
        int low=0,high=queries.length;
        int n=nums.length;
        while(low<=high)
            {
                int mid=low+(high-low)/2;
                boolean flag=true;
        int pre[]=new int[n+1];
        for(int i=0;i<mid;i++)
            {
                int q[]=queries[i];
                int l=q[0];
                int r=q[1];
                pre[l]+=q[2];
                pre[r+1]-=q[2];
            }
        for(int i=1;i<=n;i++)
            {
                pre[i]+=pre[i-1];
            }
        for(int i=0;i<n;i++)
            {
                if((nums[i]-pre[i])>0)
                {
                    flag=false;
                    break;
                }
            }
        // return true;

                if(flag==true){
                    ans=mid;
                    high=mid-1;
                }else
                {
                    low=mid+1;
                }
            }
        return ans;
    }
}",1454837375
welcome_back,ReturnBack7778,677,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int n = nums.size();
        int validCount = 0;

        
        auto simulate = [&](int start, int direction) {
            vector<int> numsCopy = nums;
            int curr = start;

            while (curr >= 0 && curr < n) {
                if (numsCopy[curr] == 0) {
                    curr += direction; 
                } else {
                    numsCopy[curr] -= 1;
                    direction *= -1;    
                    curr += direction;  
                }
            }

            return all_of(numsCopy.begin(), numsCopy.end(), [](int x) { return x == 0; });
        };

        
        for (int i = 0; i < n; ++i) {
            if (nums[i] == 0) {
                if (simulate(i, 1)) { 
                    validCount++;
                }
                if (simulate(i, -1)) {
                    validCount++;
                }
            }
        }

        return validCount;
    }
};",1454838767
welcome_back,ReturnBack7778,677,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& q) {
        int n=nums.size();
        vector<int>prefix(nums.size()+1,0);
        for(int i=0;i<q.size();i++){
            prefix[q[i][0]]+=1;
            prefix[q[i][1]+1]-=1;
        }
        for(int i=1;i<n;i++){
            prefix[i]=prefix[i-1]+prefix[i];
        }

        for(int i=0;i<nums.size();i++){
            nums[i]=nums[i]-prefix[i];
            if(nums[i]>0)
                return false;
        }
        return true;
        
    }
};",1454814935
welcome_back,ReturnBack7778,677,3643,cpp,"class Solution {
public:
     bool isZeroArray(vector<int> nums, vector<vector<int>>& q, int k) {
         
        int n=nums.size();
        vector<int>prefix(nums.size()+5,0);
        for(int i=0;i<k;i++){
            //cout<<q[i][0]<<"" "";
            prefix[q[i][0]]+=q[i][2];
            prefix[q[i][1]+1]-=q[i][2];
        }
        for(int i=1;i<n;i++){
            prefix[i]=prefix[i-1]+prefix[i];
        }
         //cout<<""\n"";

        for(int i=0;i<nums.size();i++){
            nums[i]=nums[i]-prefix[i];
            if(nums[i]>0)
                return false;
        }
        return true;
        
    }
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int flag=0;
        for(int i=0;i<nums.size();i++){
            if(nums[i]>0)
                flag=1;
        }
        if(!flag)
            return 0; 
        int low=1;
        int high=queries.size();
        
        int ans=-1;
        while(low<=high){
            int mid=(low+high)/2;
            //cout<<low<<"" ""<<high<<"" ""<<mid<<""\n"";
            if(isZeroArray(nums,queries,mid)){
                ans=mid;
                high=mid-1;
            }else{
                low=mid+1;
            }
        }
        return ans;
    }
};",1454834147
Anshuman,Azazel_21,678,3616,cpp,"class Solution {
public:
    bool check(vector<int>copy, bool moveLeft, int curr){
        int n = copy.size();
        while(curr>=0 and curr<n){
            if(copy[curr] == 0){
                if(moveLeft)curr-=1;
                else curr+=1;
            }
            else{
                copy[curr]-=1;
                moveLeft = !moveLeft;
                if(moveLeft)curr-=1;
                else curr+=1;
            }
        }
        bool flag=1;
        for(auto i:copy){
            if(i != 0){
                flag=0;
                break;
            }
        }
        return flag;
    }
    int countValidSelections(vector<int>& nums) {
        int n = nums.size();
        int ans=0;
        for(int i=0;i<n;i++){
            if(nums[i] == 0){
                int curr=i;
                //checking left;
                bool left = check(nums, 1, i);
                bool right = check(nums, 0, i);

                if(left)ans+=1;
                if(right)ans+=1;
                
            }
        }
        return ans;
    }
};",1454821652
Anshuman,Azazel_21,678,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        vector<int>diff(n+1,0);
        for(auto q:queries){
            int l = q[0];
            int r = q[1];
            diff[l]+=1;
            diff[r+1]-=1;
        }

        for(int i=1;i<diff.size();i++){
            diff[i]+=diff[i-1];
        }
        bool flag=1;
        for(int i=0;i<n;i++){
            if(diff[i] < nums[i]){
                flag=0;
                break;
            }
        }
        // for(auto i:diff)cout<<i<<"" "";cout<<endl;
        return flag;
        
    }
};",1454833040
Anshuman,Azazel_21,678,3643,cpp,"class Solution {
public:

    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries, int mid) {
        int n = nums.size();
        vector<int>diff(n+1,0);
        for(int i=0;i<mid;i++){
            int l = queries[i][0];
            int r = queries[i][1];
            int val = queries[i][2];
            diff[l]+=val;
            diff[r+1]-=val;
        }

        for(int i=1;i<diff.size();i++){
            diff[i]+=diff[i-1];
        }
        bool flag=1;
        for(int i=0;i<n;i++){
            if(diff[i] < nums[i]){
                flag=0;
                break;
            }
        }
        // for(auto i:diff)cout<<i<<"" "";cout<<endl;
        return flag;
        
    }
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int Q = queries.size();
        int n = nums.size();
        int low = 0, high = Q;
        int ans = -1;
        while(low<=high){
            int mid = (low + high)/2;

            if(isZeroArray(nums, queries, mid)){
                ans = mid;
                high = mid-1;
            }
            else{
                low = mid+1;
            }
        }
        return ans;
    }
};",1454846159
Intellegent,Intellegent,679,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& a) {
        int n = a.size();
        int ans = 0;
        for (int i = 0; i < n; i++){
            int sum = 0;
            if (a[i] != 0) continue;
            for (int j = 0; j < n; j++){
                if (j < i) sum += a[j];
                else sum -= a[j];
            }

            if (sum == 1) ans++;
            if (sum == -1) ans++;
            if (sum == 0) ans += 2;
        }

        return ans;
    }
};",1454810406
Intellegent,Intellegent,679,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& a, vector<vector<int>>& b) {
        int n = a.size();
        vector<int> dif(n + 1);
        
        for (int i = 0; i < b.size(); i++){
            dif[b[i][0]]++;
            dif[b[i][1] + 1]--;
        }

        for (int i = 0; i < n; i++){
            if (i >= 1) dif[i] += dif[i - 1];
            if (dif[i] < a[i]) return false;
        }

        return true;
    }
};",1454816500
Intellegent,Intellegent,679,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& a, vector<vector<int>>& b) {
        int n = a.size();
        int q = b.size();

        bool done = true;
        for (int i = 0; i < n; i++){
            if (a[i] != 0) done = false;
        }

        if (done) return 0;
        
        int l = 0, r = q;
        while (l < r){
            int mid = (l + r) / 2;
            
            vector<int> dif(n + 1);
        
            for (int i = 0; i <= mid; i++){
                dif[b[i][0]] += b[i][2];
                dif[b[i][1] + 1] -= b[i][2];
            }

    
            bool ok = true;        
            for (int i = 0; i < n; i++){
                if (i >= 1) dif[i] += dif[i - 1];
                if (dif[i] < a[i]) ok = false;
            }

            if (ok) r = mid;
            else l = mid + 1;
        }

        if (r == q) return -1;
        return l + 1;
    }
};",1454824197
bellmanford,bellmanford,680,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& v) {
        int  n = v.size();
        vector<int> pref(n, 0);
        for(int i=0; i<n; ++i){
            pref[i] = v[i];
            if(i)pref[i] += pref[i-1];
        }
        int cnt = 0;
        auto get = [&](int l, int r){
            if(r<l)return 0;
            int val = pref[r];
            l -= 1;
            if(l>=0)val -= pref[l];
            return val;
        };
        for(int i=0; i<n; ++i){
            if(v[i] == 0){
                int lval = get(0,i-1);
                int rval = get(i+1,n-1);
                if(lval == rval)cnt += 2;
                else if(abs(lval-rval) <= 1)++cnt;
            }
        }
        return cnt;
    }
};",1454824218
bellmanford,bellmanford,680,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& v, vector<vector<int>>& q) {
        int n = v.size();
        int len = q.size();
        vector<int>pref(n, 0);
        for(auto &x : q){
            int l =x[0], r = x[1]+1;
            pref[l] += 1;
            if(r<n)pref[r] -= 1;
        }
        for(int i=1; i<n; ++i)pref[i] += pref[i-1];
        for(int i=0; i<n; ++i){
            if(pref[i] < v[i])return false;
        }
        return true;
    }
};",1454817300
bellmanford,bellmanford,680,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& v, vector<vector<int>>& q) {
        int n = v.size();
        int len = q.size();
        int lo = 0, hi = len, res = -1;

        auto ok = [&](int mid){
            vector<int>pref(n, 0);
            for(int i=0; i<=mid; ++i){
                auto x=  q[i];
                int l = x[0], r= x[1], val = x[2];
                pref[l]+=val;
                r++;
                if(r<n)pref[r] -= val;
            }
            for(int i=1; i<n; ++i){
                pref[i] += pref[i-1];
            }
            for(int i=0; i<n; ++i){
                if(pref[i] < v[i])return false;
            }
            return true;
        };
        bool f = false;
        for(auto &x : v){
            if(x != 0){
                f = true;
            }
        }
        cout<<f<<"" f\n"";
        if(f == false){
            return 0;
        }
        while(lo < hi){
            int mid = lo + (hi - lo)/2;
            if(ok(mid)){
                res = mid+1;
                hi = mid;
            }
            else lo= mid+1;
        }
        return res;
    }
};",1454814748
SJC,chen_111,681,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int n = nums.size();
        int validCount = 0;

        auto simulate = [&](int start, int direction) -> bool {
            vector<int> temp = nums; 
            int curr = start;
            
            while (curr >= 0 && curr < n) {
                if (temp[curr] == 0) {
                    curr += direction; 
                } else {
                    temp[curr]--;
                    direction = -direction; 
                    curr += direction;
                }
            }
            
           
            for (int x : temp) {
                if (x != 0) return false;
            }
            return true;
        };

        
        for (int i = 0; i < n; i++) {
            if (nums[i] == 0) {
               
                if (simulate(i, 1)) validCount++;  
                if (simulate(i, -1)) validCount++; 
            }
        }

        return validCount;
    }
};",1454846228
SJC,chen_111,681,3639,cpp,"class Solution {
    using LL = long long;
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        int m = queries.size();
        vector<LL> diff(n + 1, 0);
        for (int i = 0; i < m; i++) {
            int l = queries[i][0], r = queries[i][1];
            diff[l] -= 1;
            if (r + 1 < n) diff[r + 1] += 1;
        }

        LL sum = 0;
        vector<LL> temp(nums.begin(), nums.end());

        for (int i = 0; i < n; i++) {
            sum += diff[i];
            temp[i] += sum;
        }

        for (int i = 0; i < n; i++) {
            if (temp[i] > 0) return false;
        }

        return true;
    }
};",1454843926
SJC,chen_111,681,3643,cpp,"class Solution {
    using LL = long long;
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        int m = queries.size();

        auto check = [&](int mid) {
            vector<LL> diff(n + 1, 0);
            
            for (int i = 0; i < mid; i++) {
                int l = queries[i][0], r = queries[i][1], val = queries[i][2];
                diff[l] -= val;
                if (r + 1 < n) diff[r + 1] += val;
            }

            LL sum = 0;
            vector<LL> temp(nums.begin(), nums.end());
            
            for (int i = 0; i < n; i++) {
                sum += diff[i];
                temp[i] += sum;
            }

            for (int i = 0; i < n; i++) {
                if (temp[i] > 0) return false;
            }
            
            return true;
        };

        int left = 0, right = m;
        while (left < right) {
            int mid = left + (right - left) / 2;
            if (check(mid)) {
                right = mid;
            } else {
                left = mid + 1;
            }
        }

        if (check(left)) return left;
        return -1;
    }
};


/*
 [2,0,2], queries = [[0,2,1],[0,2,1],[1,1,3]]
 -1 0 0 1
 -2 0 0 2
 -2 -3 3

*/",1454844041
Subhash Sheoran,isheoran,682,3616,golang,"func countValidSelections(nums []int) int {
    sum := 0

    for _, val := range nums {
        sum += val
    }

    ans := 0
    cur := 0

    for _, val := range nums {
        if val == 0 {
            if sum%2==0 {
                if cur == sum/2 {
                    ans += 2
                }
            } else {
                if cur == sum/2 || cur == sum/2+1 {
                    ans++
                }
            }
        }

        cur += val
    }

    return ans
}",1454813555
Subhash Sheoran,isheoran,682,3639,golang,"func isZeroArray(nums []int, queries [][]int) bool {
    n := len(nums)

    inc := make([]int, n)

    for _, q := range queries {
        inc[q[0]]++

        if q[1]+1 < n {
            inc[q[1]+1]--
        }
    }

    for i := 1; i<n;i++ {
        inc[i] += inc[i-1]
    }

    for i :=0;i<n;i++ {
        if inc[i] < nums[i] {
            return false
        }
    }

    return true
}",1454820790
Subhash Sheoran,isheoran,682,3643,golang,"func minZeroArray(nums []int, queries [][]int) int {
	n := len(nums)

	check := func(k int) bool {
		inc := make([]int, n)

		for idx, q := range queries {
            if idx > k {
                break
            }
            
			inc[q[0]] += q[2]

			if q[1]+1 < n {
				inc[q[1]+1] -= q[2]
			}
		}

		for i := 1; i < n; i++ {
			inc[i] += inc[i-1]
		}

		for i := 0; i < n; i++ {
			if inc[i] < nums[i] {
				return false
			}
		}

		return true
	}

    l, r := -1, len(queries)-1

    for l+1 < r {
        mid := (l+r)/2

        if check(mid) {
            r = mid
        } else {
            l = mid
        }
    }

    if check(-1) {
        return 0
    } else if check(r) {
        return r+1
    } else {
        return -1
    }
}",1454838980
Abhinash Behera,dante0,683,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
          int n = nums.size();
        int validSelections = 0;

       
        auto simulate = [&](int curr, int direction) -> bool {
            vector<int> temp = nums; 
            
            while (curr >= 0 && curr < n) {
                if (temp[curr] == 0) {
                    
                    curr += direction;
                } else {
                   
                    temp[curr] -= 1;
                    
                    direction = -direction;
                    
                    curr += direction;
                }
            }

           
            for (int x : temp) {
                if (x != 0) return false;
            }
            return true;
        };

        
        for (int i = 0; i < n; ++i) {
            if (nums[i] == 0) {
                if (simulate(i, 1)) ++validSelections; 
                if (simulate(i, -1)) ++validSelections; 
            }
        }

        return validSelections;
    }
};",1454839006
Abhinash Behera,dante0,683,3639,cpp,"class Solution {
public:
    bool f(vector<int>nums, vector<vector<int>>&q, int k){
        int n=nums.size();
        vector<int>v(n+1,0);
        for(int i=0; i<k; i++){
            auto el=q[i];
            v[el[0]]+=1;
            v[el[1]+1]-=1;
        }
        for(int i=1; i<n; i++)v[i]+=v[i-1];
        for(int i=0; i<n; i++){
            if(nums[i]-v[i]>0)return false;
        }
        return true;
    }
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& q) {
        int n=nums.size();
        // int i=0,j=q.size();
        int a=1e9;
       return f(nums,q,q.size());
    }
};",1454821126
Abhinash Behera,dante0,683,3643,cpp,"class Solution {
public:
    bool f(vector<int>nums, vector<vector<int>>&q, int k){
        int n=nums.size();
        vector<int>v(n+1,0);
        for(int i=0; i<k; i++){
            auto el=q[i];
            v[el[0]]+=el[2];
            v[el[1]+1]-=el[2];
        }
        for(int i=1; i<n; i++)v[i]+=v[i-1];
        for(int i=0; i<n; i++){
            if(nums[i]-v[i]>0)return false;
        }
        return true;
    }
    int minZeroArray(vector<int>& nums, vector<vector<int>>& q) {
        int n=nums.size();
        int i=0,j=q.size();
        int a=1e9;
        while(i<=j){
            int k=(i+j)/2;
            if(f(nums,q,k)){
                a=k;
                j=k-1;
            }
            else i=k+1;
        }
        if(a==1e9)return -1;
        return a;
    }
};",1454817902
Shubh Gupta,guptashubh6386,686,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int ans = 0;
        int n = nums.size();
        int sum = accumulate(nums.begin(), nums.end(), 0ll);
        int prefix = 0;
        for(int i=0;i<n;i++){
            if(nums[i] == 0){
                if(sum - prefix == prefix){
                    ans +=2;
                }
                else if(abs(sum - prefix * 2)==1){
                    ans ++;
                }
            }
            else prefix += nums[i];
        }
        return ans;
    }
};",1454809698
Shubh Gupta,guptashubh6386,686,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        vector<int> diff(n + 1, 0);
        for(auto x : queries){
            int a = x[0], b = x[1];
            diff[a] ++;
            diff[b+1] --;
        }
        
        for(int i=1;i<n;i++){
            diff[i] += diff[i-1];
        }
        for(int i=0;i<n;i++){
            if(nums[i] - diff[i] > 0){
                return 0;
            }
        }
        return 1;
    }
};",1454818170
Shubh Gupta,guptashubh6386,686,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        
        int ans = -1;
        
        int que_N = queries.size();
        
        auto check = [&](int mid){
            vector<int> diff(n + 1, 0);
            for(int i=0;i<=mid;i++){
                diff[queries[i][0]] += queries[i][2];
                diff[queries[i][1]+1] -= queries[i][2];
            }
            for(int i=1;i<n;i++){
                diff[i] += diff[i-1];
            }
            for(int i=0;i<n;i++){
                if(nums[i] - diff[i] > 0){
                    return 0;
                }
            }
            return 1;
        };
        
        if(*max_element(nums.begin(), nums.end()) == 0){
            return 0;
        }
        
        
        int lo = 0, hi = que_N - 1;
        while(lo <= hi){
            int mid = (lo + hi) / 2;
            
            if(check(mid)){
                ans = mid + 1;
                hi = mid - 1;
            }
            else {
                lo = mid + 1;
            }
        }
        
        return ans;
    }
};",1454831631
Quoc Hung,quochungbuile,687,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        total = sum(nums)
        cur = 0
        res = 0
        for i in range(len(nums)):
            cur += nums[i]

            if nums[i] != 0:
                continue

            if cur * 2 == total:
                res += 2
            elif cur * 2 + 1 == total:
                res += 1
            elif  cur * 2 - 1 == total:
                res += 1


        return res",1454808564
Quoc Hung,quochungbuile,687,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        n = len(nums)

        dec = [0]*n
        inc = [0]*n

        for l, r in queries:
            dec[l] += 1
            inc[r] += 1

        temp = 0
        for i in range(n):
            temp += dec[i]
            if nums[i] > temp:
                return False
            temp -= inc[i]

        return True",1454814420
Quoc Hung,quochungbuile,687,3643,python3,"class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        n = len(nums)

        

        def check(k):
            dec = [0]*n
            inc = [0]*n
    
            for l, r, val in queries[:k]:
                dec[l] += val
                inc[r] += val
                
            temp = 0
            for i in range(n):
                temp += dec[i]
                if nums[i] > temp:
                    return False
                temp -= inc[i]

            return True

        l = 0
        r = len(queries)

        while l < r:
            m = (l+r) // 2

            if check(m):
                r = m
            else:
                l = m + 1

        if check(l):
            return l
        return -1
                

        ",1454831661
Ayush Vardhan,Ayush-Vardhan-03,688,3616,java,"class Solution {
    public int countValidSelections(int[] nums) {
        int n = nums.length;

        int[] sumR = new int[n];
        sumR[n-1] = nums[n-1];

        for (int i=n-2; i>=0; i--) {
            sumR[i] = sumR[i+1] + nums[i];
        }

        int sumL = 0;
        int ans = 0;
        
        for (int i=0; i<n; i++) {
            sumL += nums[i];
            if (nums[i] != 0) continue;

            if (sumL == sumR[i]) ans += 2;
            else if (Math.abs(sumL-sumR[i]) == 1) ans++;
        }

        return ans;
    }
}",1454809408
Ayush Vardhan,Ayush-Vardhan-03,688,3639,java,"class Solution {
    public boolean isZeroArray(int[] nums, int[][] queries) {
        int n = nums.length;

        int[] dec = new int[n+1];
        for (int[] q : queries) {
            dec[q[0]]++;
            dec[q[1]+1]--;
        }

        if (nums[0] > dec[0]) return false;

        for (int i=1; i<n; i++) {
            dec[i] += dec[i-1];

            if (nums[i] > dec[i]) return false;
        }

        return true;
    }
}",1454812993
Ayush Vardhan,Ayush-Vardhan-03,688,3643,java,"class Solution {
    public int minZeroArray(int[] nums, int[][] queries) {
        if (zeroArr(nums, queries, -1)) return 0;
        int n = nums.length;
        
        int low = 0;
        int high = queries.length -1;

        while (low <= high) {
            int mid = (low + high) >> 1;

            if (zeroArr(nums, queries, mid)) high = mid-1;
            else low = mid+1;
        }

        return (low == queries.length) ? -1 : low+1;
    }

    boolean zeroArr(int[] nums, int[][] quer, int q) {
        int n = nums.length;

        int[] dec = new int[n+1];
        for (int i=0; i<=q; i++) {
            dec[quer[i][0]] += quer[i][2];
            dec[quer[i][1]+1] -= quer[i][2];
        }

        if (nums[0] > dec[0]) return false;

        for (int i=1; i<n; i++) {
            dec[i] += dec[i-1];

            if (nums[i] > dec[i]) return false;
        }

        return true;
    }
}",1454831662
Kuo-Yu Huang,ericet1234,690,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int count = 0;
        for(int n: nums){
            count += n;
        }
        int now = 0, ans = 0;
        if(count&1){
            count = count / 2;
            for(int n: nums){
                if(now==count && n==0){
                    ans+=1;
                } else if((now==(count+1)) && n==0){
                    ans+=1;
                }
                now+=n;
            }
        } else {
            count = count / 2;
            for(int n: nums){
                if(now==count && n==0){
                    ans+=2;
                }
                now+=n;
            }
        }
        return ans;
    }
};",1454810869
Kuo-Yu Huang,ericet1234,690,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int data[100002] = {0};
        for(vector<int> &it: queries){
            data[it[0]]++;
            data[it[1]+1]--;
        }
        int now=0;
        for(int i=0, size=nums.size() ; i<size ; i++){
            now += data[i];
            if(now<nums[i]){
                return false;
            }
        }
        return true;
    }
};",1454817317
Kuo-Yu Huang,ericet1234,690,3643,cpp,"class Solution {
private:
    bool check(vector<int>& nums, vector<vector<int>>& queries, int k){
        int data[100002] = {0};
        for(int i=0 ; i<k ; i++){
            data[queries[i][0]] += queries[i][2];
            data[queries[i][1]+1] -= queries[i][2];
        }
        int now=0;
        for(int i=0, size=nums.size() ; i<size ; i++){
            now += data[i];
            //printf(""%d "", now);
            if(now<nums[i]){
                return false;
            }
        }
        return true;
    }
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        queries.push_back({0, (int)(nums.size()-1), 500000});
        //printf(""-%d-"", check(nums, queries, queries.size()-1)?1:0);
        
        int l=0, r=queries.size(), m;
        while(l<r){
            m = (l+r)/2;
            //printf(""%d %d\n"", m, check(nums, queries, m)?1:0);
            if(check(nums, queries, m)){
                r = m;
            } else {
                l = m+1;
            }
        }
        return (r==queries.size())?-1:r;
        
        //return -1;
    }
};",1454839144
ceaxyz002,ceaxyz002,691,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        ans = 0
        n = len(nums)

        for curr in range(n):
            if nums[curr] == 0:
                for direction in [-1, 1]: 
                    nn = nums.copy()
                    curr_pos = curr
                    dir = direction
                    while 0 <= curr_pos < n:
                        if nn[curr_pos] == 0:
                            curr_pos += dir
                        elif nn[curr_pos] > 0:
                            nn[curr_pos] -= 1
                            dir = -dir 
                            curr_pos += dir

                    if all(num == 0 for num in nn):
                        ans += 1
        return ans",1454835484
ceaxyz002,ceaxyz002,691,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        n = len(nums)
        freq = [0] * (n + 1)  

        for l, r in queries:
            freq[l] += 1
            if r + 1 < n:
                freq[r + 1] -= 1

        for i in range(1, n):
            freq[i] += freq[i - 1]
        freq = freq[:n]  

        for i in range(n):
            if nums[i] > freq[i]:
                return False
        return True",1454840966
ceaxyz002,ceaxyz002,691,3643,python3,"class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        n = len(nums)

        def is_possible(k):
            delta = [0] * (n + 1)
            for i in range(k):
                l, r, val = queries[i]
                delta[l] += val
                if r + 1 < n:
                    delta[r + 1] -= val

            d = 0
            for idx in range(n):
                d += delta[idx]
                if d < nums[idx]:
                    return False
            return True

        left = 0
        right = len(queries)
        ans = -1

        while left <= right:
            mid = (left + right) // 2
            if is_possible(mid):
                ans = mid
                right = mid - 1
            else:
                left = mid + 1

        return ans if ans != -1 else -1",1454846566
Tanvir Ahmed Khan,tanvirAhmedKhan,692,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int n = nums.size();
        vector<int> left(n), right(n);
        for(int i = 1; i < n; i++) left[i] = left[i-1]+nums[i-1];
        for(int i = n-2; i >= 0; i--) right[i] = right[i+1]+nums[i+1];
        int ans = 0;
        for(int i = 0; i < n; i++) {
            if(nums[i] == 0) {
                if(left[i] == right[i]) ans += 2;
                else if(abs(left[i]-right[i]) == 1) ans++;
            }
        }
        return ans;
    }
};",1454814929
Tanvir Ahmed Khan,tanvirAhmedKhan,692,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        vector<int> arr(n+1);
        for(auto q: queries) {
            arr[q[0]]++;
            arr[q[1]+1]--;
        }
        if(nums[0] > arr[0]) return false;
        for(int i = 1; i < n; i++) {
            arr[i] += arr[i-1];
            if(nums[i] > arr[i]) return false;
        }
        return true;
    }
};",1454826387
Tanvir Ahmed Khan,tanvirAhmedKhan,692,3643,cpp,"class Solution {
public:
    bool isValid(vector<int>& nums, vector<vector<int>>& queries, int k) {
        int n = nums.size();
        vector<int> arr(n+1);
        for(int i = 0; i < k; i++) {
            int l = queries[i][0], r = queries[i][1], v = queries[i][2];
            arr[l]+=v;
            arr[r+1]-=v;
        }
        if(nums[0] > arr[0]) return false;
        for(int i = 1; i < n; i++) {
            arr[i] += arr[i-1];
            if(nums[i] > arr[i]) return false;
        }
        return true;
    }
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = queries.size();
        int l = 0, r = n, mid, ans = -1;
        while(l <= r) {
            mid = (l+r)/2;
            if(isValid(nums,queries,mid)) {
                ans = mid;
                r = mid-1;
            }
            else {
                l = mid+1;
            }
        }
        return ans;
    }
};",1454839351
Denys Gubar,DenisGubar,693,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int result = 0;
        int const N = nums.size();
        vector<int> A, B;
        for (int i = 0; i < N; ++i)
            if (nums[i] == 0)
                A.push_back(i);
            else
                B.push_back(i);
        for(int dx = -1; dx <= 1; dx += 2)
            for (int x : A)
            {
                int d = dx;
                int pos = x;
                vector<int> X(nums);
                vector<int> Z(B);
                bool flag = true;
                while (!Z.empty())
                {
                    auto it = lower_bound(Z.begin(), Z.end(), pos);
                    if (d < 0 && it == Z.begin() && *it > pos || d > 0 && it == Z.end())
                    {
                        flag = false;
                        break;
                    }
                    if (d < 0 && (it == Z.end() || *it > pos))
                        pos = *prev(it);
                    else
                        pos = *it;
                    if (--X[pos] == 0)
                        Z.erase(lower_bound(Z.begin(), Z.end(), pos));
                    d = -d;
                    pos += d;
                }
                result += Z.empty() && flag;
            }
        return result;
    }
};
",1454827877
Denys Gubar,DenisGubar,693,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int const N = nums.size();
        vector<int> A(N + 1);
        for (vector<int> const& q : queries)
        {
            int const& L = q[0];
            int const& R = q[1];
            --A[L], ++A[R + 1];
        }
        int balance = 0;
        for (int i = 0; i < N; ++i)
        {
            balance += A[i];
            if (nums[i] + balance > 0)
                return false;
        }
        return true;
    }
};
",1454834457
Denys Gubar,DenisGubar,693,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int const N = nums.size(), Q = queries.size();
        auto calc = [&nums, &queries, N](int K)
            {
                vector<int> A(N + 1);
                for (int i = 0; i < K; ++i)
                {
                    int const& L = queries[i][0];
                    int const& R = queries[i][1];
                    int const& VAL = queries[i][2];
                    A[L] -= VAL, A[R + 1] += VAL;
                }
                int balance = 0;
                for (int i = 0; i < N; ++i)
                {
                    balance += A[i];
                    if (nums[i] + balance > 0)
                        return false;
                }
                return true;
            };
        if (calc(0)) return 0;
        if (!calc(Q)) return -1;
        int a = 0, b = Q;
        while (a + 1 < b)
        {
            int m = (a + b) / 2;
            if (calc(m))
                b = m;
            else
                a = m;
        }
        return b;
    }
};
",1454846828
Nifasat,NifasatBeg,694,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int n = nums.size();
        vector<int>pref(n);
        pref[0] = nums[0];
        for(int i = 1;i<n;i++){
            pref[i] = pref[i-1] + nums[i];
        }
        int ans = 0;
        for(int i = 0;i<n;i++){
            if(nums[i]!=0)continue;
            int leftSum = pref[i];
            int rtSum = pref[n-1] - pref[i];
            if(leftSum - rtSum <= 1 && leftSum - rtSum >= 0){
                ans++;
            }
            if(rtSum - leftSum <= 1 && rtSum - leftSum >= 0){
                ans++;
            }
        }
        return ans;
    }
};",1454811931
Nifasat,NifasatBeg,694,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        vector<int>diff(n+1);
        for(int i = 0;i<queries.size();i++){
            int l = queries[i][0];
            int r = queries[i][1];
            diff[l]++;
            diff[r+1]--;
        }
        for(int i = 1;i<=n;i++){
            diff[i] += diff[i-1];
        }
        for(int i = 0;i<n;i++){
            if(diff[i]<nums[i]) return false;
        }
        return true;
    }
};",1454815795
Nifasat,NifasatBeg,694,3643,cpp,"class Solution {
public:
    bool check(vector<int>&nums, vector<vector<int>>& queries, int k){
        int n = nums.size();
        vector<int>diff(n+1);
        for(int i = 0;i<k;i++){
            int l = queries[i][0];
            int r = queries[i][1];
            int val = queries[i][2];
            diff[l] += val;
            diff[r+1] -= val;
        }
        for(int i = 1;i<=n;i++){
            diff[i] += diff[i-1];
        }
        for(int i = 0;i<n;i++){
            if(diff[i]<nums[i]) return false;
        }
        return true;
    }
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int st = 0;
        int ed = queries.size();
        int ans = -1;
        while(st<=ed){
            int mid = (st+ed)/2;
            if(check(nums,queries,mid)){
                ans = mid;
                ed = mid - 1;
            }else{
                st = mid + 1;
            }
        }
        return ans;
    }
};",1454832042
Nagender,Nagender456,696,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int ans = 0;
        for (int z=0; z<nums.size(); z++) {
            if (nums[z] == 0) {
                int left = 0, right = 0;
                for (int i=0; i<z; i++) {
                    left += nums[i];
                }
                for (int i=z+1; i<nums.size(); i++) {
                    right += nums[i];
                }
                if (left == right) ans+=2;
                if (left == right+1 || right == left+1) ans++;
            }
        }
        return ans;
    }
};",1454807283
Nagender,Nagender456,696,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        vector<int> queryArray(n+1, 0);
        for (auto query: queries) {
            queryArray[query[0]]++;
            queryArray[query[1]+1]--;
        }
        int cur = 0;
        for (int i=0; i<n; i++) {
            cur += queryArray[i];
            if (cur < nums[i]) return false;
        }
        return true;
    }
};",1454810463
Nagender,Nagender456,696,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        vector<int> queryArray(n+1, 0);
        long long sum = 0;
        int largest = -1;
        int largestInd = -1;
        int cur;
        for (int i=0; i<n; i++) {
            sum += nums[i];
            if (nums[i] > largest) {
                largest = nums[i];
                largestInd = i;
            }
        }
        if (largest <= 0) return 0;
        vector<int> query;
        for (int q=0; q<queries.size(); q++) {
            // cout << q << endl;
            query = queries[q];
            queryArray[query[0]] += query[2];
            queryArray[query[1]+1] -= query[2];
            if (query[0] <= largestInd && largestInd <= query[1]) {
                largest -= query[2];
                if (largest <= 0) {
                    largest = -1;
                    largestInd = -1;
                    cur = 0;
                    for (int i=0; i<n; i++) {
                        cur += queryArray[i];
                        nums[i] = max(0, nums[i]-cur);
                        queryArray[i] = 0;
                        if (nums[i] > largest) {
                            largest = nums[i];
                            largestInd = i;
                        }
                    }
                    // cout << largest << "" "" << q << ""YO \n"";
                    if (largest <= 0) return (q+1);
                }
            }
        }
        return -1;
    }
};",1454846913
xs_pg,xs_pg,697,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        n = len(nums)
        
        ans = 0
        for i in range(n):
            if nums[i] == 0:
                l = sum(nums[:i])
                r = sum(nums[i:])
                if l == r:
                    ans += 2
                if abs(l - r) == 1:
                    ans += 1
        return ans


",1454814849
xs_pg,xs_pg,697,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        n = len(nums)
        dif = [0] * (n+1)
        for l, r in queries:
            dif[l] -= 1
            dif[r+1] += 1
        c = 0
        for i in range(n):
            c += dif[i]
            if nums[i] + c > 0:
                return False
        return True",1454818594
xs_pg,xs_pg,697,3643,python3,"class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        n = len(nums)
        
        def check(x):
            dif = [0] * (n+1)
            for l, r, v in queries[:x]:
                dif[l] -= v
                dif[r+1] += v
            c = 0
            for i in range(n):
                c += dif[i]
                if nums[i] + c > 0:
                    return False
            return True
        
        if not check(len(queries)):
            return -1
        # print(check(0), check(1))
        
        l, r = 0, len(queries)
        while l < r:
            mi = (l + r) >> 1
            if check(mi):
                r = mi
            else:
                l = mi + 1
        return l
        ",1454824874
Thang Nguyen,nguyenluongthang33,698,3616,cpp,"class Solution {
public:
    int invert(int dir) {
        if (dir == 1) return -1;
        return 1;
    }
    bool check(vector<int> nums, int start, int dir) {
        int index = start;
        
        index += dir;
        while (0 <= index && index < nums.size()) {
            if (nums[index] > 0) {
                nums[index] -= 1;
                dir = invert(dir);
            }
            index += dir;
        }
        
        int isAllZero = 0;
        for (int i : nums) {
            if (i != 0) return false;
        }
        return true;
    }
    int countValidSelections(vector<int>& nums) {
        int count = 0;
        for (int i = 0; i < nums.size() ;++i ) {
            if (nums[i] == 0) {
                if (check(nums, i, 1)) {
                    count += 1;
                } 
                if (check(nums, i, -1)) {
                    count += 1;
                }
            }
        }
        return count;
    }
};",1454812355
Thang Nguyen,nguyenluongthang33,698,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        vector<int> marker(nums.size() + 1, 0);
        for (auto query : queries) {
            marker[query[0]] -= 1;
            marker[query[1] + 1] += 1;
        }
        
        int sub = 0;
        for (int i = 0; i < nums.size(); ++i) {
            // cout << marker[i] << endl;
            sub += marker[i];
            nums[i] += sub;
            if (nums[i] > 0) return false;
        }
        return true;
    }
};",1454822229
Thang Nguyen,nguyenluongthang33,698,3643,cpp,"class Solution {
public:
    bool check(vector<int> nums, vector<vector<int>>& queries, int k) {
        vector<int> marker(nums.size() + 1, 0);
        for (int i = 0; i < k; ++i) {
            auto query = queries[i];
            marker[query[0]] -= query[2];
            marker[query[1] + 1] += query[2];
        }
        
        int sub = 0;
        for (int i = 0; i < nums.size(); ++i) {
            // cout << marker[i] << endl;
            sub += marker[i];
            nums[i] += sub;
            if (nums[i] > 0) return false;
        }
        return true;
    }
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int l = 0, r = queries.size();
        int ans = -1;
        while (l <= r) {
            int mid = (l + r) / 2;
            if (check(nums, queries, mid)) {
                r = mid - 1;
                ans = mid;
            } else {
                l = mid + 1;
            }
        }
        return ans;
    }
};",1454839549
supraja872,supraja872,700,3616,cpp,"class Solution {
    int valid(int ind, vector<int> nums, int dir) {
        while (ind >= 0 && ind < nums.size()) {
            if (nums[ind]) {
                nums[ind]--;

                if (dir == -1)
                    dir = 1;
                else
                    dir = -1;
            }

            ind = ind + dir;
        }

        for (int i = 0; i < nums.size(); i++) {
            if (nums[i])
                return 0;
        }

        return 1;
    }

public:
    int countValidSelections(vector<int>& nums) {
        int cnt = 0;

        for (int i = 0; i < nums.size(); i++) {
            if (nums[i] == 0) {
                cnt += valid(i, nums, -1);
                cnt += valid(i, nums, 1);
            }
        }

        return cnt;
    }
};",1454812737
supraja872,supraja872,700,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        vector<long long int> freqCnt(n, 0);


        for (auto q : queries) {
            int startIndex = q[0];
            int secondIndex = q[1];


            freqCnt[startIndex]++;

            if (secondIndex != n - 1) {
                freqCnt[secondIndex + 1]--;
            }
        }

        for (int i = 1; i < n; i++) {
            freqCnt[i] = freqCnt[i] + freqCnt[i - 1];
        }

        for (int i = 0; i < n; i++) {
            int elem = nums[i];

            long long int possElem = elem - freqCnt[i];

            if (possElem > 0) return false;
        }

        return true;
    }
};",1454825060
supraja872,supraja872,700,3643,cpp,"class Solution {
    bool possMid(int ind, vector<vector<int>>& queries, vector<int> nums) {
        int n = nums.size();
        vector<long long int> freqCnt(n, 0);
        for (int i = 0; i <= ind; i++) {
            auto q = queries[i];
            int startIndex = q[0];
            int secondIndex = q[1];
            int amount = q[2];

            freqCnt[startIndex] += amount;

            if (secondIndex != n - 1) {
                freqCnt[secondIndex + 1] -= amount;
            }
        }

        for (int i = 1; i < n; i++) {
            freqCnt[i] = freqCnt[i] + freqCnt[i - 1];
        }

        for (int i = 0; i < n; i++) {
            int elem = nums[i];

            long long int possElem = elem - freqCnt[i];

            if (possElem > 0)
                return false;
        }

        return true;
    }

public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int low = 0, high = queries.size() - 1;

        int possAns = -1, all_zeros = 1;

        for (int i = 0; i < nums.size(); i++) {
            if (nums[i]) {
                all_zeros = 0;
                break;
            }
        }

        if (all_zeros) return 0;

        while (low <= high) {
            int mid = (high - low) / 2 + low;

            if (possMid(mid, queries, nums)) {
                possAns = mid;
                high = mid - 1;
            } else {
                low = mid + 1;
            }
        }

        if (possAns == -1) return -1;
        return possAns + 1;

    }
};",1454839664
Rahul Ahuja,RahulAhuja2901,701,3616,java,"class Solution
{
    public boolean check (int i, boolean right, int n, int[] nums)
    {
        int[] temp = new int[n];
        for (int j=0;j<n;j++)
        {
            temp[j] = nums[j];
        }
        while (i >= 0 && i < n)
        {
            if (temp[i] == 0)
            {
                if (right)
                {
                    i++;
                }
                else
                {
                    i--;
                }
            }
            else
            {
                temp[i]--;
                right = !right;
                if (right)
                {
                    i++;
                }
                else
                {
                    i--;
                }
            }
        }
        for (i=0;i<n;i++)
        {
            if (temp[i] != 0)
            {
                return false;
            }
        }
        return true;
    }
    public int countValidSelections(int[] nums)
    {
        int n = nums.length;
        int count = 0;
        for (int i=0;i<n;i++)
        {
            if (nums[i] == 0)
            {
                if (check (i, false, n, nums))
                {
                    count++;
                }
                if (check (i, true, n, nums))
                {
                    count++;
                }
            }
        }
        return count;
    }
}",1454821760
Rahul Ahuja,RahulAhuja2901,701,3639,java,"class Solution
{
    public boolean isZeroArray(int[] nums, int[][] queries)
    {
        int n = nums.length;
        int m = queries.length;
        int[] changes = new int[n + 1];
        for (int i=0;i<m;i++)
        {
            int l = queries[i][0];
            int r = queries[i][1];
            changes[l]--;
            changes[r + 1]++;
        }
        for (int i=1;i<=n;i++)
        {
            changes[i] += changes[i - 1];
        }
        for (int i=0;i<n;i++)
        {
            if (nums[i] + changes[i] > 0)
            {
                return false;
            }
        }
        return true;
    }
}",1454829704
Rahul Ahuja,RahulAhuja2901,701,3643,java,"class Solution
{
    public boolean check (int mid, int n, int m, int[] nums, int[][] queries)
    {
        int[] changes = new int[n + 1];
        for (int i=0;i<mid;i++)
        {
            int l = queries[i][0];
            int r = queries[i][1];
            int val = queries[i][2];
            changes[l] -= val;
            changes[r + 1] += val;
        }
        for (int i=1;i<=n;i++)
        {
            changes[i] += changes[i - 1];
        }
        for (int i=0;i<n;i++)
        {
            if (nums[i] + changes[i] > 0)
            {
                return false;
            }
        }
        return true;
    }
    public int minZeroArray (int[] nums, int[][] queries)
    {
        int n = nums.length;
        boolean bool = true;
        for (int i=0;i<n;i++)
        {
            if (nums[i] > 0)
            {
                bool = false;
                break;
            }
        }
        if (bool)
        {
            return 0;
        }
        int m = queries.length;
        int low = 1, high = m, k = -1;
        while (low <= high)
        {
            int mid = (low + high) / 2;
            if (check (mid, n, m, nums, queries))
            {
                k = mid;
                high = mid - 1;
            }
            else
            {
                low = mid + 1;
            }
        }
        return k;
    }
}",1454839672
cozyvelocirapto,cozyvelocirapto,703,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int s1=0, s=0;
        for(int x:nums) s+=x;
        int ans=0;
        for(int i=0;i<nums.size();i++){
            s1+=nums[i];
            int s2=s-s1;
            if(nums[i]==0){
                if(s1==s2){
                    ans+=2;
                }
                else if(abs(s1-s2)==1){
                    ans++;
                }
            }
        }
        return ans;
    }
};",1454808963
cozyvelocirapto,cozyvelocirapto,703,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n=nums.size();
        vector<int> inds(n+1);
        for(vector<int> x:queries){
            int l=x[0];
            int r=x[1];
            inds[l]++;
            inds[r+1]--;
        }
        for(int i=1;i<=n;i++){
            inds[i]+=inds[i-1];
        }
        for(int i=0;i<n;i++){
            if(nums[i]>inds[i]){
                return 0;
            }
        }
        return 1;
    }
};",1454832325
cozyvelocirapto,cozyvelocirapto,703,3643,cpp,"class Solution {
public:

    bool condition(vector<int> &nums, vector<vector<int>> &queries, int mid){
        int n=nums.size();
        vector<int> ind(n+1);
        for(int i=0;i<mid;i++){
            int l=queries[i][0];
            int r=queries[i][1];
            int val=queries[i][2];
            ind[l]+=val;
            ind[r+1]-=val;
        }
        for(int i=1;i<=n;i++){
            ind[i]+=ind[i-1];
        }
        for(int i=0;i<n;i++){
            if(nums[i]>ind[i]){
                return false;
            }
        }
        return true;
    }

    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n=nums.size();
        int lo=0, hi=queries.size();
        int ans=-1;
        while(lo<=hi){
            int mid=lo+(hi-lo)/2;
            if(condition(nums, queries, mid)){
                ans=mid;
                hi=mid-1;
            }
            else{
                lo=mid+1;
            }
        }
        return ans;
    }
};",1454847128
3SnHitFaQ0,3SnHitFaQ0,705,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        # 模擬一次操作，返回是否能將 nums 的所有元素歸零
        def can_zero_out(start: int, direction: int) -> bool:
            n = len(nums)
            temp_nums = nums[:]  # 創建 nums 的副本，避免影響原數據
            curr = start
            move_dir = direction  # 初始移動方向

            while 0 <= curr < n:  # 當前索引在數組範圍內
                if temp_nums[curr] == 0:
                    # 如果當前值為 0，繼續向當前方向移動
                    curr += move_dir
                else:
                    # 如果當前值大於 0，減少該值並反轉移動方向
                    temp_nums[curr] -= 1
                    move_dir *= -1  # 反轉方向
                    curr += move_dir  # 移動一步

            # 檢查是否所有數字都歸零
            return all(x == 0 for x in temp_nums)

        valid_count = 0  # 計算有效選擇的數量
        n = len(nums)

        # 遍歷所有可能的起始位置
        for i in range(n):
            if nums[i] == 0:  # 只有當 nums[i] == 0 才能作為起始點
                # 模擬向左和向右移動
                if can_zero_out(i, -1):  # 向左
                    valid_count += 1
                if can_zero_out(i, 1):  # 向右
                    valid_count += 1

        return valid_count",1454806220
3SnHitFaQ0,3SnHitFaQ0,705,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        n = len(nums)
        delta = [0] * (n + 1)  # 差分數組，長度為 n+1

        # 處理查詢，構建差分數組
        for li, ri in queries:
            delta[li] += 1  # 範圍起始處增加 1
            if ri + 1 < n:
                delta[ri + 1] -= 1  # 範圍結束處減少 1
        
        # 累積差分，計算每個索引的總操作次數
        current_operations = 0
        for i in range(n):
            current_operations += delta[i]  # 累積操作次數
            if nums[i] > current_operations:  # 如果操作次數不足以將值減為 0
                return False
        
        return True",1454820307
3SnHitFaQ0,3SnHitFaQ0,705,3643,python3,"class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        def can_zero_out(k: int) -> bool:
            """"""
            判斷處理前 k 個查詢後，能否將 nums 變為零數組。
            使用差分數組來高效處理範圍操作。
            """"""
            n = len(nums)
            delta = [0] * (n + 1)  # 差分數組，長度為 n+1
            temp_nums = nums[:]  # 保留 nums 的副本，避免修改原始數據

            # 構建差分數組，處理前 k 個查詢
            for i in range(k):
                li, ri, vali = queries[i]
                delta[li] -= vali  # 範圍起始處減少 vali
                if ri + 1 < n:
                    delta[ri + 1] += vali  # 範圍結束處增加 vali

            # 累積差分數組，模擬減少操作
            current_decrement = 0
            for i in range(n):
                current_decrement += delta[i]  # 累積當前索引的減少值
                temp_nums[i] += current_decrement  # 更新 temp_nums[i]
                if temp_nums[i] > 0:  # 如果無法將值減為 0，則返回 False
                    return False

            return True

        # 使用二分法找最小的 k
        left, right = 0, len(queries)
        result = -1  # 初始化為 -1，表示無法找到解
        while left <= right:
            mid = (left + right) // 2
            if can_zero_out(mid):
                result = mid  # 如果能歸零，更新結果
                right = mid - 1  # 繼續搜索更小的 k
            else:
                left = mid + 1  # 搜索更大的 k

        return result",1454832336
Pushkar Mourya,_PushkaR,706,3616,cpp,"class Solution {
public:
    int check(int i, int di, vector<int> a) {
        int n = a.size();
        while (i >= 0 && i < n) {
            if (a[i] > 0) {
                a[i]--;
                di = -di;
            }
            i += di;
        }
        for (auto j : a)
            if (j)
                return 0;
        return 1;
    }
    int countValidSelections(vector<int>& a) {
        int n = a.size();
        int ans = 0;
        for (int i = 0; i < n; i++) {
            if (!a[i] && check(i, 1, a))
                ans++;
            if (!a[i] && check(i, -1, a))
                ans++;
        }
        return ans;
    }
};",1454816548
Pushkar Mourya,_PushkaR,706,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& a, vector<vector<int>>& q) {
        int n = a.size();

        vector<int> v(n, 0);
        for (auto i : q) {
            int l = i[0], r = i[1];

            if(r+1< n)
            v[r+1]--;
            v[l]++;
        }
        for (int i = 1; i < n; i++)
            v[i] += v[i - 1];

        for (int i = 0; i < n; i++) {
            if (v[i] < a[i])
                return false;
        }
        return true;
    }
};",1454823377
Pushkar Mourya,_PushkaR,706,3643,cpp,"class Solution {
public:
    int check(int pos, vector<int>& a, vector<vector<int>>& q) {
        int n = a.size();

        vector<int> v(n, 0);
        for (int j = 0; j < pos; j++) {
            int l = q[j][0], r = q[j][1], val = q[j][2];

            if (r + 1 < n)
                v[r + 1] -= val;
            v[l] += val;
        }
        for (int i = 1; i < n; i++)
            v[i] += v[i - 1];

        for (int i = 0; i < n; i++) {
            if (v[i] < a[i])
                return false;
        }
        return true;
    }
    int minZeroArray(vector<int>& a, vector<vector<int>>& q) {
        int n = a.size();

        int l = -1, r = q.size();

        while (l + 1 < r) {
            int mid = (l + r) / 2;

            if (check(mid, a, q)) {
                r = mid;
            } else
                l = mid;
        }
        if (check(r, a, q))
            return r;

        return -1;
    }
};",1454839788
Haipei Liu,lhp_ch,707,3616,python3,"from typing import List
import copy

class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        n = len(nums)
        valid_s =0
        directions=[-1,1]

        s_p = [i for i, val in enumerate(nums) if val ==0]

        if all(val==0 for val in nums):
            return len(s_p) *2

        for start in s_p:
            for dir in directions:
                nums_clone = copy.deepcopy(nums)
                curr= start
                current_dir = dir

                while 0<= curr< n:
                    if nums_clone[curr]==0:
                        curr+= current_dir
                    else:
                        nums_clone[curr] -=1
                        current_dir *= -1
                        curr += current_dir

                if all(val==0 for val in nums_clone):
                    valid_s +=1
        return valid_s
        ",1454813827
Haipei Liu,lhp_ch,707,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        n =len(nums)
        diff = [0]*(n+1)

        for query in queries:
            li,ri = query
            diff[li]+=1
            diff[ri+1]-=1

        count = [0]*n
        current=0
        for i in range(n):
            current += diff[i]
            count[i]= current

        for i in range(n):
            if nums[i]>count[i]:
                return False
        return True",1454820444
Haipei Liu,lhp_ch,707,3643,python3,"from typing import List

class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        n =len(nums)
        q=len(queries)

        def can_t(k:int)->bool:
            diff = [0]*(n+1)
            for i in range(k):
                li,ri,vali = queries[i]
                diff[li]+= vali
                diff[ri+1]-=vali
            current =0
            for i in range(n):
                current += diff[i]
                if current < nums[i]:
                    return False
            return True
        left,right =0,q
        result = -1

        while left<=right:
            mid = (left+right)//2
            if can_t(mid):
                result = mid
                right= mid-1
            else:
                left=mid+1

        if result !=-1:
            return result
        else:
            return -1
            
        ",1454832391
Lin Yuan,lucasdaddy,708,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        n = len(nums)
        total = sum(nums) 
        
        def simulate(curr, direction, nums_copy):
            decreased = 0
            while 0 <= curr < n:
                if nums_copy[curr] == 0:
                    curr += 1 if direction == ""right"" else -1
                else:
                    nums_copy[curr] -= 1
                    decreased += 1
                    direction = ""left"" if direction == ""right"" else ""right""
                    curr += 1 if direction == ""right"" else -1
            return decreased == total
        
        valid_count = 0
        for i in range(n):
            if nums[i] != 0: continue
            # Test both directions for each starting position
            if simulate(i, ""left"", nums[:]):
                valid_count += 1
            if simulate(i, ""right"", nums[:]):
                valid_count += 1

        return valid_count
        
        ",1454847225
Lin Yuan,lucasdaddy,708,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        n = len(nums)
        # 差分数组来统计每个位置被query覆盖的次数
        coverage = [0] * (n + 1)

        # 对每个query进行处理
        for l, r in queries:
            coverage[l] += 1
            coverage[r + 1] -= 1

        # 还原前缀和，得到每个位置被覆盖的次数
        max_decrements = [0] * n
        curr_sum = 0
        for i in range(n):
            curr_sum += coverage[i]
            max_decrements[i] = curr_sum
            if max_decrements[i] < nums[i]:
                return False

        return True",1454822824
Lin Yuan,lucasdaddy,708,3643,python3,"class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        k = len(queries)
        l, r = 0, k
        while l + 1 < r:
            mid = (l + r) >> 1
            if self.isPossible(nums, queries, mid):
                r = mid
            else:
                l = mid + 1 
                
        if self.isPossible(nums, queries, l): return l
        elif self.isPossible(nums, queries, r): return r
        return -1
    
    def isPossible(self, nums, queries, k):
        n = len(nums)
        # 差分数组来统计每个位置被query覆盖的次数
        coverage = [0] * (n + 1)

        # 对每个query进行处理
        for i in range(k):
            l, r, val = queries[i]
            coverage[l] += val
            coverage[r + 1] -= val

        running_total = 0
        for i in range(n):
            running_total += coverage[i]
            if running_total < nums[i]:
                return False
        return True
            
            ",1454839678
Rohit Kumar,amrohit,710,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int sum = accumulate(nums.begin(), nums.end(), 0);
        int sum2 = 0;
        int ans = 0;
        for(int i = 0; i < nums.size(); i++){
            sum -= nums[i];
            sum2 += nums[i];
            if(nums[i] == 0){
                int diff = abs(sum - sum2);
                if(diff == 0) ans += 2;
                if(diff == 1) ans += 1;
            }
        }
        return ans;
    }
};",1454809141
Rohit Kumar,amrohit,710,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        vector<int> prefix(n+1, 0);
        for(auto q: queries){
            prefix[q[0]]++, prefix[q[1]+1]--;
        }
        for(int i = 1; i <= n; i++) prefix[i] += prefix[i-1];
        for(int i = 0; i < n; i++) if(nums[i] > prefix[i]) return 0;
        return 1;
    }
};",1454812289
Rohit Kumar,amrohit,710,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        long long sum = accumulate(nums.begin(), nums.end(), 0LL);
        if(sum == 0) return 0;
        int low = 0, high = queries.size()-1, ans = -1;
        while(low <= high){
            int mid = low + (high - low)/2;
            vector<int> prefix(n+1, 0);
            for(int i = 0; i <= mid; i++){
                prefix[queries[i][0]] += queries[i][2], prefix[queries[i][1]+1] -= queries[i][2];
                // cout<<queries[i][0]<<"" ""<<queries[i][1]<<endl;
            }
            for(int i = 1; i <= n; i++) prefix[i] += prefix[i-1];
            bool flag = 1;
            for(int i = 0; i < n; i++) if(nums[i] > prefix[i]) flag = 0;
            if(flag) ans = mid+1, high = mid - 1;
            else low = mid + 1;
        }
        return ans;
    }
};",1454832421
Angela_G,Angela_G,712,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        total = sum(nums)
        curlen = len(nums)
        cursum = 0
        ans = 0
        for i in range(curlen):
            if nums[i] == 0:
                if total - cursum == cursum:
                    ans += 2
                elif abs(total - cursum - cursum) == 1:
                    ans += 1
            cursum += nums[i]
        return ans 
                    
            ",1454812747
Angela_G,Angela_G,712,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        n = len(nums)
        count = [0] * (n + 1)
        for left, right in queries:
            count[left] += 1
            if right + 1 < n:
                count[right + 1] -= 1
        curdecr = 0
        for i in range(n):
            curdecr += count[i]
            nums[i] -= curdecr
            if nums[i] > 0:
                return False
        return True
            
            
        ",1454822878
Angela_G,Angela_G,712,3643,python3,"class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        n = len(nums)
        left = 0
        right = len(queries)
        
        def checkValid(num):
            temp_nums = nums[:]
            count = [0] * (n + 1)
            for left, right, val in queries[:num]:
                count[left] += val
                if right + 1 < n:
                    count[right + 1] -= val
            curdecr = 0
            for i in range(n):
                curdecr += count[i]
                temp_nums[i] -= curdecr
                if temp_nums[i] > 0:  
                    return False
            return True
            
        while left < right:
            mid = (left + right) // 2
            if checkValid(mid):
                right = mid
            else:
                left = mid + 1
        return left if checkValid(left) else -1
        
        
        
        ",1454839886
leetcode_456745,leetcode_456745,713,3616,cpp,"class Solution {
public:
      int countValidSelections(vector<int>& arr) {
        auto helper = [&](int idx, bool dir, vector<int>& tempArr) -> bool {
            int pos = idx;
            int len = tempArr.size();
            while (0 <= pos && pos < len) {
                if (tempArr[pos] == 0) {
                    pos = dir ? pos + 1 : pos - 1;
                } else {
                    tempArr[pos] -= 1;
                    dir = !dir;
                    pos = dir ? pos + 1 : pos - 1;
                }
            }
            
            return all_of(tempArr.begin(), tempArr.end(), [](int x) { return x == 0; });
        };
        
        int res = 0;
        int n = arr.size();
        
        for (int i = 0; i < n; ++i) {
            if (arr[i] == 0) {
                for (bool dir : {true, false}) {
                    vector<int> tempArr = arr;
                    if (helper(i, dir, tempArr))++res;
                }
            }
        }
        
        return res;
    }
};",1454837880
leetcode_456745,leetcode_456745,713,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
         int n = nums.size();
         vector<int> pre(n+1);
         for(auto ele:queries){
             pre[ele[0]]++;
             pre[ele[1] +1]--;
         };
        for(int i= 1;i<=n;i++){
            pre[i]+=pre[i-1];
        }
        for(int i= 0;i<nums.size();i++){
            nums[i]-=pre[i];
            if(nums[i] < 0)nums[i] = 0;
        }
        for(auto ele:nums){
            if(ele)return false;
        }
        return true;
         
    }
};",1454818847
leetcode_456745,leetcode_456745,713,3643,cpp,"class Solution {
public:
    vector<int> helper1(int n, vector<vector<int>>& queries, int k) {
        vector<int> diff(n + 1, 0);
        for (int i = 0; i < k; ++i) {
            int l = queries[i][0], r = queries[i][1], val = queries[i][2];
            diff[l] += val;
            if (r + 1 < n) diff[r + 1] -= val;
        }
        return diff;
    }

    bool helper(int n, vector<int>& nums, vector<vector<int>>& queries, int k,int total = 0) {
        vector<int> arr = helper1(n, queries, k);
        for (int i = 0; i < n; ++i) {
            total += arr[i];
            if (total < nums[i]) return false;
        }
        return true;
    }

    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        int left = 0, right = queries.size(), ans = -1;
        while (left <= right) {
            int mid = (left + right) / 2;
            if (helper(n, nums, queries, mid))  ans = mid,  right = mid - 1;
            else left = mid + 1;
        }

        return ans;
    }
};",1454847339
fipao,fipao,715,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        vector<int> lSum{nums[0]};
        vector<int> rSum(nums.size());
        for(int i=1;i<nums.size();i++){
            lSum.push_back(nums[i]+lSum[i-1]);
        }
        rSum[nums.size()-1]=nums[nums.size()-1];
        for(int i=nums.size()-2;i>=0;i--){
            rSum[i]=rSum[i+1]+nums[i];
        }
        int ans=0;
        // for(int n:lSum)cout<<n<<"","";
        // cout<<""\n"";
        // for(int n:rSum)cout<<n<<"","";
        for(int i=0;i<nums.size();i++){
            if(!nums[i]){
                if(abs(lSum[i]-rSum[i])==1)ans++;
                if(abs(lSum[i]-rSum[i])==0)ans+=2;
            }
        }
        return ans;
    }
};",1454814007
fipao,fipao,715,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        vector<int> start(nums.size(),0);
        vector<int> end(nums.size(),0);
        for(vector<int>query:queries){
            start[query[0]]++;
            end[query[1]]++;
        }
        int running=0;
        for(int i=0;i<nums.size();i++){
            running+=start[i];
            if(nums[i]>running)return false;
            running-=end[i];
        }
        return true;
    }
};",1454825116
fipao,fipao,715,3643,cpp,"class Solution {
public:
    bool foo(vector<int>& nums, vector<vector<int>>& queries,int n){
        vector<int> start(nums.size(),0);
        vector<int> end(nums.size(),0);
        for(int i=0;i<n;i++){
            start[queries[i][0]]+=queries[i][2];
            end[queries[i][1]]+=queries[i][2];
        }
        int running=0;
        for(int i=0;i<nums.size();i++){
            running+=start[i];
            if(nums[i]>running)return false;
            running-=end[i];
        }
        return true;
    }
    int binary(vector<int>& nums, vector<vector<int>>& queries,int l,int r){
        if(l==r)return l;
        if(l+1==r){
            if(foo(nums,queries,l))return l;
            return r;
        }
        int mid = (l+r)/2;
        if(foo(nums,queries,mid))return binary(nums,queries,l,mid);
        else return binary(nums,queries,mid,r);
    }
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        if(foo(nums,queries,queries.size())==false)return -1;
        return binary(nums,queries,0,queries.size());
    }
};",1454847367
stackenqueue2,StackEnqueue2,716,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& a) {
        int s=0;
        for(auto i:a)s+=i;
        
        int c=0;
        int ans=0;
        for(auto i:a)
        {
            c+=i;
            if(c*2 == s && i==0)ans+=2;
            if(abs(c*2-s) == 1 && i==0)ans++;
        }
        return ans;
    }
};",1454807052
stackenqueue2,StackEnqueue2,716,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& a, vector<vector<int>>& q) {
        int n=a.size();
        int p[n];
        for(int i=0;i<n;i++)p[i]=0;
        
        for(auto i:q)
        {
            int f=i[0],s=i[1];
            p[f]++;
            if(s+1 < n)p[s+1]--;
        }
        
        int c=0;
        for(int i=0;i<n;i++)
        {
            c+=p[i];
            a[i] -= c;
            
            if(a[i] >= 1)return false;
        }
        return true;
    }
};",1454809890
stackenqueue2,StackEnqueue2,716,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& a, vector<vector<int>>& q) {
        int n=a.size();
        int m=q.size();
        int p[n],aa[n];
        int ans=-1;
        
        bool f=true;
        for(auto i:a)if(i>0)f=false;
        
        if(f)return 0;
        
        int l=0,h=m-1;
        while(l<=h)
        {
            int m=l+h;
            m>>=1;
            
            bool flag=true;
            
            for(int i=0;i<n;i++)p[i]=0,aa[i]=a[i];
            for(int j=0;j<=m;j++){
                int f=q[j][0],l=q[j][1],v=q[j][2];
                
                p[f]+=v;
                if(l+1 < n)p[l+1]-=v;
            }
            
            int c=0;
            for(int i=0;i<n;i++)
            {
                c+=p[i];
                aa[i] -= c;
                if(aa[i] > 0)flag=false;
            }
            
            if(flag)
            {
                ans=m+1;
                h=m-1;
            }
            else l=m+1;
        }
        
        
        
        
        
        return ans;
    }
};",1454825317
Qstrqch,Qstrqch,717,3616,java,"class Solution {
    public int countValidSelections(int[] nums) {
        int N = nums.length;
        int[] psa = new int[N+1];
        for (int i = 1 ; i <= N; i++) {
            psa[i] = nums[i-1];
            psa[i] += psa[i-1];
        }
        int cnt = 0;
        for (int i = 1; i <= N; i++) {
            if (psa[i] == psa[i-1]) {
                if (psa[i] - (psa[N] - psa[i]) == 0) cnt+=2;
                else if (Math.abs(psa[i] - (psa[N] - psa[i])) == 1) cnt++;
               // System.out.println(i); 
            }
        }
        return cnt;
    }
}",1454809993
Qstrqch,Qstrqch,717,3639,java,"class Solution {
    public boolean isZeroArray(int[] nums, int[][] queries) {
        int N = nums.length;
        int[] psa = new int[N+2];
        for (int[] q: queries) {
            int l = q[0]+1, r = q[1]+1;
            psa[l]++; psa[r+1]--;
        }
        for (int i = 1; i <= N; i++) {
            psa[i] += psa[i-1];
            //System.out.println(psa[i] + "" "" + nums[i-1]);
        }
        for (int i = 1; i <= N; i++) {
            if (psa[i] < nums[i-1]) return false;
        }
        return true;
        
    }
}",1454820785
Qstrqch,Qstrqch,717,3643,java,"class Solution {
    public int minZeroArray(int[] nums, int[][] queries) {
        int lo = 0, hi = queries.length, ans = -1;
        while (lo <= hi) {
            int mi = (lo + hi)/2;
            if (solve(mi, nums, queries)) {
                ans = mi;
                hi = mi-1;
            }  else {
                lo = mi+1;
            }
        }
        return ans;
    }
    boolean solve(int mi, int[] nums, int[][] queries){
        int N = nums.length;
        int[] psa = new int[N+2];
        for (int i = 0; i < mi; i++) {
            int[] q = queries[i];
            int l = q[0]+1, r = q[1]+1, v = q[2];
            psa[l] += v; psa[r+1] -= v;
        }
        for (int i = 1; i <= N; i++) {
            psa[i] += psa[i-1];
            //System.out.println(psa[i] + "" "" + nums[i-1]);
        }
        for (int i = 1; i <= N; i++) {
            if (psa[i] < nums[i-1]) return false;
        }
        return true;
    }
}",1454832679
Sagar,Kundu_003,718,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int tot = 0;
        for(auto i : nums) tot += i;
        int ans = 0, c = 0;
        for(auto i : nums) {
            c += i;
            if(i == 0) {
                if(c == tot-c) ans += 2;
                else if(abs(tot-c-c) == 1) ans++;
            }
        }
        return ans;
    }
};",1454807195
Sagar,Kundu_003,718,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        vector<int> v(nums.size()+1,0);
        for(auto i : queries) {
            v[i[0]]++;
            v[i[1]+1]--;
        }
        for(int i = 1 ; i <= nums.size() ; i++) v[i] += v[i-1];
        for(int i = 0 ; i < nums.size() ; i++) if(nums[i] > v[i]) return false;
        return true;
    }
};",1454814497
Sagar,Kundu_003,718,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        bool c = true;
        for(auto i : nums) if(i != 0) c = false;
        if(c) return 0;
        int ans = -1;
        int l = 0 , r = queries.size()-1;
        while(l <= r) {
            int m = (l+r)>>1;
            vector<int> v(nums.size()+1,0);
            for(int i = 0 ; i <= m ; i++) {
                v[queries[i][0]] += queries[i][2];
                v[queries[i][1]+1] -= queries[i][2];
            }
            bool chk = true;
            for(int i = 1 ; i <= nums.size() ; i++) v[i] += v[i-1];
            for(int i = 0 ; i < nums.size() ; i++) {
                if(nums[i] > v[i]) {
                    chk = false;
                    break;
                }
            }
            if(chk) {
                ans = m+1;
                r = m-1;
            } else l = m+1;
        }
        return ans;
    }
};",1454832690
farizazmip,farizazmip,720,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        n = len(nums)
        
        def traverse(start, dir):
            memo, pos = nums[:], start
            while 0 <= pos < len(memo):
                if memo[pos] == 0:
                    pos += dir
                else:
                    memo[pos], dir = memo[pos] - 1, -dir
                    pos += dir
            return all(x == 0 for x in memo)
    
        return sum(traverse(i, d) for i, x in enumerate(nums) if x == 0 for d in (1, -1))",1454810059
farizazmip,farizazmip,720,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        n = len(nums)
        memo = [0] * (n + 1)
        for query in queries:
            memo[query[0]] += 1
            memo[query[1] + 1] -= 1
        for i in range(1, n + 1):
            memo[i] += memo[i - 1]
        for i in range(n):
            if memo[i] < nums[i]:
                return False
        return True",1454817459
farizazmip,farizazmip,720,3643,python3,"class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        def is_good(k):
            memo = [0] * (len(nums) + 1)
            for query in queries[:k]:
                memo[query[0]] += query[2]
                if query[1] + 1 < len(memo):
                    memo[query[1] + 1] -= query[2]
            cnt = 0
            for i, num in enumerate(nums):
                cnt += memo[i]
                if num > cnt:
                    return False
            return True

        if all(x == 0 for x in nums):
            return 0
        
        ks = list(range(1, len(queries) + 1))
        idx = bisect_left(ks, True, key=lambda k: is_good(k))
        return ks[idx] if idx < len(ks) else -1",1454840091
lit2019033,lit2019033,721,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& A) {
        int n=A.size(),sm=0,ans=0;
        vector<int>pre(n),suf(n);
        for(int i=0;i<n;i++){
            sm+=A[i];
            pre[i]=sm;
        }

        sm=0;

        for(int i=n-1;i>=0;i--){
            sm+=A[i];
            suf[i]=sm;
        }

        for(int i=0;i<n;i++){
            if(A[i]==0 && pre[i]==suf[i]){
                ans+=2;
            }else if(A[i]==0 && abs(pre[i]-suf[i])==1){
                ans++;
            }
        }

        return ans;
    }
};",1454807940
lit2019033,lit2019033,721,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& A, vector<vector<int>>& q) {
        int n=A.size();
        vector<int>B(n+1,0);

        for(int i=0;i<q.size();i++){
            B[min(q[i][0],q[i][1])]+=1;
            B[max(q[i][0],q[i][1])+1]-=1;
        }

        int sm=0;
        for(int i=0;i<n;i++){
            sm+=B[i];
            if(A[i]<=sm){
                
            }else{
                return false;
            }
        }

        return true;
    }
};",1454817566
lit2019033,lit2019033,721,3643,cpp,"class Solution {
public:
    bool lsw(vector<int>& A, vector<vector<int>>& q, int k){
        int n=A.size();
        vector<int>B(n+1,0);

        for(int i=0;i<k;i++){
            B[min(q[i][0],q[i][1])]+=q[i][2];
            B[max(q[i][0],q[i][1])+1]-=q[i][2];
        }

        int sm=0;
        for(int i=0;i<n;i++){
            sm+=B[i];
            if(A[i]<=sm){
                
            }else{
                return false;
            }
        }

        return true;
    }
    int minZeroArray(vector<int>& A, vector<vector<int>>& q) {
        int lb=1,ub=q.size();
        int ct=0,ans=INT_MAX;

        for(int i=0;i<A.size();i++){
            if(A[i]==0){
                ct++;
            }
        }

        if(ct==A.size())return 0;
        while(lb<=ub){
            int k=(lb+ub)/2;
            bool an=lsw(A,q,k);

            if(an){
                ub=k-1;
                ans=min(ans,k);
            }else{
                lb=k+1;
            }
        }

        return ans==INT_MAX?-1:ans;
    }
};",1454832765
Kamil Mulani,kamil2433,722,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
         int n = nums.size();
    int validSelections = 0;

    for (int i = 0; i < n; ++i) {
        if (nums[i] == 0) {
            // Check both directions
            if (simulateProcess(nums, i, 1)) {
                validSelections++;
            }
            if (simulateProcess(nums, i, -1)) {
                validSelections++;
            }
        }
    }

    return validSelections;
    }
    
    bool simulateProcess(vector<int> nums, int start, int direction) {
    int n = nums.size();
    int curr = start;

    while (curr >= 0 && curr < n) {
        if (nums[curr] == 0) {
            curr += direction; // Move in the current direction
        } else {
            nums[curr]--;       // Decrement the current element
            direction = -direction; // Reverse direction
            curr += direction;      // Move in the new direction
        }
    }

    // Check if all elements are 0
    for (int num : nums) {
        if (num != 0) {
            return false;
        }
    }
    return true;
}

};",1454806397
Kamil Mulani,kamil2433,722,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
          int n = nums.size();
    vector<int> decrement(n + 1, 0); // Track range updates

    // Apply queries
    for (const auto& query : queries) {
        int l = query[0], r = query[1];
        decrement[l]++;
        decrement[r + 1]--;
    }

    // Calculate effective decrements
    vector<int> effectiveDecrement(n, 0);
    int currDecrement = 0;
    for (int i = 0; i < n; ++i) {
        currDecrement += decrement[i];
        effectiveDecrement[i] = currDecrement;
    }

    // Check if nums can be reduced to zero
    for (int i = 0; i < n; ++i) {
        if (nums[i] > effectiveDecrement[i]) {
            return false;
        }
    }

    return true;
    }
};",1454807400
Kamil Mulani,kamil2433,722,3643,cpp,"class Solution {
public:
    bool canTransformToZero(int k, vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        vector<int> decrement(n + 1, 0);
        vector<int> current(nums);

        for (int i = 0; i < k; ++i) {
            int l = queries[i][0], r = queries[i][1], val = queries[i][2];
            decrement[l] += val;
            if (r + 1 < n) {
                decrement[r + 1] -= val;
            }
        }

        int currDecrement = 0;
        for (int i = 0; i < n; ++i) {
            currDecrement += decrement[i];
            current[i] = max(nums[i] - currDecrement, 0);
            if (current[i] != 0) {
                return false;
            }
        }

        return true;
    }

    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int low = 0, high = queries.size();
        int result = -1;

        while (low <= high) {
            int mid = low + (high - low) / 2;
            if (canTransformToZero(mid, nums, queries)) {
                result = mid;
                high = mid - 1;
            } else {
                low = mid + 1;
            }
        }

        return result;
    }
};
",1454840122
Edward,dwrdius,724,3616,cpp,"class Solution {
public:
    bool isValid(vector<int> nums, int i, bool isRight, int nonZero) {
        int n = nums.size();
        while (nonZero && i >= 0 && i < n) {
            if (nums[i] > 0) {
                nums[i]--;
                if (nums[i] == 0) nonZero--;
                isRight = !isRight;
            }

            if (isRight) i++;
            else i--;
        }

        return nonZero == 0;
    }
    int countValidSelections(vector<int>& nums) {
        int nonZero = 0, n = nums.size(), res = 0;
        for (int& i : nums) if (i) nonZero++;
        for (int i = 0; i < n; i++) {
            if (nums[i] == 0) {
                if (isValid(nums, i, false, nonZero)) res++;
                if (isValid(nums, i, true, nonZero)) res++;
            }
        }
        return res;
    }
};",1454810737
Edward,dwrdius,724,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();        
        vector<int> lineSweep(n+1, 0);
        for (auto& v : queries) {
            lineSweep[v[0]]++;
            lineSweep[v[1]+1]--;
        }

        int prefix = 0;
        for (int i = 0; i < n; i++) {
            prefix += lineSweep[i];
            if (prefix < nums[i]) return false;
        }
        return true;
    }
};",1454814820
Edward,dwrdius,724,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size(), k = 0, idx = 0, cacheFix = 0;        
        while (idx < n && nums[idx] == 0) idx++;
        if (idx == n) return 0;
        vector<int> lineSweep(n+1, 0);
        for (auto& v : queries) {
            k++;
            if (v[0] <= idx && idx <= v[1]) cacheFix += v[2];
            else lineSweep[v[0]] += v[2];
            
            lineSweep[v[1]+1] -= v[2];

            // cout << idx << "" "" << cacheFix << endl;
            // for (int i : lineSweep) cout << i << "" "";
            // cout << endl << endl;
            
            if (nums[idx] <= cacheFix) {
                idx++;
                while (idx < n) {
                    cacheFix += lineSweep[idx];
                    if (nums[idx] <= cacheFix) idx++;
                    else break;
                }
            }

            if (idx == n) return k;
        }

        return -1;
    }
};",1454840189
Wenzheng Xie,albertxwz,725,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int n = nums.size();

        auto process = [&n](vector<int> a, int cur, int d) {
            // cout << cur << ' ' << d << endl;
            while (cur >= 0 && cur < n) {
                if (a[cur] > 0) {
                    a[cur]--;
                    d *= -1;
                }
                cur += d;
            }
            // for (auto x: a) cout << x << ' '; cout << endl;
            for (auto x: a) if (x > 0) return false;
            return true;
        };

        int ans = 0;
        for (int i = 0; i < n; ++i) if (nums[i] == 0) {
            ans += process(nums, i, -1);
            ans += process(nums, i, 1);
            // cout << ans << endl;
        }
        return ans;
    }
};",1454819239
Wenzheng Xie,albertxwz,725,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        vector<int> a(n, 0);
        for (auto &q: queries) {
            int l = q[0], r = q[1];
            a[l]++;
            if (r + 1 < n) a[r + 1]--;
        }
        for (int i = 1; i < n; ++i)
            a[i] += a[i-1];
        // for (auto x: a) cout << x << ' '; cout << endl;
        for (int i = 0; i < n; ++i)
            if (a[i] < nums[i]) return false;
        return true;
    }
};",1454827387
Wenzheng Xie,albertxwz,725,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        auto isCovered = [&](int k) {
            vector<int> a(n, 0);
            for (int i = 0; i < k; ++i) {
                int l = queries[i][0], r = queries[i][1], val = queries[i][2];
                a[l] += val;
                if (r + 1 < n) a[r + 1] -= val;
            }
            for (int i = 1; i < n; ++i)
                a[i] += a[i-1];
            for (int i = 0; i < n; ++i)
                if (a[i] < nums[i]) return false;
            return true;
        };

        int L = 0, R = queries.size();
        int ans = R;
        while (L <= R) {
            int mid = (L+R) >> 1;
            if (isCovered(mid)) {
                ans = mid;
                R = mid - 1;
            }
            else L = mid + 1;
        }
        if (isCovered(ans)) return ans;
        return -1;
    }
};",1454840222
BattlerRein,BattlerRein,726,3616,java,"class Solution {
    public int countValidSelections(int[] nums) {
        int[] leftSumEx = new int[nums.length+1];
        int[] rightSumEx = new int[nums.length+1];

        for (int i = 0; i < nums.length; i++) {
            leftSumEx[i+1] = leftSumEx[i] + nums[i];
        }

        for (int i = nums.length-2; i >= 0; i--) {
            rightSumEx[i] = rightSumEx[i+1] + nums[i+1];
        }

        int res = 0;
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] != 0) {
                continue;
            }
            if (leftSumEx[i] + nums[i] == rightSumEx[i] || leftSumEx[i] + nums[i] == rightSumEx[i] + 1) {
                res++; 
            }
            if (rightSumEx[i] + nums[i] == leftSumEx[i] || rightSumEx[i] + nums[i] == leftSumEx[i] + 1) {
                res++; 
            }
        }

        return res;
    }
}",1454816647
BattlerRein,BattlerRein,726,3639,java,"class Solution {
    public boolean isZeroArray(int[] nums, int[][] queries) {
        return isPossible(nums, queries);
    }

    private boolean isPossible(int[] nums, int[][] queries) {
        int[] enter = new int[nums.length];
        int[] exit = new int[nums.length];
        for (int i = 0; i < queries.length; i++) {
            enter[queries[i][0]] += 1;
            exit[queries[i][1]] += 1;
        }
        int currOp = 0;
        for (int i = 0; i < nums.length; i++) {
            currOp += enter[i];
            if (nums[i] > currOp) {
                return false;
            }
            currOp -= exit[i];
        }
        return true;
    }
}",1454840252
BattlerRein,BattlerRein,726,3643,java,"class Solution {
    public int minZeroArray(int[] nums, int[][] queries) {
        int l = 0;
        int r = queries.length;
        while (l < r) {
            int m = (l+r) >> 1;
            if (isPossible(nums, queries, m)) {
                r = m;
            } else {
                l = m+1;
            }
        }
        if (isPossible(nums, queries, l)) {
            return l;
        }
        return -1;
    }


    private boolean isPossible(int[] nums, int[][] queries, int k) {
        int[] enter = new int[nums.length];
        int[] exit = new int[nums.length];
        for (int i = 0; i < k; i++) {
            enter[queries[i][0]] += queries[i][2];
            exit[queries[i][1]] += queries[i][2];
        }
        int currOp = 0;
        for (int i = 0; i < nums.length; i++) {
            currOp += enter[i];
            if (nums[i] > currOp) {
                return false;
            }
            currOp -= exit[i];
        }
        return true;
    }
}",1454838447
Chen Shicheng,ChenShicheng,727,3616,python3,"class Solution:
    def countValidSelections(self, arr: List[int]) -> int:
        arr.append(0)
        arr = [0] + arr
        n = len(arr)
        prefix_sum = [0] * n
        for i in range(1, n):
            prefix_sum[i] = prefix_sum[i - 1] + arr[i]
        suffix_sum = [0] * n
        for i in range(n - 2, -1, -1):
            suffix_sum[i] = suffix_sum[i + 1] + arr[i]
    
        ans=0
        for i in range(1, n - 1):
            if arr[i]:
                continue
            if prefix_sum[i - 1] == suffix_sum[i + 1]:
                ans += 2
            elif prefix_sum[i - 1] == suffix_sum[i + 1] + 1:
                ans += 1
            elif prefix_sum[i - 1] + 1 == suffix_sum[i + 1]:
                ans += 1
        return ans",1454812720
Chen Shicheng,ChenShicheng,727,3639,python3,"class Solution:
    def isZeroArray(self, arr: List[int], queries: List[List[int]]) -> bool:
        n= len(arr)
        idx = [0] * n
        for l,r in queries:
            idx[l] += 1
            if r+1<n:
                idx[r+1] -= 1
        cnt=0
        for i in range(n):
            cnt += idx[i]
            # print(i, cnt, arr[i])
            if arr[i] > cnt:
                return False
        return True",1454831172
Chen Shicheng,ChenShicheng,727,3643,python3,"class Solution:
    def minZeroArray(self, arr: List[int], queries: List[List[int]]) -> int:
            n= len(arr)
            def ok(k):
                idx = [0] * n
                for i,(l,r,v) in enumerate(queries):
                    if i >= k:
                        break
                    idx[l] += v
                    if r+1<n:
                        idx[r+1] -= v
                cnt=0
                for i in range(n):
                    cnt += idx[i]
                    # print(i, cnt, arr[i])
                    if arr[i] > cnt:
                        return False
                return True
        
            l, r = 0, len(queries)
            if not ok(r):
                return -1
        
            while l < r:
                m = (l+r)//2
                '''
                1,2: 
                2,3: 
                '''
                if ok(m):
                    r = m
                else:
                    l = m+1
            return l",1454840277
Ayush Kamal,ayushkamal346,728,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& a) {


        int ans=0;
        int su=0;
        int su1=accumulate(a.begin(), a.end(),0);

        for(int i=0; i<a.size();i++){

              if(a[i]==0 && su==su1-su){

                  ans+=2;
              }
              else if(a[i]==0 && (su-(su1-su)==-1 || su-(su1-su)==1) ){

                   ans+=1;
              }
            su+=a[i];
        }


        return ans;
        
    }
};",1454815281
Ayush Kamal,ayushkamal346,728,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& a, vector<vector<int>>& q) {

    vector<int> v1(a.size()+1,0);
        for(auto it:q){


           
            int u=it[0];
            int v=it[1];

            
             v1[u]++;
             v1[v+1]--;
            
        }

        for(int i=0; i<a.size();i++){

            if(i>0){
                v1[i]+=v1[i-1];
            }

            if(-v1[i]+a[i]>0)return false;
            
        }

        return true;
        
    }
};",1454825497
Ayush Kamal,ayushkamal346,728,3643,cpp,"#define ll long long

class Solution {
public:

bool check(vector<int> &a , vector<vector<int>> & q, int mid){
    if(mid>q.size())return -1;
    vector<int> v1(a.size()+1,0);
        for(int i=0 ;i<mid; i++){


           
            int u=q[i][0];
            int v=q[i][1];

            
             v1[u]+=q[i][2];
             v1[v+1]-=q[i][2];
            
        }

        for(int i=0; i<a.size();i++){

            if(i>0){
                v1[i]+=v1[i-1];
            }

            if(-v1[i]+a[i]>0)return false;
            
        }

        return true;
        
          

    
}


   ll bina(ll low, ll high,vector<int>& a, vector<vector<int>>& q )
{
    while (low <= high)
    {
        ll mid = low + (high - low) / 2;

        if (check(a,q,mid ))
            high = mid - 1;
        else
            low = mid + 1;
    }
    return low;
}
   
    
    int minZeroArray(vector<int>& a, vector<vector<int>>& q) {
        
       int ans=bina(0,q.size(),a,q);

        if(ans>q.size()){
            return -1;
        }

        
      return ans;

        
    }
};",1454840336
davindx88,davindx88,731,3616,golang,"
func countValidSelections(nums []int) int {
    retNum := 0
    for i, num := range nums {
        if num != 0 { continue }
        if simulateLeft(i, nums) {
            retNum++
        }
        if simulateRight(i, nums) {
            retNum++
        }
    }
    return retNum
}

func simulateLeft(idx int, nums []int) bool {
    arr := make([]int, len(nums))
    copy(arr, nums)
    
    inc := -1
    for idx >= 0 && idx < len(arr) {
        if arr[idx] != 0 {
            arr[idx]--
            inc *= -1
        } 
        idx += inc
    }

    for _, num := range arr {
        if num != 0 { return false }
    }
    return true
}

func simulateRight(idx int, nums []int) bool {
    arr := make([]int, len(nums))
    copy(arr, nums)
    
    inc := 1
    for idx >= 0 && idx < len(arr) {
        if arr[idx] != 0 {
            arr[idx]--
            inc *= -1
        } 
        idx += inc
    }

    for _, num := range arr {
        if num != 0 { return false }
    }
    return true
}",1454812119
davindx88,davindx88,731,3639,golang,"func isZeroArray(nums []int, queries [][]int) bool {
    incs := make([]int, len(nums))
    decs := make([]int, len(nums))

    for _, q := range queries {
        incs[q[0]]++
        decs[q[1]]++
    }

    acc := 0
    for i, num := range nums {
        acc += incs[i]
        if num - acc > 0 { return false }
        acc -= decs[i]
    }
    return true
}",1454819521
davindx88,davindx88,731,3643,golang,"func minZeroArray(nums []int, queries [][]int) int {
    left := 0
    right := len(queries)
    for left <= right { 
        mid := (left+right)/2
        if isZeroArray(nums, queries, mid) {
            if left == right { return mid }
            right = mid
        } else {
            left = mid + 1
        }
    }
    return -1
}

func isZeroArray(nums []int, queries [][]int, qMax int) bool {
    incs := make([]int, len(nums))
    decs := make([]int, len(nums))

    for _, q := range queries[:qMax] {
        incs[q[0]]+=q[2]
        decs[q[1]]+=q[2]
    }

    acc := 0
    for i, num := range nums {
        acc += incs[i]
        if num - acc > 0 { return false }
        acc -= decs[i]
    }
    return true
}",1454833053
Vaishnavi Lokhande,vaishnavi3891,734,3616,java,"class Solution {
    public int countValidSelections(int[] nums) {
        int n = nums.length;
        int validCount = 0;

        // Iterate through all possible starting positions
        for (int i = 0; i < n; i++) {
            if (nums[i] == 0) {
                // Simulate for both left and right directions
                if (simulate(nums.clone(), i, -1)) {
                    validCount++;
                }
                if (simulate(nums.clone(), i, 1)) {
                    validCount++;
                }
            }
        }

        return validCount;
    }
    private static boolean simulate(int[] nums, int curr, int direction) {
        int n = nums.length;

        while (curr >= 0 && curr < n) {
            if (nums[curr] == 0) {
                curr += direction;
            } else if (nums[curr] > 0) {
                nums[curr]--;
                direction = -direction;
                curr += direction;
            }
        }

        for (int num : nums) {
            if (num != 0) {
                return false;
            }
        }
        return true;
    }

}",1454823984
Vaishnavi Lokhande,vaishnavi3891,734,3639,java,"class Solution {
    static class SegmentTree {
        int[] segmentTree;
        int[] lazyUpdates;
        int size;

        public SegmentTree(int[] array) {
            this.size = array.length;
            this.segmentTree = new int[4 * size];
            this.lazyUpdates = new int[4 * size];
            buildTree(array, 0, 0, size - 1);
        }

        private void buildTree(int[] array, int nodeIndex, int rangeStart, int rangeEnd) {
            if (rangeStart == rangeEnd) {
                segmentTree[nodeIndex] = array[rangeStart];
            } else {
                int mid = (rangeStart + rangeEnd) / 2;
                buildTree(array, 2 * nodeIndex + 1, rangeStart, mid);
                buildTree(array, 2 * nodeIndex + 2, mid + 1, rangeEnd);
                segmentTree[nodeIndex] = Math.max(segmentTree[2 * nodeIndex + 1], segmentTree[2 * nodeIndex + 2]);
            }
        }

        private void propagateLazyUpdates(int nodeIndex, int rangeStart, int rangeEnd) {
            if (lazyUpdates[nodeIndex] != 0) {
                segmentTree[nodeIndex] -= lazyUpdates[nodeIndex];
                if (rangeStart != rangeEnd) {
                    lazyUpdates[2 * nodeIndex + 1] += lazyUpdates[nodeIndex];
                    lazyUpdates[2 * nodeIndex + 2] += lazyUpdates[nodeIndex];
                }
                lazyUpdates[nodeIndex] = 0;
            }
        }

        public void updateRange(int updateStart, int updateEnd, int decrementValue) {
            updateRange(0, 0, size - 1, updateStart, updateEnd, decrementValue);
        }

        private void updateRange(int nodeIndex, int rangeStart, int rangeEnd, int updateStart, int updateEnd, int decrementValue) {
            propagateLazyUpdates(nodeIndex, rangeStart, rangeEnd);

            if (rangeStart > updateEnd || rangeEnd < updateStart) return; // Out of range
            if (rangeStart >= updateStart && rangeEnd <= updateEnd) {
                lazyUpdates[nodeIndex] += decrementValue;
                propagateLazyUpdates(nodeIndex, rangeStart, rangeEnd);
                return;
            }

            int mid = (rangeStart + rangeEnd) / 2;
            updateRange(2 * nodeIndex + 1, rangeStart, mid, updateStart, updateEnd, decrementValue);
            updateRange(2 * nodeIndex + 2, mid + 1, rangeEnd, updateStart, updateEnd, decrementValue);
            segmentTree[nodeIndex] = Math.max(segmentTree[2 * nodeIndex + 1], segmentTree[2 * nodeIndex + 2]);
        }

        public int queryRange(int queryStart, int queryEnd) {
            return queryRange(0, 0, size - 1, queryStart, queryEnd);
        }

        private int queryRange(int nodeIndex, int rangeStart, int rangeEnd, int queryStart, int queryEnd) {
            propagateLazyUpdates(nodeIndex, rangeStart, rangeEnd);

            if (rangeStart > queryEnd || rangeEnd < queryStart) return 0; // Out of range
            if (rangeStart >= queryStart && rangeEnd <= queryEnd) {
                return segmentTree[nodeIndex];
            }

            int mid = (rangeStart + rangeEnd) / 2;
            int leftQuery = queryRange(2 * nodeIndex + 1, rangeStart, mid, queryStart, queryEnd);
            int rightQuery = queryRange(2 * nodeIndex + 2, mid + 1, rangeEnd, queryStart, queryEnd);
            return Math.max(leftQuery, rightQuery);
        }
    }
    
    public boolean isZeroArray(int[] nums, int[][] queries) {
         SegmentTree segmentTree = new SegmentTree(nums);

        for (int[] query : queries) {
            int startRange = query[0];
            int endRange = query[1];
            segmentTree.updateRange(startRange, endRange, 1);
        }

        for (int i = 0; i < nums.length; i++) {
            if (segmentTree.queryRange(i, i) > 0) {
                return false;
            }
        }

        return true;
    }
}
",1454831635
Vaishnavi Lokhande,vaishnavi3891,734,3643,java,"class Solution {
   public int minZeroArray(int[] nums, int[][] queries) {
        int low = 0, high = queries.length, result = -1;

        while (low <= high) {
            int mid = low + (high - low) / 2;

            if (canTransform(nums, queries, mid)) {
                result = mid;
                high = mid - 1; 
            } else {
                low = mid + 1; 
            }
        }

        return result;
    }

    private boolean canTransform(int[] nums, int[][] queries, int k) {
        int n = nums.length;
        int[] differenceArray = new int[n + 1]; 

        
        for (int i = 0; i < k; i++) {
            int li = queries[i][0];
            int ri = queries[i][1];
            int vali = queries[i][2];

           
            differenceArray[li] += vali;
            if (ri + 1 < n) {
                differenceArray[ri + 1] -= vali;
            }
        }

       
        int[] updatedNums = nums.clone();
        int currentDecrement = 0;

        for (int i = 0; i < n; i++) {
            currentDecrement += differenceArray[i];
            updatedNums[i] -= currentDecrement;

            
            if (updatedNums[i] > 0) {
                return false;
            }
        }

        return true;
    }

}",1454840585
kxl97,kxl97,736,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        res = 0
        n = len(nums)

        def countleft(curr, arr):
            dir = -1
            while curr >= 0 and curr < n:
                if arr[curr] == 0:
                    curr += dir
                else:
                    arr[curr] -= 1
                    dir *= -1
                    curr += dir

            for i in range(n):
                if arr[i] != 0:
                    return 0

            return 1

        def countright(curr, arr):
            dir = 1
            while curr >= 0 and curr < n:
                if arr[curr] == 0:
                    curr += dir
                else:
                    arr[curr] -= 1
                    dir *= -1
                    curr += dir

            for i in range(n):
                if arr[i] != 0:
                    return 0

            return 1
            
        
        for i in range(len(nums)):
            if nums[i] == 0:
                res += countleft(i, nums.copy())
                res += countright(i, nums.copy())

        return res",1454809850
kxl97,kxl97,736,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        n = len(nums)

        d = [0] * (n + 1)

        for l, r in queries:
            d[l] += 1
            if r + 1 < n:
                d[r + 1] -= 1

        c = 0
        for i in range(n):
            c += d[i]

            if (nums[i] > c):
                return False

        return True
        ",1454829373
kxl97,kxl97,736,3643,python3,"class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        n = len(nums)
        m = len(queries)

        def valid(k):
            d = [0] * (n + 1)
            for i in range(k):
                l, r, val = queries[i]
                d[l] += val
                if r + 1 < n:
                    d[r + 1] -= val

            c = 0
            for i in range(n):
                c += d[i]
                if c < nums[i]:
                    return False

            return True

        l, r = 0, m
        res = -1

        while (l <= r):
            mid = (l + r) // 2
            if valid(mid):
                r = mid - 1
                res = mid
            else:
                l = mid + 1

        return res
        ",1454840598
Xu Cao,yurikaka,737,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int ans = 0;
        for (int i = 0; i < nums.size(); ++i) {
            if (nums[i] != 0) continue;
            ans += go(nums,i,1);
            ans += go(nums,i,-1);
        }
        return ans;
    }

bool go(vector<int> a, int cur, int d) {
    while (cur >= 0 && cur < a.size()) {
        if (a[cur] == 0) {
            cur += d;
        }
        else {
            a[cur]--;
            d = -d;
            cur += d;
        }
    }
    bool res = true;
    for (int i: a)
        if (i > 0) 
            return false;
    return true;
}
};",1454810286
Xu Cao,yurikaka,737,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        vector<int> a(queries.size()), b(queries.size());
        for (int i = 0; i < queries.size(); ++i) {
            a[i] = queries[i][0];
            b[i] = queries[i][1];
        }
        sort(a.begin(), a.end());
        sort(b.begin(), b.end());
        int i = 0, j = 0, cur = 0;
        for (int k = 0; k < n; ++k) {
            while (i < a.size() && a[i] <= k) {
                    ++cur;
                    ++i;
            }
            while (j < b.size() && b[j] < k) {
                    --cur;
                    ++j;
            }
            if (nums[k] > cur)
                return false;
        }
        return true;
    }
};",1454826596
Xu Cao,yurikaka,737,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        if (!go(nums,queries,queries.size()))
            return -1;
        int left = 0, right = queries.size();
        while (left < right) {
            int mid = left + (right - left) / 2;
            if (go(nums,queries, mid)) {
                right = mid;
            }
            else {
                left = mid+1;
            }
        }
        return right;
    }

    bool go(vector<int>& nums, vector<vector<int>>& queries, int kk) {
        int n = nums.size();
        vector<pair<int,int>> a(kk), b(kk);
        for (int i = 0; i < kk; ++i) {
            a[i] = make_pair(queries[i][0], queries[i][2]);
            b[i] = make_pair(queries[i][1], queries[i][2]);
        }
        sort(a.begin(), a.end());
        sort(b.begin(), b.end());
        int i = 0, j = 0, cur = 0;
        for (int k = 0; k < n; ++k) {
            while (i < kk && a[i].first <= k) {
                cur += a[i].second;
                ++i;
            }
            while (j < kk && b[j].first < k) {
                cur -= b[j].second;
                ++j;
            }
            if (nums[k] > cur)
                return false;
        }
        return true;
    }
};
",1454840611
Pradeep Suryavanshi,pradeep1210,740,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int n = nums.size();
        int validSelections = 0;

        auto simulate = [&](int start, int direction) {
            vector<int> temp = nums;
            int curr = start;

            while (curr >= 0 && curr < n) {
                if (temp[curr] == 0) {
                    curr += direction;
                } else {
                    temp[curr]--;
                    direction = -direction;
                    curr += direction;
                }
            }

            for (int num : temp) {
                if (num != 0) return false;
            }
            return true;
        };

        for (int i = 0; i < n; ++i) {
            if (nums[i] == 0) {
                if (simulate(i, 1)) validSelections++;
                if (simulate(i, -1)) validSelections++;
            }
        }

        return validSelections;
    }
};
",1454821712
Pradeep Suryavanshi,pradeep1210,740,3639,java,"class Solution {
    public boolean isZeroArray(int[] arr, int[][] q) {
        int n = arr.length;
        int[] diff = new int[n + 1];

        for (int[] query : q) {
            int start = query[0], end = query[1];
            diff[start]--;
            if (end + 1 < n) {
                diff[end + 1]++;
            }
        }

        int dec = 0;
        for (int i = 0; i < n; i++) {
            dec += diff[i];
            arr[i] += dec;
            if (arr[i] > 0) {
                return false;
            }
        }

        return true;
    }
}
",1454840732
Pradeep Suryavanshi,pradeep1210,740,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& A, vector<vector<int>>& B) {
        int n = A.size();
        int m = B.size();
        
        auto canMakeZero = [&](int k) {
            vector<int> diff(n + 1, 0);
            
            for (int i = 0; i < k; ++i) {
                int l = B[i][0], r = B[i][1], val = B[i][2];
                diff[l] += val;
                if (r + 1 < n) diff[r + 1] -= val;
            }
            
            int total = 0;
            for (int i = 0; i < n; ++i) {
                total += diff[i];
                if (total < A[i]) return false;
            }
            return true;
        };
        
        int left = 0, right = m;
        int res = -1;
        
        while (left <= right) {
            int mid = (left + right) / 2;
            if (canMakeZero(mid)) {
                res = mid;
                right = mid - 1;
            } else {
                left = mid + 1;
            }
        }
        
        return res;
    }
};
",1454848084
Prudhvi Raj Baki,prudhvi300,742,3616,cpp,"#include <vector>
#include <algorithm>
using namespace std;

class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        #define ST(nums, i) (nums[i] == 0)
        #define TO_ZERO(nums) (all_of(nums.begin(), nums.end(), [](int x) { return x == 0; }))
        #define CHANGE(curr, dir) (curr += dir)
        #define BACK_DIR(dir) (dir = -dir)

        int n = nums.size();
        int possibilities = 0;

        auto TRUE = [&](int st, int dir) {
            vector<int> temp(nums); 
            int curr = st;

            while (curr >= 0 && curr < n) {
                if (temp[curr] == 0) {
                    CHANGE(curr, dir); 
                } else {
                    temp[curr]--;     
                    BACK_DIR(dir);     
                    CHANGE(curr, dir); 
                }
            }

            return TO_ZERO(temp);
        };

        for (int i = 0; i < n; i++) {
            if (ST(nums, i)) {
                if (TRUE(i, -1)) possibilities++;
                if (TRUE(i, 1)) possibilities++;  
            }
        }

        return possibilities;
    }
};
",1454815075
Prudhvi Raj Baki,prudhvi300,742,3639,cpp,"#include <vector>
using namespace std;

#define s(y) ((int)(y).size())
#define Auto(x, y) for (auto& x : y)
#define FOR(i, n) for (int i = 0; i < (n); i++)
#define diffMod(i, j, differ, z) \
    differ[i]--; \
    if ((j) + 1 < (z)) differ[(j) + 1]++;

class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = s(nums);
        vector<int> differ(n + 1, 0); 

        Auto(q, queries) {
            int i = q[0], j = q[1];
            diffMod(i, j, differ, n); 
        }

        int Dec = 0;
        FOR(i, n) {
            Dec += differ[i];  
            nums[i] += Dec;    
            if (nums[i] > 0) return false; 
        }

        return true; 
    }
};
",1454834503
Prudhvi Raj Baki,prudhvi300,742,3643,cpp,"#include <vector>
#include <algorithm>
using namespace std;

#define s(z) ((int)(z).size())
#define Auto(y, z) for (auto& y : z)
#define FOR(i, n) for (int i = 0; i < (n); i++)
#define diffMod(i, j, differ, z, el) \
    differ[i] += el; \
    if ((j) + 1 < (z)) differ[(j) + 1] -= el;

class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = s(nums);
        vector<int> cur = nums;
        vector<int> zeroArr;

        if (all_of(cur.begin(), cur.end(), [](int x) { return x == 0; })) {
            zeroArr = cur;
            return 0;
        }

        auto willZero = [&](int k) -> bool {
            vector<int> differ(n + 1, 0);

            FOR(i, k) {
                int l = queries[i][0], r = queries[i][1], val = queries[i][2];
                diffMod(l, r, differ, n, val);
            }

            int res = 0;
            FOR(i, n) {
                res += differ[i];
                if (res < cur[i]) {
                    return false;
                }
            }
            return true;
        };

        int l = 0, r = s(queries);
        int ans = -1;
        bool midPlace = false;

        while (l <= r) {
            int mid = (l + r) / 2;

            if (willZero(mid)) {
                ans = mid;
                r = mid - 1;
            } else {
                l = mid + 1;
            }

            if (!midPlace && mid == s(queries) / 2) {
                vector<int> differ(n + 1, 0);
                FOR(i, mid) {
                    int l = queries[i][0], r = queries[i][1], val = queries[i][2];
                    diffMod(l, r, differ, n, val);
                }

                zeroArr = cur;
                int res = 0;
                FOR(i, n) {
                    res += differ[i];
                    zeroArr[i] = max(0, cur[i] - res);
                }
                midPlace = true;
            }
        }

        return ans != -1 ? ans : -1;
    }
};
",1454848154
aannya30,aannya30,744,3616,java,"class Solution {
    public int countValidSelections(int[] nums) {
        int validCount = 0;
        int arraySize = nums.length;

        // Iterate through each starting position where nums[position] == 0
        for (int start = 0; start < arraySize; start++) {
            if (nums[start] == 0) {
                // Check both movement directions (right = true, left = false)
                if (navigate(start, true, nums.clone())) {
                    validCount++;
                }
                if (navigate(start, false, nums.clone())) {
                    validCount++;
                }
            }
        }

        return validCount;
    }

    // Helper method to perform navigation
    private boolean navigate(int startIndex, boolean moveForward, int[] arrayCopy) {
        int currentPosition = startIndex;
        int totalElements = arrayCopy.length;

        while (currentPosition >= 0 && currentPosition < totalElements) {
            if (arrayCopy[currentPosition] == 0) {
                // Move in the current direction
                currentPosition = moveForward ? currentPosition + 1 : currentPosition - 1;
            } else {
                // Decrease the value
                arrayCopy[currentPosition]--;
                // Reverse the movement direction
                moveForward = !moveForward;
                // Move in the new direction
                currentPosition = moveForward ? currentPosition + 1 : currentPosition - 1;
            }
        }

        // Check if all elements are zero
        for (int element : arrayCopy) {
            if (element != 0) {
                return false;
            }
        }

        return true;
    }
}
",1454843161
aannya30,aannya30,744,3639,java,"class Solution {
    public boolean isZeroArray(int[] nums, int[][] queries) {
        int size = nums.length;
        int[] differences = new int[size + 1];

        // Apply all queries to the difference array
        for (int[] query : queries) {
            int start = query[0];
            int end = query[1];
            differences[start] += 1;
            if (end + 1 < size) {
                differences[end + 1] -= 1;
            }
        }

        // Compute prefix sums to get coverage counts
        int runningSum = 0;
        for (int index = 0; index < size; index++) {
            runningSum += differences[index];
            if (runningSum < nums[index]) {
                return false;
            }
        }
        return true;
    }
}
",1454845674
aannya30,aannya30,744,3643,java,"class Solution {
    public int minZeroArray(int[] nums, int[][] queries) {
        int left = 0, right = queries.length;
        int result = -1;

        while (left <= right) {
            int mid = left + (right - left) / 2;
            if (isPossible(mid, nums, queries)) {
                result = mid;
                right = mid - 1;
            } else {
                left = mid + 1;
            }
        }
        return result;
    }

    private boolean isPossible(int operations, int[] nums, int[][] queries) {
        int size = nums.length;
        long[] differences = new long[size + 1];

        // Apply the first 'operations' queries to the difference array
        for (int i = 0; i < operations; i++) {
            int start = queries[i][0];
            int end = queries[i][1];
            int value = queries[i][2];
            differences[start] += value;
            if (end + 1 < size) {
                differences[end + 1] -= value;
            }
        }

        // Compute prefix sums and validate
        long cumulativeSum = 0;
        for (int index = 0; index < size; index++) {
            cumulativeSum += differences[index];
            if (cumulativeSum < nums[index]) {
                return false;
            }
        }
        return true;
    }
}
",1454848264
Sumit Patil,Sumit__Patil,746,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {

        int n=nums.size();
        vector<int>pre(n+1,0);
        for(int i=0;i<n;i++)
            {
                pre[i+1]=pre[i]+nums[i];
            }
int ans=0;


    
        for(int i=0;i<nums.size();i++)
            {
                if(nums[i]==0)
                {
                   
                    if(pre[n]==2*pre[i+1])
                    {
                        ans=ans+2;
                    }
                    else if(pre[n]-pre[i+1]-1==pre[i+1])
                    {
                        ans++;
                    }
                    else if(pre[n]-pre[i+1]==pre[i+1]-1)
                {
ans++;
                }
                }
            }

        return ans;
        
    }
};",1454816948
Sumit Patil,Sumit__Patil,746,3639,cpp,"class Solution {
public:

bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
    int n = nums.size();
    vector<int> diff(n + 1, 0); // Difference array to track query coverage

    // Build the difference array from queries
    for (const auto& query : queries) {
        int li = query[0], ri = query[1];
        diff[li]++;
        if (ri + 1 < n) {
            diff[ri + 1]--;
        }
    }

    // Calculate the coverage array
    vector<int> coverage(n, 0);
    coverage[0] = diff[0];
    for (int i = 1; i < n; ++i) {
        coverage[i] = coverage[i - 1] + diff[i];
    }

    // Validate if nums[i] can be decremented to zero
    for (int i = 0; i < n; ++i) {
        if (nums[i] > coverage[i]) {
            return false;
        }
    }

    return true;
}

};",1454827793
Sumit Patil,Sumit__Patil,746,3643,cpp,"class Solution {
public:


bool isZeroArray(vector<int>& nums, const vector<vector<int>>& queries, int k) {
    int n = nums.size();
    vector<int> diff(n + 1, 0);
    vector<long long> current(nums.begin(), nums.end());

    for (int i = 0; i < k; ++i) {
        int li = queries[i][0], ri = queries[i][1], vali = queries[i][2];
        diff[li] += vali;
        if (ri + 1 < n) {
            diff[ri + 1] -= vali;
        }
    }

    long long decrement = 0;
    for (int i = 0; i < n; ++i) {
        decrement += diff[i];
        current[i] = max(0LL, current[i] - decrement);
    }

    return all_of(current.begin(), current.end(), [](long long x) { return x == 0; });
}

int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
    int left = 0, right = queries.size();
    int result = -1;

    while (left <= right) {
        int mid = left + (right - left) / 2;
        if (isZeroArray(nums, queries, mid)) {
            result = mid;
            right = mid - 1;
        } else {
            left = mid + 1;
        }
    }

    return result;
}


};",1454840906
Shashank Jaiswal,jaisw7,747,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int N=nums.size(), total=0;

        auto move = [&](int i, int dir) {
            auto temp = nums;

            while(i>=0 && i<N) {
                if(temp[i]==0) {
                    if(dir > 0) { ++i; }
                    else { --i; }
                }
                else if(temp[i]>0) {
                    --temp[i];
                    dir = dir>0 ? -1 : 1;

                    if(dir==1 && i==N-1) { break; }
                    else if(dir==1 && i!=N-1) { ++i; }
                    else if(dir==-1 && i==0) { break; }
                    else if(dir==-1 && i!=0) { --i; }
                }
            }

            return count(begin(temp), end(temp), 0) == N;
        };
        
        for(int i=0; i<N; ++i) {
            if(nums[i] == 0) {
                total += move(i, 1);
                total += move(i, -1);
            }
        }
        return total;
    }
};",1454812099
Shashank Jaiswal,jaisw7,747,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int N = nums.size();
        vector<int> mark(N+2, 0);
        for(auto& q: queries) {
            mark[q[0]] -= 1;
            mark[q[1]+1] += 1;
        }

        partial_sum(begin(mark), end(mark), begin(mark));

        for(int i=0; i<N; ++i) {
            if(nums[i]+mark[i]>0) { return false; }
        }
        return true;
    }
};",1454821251
Shashank Jaiswal,jaisw7,747,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int N = nums.size();
        int M = queries.size();

        auto valid = [&](int m) {
            vector<int> mark(N+2, 0);
            
            for(int j=0; j<m; ++j) {
                auto& q = queries[j];
                mark[q[0]] -= q[2];
                mark[q[1]+1] += q[2];
            }
    
            partial_sum(begin(mark), end(mark), begin(mark));
    
            for(int i=0; i<N; ++i) {
                if(nums[i]+mark[i]>0) { return false; }
            }
            return true;
        };

        int l=0, r=M, ret=-1;
        while(l<=r) {
            int m = midpoint(l, r);
            valid(m) ? (r=m-1, ret=m) : (l=m+1);
        }

        return ret;        
    }
};",1454840956
Divyanshu Agarwal,Divyanshuagarwal23,750,3616,java,"class Solution {
    public int countValidSelections(int[] nums) {
        int count = 0;
        int n = nums.length;
        for (int i = 0; i < n; i++) {
            if(nums[i]!=0){
                continue;
            }
            int[] temp = nums.clone();
            if (solve(temp, i, false, n)) {
                count++;
            }
            temp = nums.clone();
            if (solve(temp, i, true, n)) {
                count++;
            }
        }
        return count;
    }

    public boolean solve(int[] temp, int j, boolean left, int n) {
        while (j >= 0 && j < n) {
            if (temp[j] == 0 && left) {
                j--;
                continue;
            }
            if (temp[j] == 0 && !left) {
                j++;
                continue;
            }
            if (temp[j] != 0 && left) {
                temp[j] -= 1;
                j++;
                left = false;
                continue;
            }
            if (temp[j] != 0 && !left) {
                temp[j] -= 1;
                j--;
                left = true;
                continue;
            }
        }
        for (int i = 0; i < n; i++) {
            if (temp[i] != 0) {
                return false;
            }
        }
        return true;
    }
}
",1454818064
Divyanshu Agarwal,Divyanshuagarwal23,750,3639,java,"class Solution {
    public boolean isZeroArray(int[] nums, int[][] queries) {
        int n = nums.length;
        int[] power = new int[n+1];
        int m = queries.length;
        for(int i = 0;i<m;i++){
            int l = queries[i][0];
            int r = queries[i][1];
            power[l] +=1;
            power[r+1] -=1;
        }
        for(int i = 1;i<n;i++){
            power[i] += power[i-1];
        }
        for(int i = 0;i<nums.length;i++){
            if(nums[i] > power[i]){
                return false;
            }
        }
        return true;
    }
}",1454825948
Divyanshu Agarwal,Divyanshuagarwal23,750,3643,java,"class Solution {
    public int minZeroArray(int[] nums, int[][] queries) {
        int n = nums.length;
        int m = queries.length;
        int low = 0;
        int high = m-1;
        int ans = -1;
        boolean flag = false;
        for(int i = 0;i<nums.length;i++){
            if(nums[i] != 0){
               flag = true;
            }
        }
        if(!flag){
            return 0;
        }
        while(low<=high){
            int mid = (low+high)/2;
            if(solve(nums,queries,mid)){
                ans = mid;
                high = mid-1;
            }else{
                low = mid+1;
            }
        }
        if(ans==-1){
            return -1;
        }
        return ans+1;
    }
    public boolean solve(int[] nums, int[][] queries, int k){
        int n = nums.length;
        int[] power = new int[n+1];
        int m = queries.length;
        for(int i = 0;i<=k;i++){
            int l = queries[i][0];
            int r = queries[i][1];
            int val = queries[i][2];
            power[l] +=val;
            power[r+1] -=val;
        }
    
        for(int i = 1;i<n;i++){
            power[i] += power[i-1];
        }
        // if(k==1){
        //     for(int i = 0;i<n;i++){
        //         System.out.print(power[i]+"" "");
        //     }
        // }
        for(int i = 0;i<nums.length;i++){
            if(nums[i] > power[i]){
                return false;
            }
        }
        return true;
    }
}",1454840979
Rushendra_04,Rushendra_04,751,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int n=nums.size();
        vector<int> pr(n,0),sx(n,0);
        pr[0]=nums[0];
        for(int i=1;i<n;i++){
            pr[i]=nums[i]+pr[i-1];
        }
        sx[n-1]=nums[n-1];
        for(int i=n-2;i>=0;i--){
            sx[i]=nums[i]+sx[i+1];
        }
        int ans=0;
        for(int i=0;i<n;i++){
            if(nums[i]==0 && (pr[i]==sx[i])){
                ans+=2;
            }
            else if(nums[i]==0 && (abs(pr[i]-sx[i])==1)) ans+=1;
        }
        return ans;
    }
};",1454812066
Rushendra_04,Rushendra_04,751,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& q) {
        int n=nums.size();
        vector<int> res(n+1,0);
        for(int i=0;i<q.size();i++){
            int x=q[i][0],y=q[i][1];
            res[x]++;
            res[y+1]--;
        }
        for(int i=1;i<n;i++){
            res[i]+=res[i-1];
        }
        for(int i=0;i<n;i++){
            if(res[i]<nums[i]) return false;
        }
        return true;
    }
};",1454820202
Rushendra_04,Rushendra_04,751,3643,cpp,"class Solution {
public:
    bool solve(vector<int>& nums, vector<vector<int>>& q,int m){
        int n=nums.size();
        vector<int> res(n+1,0);
        for(int i=0;i<=m;i++){
            int x=q[i][0],y=q[i][1],z=q[i][2];
            res[x]+=z;
            res[y+1]-=z;
        }
        for(int i=1;i<n;i++){
            res[i]+=res[i-1];
        }
        for(int i=0;i<n;i++){
            if(res[i]<nums[i]) return false;
        }
        return true;
    }
    int minZeroArray(vector<int>& nums, vector<vector<int>>& q) {
         int n=nums.size();
        int cnt=0;
        for(int i=0;i<n;i++){
            if(nums[i]==0) cnt++;
        }
        if(cnt==n) return 0;
        int l=0,h=q.size()-1,ans=-1;
        while(l<=h){
            int mid=(l+h)/2;
            if(solve(nums,q,mid)){
                ans=mid;
                h=mid-1;
            }
            else{
                l=mid+1;
            }
        }
        // cout<<ans<<endl;
        return ans==-1?ans:ans+1;
    }
};",1454833669
FightEveryDay,FightEveryDay,752,3616,java,"class Solution {
    public int countValidSelections(int[] nums) {
        int res = 0;
        int n = nums.length;
        for (int i = 0; i < n; i++) {
            int[] nn = Arrays.copyOf(nums, n);
            if (nums[i] != 0) continue;
            if (check(nn, i, -1)) {
                // System.out.println(i + "" "" + -1);
                res++;
            }
            nn = Arrays.copyOf(nums, n);
            if (check(nn, i, 1)) {
                // System.out.println(i + "" "" + 1);
                res++;
            }
        }
        return res;
    }
    private boolean isZero(int[] nums) {
        for (int n : nums) {
            if (n != 0) return false;
        }
        return true;
    }

    private boolean check(int[] nums, int index, int dir) {
        if (isZero(nums)) {
            return true;
        }
        if (index >= nums.length || index < 0) {
            return false;
        }
        if (nums[index] == 0) {
            return check(nums, index + dir, dir);
        } else {
            nums[index] -= 1;
            return check(nums, index - dir, -dir);
        }
    }
}",1454811664
FightEveryDay,FightEveryDay,752,3639,java,"class Solution {
    /*
    [0, 1, 1, 1]
    [1, 2, 2, 1]
    */
    public boolean isZeroArray(int[] nums, int[][] Q) {
        int n = nums.length;
        int[] dp = new int[n + 1];
        for (int[] q : Q) {
            int left = q[0], right = q[1];
            dp[left] += 1;
            dp[right + 1] -= 1;
        }
        int cur = 0;
        int[] newArr = new int[n];
        for (int i = 0; i < n; i++) {
            cur += dp[i];
            newArr[i] = cur;
            // System.out.println(newArr[i]);
        }
        for (int i = 0; i < n; i++) {
            if (nums[i] > newArr[i]) {
                return false;
            }
        }
        return true;
    }
}",1454823219
FightEveryDay,FightEveryDay,752,3643,java,"class Solution {
    
    /*
[5]
[[0,0,5],[0,0,1],[0,0,3],[0,0,2]]
1

[0]
[[0,0,2],[0,0,4],[0,0,4],[0,0,3],[0,0,5]]
    */
    private boolean isZero(int[] nums) {
        for (int n : nums) {
            if (n != 0) return false;
        }
        return true;
    }
    public int minZeroArray(int[] nums, int[][] Q) {
        int n = Q.length;
        if (isZero(nums)) {
            return 0;
        }
        if (!check(nums, Q, n - 1)) {
            return -1;
        }
        int left = 0, right = n - 1;
        while (left < right) {
            int mid = left + (right - left) / 2;
            if (check(nums, Q, mid)) {
                right = mid;
            } else {
                left = mid + 1;
            }
        }
        return left + 1;
    }
    
    public boolean check(int[] nums, int[][] Q, int index) {
        int n = nums.length;
        int[] dp = new int[n + 1];
        for (int i = 0; i <= index; i++) {
            int[] q = Q[i];
            int left = q[0], right = q[1];
            dp[left] += q[2];
            dp[right + 1] -= q[2];
        }
        int cur = 0;
        int[] newArr = new int[n];
        for (int i = 0; i < n; i++) {
            cur += dp[i];
            newArr[i] = cur;
        }
        for (int i = 0; i < n; i++) {
            if (nums[i] > newArr[i]) {
                return false;
            }
        }
        return true;
    }
}",1454833670
Ashiq,Ashiq_S,754,3616,cpp,"class Solution {
public:
bool works(vector<int> v, int start, int dir) {
        int n = v.size();
        int curr = start;
    
        while (curr >= 0 && curr < n) {
            if (v[curr] == 0) {
                curr += dir; 
            } else {
                v[curr]--; 
                dir *= -1;
                curr += dir;
            }
        }
        for (int num : v) {
            if (num != 0) {
                return false;
            }
        }
        return true;
    }
    int countValidSelections(vector<int>& v) {
        int n = v.size();
        int count = 0;
        
        for (int i = 0; i < n; ++i) {
            if (v[i] == 0) {
                if (works(v, i, -1)) {
                    count++;
                }
                if (works(v, i, 1)) {
                    count++;
                }
            }
        }
        return count;
    }
};",1454808072
Ashiq,Ashiq_S,754,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& v, vector<vector<int>>& q) {
        vector<int> pref(v.size() + 1);
        for (auto t : q) {
            pref[t[0]]++;
            pref[t[1] + 1]--;
        }
        for (int i = 1; i <= v.size(); ++i) {
            pref[i] += pref[i-1];
        }
        for (int i = 0; i < v.size(); ++i) {
            if (v[i] - pref[i] > 0) {
                return false;
            }
        }
        return true;
    }
};",1454812612
Ashiq,Ashiq_S,754,3643,cpp,"class Solution {
    vector<int> pref;
public:
    bool works(vector<int>& v, vector<vector<int>>& q, int k) {
        int n = v.size();
        fill(pref.begin(), pref.end(), 0);
        
        for (int i = 0; i < k; ++i) {
            int l = q[i][0];
            int r = q[i][1];
            int val = q[i][2];
            
            pref[l] += val;
            if (r + 1 < n) {
                pref[r + 1] -= val;
            }
        }
        for (int i = 1; i < n; ++i) {
            pref[i] += pref[i - 1];
        }

        for (int i = 0; i < n; ++i) {
            if (v[i] > pref[i]) {
                return false;
            }
        }
        return true;
    }

    int minZeroArray(vector<int>& v, vector<vector<int>>& q) {
        int n = v.size();
        pref.resize(n + 1);
        int left = 1, right = q.size();
        int answer = -1;
        int z = 0;
        for (int i : v) {
            if (i > 0) 
                z += 1;
        }
        if (z == 0) {
            return 0;
        }

        while (left <= right) {
            int mid = left + (right - left) / 2;
            if (works(v, q, mid)) {
                answer = mid;
                right = mid - 1;
            } else {
                left = mid + 1;
            }
        }

        return answer;
    }
};
",1454833850
Ngoc-Cuong Nguyen,ngoccuongpvc,756,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        def is_valid(cur, movement):
            arr = nums.copy()

            # print('Start', cur, movement)

            while True:
                # print(arr, cur, movement)
                if cur < 0 or cur == len(arr):
                    break

                if arr[cur] == 0:
                    cur += movement
                else:
                    arr[cur] -= 1
                    movement *= -1
                    cur += movement

            for i in range(len(arr)):
                if arr[i] > 0:
                    return False
            return True
                

        res = 0
        for i in range(len(nums)):
            if nums[i] == 0:
                if is_valid(i, -1):
                    res += 1
                if is_valid(i, 1):
                    res += 1
        return res",1454812239
Ngoc-Cuong Nguyen,ngoccuongpvc,756,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        n = len(nums)
        
        prefix_sum = [0] * (n+1)

        for query in queries:
            prefix_sum[query[0]] += 1
            prefix_sum[query[1]+1] -= 1

        prev = 0
        for i in range(0, n):
            prefix_sum[i] += prev
            prev = prefix_sum[i]

            if prefix_sum[i] < nums[i]:
                return False
        print(prefix_sum)
        return True

        ",1454821168
Ngoc-Cuong Nguyen,ngoccuongpvc,756,3643,python3,"class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        res = -1
        n = len(nums)

        def is_ok(k):
            prefix_sum = [0] * (n+1)
            for i in range(k):
                query = queries[i]
                prefix_sum[query[0]] += query[2]
                prefix_sum[query[1]+1] -= query[2]

            prev = 0
            for i in range(n):
                prefix_sum[i] += prev
                prev = prefix_sum[i]

                if prefix_sum[i] < nums[i]:
                    return False
            return True

        l = 0
        r = len(queries)
        while l <= r:
            k = (l + r) // 2
            if is_ok(k):
                res = k
                r = k - 1
            else:
                l = k + 1
        return res",1454833893
AAR,amruteswar,760,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int ans = 0;
        for (int i = 0; i < nums.size(); i++) {
            vector<int> v = nums;
            if (nums[i] != 0) continue;
            int curr = i;
            int f = 0;

            while (curr >= 0 && curr < nums.size()) {
                if (v[curr] == 0) {
                    if (f == 0) curr--;
                    else curr++;
                } else if (v[curr] > 0) {
                    v[curr]--;
                    if (f == 0) {
                        f = 1;
                        curr++;
                    } else {
                        f = 0;
                        curr--;
                    }
                }
            }

            int flag = 1;
            for (auto it : v) {
                if (it) flag = 0;
            }
            ans += flag;

            v = nums;
            f = 1;
            curr = i;

            while (curr >= 0 && curr < nums.size()) {
                if (v[curr] == 0) {
                    if (f == 0) curr--;
                    else curr++;
                } else if (v[curr] > 0) {
                     v[curr]--;
                    if (f == 0) {
                        f = 1;
                        curr++;
                    } else {
                        f = 0;
                        curr--;
                    }
                }
            }

            flag = 1;
            for (auto it : v) {
                if (it) flag = 0;
            }
            ans += flag;
        }
        return ans;
    }
};
",1454814439
AAR,amruteswar,760,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& q) {
        int n = nums.size();
        vector<int> pref(n,0);
        for(auto it: q){
            pref[it[0]] += 1;
            if(it[1] + 1 < n)  pref[it[1] + 1] -= 1;
        }
        for(int i = 1;i < n;i++){
            pref[i] += pref[i - 1];
        }
        for(int i = 0; i < n;i++){
            if(nums[i] > pref[i]) return 0;
        }
        return 1;
    }
};",1454819706
AAR,amruteswar,760,3643,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& pref, vector<int>& nums, vector<vector<int>>& q) {
        int n = pref.size();
        for (int i = 1; i < n; i++) {
            pref[i] += pref[i - 1];
        }
        for (int i = 0; i < n; i++) {
            if (nums[i] > pref[i]) return false;
        }
        return true;
    }

    int minZeroArray(vector<int>& nums, vector<vector<int>>& q) {
        int ans = -1;
        int low = 0, high = q.size();
        while (low <= high) {
            int mid = (low + high) / 2;
            int n = nums.size();
            vector<int> pref(n, 0);
            for (int i = 0; i < mid; i++) {
                pref[q[i][0]] += q[i][2];
                if (q[i][1] + 1 < n) pref[q[i][1] + 1] -= q[i][2];
            }
           // cout << isZeroArray(pref,nums,q) << endl;
            if (isZeroArray(pref, nums, q)) {
                ans = mid;
                high = mid - 1;
            } else {
                low = mid + 1;
            }
        }
        return ans;
    }
};
",1454841383
SATYAJEET,nipun753,761,3616,java,"class Solution {
    public int countValidSelections(int[] nums) {
       int tot =0; 
        int n = nums.length;
        for (int i = 0 ; i < n ; i++){
            tot = tot + nums[i];
        }
        
        int prefix = 0;
        int cnt = 0;
        for (int i = 0 ;i < n ; i++){
            if (tot - prefix==prefix && nums[i]==0)
                cnt = cnt + 2;
            if (nums[i]==0 && Math.abs(tot - 2*prefix)==1)
                cnt = cnt + 1;
            prefix+=nums[i];
        }
        
        return cnt;
    }
}",1454809784
SATYAJEET,nipun753,761,3639,java,"class Solution {
    public boolean isZeroArray(int[] nums, int[][] queries) {
        int n = nums.length;
        int[] prefix = new int[n + 3]; 
        
        for (int[] q : queries){
            int l = q[0]+1;
            int r = q[1]+1;
            prefix[l]++;
            prefix[r+1]--;
        }
        for (int i = 1 ;i <=n; i++){
            prefix[i]+=prefix[i - 1];
        }
        

        for (int i = 1 ; i<=n ; i++){
            if (nums[i - 1]>prefix[i])
                    return false;
        }
        return true;
        
        
    }
}",1454821333
SATYAJEET,nipun753,761,3643,java,"class Solution {
    public boolean ispossible(int[] nums , int[][] queries , int idx){
        int n = nums.length;
        
        int[]prefix = new int[n + 3];
        
        for (int i = 0 ;i <=idx ; i++){
            int l = queries[i][0] + 1;
            int r = queries[i][1] + 1;
            int val = queries[i][2];
            prefix[l]+=val;
            prefix[r+1]-=val;
        }
        
        for (int i = 1 ; i<=n ;i++){
            prefix[i]+=prefix[i - 1];
        }
        
        for (int i = 1 ; i<=n; i++){
          //  System.out.println(prefix[i] + "" "" + nums[i - 1] + "" "" + idx);
            if (prefix[i] < nums[i - 1])
                return false;
        }
        return true;
    }
    public int minZeroArray(int[] nums, int[][] queries) {
        int l = 0 , r = queries.length - 1;
        int ans = -1;
        int tot= 0;
        for (int i = 0 ; i < nums.length ; i++)
            tot= tot + nums[i];
        if (tot==0)
            return 0;
        
        while(l<=r){
            int mid = (l + r)/2;
            if (ispossible(nums , queries , mid)){
                ans = mid;
                r = mid - 1;
            }
            else
                l = mid + 1;
        }
        
        if (ans==-1)
            return -1;
        return ans + 1;
        
    }
}",1454834100
Dominater,Yogi_Adityanath,762,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        
        int pref = 0,suff = 0;
        for(auto i : nums) suff += i;
        int ans = 0;
        for(int i = 0; i < nums.size(); i++)
        {
            if(nums[i] == 0)
            {
                if(pref == suff) ans += 2;
                else if(abs(pref - suff) == 1) ans++;
            }
            pref += nums[i];
            suff -= nums[i];
        }
        return ans;
        
    }
};",1454821245
Dominater,Yogi_Adityanath,762,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        vector<int> cnt(nums.size() + 1,0);
        int q = queries.size(),i = 0;
        while(q--)
        {
            int l = queries[i][0],r = queries[i][1];
            cnt[l]++,cnt[r + 1]--;
            i++;
        }
        for(int i = 1; i < cnt.size(); i++)
        {
            cnt[i] += cnt[i - 1];
        }
        for(int i = 0; i < nums.size(); i++){
            if(nums[i] > cnt[i]) {
                return false;
            }
        }
        return true;
        
    }
};",1454817834
Dominater,Yogi_Adityanath,762,3643,cpp,"class Solution {
public:
    bool check(vector<int>& nums, vector<vector<int>>& queries,int k){
        vector<int> cnt(nums.size() + 1,0);
        int q = k,i = 0;
        while(q--)
        {
            int l = queries[i][0],r = queries[i][1],val = queries[i][2];
            cnt[l]+= val,cnt[r + 1]-= val;
            i++;
        }
        for(int i = 1; i < cnt.size(); i++)
        {
            cnt[i] += cnt[i - 1];
        }
        for(int i = 0; i < nums.size(); i++){
            if(nums[i] > cnt[i]) {
                return false;
            }
        }
        return true;
    }
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        
        int s = 0,e = queries.size(),ans = -1;
        // cout <<check(nums,queries,2) << endl;
        // return 0;
        while(s <= e)
        {
            int mid = s + (e - s)/2;
            if(check(nums,queries,mid))
            {
                ans = mid;
                e = mid - 1;
            }
            else 
            {
                s = mid + 1;
            }
        }
        return ans;
        
        
    }
};",1454841415
Manojkumar P,manojkumar2412,765,3616,cpp,"class Solution {
public:
    bool is_valid(vector<int> nums,int pos, int dir ){
        int itr=10;
        while(pos>=0 and pos<nums.size()){
            if(nums[pos]!=0){
                nums[pos]--;
                dir*=-1;
                pos += dir;
            }
            else pos+=dir;
            // cout<<pos<<"" ""<<dir<<endl;
            // itr--;
            // if(itr==0){
            //     break;
            // }
        }
        for(int i: nums){
            if(i!=0)return false;
        }
        return true;
    }
    int countValidSelections(vector<int>& nums) {
        int res=0;
        for(int i=0;i<nums.size();i++){
            if(nums[i]==0){
                res += is_valid(nums, i, 1);
                res += is_valid(nums, i, -1);
            }
        }
        return res;
    }
};",1454813382
Manojkumar P,manojkumar2412,765,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n=nums.size();
        vector<int> sweep(n+1);

        for(vector<int> q: queries){
            sweep[q[0]]++;
            sweep[q[1]+1]--;
        }
        
        for(int i=0;i<n;i++){
            if(i!=0)
                sweep[i]+= sweep[i-1];
            if(sweep[i]<nums[i]){
                // cout<<sweep[i]<<endl;
                return false;
            }
        }
        return true;
    }
};",1454828379
Manojkumar P,manojkumar2412,765,3643,cpp,"class SegmentTree {
    vector<int> tree, lazy;
    int n;

    // Function to build the tree
    void buildTree(vector<int> &arr, int start, int end, int node) {
        if (start == end) {
            // Leaf node
            tree[node] = arr[start];
            return;
        }
        int mid = (start + end) / 2;
        buildTree(arr, start, mid, 2 * node + 1);
        buildTree(arr, mid + 1, end, 2 * node + 2);
        tree[node] = max(tree[2 * node + 1], tree[2 * node + 2]); // Max operation
    }

    // Function to propagate laziness
    void propagate(int start, int end, int node) {
        if (lazy[node] != 0) {
            // Apply the pending decrement
            tree[node] -= lazy[node]; // Adjust the current node value
            if (start != end) {       // If not a leaf node
                lazy[2 * node + 1] += lazy[node];
                lazy[2 * node + 2] += lazy[node];
            }
            lazy[node] = 0; // Clear the lazy value
        }
    }

    // Function to update a range
    void updateRange(int start, int end, int l, int r, int val, int node) {
        propagate(start, end, node); // Ensure the node is up-to-date

        if (start > r || end < l) {
            // No overlap
            return;
        }

        if (start >= l && end <= r) {
            // Complete overlap
            tree[node] -= val; // Decrement the current node
            if (start != end) {
                lazy[2 * node + 1] += val;
                lazy[2 * node + 2] += val;
            }
            return;
        }

        // Partial overlap
        int mid = (start + end) / 2;
        updateRange(start, mid, l, r, val, 2 * node + 1);
        updateRange(mid + 1, end, l, r, val, 2 * node + 2);
        tree[node] = max(tree[2 * node + 1], tree[2 * node + 2]); // Max operation
    }

    // Function to query a range
    int queryRange(int start, int end, int l, int r, int node) {
        propagate(start, end, node); // Ensure the node is up-to-date

        if (start > r || end < l) {
            // No overlap
            return INT_MIN; // Neutral element for max
        }

        if (start >= l && end <= r) {
            // Complete overlap
            return tree[node];
        }

        int mid = (start + end) / 2;
        int left = queryRange(start, mid, l, r, 2 * node + 1);
        int right = queryRange(mid + 1, end, l, r, 2 * node + 2);
        return max(left, right);
    }

public:
    SegmentTree(vector<int> &arr) {
        n = arr.size();
        tree.resize(4 * n, 0);
        lazy.resize(4 * n, 0);
        buildTree(arr, 0, n - 1, 0);
    }

    void updateRange(int l, int r, int val) {
        updateRange(0, n - 1, l, r, val, 0);
    }

    int queryRange(int l, int r) {
        return queryRange(0, n - 1, l, r, 0);
    }
};


class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n=nums.size();
        SegmentTree segTree(nums);
        int res=0;
        for(vector<int> q: queries){
            if(segTree.queryRange(0,n-1) <=0){
                return res;
            }
            int l=q[0], r= q[1], k=q[2];
            segTree.updateRange(l,r,k);
            res++;
        }
        if(segTree.queryRange(0,n-1) <=0){
                return res;
        }
        return -1;
    }
};",1454841648
akaghosting,akaghosting,766,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        def isValid(start, direction):
            ref = nums[:]
            cur = start
            while 0 <= cur < len(nums):
                if ref[cur] == 0:
                    cur += direction
                else:
                    ref[cur] -= 1
                    direction *= -1
                    cur += direction
            return all(r == 0 for r in ref)
    
        res = 0
        for i, num in enumerate(nums):
            if num == 0:
                if isValid(i, 1):
                    res += 1
                if isValid(i, -1):
                    res += 1
        return res",1454809765
akaghosting,akaghosting,766,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        n = len(nums)
        prefix = [0] * (n + 1)
        for l, r in queries:
            prefix[l] -= 1
            prefix[r + 1] += 1
        decrement = 0
        for i in range(n):
            decrement += prefix[i]
            nums[i] += decrement
        return all(num <= 0 for num in nums)",1454822986
akaghosting,akaghosting,766,3643,python3,"class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        n = len(nums)
        def isValid(k):
            prefix = [0] * (n + 1)
            nums2 = nums[:]
            for i in range(k):
                l, r, val = queries[i]
                prefix[l] -= val
                prefix[r + 1] += val
            decrement = 0
            for j in range(n):
                decrement += prefix[j]
                nums2[j] += decrement
            return all(num2 <= 0 for num2 in nums2)
        left = 0
        right = len(queries)
        res = -1
        while left <= right:
            mid = (left + right) // 2
            if isValid(mid):
                res = mid
                right = mid - 1
            else:
                left = mid + 1
        return res",1454841697
Diego Alonso Huamani Luque,pruebausuario231,768,3616,cpp,"//* sometimes pragmas don't work, if so, just comment it!
//? #pragma GCC optimize (""Ofast"")
//? #pragma GCC target (""avx,avx2"")
//! #pragma GCC optimize (""trapv"")

//! #undef _GLIBCXX_DEBUG //? for Stress Testing

#include <bits/stdc++.h> //? if you don't want IntelliSense

using namespace std;

// building blocks
using ll  = long long;
using db  = long double; // or double, if TL is tight
using str = string;      // yay python!

//? priority_queue for minimum
template<class T> using pqg = priority_queue<T, vector<T>, greater<T>>;

using ull  = unsigned long long;
//? using i64  = long long;
//? using u64  = uint64_t;
//? using i128 = __int128;
//? using u128 = __uint128_t;
//? using f128 = __float128;



// pairs
using pi = pair<int, int>;
using pl = pair<ll, ll>;
using pd = pair<db, db>;

#define mp make_pair
#define f  first
#define s  second



#define tcT template <class T
#define tcTU tcT, class U
//! ^ lol this makes everything look weird but I'll try it

tcT > using V = vector<T>;
tcT, size_t SZ > using AR = array<T, SZ>;
using vi = V<int>;
using vb = V<bool>;
using vl = V<ll>;
using vd = V<db>;
using vs = V<str>;
using vpi = V<pi>;
using vpl = V<pl>;
using vpd = V<pd>;

// vectors
// oops size(x), rbegin(x), rend(x) need C++17
#define sz(x) int((x).size())
#define bg(x) begin(x)
#define all(x) bg(x), end(x)
#define rall(x) x.rbegin(), x.rend()
#define sor(x) sort(all(x))
#define rsz resize
#define ins insert
#define pb push_back
#define eb emplace_back
#define ft front()
#define bk back()
#define ts to_string

#define lb lower_bound
#define ub upper_bound
tcT > int lwb(V<T> &a, const T &b) { return int(lb(all(a), b) - bg(a)); }
tcT > int upb(V<T> &a, const T &b) { return int(ub(all(a), b) - bg(a)); }



// loops
#define FOR(i, a, b) for (int i = (a); i < (b); ++i)
#define F0R(i, a) FOR(i, 0, a)
#define ROF(i, a, b) for (int i = (b)-1; i >= (a); --i)
#define R0F(i, a) ROF(i, 0, a)
#define rep(a) F0R(_, a)
#define each(a, x) for (auto &a : x)



const int MOD = 1e9 + 7;
const int MX = (int)2e5 + 5;
const ll BIG = 1e18;  //? not too close to LLONG_MAX
const db PI = acos((db)-1);
const int dx[4]{1, 0, -1, 0}, dy[4]{0, 1, 0, -1};  //? for every grid problem!!
mt19937 rng((uint32_t)chrono::steady_clock::now().time_since_epoch().count());



// bitwise ops
// also see https://gcc.gnu.org/onlinedocs/gcc/Other-Builtins.html
constexpr int pct(int x) { return __builtin_popcount(x); }  // # of bits set
constexpr int bits(int x) {  // assert(x >= 0); // make C++11 compatible until
	                         // USACO updates ...
	return x == 0 ? 0 : 31 - __builtin_clz(x);
}  // floor(log2(x))
constexpr int p2(int x) { return 1 << x; }
constexpr int msk2(int x) { return p2(x) - 1; }

ll cdiv(ll a, ll b) {
	return a / b + ((a ^ b) > 0 && a % b);
}  // divide a by b rounded up
ll fdiv(ll a, ll b) {
	return a / b - ((a ^ b) < 0 && a % b);
}  // divide a by b rounded down

tcT > bool ckmin(T &a, const T &b) {
	return b < a ? a = b, 1 : 0;
}  // set a = min(a,b)
tcT > bool ckmax(T &a, const T &b) {
	return a < b ? a = b, 1 : 0;
}  // set a = max(a,b)

tcTU > T fstTrue(T lo, T hi, U f) {
	++hi;
	assert(lo <= hi);  // assuming f is increasing
	while (lo < hi) {  // find first index such that f is true
		T mid = lo + (hi - lo) / 2;
		f(mid) ? hi = mid : lo = mid + 1;
	}
	return lo;
}
tcTU > T lstTrue(T lo, T hi, U f) {
	--lo;
	assert(lo <= hi);  // assuming f is decreasing
	while (lo < hi) {  // find first index such that f is true
		T mid = lo + (hi - lo + 1) / 2;
		f(mid) ? lo = mid : hi = mid - 1;
	}
	return lo;
}
tcT > void remDup(vector<T> &v) {  // sort and remove duplicates
	sort(all(v));
	v.erase(unique(all(v)), end(v));
}
tcTU > void safeErase(T &t, const U &u) {
	auto it = t.find(u);
	assert(it != end(t));
	t.erase(it);
}



#define tcTUU tcT, class ...U

inline namespace IO {
#define SFINAE(x, ...)                                                         \
	template <class, class = void> struct x : std::false_type {};              \
	template <class T> struct x<T, std::void_t<__VA_ARGS__>> : std::true_type {}

SFINAE(DefaultI, decltype(std::cin >> std::declval<T &>()));
SFINAE(DefaultO, decltype(std::cout << std::declval<T &>()));
SFINAE(IsTuple, typename std::tuple_size<T>::type);
SFINAE(Iterable, decltype(std::begin(std::declval<T>())));

template <auto &is> struct Reader {
	template <class T> void Impl(T &t) {
		if constexpr (DefaultI<T>::value) is >> t;
		else if constexpr (Iterable<T>::value) {
			for (auto &x : t) Impl(x);
		} else if constexpr (IsTuple<T>::value) {
			std::apply([this](auto &...args) { (Impl(args), ...); }, t);
		} else static_assert(IsTuple<T>::value, ""No matching type for read"");
	}
	template <class... Ts> void read(Ts &...ts) { ((Impl(ts)), ...); }
};

template <class... Ts> void re(Ts &...ts) { Reader<cin>{}.read(ts...); }
#define def(t, args...)                                                        \
	t args;                                                                    \
	re(args);

template <auto &os, bool debug, bool print_nd> struct Writer {
	string comma() const { return debug ? "","" : """"; }
	template <class T> constexpr char Space(const T &) const {
		return print_nd && (Iterable<T>::value or IsTuple<T>::value) ? '\n'
		                                                             : ' ';
	}
	template <class T> void Impl(T const &t) const {
		if constexpr (DefaultO<T>::value) os << t;
		else if constexpr (Iterable<T>::value) {
			if (debug) os << '{';
			int i = 0;
			for (auto &&x : t)
				((i++) ? (os << comma() << Space(x), Impl(x)) : Impl(x));
			if (debug) os << '}';
		} else if constexpr (IsTuple<T>::value) {
			if (debug) os << '(';
			std::apply(
			    [this](auto const &...args) {
				    int i = 0;
				    (((i++) ? (os << comma() << "" "", Impl(args)) : Impl(args)),
				     ...);
			    },
			    t);
			if (debug) os << ')';
		} else static_assert(IsTuple<T>::value, ""No matching type for print"");
	}
	template <class T> void ImplWrapper(T const &t) const {
		if (debug) os << ""\033[0;31m"";
		Impl(t);
		if (debug) os << ""\033[0m"";
	}
	template <class... Ts> void print(Ts const &...ts) const {
		((Impl(ts)), ...);
	}
	template <class F, class... Ts>
	void print_with_sep(const std::string &sep, F const &f,
	                    Ts const &...ts) const {
		ImplWrapper(f), ((os << sep, ImplWrapper(ts)), ...), os << '\n';
	}
	void print_with_sep(const std::string &) const { os << '\n'; }
};

template <class... Ts> void pr(Ts const &...ts) {
	Writer<cout, false, true>{}.print(ts...);
}
template <class... Ts> void ps(Ts const &...ts) {
	Writer<cout, false, true>{}.print_with_sep("" "", ts...);
}
}  // namespace IO

inline namespace Debug {

#ifdef LOCAL
#include ""helpers/debug.h""

#define chk(...) if (!(__VA_ARGS__)) cerr << ""\033[41m"" << ""Line("" << __LINE__ << "") -> function("" \
	 << __FUNCTION__  << "") -> CHK FAILED: ("" << #__VA_ARGS__ << "")"" << ""\033[0m"" << ""\n"", exit(0);

#define MACRO(code) do {code} while (false)
#define RAYA MACRO(cerr << ""\033[101m"" << ""================================"" << ""\033[0m"" << endl;)
#else
//? #define dbg(...)

#define chk(...)
//? #define RAYA
#endif

const auto beg_time = std::chrono::high_resolution_clock::now();
// https://stackoverflow.com/questions/47980498/accurate-c-c-clock-on-a-multi-core-processor-with-auto-overclock?noredirect=1&lq=1
double time_elapsed() {
	return chrono::duration<double>(std::chrono::high_resolution_clock::now() -
	                                beg_time)
	    .count();
}
}  // namespace Debug



inline namespace FileIO {
void setIn(str s) { freopen(s.c_str(), ""r"", stdin); }
void setOut(str s) { freopen(s.c_str(), ""w"", stdout); }
void setIO(str s = """") {
	cin.tie(0)->sync_with_stdio(0);  // unsync C / C++ I/O streams
	//? cout << fixed << setprecision(12);
    //? cerr << fixed << setprecision(12);
	cin.exceptions(cin.failbit);
	// throws exception when do smth illegal
	// ex. try to read letter into int
	if (sz(s)) setIn(s + "".in""), setOut(s + "".out"");  // for old USACO
}
}  // namespace FileIO



//? Custom Helpers
template <typename T>
inline T gcd(T a, T b) { while (b != 0) swap(b, a %= b); return a; }

long long binpow(long long a, long long b) {
    long long res = 1;
    while (b > 0) {
        if (b & 1)
            res = res * a;
        a = a * a;
        b >>= 1;
    }
    return res;
}

const int dddx[8]{1, 0, -1,  0, 1,  1, -1, -1};
const int dddy[8]{0, 1,  0, -1, 1, -1,  1, -1};

using vvi = V<vi>;
using vvl = V<vl>;
using vvb = V<vb>;
//? /Custom Helpers

#define RAYA ps(""================================"")

const string PAIR_LEFT = ""("";
const string PAIR_RIGHT = "")"";
const string IT_LEFT = ""["";
const string IT_RIGHT = ""]"";
const string PAIR_SEP = "", "";
const string IT_SEP = "", "";
 
// const string PAIR_LEFT = ""("";
// const string PAIR_RIGHT = "")"";
// const string IT_LEFT = ""["";
// const string IT_RIGHT = ""]"";
// const string PAIR_SEP = "" "";
// const string IT_SEP = "" "";
 
// const string PAIR_LEFT = ""{"";
// const string PAIR_RIGHT = ""}"";
// const string IT_LEFT = ""{"";
// const string IT_RIGHT = ""}"";
// const string PAIR_SEP = "", "";
// const string IT_SEP = "", "";
 
// benq - print any container + pair
template<typename T, typename = void> struct is_iterable : false_type {};
template<typename T> struct is_iterable<T, void_t<decltype(begin(declval<T>())),decltype(end(declval<T>()))>> : true_type {};
template<typename T> typename enable_if<is_iterable<T>::value&&!is_same<T, string>::value,ostream&>::type operator<<(ostream &cout, T const &v);
template<typename A, typename B> ostream& operator<<(ostream &cout, pair<A, B> const &p) { return cout << PAIR_LEFT << p.f << PAIR_SEP << p.s << PAIR_RIGHT; }
template<typename T> typename enable_if<is_iterable<T>::value&&!is_same<T, string>::value,ostream&>::type operator<<(ostream &cout, T const &v) {
    cout << IT_LEFT; 
    for (auto it = v.begin(); it != v.end();) {
        cout << *it;
        if (++it != v.end()) cout << IT_SEP;
    }
    return cout << IT_RIGHT;
}
template<typename A, typename B> istream& operator>>(istream& cin, pair<A, B> &p) {
    cin >> p.first;
    return cin >> p.second;
}
 
void dbg_out() { cout << endl; }
template<typename Head, typename... Tail> 
void dbg_out(Head H, Tail... T) { cout << ' ' << H; dbg_out(T...); }
#define dbg(...) cout << ""("" << #__VA_ARGS__ << ""): "", dbg_out(__VA_ARGS__)

//* Template
//* /Template
class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        
        ll n=nums.size();
        vl pref(n,0);
        pref[0]=nums[0];
        FOR(i,1,n){
            pref[i]=pref[i-1]+nums[i];
        }
        vl suff(n,0);
        suff[n-1]=nums[n-1];
        for(ll i=n-2;i>=0;i--){
            suff[i]=suff[i+1]+nums[i];
        }
        int ans=0;
        FOR(i,0,n){
            if(nums[i]==0){
                ll sumL=i>=1 ? pref[i-1] : 0ll;
                ll sumR=i+1<n ? suff[i+1] : 0ll;
                if(sumL==sumR)ans+=2;
                else if(abs(sumL-sumR)==1) ans++;
            }
        }
        return ans;
    }
};",1454812853
Diego Alonso Huamani Luque,pruebausuario231,768,3639,cpp,"//* sometimes pragmas don't work, if so, just comment it!
//? #pragma GCC optimize (""Ofast"")
//? #pragma GCC target (""avx,avx2"")
//! #pragma GCC optimize (""trapv"")

//! #undef _GLIBCXX_DEBUG //? for Stress Testing

#include <bits/stdc++.h> //? if you don't want IntelliSense

using namespace std;

// building blocks
using ll  = long long;
using db  = long double; // or double, if TL is tight
using str = string;      // yay python!

//? priority_queue for minimum
template<class T> using pqg = priority_queue<T, vector<T>, greater<T>>;

using ull  = unsigned long long;
//? using i64  = long long;
//? using u64  = uint64_t;
//? using i128 = __int128;
//? using u128 = __uint128_t;
//? using f128 = __float128;



// pairs
using pi = pair<int, int>;
using pl = pair<ll, ll>;
using pd = pair<db, db>;

#define mp make_pair
#define f  first
#define s  second



#define tcT template <class T
#define tcTU tcT, class U
//! ^ lol this makes everything look weird but I'll try it

tcT > using V = vector<T>;
tcT, size_t SZ > using AR = array<T, SZ>;
using vi = V<int>;
using vb = V<bool>;
using vl = V<ll>;
using vd = V<db>;
using vs = V<str>;
using vpi = V<pi>;
using vpl = V<pl>;
using vpd = V<pd>;

// vectors
// oops size(x), rbegin(x), rend(x) need C++17
#define sz(x) int((x).size())
#define bg(x) begin(x)
#define all(x) bg(x), end(x)
#define rall(x) x.rbegin(), x.rend()
#define sor(x) sort(all(x))
#define rsz resize
#define ins insert
#define pb push_back
#define eb emplace_back
#define ft front()
#define bk back()
#define ts to_string

#define lb lower_bound
#define ub upper_bound
tcT > int lwb(V<T> &a, const T &b) { return int(lb(all(a), b) - bg(a)); }
tcT > int upb(V<T> &a, const T &b) { return int(ub(all(a), b) - bg(a)); }



// loops
#define FOR(i, a, b) for (int i = (a); i < (b); ++i)
#define F0R(i, a) FOR(i, 0, a)
#define ROF(i, a, b) for (int i = (b)-1; i >= (a); --i)
#define R0F(i, a) ROF(i, 0, a)
#define rep(a) F0R(_, a)
#define each(a, x) for (auto &a : x)



const int MOD = 1e9 + 7;
const int MX = (int)2e5 + 5;
const ll BIG = 1e18;  //? not too close to LLONG_MAX
const db PI = acos((db)-1);
const int dx[4]{1, 0, -1, 0}, dy[4]{0, 1, 0, -1};  //? for every grid problem!!
mt19937 rng((uint32_t)chrono::steady_clock::now().time_since_epoch().count());



// bitwise ops
// also see https://gcc.gnu.org/onlinedocs/gcc/Other-Builtins.html
constexpr int pct(int x) { return __builtin_popcount(x); }  // # of bits set
constexpr int bits(int x) {  // assert(x >= 0); // make C++11 compatible until
	                         // USACO updates ...
	return x == 0 ? 0 : 31 - __builtin_clz(x);
}  // floor(log2(x))
constexpr int p2(int x) { return 1 << x; }
constexpr int msk2(int x) { return p2(x) - 1; }

ll cdiv(ll a, ll b) {
	return a / b + ((a ^ b) > 0 && a % b);
}  // divide a by b rounded up
ll fdiv(ll a, ll b) {
	return a / b - ((a ^ b) < 0 && a % b);
}  // divide a by b rounded down

tcT > bool ckmin(T &a, const T &b) {
	return b < a ? a = b, 1 : 0;
}  // set a = min(a,b)
tcT > bool ckmax(T &a, const T &b) {
	return a < b ? a = b, 1 : 0;
}  // set a = max(a,b)

tcTU > T fstTrue(T lo, T hi, U f) {
	++hi;
	assert(lo <= hi);  // assuming f is increasing
	while (lo < hi) {  // find first index such that f is true
		T mid = lo + (hi - lo) / 2;
		f(mid) ? hi = mid : lo = mid + 1;
	}
	return lo;
}
tcTU > T lstTrue(T lo, T hi, U f) {
	--lo;
	assert(lo <= hi);  // assuming f is decreasing
	while (lo < hi) {  // find first index such that f is true
		T mid = lo + (hi - lo + 1) / 2;
		f(mid) ? lo = mid : hi = mid - 1;
	}
	return lo;
}
tcT > void remDup(vector<T> &v) {  // sort and remove duplicates
	sort(all(v));
	v.erase(unique(all(v)), end(v));
}
tcTU > void safeErase(T &t, const U &u) {
	auto it = t.find(u);
	assert(it != end(t));
	t.erase(it);
}



#define tcTUU tcT, class ...U

inline namespace IO {
#define SFINAE(x, ...)                                                         \
	template <class, class = void> struct x : std::false_type {};              \
	template <class T> struct x<T, std::void_t<__VA_ARGS__>> : std::true_type {}

SFINAE(DefaultI, decltype(std::cin >> std::declval<T &>()));
SFINAE(DefaultO, decltype(std::cout << std::declval<T &>()));
SFINAE(IsTuple, typename std::tuple_size<T>::type);
SFINAE(Iterable, decltype(std::begin(std::declval<T>())));

template <auto &is> struct Reader {
	template <class T> void Impl(T &t) {
		if constexpr (DefaultI<T>::value) is >> t;
		else if constexpr (Iterable<T>::value) {
			for (auto &x : t) Impl(x);
		} else if constexpr (IsTuple<T>::value) {
			std::apply([this](auto &...args) { (Impl(args), ...); }, t);
		} else static_assert(IsTuple<T>::value, ""No matching type for read"");
	}
	template <class... Ts> void read(Ts &...ts) { ((Impl(ts)), ...); }
};

template <class... Ts> void re(Ts &...ts) { Reader<cin>{}.read(ts...); }
#define def(t, args...)                                                        \
	t args;                                                                    \
	re(args);

template <auto &os, bool debug, bool print_nd> struct Writer {
	string comma() const { return debug ? "","" : """"; }
	template <class T> constexpr char Space(const T &) const {
		return print_nd && (Iterable<T>::value or IsTuple<T>::value) ? '\n'
		                                                             : ' ';
	}
	template <class T> void Impl(T const &t) const {
		if constexpr (DefaultO<T>::value) os << t;
		else if constexpr (Iterable<T>::value) {
			if (debug) os << '{';
			int i = 0;
			for (auto &&x : t)
				((i++) ? (os << comma() << Space(x), Impl(x)) : Impl(x));
			if (debug) os << '}';
		} else if constexpr (IsTuple<T>::value) {
			if (debug) os << '(';
			std::apply(
			    [this](auto const &...args) {
				    int i = 0;
				    (((i++) ? (os << comma() << "" "", Impl(args)) : Impl(args)),
				     ...);
			    },
			    t);
			if (debug) os << ')';
		} else static_assert(IsTuple<T>::value, ""No matching type for print"");
	}
	template <class T> void ImplWrapper(T const &t) const {
		if (debug) os << ""\033[0;31m"";
		Impl(t);
		if (debug) os << ""\033[0m"";
	}
	template <class... Ts> void print(Ts const &...ts) const {
		((Impl(ts)), ...);
	}
	template <class F, class... Ts>
	void print_with_sep(const std::string &sep, F const &f,
	                    Ts const &...ts) const {
		ImplWrapper(f), ((os << sep, ImplWrapper(ts)), ...), os << '\n';
	}
	void print_with_sep(const std::string &) const { os << '\n'; }
};

template <class... Ts> void pr(Ts const &...ts) {
	Writer<cout, false, true>{}.print(ts...);
}
template <class... Ts> void ps(Ts const &...ts) {
	Writer<cout, false, true>{}.print_with_sep("" "", ts...);
}
}  // namespace IO

inline namespace Debug {

#ifdef LOCAL
#include ""helpers/debug.h""

#define chk(...) if (!(__VA_ARGS__)) cerr << ""\033[41m"" << ""Line("" << __LINE__ << "") -> function("" \
	 << __FUNCTION__  << "") -> CHK FAILED: ("" << #__VA_ARGS__ << "")"" << ""\033[0m"" << ""\n"", exit(0);

#define MACRO(code) do {code} while (false)
#define RAYA MACRO(cerr << ""\033[101m"" << ""================================"" << ""\033[0m"" << endl;)
#else
//? #define dbg(...)

#define chk(...)
//? #define RAYA
#endif

const auto beg_time = std::chrono::high_resolution_clock::now();
// https://stackoverflow.com/questions/47980498/accurate-c-c-clock-on-a-multi-core-processor-with-auto-overclock?noredirect=1&lq=1
double time_elapsed() {
	return chrono::duration<double>(std::chrono::high_resolution_clock::now() -
	                                beg_time)
	    .count();
}
}  // namespace Debug



inline namespace FileIO {
void setIn(str s) { freopen(s.c_str(), ""r"", stdin); }
void setOut(str s) { freopen(s.c_str(), ""w"", stdout); }
void setIO(str s = """") {
	cin.tie(0)->sync_with_stdio(0);  // unsync C / C++ I/O streams
	//? cout << fixed << setprecision(12);
    //? cerr << fixed << setprecision(12);
	cin.exceptions(cin.failbit);
	// throws exception when do smth illegal
	// ex. try to read letter into int
	if (sz(s)) setIn(s + "".in""), setOut(s + "".out"");  // for old USACO
}
}  // namespace FileIO



//? Custom Helpers
template <typename T>
inline T gcd(T a, T b) { while (b != 0) swap(b, a %= b); return a; }

long long binpow(long long a, long long b) {
    long long res = 1;
    while (b > 0) {
        if (b & 1)
            res = res * a;
        a = a * a;
        b >>= 1;
    }
    return res;
}

const int dddx[8]{1, 0, -1,  0, 1,  1, -1, -1};
const int dddy[8]{0, 1,  0, -1, 1, -1,  1, -1};

using vvi = V<vi>;
using vvl = V<vl>;
using vvb = V<vb>;
//? /Custom Helpers

#define RAYA ps(""================================"")

const string PAIR_LEFT = ""("";
const string PAIR_RIGHT = "")"";
const string IT_LEFT = ""["";
const string IT_RIGHT = ""]"";
const string PAIR_SEP = "", "";
const string IT_SEP = "", "";
 
// const string PAIR_LEFT = ""("";
// const string PAIR_RIGHT = "")"";
// const string IT_LEFT = ""["";
// const string IT_RIGHT = ""]"";
// const string PAIR_SEP = "" "";
// const string IT_SEP = "" "";
 
// const string PAIR_LEFT = ""{"";
// const string PAIR_RIGHT = ""}"";
// const string IT_LEFT = ""{"";
// const string IT_RIGHT = ""}"";
// const string PAIR_SEP = "", "";
// const string IT_SEP = "", "";
 
// benq - print any container + pair
template<typename T, typename = void> struct is_iterable : false_type {};
template<typename T> struct is_iterable<T, void_t<decltype(begin(declval<T>())),decltype(end(declval<T>()))>> : true_type {};
template<typename T> typename enable_if<is_iterable<T>::value&&!is_same<T, string>::value,ostream&>::type operator<<(ostream &cout, T const &v);
template<typename A, typename B> ostream& operator<<(ostream &cout, pair<A, B> const &p) { return cout << PAIR_LEFT << p.f << PAIR_SEP << p.s << PAIR_RIGHT; }
template<typename T> typename enable_if<is_iterable<T>::value&&!is_same<T, string>::value,ostream&>::type operator<<(ostream &cout, T const &v) {
    cout << IT_LEFT; 
    for (auto it = v.begin(); it != v.end();) {
        cout << *it;
        if (++it != v.end()) cout << IT_SEP;
    }
    return cout << IT_RIGHT;
}
template<typename A, typename B> istream& operator>>(istream& cin, pair<A, B> &p) {
    cin >> p.first;
    return cin >> p.second;
}
 
void dbg_out() { cout << endl; }
template<typename Head, typename... Tail> 
void dbg_out(Head H, Tail... T) { cout << ' ' << H; dbg_out(T...); }
#define dbg(...) cout << ""("" << #__VA_ARGS__ << ""): "", dbg_out(__VA_ARGS__)

//* Template
//* /Template
class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        ll sum=0,n=nums.size();
        each(e,nums)sum+=e;
        vl diff(n,0);
        each(e,queries){
            diff[e[0]]++;
            if(e[1]+1<n) diff[e[1]+1]--;
        }
        FOR(i,1,n){
            diff[i]+=diff[i-1];
        }
        FOR(i,0,n){
            if(diff[i] < nums[i]) return false;
        }
        return true;
    }
};",1454820116
Diego Alonso Huamani Luque,pruebausuario231,768,3643,cpp,"//* sometimes pragmas don't work, if so, just comment it!
//? #pragma GCC optimize (""Ofast"")
//? #pragma GCC target (""avx,avx2"")
//! #pragma GCC optimize (""trapv"")

//! #undef _GLIBCXX_DEBUG //? for Stress Testing

#include <bits/stdc++.h> //? if you don't want IntelliSense

using namespace std;

// building blocks
using ll  = long long;
using db  = long double; // or double, if TL is tight
using str = string;      // yay python!

//? priority_queue for minimum
template<class T> using pqg = priority_queue<T, vector<T>, greater<T>>;

using ull  = unsigned long long;
//? using i64  = long long;
//? using u64  = uint64_t;
//? using i128 = __int128;
//? using u128 = __uint128_t;
//? using f128 = __float128;



// pairs
using pi = pair<int, int>;
using pl = pair<ll, ll>;
using pd = pair<db, db>;

#define mp make_pair
#define f  first
#define s  second



#define tcT template <class T
#define tcTU tcT, class U
//! ^ lol this makes everything look weird but I'll try it

tcT > using V = vector<T>;
tcT, size_t SZ > using AR = array<T, SZ>;
using vi = V<int>;
using vb = V<bool>;
using vl = V<ll>;
using vd = V<db>;
using vs = V<str>;
using vpi = V<pi>;
using vpl = V<pl>;
using vpd = V<pd>;

// vectors
// oops size(x), rbegin(x), rend(x) need C++17
#define sz(x) int((x).size())
#define bg(x) begin(x)
#define all(x) bg(x), end(x)
#define rall(x) x.rbegin(), x.rend()
#define sor(x) sort(all(x))
#define rsz resize
#define ins insert
#define pb push_back
#define eb emplace_back
#define ft front()
#define bk back()
#define ts to_string

#define lb lower_bound
#define ub upper_bound
tcT > int lwb(V<T> &a, const T &b) { return int(lb(all(a), b) - bg(a)); }
tcT > int upb(V<T> &a, const T &b) { return int(ub(all(a), b) - bg(a)); }



// loops
#define FOR(i, a, b) for (int i = (a); i < (b); ++i)
#define F0R(i, a) FOR(i, 0, a)
#define ROF(i, a, b) for (int i = (b)-1; i >= (a); --i)
#define R0F(i, a) ROF(i, 0, a)
#define rep(a) F0R(_, a)
#define each(a, x) for (auto &a : x)



const int MOD = 1e9 + 7;
const int MX = (int)2e5 + 5;
const ll BIG = 1e18;  //? not too close to LLONG_MAX
const db PI = acos((db)-1);
const int dx[4]{1, 0, -1, 0}, dy[4]{0, 1, 0, -1};  //? for every grid problem!!
mt19937 rng((uint32_t)chrono::steady_clock::now().time_since_epoch().count());



// bitwise ops
// also see https://gcc.gnu.org/onlinedocs/gcc/Other-Builtins.html
constexpr int pct(int x) { return __builtin_popcount(x); }  // # of bits set
constexpr int bits(int x) {  // assert(x >= 0); // make C++11 compatible until
	                         // USACO updates ...
	return x == 0 ? 0 : 31 - __builtin_clz(x);
}  // floor(log2(x))
constexpr int p2(int x) { return 1 << x; }
constexpr int msk2(int x) { return p2(x) - 1; }

ll cdiv(ll a, ll b) {
	return a / b + ((a ^ b) > 0 && a % b);
}  // divide a by b rounded up
ll fdiv(ll a, ll b) {
	return a / b - ((a ^ b) < 0 && a % b);
}  // divide a by b rounded down

tcT > bool ckmin(T &a, const T &b) {
	return b < a ? a = b, 1 : 0;
}  // set a = min(a,b)
tcT > bool ckmax(T &a, const T &b) {
	return a < b ? a = b, 1 : 0;
}  // set a = max(a,b)

tcTU > T fstTrue(T lo, T hi, U f) {
	++hi;
	assert(lo <= hi);  // assuming f is increasing
	while (lo < hi) {  // find first index such that f is true
		T mid = lo + (hi - lo) / 2;
		f(mid) ? hi = mid : lo = mid + 1;
	}
	return lo;
}
tcTU > T lstTrue(T lo, T hi, U f) {
	--lo;
	assert(lo <= hi);  // assuming f is decreasing
	while (lo < hi) {  // find first index such that f is true
		T mid = lo + (hi - lo + 1) / 2;
		f(mid) ? lo = mid : hi = mid - 1;
	}
	return lo;
}
tcT > void remDup(vector<T> &v) {  // sort and remove duplicates
	sort(all(v));
	v.erase(unique(all(v)), end(v));
}
tcTU > void safeErase(T &t, const U &u) {
	auto it = t.find(u);
	assert(it != end(t));
	t.erase(it);
}



#define tcTUU tcT, class ...U

inline namespace IO {
#define SFINAE(x, ...)                                                         \
	template <class, class = void> struct x : std::false_type {};              \
	template <class T> struct x<T, std::void_t<__VA_ARGS__>> : std::true_type {}

SFINAE(DefaultI, decltype(std::cin >> std::declval<T &>()));
SFINAE(DefaultO, decltype(std::cout << std::declval<T &>()));
SFINAE(IsTuple, typename std::tuple_size<T>::type);
SFINAE(Iterable, decltype(std::begin(std::declval<T>())));

template <auto &is> struct Reader {
	template <class T> void Impl(T &t) {
		if constexpr (DefaultI<T>::value) is >> t;
		else if constexpr (Iterable<T>::value) {
			for (auto &x : t) Impl(x);
		} else if constexpr (IsTuple<T>::value) {
			std::apply([this](auto &...args) { (Impl(args), ...); }, t);
		} else static_assert(IsTuple<T>::value, ""No matching type for read"");
	}
	template <class... Ts> void read(Ts &...ts) { ((Impl(ts)), ...); }
};

template <class... Ts> void re(Ts &...ts) { Reader<cin>{}.read(ts...); }
#define def(t, args...)                                                        \
	t args;                                                                    \
	re(args);

template <auto &os, bool debug, bool print_nd> struct Writer {
	string comma() const { return debug ? "","" : """"; }
	template <class T> constexpr char Space(const T &) const {
		return print_nd && (Iterable<T>::value or IsTuple<T>::value) ? '\n'
		                                                             : ' ';
	}
	template <class T> void Impl(T const &t) const {
		if constexpr (DefaultO<T>::value) os << t;
		else if constexpr (Iterable<T>::value) {
			if (debug) os << '{';
			int i = 0;
			for (auto &&x : t)
				((i++) ? (os << comma() << Space(x), Impl(x)) : Impl(x));
			if (debug) os << '}';
		} else if constexpr (IsTuple<T>::value) {
			if (debug) os << '(';
			std::apply(
			    [this](auto const &...args) {
				    int i = 0;
				    (((i++) ? (os << comma() << "" "", Impl(args)) : Impl(args)),
				     ...);
			    },
			    t);
			if (debug) os << ')';
		} else static_assert(IsTuple<T>::value, ""No matching type for print"");
	}
	template <class T> void ImplWrapper(T const &t) const {
		if (debug) os << ""\033[0;31m"";
		Impl(t);
		if (debug) os << ""\033[0m"";
	}
	template <class... Ts> void print(Ts const &...ts) const {
		((Impl(ts)), ...);
	}
	template <class F, class... Ts>
	void print_with_sep(const std::string &sep, F const &f,
	                    Ts const &...ts) const {
		ImplWrapper(f), ((os << sep, ImplWrapper(ts)), ...), os << '\n';
	}
	void print_with_sep(const std::string &) const { os << '\n'; }
};

template <class... Ts> void pr(Ts const &...ts) {
	Writer<cout, false, true>{}.print(ts...);
}
template <class... Ts> void ps(Ts const &...ts) {
	Writer<cout, false, true>{}.print_with_sep("" "", ts...);
}
}  // namespace IO

inline namespace Debug {

#ifdef LOCAL
#include ""helpers/debug.h""

#define chk(...) if (!(__VA_ARGS__)) cerr << ""\033[41m"" << ""Line("" << __LINE__ << "") -> function("" \
	 << __FUNCTION__  << "") -> CHK FAILED: ("" << #__VA_ARGS__ << "")"" << ""\033[0m"" << ""\n"", exit(0);

#define MACRO(code) do {code} while (false)
#define RAYA MACRO(cerr << ""\033[101m"" << ""================================"" << ""\033[0m"" << endl;)
#else
//? #define dbg(...)

#define chk(...)
//? #define RAYA
#endif

const auto beg_time = std::chrono::high_resolution_clock::now();
// https://stackoverflow.com/questions/47980498/accurate-c-c-clock-on-a-multi-core-processor-with-auto-overclock?noredirect=1&lq=1
double time_elapsed() {
	return chrono::duration<double>(std::chrono::high_resolution_clock::now() -
	                                beg_time)
	    .count();
}
}  // namespace Debug



inline namespace FileIO {
void setIn(str s) { freopen(s.c_str(), ""r"", stdin); }
void setOut(str s) { freopen(s.c_str(), ""w"", stdout); }
void setIO(str s = """") {
	cin.tie(0)->sync_with_stdio(0);  // unsync C / C++ I/O streams
	//? cout << fixed << setprecision(12);
    //? cerr << fixed << setprecision(12);
	cin.exceptions(cin.failbit);
	// throws exception when do smth illegal
	// ex. try to read letter into int
	if (sz(s)) setIn(s + "".in""), setOut(s + "".out"");  // for old USACO
}
}  // namespace FileIO



//? Custom Helpers
template <typename T>
inline T gcd(T a, T b) { while (b != 0) swap(b, a %= b); return a; }

long long binpow(long long a, long long b) {
    long long res = 1;
    while (b > 0) {
        if (b & 1)
            res = res * a;
        a = a * a;
        b >>= 1;
    }
    return res;
}

const int dddx[8]{1, 0, -1,  0, 1,  1, -1, -1};
const int dddy[8]{0, 1,  0, -1, 1, -1,  1, -1};

using vvi = V<vi>;
using vvl = V<vl>;
using vvb = V<vb>;
//? /Custom Helpers

#define RAYA ps(""================================"")

const string PAIR_LEFT = ""("";
const string PAIR_RIGHT = "")"";
const string IT_LEFT = ""["";
const string IT_RIGHT = ""]"";
const string PAIR_SEP = "", "";
const string IT_SEP = "", "";
 
// const string PAIR_LEFT = ""("";
// const string PAIR_RIGHT = "")"";
// const string IT_LEFT = ""["";
// const string IT_RIGHT = ""]"";
// const string PAIR_SEP = "" "";
// const string IT_SEP = "" "";
 
// const string PAIR_LEFT = ""{"";
// const string PAIR_RIGHT = ""}"";
// const string IT_LEFT = ""{"";
// const string IT_RIGHT = ""}"";
// const string PAIR_SEP = "", "";
// const string IT_SEP = "", "";
 
// benq - print any container + pair
template<typename T, typename = void> struct is_iterable : false_type {};
template<typename T> struct is_iterable<T, void_t<decltype(begin(declval<T>())),decltype(end(declval<T>()))>> : true_type {};
template<typename T> typename enable_if<is_iterable<T>::value&&!is_same<T, string>::value,ostream&>::type operator<<(ostream &cout, T const &v);
template<typename A, typename B> ostream& operator<<(ostream &cout, pair<A, B> const &p) { return cout << PAIR_LEFT << p.f << PAIR_SEP << p.s << PAIR_RIGHT; }
template<typename T> typename enable_if<is_iterable<T>::value&&!is_same<T, string>::value,ostream&>::type operator<<(ostream &cout, T const &v) {
    cout << IT_LEFT; 
    for (auto it = v.begin(); it != v.end();) {
        cout << *it;
        if (++it != v.end()) cout << IT_SEP;
    }
    return cout << IT_RIGHT;
}
template<typename A, typename B> istream& operator>>(istream& cin, pair<A, B> &p) {
    cin >> p.first;
    return cin >> p.second;
}
 
void dbg_out() { cout << endl; }
template<typename Head, typename... Tail> 
void dbg_out(Head H, Tail... T) { cout << ' ' << H; dbg_out(T...); }
#define dbg(...) cout << ""("" << #__VA_ARGS__ << ""): "", dbg_out(__VA_ARGS__)

//* Template
//* /Template
class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        ll q=queries.size(),n=nums.size();
        int s=0,e=q-1,m=s+(e-s)/2,guarda=-1;
        bool xd=true;
        each(e,nums)if(e!=0) xd=false;
        if(xd) return 0;
        while(s<=e){
            m=s+(e-s)/2;
            cout<<""haciendo con m ""<<s<<"" ""<<e<<"" ""<<m<<endl;
            
            vl diff(n,0);
            FOR(i,0,m+1){
                ll val=queries[i][2];
                diff[queries[i][0]]+=val;
                if(queries[i][1]+1<n) diff[queries[i][1]+1]-=val;
            }
            FOR(i,1,n){
                diff[i]+=diff[i-1];
            }
            /*each(e,diff)cout<<e<<"" "";
            cout<<endl;*/
            bool ok=true;
            FOR(i,0,n){
                if(diff[i] < nums[i]) {
                    ok=false;
                    break;
                }
            }
            if(ok){
                cout<<""todo ok ""<<m<<endl;
                guarda=m+1;
                e=m-1;
            }
            else s=m+1;
        }
        return guarda;
    }
};",1454841816
Nikhil Agrawal,agrawalji,769,3616,java,"class Solution {
    public int countValidSelections(int[] nums) {
         int n = nums.length;
        int ans = 0;
        
        for(int i=0;i<n;i++){
            if(nums[i] == 0 && possible(-1, nums.clone(), i)) ans++;
            if(nums[i] == 0 && possible(1, nums.clone(), i)) ans++;
        }
        return ans;
    }
    
    private boolean possible(int dir, int nums[], int i){
        int j = i;
        int n = nums.length;
        while(i < n && i >= 0){
            if(nums[i] == 0){
                i+=dir;
                continue;
            }
            nums[i]--;
            if(dir == -1) dir = 1;
            else dir = -1;
            i += dir;
        }
        
        for(int x : nums) if(x!=0) return false;
        
        return true;
    }
}",1454812389
Nikhil Agrawal,agrawalji,769,3639,java,"class Solution {
    public boolean isZeroArray(int[] nums, int[][] queries) {
        int n = nums.length;
        
        int end[] = new int[n];
        int start[] = new int[n];
        
        for(int q[] : queries){
            start[q[0]]++;
            end[q[1]]++;
        }
        
        int cnt =0;
        for(int i=0;i<n;i++){
            cnt += start[i];
            if(nums[i] > cnt) return false;
            cnt -= end[i];
        }
        
        return true;
    }
}",1454828301
Nikhil Agrawal,agrawalji,769,3643,java,"class Solution {
    public int minZeroArray(int[] nums, int[][] queries) {
        int n = nums.length;
        int q = queries.length;
        
        int s = 0;
        int e = q;
        
        int ans = -1;
        
        
        while(s <= e){
            int start[] = new int[n];
            int end[] = new int[n];
            int mid = (s+e)/2;
            for(int i=0;i<mid;i++){
                int l = queries[i][0];
                int r = queries[i][1];
                int val = queries[i][2];
                start[l]+= val;
                end[r] +=val;
            }
            int sum = 0;
            boolean possible = true;
            for(int i=0;i<n;i++){
                sum += start[i];
                
                if(nums[i] > sum){
                    possible = false;
                    break;
                }
                sum -= end[i];
            }
            
            if(possible){
                ans = mid;
                e = mid-1;
            }else{
                s = mid +1;
            }
        }
        
        
        
        return ans;
        
    }
}",1454849247
Pankaj Lamgria,Pankaj_lamgria,772,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        long long n=nums.size(),sum=0;
        vector<long long>presum(n,0),postsum(n,0);
        for(int i=0;i<n;i++){
            presum[i]=sum;
            sum+=nums[i];
        }
        sum=0;
        for(int i=n-1;i>=0;i--){
            postsum[i]=sum;
            sum+=nums[i];
        }
        int count=0;
        for(int i=0;i<n;i++){
            if(nums[i]==0 && presum[i]==postsum[i])count+=2;
            else if(nums[i]==0 && abs(presum[i]-postsum[i])==1)count++;
        }
        return count;
    }
};",1454811416
Pankaj Lamgria,Pankaj_lamgria,772,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n=nums.size();
        vector<long long>pre(n+1,0);
        for(auto it:queries){
            pre[it[0]]--;
            pre[it[1]+1]++;
        }
        long long sum=0;
        for(int i=0;i<n;i++){
            sum+=pre[i];
            if(nums[i]+sum>0)return false;
        }
        return true;
    }
};",1454821564
Pankaj Lamgria,Pankaj_lamgria,772,3643,cpp,"class Solution {
public:
    bool isPos(vector<int>&nums,int mid,vector<vector<int>>&queries){
        int n=nums.size();
        vector<long long>pre(n+1,0);
        for(int i=0;i<=mid;i++){
            auto it=queries[i];
            pre[it[0]]-=it[2];
            pre[it[1]+1]+=it[2];
        }
        long long sum=0;
        for(int i=0;i<n;i++){
            sum+=pre[i];
            if(nums[i]+sum>0)return false;
        }
        return true;
    }
    bool isalready(vector<int>&nums){
        for(auto it:nums){
            if(it!=0)return false;
        }
        return true;
    }
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n=nums.size(),m=queries.size();
        int l=0,r=m-1,ans=-2;
        if(isalready(nums)){
            return 0;
        }
        while(l<=r){
            int mid=l+(r-l)/2;
            if(isPos(nums,mid,queries)){
                ans=mid;
                r=mid-1;
            }
            else l=mid+1;
        }
        return ans+1;
    }
};",1454834536
Shenglong Chen,chenshenglong1990,775,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int sums[2][nums.size() + 2];
        memset(sums, 0, sizeof(sums));
        for (int i = 0; i< nums.size(); ++ i) {
            sums[0][i + 1] = sums[0][i] + nums[i];
        }
        for (int i = nums.size() - 1; i >= 0; -- i) {
            sums[1][i + 1] = sums[1][i + 2] + nums[i];
        }
        int res = 0;
        for (int i = 0; i < nums.size(); ++ i) {
            if (nums[i] == 0) {

                if (sums[0][i + 1] == sums[1][i + 1]) res += 2;
                if (abs(sums[0][i + 1] - sums[1][i + 1]) == 1 ) res += 1;
                
            }
        }
        return res;
        
    }
};",1454813867
Shenglong Chen,chenshenglong1990,775,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int diff[nums.size() + 1];
        memset(diff, 0, sizeof(diff));
        for (auto & x : queries) {
            diff[x[0]] ++;
            diff[x[1] + 1] -- ;
        
        }
        int cur = 0;
        for (int i = 0; i < nums.size(); ++ i) {
            cur += diff[i];
            if (cur < nums[i])  return false;
        }
        return true;
        
    }
};",1454822225
Shenglong Chen,chenshenglong1990,775,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int low = 0;
        int high = queries.size() - 1;
        bool flag = 0;
        for (int i = 0; i < nums.size(); ++ i) {
            if (nums[i] ) {
                flag = 1;
            }
        }
        if (flag == 0) {
            return 0;
        }

        auto check = [&](int idx) -> bool {
            int diff[nums.size() + 1];
            memset(diff, 0, sizeof(diff));
            for (int i = 0; i <= idx; ++ i) {
                auto & x = queries[i];
                diff[x[0]] += x[2];
                diff[x[1] + 1] -= x[2];
            }
            int cur = 0;
            for (int i = 0; i < nums.size(); ++i) {
                cur += diff[i];
                if (cur < nums[i])
                    return false;
            }
            return true;
        };
        
        while (low <= high) {
            int mid = (low + high) >> 1;
            if (check(mid)) {
                high = mid - 1;
            } else {
                low = mid + 1;
            }
        }
        if (low == queries.size()) return -1;
        return low + 1;
        
    }
};",1454834557
Divyansh Sah,divyanshsah18,776,3616,cpp,"class Solution {
public:
    bool poss(int i,int dir,vector<int>& nums){
        int n = nums.size();
        vector<int> temp = nums; 
        int curr = i;
        while (curr >= 0 && curr < n) {
            if (temp[curr] == 0) {
                curr += dir; 
            } else {
                temp[curr]--;       
                dir = -dir; 
                curr += dir; 
            }
        }
        bool allZero = true;
        for (int i = 0; i < temp.size(); ++i) {
            if (temp[i] != 0) {
                allZero = false;
                break;
            }
        }
        return allZero;
    }
    int countValidSelections(vector<int>& nums) {
        int n=nums.size();
        int ans=0;
        for(int i=0;i<n;i++){
            if(nums[i]==0){
                if(poss(i,-1,nums)){
                    ans++;
                }
                if(poss(i,1,nums)){
                    ans++;
                }
            }
        }
        return ans;
    }
};",1454811678
Divyansh Sah,divyanshsah18,776,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        vector<int> a(n + 1, 0),b(n+1,0);
        for (auto it : queries) {
            int l = it[0];
            int r = it[1];
            a[l] -= 1;
            if (r + 1 < n) {
                a[r + 1] += 1;
            }
        }
        b[0]=a[0];
        for(int i=1;i<n;i++){
            b[i]=b[i-1]+a[i];
        }
        int z=1;
        for(int i=0;i<n;i++){
            if(nums[i]+min(b[i],0)>0) {
                z=0;
                break;
            }
        }
        return z==1;
    }
};",1454826970
Divyansh Sah,divyanshsah18,776,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        int q = queries.size();
        int l = 0, h = q, result = -1;

        while (l <= h) {
            int mid = l + (h - l) / 2;
            vector<int> aa = nums;
            vector<int> a(n + 1, 0), b(n + 1, 0);

            for (int i = 0; i < mid; ++i) {
                int ll = queries[i][0];
                int r = queries[i][1];
                int val = queries[i][2];
                a[ll] -= val;
                if (r + 1 < n) {
                    a[r + 1] += val;
                }
            }

            b[0] = a[0];
            for (int i = 1; i < n; ++i) {
                b[i] = b[i - 1] + a[i];
            }

            bool z = true;
            for (int i = 0; i < n; ++i) {
                aa[i] += b[i];
                if (aa[i] > 0) {
                    z = false;
                    break;
                }
            }

            if (z) {
                result = mid;
                h = mid - 1;
            } else {
                l = mid + 1;
            }
        }

        return result;
    }
};
",1454841899
MSMahesh,MSMahesh123,779,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int sum = 0;
        for(auto i : nums) sum += i;

        int s = 0;
        int count = 0;
        for(int i = 0; i < nums.size(); i++) {
            if(nums[i] == 0){
                if(abs(s - sum) <= 1) count++;
                if(s == sum) count++;
            }
            s += nums[i];
            sum -= nums[i];
        }

        return count;
    }
};",1454810628
MSMahesh,MSMahesh123,779,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        vector<int> vt(nums.size() + 1, 0);
        for(int i = 0; i < queries.size(); i++) {
            int u = queries[i][0];
            int v = queries[i][1];
            vt[u]++;
            vt[v + 1]--;
        }
        int count = 0;
        for(int i = 0; i < nums.size(); i++) {
            count += vt[i];
            if(nums[i] != 0 && nums[i] > count) return false;
        }
        return true;
    }
};",1454833329
MSMahesh,MSMahesh123,779,3643,cpp,"class Solution {
public:

    bool helper(vector<int>& nums, vector<vector<int>>& queries, int k) {
        vector<int> vt(nums.size() + 1, 0);
        for(int i = 0; i < k; i++) {
            int u = queries[i][0];
            int v = queries[i][1];
            int val = queries[i][2];
            vt[u] += val;
            vt[v + 1] -= val;
        }
        int count = 0;
        for(int i = 0; i < nums.size(); i++) {
            count += vt[i];
            if(nums[i] != 0 && nums[i] > count) return false;
        }
        return true;
    }

    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int l = 0, r = queries.size();
        int ans = -1;
        while(l <= r) {
            int mid = l + (r - l)/2;
            if(helper(nums, queries, mid)){
                ans = mid;
                r = mid - 1;
            }
            else l = mid + 1;
        }

        return ans;
    }
};",1454841956
sandy3006,sandy3006,780,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int n=nums.size(),vC=0;
        auto isZ=[&](int s,int d) -> bool{
            vector<int> t=nums;
            int c=s;
            while(c>=0 && c<n){
                if(t[c]==0) c+=d;
                else{
                    t[c]--;
                    d=-d;
                    c+=d;
                }
            }
            for(int k:t) if(k!=0) return false;
            return true;
        };
        for(int i=0;i<n;i++){
            if(nums[i]==0){
                if(isZ(i,1)) vC++;
                if(isZ(i,-1)) vC++;
             }
        }
        return vC;
    }
};",1454849386
sandy3006,sandy3006,780,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n=nums.size();
        int q=queries.size();

        vector<int> cnt(n+1,0);
        // for(auto querey:queries){
        //     int s=querey[0],e=querey[1];
        //     for(int i=s;i<=e;i++){
        //         cnt[i]++;
        //     }
        // }
        // int c=0;
        // for(int i=0;i<n;i++){
        //     if(nums[i]-cnt[i]>0) return false;
        // }
        for(auto qq:queries){
            int s=qq[0],e=qq[1];
            cnt[s]++;
            if(e+1<n) cnt[e+1]--;
        }
        for(int i=1;i<n;i++) cnt[i]+=cnt[i-1];
        for(int i=0;i<n;i++){
            if(nums[i]-cnt[i]>0) return false;
        }
        
        return true;
    }
};",1454818616
sandy3006,sandy3006,780,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n=nums.size(),q=queries.size();
        vector<int> zero;
        int l=0,r=q,res=-1;
        while(l<=r){
            int m=l+(r-l)/2;
            vector<int> d(n+1,0);
            for(int i=0;i<m;i++){
                int s=queries[i][0],e=queries[i][1],v=queries[i][2];
                d[s]-=v;
                if(e+1 < n) d[e+1]+=v;
                
            }
            int dec=0;
            bool isZ=true;
            for(int i=0;i<n;i++){
                dec+=d[i];
                zero.push_back(dec);
                if(nums[i]+dec>0){
                    isZ=false;
                    break;
                }
            }
            if(isZ){
                res=m;
                r=m-1;
            }
            else l=m+1;
        }
        return res;
    }
};",1454839291
Mohit Kanodia,yoda_codiyapa,781,3616,java,"class Solution {
    public int countValidSelections(int[] nums) {
        int n = nums.length;
        int ts = 0;
        for(int i : nums) {
            ts+=i;
        }

        int ps= 0;
        int ans=0;
        for(int i = 0; i < n; i++) {
            ps+=nums[i];
            if(nums[i] == 0) {
                if(ps == ts - ps) {
                    ans += 2;
                } else if(Math.abs(2*ps-ts) == 1) {
                    ans += 1;
                }
            }
        }
        return ans;
    }
}",1454813013
Mohit Kanodia,yoda_codiyapa,781,3639,java,"class Solution {
    public boolean isZeroArray(int[] nums, int[][] queries) {
        int n = nums.length;
        int[] dif = new int[n+1];
        for(int[] x : queries) {
            dif[x[0]] += 1;
            dif[x[1]+1] -= 1;
        }
        int[] ps = new int[n];
        for(int i = 0; i < n; i++) {
            ps[i] = (i == 0) ? dif[i] : ps[i-1] + dif[i];
        }

        for(int i= 0; i < n; i++) {
            if(nums[i] > ps[i]) {
                return false;
            }
        }
        return true;
    }
}",1454823025
Mohit Kanodia,yoda_codiyapa,781,3643,java,"class Solution {
    public int minZeroArray(int[] nums, int[][] queries) {
        int n = nums.length;
        int m = queries.length;

        int low = 0;
        int high = m;

        while(low < high) {
            int mid = low + (high - low)/2;
            boolean ch = check(mid, n, nums, m, queries);
            if(ch) {
                high = mid;
            } else {
                low = mid + 1;
            }
        }

        if(check(low, n, nums, m, queries)) {
            return low;
        }
        return -1;
    }

    public boolean check(int k, int n, int[] nums, int m, int[][] queries) {
        int[] dif = new int[n+1];
        for(int j = 0; j < k; j++) {
            dif[queries[j][0]] += queries[j][2];
            dif[queries[j][1] + 1] -= queries[j][2];
        }
        
        int[] ps = new int[n];
        for(int i = 0; i < n; i++) {
            ps[i] = (i == 0) ? dif[i] : ps[i-1] + dif[i];
        }

        for(int i= 0; i < n; i++) {
            if(nums[i] > ps[i]) {
                return false;
            }
        }
        return true;
    }
}",1454834696
mittaludit768,mittaludit768,782,3616,cpp,"class Solution {
public:
    bool sim(vector<int> nums, int curr, int direction) {
    int n = nums.size();
    while (curr >= 0 && curr < n) {
        if (nums[curr] == 0) {
            curr += direction;
        } else if (nums[curr] > 0) {
            nums[curr]--;
            direction = -direction;
            curr += direction;
        }
    }
    for (int num : nums) {
        if (num != 0) return false;
    }
    return true;
}
    int countValidSelections(vector<int>& nums) {
        int n=nums.size();
        int cnt=0;
        for(int i=0;i<n;i++)
        {
            if(nums[i]==0)
            {
                if(sim(nums,i,-1))
                    cnt++;
                if(sim(nums,i,1))
                    cnt++;
            }
        }
        return cnt;
    }
};",1454807927
mittaludit768,mittaludit768,782,3639,cpp,"typedef long long ll;
class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        ll n=nums.size();
        vector<ll> diff(n+1,0);
        for(auto i: queries)
        {
            ll l=i[0];
            ll r=i[1];
            diff[l]++;
            diff[r+1]--;
        }
        ll cd=0;
        vector<ll> pref(n+1,0);
        pref[0]=diff[0];
        for(ll i=1;i<=n;i++)
        {
            pref[i]=pref[i-1]+diff[i];
        }
        for(ll i=0;i<nums.size();i++)
        {
            ll c=pref[i];
            if(nums[i]-c>0)
                return 0;
        }
        return 1;
        
    }
};",1454816591
mittaludit768,mittaludit768,782,3643,cpp,"typedef long long ll;
class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries,ll k) {
        ll n=nums.size();
        vector<ll> diff(n+1,0);
        for(ll i=0;i<k;i++)
        {
            ll l=queries[i][0];
            ll r=queries[i][1];
            ll v=queries[i][2];
            diff[l]+=v;
            diff[r+1]-=v;
        }
        ll cd=0;
        vector<ll> pref(n+1,0);
        pref[0]=diff[0];
        for(ll i=1;i<=n;i++)
        {
            pref[i]=pref[i-1]+diff[i];
        }
        for(ll i=0;i<nums.size();i++)
        {
            ll c=pref[i];
            if(nums[i]-c>0)
                return 0;
        }
        return 1;
        
    }
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        ll l=0, r=queries.size(),ans=-1;
        while (l<=r) {
            ll mid=l+(r- l) / 2;
            if (isZeroArray(nums, queries, mid)) {
                ans=mid; 
                r=mid-1;
            } else {
                l=mid+1;
            }
        }

        return ans;
    }
};",1454834703
MIHIR,MiHiR_Kr,783,3616,cpp,"class Solution {
public:
    bool fun(vector<int> nums, int start, int d) {
        int n = nums.size();
        int curr = start;
    
        while (curr >= 0 && curr < n) {
            if (nums[curr] == 0) {
                curr += d; 
            } else {
                nums[curr]--;      
                d *= -1;   
                curr += d; 
            }
        }
    
        
        for (int x : nums) {
            if (x != 0) return false;
        }
        return true;
    }
    int countValidSelections(vector<int>& nums) {
        int n = nums.size();
        int ans = 0;
        for(int i=0;i<n;i++){
            if(nums[i]==0){
                if(fun(nums,i,1))ans++;
                if(fun(nums,i,-1))ans++;
            }
        }

        return ans;
    }
};",1454812348
MIHIR,MiHiR_Kr,783,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& q) {
        int n = nums.size();
        int m = q.size();
        vector<int> v(n+1,0);

        for(int i=0;i<m;i++){
            int l = q[i][0];
            int r = q[i][1];
            v[l]++;
            v[r+1]--;
        }

        for(int i=1;i<=n;i++){
            v[i]+=v[i-1];
        }

        for(int i=0;i<n;i++){
            if(nums[i]>v[i])return false;
        }
        return true;
        
    }
};",1454822639
MIHIR,MiHiR_Kr,783,3643,cpp,"class Solution {
public:

    bool fun(int k,vector<int> nums, vector<vector<int>>& q){
        int n = nums.size();
        int m = q.size();
        vector<int> v(n+1,0);

        for(int i=0;i<=k;i++){
            int l = q[i][0];
            int r = q[i][1];
            int val = q[i][2];
            v[l]+=val;
            v[r+1]-=val;
        }

        for(int i=1;i<=n;i++){
            v[i]+=v[i-1];
        }

        for(int i=0;i<n;i++){
            if(nums[i]>v[i])return false;
        }
        return true;    
    }
    int minZeroArray(vector<int>& nums, vector<vector<int>>& q) {
        int n = nums.size();
        int m = q.size();
        int ans = -1;
        int lo = 0;
        int hi = m-1;
        bool flag = false;
        for(int i=0;i<n;i++){
            if(nums[i]!=0)flag=true;
        }
        if(!flag)return 0;

        while(lo<=hi){
            int mid = (lo+hi)/2;
            if(fun(mid,nums,q)){
                ans = mid;
                hi = mid-1;
            }
            else lo = mid+1;
        }

        return (ans==-1)?(-1):(ans+1);
             
    }
};",1454842040
hrithik_2468,hrithik_2468,784,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int n=nums.size();
        int rt=0;
        for(int i=n-1;i>=0;i--){
            rt=nums[i]+rt;
        }
        int lf=0,ans=0;
        for(int i=0;i<n;i++){
            if(nums[i]==0){
                if(abs(lf-rt)==1)ans++;
                else if(lf==rt)ans+=2;
            }
            lf+=nums[i];
            rt-=nums[i];
        }
        return ans;
    }
};",1454829414
hrithik_2468,hrithik_2468,784,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n=nums.size();
        vector<int> ops(n);
        for(int i=0;i<queries.size();i++){
            ops[queries[i][0]]++;
            if(queries[i][1]+1<n)ops[queries[i][1]+1]--;
        }
        int crops=0;
        for(int i=0;i<n;i++){
            crops+=ops[i];
            if(nums[i]>crops)return false;
        }
        return true;
    }
};",1454838126
hrithik_2468,hrithik_2468,784,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        long long l=0,h=queries.size();
        int ans=1e9,n=nums.size();
        while(l<=h){
            int mid=(l+h)/2;
            vector<int> ops(n);
            for(int i=0;i<mid;i++){
                ops[queries[i][0]]+=queries[i][2];
                if(queries[i][1]+1<n)ops[queries[i][1]+1]-=queries[i][2];
            }
            bool pos=true;
            int crops=0;
            for(int i=0;i<n;i++){
                crops+=ops[i];
                if(nums[i]>crops){
                    pos=false;
                    break;
                }
            }
            if(pos){
                ans=mid;
                h=mid-1;
            }
            else l=mid+1;
        }
        return ans==1e9?-1:ans;
    }
};",1454849523
yashgarg_,yashgarg_,786,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int n=nums.size(),p=0,sum=0,cnt=0;
        for(int i=0; i<n; i++){
            sum+=nums[i];
        }
        for(int i=0; i<n; i++){
            if(nums[i]==0){
                if(sum==2*p){
                    cnt+=2;
                }
                else if(abs(p-(sum-p))==1){
                    cnt++;
                }
            }
            p+=nums[i];
        }
        return cnt;
    }
};",1454816107
yashgarg_,yashgarg_,786,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n=nums.size();
        vector<int> freq(n+1,0);
        for(int i=0; i<queries.size(); i++){
            int l=queries[i][0],r=queries[i][1];
            freq[l]++;
            freq[r+1]--;
        }
        for(int i=1; i<n+1; i++){
            freq[i]+=freq[i-1];
        }
        for(int i=0; i<n; i++){
            if(freq[i]<nums[i]){
                return false;
            }
        }
        return true;
    }
};",1454826009
yashgarg_,yashgarg_,786,3643,cpp,"class Solution {
public:
    bool check(int m,vector<int> &nums,vector<vector<int>> &queries){
        int n=nums.size();
        vector<int> freq(n+1,0);
        for(int i=0; i<=m; i++){
            int l=queries[i][0],r=queries[i][1],val=queries[i][2];
            freq[l]+=val;
            freq[r+1]-=val;
        }
        for(int i=1; i<n+1; i++){
            freq[i]+=freq[i-1];
        }
        for(int i=0; i<n; i++){
            if(freq[i]<nums[i]){
                return false;
            }
        }
        return true;
    }
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n=nums.size(),l,r,m,d=-1;
        long long int sum=0;
        for(int i=0; i<n; i++){
            sum+=nums[i];
        }
        if(sum==0){
            return 0;
        }
        l=0; r=queries.size()-1;
        while(l<=r){
            m=l+(r-l)/2;
            if(check(m,nums,queries)){
                d=m+1;
                r=m-1;
            }
            else{
                l=m+1;
            }
        }
        return d;
    }
};",1454842165
Kevin Pan,Kevin_Pan,787,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        ans = 0
        n = len(nums)

        def isValid(x, left):
            dir = left
            curr = nums.copy()
            while x >= 0 and x < n:
                if curr[x] == 0:
                    x += dir
                else:
                    curr[x] -= 1
                    dir *= -1
                    x += dir
            return sum(curr) == 0

        for i in range(n):
            if nums[i] != 0:
                continue
            if isValid(i, -1):
                ans += 1
            if isValid(i, 1):
                ans += 1

        return ans
",1454816621
Kevin Pan,Kevin_Pan,787,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        n = len(nums)
        diff = [0] * (n + 1)
        for l, r in queries:
            diff[l] += 1
            diff[r + 1] -= 1
        for i in range(n):
            if i:
                diff[i] += diff[i - 1]
            if diff[i] < nums[i]:
                return False
        return True",1454821734
Kevin Pan,Kevin_Pan,787,3643,python3,"class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        n = len(nums)
        Q = len(queries)
        diff = [0] * (n + 1)
        for l, r, v in queries:
            diff[l] += v
            diff[r + 1] -= v
        for i in range(n):
            if i:
                diff[i] += diff[i - 1]
            if diff[i] < nums[i]:
                return -1

        def valid(x):
            for i in range(len(diff)):
                diff[i] = 0
            for i in range(0, x):
                l, r, v = queries[i]
                diff[l] += v
                diff[r + 1] -= v
            for i in range(n):
                if i:
                    diff[i] += diff[i - 1]
                if diff[i] < nums[i]:
                    return False
            return True
                
        lo, hi = 0, Q
        while lo < hi:
            mid = (lo + hi) // 2
            if valid(mid):
                hi = mid
            else:
                lo = mid + 1
        return lo",1454835016
svxvdp,svxvdp,788,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        N = len(nums)
        def ok(nums, i, direction):
            while 0 <= i < N:
                if nums[i] > 0:
                    nums[i] -= 1
                    direction = -direction
                i += direction

            for e in nums:
                if e != 0:
                    return False

            return True


        ans = 0
        for i in range(len(nums)):
            if nums[i] == 0:
                if ok(nums[:], i, 1):
                    ans += 1
                if ok(nums[:], i, -1):
                    ans += 1
        return ans

        ",1454814869
svxvdp,svxvdp,788,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        D = defaultdict(int)
        for a, b in queries:
            D[a] += 1
            D[b + 1] -= 1

        L = [[k, v] for k, v in D.items() if v != 0]
        L.sort()


        reach = 0
        li = 0

        for i, e in enumerate(nums):
            while li < len(L) and L[li][0] <= i:
                reach += L[li][1]
                li += 1
            
            if reach < e:
                return False
        return True

        ",1454831588
svxvdp,svxvdp,788,3643,python3,"class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        if sum(nums) == 0:
            return 0

        
        def ok(hi):
            D = defaultdict(int)
            for i in range(hi + 1):
                a, b, t = queries[i]
                D[a] += t
                D[b + 1] -= t

            L = [[k, v] for k, v in D.items() if v != 0]
            L.sort()

            reach = 0
            li = 0

            for i, e in enumerate(nums):
                while li < len(L) and L[li][0] <= i:
                    reach += L[li][1]
                    li += 1
                
                if reach < e:
                    return False
            return True

        lo = 0
        hi = len(queries)
        while lo < hi:
            mid = (lo + hi) // 2
            if not ok(mid):
                lo = mid + 1
            else:
                hi = mid
        return -1 if lo == len(queries) else lo + 1




",1454849709
_Manohar_Singh_,_Manohar_Singh_,789,3616,java,"class Solution {
    public int countValidSelections(int[] numbers) {
        
    int cnt = 0;
        int n = numbers.length;

        for (int x = 0; x < n; x++)
        {
            if (numbers[x] == 0) {
                if (First(x, true, numbers)) {
                    cnt++;
                }
                if (First(x, false, numbers)) {
                    cnt++;
                }
            }
        }
        return cnt;
    }

    private boolean First(int i, boolean dir, int[] arr) {
        int[] x = Second(arr);
        return FirstHelper(i, dir, x);
    }

    private int[] Second(int[] nums1)
    {
        int[] cpy = new int[nums1.length];
        System.arraycopy(nums1, 0, cpy, 0, nums1.length);
        return cpy;
    }

    public boolean FirstHelper(int x, boolean direc, int[] cpy) {
        int a = x;
        int n = cpy.length;

        while (a >= 0 && a < n) {
            if (cpy[a] == 0) {
                a = direc ? a + 1 : a - 1;
            } 
            else 
            {
                cpy[a]--;
                direc = !direc;
                a = direc ? a + 1 : a - 1;
            }
        }
        return HelperUtil (cpy);
    }

    private boolean HelperUtil (int[] arr)
    {
        for (int x : arr) {
            if (x != 0) {
                return false;
            }
        }
        return true;
    }
}",1454838268
_Manohar_Singh_,_Manohar_Singh_,789,3639,java,"class Solution {
    public boolean isZeroArray(int[] arr, int[][] q) 
    {
        int n = arr.length;
        int[] d = HelpUtil(n);

        HelpUtil2(d, q, n);

        return HelpUtil3(arr, d, n);
    }

    private int[] HelpUtil(int n) 
    {
        return new int[n + 1];
    }

    public void HelpUtil2(int[] dd, int[][] qq, int n) {
        for (int[] q : qq) 
        {
            int i = q[0], j = q[1];
            dd[i]--;
            if (j + 1 < n) 
            {
                dd[j + 1]++;
            }
        }
    }

    private boolean HelpUtil3(int[] arr, int[] dd, int n) {
        int dc = 0;
        for (int i = 0; i < n; i++)
        {
            dc += dd[i];
            arr[i] += dc;
            if (arr[i] > 0) return false;
        }
        return true;
    }
}",1454829770
_Manohar_Singh_,_Manohar_Singh_,789,3643,java,"class Solution 
{
    private int[] arr2;
    private int[] arr3;
    
    public int minZeroArray(int[] arr, int[][] q) {
      int n = arr.length;
        arr2 = arr.clone();

        if (Helper1(arr2)) {
            arr3 = arr2.clone();
            return 0;
        }

        int ll = 0, rr = q.length, res = -1;
        boolean flg = false;

        while (ll <= rr) {
            int md = (ll + rr) / 2;

            if (Helper2(md, q)) {
                res = md;
                rr = md - 1;
            } else {
                ll = md + 1;
            }

            if (!flg && md == q.length / 2) {
                Helper3(md, q);
                flg = true;
            }
        }

        return res != -1 ? res : -1;
    }

    private boolean Helper2(int k, int[][] qq)
    {
        int n = arr2.length;
        int[] dd = new int[n + 1];

        for (int i = 0; i < k; i++)
        {
            int l = qq[i][0], r = qq[i][1], val = qq[i][2];
            dd[l] += val;
            if (r + 1 < n) {
                dd[r + 1] -= val;
            }
        }

        int ttl = 0;
        for (int i = 0; i < n; i++) {
            ttl += dd[i];
            if (ttl < arr2[i]) 
            {
                return false;
            }
        }
        return true;
    }

    private void Helper3(int md, int[][] qq)
    {
        int n = arr2.length;
        int[] dd = new int[n + 1];

        for (int i = 0; i < md; i++) {
            int l = qq[i][0], r = qq[i][1], v = qq[i][2];
            dd[l] += v;
            if (r + 1 < n) {
                dd[r + 1] -= v;
            }
        }

        arr3 = arr2.clone();
        int ttl = 0;
        for (int i = 0; i < n; i++) {
            ttl += dd[i];
            arr3[i] = Math.max(0, arr2[i] - ttl);
        }
    }

    public boolean Helper1(int[] arr) 
    {
        for (int x : arr) 
        {
            if (x != 0) 
            {
                return false;
            }
        }
        return true;
    }
}",1454849765
Gale_fring,Gale_fring,790,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int n = nums.size(), count = 0;
        auto simulate = [&](int start, int direction) {
            vector<int> temp = nums;
            int curr = start;
            while (curr >= 0 && curr < n) {
                if (temp[curr] == 0) {
                    curr += direction;
                } else {
                    temp[curr]--;
                    direction = -direction;
                    curr += direction;
                }
            }
            return all_of(temp.begin(), temp.end(), [](int x) { return x == 0; });
        };
        for (int i = 0; i < n; ++i) {
            if (nums[i] == 0) {
                if (simulate(i, 1)) count++;
                if (simulate(i,-1)) count++;
            }
        }
        return count;
    }
};
",1454842430
Gale_fring,Gale_fring,790,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        
        int n=nums.size();
        vector<int>pre(n+1);
        for(auto i:queries)
        {
            pre[i[0]]++;
            pre[i[1]+1]--;
        }
        for(int i=1;i<n;i++)
            pre[i]+=pre[i-1];
        for(int i=0;i<n;i++)
        {
            if(max(0,nums[i]-pre[i])>0)
                return 0;
        }
        return 1;
    }
};",1454820266
Gale_fring,Gale_fring,790,3643,cpp,"class Solution {
public:
    bool f(int mid,vector<int>& nums,vector<vector<int>>& q)
    {
        
        int n=nums.size();
        vector<int>pre(n+1);
        for(int i=0;i<mid;i++)
        {
            pre[q[i][0]]+=q[i][2];
            pre[q[i][1]+1]-=q[i][2];
        }
        for(int i=1;i<n;i++)
            pre[i]+=pre[i-1];
        for(int i=0;i<n;i++)
        {
            if(max(0,nums[i]-pre[i])>0)
                return 0;
        }
        return 1;
    }
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n=nums.size();
        int l=0;
        int r=queries.size();
        int ans=-1;
        while(l<=r)
        {
            int mid=(l+r)/2;
            if(f(mid,nums,queries))
            {
                ans=mid;
                r=mid-1;
            }
            else
                l=mid+1;
        }
        return ans;
    }
};",1454831677
selvaarumugamn,selvaarumugamn,791,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& arr) {
        int n = arr.size();
        vector<int> pre(n,0);
        for(int i=0; i<n; i++)
        {
            pre[i] = arr[i];
            pre[i] += (i == 0 ? 0 : pre[i-1]);
        }
        int cnt = 0;
        for(int i=0; i<n; i++)
        {
            if(arr[i] == 0)
            {
                int left = pre[i];
                int right = pre[n-1] - pre[i];
                if(left == right)   cnt+=2;
                else if((left+1 == right) || (right+1 == left)) cnt++;
            }
        }
        return cnt;
    }
};",1454814192
selvaarumugamn,selvaarumugamn,791,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& arr, vector<vector<int>> q) {
        int n = arr.size();
        vector<int> mpp(n+1,0);
        for(int i=0; i<q.size(); i++)
        {
            mpp[q[i][0]]++;
            mpp[q[i][1] + 1]--;
        }
        int crnt = 0;
        for(int i=0;i<n; i++)
        {
            crnt += mpp[i];
            if(arr[i]>crnt) return 0;
        }
        return 1;
    }
};",1454825511
selvaarumugamn,selvaarumugamn,791,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& arr, vector<vector<int>>& q) {
        int n = arr.size();
        int m = q.size();
        int low = 0,high = m;
        int ans = INT_MAX;
        while(low<=high)
        {
            int mid = low + (high - low)/2;
            vector<long long> mpp(n+1,0);
            for(int i=0; i<mid; i++)
            {
                mpp[q[i][0]]+=q[i][2];
                mpp[q[i][1]+1]-=q[i][2];
            }
            bool pos = 1;
            long long crnt = 0;
            for(int i=0; i<n; i++)
            {
                crnt += mpp[i];
                if(crnt<arr[i])
                {
                    pos = 0;
                    break;
                }
            }
            if(pos)
            {
                ans = min(ans , mid);
                high = mid - 1;
            }else{
                low = mid + 1;
            }
        }
        return (ans == INT_MAX ? -1 : ans);
    }
};",1454835121
soundboard,soundboard,792,3616,cpp,"class Solution {
public:

    int calc(vector<int>&a,int n, int idx)
    {
        vector<int>arr=a;
        int curr = idx;
        int dir = 1;
        int ans = 0;

        while(curr>=0 && curr<n)
            {
                if(arr[curr]==0)
                {
                    curr+=dir;
                }
                else
                {
                    arr[curr]--;
                    dir*=-1;
                    curr+=dir;
                }
            }

        bool flg = 1;
        for(auto x:arr) 
            {
                if(x!=0) {flg=0;break;}
            }

        ans+=flg;
        arr=a;
        dir=-1;
        curr=idx;
        flg=1;

        while(curr>=0 && curr<n)
            {
                if(arr[curr]==0)
                {
                    curr+=dir;
                }
                else
                {
                    arr[curr]--;
                    dir*=-1;
                    curr+=dir;
                }
            }

        for(auto x:arr) 
            {
               if(x!=0) {flg=0;break;}
            }

        ans+=flg;

        // cout<<idx<<"" ""<<ans<<endl;

        return ans;
        
    }
 

    int countValidSelections(vector<int>& arr) {
        int n = arr.size();
        int ans = 0;
        for(int i=0;i<n;i++)
            {
                if(arr[i]==0)
                ans+=calc(arr,n,i);
            }

        return ans;
    }
};",1454814034
soundboard,soundboard,792,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& arr, vector<vector<int>>& qq) {
        int n = arr.size();
        vector<int>mark(n);

        for(auto &q:qq)
            {
                mark[q[0]]++;
                if(q[1]+1<n) mark[q[1]+1]--;
            }

        int curr = 0;
        for(int i=0;i<n;i++)
            {
                curr+=mark[i];
                if(curr<arr[i]) return 0;
            }

        return 1;
    }
};",1454821430
soundboard,soundboard,792,3643,cpp,"class Solution {
public:

    bool check(vector<int>&arr, vector<vector<int>>& qq, int k)
    {
            int n = arr.size();
            vector<int>mark(n);
    
            for(int i=0;i<=k;i++)
                {
                    auto &q = qq[i];
                    mark[q[0]]+=q[2];
                    if(q[1]+1<n) mark[q[1]+1]-=q[2];
                }
    
            int curr = 0;
            for(int i=0;i<n;i++)
                {
                    curr+=mark[i];
                    if(curr<arr[i]) return 0;
                }
    
            return 1;
    }

    int minZeroArray(vector<int>& arr, vector<vector<int>>& qq) {
        int n = arr.size();

        int l=0,r=qq.size()-1, ans=-1;

        if(check(arr,qq,-1)) return 0;

        while(l<=r)
            {
                int mid = (l+r)/2;
                if(check(arr,qq,mid))
                {
                    ans = mid+1;
                    r = mid-1;
                }
                else
                {
                    l = mid+1;
                }
            }
        
        return ans;
    }
};",1454835126
Lord Algorithm,LordAlgorithms,793,3616,python3,"
class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        ans = 0
        n = len(nums)
        psm = [0] * (n + 1)
        for i, num in enumerate(nums):
            psm[i] = psm[i - 1] + num

        half, rmd = divmod(psm[-2], 2)

        for i in range(n):
            if nums[i] == 0:
                if psm[i] == half and rmd == 0:
                    ans += 2
                elif rmd == 1 and psm[i] in (half, half+1):
                    ans += 1
        return ans",1454823847
Lord Algorithm,LordAlgorithms,793,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        n = len(nums)
        dp = [0] * (n + 2)
        for lt, rt in queries:
            dp[lt] += 1
            dp[rt + 1] -= 1
        for i in range(n):
            dp[i] += dp[i - 1]
            if nums[i] > dp[i]:
                return False
        return True",1454833667
Lord Algorithm,LordAlgorithms,793,3643,python3,"class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        n = len(nums)

        def validate(x: int):
            dp = [0] * (n + 2)
            for i in range(x):
                lt, rt, val = queries[i]
                dp[lt] += val
                dp[rt + 1] -= val
            for i in range(n):
                dp[i] += dp[i - 1]
                if nums[i] > dp[i]:
                    return False
            return True

        lo, hi = 0, len(queries)
        while lo <= hi:
            m = (lo+hi) // 2
            if validate(m):
                hi = m-1
            else:
                lo = m+1
        return lo if lo <= len(queries) else -1",1454842465
Ying Liu,pein531,794,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int ans = 0;
        int sum = accumulate(nums.begin(), nums.end(), 0);
        int now = 0;
        for (int i = 0; i < nums.size(); i ++) {
            if (nums[i]) {
                now += nums[i];
            } else {
                if (now * 2 == sum) {
                    ans += 2;
                } else if (abs(now * 2 - sum) == 1) {
                    ans += 1;
                }
            }
        }
        return ans;
    }
};",1454806997
Ying Liu,pein531,794,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        vector<int> d(n + 1);
        for (auto &v : queries) {
            int l = v[0], r = v[1];
            d[l] ++;
            d[r + 1] --;
        }
        for (int i = 1; i < n; i ++) {
            d[i] += d[i - 1];
        }
        for (int i = 0; i < n; i ++) {
            if (nums[i] > d[i]) {
                return false;
            }
        }
        return true;
    }
};",1454809678
Ying Liu,pein531,794,3643,cpp,"class Solution {
public:
    vector<int> tr, tag;
    void apply(int id, int val) {
        tr[id] -= val;
        tag[id] += val;
    }
    void pd(int u) {
        if (tag[u]) {
            apply(u << 1, tag[u]);
            apply(u << 1 | 1, tag[u]);
            tag[u] = 0;
        }
    }
    void modify(int u, int l, int r, int L, int R, int val) {
        if (l > R || r < L) return;
        if (tr[u] <= 0) return;
        if (L <= l && r <= R) {
            apply(u, val);
            return;
        }
        pd(u);
        int mid = (l + r) >> 1;
        modify(u << 1, l, mid, L, R, val);
        modify(u << 1 | 1, mid + 1, r, L, R, val);
        tr[u] = max(tr[u << 1], tr[u << 1 | 1]);
    }
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        tr.resize((n << 2) + 1);
        tag.resize((n << 2) + 1);

        auto build = [&](auto && build, int u, int l, int r) -> void {
            if (l == r) {
                tr[u] = nums[l - 1];
                return;
            }
            int mid = (l + r) >> 1;
            build(build, u << 1, l, mid);
            build(build, u << 1 | 1, mid + 1, r);
            tr[u] = max(tr[u << 1], tr[u << 1 | 1]);
        };
        
        build(build, 1, 1, n);

        if (tr[1] <= 0) {
            return 0;
        }
        
        for (int i = 0; i < queries.size(); i ++) {
            int l = queries[i][0], r = queries[i][1], val = queries[i][2];
            modify(1, 1, n, l + 1, r + 1, val);
            // cout << tr[1] << endl;
            if (tr[1] <= 0) {
                return i + 1;
            }
        }



        return -1;
    }
};",1454835154
AlvGreat,AlvGreat,797,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        if all(num == 0 for num in nums):
            return len(nums) * 2
        
        ans = 0
        for i in range(len(nums)):
            if nums[i] != 0:
                continue
    
            s1 = sum(nums[0:i])
            s2 = sum(nums[i+1:])
            if s1 == s2 + 1:
                ans += 1
            elif s1 + 1 == s2:
                ans += 1
            elif s1 == s2:
                ans += 2
        return ans",1454812848
AlvGreat,AlvGreat,797,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        n = len(nums)
        queries = [[max(x, 0), min(n, y)] for x, y in queries]
        
        starts = [0] * n
        ends = [0] * n
        for x, y in queries:
            starts[x] += 1
            ends[y] += 1
        
        active_subtractions = 0
        for i, num in enumerate(nums):
            active_subtractions += starts[i]
            if num - active_subtractions > 0:
                return False
            active_subtractions -= ends[i]

        return True",1454824929
AlvGreat,AlvGreat,797,3643,python3,"class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        def canZeroArray(k, nums, queries):
            n = len(nums)
            queries = [[max(x, 0), min(n, y), z] for x, y, z in queries[:k]]  # only process first k queries
            
            starts = [0] * n
            ends = [0] * n
            for x, y, z in queries:
                starts[x] += z
                ends[y] += z
            
            active_subtractions = 0
            for i, num in enumerate(nums):
                active_subtractions += starts[i]
                if num - active_subtractions > 0:
                    return False
                active_subtractions -= ends[i]
    
            return True

        if not canZeroArray(len(queries), nums, queries):
            return -1
            
        l = 0
        r = len(queries)
        while l < r:
            mid = (l+r) // 2
            can_zero = canZeroArray(mid, nums, queries)
            if can_zero:
                r = mid
            else:
                l = mid+1
        
        return l
                ",1454842563
Rajendar Meti,RajendarMeti,798,3616,java,"class Solution {
    public int countValidSelections(int[] nums) {
        int ans = 0;
        for(int i=0;i<nums.length;i++){
            if(nums[i]==0){
                int newArr[] = new int[nums.length];
                int newArr2[] = new int[nums.length];
                for(int j=0;j<nums.length;j++){
                    newArr[j] = nums[j];
                    newArr2[j] = nums[j]; 
                }
                if(isValid(newArr, i, true)){
                    ans++;
                }
                if(isValid(newArr2,i,false)){
                    ans++;
                }
            }
        }
        return ans;
    }

    public boolean isValid(int[] nums, int idx, boolean isRight){
        boolean dir = isRight;
        while(idx>=0 && idx<nums.length){
            if(nums[idx]==0){
                if(dir){
                    idx++;
                }else{
                    idx--;
                }
            }else if(nums[idx]>0){
                nums[idx]=nums[idx]-1;
                dir = !dir;
                if(dir){
                    idx++;
                }else{
                    idx--;
                }
            }
            
        }
        for(int e : nums){
            if(e!=0){
                return false;
            }
        }
        
        return true;
    }
}",1454830788
Rajendar Meti,RajendarMeti,798,3639,java,"class Solution {
    public boolean isZeroArray(int[] nums, int[][] queries) {
        int n = nums.length;
        int[] temp = new int[n+1];
        for(int[] query : queries){
            int l = query[0];
            int r = query[1];
            temp[l]++;
            temp[r+1]--;
        }
        for(int i=1;i<=n;i++){
            temp[i] = temp[i]+temp[i-1];
        }
        for(int i=0;i<n;i++){
            int cur = nums[i];
            int pos = Math.max(0,cur-temp[i]);
            if(pos>0){
                return false;
            }
        }
        return true;
    }
}",1454840692
Rajendar Meti,RajendarMeti,798,3643,java,"class Solution {
    public int minZeroArray(int[] nums, int[][] queries) {

        int low = 0, high = queries.length;
        int ans = Integer.MAX_VALUE;
        while(low<=high){
            int mid = low + (high-low)/2;
            if(isPos(nums, queries, mid)){
                ans = mid;
                high = mid-1;
            }else{
                low = mid+1;
            }
        }

        if(ans==Integer.MAX_VALUE){
            return -1;
        }else{
            return ans;
        }
        
    }
    public boolean isPos(int[] nums, int[][] queries, int qIdx){
        int n = nums.length;
        int[] temp = new int[n+1];
        for(int i=0;i<qIdx;i++){
            int l = queries[i][0];
            int r = queries[i][1];
            int val = queries[i][2];
            temp[l]+=val;
            temp[r+1]-=val;
        }
        for(int i=1;i<=n;i++){
            temp[i] = temp[i]+temp[i-1];
        }
        for(int i=0;i<n;i++){
            int cur = nums[i];
            int pos = Math.max(0,cur-temp[i]);
            if(pos>0){
                return false;
            }
        }
        return true;
    }
}",1454849935
NGUYEN HUU LAI,lainhdev,799,3616,golang,"func countValidSelections(nums []int) int {
   n := len(nums)
    count := 0

    for i := 0; i < n; i++ {
        if nums[i] == 0 {

            if isValid(nums, i, -1) {
                count++
            }

            if isValid(nums, i, 1) {
                count++
            }
        }
    }

    return count
}

func isValid(nums []int, curr int, dir int) bool {
    numsCopy := make([]int, len(nums))
    copy(numsCopy, nums) 

    for {
        if curr < 0 || curr >= len(numsCopy) {
            break 
        }

        if numsCopy[curr] == 0 {
            curr += dir
        } else if numsCopy[curr] > 0 {
            numsCopy[curr]--
            dir *= -1
            curr += dir 
        }
    }

    for _, num := range numsCopy {
        if num != 0 {
            return false
        }
    }

    return true
}",1454809817
NGUYEN HUU LAI,lainhdev,799,3639,golang,"func isZeroArray(nums []int, queries [][]int) bool {
    n := len(nums)
    freq := make([]int, n)

    for _, q := range queries {
        l, r := q[0], q[1]
        freq[l]++
        if r+1 < n {
            freq[r+1]--
        }
    }

    for i := 1; i < n; i++ {
        freq[i] += freq[i-1]
    }

    for i, num := range nums {
        if num > freq[i] {
            return false
        }
    }

    return true
}",1454813548
NGUYEN HUU LAI,lainhdev,799,3643,golang,"func minZeroArray(nums []int, queries [][]int) int {
    n := len(nums)
    m := len(queries)

    isZero := func(k int) bool {
        if k == 0 {
            for i := 0; i < n; i++ {
                if nums[i] > 0 {
                    return false
                }
            }
            return true
        }

        diff := make([]int, n+1)
        for q := 0; q < k; q++ {
            l, r, val := queries[q][0], queries[q][1], queries[q][2]
            diff[l] += val
            if r+1 < n {
                diff[r+1] -= val
            }
        }

        total := 0
        for i := 0; i < n; i++ {
            total += diff[i]
            if total < nums[i] {
                return false
            }
        }

        return true
    }

    l, r := 0, m
    ans := -1
    for l <= r {
        c := (l + r) / 2

        if isZero(c) {
            ans = c
            r = c - 1
        } else {
            l = c + 1
        }
    }

    return ans
}",1454849942
yahoo010206,yahoo010206,801,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        res = 0
        left, right = 0, sum(nums)
        for num in nums:
            if num:
                left+=num
                right-=num
            elif num==0 and abs(left-right)<=1:
                res += 1+(left==right)
        return res",1454811197
yahoo010206,yahoo010206,801,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        queries = sorted(queries, key=lambda x:(x[0], -x[1]))
        rollback, idx, cnt = [0]*len(nums), 0, 0
        for i, num in enumerate(nums):
            while idx<len(queries) and queries[idx][0]==i:
                cnt+=1
                rollback[queries[idx][1]]+=1
                idx+=1
            if num>cnt:
                return False
            cnt-=rollback[i]
        return True
            ",1454824110
yahoo010206,yahoo010206,801,3643,python3,"class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        # print(list(zip(enumerate(queries))))
        queries = sorted(enumerate(queries), key=lambda x:x[1][0])
        def find(target):
            rollback, idx, cnt = [0]*len(nums), 0, 0
            for i, num in enumerate(nums):
                while idx<len(queries) and queries[idx][1][0]==i:
                    if queries[idx][0]<=target:
                        cnt+=queries[idx][1][2]
                        rollback[queries[idx][1][1]]+=queries[idx][1][2]
                    idx+=1
                if num>cnt:
                    return False
                cnt-=rollback[i]
            return True
        if sum(nums)==0:
            return 0
        first, last = 0, len(queries)-1
        while first<=last:
            mid = (first+last)>>1
            # print(first,last, mid, find(mid))
            if find(mid):
                last = mid-1
            else:
                first = mid+1
        return -1 if first ==len(queries) else first+1",1454842671
kamotekim,kamotekim,802,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        // need balance
        int n = nums.size();        
        vector<int> forward(n);
        vector<int> backward(n);
        int cur = 0;
        for (int i = 0; i < n; i++) {
            cur += nums[i];
            forward[i] = cur;
        }
        
        cur = 0;
        for (int i = n - 1; i >= 0; i--) {
            cur += nums[i];
            backward[i] = cur;
        }
        int res = 0;
        for (int i = 0; i < n; i++) {
            if (nums[i] == 0) {
                // possible approach
                int left = i > 0 ? forward[i - 1] : 0;
                int right = i < n - 1 ? backward[i + 1]: 0;
                
                if (left == right) {
                    // 2 ways
                    res += 2;
                } else if (left == right + 1) {
                    res += 1;
                } else if (right == left + 1) {
                    res += 1;
                }
            }
        }
        return res;
    }
};",1454816744
kamotekim,kamotekim,802,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        vector<int> tag(n + 1);
        
        for (auto &query: queries) {
            tag[query[0]] += 1;
            tag[query[1] + 1] -= 1;
        }
        
        int cur = 0;
        for (int i = 0; i < n; i++) {
            cur += tag[i];
            if (cur < nums[i]) return false;
        }
        return true;
    }
};",1454824540
kamotekim,kamotekim,802,3643,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries, int cand) {
        int n = nums.size();
        vector<int> tag(n + 1);
        
        for (int i = 0; i < cand; i++) {
            auto& query = queries[i];
            tag[query[0]] += query[2];
            tag[query[1] + 1] -= query[2];
        }
        
        int cur = 0;
        for (int i = 0; i < n; i++) {
            cur += tag[i];
            if (cur < nums[i]) return false;
        }
        return true;
    }
    
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        int left = 0; int right = queries.size();
        
        while (left <= right) {
            int m = (left + right) / 2;
            cout << m << endl;
            if (isZeroArray(nums, queries, m)) {
                right = m - 1;
            } else {
                left = m + 1;
            }
        }
        
        return right + 1 <= queries.size() ? right  + 1: -1;
    }
};",1454842674
a7174812,a7174812,804,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int sum = 0;
        for(auto i : nums)
            sum += i;
        int ans = 0;
        if(sum % 2 == 0){
            for(int i = 0, cnt = 0; i < nums.size(); ++i){
                cnt += nums[i];
                if(nums[i] == 0 && cnt == sum / 2)
                    ans += 2;
            }
        }else{
            for(int i = 0, cnt = 0; i < nums.size(); ++i){
                cnt += nums[i];
                if(nums[i] == 0 && (cnt == (sum+1) / 2 || cnt == sum/2)){
                    ++ans;
                }
            }
        }
        

        return ans;
    }
};",1454812625
a7174812,a7174812,804,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        vector<int> v(nums.size()+1);
        for(auto q : queries)
            ++v[q[0]], --v[q[1]+1];

        for(int i = 0, cur = 0; i < nums.size(); ++i){            
            cur += v[i];
            if(nums[i] > cur)
                return false;
        }
        return true;
    }
};",1454817928
a7174812,a7174812,804,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int lo = 0;
        int hi = queries.size() + 1;
        
        while(lo < hi){
            int mid = lo + (hi-lo) / 2;
            // cout<<mid<<endl;
            if(helper(nums, queries, mid)){
                hi = mid;
            }else
                lo = mid + 1;
        }
        
        if(hi == queries.size()+1)
            return -1;
        return hi;
    }

    bool helper(vector<int>& nums, vector<vector<int>>& queries, int n){
        vector<int > v(nums.size()+1);
        
        for(int i = 0; i < n; ++i){
            v[queries[i][0]] += queries[i][2];
            v[queries[i][1]+1] -= queries[i][2];
        }
            
        
        for(int i = 0, cur = 0; i < nums.size(); ++i){            
            cur += v[i];
            if(nums[i] > cur)
                return false;
        }
        // cout<<n<<""true""<<endl;
        return true;
    }
};",1454835401
10hilded,10hilded,805,3616,java,"class Solution {
    public int countValidSelections(int[] nums) {
        int res = 0;
        int sum = 0;
        for (int i = 0; i < nums.length; i++) {
            sum += nums[i];
        }
        int sumSoFar = 0;
        for (int i = 0; i < nums.length; i++) {
            int curr = nums[i];
            sumSoFar += curr;
            if (curr == 0){
                if (sumSoFar == sum - sumSoFar) {
                    res += 2;
                } else if (Math.abs(sumSoFar - (sum - sumSoFar)) == 1) {
                    res += 1;
                }
            }
        }

        return res;
    }
}",1454809419
10hilded,10hilded,805,3639,java,"class Solution {
    public boolean isZeroArray(int[] nums, int[][] queries) {
        Map<Integer,Integer> map = new HashMap<>();
        for (int i = 0; i < queries.length; i++) {
            int[] currQ = queries[i];
            map.put(currQ[0],map.getOrDefault(currQ[0], 0)+1);
            map.put(currQ[1]+1,map.getOrDefault(currQ[1]+1, 0)-1);
        }

        int currCount = 0;

        for (int i = 0; i < nums.length; i++) {
            currCount += map.getOrDefault(i, 0);
            if (currCount < nums[i]) {
                return false;
            }
        }

        return true;
    }
}",1454825785
10hilded,10hilded,805,3643,java,"class Solution {
    public int minZeroArray(int[] nums, int[][] queries) {
        int low = 0;
        int high = queries.length;
        if (!isZeroArrayWithK(nums, queries, high)) {
            return -1;
        }
        while (low < high) {
            int mid = (low + high)/2;
            if (isZeroArrayWithK(nums,queries,mid)) {
                high = mid;
            } else {
                low = mid+1;
            }
        }

        return low;
    }

    public boolean isZeroArrayWithK(int[] nums, int[][] queries, int k) {
        Map<Integer,Integer> map = new HashMap<>();
        for (int i = 0; i < k; i++) {
            int[] currQ = queries[i];
            map.put(currQ[0],map.getOrDefault(currQ[0], 0)+currQ[2]);
            map.put(currQ[1]+1,map.getOrDefault(currQ[1]+1, 0)-currQ[2]);
        }

        int currCount = 0;

        for (int i = 0; i < nums.length; i++) {
            currCount += map.getOrDefault(i, 0);
            if (currCount < nums[i]) {
                return false;
            }
        }

        return true;
    }
}",1454842709
Jayant Gupta,jayant2k1,806,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {

        int ans = 0, n = nums.size();
        for(int i = 0; i < n; i++) {
            if(nums[i]) continue;
            int left = 0, right = 0;
            for(int j = i-1; j >= 0; j--) left += nums[j];
            for(int j = i+1; j < n ;j++) right += nums[j];

            if(left == right) ans += 2;
            else if(abs(left-right) == 1) ans++;

        }
        return ans;
    }
};",1454813730
Jayant Gupta,jayant2k1,806,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();

        vector<int> sums(n+1, 0);
        for(auto q : queries) {
            sums[q[0]]++;
            sums[q[1]+1]--;
        }

        for(int i = 1; i <= n; i++) 
            sums[i] += sums[i-1];

        for(int i = 0; i < n; i++) {
            if(nums[i] > sums[i]) return false;
        }

        return true;
    }
};",1454820562
Jayant Gupta,jayant2k1,806,3643,cpp,"class Solution {
public:
    int check(vector<int> &nums, vector<vector<int>>& queries, int mid) {
        int n = nums.size(), q = queries.size();

        vector<int> sums(n+1, 0);
        for(int i = 0; i <= mid; ++i) {
            sums[queries[i][0]] += queries[i][2];
            sums[queries[i][1]+1] -= queries[i][2];
        }

        for(int i = 1; i <= n; i++)
            sums[i] += sums[i-1];

        for(int i = 0; i < n; i++) 
            if(nums[i] > sums[i]) return false;

        return true;
    }
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {

        if(accumulate(nums.begin(), nums.end(), 0L) == 0) return 0;

        // cout << check(nums, queries, 0);

        int low = 0, high = queries.size()-1, ans = INT_MAX;
        while(low <= high) {
            int mid = (low + high) / 2;
            if(check(nums, queries, mid)) {
                ans = mid;
                high = mid-1;
            }
            else low = mid+1;
        }
        return (ans == INT_MAX ? -1 : ans+1);
    }
};",1454842723
agix,agix,808,3616,cpp,"class Solution {
public:
    bool sim(vector<int> nums, int curr, int dir)
    {
        int n = nums.size();
        
        while (true)
        {
            if (curr >= n || curr < 0)
            {
                break;
            }
            
            if (nums[curr] == 0)
            {
                curr += dir;
            }
            else if (nums[curr] > 0)
            {
                nums[curr]--;
                dir = -dir;
                curr += dir;
            }
        }
        
        for (int i = 0; i < n; i++)
        {
            if (nums[i] != 0)
            {
                return false;
            }
        }
        
        return true;
    }
    
    int countValidSelections(vector<int>& nums) {
        int n = nums.size();
                
        int ans = 0;
        for (int i = 0; i < n; i++)
        {
            if (nums[i] != 0)
            {
                continue;
            }
            if (sim(nums, i, 1))
            {
                ans++;
            }
            if (sim(nums, i, -1))
            {
                ans++;
            }
        }
        
        return ans;
    }
};",1454830755
agix,agix,808,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        
        vector<int> diff(n + 1);
        
        for (auto& q : queries)
        {
            int l = q[0];
            int r = q[1];
            
            diff[l] += 1;
            diff[r + 1] -= 1;
        }
        
        int sum = 0;
        for (int i = 0; i < n; i++)
        {
            sum += diff[i];
            
            if (nums[i] > sum)
            {
                return false;
            }
        }
        return true;
    }
};",1454839098
agix,agix,808,3643,cpp,"class Solution {
public:
    bool ok(vector<int>& nums, vector<vector<int>>& queries, int k)
    {
        int n = nums.size();
        
        vector<int> diff(n + 1);
        
        int m = queries.size();
        
        for (int i = 0; i < k; i++)
        {
            int l = queries[i][0];
            int r = queries[i][1];
            int val = queries[i][2];
            
            diff[l] += val;
            diff[r + 1] -= val;
        }
        
        int sum = 0;
        for (int i = 0; i < n; i++)
        {
            sum += diff[i];
            
            if (nums[i] > sum)
            {
                return false;
            }
        }
        return true;
    }
    
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int m = queries.size();
        
        int l = 0;
        int r = m;
        
        while (l < r)
        {
            int mid = (l + r) / 2;
            
            if (ok(nums, queries, mid))
            {
                r = mid;
            }
            else
            {
                l = mid + 1;
            }
        }
        
        if (ok(nums, queries, l))
        {
            return l;
        }
        return -1;
    }
};",1454850145
kedar,kedar1729,809,3616,cpp,"class Solution {
public:
    
    int countValidSelections(vector<int>& nums) {
        int n=nums.size(),ans=0;
        for(int i=0;i<nums.size();i++){
            if(nums[i]==0){
                for(int j : {-1, 1}){
                    vector<int>t=nums;
                    int c=i;
                    int dir=j;
                    while(c>=0 and c<n){
                        if(t[c]==0){
                            c+=dir;
                        }
                        else{
                            t[c]--;
                            dir=-dir;
                            c+=dir;
                        }
                    }
                    int sum=0;
                    for(int k=0;k<n;k++){
                        sum+=t[k];
                    }
                    if(sum==0)ans++;
                }
            }
        }
        return ans;
    }
};",1454817808
kedar,kedar1729,809,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        vector<int>v(nums.size(),0);
        int n=nums.size();
        for(int i=0;i<queries.size();i++){
            if(queries[i][0]>0){
                v[queries[i][0]-1]--;
            }
            v[queries[i][1]]++;
        }
        for(int i=n-2;i>=0;i--){
            v[i]+=v[i+1];
        }
        for(int i=0;i<nums.size();i++){
            if(nums[i]>v[i])return 0;
        }
        return 1;
    }
};",1454829862
kedar,kedar1729,809,3643,cpp,"class Solution {
public:
    bool valid(vector<int>& nums, vector<vector<int>>& queries, int k) {
    int n = nums.size();
    vector<int> v(n, 0); 

    for (int i = 0; i < k; i++) {
        int start = queries[i][0]; 
        int end = queries[i][1];   
        int value = queries[i][2]; 

        
        if (start - 1 >= 0 && start - 1 < n) {
            v[start - 1] -= value;
        }
        if (end >= 0 && end < n) {
            v[end] += value;
        }
    }

    
    for (int i = n - 2; i >= 0; i--) {
        v[i] += v[i + 1];
    }

    
    for (int i = 0; i < n; i++) {
        if (nums[i] > v[i]) {
            return false;
        }
    }
    return true;
}

int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
    int l = 0, h = queries.size(); 
    int ans = INT_MAX;

    while (l <= h) {
        int mid = (l + h) / 2;

        if (valid(nums, queries, mid)) {
            ans = mid;   
            h = mid - 1; 
        } else {
            l = mid + 1; 
        }
    }

    
    return (ans == INT_MAX) ? -1 : ans;
}

};",1454850203
devilmaycry007,devilmaycry007,810,3616,java,"class Solution {
    public int countValidSelections(int[] nums) {

        int totalSum = 0;
        for(int num:nums){
            totalSum += num;
        }
        int sum = 0;
        int count = 0;
        for(int idx=0;idx<nums.length;idx++){
            if(nums[idx] == 0){
                if(totalSum - 2 * sum <= 1 && totalSum - 2 * sum >= 0) count++;
                if(2 * sum - totalSum <= 1 && 2 * sum - totalSum >= 0) count++;
            }
            sum += nums[idx];
            
        }
        return count;
    }
}",1454842854
devilmaycry007,devilmaycry007,810,3639,java,"class Solution {
    public boolean isZeroArray(int[] nums, int[][] queries) {

        return isPossible(queries,nums,queries.length);
        
    }

    public boolean isPossible(int[][] queries,int[] nums,int k){
        int[] lineSweep = new int[nums.length+1];
        for(int idx=0;idx<k;idx++){
            int[] query = queries[idx];
            lineSweep[query[0]] += 1;
            lineSweep[query[1] + 1] -= 1;
        }

        int sum = 0;
        for(int idx=0;idx<nums.length;idx++){
            sum += lineSweep[idx];
            if(sum < nums[idx]) return false;
        }
        return true;
    }
}",1454823512
devilmaycry007,devilmaycry007,810,3643,java,"class Solution {
    public int minZeroArray(int[] nums, int[][] queries) {

        int k = -1;
        int left  = 0,right = queries.length;
        while(left <= right){
            int mid = (left + right) / 2;
            if(isPossible(queries,nums,mid)){
                right = mid - 1;
                k = mid;
            }else{
                left = mid + 1;
            }
        }
        return k;
        
    }

    public boolean isPossible(int[][] queries,int[] nums,int k){
        int[] lineSweep = new int[nums.length+1];
        for(int idx=0;idx<k;idx++){
            int[] query = queries[idx];
            lineSweep[query[0]] += query[2];
            lineSweep[query[1] + 1] -= query[2];
        }

        int sum = 0;
        for(int idx=0;idx<nums.length;idx++){
            sum += lineSweep[idx];
            if(sum < nums[idx]) return false;
        }
        return true;
    }
}",1454820177
Chaitanya Bhutada,_chaitanya99,812,3616,cpp,"class Solution {
private:
    int check(int i, vector<int> nums, int dir) {
        while (i >= 0 && i < nums.size()) {
            if (nums[i] > 0) {
                dir = -dir;
                nums[i] -= 1;
            }
            i += dir;
        }
        int mx = *max_element(nums.begin(), nums.end());
        return mx==0?1:0;
    }
public:
    int countValidSelections(vector<int>& nums) {
        int ans = 0;
        int sm = 0;
        for (int i = 0; i < nums.size(); i++) {
            if (nums[i] == 0) {
                ans += check(i, nums, -1);
                ans += check(i, nums, 1);
            }
        }
        return ans;
    }
};",1454823616
Chaitanya Bhutada,_chaitanya99,812,3639,cpp,"class Solution {
private:
    bool chk(vector<int>& nums, vector<vector<int>>& queries, int k) {
        vector<int> nnums(nums.size()+1, 0);
        for (int i = 0; i < k; i++) {
            nnums[queries[i][0]]++;
            nnums[queries[i][1]+1]--;
        }
        for (int i = 1; i < nnums.size(); i++) {
            nnums[i] += nnums[i-1];
        }
        for (int i = 0; i < nums.size(); i++) {
            if (nums[i] > nnums[i]) return false;
        }
        return true;
    }
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        return chk(nums, queries, queries.size());
    }
};",1454831652
Chaitanya Bhutada,_chaitanya99,812,3643,cpp,"class Solution {
private:
    bool chk(vector<int>& nums, vector<vector<int>>& queries, int k) {
        vector<int> nnums(nums.size()+1, 0);
        for (int i = 0; i < k; i++) {
            nnums[queries[i][0]]+= queries[i][2];
            nnums[queries[i][1]+1]-=queries[i][2];
        }
        for (int i = 1; i < nnums.size(); i++) {
            nnums[i] += nnums[i-1];
        }
        for (int i = 0; i < nums.size(); i++) {
            if (nums[i] > nnums[i]) return false;
        }
        return true;
    }
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        if (!chk(nums, queries, queries.size())) return -1;
        int l = 0, r = queries.size();
        while (l < r) {
            int md = (l+r)/2;
            if (chk(nums, queries, md)) r = md;
            else l = md+1;
        }
        return l;
    }
};",1454835595
prashant_kashyap9759,prashant_kashyap9759,814,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int right=0;
        for(auto num:nums)right+=num;
        int left=0, ans=0;
        for(auto num:nums){
            if(!num){
                if(left==right)ans+=2;
                else if(abs(left-right)==1)ans++;
            }
            left+=num;
            right-=num;
        }
        return ans;
    }
};",1454811271
prashant_kashyap9759,prashant_kashyap9759,814,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& q) {
        int n=nums.size();
        vector<long long>pre(n+1);
        for(auto&v:q){
            auto l=v[0], r=v[1];
            pre[l]++;
            pre[r+1]--;
        }
        if(nums[0]>pre[0])return 0;
        for(int i=1;i<n;i++){
            pre[i]+=pre[i-1];
            if(nums[i]>pre[i])return 0;
        }
        return 1;
    }
};",1454815684
prashant_kashyap9759,prashant_kashyap9759,814,3643,cpp,"class Solution {
public:
    void propagate(int idx,int s,int e,vector<long long>&tree,vector<long long>&lazy){
  if(s==e){
      return;
      lazy[idx]=0;
  }
  tree[2*idx]-=(lazy[idx]);
  tree[2*idx+1]-=(lazy[idx]);
  lazy[2*idx]+=(lazy[idx]);
  lazy[2*idx+1]+=(lazy[idx]);
    lazy[idx]=0;
}

void update(int idx,int s,int e,int l,int r,long long val,vector<long long>&tree,vector<long long>&lazy){
  propagate(idx,s,e,tree,lazy);
  if(r<s||e<l)return;
  if(l<=s&&e<=r){
    tree[idx]-=(val);
    lazy[idx]+=(val);
    propagate(idx,s,e,tree,lazy);
    return;
  }
  int mid=s+(e-s)/2;
  update(2*idx,s,mid,l,r,val,tree,lazy);
  update(2*idx+1,mid+1,e,l,r,val,tree,lazy);
  tree[idx]=max(tree[2*idx],tree[2*idx+1]);
}
void start(int idx,int s,int e,vector<long long>&tree,vector<int>&nums){
  if(s==e){
      tree[idx]=nums[s];
      return;
      }
  int mid=s+(e-s)/2;
  start(2*idx,s,mid,tree,nums);
    start(2*idx+1,mid+1,e,tree,nums);
  tree[idx]=max(tree[2*idx],tree[2*idx+1]);
}
    int minZeroArray(vector<int>& nums, vector<vector<int>>& q) {
        bool chck=1;
        for(auto num:nums){
            if(num){
                chck=0;
                break;
            }
        }
        if(chck)return 0;
        int n=nums.size();
        vector<long long>tree(4*n), lazy(4*n);
        start(1,0,n-1,tree,nums);
        for(int i=0;i<q.size();i++){
            int l=q[i][0], r=q[i][1], val=q[i][2];
            update(1,0,n-1,l,r,val,tree,lazy);
            auto item=tree[1];
            if(item<=0)return (i+1);
        }
        return -1;
    }
};",1454835641
Reshab_Prasad,Reshab_Prasad,815,3616,cpp,"class Solution {
public:
    bool cal1(vector<int> a, int curr) {
        int n = a.size();
        vector<int>b = a;
        bool c = true;
        while (1) {
            if (curr >= n || curr<0) {
                for (int i = 0; i < n; i++) {
                    if (a[i] != 0)
                        return false;
                }
                return true;
            }
            if (c) {
                if (a[curr] == 0) {
                    curr--;
                } else {
                    a[curr] -= 1;
                    curr++;
                    c = false;
                }
            } else {
                if (a[curr] == 0) {
                    curr++;
                } else {
                    a[curr] -= 1;
                    curr--;
                    c = true;
                }
            }
        }
        return true;
    }
    bool cal(vector<int> a, int curr) {
        int n = a.size();
        vector<int>b = a;
        bool c = true;
        while (1) {
            if (curr >= n || curr<0) {
                for (int i = 0; i < n; i++) {
                    if (a[i] != 0)
                        return false;
                }
                return true;
            }
            if (c) {
                if (a[curr] == 0) {
                    curr++;
                } else {
                    a[curr] -= 1;
                    curr--;
                    c = false;
                }
            } else {
                if (a[curr] == 0) {
                    curr--;
                } else {
                    a[curr] -= 1;
                    curr++;
                    c = true;
                }
            }
        }
        return true;
    }
    int countValidSelections(vector<int>& nums) {
        int n = nums.size();
        int curr = -1;
        int ct = 0;
        for (int i = 0; i < n; i++) {
            if (nums[i] == 0) {
                bool x = cal(nums, i);
                bool y = cal1(nums,i);
                if (x)
                    ct++;
                if(y)ct++;
            }
        }
        return ct;
    }
};",1454816422
Reshab_Prasad,Reshab_Prasad,815,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        vector<int>pf(n);
        for(auto val:queries){
            int x = val[0];
            int y = val[1];
            pf[x]-=1;
            if(y+1<n){
                pf[y+1]+=1;
            }
        }
        for(int i=0;i<n;i++){
            pf[i] = pf[i];
            if(i)pf[i]+=pf[i-1];
        }
        for(int i=0;i<n;i++){
            int x = pf[i] + nums[i];
            if(x>0)return false;
        }
        return true;
    }
};",1454824579
Reshab_Prasad,Reshab_Prasad,815,3643,cpp,"class Solution {
public:
    bool check(int mid,vector<vector<int>>&q,vector<int>&nums){
        int n = nums.size();
        vector<int>pf(n);
        for(int i=0;i<mid;i++){
            int x = q[i][0];
            int y = q[i][1];
            int z = q[i][2];
            pf[x]-=z;
            if(y+1<n){
                pf[y+1]+=z;
            }
        }
        for(int i=0;i<n;i++){
            pf[i] = pf[i];
            if(i)pf[i]+=pf[i-1];
        }
        for(int i=0;i<n;i++){
            int x = pf[i] + nums[i];
            if(x>0)return false;
        }
        return true;
    }
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        int low = 0;int high = queries.size();
        int ans = -1;
        while(low<=high){
            int mid = (low + high)/2;
            if(check(mid,queries,nums)){
                ans = mid;
                high = mid -1;
            }else{
                low = mid + 1;
            }
        }
        return ans;
    }
};",1454850391
Ujjwal Sharma,ujjwalsharma9671,816,3616,java,"class Solution {
    public int countValidSelections(int[] nums) {
        int rightSum = 0;

        for(int x: nums){
            rightSum += x;
        }

        int leftSum = 0;

        int ans = 0;

        for(int x: nums){
            leftSum += x;

            rightSum -= x;

            if(x == 0 && leftSum == rightSum){
                ans += 2;
            }
            else if(x == 0 && Math.abs(rightSum - leftSum) == 1){
                ans += 1;
            }
        }

        return ans;        
    }
}",1454810276
Ujjwal Sharma,ujjwalsharma9671,816,3639,java,"class Solution {
    public boolean isZeroArray(int[] nums, int[][] queries) {
        int n = nums.length;
        
        int[] decArr = new int[n + 1];

        for(int[] q: queries){
            decArr[q[0]]--;
            decArr[q[1] + 1]++;
        }

        for(int i = 1; i <= n; i++){
            decArr[i] += decArr[i - 1];
            //System.out.println(decArr[i]);
        }

        for(int i = 0; i < n; i++){
            if((nums[i] + decArr[i]) > 0){
                return false;
            }
        }

        return true;
    }
}",1454826746
Ujjwal Sharma,ujjwalsharma9671,816,3643,java,"class Solution {
    public int minZeroArray(int[] nums, int[][] queries) {
        int lo = 0;
        int hi = queries.length;

        int ans = -1;

        while(lo <= hi){
            int mid = lo + (hi - lo) / 2;

            if(isValid(nums, queries, mid)){
                ans = mid;
                hi = mid - 1;
            }
            else{
                lo = mid + 1;
            }
        }

        return ans;
    }

    private boolean isValid(int[] nums, int[][] queries, int k){
        int n = nums.length;
        
        int[] decArr = new int[n + 1];

        for(int i = 0; i < k; i++){
            int[] q = queries[i];
            decArr[q[0]] -= q[2];
            decArr[q[1] + 1] += q[2];
        }

        for(int i = 1; i <= n; i++){
            decArr[i] += decArr[i - 1];
        }

        for(int i = 0; i < n; i++){
            if((nums[i] + decArr[i]) > 0){
                return false;
            }
        }

        return true;        
    }
}",1454843018
CheriBhai,CheriBhai,817,3616,cpp,"class Solution {
public:
    bool check(vector<int>nums,int idx,int path)
    {
        while(idx>=0 and idx<nums.size())
        {
            if(nums[idx]==0)
            {
                idx+=path;
            }
            else
            {
                nums[idx]--;
                if(path==1)path=-1;
                else path = 1;
                idx+=path;
            }
        }
        for(auto &x:nums)
        {
            if(x!=0)return false;
        }
        return true;
    }
    int countValidSelections(vector<int>& nums) {
        int count = 0;
        for(int i=0;i<nums.size();i++)
        {
            if(nums[i]==0)
            {
                if(check(nums,i,1))
                {
                    count++;
                }
                if(check(nums,i,-1))
                {
                    count++;
                }
            }
        }
        return count;
    }
};",1454814282
CheriBhai,CheriBhai,817,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        vector<int>store(n+1,0);
        for(auto &x:queries)
        {
            store[x[0]]++;
            store[x[1]+1]--;
        }
        
        for(int i=1;i<n;i++)
        {
            store[i]+=store[i-1];
        }
        
        for(int i=0;i<n;i++)
        {
            if(store[i]<nums[i])
            {
                return false;
            }
        }
        return true;
    }
};",1454817331
CheriBhai,CheriBhai,817,3643,cpp,"class Solution {
public:
    int check(vector<int>&nums,int mid,vector<vector<int>>&queries)
    {
        int n = nums.size();
        vector<int>store(n+1,0);
        for(int i=0;i<=mid;i++)
        {
            auto x = queries[i];
            store[x[0]]+=x[2];
            store[x[1]+1]-=x[2];
        }
        
        for(int i=1;i<n;i++)
        {
            store[i]+=store[i-1];
        }
        
        for(int i=0;i<n;i++)
        {
            if(store[i]<nums[i])
            {
                return false;
            }
        }
        return true;
    }
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        bool flag = true;
        for(auto &x:nums)
        {
            if(x)
            {
                flag = false;
                break;
            }
        }
        if(flag)return 0;
        int m = queries.size();
        int low = 0;
        int high = m-1;
        int ans = -1;
        while(low<=high)
        {
            int mid = (low+high)/2;
            if(check(nums,mid,queries))
            {
                ans = mid;
                high = mid-1;
            }
            else
            {
                low = mid+1;
            }
        }
        if(ans!=-1)return ans+1;
        return ans;
    }
};",1454835732
Kaukuntla Prudvi Raj,prudvirajkaukuntla3,818,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& v) {
        int n = v.size();
        vector<int> pf(n);
        pf[0]=v[0];
        for(int i=1;i<n;i++){
            pf[i]=pf[i-1]+v[i];
        }
        
        int ct = 0;
        for(int i=0;i<n;i++){
            if( abs(2*pf[i]-pf[n-1]) <=1 && v[i]==0){
                if(abs(2*pf[i]-pf[n-1])==0)
                        ct+=2;
                else ct+=1;
            }
        }
        return ct;
    }
};",1454815011
Kaukuntla Prudvi Raj,prudvirajkaukuntla3,818,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& q) {
        vector<int> v(1e5+2,0);
        
        for(auto it:q){
            v[it[0]]++;
            v[it[1]+1]--;
        }
        
        for(int i=1;i<v.size();i++){
            v[i] = v[i-1]+v[i];
        }
                
        for(int i=0;i<nums.size();i++){
            if(nums[i]>v[i])
                    return false;
        }
        
        return true;
    }
};",1454821699
Kaukuntla Prudvi Raj,prudvirajkaukuntla3,818,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& q) {
        
        int lo = 0,hi=q.size();
        
        auto check = [&](int mid,auto&& check)->bool{
            vector<int> v(1e5+2,0);
            int ct=0;
            for(auto it:q){
                if(ct>=mid)
                        break;
                v[it[0]]+=it[2];
                v[it[1]+1]-=it[2];
                ct++;
            }

            for(int i=1;i<v.size();i++){
                v[i] = v[i-1]+v[i];
            }

            for(int i=0;i<nums.size();i++){
                if(nums[i]>v[i])
                        return false;
            }

            return true;  
        };
        
        while(lo<=hi){
            int mid = (lo+hi)/2;
            
            //fffffttttttt
            if(check(mid,check))
                hi =mid-1;
            else
                lo = mid+1;
                
        }
        
        return (lo>q.size()) ? -1 : lo;
    }
};",1454835765
sir-ko-mana-kardo,sir-ko-mana-kardo,819,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        vector<int> v = nums;
        vector<int> z;
        int ans = 0;
        for(int i = 0; i < nums.size(); i++) {
            if(nums[i] == 0) {
                z.push_back(i);
            }
        }
        for(int i = 0; i < z.size(); i++) {
            int j = z[i] - 1;
            bool d = false;
            while(j >= 0 && j < nums.size()) {
                if(v[j] == 0) {
                    if(d) {
                        j++;
                    } else {
                        j--;
                    }
                } else {
                    v[j]--;
                    d = !d;
                    if(d) {
                        j++;
                    } else {
                        j--;
                    }
                }
            }
            
            ans++;
            for(int k = 0; k < v.size(); k++) {
                if(v[k] != 0) {
                    ans--;
                    break;
                }
            }
            v = nums;

            j = z[i] + 1;
            d = true;
            while(j >= 0 && j < nums.size()) {
                if(v[j] == 0) {
                    if(d) {
                        j++;
                    } else {
                        j--;
                    }
                } else {
                    v[j]--;
                    d = !d;
                    if(d) {
                        j++;
                    } else {
                        j--;
                    }
                }
            }
                        
            ans++;
            for(int k = 0; k < v.size(); k++) {
                if(v[k] != 0) {
                    ans--;
                    break;
                }
            }
            
            v = nums;
        }
    
        return ans;
    }
};",1454850500
sir-ko-mana-kardo,sir-ko-mana-kardo,819,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        vector<int> ans(nums.size(), 0);
        for(int i = 0; i < queries.size(); i++) {
            ans[queries[i][0]] -= 1;
            if(queries[i][1] != nums.size() - 1) {
                ans[queries[i][1] + 1] += 1;
            }
        }
        for(int i = 1; i < nums.size(); i++) {
            ans[i] += ans[i - 1];
        }
        for(int i = 0; i < nums.size(); i++) {
            if(nums[i] > (-1 * ans[i])) {
                return false;
            }
        }
        return true;
    }
};",1454817361
sir-ko-mana-kardo,sir-ko-mana-kardo,819,3643,cpp,"class Solution {
public:
    bool checkAns(vector<int> &nums, vector<vector<int>> &queries, int k) {
        vector<int> ans(nums.size(), 0);
        for(int i = 0; i < k; i++) {
            ans[queries[i][0]] -= queries[i][2];
            if(queries[i][1] != nums.size() - 1) {
                ans[queries[i][1] + 1] += queries[i][2];
            }
        }
        for(int i = 1; i < nums.size(); i++) {
            ans[i] += ans[i - 1];
        }
        for(int i = 0; i < nums.size(); i++) {
            if(nums[i] > (-1 * ans[i])) {
                return false;
            }
        }
        return true;
    }
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int mn = 0;
        int mx = queries.size();
        int ans = -1;
        while(mn <= mx) {
            int mid = (mn + mx) / 2;
            if(checkAns(nums, queries, mid)) {
                ans = mid;
                mx = mid - 1;
            } else {
                mn = mid + 1;
            }
        }
        return ans;
    }
};",1454829336
dongzhi,dongzhi0,820,3616,cpp,"#pragma GCC optimize(""Ofast,unroll-loops"")
#pragma GCC target(""avx2,tune=native"")
auto _ = [](){ return cin.tie(0)->sync_with_stdio(0); }();

class Solution {
public:
    bool check(vector<int> nums, int s, int i, int d = 1) {
        int n = nums.size();
        for (; i >= 0 && i < n; i += d) {
            if (nums[i] > 0) {
                nums[i]--;
                d *= -1;
                s--;
            }
        }
        return s == 0;
    }
    
    int countValidSelections(vector<int>& nums) {
        int n = nums.size();
        int ans = 0;
        int s = accumulate(nums.begin(),nums.end(),0);
        for (int i = 0; i < n; i++) {
            if (nums[i] != 0) continue;
            if (check(nums, s, i, 1)) ans++;
            if (check(nums, s, i, -1)) ans++;
        }
        return ans;
    }
};",1454810649
dongzhi,dongzhi0,820,3639,cpp,"#pragma GCC optimize(""Ofast,unroll-loops"")
#pragma GCC target(""avx2,tune=native"")
auto _ = [](){ return cin.tie(0)->sync_with_stdio(0); }();

class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        map<int,int> m;
        for (auto &q : queries) {
            m[q[0]]++;
            m[q[1]+1]--;
        }
        for (auto p = m.begin(), i = next(p); i != m.end(); i++) {
            i->second += p->second;
            p = i;
        }
        for (int i = 0; i < n; i++) {
            auto it = m.upper_bound(i);
            int d = it == m.begin() ? 0 : prev(it)->second;
            if (d < nums[i]) return false;
        }
        return true;
    }
};",1454822093
dongzhi,dongzhi0,820,3643,cpp,"#pragma GCC optimize(""Ofast,unroll-loops"")
#pragma GCC target(""avx2,tune=native"")
auto _ = [](){ return cin.tie(0)->sync_with_stdio(0); }();

using ll = long long;

class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries, int j) {
        int n = nums.size();
        map<int,ll> m;
        for (int i = 0; i < j; i++) {
            auto &q = queries[i];
            m[q[0]] += q[2];
            m[q[1]+1] -= q[2];
        }
        for (auto p = m.begin(), i = next(p); i != m.end(); i++) {
            i->second += p->second;
            p = i;
        }
        for (int i = 0; i < n; i++) {
            auto it = m.upper_bound(i);
            int d = it == m.begin() ? 0 : prev(it)->second;
            if (d < nums[i]) return false;
        }
        return true;
    }
    
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        if (accumulate(nums.begin(),nums.end(),0ll) == 0) return 0;
        int l = 1, r = queries.size()+1, j;
        while (l < r) {
            j = (l+r)/2;
            if (isZeroArray(nums, queries, j)) {
                r = j;
            } else {
                l = j+1;
            }
        }
        return l > queries.size() ? -1 : l;
    }
};",1454835925
franky50616,franky50616,823,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums)
    {
        int n = nums.size();
        int res = 0;
        for (int i = 0; i < n; ++i)
        {
            if (nums[i] != 0) continue;

            if (valid(nums, i, 1)) ++res;
            if (valid(nums, i, -1)) ++res;
        }

        return res;
    }

    bool valid(vector<int> nums, int cur, int step)
    {
        int n = nums.size();
        while (0 <= cur && cur < n)
        {
            if (nums[cur] == 0)
            {
                cur += step;
            }
            else
            {
                --nums[cur];
                step = -step;
                cur += step;
            }
        }

        int sum = 0;
        for (int num : nums) sum += num;
        return sum == 0;
    }
};",1454816944
franky50616,franky50616,823,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries)
    {
        int n = nums.size();
        vector<long long> val(n + 1, 0);
        for (auto& q : queries)
        {
            int a = q[0];
            int b = q[1];

            ++val[a];
            --val[b + 1];
        }
               
        if (val[0] < (long long)nums[0]) return false;

        for (int i = 1; i < n; ++i)
        {
            val[i] += val[i - 1];
            if (val[i] < (long long)nums[i]) return false;
        }

        return true;
    }
};

/*

Input: nums = [4,3,2,1], queries = [[1,3],[0,2]]

0 1 2 3
  1     X
1     X
1 1 0 -1 -1
1 2 2 1 0
  

*/",1454827632
franky50616,franky50616,823,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) 
    {
//         int all_zero = true;
//         for(int num : nums)
//         {
//             if(num != 0)
//             {
//                 all_zero = false;
//                 break;
//             }
//         }
        
//         if(all_zero) return 0;
        
        int left = 0;
        int right = queries.size();
        int res = -1;

        while (left <= right)
        {
            int mid = left + (right - left) / 2;
            if (isZeroArray(nums, queries, mid))
            {
                res = mid;
                right = mid - 1;
            }
            else
            {
                left = mid + 1;
            }
        }

        return res;
    }

    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries, int limit)
    {
        int n = nums.size();
        int m = queries.size();
        vector<long long> val(n + 1, 0);
        for (int i = 0; i < limit; ++i)
        {
            int a = queries[i][0];
            int b = queries[i][1];
            long long v = queries[i][2];

            val[a] += v;
            val[b + 1] -= v;
        }

        if (val[0] < (long long)nums[0]) return false;

        for (int i = 1; i < n; ++i)
        {
            val[i] += val[i - 1];
            if (val[i] < (long long)nums[i]) return false;
        }

        return true;
    }
};",1454843507
joshua1412,joshua1412,824,3616,cpp,"class Solution {
public:
bool f(int cur,vector<int> nums,char dir){
    int n=nums.size();
    bool dirchange=false;
    if(dir=='L'){
        while(cur>=0 && cur<n){
            if(nums[cur]==0){
                if(dirchange)cur++;
                else cur--;
            }
            else if(nums[cur]>0){
                nums[cur]--;
                if(!dirchange){
                    dirchange=!dirchange;
                    cur++;
                }
                else{
                    dirchange=!dirchange;
                    cur--;
                }
            }
        }
    }
    else{
        while(cur>=0 && cur<n){
            if(nums[cur]==0){
                if(dirchange)cur--;
                else cur++;
            }
            else if(nums[cur]>0){
                nums[cur]--;
                if(!dirchange){
                    dirchange=!dirchange;
                    cur--;
                }
                else{
                    dirchange=!dirchange;
                    cur++;
                }
            }
        }
    }
    for(int i=0;i<n;i++){
        if(nums[i]!=0)return false;
    }
    return true;
}
    int countValidSelections(vector<int>& nums) {
        int n=nums.size();
        int c=0;
        for(int i=0;i<n;i++){
            if(nums[i]==0){
                c+=f(i,nums,'L');
                c+=f(i,nums,'R');
            }
        }
        return c;
        
    }
};",1454811505
joshua1412,joshua1412,824,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n=nums.size();
        vector<int> pref(1e5 + 2,0);
        int m=queries.size();
        for(int i=0;i<m;i++){
            pref[queries[i][0]]+=1;
            pref[queries[i][1]+1]-=1;
        }
        for(int i=1;i<=(1e5+1);i++){
            pref[i]+=pref[i-1];
        }
        for(int i=0;i<n;i++){
            if(pref[i]<nums[i])return false;
        }
        return true;
    }
};",1454822580
joshua1412,joshua1412,824,3643,cpp,"class Solution {
public:
bool check(vector<int> nums,vector<vector<int>>& queries,int mid){
    int n=nums.size();
    vector<int> pref(n+1,0);
    for(int i=0;i<mid;i++){
        pref[queries[i][0]]+=queries[i][2];
        pref[queries[i][1]+1]-=queries[i][2];
    }
    for(int i=1;i<=n;i++){
        pref[i]+=pref[i-1];
    }
    for(int i=0;i<n;i++){
        if(pref[i]<nums[i])return false;
    }
    return true;
}
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n=nums.size();
        int l=0,r=queries.size(),mid=0,ans=-1;
        while(l<=r){
            mid=l+(r-l)/2;
            if(check(nums,queries,mid)){
                ans=mid;
                r=mid-1;
            }
            else l=mid+1;     
        }
        return ans;
    }
};",1454836184
timothyleong97,timothyleong97,825,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int totalSum = accumulate(nums.begin(), nums.end(), 0);
        int result = 0;
        for (int i = 0, prefixSum = 0; i < nums.size(); ++i) {
            if (nums[i] == 0) {
                if (prefixSum * 2 == totalSum) {
                    result += 2;
                } else if (abs(prefixSum * 2 - totalSum) == 1) {
                    result += 1;
                }
            } else {
                prefixSum += nums[i];
            }
        }
        return result;
    }
};",1454809802
timothyleong97,timothyleong97,825,3639,cpp,"class Solution {
    vector<pair<int, int>> makeIncDec(const vector<vector<int>>& queries) {
        unordered_map<int, int> ans;
        for (auto& query : queries) {
            ans[query[0]]++;
            ans[query[1] + 1]--;
        }
        vector<pair<int, int>> res(ans.begin(), ans.end());
        sort(res.begin(), res.end(), [](const auto& p1, const auto& p2) {
            return p1.first < p2.first;
        });
        return res;
    }

public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        auto incDec{makeIncDec(queries)};
        for (int i = 0, j = 0, count = 0; i < nums.size(); ++i) {
            if (j < incDec.size() and incDec[j].first == i) {
                count += incDec[j].second;
                j++;
            }

            if (count < nums[i]) {
                return false;
            }
        }
        return true;
    }
};",1454823472
timothyleong97,timothyleong97,825,3643,cpp,"class Solution {
    vector<pair<int, int>> makeIncDec(const vector<vector<int>>& queries, int numToUse) {
        unordered_map<int, int> ans;
        for (int i = 0; i < numToUse; ++i) {
            auto& query = queries[i];
            ans[query[0]] += query[2];
            ans[query[1] + 1] -= query[2];
        }
        vector<pair<int, int>> res(ans.begin(), ans.end());
        sort(res.begin(), res.end(), [](const auto& p1, const auto& p2) {
            return p1.first < p2.first;
        });
        return res;
    }

    bool canZero(const int numQueries, const vector<vector<int>>& queries,
                 const vector<int>& nums) {
        auto incDec{makeIncDec(queries, numQueries)};
        for (int i = 0, j = 0, count = 0; i < nums.size(); ++i) {
            if (j < incDec.size() and incDec[j].first == i) {
                count += incDec[j].second;
                j++;
            }

            if (count < nums[i]) {
                return false;
            }
        }
        return true;
    }

public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int left = 0, right = queries.size();
        while (left <= right) {
            int candidate = (left + right) >> 1;
            // cout << ""left: "" << left << "" right: "" << right << "" candidate: "" << candidate << std::endl;
            if (canZero(candidate, queries, nums)) {
                // cout << ""Can zero. Setting right to candidate"" << std::endl;
                right = candidate;

                if (left == right) break;
            } else {
                // cout << ""Cannot zero. Setting left to candidate + 1"" << std::endl;
                left = candidate + 1;
            }
        }

        if (left <= queries.size()) {
            return left;
        } else {
            return -1;
        }
    }
};",1454843540
Lucas,rayms,826,3616,java,"class Solution {
    public int countValidSelections(int[] nums) {
        int n = nums.length, ans = 0;

        for (int start = 0; start < n; start++) {
            if (nums[start] != 0) {
                continue;
            }

            for (int d : new int[]{-1, 1}) {
                int[] t = nums.clone();
                int curr = start, zero = 1;

                while (curr >= 0 && curr < n) {
                    if (t[curr] == 0) {
                        curr += d;
                    } else {
                        t[curr]--;
                        d *= -1;
                        curr += d;
                    }
                }
                
                for (int v : t) {
                    if (v != 0) {
                        zero = 0;
                        break;
                    }
                }
                
                ans += zero;
            }
        }

        return ans;
    }

}",1454809740
Lucas,rayms,826,3639,java,"class Solution {
    public boolean isZeroArray(int[] nums, int[][] queries) {
        int n = nums.length, match = 1;
        int[] diff = new int[n + 1];
        for (int[] q : queries) {
            int a = q[0], b = q[1];
            diff[a] += 1;
            diff[b + 1] -= 1;
        }
        for (int i = 0; i < n; i ++) {
            diff[i + 1] += diff[i];
        }
        // System.out.println(Arrays.toString(diff));
        for (int i = 0; i < n && match == 1; i ++) {
            if (nums[i] > diff[i]) {
                match = 0;
            }
        }
        return match == 1;
    }
}

/*
    i   0 1 2 3
    v   4 3 2 1
    0     *.  *
    1   *.  *
*/",1454822828
Lucas,rayms,826,3643,java,"class Solution {
    
    // long
    public int minZeroArray(int[] nums, int[][] queries) {
        int n = nums.length, left = 0, right = queries.length, ans = -1;
        while (left <= right) {
            int mid = (left + right) / 2; 
            if (helper(nums, queries, mid)) { 
                ans = mid; 
                right = mid - 1; 
            } else {
                left = mid + 1; 
            }
        }

        return ans;
    }

    boolean helper(int[] nums, int[][] queries, int k) {
        int n = nums.length;
        long[] delta = new long[n + 1];
        for (int i = 0; i < k; i++) {
            int l = queries[i][0], r = queries[i][1], vali = queries[i][2];
            delta[l] -= vali; 
            delta[r + 1] += vali; 
        }

        long diff = 0;
        for (int i = 0; i < n; i++) {
            diff += delta[i]; 
            if (nums[i] + diff > 0) { 
                return false;
            }
        }
        return true;
    }
}

/*

Input:
[0]
[[0,0,2],[0,0,4],[0,0,4],[0,0,3],[0,0,5]]
Output:
1
Expected:
0

*/",1454843541
Himanshu Singh,himanshu831,827,3616,cpp,"class Solution {
public:
bool helper(vector<int> nums, int i, int dir) {
    int n = nums.size();
    int curr =i;
    

    while (curr >= 0 && curr < n) {
        if (nums[curr] == 0) {
            curr += dir;
        } else {
            nums[curr] -= 1;
            dir = -dir; 
            curr += dir;
        }
    }
    for (int num : nums) {
        if (num != 0) {
            return false;
        }
    }
    return true;
}

    int countValidSelections(vector<int>& nums) {
        int n = nums.size();
        int valid_count = 0;

    for (int i = 0; i < n; ++i) {
        if(nums[i]==0){    
        if (helper(nums, i, -1)) valid_count++;
        if (helper(nums, i, 1)) valid_count++;
        }
    }

    return valid_count;
    }
};",1454846387
Himanshu Singh,himanshu831,827,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        vector<int> res(n + 1);

        for (auto& q : queries) {
            res[q[0]] += 1;
            res[q[1] + 1] -= 1;
        }

        for (int i = 1; i <= n; i++) {
            res[i] += res[i - 1];
        }

        for (int i = 0; i < n; i++) {
            if (res[i] < nums[i]) {
                return false;
            }
        }
        return true;
    }
};
",1454816929
Himanshu Singh,himanshu831,827,3643,cpp,"bool isZeroArray(vector<int>& nums, vector<vector<int>>& q, int k) {
    int n = nums.size();
    vector<int> res(n + 1);

    for (int i = 0; i < k; i++) {
        res[q[i][0]] += q[i][2];
        res[q[i][1] + 1] -= q[i][2];
    }

    for (int i = 1; i <= n; i++) {
        res[i] += res[i - 1];
    }

    for (int i = 0; i < n; i++) {
        if (res[i] < nums[i]) {
            return false;
        }
    }
    return true;
}

class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        int m = queries.size();
        int l = 0, r = m, ans = -1;

        while (l <= r) {
            int mid = (l + r) / 2;
            if (isZeroArray(nums, queries, mid)) {
                ans = mid;
                r = mid - 1;
            } else {
                l = mid + 1;
            }
        }

        return ans;
    }
};",1454850915
Devansh,devansh5398,828,3616,cpp,"class Solution {
public:
    bool poss(vector<int> arr, int pos, int dir) {
        int n = arr.size();
        while (pos < n && pos >= 0) {
            if (arr[pos] != 0) {
                arr[pos] -= 1;
                dir = -dir;
            }
            pos += dir;
        }
        
        for (auto &x: arr)
            if (x > 0)
                return false;
        return true;
    }
    
    int countValidSelections(vector<int>& nums) {
        int n = nums.size(), res = 0;
        for (int i = 0; i < n; ++i) {
            if (nums[i] != 0)
                continue;
            res += poss(nums, i, -1);
            res += poss(nums, i, +1);
        }
        return res;
    }
};",1454809738
Devansh,devansh5398,828,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        vector<int> arr(n+1, 0);
        for (auto &q: queries) {
            arr[q[0]] -= 1;
            arr[q[1]+1] += 1;
        }
        
        int cumm_sm = 0;
        for (int i = 0; i < n; ++i) {
            cumm_sm += arr[i];
            nums[i] = max(0, nums[i]+cumm_sm);
        }
        
        for (auto &x: nums)
            if (x > 0)
                return false;
        return true;
    }
};",1454814886
Devansh,devansh5398,828,3643,cpp,"class Solution {
public:
    bool poss(vector<int>& nums,  vector<vector<int>>& queries, int k) {
        int n = nums.size();
        vector<int> arr(n+1, 0);
        for (int i = 0; i < k; ++i) {
            auto &q = queries[i];
            arr[q[0]] -= q[2];
            arr[q[1]+1] += q[2];
        }
        
        int cumm_sm = 0;
        for (int i = 0; i < n; ++i) {
            cumm_sm += arr[i];
            if (nums[i]+cumm_sm > 0)
                return false;
        }
        return true;
    }
    
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int q_sz = queries.size();
        int l = 0, r = q_sz, res = r+1;
        // cout << l << "" "" << r << "" "" << res << endl;
        while (l <= r) {
            int m = (l+r) >> 1;
            if (poss(nums, queries, m)) {
                res = m;
                r = m-1;
            }
            else
                l = m+1;
            
            // cout << l << "" "" << r << "" "" << res << endl;
        }
        return (res == q_sz+1 ? -1 : res);
    }
};",1454843591
xianglaniunan,xianglaniunan,829,3616,java,"class Solution {
    public int countValidSelections(int[] nums) {
        int n = nums.length, re = 0;
        for(int i = 0; i < n; i++)
        {
            // System.out.println(nums[i]);
            if(nums[i] == 0)
            {
                // Arrays.copyOfRange(nums, 0, n);
                re += sim(nums, i);
            }
        }
        return re;
    }
    
    int sim(int[] ary, int pos)
    {
        // System.out.printf(""sim.. pos=%d\n"", pos);
        // int[] copy = Arrays.copyOfRange(nums, 0, n);
        int n = ary.length;
        return valid(Arrays.copyOfRange(ary, 0, n), pos, 1) + valid(Arrays.copyOfRange(ary, 0, n), pos, -1);
    }
    
    int valid(int[] ary, int pos, int dir)
    {
        // System.out.printf(""..valid pos=%d dir=%d\n"" , pos, dir );
        int n = ary.length;
        while(true)
        {
            // System.out.printf(""pos=%d ary=%s\n"", pos, Arrays.toString(ary));
            if(pos < 0 || pos >= n) break;
            if(ary[pos] > 0)
            {
                ary[pos]--;
                dir = -dir;
                pos += dir;
            }
            else
            {
                pos += dir;
            }
        }
        int re = 1;
        for(int v : ary) if(v != 0) re = 0;
        // System.out.println(""re="" + re);
        return re;
        
    }
}",1454814894
xianglaniunan,xianglaniunan,829,3639,java,"class Solution {
    public boolean isZeroArray(int[] nums, int[][] queries) {
        int n = nums.length;
        int[] f = new int[n + 1];
        for(int[] q : queries)
        {
            int u = q[0], v = q[1];
            f[u]++;
            f[v + 1]--;
        }
        int run = 0;
        for(int i = 0; i < n; i++)
        {
            run += f[i];
            if(run < nums[i]) return false;
        }
        return true;
    }
}",1454821455
xianglaniunan,xianglaniunan,829,3643,java,"class Solution {
    public int minZeroArray(int[] nums, int[][] queries) {
        if(zero(nums)) return 0;
        int n = nums.length;
        int[] f = new int[n + 1];
        int lo = 0, hi = queries.length - 1;
        int prev = -1;
        while(lo < hi)
        {
            int mid = (lo + hi) / 2;
            f = update(f, prev, mid, queries);
            // System.out.printf(""lo=%d hi=%d mid=%d\n"", lo, hi, mid);
            // System.out.println(Arrays.toString(f));
            // System.out.println("".."");
            if(!cond(nums, f)) lo = mid + 1;
            else hi = mid;
            prev = mid;
        }
        f = update(f, prev, lo, queries);
        if(!cond(nums, f)) return -1;
        return lo + 1;
    }
    
    boolean zero(int[] ary)
    {
        for(int k : ary) if(k != 0) return false;
        return true;
    }
    
    boolean cond(int[] ary, int[] f)
    {
        int run = 0, n = ary.length;
        for(int i = 0; i < n; i++)
        {
            run += f[i];
            if(ary[i] > run) return false;
        }
        return true;
    }
    
    int[] update(int[] f, int prev, int curr, int[][] qr)
    {
        if(prev < curr)
        {
            for(int i = prev + 1; i <= curr; i++)
            {
                int[] q = qr[i];
                int u = q[0], v = q[1], c = q[2];
                f[u] += c;
                f[v + 1] -= c;
            }
        }
        else
        {
            for(int i = prev; i > curr; i--)
            {
                int[] q = qr[i];
                int u = q[0], v = q[1], c = q[2];
                f[u] -= c;
                f[v + 1] += c;
            }
        }
        return f;
    }
}",1454843615
Hongbo Zhong,neverbackdown,830,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        r = sum(nums)
        l = 0
        ans = 0
        for i in range(len(nums)):
            if nums[i] == 0:
                if l == r:
                    ans += 2
                if abs(l-r) == 1:
                    ans += 1
            else:
                l += nums[i]
                r -= nums[i]
        return ans",1454815799
Hongbo Zhong,neverbackdown,830,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        n = len(nums)
        incre = [0]*n
        for l, r in queries:
            incre[l] += 1
            if r<n-1:
                incre[r+1] -= 1

        cur = 0
        for i in range(n):
            cur += incre[i]
            if nums[i]>cur:
                return False

        return True",1454824329
Hongbo Zhong,neverbackdown,830,3643,python3,"class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        n = len(nums)
        j = 0
        cur = 0
        incre = [0]*n
        for i in range(n):
            cur += incre[i]
            while j<len(queries) and cur<nums[i]:
                l, r, val = queries[j]
                incre[l] += val
                if r<n-1:
                    incre[r+1] -= val
                if l<=i and i<=r:
                    cur += val
                j += 1
                
            if cur<nums[i]:
                return -1

        return j
            
            
            

",1454851021
Saurav Bharti,sauravbhartibgs786,831,3616,cpp,"#define ll long long
#define pi (3.141592653589)
#define mod 1000000007
#define float double
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define all(c) c.begin(), c.end()
#define min3(a, b, c) min(c, min(a, b))
#define min4(a, b, c, d) min(d, min(c, min(a, b)))
#define rrep(i, n) for(int i=n-1;i>=0;i--)
#define rep(i,n) for(int i=0;i<n;i++)
class Solution {
public:
    bool checker(int cur, vector<int> nums, int iniD){
        int n= nums.size();
        // cout<<cur<<"" ""<<iniD<<""haha\n"";
        while(cur>=0 && cur<n){
            if(nums[cur]==0){
                cur+=iniD;
                continue;
            }
            if(nums[cur]>0){
                nums[cur]-=1;
                iniD= iniD==-1? 1: -1;
            }
            cur+= iniD;
        }
        // rep(i,n) cout<<nums[i]<<"" ""; cout<<""\n"";
        rep(i,n){
            if(nums[i]!=0) return false;
        }
        return true;
    }
    int countValidSelections(vector<int>& nums) {
        int n= nums.size();
        int ans= 0;
        rep(i,n){
            if(nums[i]==0){
                if(checker(i, nums, 1)){
                    ans+=1;
                }
                if(checker(i, nums, -1)){
                    ans+=1;
                }
            }
        }
        
        return ans;
    }
};",1454814372
Saurav Bharti,sauravbhartibgs786,831,3639,cpp,"#define ll long long
#define pi (3.141592653589)
#define mod 1000000007
#define float double
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define all(c) c.begin(), c.end()
#define min3(a, b, c) min(c, min(a, b))
#define min4(a, b, c, d) min(d, min(c, min(a, b)))
#define rrep(i, n) for(int i=n-1;i>=0;i--)
#define rep(i,n) for(int i=0;i<n;i++)
class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        ll n= nums.size();
        vector<ll> pre(n+1, 0);
        
        // rep(i,n)
        // cout<<pre[i]<<"" ""; cout<<""\n"";
        rep(i, queries.size()){
            int u= queries[i][0], v= queries[i][1];
            pre[u]+=1;
            pre[v+1]-=1;
        }
        
        rep(i,n){
            pre[i] += (i>0? pre[i-1] : 0);
        }
        // rep(i,n)
        // cout<<pre[i]<<"" ""; cout<<""\n"";
        rep(i, n){
            int val= pre[i];
            if(nums[i]>val) return false;
        }
        return true;
    }
};",1454831539
Saurav Bharti,sauravbhartibgs786,831,3643,cpp,"#define ll long long
#define pi (3.141592653589)
#define mod 1000000007
#define float double
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define all(c) c.begin(), c.end()
#define min3(a, b, c) min(c, min(a, b))
#define min4(a, b, c, d) min(d, min(c, min(a, b)))
#define rrep(i, n) for(int i=n-1;i>=0;i--)
#define rep(i,n) for(int i=0;i<n;i++)
class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        ll n= nums.size();
        vector<ll> pre(n+1, 0);
        
        // rep(i,n)
        // cout<<pre[i]<<"" ""; cout<<""\n"";
        rep(i, queries.size()){
            int u= queries[i][0], v= queries[i][1], val = queries[i][2];
            pre[u]+=val;
            pre[v+1]-=val;
        }
        
        rep(i,n){
            pre[i] += (i>0? pre[i-1] : 0);
        }
        // rep(i,n)
        // cout<<pre[i]<<"" ""; cout<<""\n"";
        rep(i, n){
            int val= pre[i];
            if(nums[i]>val) return false;
        }
        return true;
    }
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        ll r= queries.size()+1;
        ll l=-1;
        ll flag= 0;
        while(r-l>1){
            ll mid = (l+r)/2;
            // cout<<mid<<"" ohno\n"";
            vector<vector<int>> now;
            for(int i=0;i<mid;i++){
                now.push_back(queries[i]);
            }
            if(isZeroArray(nums, now)){
                r=mid;
                flag=1;
            }else{
                l=mid;
            }
            
        }
        if(!flag) return -1;
        return r;
        
    }
};",1454843750
parthDOOM,parthDOOM,832,3616,cpp,"#define ll long long
#define modulo (1000000000+7)
#define rep(i,a,b) for(ll i=a;i<b;i++)
#define per(i,a,b) for(ll i=a;i>b;i--)
#define loop(x,a) for(auto &x:a)
#define vll(v,n) vector<ll> v(n);
#define vll0(v,n) vector<ll> v(n,0);
#define vllk(v,n,k) vector<ll> v(n,k);
#define vlll vector<vector<ll>>
#define vl vector<ll>
#define vlll0(v,n,m) vector<vector<ll>> v(n,vector<ll>(m,0));
#define qll queue<ll>
#define dqll deque<ll>
#define stll set<ll>
#define mpll map<ll,ll>
#define pqll priority_queue<ll>
#define pqvll priority_queue<ll,vector<ll>,greater<ll>>
#define pll pair<ll,ll>
#define vb vector<bool>
#define ump unordered_map
#define ust unordered_set
#define mst(x,a) memset(x,a,sizeof(x)) 
#define rd(x) ll x;cin>>x;
#define rds(x) cin>>x;
#define pt(x) cout<<x;
#define nl cout<<""\n"";
#define yes pt(""YES"") nl
#define no pt(""NO"") nl
#define rdvec(v,n) rep(i,0,n){rds(v[i])}
#define rdmat(a,n,m) for(int i=0;i<n;i++){for(int j=0;j<m;j++){rds(a[i][j])}}
#define INF LLONG_MAX
#define NINF LLONG_MIN
#define pb push_back
#define pob pop_back
#define pof pop_front
#define emp emplace
#define emb emplace_back
#define emf emplace_front
#define lb lower_bound
#define ub upper_bound
#define bk back()
#define beg begin()
#define ed end()
#define sz(x) (ll)x.size()
#define ist insert
#define mkp(x, y) make_pair(x, y)
#define mkt(x, y, z) make_tuple(x, y, z)
#define all(v) v.begin(),v.end()
#define allr(v) v.rbegin(),v.rend()
#define fst first
#define sec second
#define acc(a) accumulate(all(a),0ll)
#define maxi(a) *max_element(all(a))
#define mini(a) *min_element(all(a))
#define sortr(a) sort(allr(a))
#define bitcnt(x) __builtin_popcountll(x)
#define ispow2(x) (!(x & (x-1)) && x)
#define lsb(x) (x & -x)
#define msb(x) (63 - __builtin_clzll(x))
#define clz(x) __builtin_clzll(x)
#define ctz(x) __builtin_ctzll(x)
#define dis(x1,y1,x2,y2) sqrt(sq(x1-x2) + sq(y1-y2))
#define ptvec(a) for(auto &x:a) {cout<<x<<"" "";} nl;
#define ptmat(a,n,m) for(int i=0;i<n;i++){for(int j=0;j<m;j++){cout<<a[i][j]<<"" "";}nl}
#define cnt continue;
#define brk break;
#define rt return
class Solution {
public:
bool simulate(vector<int> nums, ll start, ll dir) {
    ll n = sz(nums),curr = start;
    while(curr >= 0 && curr < n){
        if (nums[curr] == 0){
            curr += dir; 
        } 
        else{
            nums[curr]--; 
            dir *= -1; 
            curr += dir;
        }
    }
    rt acc(nums) == 0;
}
    int countValidSelections(vector<int>& nums) {
         ll n = sz(nums);
        ll ans = 0;
        rep(i, 0, n) {
        if (nums[i] == 0) {
            if (simulate(nums, i, -1)) ans++;
            if (simulate(nums, i, 1)) ans++;
        }
        }
            rt ans; 
    
    }
};",1454808097
parthDOOM,parthDOOM,832,3639,cpp,"#define ll long long
#define modulo (1000000000+7)
#define rep(i,a,b) for(ll i=a;i<b;i++)
#define per(i,a,b) for(ll i=a;i>b;i--)
#define loop(x,a) for(auto &x:a)
#define vll(v,n) vector<ll> v(n);
#define vll0(v,n) vector<ll> v(n,0);
#define vllk(v,n,k) vector<ll> v(n,k);
#define vlll vector<vector<ll>>
#define vl vector<ll>
#define vlll0(v,n,m) vector<vector<ll>> v(n,vector<ll>(m,0));
#define qll queue<ll>
#define dqll deque<ll>
#define stll set<ll>
#define mpll map<ll,ll>
#define pqll priority_queue<ll>
#define pqvll priority_queue<ll,vector<ll>,greater<ll>>
#define pll pair<ll,ll>
#define vb vector<bool>
#define ump unordered_map
#define ust unordered_set
#define mst(x,a) memset(x,a,sizeof(x)) 
#define rd(x) ll x;cin>>x;
#define rds(x) cin>>x;
#define pt(x) cout<<x;
#define nl cout<<""\n"";
#define yes pt(""YES"") nl
#define no pt(""NO"") nl
#define rdvec(v,n) rep(i,0,n){rds(v[i])}
#define rdmat(a,n,m) for(int i=0;i<n;i++){for(int j=0;j<m;j++){rds(a[i][j])}}
#define INF LLONG_MAX
#define NINF LLONG_MIN
#define pb push_back
#define pob pop_back
#define pof pop_front
#define emp emplace
#define emb emplace_back
#define emf emplace_front
#define lb lower_bound
#define ub upper_bound
#define bk back()
#define beg begin()
#define ed end()
#define sz(x) (ll)x.size()
#define ist insert
#define mkp(x, y) make_pair(x, y)
#define mkt(x, y, z) make_tuple(x, y, z)
#define all(v) v.begin(),v.end()
#define allr(v) v.rbegin(),v.rend()
#define fst first
#define sec second
#define acc(a) accumulate(all(a),0ll)
#define maxi(a) *max_element(all(a))
#define mini(a) *min_element(all(a))
#define sortr(a) sort(allr(a))
#define bitcnt(x) __builtin_popcountll(x)
#define ispow2(x) (!(x & (x-1)) && x)
#define lsb(x) (x & -x)
#define msb(x) (63 - __builtin_clzll(x))
#define clz(x) __builtin_clzll(x)
#define ctz(x) __builtin_ctzll(x)
#define dis(x1,y1,x2,y2) sqrt(sq(x1-x2) + sq(y1-y2))
#define ptvec(a) for(auto &x:a) {cout<<x<<"" "";} nl;
#define ptmat(a,n,m) for(int i=0;i<n;i++){for(int j=0;j<m;j++){cout<<a[i][j]<<"" "";}nl}
#define cnt continue;
#define brk break;
#define rt return
class Solution {
public:
    bool isZeroArray(vector<int>& a, vector<vector<int>>& q) {
        ll n = sz(a);
        vl d(n+1, 0);
        loop(x,q){
            ll l = x[0],r = x[1];
            d[l]++;
            if(r + 1 < n) d[r + 1]--;
        }
        ll s = 0;
        rep(i,0,n) {
            s += d[i];
            a[i] = 0 > a[i]-s ? 0 : a[i]-s;
            if(a[i]) rt false;
        }
        rt true;  
    }
};",1454827435
parthDOOM,parthDOOM,832,3643,cpp,"#define ll long long
#define modulo (1000000000+7)
#define rep(i,a,b) for(ll i=a;i<b;i++)
#define per(i,a,b) for(ll i=a;i>b;i--)
#define loop(x,a) for(auto &x:a)
#define vll(v,n) vector<ll> v(n);
#define vll0(v,n) vector<ll> v(n,0);
#define vllk(v,n,k) vector<ll> v(n,k);
#define vlll vector<vector<ll>>
#define vl vector<ll>
#define vlll0(v,n,m) vector<vector<ll>> v(n,vector<ll>(m,0));
#define qll queue<ll>
#define dqll deque<ll>
#define stll set<ll>
#define mpll map<ll,ll>
#define pqll priority_queue<ll>
#define pqvll priority_queue<ll,vector<ll>,greater<ll>>
#define pll pair<ll,ll>
#define vb vector<bool>
#define ump unordered_map
#define ust unordered_set
#define mst(x,a) memset(x,a,sizeof(x)) 
#define rd(x) ll x;cin>>x;
#define rds(x) cin>>x;
#define pt(x) cout<<x;
#define nl cout<<""\n"";
#define yes pt(""YES"") nl
#define no pt(""NO"") nl
#define rdvec(v,n) rep(i,0,n){rds(v[i])}
#define rdmat(a,n,m) for(int i=0;i<n;i++){for(int j=0;j<m;j++){rds(a[i][j])}}
#define INF LLONG_MAX
#define NINF LLONG_MIN
#define pb push_back
#define pob pop_back
#define pof pop_front
#define emp emplace
#define emb emplace_back
#define emf emplace_front
#define lb lower_bound
#define ub upper_bound
#define bk back()
#define beg begin()
#define ed end()
#define sz(x) (ll)x.size()
#define ist insert
#define mkp(x, y) make_pair(x, y)
#define mkt(x, y, z) make_tuple(x, y, z)
#define all(v) v.begin(),v.end()
#define allr(v) v.rbegin(),v.rend()
#define fst first
#define sec second
#define acc(a) accumulate(all(a),0ll)
#define maxi(a) *max_element(all(a))
#define mini(a) *min_element(all(a))
#define sortr(a) sort(allr(a))
#define bitcnt(x) __builtin_popcountll(x)
#define ispow2(x) (!(x & (x-1)) && x)
#define lsb(x) (x & -x)
#define msb(x) (63 - __builtin_clzll(x))
#define clz(x) __builtin_clzll(x)
#define ctz(x) __builtin_ctzll(x)
#define dis(x1,y1,x2,y2) sqrt(sq(x1-x2) + sq(y1-y2))
#define ptvec(a) for(auto &x:a) {cout<<x<<"" "";} nl;
#define ptmat(a,n,m) for(int i=0;i<n;i++){for(int j=0;j<m;j++){cout<<a[i][j]<<"" "";}nl}
#define cnt continue;
#define brk break;
#define rt return
class Solution {
public:
    ll minZeroArray(vector<int>& a, vector<vector<int>>& q) {
        ll n = sz(a),l = 0, r = sz(q),ans = -1;
        auto f = [&](ll k) -> bool{
            vector<int> v = a;
            vll0(d, n+1);
            rep(i, 0, k){
                if(i >= sz(q)) brk;
                ll x = q[i][0],y = q[i][1],z = q[i][2];
                d[x] += z;
                if(y + 1 < n) d[y + 1] -= z;
            }
            ll c = 0;
            rep(i, 0, n){
                c += d[i];
                if(v[i] > c) rt false;
            }
            rt true;
        };
        while(l <= r){
            ll m = l+(r-l)/2;
            if(f(m)){
                ans = m;
                r = m - 1;
            } 
            else l = m + 1; 
        }
        rt ans;
    }
};",1454843774
Mayank Tomar,htomar6397,833,3616,cpp,"class Solution {
public:
    // Simulates the process for a given starting position and direction
    bool simulateProcess(vector<int>& nums, int startPos, bool goingRight) {
        vector<int> tempNums = nums;  // Create a copy to modify
        int curr = startPos;
        int n = nums.size();
        
        while (curr >= 0 && curr < n) {  // While curr is in range [0, n-1]
            if (tempNums[curr] == 0) {
                // Move in current direction
                curr = goingRight ? curr + 1 : curr - 1;
            } else if (tempNums[curr] > 0) {
                // Decrement value
                tempNums[curr]--;
                // Reverse direction
                goingRight = !goingRight;
                // Take a step in new direction
                curr = goingRight ? curr + 1 : curr - 1;
            }
        }
        
        // Check if all elements are 0
        for (int num : tempNums) {
            if (num != 0) return false;
        }
        return true;
    }
    
    int countValidSelections(vector<int>& nums) {
        int validCount = 0;
        int n = nums.size();
        
        // Try each possible starting position
        for (int i = 0; i < n; i++) {
            // Only consider positions that start with 0
            if (nums[i] == 0) {
                // Try both directions
                if (simulateProcess(nums, i, true))  // Going right
                    validCount++;
                if (simulateProcess(nums, i, false)) // Going left
                    validCount++;
            }
        }
        
        return validCount;
    }
};",1454816831
Mayank Tomar,htomar6397,833,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        vector<int> coverage(n + 1, 0);  // Use n+1 size for easier prefix sum calculation
        
        // Use difference array technique for range updates
        for (const auto& query : queries) {
            int left = query[0];
            int right = query[1];
            coverage[left]++;           // Add 1 at start of range
            coverage[right + 1]--;      // Subtract 1 after end of range
        }
        
        // Calculate prefix sum to get actual coverage at each position
        for (int i = 1; i < n; i++) {
            coverage[i] += coverage[i - 1];
        }
        
        // Check if we have enough queries to reduce each number to 0
        for (int i = 0; i < n; i++) {
            if (nums[i] > coverage[i]) {
                return false;
            }
        }
        
        return true;
    }
};",1454820485
Mayank Tomar,htomar6397,833,3643,cpp,"class Solution {
    class SegmentTree {
        vector<long long> tree;
        int n;
        
    public:
        SegmentTree(int size) {
            n = size;
            tree.resize(4 * n, 0);
        }
        
        void update(int left, int right, int val) {
            updateRange(0, 0, n-1, left, right, val);
        }
        
        long long query(int index) {
            return queryPoint(0, 0, n-1, index);
        }
        
    private:
        void updateRange(int node, int start, int end, int left, int right, int val) {
            if (start > right || end < left) return;
            
            if (start >= left && end <= right) {
                tree[node] += val;
                return;
            }
            
            int mid = (start + end) / 2;
            updateRange(2*node + 1, start, mid, left, right, val);
            updateRange(2*node + 2, mid+1, end, left, right, val);
        }
        
        long long queryPoint(int node, int start, int end, int index) {
            if (start > index || end < index) return 0;
            
            if (start == end) return tree[node];
            
            int mid = (start + end) / 2;
            return tree[node] + 
                   queryPoint(2*node + 1, start, mid, index) + 
                   queryPoint(2*node + 2, mid+1, end, index);
        }
    };
    
    bool canZeroArray(vector<int>& nums, vector<vector<int>>& queries, int k) {
        SegmentTree st(nums.size());
        
        // Apply first k queries
        for (int i = 0; i < k; i++) {
            st.update(queries[i][0], queries[i][1], queries[i][2]);
        }
        
        // Check if each position can be reduced to zero
        for (int i = 0; i < nums.size(); i++) {
            if (st.query(i) < nums[i]) return false;
        }
        return true;
    }
    
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        // Early check if possible with all queries
        if (!canZeroArray(nums, queries, queries.size())) return -1;
        
        // Binary search for minimum k
        int left = 0, right = queries.size();
        while (left < right) {
            int mid = left + (right - left) / 2;
            if (canZeroArray(nums, queries, mid)) {
                right = mid;
            } else {
                left = mid + 1;
            }
        }
        
        return left;
    }
};",1454828994
jerry5841314,jerry5841314,834,3616,cpp,"class Solution {
public:
    int check(vector<int> nums, int pos, int dir){
        int zeroCnt = 0;
        int n = nums.size();
        for (int i = 0; i < n; i++)
            if (nums[i] == 0)
                zeroCnt++;
        while (zeroCnt < n && pos >= 0 && pos < n){
            if (nums[pos] == 0)
                pos += dir;
            else {
                nums[pos]--;
                if (nums[pos] == 0)
                    zeroCnt++;
                if (dir == 1)
                    dir = -1;
                else
                    dir = 1;
                pos += dir;
            }
        }
        return zeroCnt == n;
    }
    int countValidSelections(vector<int>& nums) {
        int cnt = 0;
        int n = nums.size();
        for (int i = 0; i < n; i++){
            if (nums[i] != 0)
                continue;
            cnt += check(nums, i, 1) + check(nums, i, -1);
        }
        return cnt;
    }
};",1454818260
jerry5841314,jerry5841314,834,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
       multiset<pair<int, int>> diff;
        for (auto &q : queries){
            diff.insert({q[0], 1});
            diff.insert({q[1] + 1, -1});
        }
        auto it = diff.begin();
        int n = nums.size();
        int cnt = 0;
        for (int i = 0; i < n; i++){
            while (it != diff.end() && it->first <= i){
                cnt += it->second;
                it++;
            }    
            if (cnt < nums[i])
                return false;
        }
        return true;
    }
};",1454829251
jerry5841314,jerry5841314,834,3643,cpp,"class Solution {
public:
    bool check(vector<int>& nums, vector<vector<int>>& queries, int k){
        vector<pair<int, int>> diff;
        for (int i = 0; i < k; i++){
            auto &q = queries[i];
            diff.push_back({q[0], q[2]});
            diff.push_back({q[1] + 1, -q[2]});
        }
        sort(diff.begin(), diff.end());
        auto it = diff.begin();
        int n = nums.size();
        int cnt = 0;
        for (int i = 0; i < n; i++){
            while (it != diff.end() && it->first <= i){
                cnt += it->second;
                it++;
            }    
            if (cnt < nums[i])
                return false;
        }
        return true;
    }
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int l = 0, r = queries.size() + 1;
        while (l < r){
            int mid = (l + r) / 2;
            if (check(nums, queries, mid))
                r = mid;
            else
                l = mid + 1;
        }
        if (l == queries.size() + 1)
            return -1;
        else
            return l;
    }
};",1454843834
Ishit_7788,Ishit_Jain,835,3616,java,"class Solution {
    public int countValidSelections(int[] nums) {
        int n = nums.length;
        int sum = 0;
        for(int i = 0; i < n; i++){
            sum += nums[i];
        }
        int x = 0;
        int ans = 0;
        for(int i = 0; i < n; i++){
            x += nums[i];
            if(nums[i] == 0){
                if(x == sum - x) ans += 2;
                else if(Math.abs(sum - 2 * x) == 1) ans++;
            }
        }
        return ans;
    }
}",1454810577
Ishit_7788,Ishit_Jain,835,3639,java,"class Solution {
    public boolean isZeroArray(int[] nums, int[][] q) {
        int n = nums.length;
        int[] a = new int[n + 1];
        for(int[] i : q){
            int l = i[0];
            int r = i[1];
            a[l] += 1;
            if(r + 1 < n){
                a[r + 1] -= 1;
            }
        }
        int x = 0;
        for(int i = 0; i < n; i++){
            x += a[i];
            System.out.print(x + "" "" );
            if(nums[i] > x) return false;
        }
        return true;
    }
}",1454819478
Ishit_7788,Ishit_Jain,835,3643,java,"class Solution {
    public static boolean f(int[] nums, int[][] q, int k){
        int n = nums.length;
        int[] a = new int[n + 1];
        for(int i = 0; i < k; i++){
            int l = q[i][0];
            int r = q[i][1];
            int v = q[i][2];
            a[l] += v;
            if(r + 1 < n){
                a[r + 1] -= v;
            }
        }
        int x = 0;
        for(int i = 0; i < n; i++){
            x += a[i];
            if(nums[i] > x) return false;
        }
        return true;
    }
    public int minZeroArray(int[] nums, int[][] q) {
        int n = nums.length;
        int l = 1;
        int r = q.length;
        int res = -1;
        int y = 0;
        for(int i = 0; i < n; i++){
            y += nums[i];
        }
        if(y == 0) return 0;
        while(l <= r){
            int mid = l + (r - l) / 2;
            if(f(nums, q, mid)){
                res = mid;
                r = mid - 1;
            }
            else l = mid + 1;
        }
        return res;
    }
}",1454836502
Suvi,hey_its_suvi,836,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int sum=0;
        for(auto e:nums) sum+=e;
        int ans=0;
        int rs=0;
        for(auto e:nums)
        {
            rs+=e;
            if(rs == sum-rs && e==0) ans+=2;
            else if((rs == sum-rs+1 || rs == sum-rs-1) && e==0) ans+=1;
        }
        return ans;
    }
};",1454808092
Suvi,hey_its_suvi,836,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        vector<int> d(nums.size());
        for(auto q:queries)
        {
            d[q[0]]--;
            if(q[1]+1 != nums.size())d[q[1]+1]++;
        }
        int cs=0;
        for(int i=0;i<nums.size();i++)
        {
            cs+=d[i];
            if(-cs<nums[i]) return false;
        }
        return true;
    }
};",1454814248
Suvi,hey_its_suvi,836,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        bool all_z=true;
        for(auto e:nums) if(e!=0) {
            all_z=false;
            break;
        }
        if(all_z) return 0;
        int n=nums.size();
        int m=queries.size();
        int l=0;
        int r=m-1;
        while(l<=r)
        {
            int mid = (l+r)/2;
            bool can_k = can(nums,queries,mid);
            // cout<<mid<<' '<<can_k<<'\n';
            if(can_k) r=mid-1;
            else l=mid+1;
        }
        return l+1 == m+1? -1: l+1;
    }

    bool can(vector<int>& nums, vector<vector<int>>& queries, int k)
    {
        int n=nums.size();
        vector<int> d(n);
        for(int i=0;i<=k;i++)
        {
            d[queries[i][0]]-= queries[i][2];
            if(queries[i][1]+1 != nums.size())d[queries[i][1]+1]+=queries[i][2];
        }
        int cs=0;
        for(int i=0;i<nums.size();i++)
        {
            cs+=d[i];
            if(-cs<nums[i]) return false;
        }
        return true;
    }
};",1454836521
ch1,insomniacat,837,3616,cpp,"class Solution {
    int cnt = 0;
    
    bool Valid(vector<int> A, int cur, int dir) {
        int n = A.size();
        int acc = 0;
        while(cur >= 0 && cur < n) {
            if(A[cur] == 0) {
                cur += dir;
            }else {
                A[cur] -= 1;
                acc++;
                dir *= -1;
                cur += dir;
            }
        }
        return acc == cnt;
    }
public:
    int countValidSelections(vector<int>& A) {
        int n = A.size();
        for(int i : A ){
            cnt += i;
        }
        int ans = 0;
        for(int i = 0; i < n; ++i) {
            if(A[i] != 0) {
                continue;
            }
            ans += Valid(A, i, 1);
            // cout << ans << endl;
            ans += Valid(A, i, -1);
            // cout << ans << endl;
            // cout << endl;
        }
        return ans;
         
    }
};",1454826248
ch1,insomniacat,837,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        int q = queries.size();

        vector<int> acc(n + 1, 0);

        for (const auto& query : queries) {
            int l = query[0];
            int r = query[1];

            acc[l] += 1;
            if (r + 1 < n)
                acc[r + 1] -= 1;
        }

        for (int i = 1; i < n; ++i) {
            acc[i] += acc[i - 1];
        }

        for (int i = 0; i < n; ++i) {
            if (acc[i] < nums[i])
                return false;
        }

        return true;
    }
};",1454826101
ch1,insomniacat,837,3643,cpp,"using LL = long long;
class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        int q = queries.size();

        int low = 0;
        int high = q + 1;
        int result = -1;

        while (low < high) {
            int mid = low + (high - low) / 2;

            vector<LL> diff(n + 2, 0);

            for (int i = 0; i < mid; ++i) {
                int l = queries[i][0];
                int r = queries[i][1];
                int va = queries[i][2];

                diff[l] += va;
                diff[r + 1] -= va; 
            }

            bool valid = true;
            LL acc = 0;
            for (int i = 0; i < n; ++i) {
                acc += diff[i];
                if (acc >= nums[i]) {
                    continue;
                } else {
                    valid = false;
                    break;
                }
            }
            
            // cout << ""mid="" << mid << "" va:="" << valid << endl;

            if (valid) {
                high = mid;
            } else {
                low = mid + 1;
            }
        }

        return low == q + 1 ? -1 : low;
    }
};",1454843881
Abhinav-Bala,Abhinav-Bala,838,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        
        def works(start, dir):
            curr = i
            n = nums.copy()
            while curr >= 0 and curr < len(nums):
                if n[curr] > 0:
                    n[curr]-=1
                    dir *= -1
                curr += dir

            return sum(n) == 0


        ways = 0
        for i in range(len(nums)):
            if nums[i] == 0:
                if works(i, -1):
                    ways +=1
                if works(i, 1):
                    ways+=1
        return ways",1454836564
Abhinav-Bala,Abhinav-Bala,838,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        sweep = []

        for start, end in queries:
            sweep.append((start, 1))
            sweep.append((end+1, -1))

        sweep.sort(key= lambda x: x[0])

        currDec = 0
        l = 0
        for i in range(len(nums)):
            while l < len(sweep) and sweep[l][0] <= i:
                currDec += sweep[l][1]
                l+=1

            if currDec < nums[i]:
                return False
        return True
            
            ",1454811039
Abhinav-Bala,Abhinav-Bala,838,3643,python3,"class Solution:
    
    
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:

        def isPossible(k):
            sweep = []
    
            for i in range(k):
                start,end,val = queries[i]

                sweep.append((start, val))
                sweep.append((end+1, -val))
    
            sweep.sort(key= lambda x: x[0])
    
            currDec = 0
            l = 0
            for i in range(len(nums)):
                while l < len(sweep) and sweep[l][0] <= i:
                    currDec += sweep[l][1]
                    l+=1
    
                if currDec < nums[i]:
                    return False
            return True

        if not isPossible(len(queries)):
            return -1
        
        l = 0
        r = len(queries)
        minK = len(queries)
        
        while l <= r:
            mid = (l+r)//2
            if isPossible(mid):
                minK = min(minK, mid)
                r = mid-1
            else:
                l = mid+1
        return minK
        ",1454821406
potatoyy,potatoyy,839,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        n = len(nums)
        ans = 0
        def check(idx, dir):
            i = idx + dir
            x = nums[:]
            while 0 <= i < n:
                if x[i] > 0:
                    x[i] -= 1
                    dir = -dir
                i += dir
            return all(x == 0 for x in x)
                
        for i in range(n):
            if nums[i] == 0:
                ans += check(i, 1) + check(i, -1)
        return ans
                
        ",1454812578
potatoyy,potatoyy,839,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        n = len(nums)
        pre = [0] * (n + 1)
        for l, r in queries:
            pre[l] += 1
            pre[r + 1] -= 1
        cur = 0
        for i in range(n):
            cur += pre[i]
            if cur < nums[i]: return False
            
        return True
        ",1454816931
potatoyy,potatoyy,839,3643,python3,"class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        n = len(nums)
        
        def check(k):
            pre = [0] * (n + 1)
            for l, r, v in queries[:k]:
                pre[l] += v
                pre[r + 1] -= v
            cur = 0
            for i in range(n):
                cur += pre[i]
                if cur < nums[i]: return False
                
            return True

        if not check(len(queries)): return -1
        left, right = 0, len(queries)
        while left <= right:
            mid = left + right >> 1
            if check(mid):
                right = mid - 1
            else:
                left = mid + 1
                
        return left
        
        ",1454843949
Sahil Hussain,mdsahil37621,841,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int res = 0;
        int n = nums.size();
        int sum = accumulate(nums.begin(), nums.end(), 0);
        
        int s = 0;
        for(int i = 0; i < n; i++){
            if(nums[i] == 0){
                if(s == sum-s) res += 2;
                if(abs(sum-2*s) == 1) res++;
            }
            
            s += nums[i];
        }
        return res;
    }
};",1454809280
Sahil Hussain,mdsahil37621,841,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        vector<int> a(n+10, 0);
        
        for(auto query: queries){
            a[query[0]]++;
            a[query[1]+1]--;
        }
        
        for(int i = 1; i <= n; i++){
            a[i] += a[i-1];
        }
        
        for(int i = 0; i < n; i++){
            if(nums[i] > a[i]) return false;
        }
        return true;
    }
};",1454818148
Sahil Hussain,mdsahil37621,841,3643,cpp,"class SegmentTree {
    vector<int> tree, lazy;
    int n;

    void buildTree(vector<int>& arr, int start, int end, int node) {
        if (start == end) {
            tree[node] = arr[start];
            return;
        }

        int mid = (start + end) / 2;
        buildTree(arr, start, mid, 2 * node + 1);
        buildTree(arr, mid + 1, end, 2 * node + 2);

        tree[node] = max(tree[2 * node + 1], tree[2 * node + 2]);
    }

    void propagate(int start, int end, int node) {
        if (lazy[node] != 0) {
            tree[node] -= lazy[node]; 
            if (start != end) {
                lazy[2 * node + 1] += lazy[node];
                lazy[2 * node + 2] += lazy[node];
            }
            lazy[node] = 0; 
        }
    }

    void updateRange(int start, int end, int l, int r, int value, int node) {
        propagate(start, end, node);

        if (start > r || end < l) return;

        if (start >= l && end <= r) {
            lazy[node] += value;
            propagate(start, end, node);
            return;
        }

        int mid = (start + end) / 2;
        updateRange(start, mid, l, r, value, 2 * node + 1);
        updateRange(mid + 1, end, l, r, value, 2 * node + 2);

        tree[node] = max(tree[2 * node + 1], tree[2 * node + 2]);
    }

    int queryMax(int start, int end, int l, int r, int node) {
        propagate(start, end, node);

        if (start > r || end < l) return INT_MIN;

        if (start >= l && end <= r) return tree[node];

        int mid = (start + end) / 2;
        return max(queryMax(start, mid, l, r, 2 * node + 1),
                   queryMax(mid + 1, end, l, r, 2 * node + 2));
    }

public:
    SegmentTree(vector<int>& arr) {
        n = arr.size();
        tree.resize(4 * n, 0);
        lazy.resize(4 * n, 0);
        buildTree(arr, 0, n - 1, 0);
    }

    void updateRange(int l, int r, int value) {
        updateRange(0, n - 1, l, r, value, 0);
    }

    int queryMax() {
        return queryMax(0, n - 1, 0, n - 1, 0);
    }
};

class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        SegmentTree segTree(nums);
        
        if(segTree.queryMax() <= 0) return 0;
        
        int k = 1;
        for(auto query: queries){
            segTree.updateRange(query[0], query[1], query[2]);
            
            if(segTree.queryMax() <= 0) return k;
            k++;
        }
        return -1;
    }
};",1454836639
alterdra_1,jerksundertaker,842,3616,cpp,"class Solution {
public:
    int valid(vector<int> nums, int i, int dir){
        int n = nums.size();
        while(i >= 0 && i < n){
            if(nums[i] == 0) i += dir;
            else{
                nums[i]--;
                dir = dir == 1 ? -1 : 1;
                i += dir;
            }
        }
        for(int& num: nums)
            if(num > 0)
                return false;
        return true;
    }
    int countValidSelections(vector<int>& nums) {
        int ans = 0;
        for(int i = 0; i < nums.size(); i++){
            if(nums[i] == 0){
                ans += valid(nums, i, 1);
                ans += valid(nums, i, -1);
            }
        }
        return ans;
    }
};",1454828537
alterdra_1,jerksundertaker,842,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        vector<int> diff(n + 1, 0);
        diff[0] = nums[0];
        for(int i = 1; i < n; i++)
            diff[i] = nums[i] - nums[i - 1];
        // Difference array
        for(auto& q: queries){
            diff[q[0]]--;
            diff[q[1] + 1]++;
        }
        for(int i = 0; i < n; i++){
            if(i > 0)
                diff[i] += diff[i - 1];
            if(diff[i] > 0)
                return false;
        }
        return true;
    }
};
// 4, 3, 2, 1
// 4, -1, -1, -1
// [1, 3] -> 4, -2, -1, -1
// [0, 2] -> 3, -2, -1, 0
// 3, 1, 0, 0",1454841176
alterdra_1,jerksundertaker,842,3643,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries, int k) 
    {
        int n = nums.size();
        vector<int> diff(n + 1, 0);
        diff[0] = nums[0];
        for(int i = 1; i < n; i++)
            diff[i] = nums[i] - nums[i - 1];
        
        // Difference array
        for(int i = 0; i < k; i++){
            auto& q = queries[i];
            diff[q[0]] -= q[2];
            diff[q[1] + 1] += q[2];
        }
        for(int i = 0; i < n; i++){
            if(i > 0)
                diff[i] += diff[i - 1];
            if(diff[i] > 0)
                return false;
        }
        return true;
    }
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        // Reduce at most val--> reduce it with val
        int n = queries.size();
        int l = 0, r = n;
        int ans = n + 1;
        while(l <= r){
            int mid = (l + r) / 2;
            if(isZeroArray(nums, queries, mid)){
                ans = min(ans, mid);
                r = mid - 1;
            }
            else l = mid + 1;
        }
        return ans == n + 1 ? -1 : ans;
    }
};",1454851346
hsujc513,hsujc513,843,3616,java,"class Solution {
    public int countValidSelections(int[] nums) {
        int total = 0;
        for(int i=0;i<nums.length;i++) {
            total += nums[i];
        }
        int ans = 0;
        int total2 = 0;
        for(int i=0;i<nums.length;i++){
            total2+=nums[i];
            total-=nums[i];
            if(nums[i]==0) {
                if(Math.abs(total2 - total)==1) {
                    ans+=1;
                } else if(Math.abs(total2 - total)==0) {
                    ans+=2;
                }
            }
        }
        return ans;
    }
}",1454811734
hsujc513,hsujc513,843,3639,java,"class Solution {
    public boolean isZeroArray(int[] nums, int[][] queries) {
        int[] arr = new int[nums.length+1];
        for(int i=0;i<queries.length;i++) {
            int l = queries[i][0];
            int r = queries[i][1];
            arr[l]++;
            arr[r+1]--;
        }

        int total = 0;
        for(int i=0;i<nums.length;i++) {
            total += arr[i];
            if(nums[i]>total) {
                return false;
            }
        }
        return true;
    }
}",1454819356
hsujc513,hsujc513,843,3643,java,"class Solution {
    public int minZeroArray(int[] nums, int[][] queries) {
        if(isAns(-1,nums,queries)) {
            return 0;
        }
        int l = 0;
        int r = queries.length - 1;
        if(!isAns(r,nums,queries)) {
            return -1;
        }
        int mid;
        while(l<r){
            mid = (l+r)/2;
            if(isAns(mid, nums, queries)) {
                r = mid;
            } else {
                l = mid+1;
            }
        }
        return r+1;
    }

    boolean isAns(int ans, int[] nums, int[][] queries) {
        int[] arr = new int[nums.length+1];
        for(int i=0;i<=ans;i++) {
            int l = queries[i][0];
            int r = queries[i][1];
            int v = queries[i][2];
            arr[l]+=v;
            arr[r+1]-=v;
        }

        long total = 0;
        for(int i=0;i<nums.length;i++) {
            total += arr[i];
            if(nums[i]>total) {
                return false;
            }
        }
        return true;
    }
}",1454844015
Suraj Chandra,ZiggZam,844,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int n=nums.size();
        if(n==1){
            if(nums[0]==0) return 2;
            return 0;
        }
        vector<int> v(n, 0);
        v[n-1]=nums[n-1];
        for(int i=n-2;i>=0;i--) v[i]=v[i+1]+nums[i];
        int sum=0;
        int res=0;
        for(int i=0;i<nums.size();i++){
            if(nums[i]==0){
                if(i==n-1){
                    if(sum==0) res+=2;
                    if(sum==1) res++;
                }
                else{
                    if(sum==v[i+1]) res+=2;
                    else if(abs(sum-v[i+1])==1) res++;
                }
               // cout<<i<<res<<endl;
            }
            sum+=nums[i];
        }
        return res;
    }
};",1454816711
Suraj Chandra,ZiggZam,844,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n=nums.size();
        vector<int> v(n+1, 0);
        for(auto &q: queries){
            v[q[0]]++;
            v[q[1]+1]--;
        }
        for(int i=1;i<n;i++) v[i]+=v[i-1];
        for(int i=0;i<n;i++) if(nums[i]>v[i]) return false;
        return true;
    }
};",1454824859
Suraj Chandra,ZiggZam,844,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& q) {
        int n=nums.size();
        int l=0, r= q.size()-1;
        int res=r+2;
        bool c= true;
        for(int i=0;i<n; i++) if(nums[i]!=0) c=false;
        if(c) return 0;
        while(l<=r){
             int m=(l+r)/2;
             vector<int> v(n+1, 0);
             for(int i=0;i<=m;i++){
                 v[q[i][0]]+=q[i][2];
                 v[q[i][1]+1]-=q[i][2];
             }
            for(int i=1;i<n;i++) v[i]+=v[i-1];
            bool check= false;
            for(int i=0;i<n;i++){
                if(nums[i]>v[i]) {
                    check = true;
                    break;
                }
            }
            if(check){
                l=m+1;
            }
            else {
                res=m;
                r=m-1;
            }
        }
        if(res<q.size()) return res+1;
        return -1;
    }
};",1454844033
Terry,tttyyy49,845,3616,java,"class Solution {
    public int countValidSelections(int[] nums) {
        int res = 0;
        for (int start = 0; start < nums.length; ++start) {
            if (nums[start] != 0) continue;
            if (valid(Arrays.copyOf(nums, nums.length), start, 1)) ++res;
            if (valid(Arrays.copyOf(nums, nums.length), start, -1)) ++res;
        }
        return res;
    }
    
    boolean valid(int[] nums, int i, int d) {
        while (i >= 0 && i < nums.length) {
            if (nums[i] == 0) {
                i += d;
            } else if (nums[i] > 0) {
                --nums[i];
                d *= -1;
                i += d;
            }
        }
        
        for (int x : nums) {
            if (x != 0) return false;
        }
        return true;
    }
}",1454809897
Terry,tttyyy49,845,3639,java,"class Solution {
    public boolean isZeroArray(int[] nums, int[][] queries) {
        PriorityQueue<int[]> pq = new PriorityQueue<>((a, b) -> {
            if (a[0] != b[0]) return Integer.compare(a[0], b[0]);
            return Integer.compare(a[1], b[1]);
        });
        for (int[] q : queries) {
            pq.offer(new int[] {q[0], 1});
            pq.offer(new int[] {q[1] + 1, -1});
        }
        
        int cnt = 0;
        for (int i = 0; i < nums.length; ++i) {
            while (!pq.isEmpty() && pq.peek()[0] <= i) {
                cnt += pq.poll()[1];
            }
            if (cnt < nums[i]) return false;
        }
        return true;
    }
}",1454823808
Terry,tttyyy49,845,3643,java,"class Solution {
    public int minZeroArray(int[] nums, int[][] queries) {
        int start = 0;
        int end = queries.length;
        while (start + 1 < end) {
            int mid = start + (end - start) / 2;
            if (isZeroArray(nums, queries, mid)) {
                end = mid;
            } else {
                start = mid;
            }
        }
        if (isZeroArray(nums, queries, start)) return start;
        if (isZeroArray(nums, queries, end)) return end;
        return -1;
    }
    
    public boolean isZeroArray(int[] nums, int[][] queries, int k) {
        PriorityQueue<int[]> pq = new PriorityQueue<>((a, b) -> {
            if (a[0] != b[0]) return Integer.compare(a[0], b[0]);
            return Integer.compare(a[1], b[1]);
        });
        for (int i = 0; i < k; ++i) {
            int[] q = queries[i];
            pq.offer(new int[] {q[0], q[2]});
            pq.offer(new int[] {q[1] + 1, -q[2]});
        }
        
        long cnt = 0;
        for (int i = 0; i < nums.length; ++i) {
            while (!pq.isEmpty() && pq.peek()[0] <= i) {
                cnt += pq.poll()[1];
            }
            if (cnt < (long) nums[i]) {
                return false;
            }
        }
        return true;
    }
}

/**
[5]
[[0,0,5],[0,0,1],[0,0,3],[0,0,2]]
**/",1454844145
zhz,eatcoc10,846,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        answer = 0
        for i in range(len(nums)):
            if nums[i] == 0:
                if abs(sum(nums[:i]) - sum(nums[i + 1:])) == 1:
                    answer += 1
                elif abs(sum(nums[:i]) - sum(nums[i + 1:])) == 0:
                    answer += 2
        return answer
        ",1454844148
zhz,eatcoc10,846,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        diff = [0] * len(nums) + [0]
        for i in range(len(queries)):
            diff[queries[i][0]] += 1
            diff[queries[i][1] + 1] -= 1
        cur = 0
        for i in range(len(nums)):
            # print(i)
            cur += diff[i]
            if nums[i] > cur:
                return False
        return True",1454837861
zhz,eatcoc10,846,3643,python3,"class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        diff = [0] * len(nums) + [0]
        for i in range(len(queries)):
            diff[queries[i][0]] += queries[i][2]
            diff[queries[i][1] + 1] -= queries[i][2]
        cur = 0
        for i in range(len(nums)):
            # print(i)
            cur += diff[i]
            if nums[i] > cur:
                return -1
        left, right = 0, len(queries)
        while left < right:
            mid = (left + right) // 2
            diff = [0] * len(nums) + [0]
            for i in range(mid):
                diff[queries[i][0]] += queries[i][2]
                diff[queries[i][1] + 1] -= queries[i][2]
            f = True
            cur = 0
            for i in range(len(nums)):
                cur += diff[i]
                if nums[i] > cur:
                    f = False
                    break
            if f:
                right = mid
            else:
                left = mid + 1
        return left
    ",1454837086
Anshad K,anshadk,847,3616,cpp,"class Solution {
private:
    bool valid(vector<int> nums, int start, int dir) {
        while(0 <= start && start < nums.size()) {
            if(nums[start] == 0)
                start += dir;
            else {
                nums[start]--;
                dir = (dir == 1 ? -1 : 1);
                start += dir;
            }
        }
        for(int num: nums){
            if(num)
                return false;
        }
        return true;
    }
public:
    int countValidSelections(vector<int>& nums) {
        int res = 0;
        for(int i = 0; i < nums.size(); i++) {
            if(nums[i] == 0) {
                res += valid(nums, i, 1);
                res += valid(nums, i, -1);
            }
        }
        return res;
    }
};",1454816205
Anshad K,anshadk,847,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size(), m = queries.size();
        vector<int> q(n + 1, 0);
        for(auto& qu: queries) {
            q[qu[0]]++;
            q[qu[1] + 1]--;
        }
        int curr = 0;
        for(int i = 0; i < n; i++) {
            curr += q[i];
            if(nums[i] > curr)
                return false;
        }
        return true;
    }
};",1454824359
Anshad K,anshadk,847,3643,cpp,"class Solution {
private:
    bool check(vector<int>& nums, vector<vector<int>>& queries, int k) {
        int n = nums.size(), m = queries.size();
        vector<int> q(n + 1, 0);
        for(int i = 0; i < k; i++) {
            q[queries[i][0]] += queries[i][2];
            q[queries[i][1] + 1] -= queries[i][2];
        }
        int curr = 0;
        for(int i = 0; i < n; i++) {
            curr += q[i];
            if(nums[i] > curr)
                return false;
        }
        return true;
    }
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int m = queries.size();
        int left = 0;
        int right = m;
        int res = INT_MAX;
        while(left <= right) {
            int mid = left + (right - left) / 2;
            if(check(nums, queries, mid)) {
                res = min(res, mid);
                right = mid - 1;
            } else {
                left = mid + 1;
            }
        }
        return (res == INT_MAX) ? -1 : res;
    }
};",1454844162
Ashish Sutar,ashishsutar1210,848,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int sum = 0;
        for(auto i : nums)
        {
            sum += i;
        }
        int nsum = 0,ans = 0;
        for(int i:nums)
        {
            sum -= i;
            nsum += i;
            if(!i)
            {
                if(abs(sum-nsum) == 1)
                {
                    ans += 1;
                }
                else 
                ans += 2*(sum == nsum);
            }
        }
        return ans;
    }
};",1454807585
Ashish Sutar,ashishsutar1210,848,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        vector<int>p(nums.size(),0);
        for(auto i : queries)
        {
            p[i[0]]--;
            if(i[1]+1<nums.size())
            {
                ++p[i[1]+1];
            }
        }
        for(int i=1;i<nums.size();++i)
        {
            p[i] += p[i-1];
        }
        for(int i=0;i<nums.size();++i)
        {
            nums[i] += p[i];
            // cout<<p[i]<<' '<<nums[i]<<endl;
        }
        sort(nums.begin(),nums.end());
        return *max_element(nums.begin(),nums.end()) < 1;
    }
};",1454815588
Ashish Sutar,ashishsutar1210,848,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        int low = 0,high = queries.size();
        int res = -1;
        while(low <= high)
        {
            int mid = (low+high)/2;
            vector<long long>p(n,0);
            for(int i=0;i<mid;++i)
            {
                int l = queries[i][0];
                int r = queries[i][1];
                p[l] -= queries[i][2];
                if(r+1<n)
                {
                    p[r+1] += queries[i][2];
                }
            }
            for(int i=1;i<n;++i)
            {
                p[i] += p[i-1];
            }
            for(int i=0;i<n;++i)
            {
                p[i] += (long long)nums[i];
            }
            if(*max_element(p.begin(),p.end()) < 1)
            {
                res = mid;
                high = mid-1;
            }
            else 
            {
                low = mid+1;
            }
        }
        return res;
    }
};",1454829327
harshal_02,harshal_02,851,3616,cpp,"class Solution {
public:
    void solve(vector<int> nums,int crr,int dir,bool &chk){
        int n=nums.size();
        while(crr >= 0 && crr < n){
            if(nums[crr]==0){
                crr+=dir;
            } 
            else if(nums[crr] > 0){
                nums[crr]--;      
                dir *= -1;   
                crr+=dir;
            }
        }
        for(int it : nums){
            if(it!=0){
                chk=false;
                return;
            }
        }
        chk=true;
    }
    int countValidSelections(vector<int>& nums) {
        int n=nums.size();
        int cnt=0;
        for(int i=0;i<n;i++){
            if(nums[i]==0){
                bool left=false;
                bool right=false;
                solve(nums,i,-1,left);
                solve(nums,i,1,right);
                if(left==1){
                    cnt++;
                }
                if(right==1){
                    cnt++;
                }
            }
        }
        return cnt;
    }
};",1454844220
harshal_02,harshal_02,851,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n=nums.size();
        int sum=0;
        vector<int>v(n+1,0);
        for (const auto& it: queries) {
            int a=it[0];
            int b=it[1];
            v[a]++;
            if(b + 1 < n){
                v[b+1]--;
            }
        }
        for(int i=0;i<n;i++){
            sum+=v[i]; 
            if(nums[i]>sum) {
                return false; 
            }
        }
        return true; 
    }
};",1454811911
harshal_02,harshal_02,851,3643,cpp,"#define ll long long int
class Solution { 
public: 
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) { 
        int n=nums.size(); 
        int m=queries.size(); 
        int low=0;
        int high=m;
        int ans=-1;
        while(low<=high){ 
            int mid=low+(high-low)/2; 
            vector<ll>v(n+1,0); 
            for(int i=0;i<mid;i++){ 
                v[queries[i][0]]+=queries[i][2]; 
                v[queries[i][1]+1]-=queries[i][2]; 
            } 
            for(int i=1;i<n;i++){
                v[i]+=v[i-1]; 
            }
            bool satya=true; 
            for(int i=0;i<n;i++) 
                if(nums[i]>v[i]){
                    satya=false; 
                    break;
                } 
            if(satya==0){
                low=mid+1;
            } 
            else{
                high=mid-1;
                ans=mid;
            } 
        } 
        return ans; 
    } 
};",1454834194
lone_wolf007,lone_wolf007,852,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int  sum = 0, n = nums.size();
        for (int num: nums) sum += num;

        int currSum = 0, ans = 0;
        for (int i = 0; i < n; ++ i) {
            if (nums[i] == 0) {
                if (abs(currSum*2 - sum) < 2) {
                    
                    ans += 2 - abs(currSum*2 - sum);
                }
            }
            
            currSum += nums[i];
        }

        return ans;
    }
};",1454811855
lone_wolf007,lone_wolf007,852,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        int m = queries.size();

        int updates[n];
        fill_n(updates, n, 0);

        for (vector<int>&query: queries) {
            int start = query[0];
            int end = query[1];
            ++ end;
            ++ updates[start];
            if (end < n) -- updates[end];
        }
        for (int i = 1; i < n; ++ i) {
            updates[i] += updates[i - 1];
        }

        for (int i = 0; i < n; ++ i) {
            if (updates[i] < nums[i]) {
                return false;
            }
        }
        return true;
    }
};",1454823236
lone_wolf007,lone_wolf007,852,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        int m = queries.size();


        if (*max_element(nums.begin(), nums.end()) == 0) return 0;

        int lo = 0, hi = m-1, mid, res = -1;

        while (lo <= hi) {
            mid = lo + (hi - lo)/2;
            int updates[n];
            fill_n(updates, n, 0);
    
            // for (vector<int>&query: queries) {
            for (int i = 0; i <= mid; ++ i) {
                vector<int>&query = queries[i];
                int start = query[0];
                int end = query[1];
                int val = query[2];
                ++ end;
                updates[start] += val;
                if (end < n)  updates[end] -= val;
            }
            for (int i = 1; i < n; ++ i) {
                updates[i] += updates[i - 1];
            }    
            bool ok = true;
            for (int i = 0; i < n and ok; ++ i) {
                if (updates[i] < nums[i]) {
                    ok = false;
                }
            }

            if (ok) {
                res = mid+1;
                hi = mid - 1;
            } else {
                lo = mid + 1;
            }
            
        }
        
        return res;
    }
};",1454844225
YJS,as535364,853,3616,cpp,"class Solution {
private:
    bool isOK(vector<int> nums, int curr, int dir) {
        if (nums[curr] != 0) return false;
        int n = nums.size();
        for (int i = curr; i >= 0 && i < n; i += dir) {
            if (nums[i] > 0) {
                --nums[i];
                dir *= -1;
            }
        }
        for (int i = 0; i < n; ++i) {
            if (nums[i] != 0) return false;
        }
        return true;
    }
public:
    int countValidSelections(vector<int>& nums) {
        int res = 0;
        for (int i = 0; i < nums.size(); ++i) {
            if(isOK(nums, i, 1)) res++;
            if (isOK(nums, i, -1)) res++;
        }
        return res;
    }
};",1454816753
YJS,as535364,853,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        vector<int> prefix(n);
        for (auto &query : queries) {
            int l = query[0], r = query[1];
            prefix[l]++;
            if (r + 1 < n) prefix[r + 1]--;
        }
        
        int sum = 0;
        for (int i = 0; i < n; ++i) {
            sum += prefix[i];
            if (sum < nums[i]) return false;
        }
        return true;
    }
};",1454811030
YJS,as535364,853,3643,cpp,"class Solution {
private:
    bool isOK(const vector<int>& nums, const vector<vector<int>>& queries, int k) {
        int n = nums.size();
        vector<int> prefix(n);
        for (int i = 0; i < k; ++i) {
            const auto &query = queries[i];
            int l = query[0], r = query[1], val = query[2];
            prefix[l] += val;
            if (r + 1 < n) prefix[r + 1] -= val;
        }
        // for (int i = 0; i < n; ++i) cout << prefix[i] << ' ';
        // cout << endl;
        int sum = 0;
        for (int i = 0; i < n; ++i) {
            sum += prefix[i];
            if (sum < nums[i]) return false;
        }
        return true;
    }
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int l = 0, r = queries.size();
        while (l < r) {
            int m = l + (r - l) / 2;
            if (isOK(nums, queries, m)) {
                r = m;
            }
            else {
                l = m + 1;
            }
        }
        return isOK(nums, queries, l) ? l : -1;
    }
};
// [7,6,8]
// [[0,0,2],[0,1,5],[2,2,5],[0,2,4]]
// expect: 4
",1454844348
AntonMelnyk,AntonMelnyk,855,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        def simulate(curr, direction):
            n = len(nums)
            temp_nums = nums[:]
    
            while 0 <= curr < n:
                if temp_nums[curr] == 0:
                    curr += direction
                elif temp_nums[curr] > 0:
                    temp_nums[curr] -= 1
                    direction *= -1  
                    curr += direction
    
            return all(num == 0 for num in temp_nums)

        n = len(nums)
        valid_count = 0
    
        for i in range(n):
            if nums[i] == 0:
                if simulate(i, 1):  
                    valid_count += 1
                if simulate(i, -1):  
                    valid_count += 1
    
        return valid_count
            
                    ",1454817406
AntonMelnyk,AntonMelnyk,855,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:


        t = {}
        queries = sorted(queries)
        for x,y in queries:
            if (y not in t):
                t[y] = 1
            else:
                t[y] += 1 


        cur = 0
        cur2 = 0
        for i in range(len(nums)):
            while (cur2<len(queries) and queries[cur2][0]==i):
                cur+=1
                cur2+=1
            if (nums[i]>cur):
                return False
            if (i in t):
                cur-=t[i]
        return True",1454826210
AntonMelnyk,AntonMelnyk,855,3643,python3,"class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:

        def check(k):
            t = {}
            queries2 = queries[:k]
            queries2 = sorted(queries2)
            for x,y,z in queries2:
                if (y not in t):
                    t[y] = z
                else:
                    t[y] += z
    
    
            cur = 0
            cur2 = 0
            for i in range(len(nums)):
                while (cur2<len(queries2) and queries2[cur2][0]==i):
                    cur+=queries2[cur2][2]
                    cur2+=1
                if (nums[i]>cur):
                    return False
                if (i in t):
                    cur-=t[i]
            return True
        if (sum(nums)==0):
            return 0
        l = 1
        r = len(queries)
        res = -1
        while (l<=r):
            mid = (l+r)//2

            if (check(mid)):
                res = mid
                r = mid-1
            else:
                l = mid+1
        return res
            ",1454837083
sugatalaha,sugatalaha,856,3616,cpp,"class Solution {
    bool check(const vector<int> &temp) {
        for (int val : temp) {
            if (val != 0) return false;
        }
        return true;
    }

public:
    int countValidSelections(vector<int>& nums) {
        int count = 0;

        for (int initial = 0; initial < nums.size(); initial++) {
            if (nums[initial] != 0) continue;

            vector<int> temp(nums.begin(), nums.end());
            int directions[] = {1, -1}; 

            for (int dir = 0; dir < 2; dir++) {
                temp = nums; 
                int curr = initial; 
                int prev = directions[dir]; 

                while (curr >= 0 && curr < temp.size()) {
                    if (temp[curr] == 0) {
                        curr += prev; 
                    } else {
                        temp[curr]--;
                        prev = -prev; 
                        curr += prev; 
                    }
                }
                if (check(temp)) {
                    count++;
                }
            }
        }
        return count;
    }
};
",1454844542
sugatalaha,sugatalaha,856,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        vector<long long> prefix(nums.size(),0);
        for(auto q:queries){
            prefix[q[0]]++;
            if(q[1]+1<nums.size())
            {
                prefix[q[1]+1]--;
            }
        }
        for(int i=1;i<nums.size();i++){
            prefix[i]+=prefix[i-1];
        }
        for(int i=0;i<nums.size();i++){
            if(prefix[i]>=nums[i])continue;
            else
            {
                return false;
            }
        }
        return true;
    }
};",1454810419
sugatalaha,sugatalaha,856,3643,cpp,"class Solution {
bool check(int mid,vector<vector<int>> &queries,vector<int> &nums)
{
    vector<long long> prefix(nums.size(),0);
    for(int i=0;i<mid;i++){
        int l=queries[i][0],r=queries[i][1],val=queries[i][2];
        prefix[l]+=val;
        if(r+1<nums.size())
        {
            prefix[r+1]-=val;
        }
    }
    for(int i=1;i<nums.size();i++){
        prefix[i]+=prefix[i-1];
    }
    for(int i=0;i<nums.size();i++){
        if(prefix[i]>=nums[i])continue;
        else return false;
    }
    return true;
}
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int low=0,high=queries.size();
        int ans=-1;
        while(low<=high){
            int mid=(low+high)>>1;
            if(check(mid,queries,nums))
            {
                ans=mid;
                high=mid-1;
            }
            else
            {
                low=mid+1;
            }
        }
        return ans;
    }
};",1454821309
Mahir Salahin Ankon,zorlan,857,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        def similate(start, dir, nums_):
            curr = start
            while 0 <= curr < len(nums):
                if nums_[curr] == 0:
                    curr += dir
                else:
                    nums_[curr] -= 1
                    dir = -dir
                    curr += dir
            return all(x == 0 for x in nums_)
    
        res = 0
        for i in range(len(nums)):
            if nums[i] != 0:
                continue
        
            if similate(i, -1, nums[:]):
                res += 1
            if similate(i, 1, nums[:]):
                res += 1

        return res",1454809201
Mahir Salahin Ankon,zorlan,857,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        n = len(nums)
        decs = [0] * (n + 1)
        for li, ri in queries:
            decs[li] += 1
            if ri + 1 < n:
                decs[ri + 1] -= 1
    
        tot_decs = [0] * n
        tot_decs[0] = decs[0]
        for i in range(1, n):
            tot_decs[i] = tot_decs[i - 1] + decs[i]
        for i in range(n):
            if tot_decs[i] < nums[i]:
                return False
    
        return True",1454840570
Mahir Salahin Ankon,zorlan,857,3643,python3,"class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        n = len(nums)
        nums_ = nums[:]
    
        def check_with(k):
            decs = [0] * (n + 1)
            current_nums = nums_[:]

            for i in range(k):
                li, ri, vali = queries[i]
                decs[li] += vali
                if ri + 1 < n:
                    decs[ri + 1] -= vali
    
            tot_decs = [0] * n
            tot_decs[0] = decs[0]
            for i in range(1, n):
                tot_decs[i] = tot_decs[i - 1] + decs[i]
    
            for i in range(n):
                if tot_decs[i] < current_nums[i]:
                    return False
            return True
    
        left, right = 0, len(queries)
        res = -1
    
        while left <= right:
            mid = (left + right) // 2
            if check_with(mid):
                res = mid  
                right = mid - 1 
            else:
                left = mid + 1
    
        return res",1454851877
bramar2,bramar2,859,3616,cpp,"//#pragma GCC optimize(""O3,unroll-loops"")
//#pragma GCC target(""avx2,bmi,bmi2,lzcnt,popcnt"")
#include <bits/stdc++.h>
using namespace std;
// #include <ext/pb_ds/assoc_container.hpp>
// #include <ext/pb_ds/tree_policy.hpp>
// using namespace __gnu_pbds;
// template<typename T>
// using ordered_map = tree<T, T, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
// template<typename T>
// using ordered_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef __int128 int128_t;
typedef unsigned __int128 uint128_t;

#define dbg_stream cout
void __print(int x) {dbg_stream << x;}
void __print(long x) {dbg_stream << x;}
void __print(long long x) {dbg_stream << x;}
void __print(unsigned x) {dbg_stream << x;}
void __print(unsigned long x) {dbg_stream << x;}
void __print(unsigned long long x) {dbg_stream << x;}
void __print(float x) {dbg_stream << x;}
void __print(double x) {dbg_stream << x;}
void __print(long double x) {dbg_stream << x;}
void __print(char x) {dbg_stream << '\'' << x << '\'';}
void __print(const char *x) {dbg_stream << '\""' << x << '\""';}
void __print(const string &x) {dbg_stream << '\""' << x << '\""';}
void __print(bool x) {dbg_stream << (x ? ""true"" : ""false"");}

template<typename T, typename V>
void __print(const pair<T, V> &x) {dbg_stream << '{'; __print(x.first); dbg_stream << ','; __print(x.second); dbg_stream << '}';}
template<typename T>
void __print(const T &x) {int f = 0; dbg_stream << '{'; for (auto &i: x) dbg_stream << (f++ ? "","" : """"), __print(i); dbg_stream << ""}"";}
void _print() {dbg_stream << ""]\n"";}
template <typename T, typename... V>
void _print(T t, V... v) {__print(t); if (sizeof...(v)) dbg_stream << "", ""; _print(v...);}
#ifndef ONLINE_JUDGE
#define dbg(x...) dbg_stream << ""["" << #x << ""] = [""; _print(x)
#else
#define dbg(x...)
#endif

template <typename T>
void print(T t) { int f = 0; for(const auto& b : t) cout << (f++ ? "" "" : """") << b; cout << '\n'; }
template <typename T>
void print2d(T t) { for(const auto& b : t) { print(b); } }

long long mod_exp(long long base, long long exp, long long modd) { unsigned long long ans = 1; base %= modd; while(exp > 0) { if(exp%2==1) ans = (base*ans)%modd; exp /= 2; base = (base*base)%modd; } return ans; }
long long nCk(int N, int K) { if(K > N) return 0; if(K > N-K) K = N-K; long long ans = 1; for(long long i = 1; i <= K; i++) ans = (ans * (N - (K-i))) / i; return ans; }

const ll MOD = 1e9 + 7;
const ll MOD99 = 998244353;
const ll BIGMOD = pow(2,31)-1;

auto f = ([]() {ios::sync_with_stdio(0); cin.tie(0); return true;})();

class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int n = nums.size();
        auto attempt = [&n](vector<int> nums, int curr, bool left) -> bool {
            if(nums[curr] != 0) return false;
            while(0 <= curr && curr < n) {
                if(nums[curr] > 0) {
                    nums[curr]--;
                    left = !left;
                }
                if(left) --curr;
                else ++curr;
                // dbg(nums, curr, left);
            }
            bool valid = true;
            for(int num : nums) {
                if(num != 0) valid = false;
            }
            return valid;
        };
        int ans = 0;
        for(int i = 0; i < n; i++) {
            for(bool b : {true, false}) {
                if(attempt(nums, i, b)) {
                    // dbg(i, b);
                    ans++;
                }
            }
        }
        return ans;
    }
};",1454809101
bramar2,bramar2,859,3639,cpp,"//#pragma GCC optimize(""O3,unroll-loops"")
//#pragma GCC target(""avx2,bmi,bmi2,lzcnt,popcnt"")
#include <bits/stdc++.h>
using namespace std;
// #include <ext/pb_ds/assoc_container.hpp>
// #include <ext/pb_ds/tree_policy.hpp>
// using namespace __gnu_pbds;
// template<typename T>
// using ordered_map = tree<T, T, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
// template<typename T>
// using ordered_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef __int128 int128_t;
typedef unsigned __int128 uint128_t;

#define dbg_stream cout
void __print(int x) {dbg_stream << x;}
void __print(long x) {dbg_stream << x;}
void __print(long long x) {dbg_stream << x;}
void __print(unsigned x) {dbg_stream << x;}
void __print(unsigned long x) {dbg_stream << x;}
void __print(unsigned long long x) {dbg_stream << x;}
void __print(float x) {dbg_stream << x;}
void __print(double x) {dbg_stream << x;}
void __print(long double x) {dbg_stream << x;}
void __print(char x) {dbg_stream << '\'' << x << '\'';}
void __print(const char *x) {dbg_stream << '\""' << x << '\""';}
void __print(const string &x) {dbg_stream << '\""' << x << '\""';}
void __print(bool x) {dbg_stream << (x ? ""true"" : ""false"");}

template<typename T, typename V>
void __print(const pair<T, V> &x) {dbg_stream << '{'; __print(x.first); dbg_stream << ','; __print(x.second); dbg_stream << '}';}
template<typename T>
void __print(const T &x) {int f = 0; dbg_stream << '{'; for (auto &i: x) dbg_stream << (f++ ? "","" : """"), __print(i); dbg_stream << ""}"";}
void _print() {dbg_stream << ""]\n"";}
template <typename T, typename... V>
void _print(T t, V... v) {__print(t); if (sizeof...(v)) dbg_stream << "", ""; _print(v...);}
#ifndef ONLINE_JUDGE
#define dbg(x...) dbg_stream << ""["" << #x << ""] = [""; _print(x)
#else
#define dbg(x...)
#endif

template <typename T>
void print(T t) { int f = 0; for(const auto& b : t) cout << (f++ ? "" "" : """") << b; cout << '\n'; }
template <typename T>
void print2d(T t) { for(const auto& b : t) { print(b); } }

long long mod_exp(long long base, long long exp, long long modd) { unsigned long long ans = 1; base %= modd; while(exp > 0) { if(exp%2==1) ans = (base*ans)%modd; exp /= 2; base = (base*base)%modd; } return ans; }
long long nCk(int N, int K) { if(K > N) return 0; if(K > N-K) K = N-K; long long ans = 1; for(long long i = 1; i <= K; i++) ans = (ans * (N - (K-i))) / i; return ans; }

const ll MOD = 1e9 + 7;
const ll MOD99 = 998244353;
const ll BIGMOD = pow(2,31)-1;

auto f = ([]() {ios::sync_with_stdio(0); cin.tie(0); return true;})();

typedef long long T;
constexpr long long MAXN = 500'001;
const T segtree_def = 0LL;
T segtree[4*MAXN];
T lazy[4*MAXN];
long long segtreeN;


class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        map<int, int> changes;

        for(auto& q : queries) {
        	changes[q[0]]--;
        	changes[q[1]+1]++;
        }
        int cumulative = 0; bool valid = true;
        for(int i = 0; i < n; i++) {
        	if(changes.count(i)) cumulative += changes[i];
        	if(nums[i] + cumulative > 0) {
        		valid = false;
        		break;
        	}
        }
        return valid;
    }
};",1454812690
bramar2,bramar2,859,3643,cpp,"//#pragma GCC optimize(""O3,unroll-loops"")
//#pragma GCC target(""avx2,bmi,bmi2,lzcnt,popcnt"")
#include <bits/stdc++.h>
using namespace std;
// #include <ext/pb_ds/assoc_container.hpp>
// #include <ext/pb_ds/tree_policy.hpp>
// using namespace __gnu_pbds;
// template<typename T>
// using ordered_map = tree<T, T, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
// template<typename T>
// using ordered_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef __int128 int128_t;
typedef unsigned __int128 uint128_t;

#define dbg_stream cout
void __print(int x) {dbg_stream << x;}
void __print(long x) {dbg_stream << x;}
void __print(long long x) {dbg_stream << x;}
void __print(unsigned x) {dbg_stream << x;}
void __print(unsigned long x) {dbg_stream << x;}
void __print(unsigned long long x) {dbg_stream << x;}
void __print(float x) {dbg_stream << x;}
void __print(double x) {dbg_stream << x;}
void __print(long double x) {dbg_stream << x;}
void __print(char x) {dbg_stream << '\'' << x << '\'';}
void __print(const char *x) {dbg_stream << '\""' << x << '\""';}
void __print(const string &x) {dbg_stream << '\""' << x << '\""';}
void __print(bool x) {dbg_stream << (x ? ""true"" : ""false"");}

template<typename T, typename V>
void __print(const pair<T, V> &x) {dbg_stream << '{'; __print(x.first); dbg_stream << ','; __print(x.second); dbg_stream << '}';}
template<typename T>
void __print(const T &x) {int f = 0; dbg_stream << '{'; for (auto &i: x) dbg_stream << (f++ ? "","" : """"), __print(i); dbg_stream << ""}"";}
void _print() {dbg_stream << ""]\n"";}
template <typename T, typename... V>
void _print(T t, V... v) {__print(t); if (sizeof...(v)) dbg_stream << "", ""; _print(v...);}
#ifndef ONLINE_JUDGE
#define dbg(x...) dbg_stream << ""["" << #x << ""] = [""; _print(x)
#else
#define dbg(x...)
#endif

template <typename T>
void print(T t) { int f = 0; for(const auto& b : t) cout << (f++ ? "" "" : """") << b; cout << '\n'; }
template <typename T>
void print2d(T t) { for(const auto& b : t) { print(b); } }

long long mod_exp(long long base, long long exp, long long modd) { unsigned long long ans = 1; base %= modd; while(exp > 0) { if(exp%2==1) ans = (base*ans)%modd; exp /= 2; base = (base*base)%modd; } return ans; }
long long nCk(int N, int K) { if(K > N) return 0; if(K > N-K) K = N-K; long long ans = 1; for(long long i = 1; i <= K; i++) ans = (ans * (N - (K-i))) / i; return ans; }

const ll MOD = 1e9 + 7;
const ll MOD99 = 998244353;
const ll BIGMOD = pow(2,31)-1;

auto f = ([]() {ios::sync_with_stdio(0); cin.tie(0); return true;})();

typedef long long T;
constexpr long long MAXN = 500'001;
const T segtree_def = 0LL;
T segtree[4*MAXN];
T lazy[4*MAXN];
long long segtreeN;

void segtree_init(long long N) {
	fill(segtree, segtree + 4*N, segtree_def);
	fill(lazy, lazy + 4*N, segtree_def);
	segtreeN = N;
}

T segtree_merge(const T& a, const T& b) {
	return (a + b);
}
T segtree_range_sum(const T& a, long long length) {
	return length * a;
}
T segtree_lazy_merge(const T& a, const T& b) {
	return (a + b);
}
bool segtree_is_default(const T& a) {
	return a == segtree_def;
}

void segtree_propagate(long long v, long long vl, long long vr) {
	if(!segtree_is_default(lazy[v])) {
		if(vl != vr) {
			segtree[v] += lazy[v];
			lazy[2*v] = segtree_lazy_merge(lazy[2*v], lazy[v]);
			lazy[2*v+1] = segtree_lazy_merge(lazy[2*v+1], lazy[v]);
		}else {
			segtree[v] += lazy[v];
		}

		lazy[v] = segtree_def;
	}
}

void segtree_update(long long pos, T val) {
	auto upd = [&](auto&& upd, long long v, long long vl, long long vr) -> void {
		segtree_propagate(v, vl, vr);
		if(vl == vr) {
			segtree[v] = val;
		}else {
			long long vmid = vl + (vr-vl)/2;
			if(pos <= vmid) {
				upd(upd, 2*v, vl, vmid);
			}else {
				upd(upd, 2*v+1, vmid+1, vr);
			}
			segtree[v] = max(segtree[2*v], segtree[2*v+1]);
		}
	};
	upd(upd, 1, 0, segtreeN-1);
}
void segtree_update_range(long long l, long long r, T val) {
	auto upd = [&](auto&& upd, long long v, long long vl, long long vr) -> void {
		segtree_propagate(v, vl, vr);
		if(r < vl || vr < l) {
			return;
		}else if(l <= vl && vr <= r) {
			segtree[v] += val;
			if(vl != vr) {
				lazy[2*v] = segtree_lazy_merge(lazy[2*v], val);
				lazy[2*v+1] = segtree_lazy_merge(lazy[2*v+1], val);
			}
		}else {
			long long vmid = vl + (vr-vl)/2;
			upd(upd, 2*v, vl, vmid);
			upd(upd, 2*v+1, vmid+1, vr);

			segtree[v] = max(segtree[2*v], segtree[2*v+1]);
		}
	};
	upd(upd, 1, 0, segtreeN-1);
}

T segtree_query(long long l, long long r) {
	auto q = [&](auto&& q, long long v, long long vl, long long vr) -> T {
		if(vr < l || r < vl) return segtree_def;
		segtree_propagate(v, vl, vr);
		if(l <= vl && vr <= r) return segtree[v];
		long long vmid = vl + (vr-vl)/2;
		return max(q(q, 2*v, vl, vmid), q(q, 2*v+1, vmid+1, vr));
	};
	return q(q, 1, 0, segtreeN-1);
}

class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
     	int n = nums.size();
     	segtree_init(n);
     	for(int i = 0; i < n; i++) {
     		segtree_update(i, nums[i]);
     	}
     	int ans = -1;
     	if(segtree_query(0, n-1) <= 0) return 0;
     	for(int i = 0; i < queries.size(); i++) {
     		segtree_update_range(queries[i][0], queries[i][1], -queries[i][2]);
     		if(segtree_query(0, n-1) <= 0) {
     			ans = i + 1;
     			break;
     		}
     	}
     	return ans;
    }
};",1454837240
Tushar Gupta,tushargupta1999,861,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int sum = accumulate(nums.begin(), nums.end(), 0), res = 0, cur = 0;
        for(auto a: nums) {
            if(a == 0) {
                res += (abs(sum - cur) <= 1) + (sum == cur);
            } else {
                sum -= a;
                cur += a;
            }
        }
        return res;
    }
};",1454817970
Tushar Gupta,tushargupta1999,861,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        vector<int> l(nums.size());
        for(auto a: queries) {
            ++l[a[0]];
            if(a[1] + 1 < nums.size())
                --l[a[1]+1];
        }
        for(int i=0; i<nums.size(); i++) {
            if(i) l[i] += l[i-1];
            if(nums[i] > l[i]) return false;
        }
        return true;
    }
};",1454829577
Tushar Gupta,tushargupta1999,861,3643,cpp,"class Solution {
    bool valid(vector<int>& nums, vector<vector<int>>& a, int k) {
        vector<int> l(nums.size());
        for(int i=0; i<k; i++) {
            l[a[i][0]] += a[i][2];
            if(a[i][1] + 1 < nums.size())
                l[a[i][1]+1] -= a[i][2];
        }
        for(int i=0; i<nums.size(); i++) {
            if(i) l[i] += l[i-1];
            if(nums[i] > l[i]) return false;
        }
        return true;
    }
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int start = 0, end = queries.size();
        while(start < end) {
            int mid = start + (end - start)/2;
            if(valid(nums, queries, mid)) {
                end = mid;
            } else {
                start = mid + 1;
            }
        }
        return valid(nums, queries, start)?start:-1;
    }
};",1454852035
Pedro Augusto,pedroaugustoaduarte,862,3616,java,"class Solution {
    public int countValidSelections(int[] nums) {
        
        int count = 0;
        
        for (int i = 0; i < nums.length; i++){
            int value = nums[i];
            if (value == 0){
                // right
                int newArr[] = new int[nums.length];
                for (int j = 0; j < nums.length; j++) {
                    newArr[j] = nums[j];
                }
                count += doMove(newArr,i+1,1);
                
                // left
                newArr = new int[nums.length];
                for (int j = 0; j < nums.length; j++){
                    newArr[j] = nums[j];
                }
                
                count += doMove(newArr,i-1,0);
            }
        }
        
        return count;
    }
    
    // direction 0 -> left
    // direction 1 -> right
    
    public int doMove(int[] arr, int i, int direction){
        
        if (i < 0 || i >= arr.length) {
            for (int j = 0; j < arr.length; j++){
                if (arr[j] != 0) return 0;
            }
            return 1;
        }
        
        
        if (arr[i] > 0){
            arr[i]--;
            if (direction == 1){
                direction = 0;
                if (doMove(arr,i-1,direction) == 1) return 1;
            } else {
                direction = 1;
                if (doMove(arr,i+1,direction) == 1) return 1;
            }
        } else {
            if (direction ==1) {
                if (doMove(arr,i+1,direction) == 1) return 1;
            } else {
                if (doMove(arr,i-1,direction) == 1) return 1;
            }
        }
        
        return 0;
    }
    

}",1454831946
Pedro Augusto,pedroaugustoaduarte,862,3639,java,"class Solution {
    public boolean isZeroArray(int[] nums, int[][] queries) {
        
        int[] diff = new int[nums.length];
        
        for (int i = 0; i < queries.length; i++){
            int start = queries[i][0];
            int end = queries[i][1];
            
            diff[start]++;
            if (end + 1 < nums.length){
                diff[end+1]--;
            }
            
        }
        
        int[] prefix = new int[nums.length];
        prefix[0] = diff[0];
        for (int i = 1; i < diff.length; i++){
            prefix[i] = prefix[i-1] + diff[i]; 
        }
        
        for (int i = 0; i < nums.length; i++){
            if (nums.length == 0) continue;
            if (prefix[i] >= nums[i]) continue;
            return false;
        }
        
        return true;
    }
}",1454844821
Pedro Augusto,pedroaugustoaduarte,862,3643,java,"class Solution {
    public int minZeroArray(int[] nums, int[][] queries) {
        int left = 0;
        int right = queries.length;
        
        int min = Integer.MAX_VALUE;
        
        while (left <= right){
            int mid = left + (right-left)/2;
            if (isValid(nums,queries,mid)){
                min = Math.min(min,mid);
                right = mid - 1;
            } else {
                left = mid + 1;
            }
        }
        
        return min == Integer.MAX_VALUE? -1:min;
    }
    
    
    public boolean isValid(int[] nums, int[][] queries, int k){
        int[] diff = new int[nums.length];
        
        for (int i = 0; i < k; i++){
            int start = queries[i][0];
            int end = queries[i][1];
            
            diff[start] += queries[i][2];
            if (end + 1 < nums.length){
                diff[end+1] -= queries[i][2];
            }
        }
        
        int[] prefix = new int[nums.length];
        prefix[0] = diff[0];
        for (int i = 1; i < diff.length; i++){
            prefix[i] = prefix[i-1] + diff[i]; 
        }
        
        for (int i = 0; i < nums.length; i++){
            if (nums.length == 0) continue;
            if (prefix[i] >= nums[i]) continue;
            return false;
        }
        
        return true;
    }
}",1454852086
vanshmotwani16_21,vanshmotwani16_21,864,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int sum=0;
        for(auto x:nums) sum+=x;
        int curr_sum=0;
        int ans=0;
        for(auto x:nums){
            curr_sum+=x;
            sum-=x;
            if(x==0){
                if(abs(curr_sum-sum)==1) ans+=1;
                else if(abs(curr_sum-sum)==0) ans+=2;
            }
        }
        return ans;
    }
};",1454834403
vanshmotwani16_21,vanshmotwani16_21,864,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n=nums.size();
        int diff[n+1];
        memset(diff,0,sizeof(diff));
        for(auto x:queries){
            int l=x[0],r=x[1]+1;
            diff[l]-=1;
            diff[r]+=1;
        }
        bool f=1;
        int sum=0;
        for(int i=0;i<n;i++){
            sum+=diff[i];
            //cout<<sum<<"" "";
            if(sum+nums[i]>0){
                f=0;break;
            }
        }
        return f;
    }
};",1454823522
vanshmotwani16_21,vanshmotwani16_21,864,3643,cpp,"class Solution {
public:
    bool pred(int mid,vector<vector<int>> &queries,vector<int> &nums,int n){
        int diff[n+1];
        memset(diff,0,sizeof(diff));
        for(int i=0;i<mid;i++){
            auto x=queries[i];
            diff[x[0]]-=x[2];
            diff[x[1]+1]+=x[2];
        }
        for(int i=1;i<=n;i++) diff[i]+=diff[i-1];
        for(int i=0;i<n;i++){
            if(nums[i]+diff[i]>0) return 0;
        }
        return 1;
    }
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n=nums.size();
        int r=queries.size(),l=0;
        while(l<r){
            int mid=(l+r)/2;
            if(pred(mid,queries,nums,n)) r=mid;
            else l=mid+1;
        }
        if(pred(l,queries,nums,n)) return l;
        return -1;
    }
};",1454852101
Burger Monstah,WRWRW,865,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        n = len(nums)
        total = sum(nums)
        curr = 0
        res = 0
        for i, val in enumerate(nums):
            curr += val
            if val != 0:
                continue
            if curr * 2 == total:
                res += 2
            elif curr * 2 + 1 == total or curr * 2 - 1 == total:
                res += 1
        return res
",1454809134
Burger Monstah,WRWRW,865,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        n = len(nums)
        diff = Counter()
        for a, b in queries:
            diff[a] -= 1
            diff[b + 1] += 1
        curr = 0
        for i in range(n):
            curr += diff[i]
            nums[i] += curr
        return all(val <= 0 for val in nums)",1454812570
Burger Monstah,WRWRW,865,3643,python3,"class SegmentTree:  # increase
    def __init__(self, n):
        self.n = n
        self.tree = [0] * n * 4
        self.lazy = [0] * n * 4
    
    def push_down_lazy_propagation(self, index):
        if self.lazy[index] != 0:
            left = index * 2
            right = index * 2 + 1
            self.lazy[left] += self.lazy[index]
            self.lazy[right] += self.lazy[index]
            self.tree[left] += self.lazy[index]
            self.tree[right] += self.lazy[index]
            self.lazy[index] = 0 

    def query(self, ql, qr):
        return self._query(ql, qr, l=0, r=self.n - 1, index=1)
        
    def _query(self, ql, qr, l, r, index=1):
        if ql <= l and r <= qr:
            return self.tree[index] 
        elif ql > r or qr < l:
            return -inf
        self.push_down_lazy_propagation(index)
        
        mid = (l + r) // 2
        left = index * 2 
        right = index * 2 + 1
        left_query = -inf
        right_query = -inf
        if ql <= mid:
            left_query = self._query(ql, qr, l, mid, left)
        if mid + 1 <= qr:
            right_query = self._query(ql, qr, mid + 1, r, right)
        return max(left_query, right_query)
    
    def update(self, ul, ur, val):
        return self._update(ul, ur, val, l=0, r=self.n - 1, index=1)
    
    def _update(self, ul, ur, val, l, r, index=1):
        if ul <= l and r <= ur:
            self.lazy[index] += val
            self.tree[index] += val
            return 
        elif ul > r or ur < l:
            return
        self.push_down_lazy_propagation(index)
        
        mid = (l + r) // 2
        left = index * 2 
        right = index * 2 + 1
        if ul <= mid:
            self._update(ul, ur, val, l, mid, left)
        if mid + 1 <= ur:
            self._update(ul, ur, val, mid + 1, r, right)
        self.tree[index] = max(self.tree[left], self.tree[right])
    
class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int: 
        n = len(nums) 
        if sum(nums) <= 0:
            return 0
        st = SegmentTree(n)
        for i, val in enumerate(nums):
            st.update(i, i, val)
        for i, (l, r, val) in enumerate(queries):
            st.update(l, r, -val)
            if st.query(0, n - 1) <= 0:
                return i + 1
        return -1",1454844844
Vipin Baswan,vipbaswan,866,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int n = nums.size();
        
        vector<int> p(n, 0), s(n, 0);
        
        p[0] = nums[0];
        for(int i=1; i<n; i++) {
            p[i] = p[i-1] + nums[i];
        }
        
        s[n-1] = nums[n-1];
        for(int i=n-2; i>=0; i--) {
            s[i] = s[i+1] + nums[i];
        }
        
        int ans = 0;
        
        for(int i=0; i<n; i++) {
            if(nums[i] > 0) {
                continue;
            }
            
            int x = p[i], y = s[i];
            if(abs(x-y) > 1) {
                continue;
            }
            
            if(x == y) {
                ans += 2;
            } else {
                ans++;
            }
        }
        
        return ans;
    }
};",1454812533
Vipin Baswan,vipbaswan,866,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        
        vector<int> p(n, 0);
        
        int q = queries.size();
        
        for(int i=0; i<q; i++) {
            int l = queries[i][0], r = queries[i][1];
            
            p[l]--;
            if(r+1 < n) {
                p[r+1]++;
            }
        }
        
        int sum = 0;
        for(int i=0; i<n; i++) {
            sum += p[i];
            nums[i] += sum;
            
            nums[i] = max(0, nums[i]);
            
            // cout<<sum<<endl;
        }
        
        for(int x : nums) {
            if(x != 0) {
                return false;
            }
        }
        return true;
    }
};",1454819685
Vipin Baswan,vipbaswan,866,3643,cpp,"class Solution {
public:
    
    bool check(vector<int>& nums, vector<vector<int>>& queries, vector<int>& p, int k) {
        int n = nums.size();
        
        fill(p.begin(), p.end(), 0);
        
        int q = queries.size();
        
        for(int i=0; i<=k; i++) {
            int l = queries[i][0], r = queries[i][1], val = queries[i][2];
            
            p[l] -= val;
            if(r+1 < n) {
                p[r+1] += val;
            }
        }
        
        int sum = 0, num;
        for(int i=0; i<n; i++) {
            sum += p[i];
            num = nums[i];
            num += sum;
            
            num = max(0, num);
            
            if(num != 0) {
                return false;
            }
        }
        return true;
    }
    
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size(), q = queries.size();
        
        bool allZeroes = true;
        for(int x : nums) {
            if(x > 0) {
                allZeroes = false;
                break;
            }
        }
        if(allZeroes) {
            return 0;
        }
        
        vector<int> p(n, 0);
        
        int lo = 0, hi = q-1, ans = INT_MAX;
        
        // cout<<check(nums, queries, p, 0)<<endl;
        
        while(lo <= hi) {
            int mid = lo + (hi - lo)/2;
            // cout<<lo<<"" ""<<hi<<"" ""<<mid<<endl;
            if(check(nums, queries, p, mid)) {
                ans = mid+1;
                hi = mid-1;
            } else {
                lo = mid+1;
            }
        }
        
        return (ans == INT_MAX ? -1 : ans);
    }
};",1454837558
Akshit Khare,Akshit25,867,3616,cpp,"class Solution {
    bool solve(vector<int> nums, int n, int i, bool left){
        while(i>=0 && i<n){
            if(nums[i]>0){
                nums[i]--;
                left = !left;
            }
            i = (left) ? i-1 : i+1;
        }

        for(int i=0;i<n;i++){
            if(nums[i]>0)
                    return false;
        }
        return true;
    }
public:
    int countValidSelections(vector<int>& nums) {
        int n=nums.size();
        int count=0;
        for(int i=0;i<n;i++){
            if(nums[i]!=0){
                continue;
            }
            if(solve(nums, n, i, false)){
                // cout<<i<< "" ""<<false;
                count++;
            }
            if(solve(nums, n, i, true)){
                // cout<<i<<"" ""<<true;
                count++;
            }
        }
        return count;
    }
};",1454815413
Akshit Khare,Akshit25,867,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n=nums.size();
        vector<int> f(n+1, 0);
        for(auto &q: queries){
            int i=q[0], j=q[1];
            f[i]++;
            f[j+1]--;
        }
        for(int i=1;i<n;i++){
            f[i]+=f[i-1];
        }

        for(int i=0;i<n;i++){
            if(nums[i]>f[i]){
                return false;
            }
        }
        return true;
        
    }
};",1454821799
Akshit Khare,Akshit25,867,3643,cpp,"class Solution {
    bool isPoss(vector<int>& nums, vector<vector<int>>& queries, int n, int k){
        vector<int> f(n+1, 0);
        for(auto &q: queries){
            if(k==0){
                break;
            }
            int i=q[0], j=q[1], val = q[2];
            f[i]+=val;
            f[j+1]-=val;
            k--;
        }
        for(int i=1;i<n;i++){
            f[i]+=f[i-1];
        }

        for(int i=0;i<n;i++){
            if(nums[i]>f[i]){
                return false;
            }
        }
        return true;
    }
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n=nums.size();
        int s=0, e=queries.size();

        int ans = 100005;
        while(s<=e){
            int m=s+(e-s)/2;
            if(isPoss(nums, queries, n, m)){
                ans=m;
                e=m-1;
            }
            else{
                s=m+1;
            }
        }

        return (ans==100005)?-1:ans;
    }
};",1454844911
Pravin!!! !,pravinkumar120102,868,3616,java,"class Solution {
    public int[][] getPrefSuff(int[] nums, int n) {
        int[][] prefSuff = new int[2][n];
        
        prefSuff[0][0] = nums[0];
        for(int i=1; i<n; i++) {
            prefSuff[0][i] = prefSuff[0][i-1] + nums[i];
        }
        
        prefSuff[1][n-1] = nums[n-1];
        for(int i=n-2; i>=0; i--) {
            prefSuff[1][i] = prefSuff[1][i+1] + nums[i];
        }
        
        return prefSuff;
    }
    
    public int countValidSelections(int[] nums) {
        int n = nums.length, good = 0;
        int[][] prefSuff = getPrefSuff(nums,n);
        
        for(int i=0; i<n; i++) {
            if(nums[i] == 0) {
                int diff = Math.abs(prefSuff[0][i] - prefSuff[1][i]);
                if(diff == 0) {
                    good += 2;
                } else if(diff == 1) {
                    good += 1;
                }
            }
        }
        return good;
    }
}",1454814904
Pravin!!! !,pravinkumar120102,868,3639,java,"class Solution {
    public boolean isZeroArray(int[] nums, int[][] queries) {
        int n = nums.length;
        int[] dp = new int[n+1];
        
        for(int[] query : queries) {
            dp[query[0]] += 1;
            dp[query[1]+1] -= 1;
        }
        
        int sum = 0;
        for(int i=0; i<n; i++) {
            sum += dp[i];
            nums[i] = Math.max(0, nums[i] - sum);
            if(nums[i] > 0) return false;
        }
        // System.out.println(Arrays.toString(nums));
        return true;
    }
}",1454821055
Pravin!!! !,pravinkumar120102,868,3643,java,"
class Solution {
    public boolean isPossible(int[] nums, int n, int k, int[][] queries) {
        int[] dp = new int[n+1];
        
        for(int i=0; i<=k; i++) {
            int[] query = queries[i];
            
            dp[query[0]] += query[2];
            dp[query[1]+1] -= query[2];
        }
        
        int sum = 0;
        for(int i=0; i<n; i++) {
            sum += dp[i];
            if(nums[i] - sum > 0) return false;
        }
        System.out.println(Arrays.toString(nums));
        return true;
    }
    public int minZeroArray(int[] nums, int[][] queries) {
        if(Arrays.stream(nums).sum() == 0) return 0;
        
        int low = 0, high = queries.length-1;
        int ans = -2, n = nums.length;
        
        
        while(low <= high) {
            int mid = low + (high - low)/2;
            if(isPossible(nums, n, mid, queries)) {
                high = mid -1;
                ans = mid;
            } else {
                low = mid+1;
            }
        }
        return ans+1;
    }
}",1454844937
Jum,JumHorn,869,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int res=0,prefix=0;
        int sum=accumulate(nums.begin(),nums.end(),0);
        for(auto n : nums)
        {
            if(n==0)
            {
                if(prefix==sum-prefix)
                    res+=2;
                else if(abs(sum-prefix-prefix)==1)
                    res+=1;
            }
            prefix+=n;
        }
        return res;
    }
};",1454826114
Jum,JumHorn,869,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int N=nums.size();
        vector<int> count(N+1);
        for(auto& q : queries)
        {
            ++count[q[0]];
            --count[q[1]+1];
        }
        for(int i=1;i<=N;++i)
            count[i]+=count[i-1];
        for(int i=0;i<N;++i)
        {
            if(count[i]<nums[i])
                return false;
        }
        return true;
    }
};",1454813539
Jum,JumHorn,869,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int N=queries.size(),lo=0,hi=N+1;
        while(lo<hi)
        {
            int mi=(hi-lo)/2+lo;
            if(!isZeroArray(nums,queries,mi))
                lo=mi+1;
            else
                hi=mi;
        }
        return lo>N?-1:lo;
    }
    
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries,int size) {
        int N=nums.size();
        vector<int> count(N+1);
        for(int i=0;i<size;++i)
        {
            auto& q=queries[i];
            count[q[0]]+=q[2];
            count[q[1]+1]-=q[2];
        }
        for(int i=1;i<=N;++i)
            count[i]+=count[i-1];
        for(int i=0;i<N;++i)
        {
            if(count[i]<nums[i])
                return false;
        }
        return true;
    }
};",1454837625
Saruav Suman,sks_saurav,870,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        ans = 0
        for i in range(0, len(nums)):
            if nums[i] != 0:
                continue
                
            left = 0
            right = 0
            idx = i-1
            
            while idx >= 0:
                left += nums[idx]
                idx -= 1
                
            idx = i+1
            while idx < len(nums):
                right += nums[idx]
                idx += 1
            diff = abs(left - right)
                
            if diff <= 2:
                ans += (2-diff)

        return ans",1454822670
Saruav Suman,sks_saurav,870,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        arr = [0 for _ in range(len(nums))]
        for l, r in queries:
            arr[l] -= 1
            if r+1 < len(arr):
                arr[r+1] += 1

        add = 0
        for i in range(len(nums)):
            add += arr[i]
            nums[i] += add

            if nums[i] > 0:
                return False
        
        return True",1454832684
Saruav Suman,sks_saurav,870,3643,python3,"class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        l = 0
        r = len(queries)
        ans = -1
        
        while l <= r:
            mid = (l+r)//2
            if self.isZeroArray(nums, queries, mid):
                ans = mid
                r = mid-1
            else:
                l = mid+1
                
        return ans

    def isZeroArray(self, nums: List[int], queries: List[List[int]], limit) -> bool:
        arr = [0 for _ in range(len(nums))]
        for i in range(limit):
            l, r, val = queries[i]
            arr[l] -= val 
            if r+1 < len(arr):
                arr[r+1] += val

        add = 0
        for i in range(len(nums)):
            add += arr[i]

            if nums[i] + add > 0:
                return False
        
        return True",1454845019
Ruiyi0118,Ruiyi0118,871,3616,java,"class Solution {
    public int countValidSelections(int[] nums) {
        int n = nums.length;
        int[] sum = new int[n + 1];
        for (int i = 1; i <= n; i++) {
            sum[i] = sum[i-1] + nums[i-1];
        }
        int ans = 0;
        for (int i = 1; i <= n; i++) {
            if (nums[i-1] == 0) {
                int left = sum[i] - sum[0];
                int right = sum[n] - sum[i];
                if (left + 1 == right) ans++;
                else if (right + 1 == left) ans++;
                else if (left == right) ans += 2;
            }
        }
        return ans;
    }
}",1454814292
Ruiyi0118,Ruiyi0118,871,3639,java,"class Solution {
    public boolean isZeroArray(int[] nums, int[][] queries) {
        int n = nums.length;
        int[] sum = new int[n+1];
        for (int[] que : queries) {
            sum[que[0]] += 1;
            sum[que[1] + 1] -= 1;
        }
        // System.out.println(sum[0]);
        for (int i = 1; i <= n; i++) {
            sum[i] = sum[i-1] + sum[i];
            // System.out.println(sum[i]);
        }
        for (int i = 0; i < n; i++) {
            if (nums[i] > sum[i]) return false;
        }
        return true;
    }
}",1454825607
Ruiyi0118,Ruiyi0118,871,3643,java,"class Solution {
    public int minZeroArray(int[] nums, int[][] queries) {
        int m = queries.length;
        if (!isToZero(nums, queries, m-1)) return -1;
        int n = nums.length;
        int l = -1, r = m - 1;
        while (l < r) {
            int mid = (l + r) >> 1;
            if (isToZero(nums, queries, mid)) r = mid;
            else l = mid + 1;
        }
        return l + 1;
    }

    private boolean isToZero(int[] nums, int[][] queries, int idx) {
        int n = nums.length;
        int[] sum = new int[n+1];
        for (int i = 0; i <= idx; i++) {
            int[] que = queries[i];
            sum[que[0]] += que[2];
            sum[que[1] + 1] -= que[2];
        }
        for (int i = 1; i <= n; i++) {
            sum[i] = sum[i-1] + sum[i];
        }
        for (int i = 0; i < n; i++) {
            if (nums[i] > sum[i]) return false;
        }
        return true;
    }
}",1454845093
ygu61913,ygu61913,872,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        
        n = len(nums)
        ans = 0
        for i in range(n):
            if nums[i] == 0:
                temp = nums.copy()
                d = 1
                cur = i
                while True:
                    if cur + d < 0 or cur + d > n - 1:
                        break
                    if temp[cur + d] == 0:
                        cur += d
                        continue
                    elif temp[cur + d] > 0:
                        temp[cur + d] -= 1
                        cur = cur + d
                        d *= -1
                if sum(temp) == 0:
                    ans += 1
                
                temp = nums.copy()
                d = -1
                cur = i
                while True:
                    if cur + d < 0 or cur + d > n - 1:
                        break
                    if temp[cur + d] == 0:
                        cur += d
                        continue
                    elif temp[cur + d] > 0:
                        temp[cur + d] -= 1
                        cur = cur + d
                        d *= -1
                if sum(temp) == 0:
                    ans += 1
        return ans
                
                
            
            
            
        """"""
            2 3 3 0 2 0 0
        """"""",1454821084
ygu61913,ygu61913,872,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        n = len(nums)
        
        hm = defaultdict(int)
        for q1, q2 in queries:
            hm[q1] += 1
            hm[q2 + 1] -= 1
        pre = 0
        hm1 = defaultdict(int)
        lst = sorted(hm.keys())
        for i in range(n):  
            if i in hm:
                pre += hm[i]
            hm1[i] = pre
            if hm1[i] < nums[i]:
                return False
        
        return True
        
        """"""
            3 1 0 0
        
        """"""",1454831563
ygu61913,ygu61913,872,3643,python3,"class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        n = len(nums)
        m = len(queries)
        if sum(nums) == 0:
            return 0
        
        def check(mid):
            hm = defaultdict(int)
            for i in range(mid + 1):
                q1 = queries[i][0]
                q2 = queries[i][1]
                mx = queries[i][2]
                hm[q1] += mx
                hm[q2 + 1] -= mx
            pre = 0
            hm1 = defaultdict(int)
            lst = sorted(hm.keys())
            for i in range(n):  
                if i in hm:
                    pre += hm[i]
                hm1[i] = pre
                if hm1[i] < nums[i]:
                    return False
            return True

        l = 0
        r = m - 1
        ans = -1
        while (l <= r):
            mid = (l + r) // 2
            if check(mid):
                ans = mid
                r = mid - 1
            else:
                l = mid + 1
        
        return -1 if ans == -1 else ans + 1
        
        
       ",1454845152
Ramchandra Yadav,rcy5932,875,3616,java,"class Solution {
    public int countValidSelections(int[] nums) {

        int count = 0;
        for(int i = 0; i < nums.length; i++) {
            if(nums[i] == 0) {
                count += fun(nums, i);
            }
        }

        return count;
        
    }

    int fun(int nums[], int i) {
        int l = 0;
        int r = 0;
        for(int idx = 0; idx < i; idx++) {
            l += nums[idx];
        }

         for(int idx = i; idx < nums.length; idx++) {
            r += nums[idx];
        }
        if( Math.abs(l - r) == 0 ) {
            return 2;
        }

         if( Math.abs(l - r) == 1 ) {
            return 1;
        }
        return 0;
        
    }
}

// 2 0 1",1454822319
Ramchandra Yadav,rcy5932,875,3639,java,"class Solution {
    public boolean isZeroArray(int[] nums, int[][] queries) {

        int n = nums.length;
        int prefix[] = new int[n + 1];

        for(int q[] : queries) {
            prefix[q[0]]++;
            prefix[q[1]+ 1]--;
        }
        for(int i = 1; i <= n; i++) {
            prefix[i] += prefix[i-1];
            if(prefix[i-1] < nums[i-1]) {
                return false;
            }
        }

        return true;
        
        
    }
}",1454828280
Ramchandra Yadav,rcy5932,875,3643,java,"class Solution {
    public int minZeroArray(int[] nums, int[][] queries) {

        int l = 0, r = queries.length;
        int ans = -1;

        while(l <= r) {
            int mid = (l + r) >> 1;
            boolean possible = fun(nums, queries, mid);
            if(possible) {
                ans = mid;
                r = mid - 1;
            } else {
                l = mid + 1;
            }
        }

        return ans;
        
    }


    boolean fun(int nums[], int[][] queries, int k) {
        int n = nums.length;
        int prefix[] = new int[n + 1];

        for(int idx = 0; idx < k; idx++) {
            int[] q = queries[idx];
            prefix[q[0]] += q[2];
            prefix[q[1]+ 1] -= q[2];
        }
        for(int i = 1; i <= n; i++) {
            prefix[i] += prefix[i-1];
            if(prefix[i-1] < nums[i-1]) {
                return false;
            }
        }

        return true;
    }
}",1454845230
Yash Singh,bytecode_1234,877,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) 
    {
        int ans=0;
        for(int i=0;i<nums.size();i++)
            {
                if(nums[i]==0)
                {
                    int tot1=0;
                    for(int j=0;j<i;j++)
                        {
                            tot1+=nums[j];
                        }
                    int tot2=0;
                    for(int j=i+1;j<nums.size();j++)
                        {
                            tot2+=nums[j];
                        }
                    if(tot1==tot2)
                    {
                        ans+=2;
                    }
                    else if(tot1==(tot2+1) || tot2==(tot1+1))
                    {
                        ans+=1;
                    }
                }
            }

        return ans;
    }
};",1454822760
Yash Singh,bytecode_1234,877,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) 
    {
        unordered_map<int,int> mpp;
        unordered_map<int,int> mpp2;
        for(int i=0;i<queries.size();i++)
        {
            int x=queries[i][0];
            int y=queries[i][1];
            mpp[x]++;
            mpp2[y]++;
            
            
        }
        int c=0;
        int f=0;
        for(int i=0;i<nums.size();i++)
            {
              c+=mpp[i];
              if(c>=nums[i])
              {
                  
              }
              else
              {
                f=1;
                break;
              }
              c-=mpp2[i];
            }

        if(f)
        {
            return 0;
        }
        return 1;
    }

};",1454817558
Yash Singh,bytecode_1234,877,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) 
    {

        
        int low=0;
        int high=queries.size();
        int ans=-1;
        while(low<=high)
        {
             int mid=low+(high-low)/2;
             int val=0;
             vector<vector<int>> v(nums.size());
            vector<vector<int>> v1(nums.size());
             for(int i=0;i<mid;i++)
             {
                int x=queries[i][0];
                 int y=queries[i][1];
                 int z=queries[i][2];
                 v[x].push_back(z);
                 v1[y].push_back(z);
             }
            int f=0;
            for(int i=0;i<nums.size();i++)
                {
                    for(auto it:v[i])
                        {
                            val+=it;
                        }

                    if(val>=nums[i])
                    {
                        
                    }
                    else
                    {
                        f=1;
                        break;
                    }
                    for(auto it:v1[i])
                        {
                            val-=it;
                        }
                }

             if(f==1)
             {
                 low=mid+1;
             }
            else
             {
                 ans=mid;
                 high=mid-1;
             }
        }

        return ans;

        
    }
};",1454845246
Manasvi Gaur,ManasviGaur,878,3616,cpp,"#include <vector>
using namespace std;

class Solution {
public:
    int countValidSelections(vector<int>& array) {
        int size = array.size();
        int validCount = 0;

        // Helper function to simulate the process
        auto isValidSelection = [&](int startIndex, int direction) {
            vector<int> tempArray = array; // Create a copy of the array
            int currentIndex = startIndex;

            while (currentIndex >= 0 && currentIndex < size) {
                if (tempArray[currentIndex] == 0) {
                    // Move in the current direction
                    currentIndex += direction;
                } else {
                    // Decrease the value and reverse direction
                    tempArray[currentIndex]--;
                    direction *= -1;
                    currentIndex += direction;
                }
            }

            // Check if all elements become 0
            for (int value : tempArray) {
                if (value != 0) return false;
            }
            return true;
        };

        // Iterate over positions with array[startIndex] == 0
        for (int startIndex = 0; startIndex < size; startIndex++) {
            if (array[startIndex] == 0) {
                // Check both directions
                if (isValidSelection(startIndex, -1)) validCount++;
                if (isValidSelection(startIndex, 1)) validCount++;
            }
        }

        return validCount;
    }
};
",1454818553
Manasvi Gaur,ManasviGaur,878,3639,java,"class Solution {
    public boolean isZeroArray(int[] nums, int[][] queries) {
        int n = nums.length;
        int[] remaining = nums.clone(); 
        int[] diff = new int[n + 1];     
        for (int[] query : queries) {
            int left = query[0], right = query[1];
            diff[left] += 1;            
            if (right + 1 < n) {
                diff[right + 1] -= 1;  
            }
        }
        int activeDecrements = 0;  
        for (int i = 0; i < n; i++) {
            activeDecrements += diff[i];  
            remaining[i] -= activeDecrements; 
            if (remaining[i] > 0) {  
                return false;
            }
        }

        return true;  
    }
}",1454845595
Manasvi Gaur,ManasviGaur,878,3643,java,"class Solution {
    public int minZeroArray(int[] nums, int[][] queries) {
        int n = nums.length;  // Length of the array
        int m = queries.length;  // Number of queries

        // Binary search to find the smallest k that can turn nums into a zero array
        int left = 0, right = m, result = -1;
        while (left <= right) {
            int mid = left + (right - left) / 2;
            if (canBecomeZero(mid, nums, queries, n)) {
                result = mid;         // Valid k found, attempt to find a smaller k
                right = mid - 1;      // Narrow the search range
            } else {
                left = mid + 1;       // Increase k to try more queries
            }
        }

        return result;  // Return the smallest valid k, or -1 if no valid k exists
    }

    // Helper method to check if we can turn nums into a zero array using the first k queries
    private boolean canBecomeZero(int k, int[] nums, int[][] queries, int n) {
        int[] diff = new int[n + 1];  // Difference array to efficiently apply range updates
        int[] temp = nums.clone();     // Copy of the nums array to simulate the process

        // Process the first k queries
        for (int i = 0; i < k; i++) {
            int left = queries[i][0], right = queries[i][1], value = queries[i][2];
            diff[left] += value;           // Apply the increment at the start of the range
            if (right + 1 < n) {
                diff[right + 1] -= value;  // Undo the increment past the end of the range
            }
        }

        // Apply the difference array to the temp array
        int currentEffect = 0;  // Tracks the cumulative decrement effect
        for (int i = 0; i < n; i++) {
            currentEffect += diff[i];  // Update the cumulative effect
            temp[i] = Math.max(0, temp[i] - currentEffect); // Apply the decrements, ensuring no negative values
            if (temp[i] > 0) {
                return false;  // If any element is still positive, it's not possible to make all zeros
            }
        }

        return true;  // All elements became zero
    }
}
",1454852636
SIDDHARTH,lakh,880,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int n=nums.size();
        int ans=0;
        for(int i=0;i<n;i++) {
            if(nums[i]) continue;
            for(int j=0;j<2;j++) {
                int st=i, cd=j;
                vector<int>tmp;
                for(int p: nums) tmp.push_back(p);
                while(1) {
                    if((st<0) || (st>=n)) break;
                    if(!tmp[st]) {
                        if(cd) st+=1;
                        else st-=1;
                    } else {
                        tmp[st]-=1;
                        cd=1-cd;
                        if(cd) st+=1;
                        else st-=1;
                    }
                }
                int f=1;
                for(int k: tmp) {
                    if(k) {
                        f=0;
                        break;
                    }
                }
                //if(f) cout<<i<<"" ""<<j<<""\n"";
                ans+=f;
            }
        }
        //cout<<""\n"";
        return ans;
    }
};",1454845317
SIDDHARTH,lakh,880,3639,cpp,"int dp[100001];
class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n=nums.size();
        memset(dp,0,sizeof(dp));
        for(vector<int>p: queries) {
            dp[p[0]]+=1;
            dp[p[1]+1]-=1;
        }
        if(dp[0]<nums[0]) return 0;
        for(int i=1;i<n;i++) {
            dp[i]+=dp[i-1];
            if(dp[i]<nums[i]) return 0;
        }
        return 1;
        
    }
};",1454825499
SIDDHARTH,lakh,880,3643,cpp,"int dp[100001];
class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& q) {
        int ans=0;
        int n=nums.size();
        int m=q.size();
        int lo=0, hi=m-1, ix=-1;
        int c0=0;
        for(int i: nums) {
            c0+=(i==0);
        }
        if(c0==n) return 0;
        while(lo<=hi) {
            int mi=(lo+hi)/2;
            memset(dp,0,sizeof(dp));
            for(int i=0;i<=mi;i++) {
                vector<int>c=q[i];
                dp[c[0]]+=c[2];
                dp[c[1]+1]-=c[2];
            }
            int f=1;
            for(int i=0;i<n;i++){
                if(i) dp[i]+=dp[i-1];
                if(dp[i]<nums[i]){
                    f=0;
                    break;
                }
            }
            if(f) ix=mi+1, hi=mi-1;
            else lo=mi+1;
        }
        return ix;
    }
};",1454838636
SAY__MY__NAME,SAY__MY__NAME,881,3616,java,"class Solution {
    public int countValidSelections(int[] nums) {
        int res = 0;
        int n = nums.length;
        int sum = 0;
        for (int i = 0; i < n ;i++) sum += nums[i];
        int left = 0;
        for (int i = 0; i < n; i++) {
            left += nums[i];
            if (nums[i] == 0) {
                if (left  == sum - left) res += 2;
                else if (Math.abs(sum - left - left) == 1) res += 1;
            }
        }

        return res;
    }
}",1454814950
SAY__MY__NAME,SAY__MY__NAME,881,3639,java,"class Solution {
    public boolean isZeroArray(int[] nums, int[][] queries) {
        int n = nums.length;
        int[] diff = new int[n];
        diff[0] = nums[0];
        for (int i = 1; i < n; i++) diff[i]= nums[i] - nums[i-1];

        for (int[] q : queries) {
            int l = q[0], r = q[1];
            diff[l]--;
            if (r + 1 < n) diff[r+1]++;
        }

        int presum = 0;
        for (int i = 0; i < n; i++) {
            presum += diff[i];
            if (presum > 0) return false;
        }
        return true;
    }
}",1454824411
SAY__MY__NAME,SAY__MY__NAME,881,3643,java,"class Solution {
    public int minZeroArray(int[] nums, int[][] queries) {
        int l = 0, r = queries.length + 1;
        int mid = l + (r - l) / 2;
        while (l < r) {
            if (isPossible(nums, queries, mid)) r = mid;
            else l = mid + 1;
            mid = l + (r - l) / 2;
        }
        return l == queries.length + 1 ? -1 : l;
    }

    private boolean isPossible(int[] nums, int[][] qs, int k) {
        // System.out.println(k);
        int n = nums.length;
        int[] diff = new int[n];
        diff[0] = nums[0];
        for (int i = 1; i < n; i++) diff[i]= nums[i] - nums[i-1];

        for (int i = 0; i < k; i++) {
            int[] q = qs[i];
            int l = q[0], r = q[1], v = q[2];
            diff[l] -= v;
            if (r + 1 < n) diff[r+1] += v;
        }

        int presum = 0;
        for (int i = 0; i < n; i++) {
            presum += diff[i];
            if (presum > 0) return false;
        }
        return true;
    }
}",1454837943
Vaibhav Singh,vaibhav2740,883,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& v) {
        int sum = accumulate(v.begin(),v.end(),0);
        int ct = 0, curr = 0;
        int n = v.size();
        for(int i=0;i<n;i++){
            curr+=v[i];
            if(v[i]==0){
                int ex = sum-curr;
                if(curr==ex) ct+=2;
                else if(abs(curr-ex)<=1) ct++;
            }
        }
        return ct;
    }
};",1454809151
Vaibhav Singh,vaibhav2740,883,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& v, vector<vector<int>>& qq) {
        ios::sync_with_stdio(0); cin.tie(0);
        int n = v.size();
        vector<int>ct(n);
        for(auto q:qq){
            int l=q[0],r=q[1];
            ct[l]++;
            if(r+1<n) ct[r+1]--;
        }
        for(int i=1;i<n;i++) ct[i]+=ct[i-1];
        for(int i=0;i<n;i++){
            if(ct[i]<v[i]) return 0;
        }
        return 1;
    }
};",1454811809
Vaibhav Singh,vaibhav2740,883,3643,cpp,"class Solution {
public:
    // vector<long>sgt;
    // void build(int l, int r, vector<int>&v,int node){
    //     if(l==r){
    //         sgt[node] = v[l]; return;
    //     }
    //     int m = l + (r-l)/2;
    //     build(l,m,v,2*node); build(m+1,r,v,2*node+1);
    //     sgt[node] = sgt[2*node] + sgt[2*node+1];
    // }
    // void sum(int l, int r, int i, int j, int node){}
    class LazySegmentTree {
public:
    vector<long long> tree, lazy;
    int n;

    void build(vector<int>& arr, int node, int start, int end) {
        if (start == end) {
            tree[node] = arr[start];
        } else {
            int mid = (start + end) / 2;
            build(arr, 2 * node, start, mid);
            build(arr, 2 * node + 1, mid + 1, end);
            tree[node] = max(tree[2 * node] , tree[2 * node + 1]);
        }
    }

    void propagate(int node, int start, int end) {
        if (lazy[node] != 0) {
            int k = lazy[node];
            if (start == end) {
                tree[node] = max(tree[node] - k, 0LL);  // Leaf node
            } else {
                tree[node] = max(tree[node] - k, 0LL);
                lazy[2 * node] += k;
                lazy[2 * node + 1] += k;
            }
            lazy[node] = 0;
        }
    }

    void updateRange(int node, int start, int end, int l, int r, int k) {
        propagate(node, start, end);
        if (start > r || end < l) return;  // Out of range
        if (start >= l && end <= r) {
            lazy[node] += k;
            propagate(node, start, end);
            return;
        }
        int mid = (start + end) / 2;
        updateRange(2 * node, start, mid, l, r, k);
        updateRange(2 * node + 1, mid + 1, end, l, r, k);
        tree[node] = max(tree[2 * node] , tree[2 * node + 1]);
    }

    // int query(int node, int start, int end, int l, int r) {
    //     propagate(node, start, end);
    //     if (start > r || end < l) return 0;  // Out of range
    //     if (start >= l && end <= r) return tree[node];  // Completely in range
    //     int mid = (start + end) / 2;
    //     int leftSum = query(2 * node, start, mid, l, r);
    //     int rightSum = query(2 * node + 1, mid + 1, end, l, r);
    //     return leftSum + rightSum;
    // }

public:
    LazySegmentTree(vector<int>& arr) {
        n = arr.size();
        tree.resize(4 * n, 0);
        lazy.resize(4 * n, 0);
        build(arr, 1, 0, n - 1);
    }

    void update(int l, int r, int k) {
        updateRange(1, 0, n - 1, l, r, k);
    }

    // int getSum(int l, int r) {
    //     return query(1, 0, n - 1, l, r);
    // }
};

    int minZeroArray(vector<int>& v, vector<vector<int>>& qq) {
        ios::sync_with_stdio(0); cin.tie(0);
        int n = v.size();
        // sgt.resize(4*n); lazy.resize(4*n);
        // sgt.build(0,0,n-1,v);
        LazySegmentTree sgt(v);
        if(sgt.tree[1]==0) return 0;
        for(int i=0;i<qq.size();i++){
            int l = qq[i][0], r = qq[i][1], val = qq[i][2];
            sgt.update(l,r,val);
            if(sgt.tree[1]==0) return i+1;
        }
        return -1;
    }
};",1454845415
rohit_verma32,rohit_verma32,884,3616,cpp,"class Solution {
public:
bool simulate(vector<int> nums, int curr, int direction) {
    int n = nums.size();
    
    // Start the process
    while (curr >= 0 && curr < n) {
        if (nums[curr] == 0) {
            // Move in the current direction if current element is zero
            curr += direction;
        } else {
            // Decrement the value at current position
            nums[curr]--;
            
            // Reverse the direction
            direction = -direction;
            
            // Move one step in the new direction
            curr += direction;
        }
    }
    
    // Check if all elements are zero
    for (int num : nums) {
        if (num != 0) return false;
    }
    return true;
}
        int countValidSelections(vector<int>& nums) {
    int count = 0;
    int n = nums.size();
    
    // Try starting from each position where nums[i] == 0
    for (int i = 0; i < n; i++) {
        if (nums[i] == 0) {
            // Try both directions (left: -1, right: +1)
            if (simulate(nums, i, -1)) count++;
            if (simulate(nums, i, 1)) count++;
        }
    }
    
    return count;
}
    
};",1454812580
rohit_verma32,rohit_verma32,884,3639,cpp,"class Solution {
public:
   bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
    int n = nums.size();
    vector<int> diff(n + 1, 0);

    // Process the queries to mark the ranges in the difference array
    for (const auto& query : queries) {
        int li = query[0];
        int ri = query[1];
        diff[li]++;
        if (ri + 1 < n) {
            diff[ri + 1]--;
        }
    }

    // Calculate the prefix sum to get the actual decrement effect on each element
    int decrement_count = 0;
    for (int i = 0; i < n; ++i) {
        decrement_count += diff[i];
        nums[i] -= decrement_count; // Apply the total decrements to nums[i]

        // If any element is still greater than 0, we cannot make it zero
        if (nums[i] > 0) {
            return false;
        }
    }

    return true;
}
};",1454825661
rohit_verma32,rohit_verma32,884,3643,cpp,"class Solution {
public:
    bool canMakeZeroArray(vector<int> nums, const vector<vector<int>>& queries, int k) {
    int n = nums.size();
    vector<int> diff(n + 1, 0);

    // Apply the first k queries using a difference array
    for (int i = 0; i < k; ++i) {
        int li = queries[i][0];
        int ri = queries[i][1];
        int vali = queries[i][2];
        diff[li] += vali;
        if (ri + 1 < n) {
            diff[ri + 1] -= vali;
        }
    }

    // Apply the difference array to the original nums
    int decrement = 0;
    for (int i = 0; i < n; ++i) {
        decrement += diff[i];
        nums[i] -= decrement;
        // If any element is still greater than zero, we can't make it zero
        if (nums[i] > 0) {
            return false;
        }
    }
    return true;
}

int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
    int left = 0, right = queries.size();
    int answer = -1;

    // Binary search to find the minimum k
    while (left <= right) {
        int mid = left + (right - left) / 2;
        if (canMakeZeroArray(nums, queries, mid)) {
            answer = mid;
            right = mid - 1;
        } else {
            left = mid + 1;
        }
    }

    return answer;
}
};",1454830624
eps2002,eps2002,885,3616,java,"class Solution {
    public int countValidSelections(int[] nums) {
        int ans = 0;
        int[] pref = new int[nums.length + 1];
        for(int i = 0;i < nums.length;i++){
            pref[i + 1] = pref[i] + nums[i];
        }
        int[] suff = new int[nums.length + 1];
        for(int i = nums.length - 1;i >= 0;i--){
            suff[i] = suff[i + 1] + nums[i];
        }
        for(int i = 0;i < nums.length;i++){
            if(nums[i] == 0 && pref[i + 1] == suff[i]){
                ans+=2;
            }else if(nums[i] == 0 && Math.abs(pref[i + 1] - suff[i]) == 1){
                ans++;
            }
        }
        return ans;
    }
}",1454812135
eps2002,eps2002,885,3639,java,"class Solution {
    public boolean isZeroArray(int[] nums, int[][] queries) {
        int[] pref = new int[nums.length + 1];
        for(int[] t : queries){
            pref[t[0]]--;
            pref[t[1] + 1]++;
        }
        for(int i = 1;i < pref.length;i++){
            pref[i] += pref[i - 1];
        }
        for(int i = 0;i < nums.length;i++){
            if(nums[i] + pref[i] > 0) return false;
        }
        return true;
    }
}",1454817730
eps2002,eps2002,885,3643,java,"class Solution {
    public void build(int[] seg, int[] nums, int l, int r, int id){
        if(l == r){
            seg[id] = nums[l];
            return;
        }
        int mid = l + (r - l) / 2;
        build(seg, nums, l, mid, (2 * id) + 1);
        build(seg, nums, mid + 1, r, (2 * id) + 2);
        seg[id] = Math.max(seg[(2 * id) + 1], seg[(2 * id) + 2]);
    }

    public void update(int[] seg, int[] lazy, int x, int y, int val, int l, int r, int id){
        pushDown(seg, lazy, l, r, id);

        if(r < x || l > y){
            return;
        }
        if(l >= x && r <= y){
            lazy[id] = val;
            pushDown(seg, lazy, l, r, id);
            return;
        }
        int mid = l + (r - l) / 2;
        update(seg, lazy, x, y, val, l, mid, (2 * id) + 1);
        update(seg, lazy, x, y, val, mid + 1, r, (2 * id) + 2);
        seg[id] = Math.max(seg[(2 * id) + 1], seg[(2 * id) + 2]);
    }

    public void pushDown(int[] seg, int[] lazy, int l, int r, int id){
        if(l != r){
            lazy[(2 * id) + 1] += lazy[id];
            lazy[(2 * id) + 2] += lazy[id];
        }
        seg[id] -= lazy[id];
        lazy[id] = 0;
    }
    
    public int minZeroArray(int[] nums, int[][] queries) {
        int[] seg = new int[4 * nums.length];
        int[] lazy = new int[4 * nums.length];
        build(seg, nums, 0, nums.length - 1, 0);
        if(seg[0] <= 0){
            return 0;
        }
        for(int i = 0;i < queries.length;i++){
            update(seg, lazy, queries[i][0], queries[i][1], queries[i][2], 0, nums.length - 1, 0);
            // System.out.println(i + "" "" + seg[0]);
            if(seg[0] <= 0){
                return i + 1;
            }
        }
        return -1;
    }
}",1454845453
viltumite,viltumite,888,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int n = nums.size(), ans = 0;
        for(int i = 0 ; i < n ; i++) {
            if(nums[i] == 0 && solve(nums, i, -1))            ans++;
            if(nums[i] == 0 && solve(nums, i, 1))            ans++;
        }
        return ans;
    }
    bool solve(vector<int> nums, int curr, int dir) {
        int x = curr, y = dir;
        while(curr >= 0  && curr < nums.size()) {
            if(nums[curr] == 0) {
                curr += dir;
            }
            else {
                nums[curr]--;
                dir *= -1;
                curr += dir;
            }
        }
        for(auto &x: nums) {
            if(x != 0)         return false;
        }
        // cout << x << "" "" << dir << endl;
        return true;
    }
};",1454813899
viltumite,viltumite,888,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& a, vector<vector<int>>& q) {
        int n = a.size();
        vector<int> pre(n + 1, 0);
        for(auto &x: q) {
            pre[x[0]]++;
            pre[x[1] + 1]--;
        }
        for(int i = 1 ; i < n ; i++) {
            pre[i] += pre[i - 1];
        }
        for(int i = 0 ; i < n ; i++) {
            // a[i] -= pre[i];
            // cout << a[i] << "" "";
            if(a[i] - pre[i] > 0)          return false;
        }
        return true;
    } 
};",1454822683
viltumite,viltumite,888,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& a, vector<vector<int>>& q) {
        int n = q.size();
        int i = 0, j = n, ans = -1;
        while(i <= j) {
            long long mid = (i + j) / 2;
            if(solve(a, q, mid)) {
                ans = mid;
                j = mid - 1;
            }
            else {
                i = mid + 1;
            }
        }
        return ans;
    } 
    bool solve(vector<int> a, vector<vector<int>>& q, long long k) {
        int n = a.size();
        vector<int> pre(n + 1, 0);
        for(int i = 0 ; i < k ; i++) {
            vector<int> x = q[i];
            pre[x[0]] += x[2];
            pre[x[1] + 1] -= x[2];
        }
        for(int i = 1 ; i < n ; i++) {
            pre[i] += pre[i - 1];
        }
        // cout << k << endl;
        for(int i = 0 ; i < n ; i++) {
            // a[i] -= pre[i];
            // cout << a[i] << "" "";
            if(a[i] - pre[i] > 0)          return false;
        }
        // cout << endl;
        return true;
    }
};",1454852871
dingmingcheng1,dingmingcheng1,890,3616,java,"class Solution {
    public int countValidSelections(int[] nums) {
        int l = nums.length;
        int ans = 0;
        for (int i = 0; i < l; i++) {
            int[] tmp = new int[l];
            if (nums[i] != 0) continue;
            for (int j = 0; j < l; j++) {
                tmp[j] = nums[j];
            }
            if (check(tmp, i, true)) ans ++;
            for (int j = 0; j < l; j++) {
                tmp[j] = nums[j];
            }
            if (check(tmp, i, false)) ans ++;
        }
        return ans;
    }

    public boolean check(int[] nums, int x, boolean l) {
        int idx = x;
        while (true) {
            if (x < 0 || x >= nums.length) {
                break;
            }
            if (nums[x] == 0) {
                if (l) {
                    x--;
                } else {
                    x++;
                }
            } else if (nums[x] > 0) {
                nums[x] --;
                if (l) l = false;
                else l = true;
                if (l) x --;
                else x ++;
            }
        }

        boolean c = true;
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] != 0) {
                c = false;
                break;
            }
        }
        return c;
    }
}",1454827607
dingmingcheng1,dingmingcheng1,890,3639,java,"class Solution {
    public boolean isZeroArray(int[] nums, int[][] queries) {
        int n = nums.length;
        int[] cnt = new int[n+1];
        for (int i = 0; i < queries.length; i++) {
            cnt[queries[i][0]] ++;
            cnt[queries[i][1]+1] --;
        }
        int x = 0;
        int[] res = new int[n];
        for (int i = 0; i < n; i++) {
            x += cnt[i];
            res[i] = x;
        }
        boolean res1 = true;
        for (int i = 0; i < n; i++) {
            if (res[i] >= nums[i]) {
                
            } else {
                res1 = false;
                break;
            }
        }
        return res1;
    }

}",1454835336
dingmingcheng1,dingmingcheng1,890,3643,java,"class Solution {
public boolean isZeroArray(int[] nums, int[][] queries, int ml) {
        int n = nums.length;
        int[] cnt = new int[n+1];
        for (int i = 0; i < ml; i++) {
            cnt[queries[i][0]] += queries[i][2];
            cnt[queries[i][1]+1] -= queries[i][2];
        }
        int x = 0;
        int[] res = new int[n];
        for (int i = 0; i < n; i++) {
            x += cnt[i];
            res[i] = x;
        }
        boolean res1 = true;
        for (int i = 0; i < n; i++) {
            if (res[i] >= nums[i]) {

            } else {
                res1 = false;
                break;
            }
        }
        return res1;
    }
    public int minZeroArray(int[] nums, int[][] queries) {
        int l = 0;
        int r = queries.length;
        int ans = -1;
        while (l <= r) {
            int mid = (l + r) >> 1;
            int[] x1 = Arrays.copyOf(nums, nums.length);
            boolean check = isZeroArray(x1, queries, mid);
            if (check) {
                ans = mid;
                r = mid - 1;
            } else {
                l = mid + 1;
            }
        }
        return ans;
    }
}",1454845626
Neeraj,neerajghodla,891,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        N = len(nums)
        def go(pos, dir, nums):
            if pos < 0 or pos >= N:
                return
            
            if nums[pos] == 0:
                return go(pos + dir, dir, nums)
            else:
                nums[pos] -= 1
                dir *= -1
                return go(pos + dir, dir, nums)
        
        ans = 0
        for idx, num in enumerate(nums):
            if num == 0:
                temp = nums.copy()
                go(idx, +1, temp)
                if temp.count(0) == N: ans += 1
                
                temp = nums.copy()
                go(idx, -1, temp)
                if temp.count(0) == N: ans += 1
        
        return ans
        ",1454818333
Neeraj,neerajghodla,891,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        N = len(nums)
        sweep = [0] * (N + 1)
        
        for l, r in queries:
            sweep[l] += 1
            sweep[r + 1] -= 1
        
        count = 0
        for i in range(N):
            count += sweep[i]
            if count < nums[i]: return False
        
        return True
        ",1454825011
Neeraj,neerajghodla,891,3643,python3,"class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        N = len(nums)
        def check(k):
            sweep = [0] * (N + 1)

            for i in range(k):
                sweep[queries[i][0]] += queries[i][2]
                sweep[queries[i][1] + 1] -= queries[i][2]

            count = 0
            for i in range(N):
                count += sweep[i]
                if count < nums[i]: return False

            return True
        
        left = 0
        right = len(queries)
        while left < right:
            mid = left + (right - left) // 2
            if check(mid): right = mid
            else: left = mid + 1
        
        return left if check(left) else -1",1454845643
prasun goyal,user2043T,892,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int sum = 0;
        for (int i = 0; i < nums.size(); i++) {
            sum += nums[i];
        }
        int csum = 0, ans = 0;
        for (int i = 0; i < nums.size(); i++) {
            if (nums[i] == 0) {
                if (abs(2 * csum - sum) == 1) {
                    ans += 1;
                } else if (2 * csum == sum) {
                    ans += 2;
                }
            }
            csum += nums[i];
        }
        return ans;
    }
};",1454814150
prasun goyal,user2043T,892,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int fre[nums.size() + 1];
        for (int i = 0; i <= nums.size(); i++) {
            fre[i] = 0;
        }
        for (int i = 0; i < queries.size(); i++) {
            fre[queries[i][0]]++;
            fre[queries[i][1] + 1]--;
        }
        int sum = 0;
        for (int i = 0; i < nums.size(); i++) {
            sum += fre[i];
            if (sum < nums[i]) {
                return false;
            }
        }
        return true;
    }
};",1454821355
prasun goyal,user2043T,892,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int lo = 0, hi = queries.size(), ans = -1;
        while (lo <= hi) {
            int mid = (lo + hi) / 2;
            if (isZeroArray(nums, queries, mid)) {
                ans = mid;
                hi = mid - 1;
            } else {
                lo = mid + 1;
            }
        }
        return ans;
    }

    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries, int k) {
        int fre[nums.size() + 1];
        for (int i = 0; i <= nums.size(); i++) {
            fre[i] = 0;
        }
        for (int i = 0; i < k; i++) {
            fre[queries[i][0]] += queries[i][2];
            fre[queries[i][1] + 1] -= queries[i][2];
        }
        int sum = 0;
        for (int i = 0; i < nums.size(); i++) {
            sum += fre[i];
            if (sum < nums[i]) {
                return false;
            }
        }
        return true;
    }
};",1454830836
Ayanerru,Ayanerru,895,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        S = sum(nums)
        n = len(nums)
        if S == 0:
            return n * 2
        ans = 0
        # print(S, n)
        if S % 2 == 0:
            cur = 0
            for val in nums:
                cur += val
                if val == 0 and cur * 2 == S:
                    ans += 2
        else:
            cur = 0
            for val in nums:
                cur += val
                if val == 0 and (cur == S // 2 or cur == (1 + S // 2)):
                    ans += 1
                # print(cur)
        return ans",1454815436
Ayanerru,Ayanerru,895,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        n = len(nums)
        ch = [0] * (n+1)
        for l, r in queries:
            ch[l] += 1
            ch[r+1] -= 1
        cur = 0
        valid = True
        for i in range(n):
            cur += ch[i]
            if cur < nums[i]:
                return False            
        return True",1454825896
Ayanerru,Ayanerru,895,3643,python3,"class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        n = len(nums)
        
                
        def bs(thres):
            ch = [0] * (n+1)
            for l, r, val in queries[:thres]:
                ch[l] += val
                ch[r+1] -= val
            cur = 0
            valid = True
            for i in range(n):
                cur += ch[i]
                if cur < nums[i]:
                    valid = False
                    break
            # print('thres= ', thres, ', ans = ', valid)
            return valid
            
        q_len = len(queries)
        if bs(q_len) == False:
            return -1
        
        lo, hi = 0, q_len
        while lo < hi:
            mid = lo + (hi - lo) // 2
            if bs(mid) == False:
                lo = mid + 1
            else:
                hi = mid
        return lo",1454838306
BrutalKiller,BrutalKiller,897,3616,cpp,"#include ""bits/stdc++.h""
#define all(a) a.begin(), a.end()
#define pb push_back
#define vi vector <ll>
#define vvi vector <vector <ll>>
#define pll pair<ll, ll>

using namespace std;

typedef long long ll;

class Solution {
public:
    int countValidSelections(vector<int>& v) {
        ll ans = 0;
        ll sum = 0;

        for(auto & e : v){
            sum += e;
        }

        ll x = 0;
        for(ll i = 0; i < v.size(); i++){
            x += v[i];
            if(v[i] == 0){
                if(x == sum - x)
                    ans += 2;
                if(abs(sum - x - x) == 1)
                    ans++;
            }
        }
        return ans;
    }
};",1454809632
BrutalKiller,BrutalKiller,897,3639,cpp,"#include ""bits/stdc++.h""
#define all(a) a.begin(), a.end()
#define pb push_back
#define vi vector <ll>
#define vvi vector <vector <ll>>
#define pll pair<ll, ll>

using namespace std;

typedef long long ll;

class Solution {
public:
    bool isZeroArray(vector<int>& v, vector<vector<int>>& q) {
        ll n = v.size();
        vi help(n + 1, 0);

        for(auto & e : q){
            help[e[0]]++;
            help[e[1] + 1]--;
        }

        ll cnt = 0;
        for(ll i = 0; i < n; i++){
            cnt += help[i];
            if(v[i] > cnt){
                return false;
            }
        }

        return true;
    }
};",1454815107
BrutalKiller,BrutalKiller,897,3643,cpp,"#include ""bits/stdc++.h""
#define all(a) a.begin(), a.end()
#define pb push_back
#define vi vector <ll>
#define vvi vector <vector <ll>>
#define pll pair<ll, ll>

using namespace std;

typedef long long ll;

class Solution {
    bool chk(ll mid, vector<int>& v, vector<vector<int>>& q){
        //cout<<mid<<endl;
        ll n = v.size();
        vi help(n + 1, 0);

        for(ll i = 0; i < mid; i++){
            help[q[i][0]] += q[i][2];
            help[q[i][1] + 1] -= q[i][2];
        }

        ll x = 0;
        for(ll i = 0; i < n; i++){
            x += help[i];
            //cout<<x<<v[i]<<endl;
            if(x < v[i])
                return false;
        }

        return true;
    }
public:
    int minZeroArray(vector<int>& v, vector<vector<int>>& q) {
        ll l = 0, r = q.size();
        ll ans = -1;

        while(l <= r){
            ll mid = (l + r) / 2;
            if(chk(mid, v, q)){
                ans = mid;
                r = mid - 1;
            }
            else
                l = mid + 1;
        }
        return ans;
    }
};",1454838429
Shubham Mandan,mandanshubham,898,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int n = nums.size();
        int ans = 0;
        for(int i=0; i<n; i++) {
            if(nums[i] == 0) {
                ans += isPossible(i, nums, -1);
                ans += isPossible(i, nums, 1);
            }
        }

        return ans;
    }

    int isPossible(int i, vector<int> nums, int d) {
        int n = nums.size();
        while(i >= 0 and i < n) {
            if(nums[i] == 0) i += d;
            else {
                nums[i]--;
                d = -1*d;

                i += d;
            }
        }

        for(int i=0; i<n; i++) if(nums[i]) return 0;
        return 1;
    }
};",1454853233
Shubham Mandan,mandanshubham,898,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        vector<int> arr(n+5, 0);

        for(auto q: queries) {
            arr[q[0]]++;
            arr[q[1]+1]--;
        }

        for(int i=0; i<n; i++) {
            if(i)
            arr[i] += arr[i-1];

            if(nums[i] > arr[i]) return 0;
        }

        return 1;
    }
};",1454818152
Shubham Mandan,mandanshubham,898,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int l = 0;
        int h = queries.size();
        int m;
        int ans = INT_MAX;
        
        while(l <= h) {
            m = l + (h-l)/2;

            if(isPossible(nums, queries, m)) {
                ans = m;
                h = m-1;
            }
            else l = m+1;
        }

        return (ans == INT_MAX) ? -1 : ans;
    }

    bool isPossible(vector<int>& nums, vector<vector<int>>& q, int m) {
        int n = nums.size();
        vector<long long> arr(n+5, 0);

        for(int i=0; i<m; i++) {
            arr[q[i][0]] += (long long) q[i][2];
            arr[q[i][1]+1] -= (long long) q[i][2];
        }

        for(int i=0; i<n; i++) {
            if(i)
            arr[i] += arr[i-1];

            if(nums[i] > arr[i]) return 0;
        }

        return 1;
    }
};",1454838265
getcodepri,getcodepri,899,3616,cpp,"class Solution {
public:
    bool check(vector<int> nums, int curr, bool right) {
        int n = nums.size();
        while (curr >= 0 && curr < n) {
            if (nums[curr] == 0)
                curr += right ? 1 : -1;
            else {
                nums[curr]--;
                right = !right;
                curr += right ? 1 : -1;
            }
        }
        for (int num : nums)
            if (num != 0)
                return false;
        return true;
    }

    int countValidSelections(vector<int>& nums) {
        int validSelections = 0;
        for (int i = 0; i < nums.size(); ++i) {
            if (nums[i] == 0) {
                if (check(nums, i, true))
                    validSelections++;
                if (check(nums, i, false))
                    validSelections++;
            }
        }
        return validSelections;
    }
};",1454853303
getcodepri,getcodepri,899,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        vector<int> diff(n + 1, 0); 

        
        for (auto& query : queries) {
            int i = query[0], j = query[1];
            diff[i]--;        
            if (j + 1 < n) {
                diff[j + 1]++; 
            }
        }

        
        int currDecrement = 0;
        for (int i = 0; i < n; i++) {
            currDecrement += diff[i]; 
            nums[i] += currDecrement; 
            if (nums[i] > 0) return false; 
        }

        return true;
    }
};",1454832801
getcodepri,getcodepri,899,3643,cpp,"class Solution {
public:
    bool canMakeZero(vector<int>& nums, vector<vector<int>>& queries, int k) {  
    vector<int> effect(nums.size(), 0);  
    for (int i = 0; i < k; ++i) {  
        int l = queries[i][0];  
        int r = queries[i][1];  
        int val = queries[i][2];  
        effect[l] += val; // Increment the effect of decrement  
        if (r + 1 < nums.size()) {  
            effect[r + 1] -= val; // Remove effect after the range  
        }  
    }  

    // Apply the effect to nums and check if we can make it zero  
    int currentEffect = 0;  
    for (int i = 0; i < nums.size(); ++i) {  
        currentEffect += effect[i];  
        if (nums[i] > currentEffect) { // Check if we can reach zero  
            return false;  
        }  
    }  
    return true;  
}  

    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int left = 0, right = queries.size();  
    int result = -1;  

    while (left <= right) {  
        int mid = left + (right - left) / 2;  
        if (canMakeZero(nums, queries, mid)) {  
            result = mid; // Found a possible k  
            right = mid - 1; // Try for a smaller k  
        } else {  
            left = mid + 1; // Increase k  
        }  
    }  
    return result; 
    }
};",1454837789
Dara_2001,Dara_2001,902,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        vector<int> pre,post;
        int sum=0;
        for(int i=0;i<nums.size();i++){
            pre.push_back(sum);
            sum+=nums[i];
        }
        sum=0;
        for(int i=nums.size()-1;i>=0;i--){
            post.insert(post.begin(),sum);
            sum+=nums[i];
        }
        int ans=0;
        for(int i=0;i<nums.size();i++){
            if(nums[i]!=0) continue;
            if(post[i]==pre[i]) ans+=2;
            else if(abs(post[i]-pre[i])==1) ans+=1;
        }
        return ans;
    }
};",1454816541
Dara_2001,Dara_2001,902,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        vector<int> V(nums.size()+1,0);
        for(auto it:queries){
            V[it[0]]++;
            V[it[1]+1]--;
        }
        if(V[0]<nums[0]) return 0;
        for(int i=1;i<nums.size();i++){
            V[i]=V[i]+V[i-1];
            if(V[i]<nums[i]) return 0;
        }
        return 1;
    }
};",1454834775
Dara_2001,Dara_2001,902,3643,cpp,"class Solution {
public:
    int solve(vector<int>& nums, vector<vector<int>>& queries,int k){
        vector<int> V(nums.size()+1,0);
        for(auto it:queries){
            if(k==0) break;
            V[it[0]]+=it[2];
            V[it[1]+1]-=it[2];
            k--;
        }
        if(V[0]<nums[0]) return 0;
        for(int i=1;i<nums.size();i++){
            V[i]=V[i]+V[i-1];
            if(V[i]<nums[i]) return 0;
        }
        return 1;
    }
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int l=0,h=queries.size();
        int ans=1e9;
        while(l<=h){
            int m=(l+h)/2;
            if(solve(nums,queries,m)){
                ans=min(ans,m);
                h=m-1;
            }
            else l=m+1;
        }
        if(ans==1e9) return -1;
        return ans;
    }
};",1454853346
heshan1234,heshan1234,903,3616,java,"class Solution {
    public int countValidSelections(int[] nums) {
        int sum = 0;
        for(int num : nums) {
            sum += num;
        }

        int n = nums.length;
        int result = 0;
        int left = 0;
        for(int i = 0; i < n; ++i) {
            if (nums[i] == 0) {
                int right = sum - left;
                if (left == right) {
                    result += 2;
                } else if (left == right + 1 || left + 1 == right) {
                    result += 1;
                }
            }
            left += nums[i];
        }
        return result;
    }
}",1454811618
heshan1234,heshan1234,903,3639,java,"class Solution {
    public boolean isZeroArray(int[] nums, int[][] queries) {
        int n = nums.length;
        var d = new int[n+1];
        for(var query : queries) {
            int left = query[0];
            int right = query[1];
            d[left] += 1;
            d[right+1] -= 1;
        }
        int level = 0;
        for(int i = 0; i < n; ++i) {
            level += d[i];
            if (level < nums[i]) {
                return false;
            }
        }
        return true;
    }
}",1454818090
heshan1234,heshan1234,903,3643,java,"class Solution {
    public int minZeroArray(int[] nums, int[][] queries) {
        int m = queries.length;
        int i = 0;
        for(int j = m + 1; i < j; ) {
            int k = (i + j) >>> 1;
            if (ok(nums, nums.length, k, queries)) {
                j = k;
            } else {
                i = k + 1;
            }
        }
        return i > m ? -1 : i;
    }

    static boolean ok(int[] nums, int n, int k, int[][] queries) {
        var d = new int[n+1];
        for(int i = 0; i < k; ++i) {
            int left = queries[i][0];
            int right = queries[i][1];
            int v = queries[i][2];
            d[left] += v;
            d[right+1] -= v;
        }
        int level = 0;
        for(int i = 0; i < n; ++i) {
            level += d[i];
            if (level < nums[i]) {
                return false;
            }
        }
        return true;
    }
}",1454845999
N M,nnmm11,904,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        prefix = list(accumulate(nums))
        cur = 0
        ans = 0
        for i in range(len(nums) - 1, -1, -1):
            cur += nums[i]
            if nums[i] == 0:
                if cur - prefix[i] == 0:
                    ans += 2
                elif abs(cur - prefix[i]) == 1:
                    ans += 1
        return ans
                ",1454807325
N M,nnmm11,904,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        queries.sort()
        cur = 0 # maximum allowable nums[i]
        i = 0
        q = []
        for l, r in queries:
            while i < l: # check everything before current l
                while q and i > q[0]: # we've gone past an `r`
                    heappop(q)
                    cur -= 1
                # print(i, cur, nums[i], 'at', l, r)
                if nums[i] > cur:
                    return False
                i += 1
            heappush(q, r)
            cur += 1 # Since i == l now, we need to add this
        while i < len(nums):
            while q and i > q[0]: # we've gone past an `r`
                heappop(q)
                cur -= 1
            # print(i, cur, nums[i], 'end')
            if nums[i] > cur:
                return False
            i += 1
        return True
            ",1454817605
N M,nnmm11,904,3643,python3,"class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        cur = 0 # maximum allowable nums[i]
        i = 0
        q = []
        q2 = []
        # j = 0 # index into queries
        for j, (l, r, v) in enumerate(queries):
            while i < len(nums): # check everything before current l
                while q and i > q[0][0]: # we've gone past an `r`
                    cur -= q[0][1]
                    heappop(q)
                while q2 and i >= q2[0][0]: # we've hit an `l`
                    cur += q2[0][1]
                    heappop(q2)
                # print(i, cur, nums[i], 'at', j, l, r, v, 'q', q, q2)
                if nums[i] > cur:
                    break # i does not work, we need to go to the next query
                i += 1
            else:
                return j
            # print('hi', j)
            heappush(q, (r, v))
            heappush(q2, (l, v))
            
        while i < len(nums):
            while q and i > q[0][0]: # we've gone past an `r`
                cur -= q[0][1]
                heappop(q)
            while q2 and i >= q2[0][0]: # we've hit an `l`
                cur += q2[0][1]
                heappop(q2)
            # print(i, cur, nums[i], 'end', j, 'q', q, q2)
            if nums[i] > cur:
                return -1
            i += 1
        return j+1",1454846029
karthikv_9,karthikv_9,905,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& arr) {
        int n = arr.size();
        int leftSum = 0;
        int answer = 0;
        for(int i = 0 ; i < arr.size() ;i++) {
            int rightSum = 0;
            for(int j = i + 1;j < n;j++){
                rightSum += arr[j];
            }
            if(leftSum == rightSum && arr[i] == 0) answer += 2;
            if(abs(leftSum - rightSum) == 1 && arr[i] == 0) answer += 1;
            leftSum += arr[i];
        }
        return answer;
    }
};",1454810782
karthikv_9,karthikv_9,905,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& arr, vector<vector<int>>& q) {
        int n = arr.size();
        vector<int>p(n + 1,0);
        for(auto it : q) {
            p[it[0]]--;
            p[it[1] + 1]++;
        }
        int curr = 0;
        long long sum = 0;
        for(int i = 0;i < n;i++){
            curr += p[i];
            arr[i] + curr >= 0 ? sum += arr[i] + curr : 0;
        }
        return sum == 0;
    }
};",1454823358
karthikv_9,karthikv_9,905,3643,cpp,"class Solution {
public:
    bool check(vector<int>& arr, vector<vector<int>>& q,int k) {
        int n = arr.size();
        vector<int>p(n + 1,0);
        for(int i = 0 ; i < k ; i++) {
            vector<int>it = q[i];
            p[it[0]] -= it[2];
            p[it[1] + 1] += it[2];
        }
        int curr = 0;
        long long sum = 0;
        for(int i = 0;i < n;i++){
            curr += p[i];
            arr[i] + curr >= 0 ? sum += arr[i] + curr : 0;
        }
        return sum == 0;           
    }
    int minZeroArray(vector<int>& arr, vector<vector<int>>& q) {
        int start = 0;
        int end = q.size();
        int answer = -1;
        while(start <= end) {
            int mid = start + (end - start) /2;
            if(check(arr,q,mid)) {
                answer = mid;
                end = mid - 1;
            } else {
                start = mid + 1;
            }
        }
        return answer;
    }
};",1454838692
Rynn,kai_to_the_lynn,906,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& A) {
        int cur = 0;
        int n = A.size();
        int res =0 ;
        int sum = std::accumulate(A.begin(), A.end(), 0);
        for (int i = 0; i < n; ++i) {
            cur += A[i];
            if (A[i] == 0) {
                int other = sum - cur;
                if (other == cur) {
                    res += 2;
                } else if ((other == cur + 1) || (cur == other + 1)) {
                    ++res;
                }
            }
            
        }
        return res;
    }
};",1454808001
Rynn,kai_to_the_lynn,906,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& A, vector<vector<int>>& queries) {
        int arr[1000000];
        memset(arr, 0, sizeof(arr));
        for (auto& q : queries) {
            arr[q[0]]--;
            arr[q[1] + 1]++;
        }
        // apply the changes to the array.
        int cur = 0;
        for (int i = 0; i < A.size(); ++i ) {
            cur += arr[i];
            A[i] += cur;
        }
        for (int i = 0; i < A.size(); ++i) {
            if (A[i] > 0) return false;
        }
        return true;
    }
};",1454810977
Rynn,kai_to_the_lynn,906,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& A, vector<vector<int>>& queries) {
        // one should always take the largest number.
        int n = A.size();
        int m = queries.size();
        bool t = true;
        for (int i = 0; i < n; ++i) {
            if (A[i] > 0) t = false;
        }
        if (t) return 0;
        int l = 0, r = m - 1;
        int res = -1;
        auto can = [&](int stop) {
            vector<int>C(A.begin(), A.end());
            vector<int>B(n + 1, 0);
            for (int i = 0; i <= stop; ++i) {
                B[queries[i][0]] -= queries[i][2];
                B[queries[i][1] + 1] += queries[i][2];
            }
            int cur = 0;
            for (int i = 0; i < n; ++i) {
                cur += B[i];
                C[i] += cur;
                if (C[i] > 0) return false;
            }
            std::cout << ""Final remain is "" << C[0] << ' ' << stop <<  '\n';
            // if any are still positive return false;
            return true;
            
        };
        while (l <= r) {
            int m = l + (r - l)/2;
            if (can(m)) {
                std::cout << ""FIrst\n"";
                res = m;
                r = m - 1;
            } else {
                l = m + 1;
            }
        }
        return (res == -1 ? -1 : ++res);
    }
};",1454831269
Chandu Dasari,dreadplan,907,3616,cpp,"class Solution {
public:
    bool simulate(vector<int> nums, int start, int direction) {
        int n = nums.size();
        int curr = start;
    
        while (curr >= 0 && curr < n) {
            if (nums[curr] == 0) {
                curr += direction; 
            } else if (nums[curr] > 0) {
                nums[curr] -= 1;  
                direction = -direction;
                curr += direction;
            }
        }
        return all_of(nums.begin(), nums.end(), [](int x) { return x == 0; });
    }

    int countValidSelections(vector<int>& nums) {
        int validCount = 0;
        int n = nums.size();
    
        for (int i = 0; i < n; ++i) {
            if (nums[i] == 0) { // Only consider starting at positions where nums[curr] == 0
                if (simulate(nums, i, 1)) { // Try moving right
                    validCount++;
                }
                if (simulate(nums, i, -1)) { // Try moving left
                    validCount++;
                }
            }
        }
    
        return validCount;
    }
};",1454812282
Chandu Dasari,dreadplan,907,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        vector<int> agg(nums.size()+1, 0);
        for(auto query: queries){
            agg[query[0]]--;
            agg[query[1]+1]++;
        }

        for(int i=1; i<agg.size(); i++){
            agg[i] += agg[i-1];
        }
        
        for(int i=0; i<nums.size(); i++){
            if((agg[i] + nums[i])>0){
                return false;
            }
        }
        return true;
    }
};",1454832506
Chandu Dasari,dreadplan,907,3643,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries, int k) {
        vector<int> agg(nums.size()+1, 0);
        for(int i=0; i<k; i++){
            agg[queries[i][0]] -= queries[i][2];
            agg[queries[i][1]+1] += queries[i][2];
        }

        for(int i=1; i<agg.size(); i++){
            agg[i] += agg[i-1];
        }
        
        for(int i=0; i<nums.size(); i++){
            if((agg[i] + nums[i])>0){
                return false;
            }
        }
        return true;
    }
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        
        int left=0,right = queries.size();
        while (left < right){
            int mid = left + (right - left)/2;
            if (isZeroArray(nums,queries, mid)){
                right = mid;
            } else {
                left = mid + 1;
            }
        }
        if(left == queries.size()){
            if(!isZeroArray(nums,queries, left)){
                return -1;
            }
        }
        return left;
    }
};",1454853480
TulasiRaj,TulasiRaj,911,3616,java,"class Solution {
    public int countValidSelections(int[] nums) {
        int n = nums.length;
        int p[] = new int[n];
        p[0] = nums[0]; int sum = nums[0];
        for(int i=1;i<n;i++)
        {
            p[i] = p[i-1]+nums[i];
            sum = sum+nums[i];
        }
        int ans = 0;
        for(int i=0;i<n;i++)
        {
            if(nums[i]==0)
            {
                // int left = i-1>=0?p[i-1]:0;
                if(sum-p[i]==p[i])
                {
                    ans+=2;
                }
                else if(sum-p[i]+1==p[i]||sum-p[i]==p[i]+1) ans++;
            }
        }
        return ans;
    }
}",1454817797
TulasiRaj,TulasiRaj,911,3639,java,"class Solution {
    public boolean isZeroArray(int[] nums, int[][] queries) {
        int n = nums.length;
        int q = queries.length;
        int d[]  = new int[n+1];
        for(int i=0;i<q;i++)
        {
            int l = queries[i][0];
            int r = queries[i][1];
            d[l]++;
            d[r+1]--;
        }
        int val = 0;
        for(int i=0;i<n;i++)
        {
            val = val+d[i];
            if(val<nums[i]) return false; 
        }
        return true;
    }
}",1454824010
TulasiRaj,TulasiRaj,911,3643,java,"class Solution {
    public int minZeroArray(int[] nums, int[][] queries) {
        int n = nums.length;
        int q = queries.length;
        int low = 0; int high = q; int ans = -1;
        while(low<=high)
        {
            int mid = (low+high)/2;
            if(f(nums,queries,q,mid,n))
            {
                ans = mid;
                high = mid-1;
            }
            else low = mid+1;
        }
        return ans==-1?-1:ans;
        
    }
    public boolean f(int nums[],int queries[][], int q, int k,int n)
    {
        int d[] = new int[n+1];
        for(int i=0;i<k;i++)
        {
            int l = queries[i][0];
            int r = queries[i][1];
            int val = queries[i][2];
            d[l]+=val;
            d[r+1]-=val;
        }
        int res = 0;
        for(int i=0;i<n;i++)
        {
            res = res+d[i];
            if(res<nums[i]) return false;
        }
        return true;
    }
}",1454838806
SVS Surya Prakash,mugiwara2711,912,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        
        s = sum(nums)
        odd = s%2
        p = s//2
        
        curr = 0
        
        sol = 0
        
        for i in nums:
            if i == 0 and (not odd and curr == p):
                sol+=1
            elif i == 0 and (odd and (curr == p or curr == (p+1))):
                sol+=1
            else:
                curr+=i
        if odd:                  
            return sol
                             
        return 2*sol",1454820227
SVS Surya Prakash,mugiwara2711,912,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        
        int n = nums.size();
        vector<int>mp(n+1,0);
        
        for(auto q:queries)
        {
            mp[q[0]]++;
            mp[q[1]+1]--;
        }
        
        int prev = 0;
        
        for(int i = 0;i<n;i++)
        {
            mp[i] = prev+mp[i];
            prev = mp[i];
            
            if(prev<nums[i])
                return false;
        }
        
        return true;
    }
};",1454828033
SVS Surya Prakash,mugiwara2711,912,3643,cpp,"class Solution {
public:
    int n;
    bool helper(vector<int>& nums, vector<vector<int>>& queries,int k)
    {
        vector<int>mp(n+1,0);
        
        for(int i = 0;i<k;i++)
        {
            auto q = queries[i];
            mp[q[0]]+=q[2];
            mp[q[1]+1]-=q[2];
        }
        
        int prev = 0;
        
        for(int i = 0;i<n;i++)
        {
            mp[i] = prev+mp[i];
            prev = mp[i];
            
            if(prev<nums[i])
                return false;
        }
        
        return true;
    }
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        n = nums.size();
        int start = 0 ;
        int end = queries.size() ;
        
        int sol = -1;
        
        while(start<=end)
        {
            int mid = (start+end)/2;
            //cout<<mid<<endl;
            if(helper(nums,queries,mid))
            {
                sol = mid;
                end = mid-1;
            }
            else
            {
                start = mid+1;
            }
        }
        
        return sol;
    }
};",1454846183
plusline,plusline,914,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int total = 0;
        for(auto num:nums) {
            total +=num;
        }
       
        int count=0;
        int acc = 0;
        for(int i=0;i<nums.size();i++) {
            if(nums[i]==0) {
                if(abs(total-acc*2)==1) {
                    count++;
                }
                else if(abs(total-acc*2)==0) {
                    count+=2;
                }
            }
            else {
                acc+=nums[i];
            }
        }
        return count;
    }
};",1454810762
plusline,plusline,914,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        vector<int> acc(nums.size()+1,0);
        for(auto& query:queries) {
            acc[query[0]]++;
            acc[query[1]+1]--;
        }
        
        int change = 0;
        for(int i=0;i<nums.size();i++) {
            change += acc[i];
            //cout<<nums[i]<<"" ""<<change<<endl;
            if(nums[i]>change) {
                return false;
            }
        }
        return true;
    }
};",1454821540
plusline,plusline,914,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        //check first
        bool flag = true;
        for(int i=0;i<nums.size();i++) {
            if(nums[i]!=0) {
                flag = false;
            }
        }
        if(flag) return 0;
        
        int l=0;
        int r = queries.size()-1;
        while(l<=r) {
            int mid = (l+r)/2;
            if(isZeroArray(nums,queries,mid)) {
                r = mid-1;
            }
            else {
                l = mid+1;
            }
        }
        if(l<queries.size()) {
            return l+1;
        }
        else {
            return -1;
        }
    }
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries, int index) {
        vector<int> acc(1e5+1,0);
        for(int i=0;i<=index;i++) {
            acc[queries[i][0]]+=queries[i][2];
            acc[queries[i][1]+1]-=queries[i][2];
        }
        
        int change = 0;
        for(int i=0;i<nums.size();i++) {
            change += acc[i];
            //cout<<nums[i]<<"" ""<<change<<endl;
            if(nums[i]>change) {
                return false;
            }
        }
        return true;
    }
};",1454846201
Zhu,user3593Z,915,3616,java,"class Solution {
    public int countValidSelections(int[] arr) {
        int n = arr.length;
        
        int[] presum = new int[n + 1];
        for (int i = 0; i < n; i++) {
            presum[i + 1] = presum[i] + arr[i];
        }
        
        int[] sursum = new int[n + 1];
        for (int i = n - 1; i >= 0; i--) {
            sursum[i] = sursum[i + 1] + arr[i];
        }
        
        int result = 0;
        for (int i = 0; i < n; i++) {
            if (arr[i] == 0) {
                if (presum[i] == sursum[i + 1]) result += 2;
                if (Math.abs(presum[i] - sursum[i + 1]) == 1) result++;
            }
        }
        
        return result;
    }
}",1454810606
Zhu,user3593Z,915,3639,java,"class Solution {
    public boolean isZeroArray(int[] nums, int[][] queries) {
        int n = nums.length;
        
        int[] diff = new int[n + 1];
        
        for (int[] q : queries) {
            diff[q[0]]--;
            diff[q[1] + 1]++;
        }
        
        int d = 0;
        for (int i = 0; i < n; i++) {
            d += diff[i];
            if (nums[i] + d > 0) return false;
        }
        
        return true;
    }
}",1454814271
Zhu,user3593Z,915,3643,java,"class Solution {
    public int minZeroArray(int[] nums, int[][] queries) {
        int n = nums.length;
        int m = queries.length;
        int left = -1;
        int right = m + 1;
        
        while (left + 1 < right) {
            int mid = left + (right - left) / 2;
            int[] diff = new int[n + 1];
            for (int i = 0; i < mid; i++) {
                diff[queries[i][0]] -= queries[i][2];
                diff[queries[i][1] + 1] += queries[i][2];
            }
            
            int d = 0;
            boolean ok = true;
            for (int i = 0; i < n && ok; i++) {
                d += diff[i];
                if (nums[i] + d > 0) ok = false;
            }
            
            if (ok) right = mid;
            else left = mid;
        }
        
        return right > m ? -1 : right;
    }
}",1454831417
hvbird,hvbird,916,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& A) {
        int a = accumulate(A.begin(), A.end(), 0);
        int ans = 0, cur = 0;
        for(int i=0;i<A.size();i++){
            if(A[i]==0 and cur*2==a){
                ans+=2;
            }else if(A[i]==0 and abs(a-cur-cur)==1){
                //cout<<cur<<endl;
                ans+=1;
            }
            cur+=A[i];
        }
        return ans;
    }
};",1454817159
hvbird,hvbird,916,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& A, vector<vector<int>>& Q) {
        int N = A.size();
        vector<tuple<int,int>> B;
        for(auto& v:Q){
            B.push_back({v[0],1});
            B.push_back({v[1]+1,-1});
        }
        sort(B.begin(), B.end());
        reverse(B.begin(), B.end());
        int cur = 0;
        for(int i=0;i<N;i++){
            while(B.size() and get<0>(B.back())==i){
                auto [j,d] = B.back();
                B.pop_back();
                cur+=d;
            }
            //cnt[i] = d;
            if(cur<A[i])return false;
        }
        return true;
    }
};",1454826145
hvbird,hvbird,916,3643,cpp,"class Solution {
public:
    bool check(int m, vector<int>& A, vector<vector<int>>& Q) {
        cout<<m<<endl;
        int N = A.size();
        vector<tuple<int,int>> B;
        for(int i=0;i<Q.size();i++){
            if(i>=m)break;
            auto& v = Q[i];
            B.push_back({v[0],v[2]});
            B.push_back({v[1]+1,-v[2]});
        }
        sort(B.begin(), B.end());
        // for(auto& [a,b]:B)
        //     cout<<a<<"":""<<b<<endl;
        reverse(B.begin(), B.end());
        int cur = 0;
        for(int i=0;i<N;i++){
            while(B.size() and get<0>(B.back())==i){
                auto [j,d] = B.back();
                B.pop_back();
                cur+=d;
            }
            //cnt[i] = d;
            //cout<<i<<"" ""<<cur<<endl;
            if(cur<A[i])return false;
        }
        return true;
    }
    int minZeroArray(vector<int>& A, vector<vector<int>>& Q) {
        int N = A.size();

        int l = -1, r = Q.size()+10;
        while(l+1<r){
            auto m = (l+r)/2;
            if(check(m, A, Q)){
                r = m;
            }else{
                l = m;
            }
        }
        
        if(r==Q.size()+10)return -1;
        return r;
    }
};",1454838931
Badal Arya,BadalArya,917,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int ans = 0;
        int n = nums.size();
        for(int i = 0; i < n; i++) {
            int left = 0;
            int right = 0;
            if(nums[i]) continue;
            for(int j = 0; j < i; j++) left += nums[j];
            for(int j = i + 1; j < n; j++) right += nums[j];
            ans += 2 * (left == right);
            ans += (abs(left - right) == 1);
        }
        return ans;
    }
};",1454838985
Badal Arya,BadalArya,917,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        vector<int> diff(n + 1, 0);
        for(int i= 0 ; i < queries.size(); i++) {
            diff[queries[i][0]]++;
            diff[queries[i][1] + 1]--;
        }
        for(int i = 1; i < n + 1; i++) diff[i] += diff[i - 1];
        for(int i = 0; i < n; i++) {
            if(nums[i] > diff[i]) return false;
        }
        return true;
    }
};",1454807297
Badal Arya,BadalArya,917,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& q) {
        int n = nums.size();
        int arr[n];
        int ans = -1;
        int start = 0;
        int end = q.size();
        while(start <= end) {
            int mid = (start + end) / 2;
            vector<int> diff(n + 1, 0);

            for(int i = 0; i < mid; i++) {
                diff[q[i][0]] += q[i][2];
                diff[q[i][1] + 1] -= q[i][2];                
            }
            for(int i = 1; i < n + 1; i++) diff[i] += diff[i - 1];
            bool ok = 1;
            for(int i = 0; i < n; i++) if(nums[i] > diff[i]) ok = 0;
            // for(int i = 0; i < n; i++) cout << diff[i] << ' ';
            // cout << endl;
            if(ok) {
                ans = mid;
                end = mid - 1;
            }else {
                start = mid + 1;
            }
        }
        return ans;
    }
};",1454829355
Bhavik Bharambe,bbhavik_16,919,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums){
        int n = nums.size();
        vector<int> pre(n), suff(n);
        pre[0] = nums[0];
        for(int i=1; i<n; i++)
            pre[i] = pre[i-1] + nums[i];
        suff[n-1] = nums[n-1];
        for(int i=n-2; i>=0; i--)
            suff[i] = suff[i+1] + nums[i];
        
        int cnt = 0;
        for(int i=0; i<n; i++){
            if(nums[i] == 0){
                if(pre[i] == suff[i]) cnt += 2;
                else if(abs(pre[i] - suff[i]) == 1) cnt++;
            }
        }
        
        return cnt;
    }
};",1454814576
Bhavik Bharambe,bbhavik_16,919,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries){
        int n = nums.size(), q = queries.size();
        vector<int> diff(n+1, 0);
        for(int i=0; i<q; i++){
            int l = queries[i][0], r = queries[i][1];
            diff[l] += 1;
            diff[r+1] -= 1;
        }
        
        for(int i=1; i<=n; i++)
            diff[i] += diff[i-1];

        for(int i=0; i<n; i++){
            if(nums[i] > diff[i])
                return false;
        }
        
        return true;
    }
};",1454839039
Bhavik Bharambe,bbhavik_16,919,3643,cpp,"#define ll long long
class Solution {
public:
    bool isValid(vector<int>& nums, int n, vector<vector<int>>& queries, int mid){
        vector<ll> diff(n+1, 0);
        for(int i=0; i<=mid; i++){
            int l = queries[i][0], r = queries[i][1], val = queries[i][2];
            diff[l] += val;
            diff[r+1] -= val;
        }
        
        for(int i=1; i<=n; i++)
            diff[i] += diff[i-1];

        for(int i=0; i<n; i++){
            if(nums[i] > diff[i])
                return false;
        }
        
        return true;
    }
    
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries){
        int n = nums.size(), q = queries.size();
        int low = -1, high = q-1, res = -2;
        while(low <= high){
            int mid = low + (high-low)/2;
            if(isValid(nums, n, queries, mid)){
                res = mid;
                high = mid-1;
            }
            else
                low = mid+1;
        }
        
        return res+1;
    }
};",1454835521
Ishaan Gupta,ishhangupta2003,920,3616,cpp,"#include <vector>
using namespace std;

class Solution {
public:
    int countValidSelections(vector<int>& arr) {
        int totalValid = 0;
        int length = arr.size();
        
        // Try each possible starting position where arr[pos] == 0
        for (int index = 0; index < length; index++) {
            if (arr[index] == 0) {
                // Check both movement directions (right = true, left = false)
                if (traverse(index, true, arr)) {
                    totalValid++;
                }
                if (traverse(index, false, arr)) {
                    totalValid++;
                }
            }
        }
        
        return totalValid;
    }

private:
    // Helper method to perform traversal
    bool traverse(int index, bool moveRight, vector<int> arrCopy) {
        int pos = index;
        int size = arrCopy.size();
        
        while (pos >= 0 && pos < size) {
            if (arrCopy[pos] == 0) {
                // Move in the current direction
                pos = moveRight ? pos + 1 : pos - 1;
            } else {
                // Decrease the value
                arrCopy[pos]--;
                // Reverse the movement direction
                moveRight = !moveRight;
                // Move in the new direction
                pos = moveRight ? pos + 1 : pos - 1;
            }
        }

        // Check if all elements are zero
        for (int value : arrCopy) {
            if (value != 0) {
                return false;
            }
        }
        
        return true;
    }
};",1454836432
Ishaan Gupta,ishhangupta2003,920,3639,cpp,"#include <vector>
using namespace std;

class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        vector<int> diff(n + 1, 0);

        // Apply all queries to the difference array
        for(auto &query : queries){
            int l = query[0];
            int r = query[1];
            diff[l] += 1;
            if(r + 1 < n){
                diff[r + 1] -= 1;
            }
        }

        // Compute prefix sums to get coverage counts
        int coverage = 0;
        for(int i = 0; i < n; ++i){
            coverage += diff[i];
            if(coverage < nums[i]){
                return false;
            }
        }
        return true;
    }
};",1454853783
Ishaan Gupta,ishhangupta2003,920,3643,cpp,"#include <vector>
using namespace std;

class Solution {
public:
    bool isPossible(int k, const vector<int>& nums, const vector<vector<int>>& queries) {
        int n = nums.size();
        vector<long long> diff(n + 1, 0);
        for(int i = 0; i < k; ++i){
            int l = queries[i][0];
            int r = queries[i][1];
            int val = queries[i][2];
            diff[l] += val;
            if(r + 1 < n){
                diff[r + 1] -= val;
            }
        }
        long long total = 0;
        for(int i = 0; i < n; ++i){
            total += diff[i];
            if(total < nums[i]){
                return false;
            }
        }
        return true;
    }
    
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int left = 0, right = queries.size();
        int result = -1;
        while(left <= right){
            int mid = left + (right - left) / 2;
            if(isPossible(mid, nums, queries)){
                result = mid;
                right = mid - 1;
            }
            else{
                left = mid + 1;
            }
        }
        return result;
    }
};",1454853660
Tushar Agarwal,techtushar2002,921,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums)
    {
        int count = 0, lsum = 0;
        int sum = accumulate(nums.begin(),nums.end(),0);
        for(int i=0; i<nums.size(); i++)
            {
                lsum += nums[i];
                if(nums[i] == 0)
                {
                    if(sum == 2*lsum)
                        count+=2;
                    else
                    {
                        if(abs(sum - 2*lsum) == 1)
                            count++;
                    }
                }
            }
        return count;
    }
};",1454817396
Tushar Agarwal,techtushar2002,921,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries)
    {
        int n = nums.size();
        vector<int> diff(n+1,0);
        for(int i=0; i<queries.size(); i++)
            {
                diff[queries[i][0]]++;
                diff[queries[i][1]+1]--;
            }
        for(int i=1; i<=n; i++)
            diff[i] += diff[i-1];
        for(int i=0; i<n; i++)
            {
                if(diff[i] < nums[i])
                    return false;
            }
        return true;
    }
};",1454823670
Tushar Agarwal,techtushar2002,921,3643,cpp,"class Solution {
public:
    bool check(vector<int>& nums, vector<vector<int>>& queries,int mid)
    {
        int q = queries.size();
        int n = nums.size();
        vector<int> diff(n+1,0);
        for(int i=0; i<=mid; i++)
            {
                diff[queries[i][0]] += queries[i][2];
                diff[queries[i][1]+1] -= queries[i][2];
            }
        for(int i=1; i<=n; i++)
            diff[i] += diff[i-1];
        for(int i=0; i<n; i++)
            {
                if(diff[i] < nums[i])
                    return false;
            }
        return true;
    }
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries)
    {
        int low = -1, high = queries.size()-1;
        int ans = -1;
        bool zero = true;
        while(low <= high)
            {
                int mid = (low+high)/2;
                bool k = check(nums,queries,mid);
                if(k)
                {
                    ans = mid+1;
                    high = mid-1;
                }
                else low = mid+1;
            }
        return ans;
    }
};",1454839083
Rohan Kumar,rohna1234,922,3616,cpp,"class Solution {
public:
    int solve(vector<int> array,int cur,int flag){
        while(cur>=0 && cur<array.size()){
                if(array[cur]==0){
                    if(flag)
                        cur++;
                    else
                        cur--;
                }
                else{
                    array[cur]--;
                    flag=1-flag;
                    if(flag)
                        cur++;
                    else
                        cur--;
                }
            }
            for(auto i:array){
                if(i!=0)
                    return 0;
            }
            return 1;
    }
    int countValidSelections(vector<int>& nums) {
        
       
        int n=nums.size(),ans=0;
        for(int i=0;i<n;i++){
            if(nums[i]==0){
                if(solve(nums,i,1))
                    ans++;
                if(solve(nums,i,0))
                    ans++;
            }
        }
        return ans;
    }
};",1454821737
Rohan Kumar,rohna1234,922,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
       int n=nums.size();
        vector<int>v(n+1,0);
        for(auto i:queries){
            v[i[0]]++;
            v[i[1]+1]--;
        }
        int cur=0;
        for(int i=0;i<n;i++){
            cur+=v[i];
            if(cur<nums[i])
                return 0;
        }
        return 1;
    }
};",1454829163
Rohan Kumar,rohna1234,922,3643,cpp,"class Solution {
public:
    int solve(int mid,vector<int> nums,vector<vector<int>>& queries){
        int n=nums.size();
        vector<int>v(n+1,0);
        for(int i=0;i<mid;i++){
            v[queries[i][0]]+=queries[i][2];
            if(queries[i][1]+1<n)
                v[queries[i][1]+1]-=queries[i][2];
        }
        int ans=0;
        for(int i=0;i<n;i++){
            ans+=v[i];
            if(ans<nums[i])
                return 0;
        }
        return 1;
    }
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size(),l=0,r=queries.size(),ans=-1;
        while(l<=r){
            int mid=(l+r)/2;
            if(solve(mid,nums,queries)){
                ans=mid;
                r=mid-1;
            }
            else
                l=mid+1;
        }
        return ans;
    }
};",1454853806
Anugam Jain,bash_coder,923,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int n = nums.size(), ans = 0;
        int sum = 0;
        for (auto it: nums) sum+=it;
        int pre = 0, post = sum;
        for (int i=0;i<n;++i) {
            post -= nums[i];
            if (nums[i] == 0 && pre == post) {
            ans += 2;
            } else if (nums[i] == 0 && abs(pre-post) == 1) {
                ans += 1;
            }
            pre += nums[i];
        }
        return ans;
    }
};",1454814823
Anugam Jain,bash_coder,923,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        vector<int> op(1e5 + 3, 0);
        for (auto it: queries) {
            op[it[0]]++;
            op[it[1]+1]--;
        }
        int cnt = 0;
        for (int i=0;i<nums.size(); ++i) {
            cnt += op[i];
            if (cnt < nums[i]) return 0;
        }
        return 1;
    }
};",1454820606
Anugam Jain,bash_coder,923,3643,cpp,"class Solution {
public:
    bool check(vector<int>& nums, vector<vector<int>>& queries, int k) {
        vector<int> op(1e5 + 3, 0);
        for (int i=0;i<k;++i) {
            auto it= queries[i];
            op[it[0]]+=it[2];
            op[it[1]+1]-=it[2];
        }
        int cnt = 0;
        for (int i=0;i<nums.size(); ++i) {
            cnt += op[i];
            if (cnt < nums[i]) return 0;
        }
        return 1;
    }
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int low = 0, high = queries.size();
        int ans = -1;
        while(low <= high) {
            int mid = (low+high)/2;
            cout << mid <<"" "";
            if (check(nums, queries, mid)) {
                ans = mid;
                high = mid-1;
            } else {
                low = mid+1;
            }
        }
        cout <<""\n"";
        return ans;
    }
};",1454831694
Prathamesh Autade,prathamesh_107,924,3616,cpp,"class Solution {
public:
    bool help(int i,vector<int> nums,bool left){
        int ind = i;
        while(1){
            if(ind>=nums.size() || ind<0)break;
            if(nums[ind]==0){
                ind = left ? ind-1:ind+1;
            }else{
                nums[ind]--;
                ind = left ? ind+1:ind-1;
                left = !left;
            }
        }
        int sum = accumulate(nums.begin(),nums.end(),0);
        return sum==0;
    }
    int countValidSelections(vector<int>& nums) {
        int ans = 0;
        for(int i=0;i<nums.size();i++){
            if(nums[i]!=0)continue;
            if(help(i,nums,true)){
                // cout<<i<<endl;
                ans++;
            }
            if(help(i,nums,false)){
                // cout<<i<<endl;
                ans++;
            }
        }
        return ans;
    }
};",1454811980
Prathamesh Autade,prathamesh_107,924,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        vector<int> pre(n+1,0);
        for(auto it:queries){
            pre[it[0]]+=1;
            pre[it[1]+1]+=-1;
        }
        for(int i=1;i<n;i++)
            pre[i]+=pre[i-1];
        for(int i=0;i<n;i++){
            if(nums[i]>pre[i])return false;
        }
        return true;
    }
};",1454818621
Prathamesh Autade,prathamesh_107,924,3643,cpp,"class Solution {
public:
    bool solve(vector<int>& nums,int k,vector<vector<int>>& queries){
        int n = nums.size();
        vector<int> pre(n+1,0);
        for(int i=0;i<=k;i++){
            vector<int> it = queries[i];
            pre[it[0]]+=it[2];
            pre[it[1]+1]-=it[2];
        }
        for(int i=1;i<n;i++)
            pre[i]+=pre[i-1];
        for(int i=0;i<n;i++){
            if(nums[i]>pre[i])return false;
        }
        return true;
    }
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        int lo = 0;
        int hi = queries.size()-1;
        int ans = -1;
        if(solve(nums,-1,queries))return 0;
        while(lo<=hi){
            int mid = lo+(hi-lo)/2;
            if(solve(nums,mid,queries)){
                ans = mid+1;
                hi = mid-1;
            }else
                lo = mid+1;
        }
        return ans;
    }
};",1454839181
Ayaka,rexue70,925,3616,java,"class Solution {
    public int countValidSelections(int[] nums) {
        int n = nums.length;
        int[] left = new int[n];
        int[] right = new int[n];
        int cur = 0;
        for (int i = 0; i < n; i++) {
            left[i] = nums[i];
            if (i > 0) left[i] += left[i - 1];
        }
        
        for (int i = n - 1; i >= 0; i--) {
            right[i] = nums[i];
            if (i < n - 1) right[i] += right[i + 1];
        }
        int res = 0;
        // System.out.println(""left = "" + Arrays.toString(left));
        // System.out.println(""right = "" + Arrays.toString(left));
        for (int i = 0; i < n; i++) {
            if (nums[i] != 0) continue;
            if (left[i] == right[i]) res += 2;
            if (left[i] + 1 == right[i] || left[i] - 1 == right[i]) res++;
        }
        return res;
    }
}",1454814377
Ayaka,rexue70,925,3639,java,"class Solution {
    public boolean isZeroArray(int[] nums, int[][] queries) {
        int n = nums.length;
        int[] prefix = new int[n + 1];
        for (int[] query : queries) {
            prefix[query[0]]++;
            prefix[query[1] + 1]--;
        }
        int cur = 0;
        for (int i = 0; i < n; i++) {
            cur += prefix[i];
            if (nums[i] > cur) return false;
        }
        return true;
    }
}",1454821576
Ayaka,rexue70,925,3643,java,"class Solution {
    int n;
    public int minZeroArray(int[] nums, int[][] queries) {
        this.n = nums.length;
        int m = queries.length;
        int left = 0, right = m + 1;
        int res = m + 1;
        while (left < right) {
            int mid = left + (right - left) / 2;
            if (valid(nums, queries, mid)) {
                // System.out.println(""we guess mid = "" + mid + "" valid"");
                res = Math.min(res, mid);
                right = mid;
            } else {
                // System.out.println(""we guess mid = "" + mid + "" not valid"");
                left = mid + 1;
            }
        }
        return res == m + 1 ? -1 : res;
    }
    
    
    public boolean valid(int[] nums, int[][] queries, int k) {
        int[] prefix = new int[n + 1];
        for (int i = 0; i < k; i++) {
            int[] query = queries[i];
            prefix[query[0]] += query[2];
            prefix[query[1] + 1] -= query[2];
        }
        int cur = 0;
        // System.out.println(""k = "" + k);
        // System.out.println(""prefix = "" + Arrays.toString(prefix));
        for (int i = 0; i < n; i++) {
            cur += prefix[i];
            if (nums[i] > cur) return false;
        }
        return true;
    }
}",1454839282
Sk Najir,Najir581,926,3616,cpp,"#define IOS                      \
    ios::sync_with_stdio(false); \
    cin.tie(0);                  \
    cout.tie(0);

// pre_define
#define all(a) (a).begin(), (a).end()
#define rall(a) (a).rbegin(), (a).rend()

// shortcut type
typedef long long ll;
typedef long double ld;
typedef vector<int> vi;
typedef vector<vi> vii;
typedef vector<ll> vl;
typedef vector<vl> vll;
typedef pair<int, int> pi;
typedef pair<ll, ll> pl;

// Constants
const int MOD = 1e9 + 7;

//                                       Sk Najir

class Solution {
public:
    int countValidSelections(vector<int>&v ) {
        int c=0;
        for(int i=0;i<v.size();i++){
            if(v[i]==0){
                int s=0,p=0;
                for(int j=0;j<i;j++)s+=v[j];
                for(int j=i+1;j<v.size();j++)p+=v[j];
                if(s==p)c+=2;
                else if(abs(s-p)==1)c+=1;
            }
        }
        return c;
        
    }
};",1454812174
Sk Najir,Najir581,926,3639,cpp,"#define IOS                      \
    ios::sync_with_stdio(false); \
    cin.tie(0);                  \
    cout.tie(0);

// pre_define
#define all(a) (a).begin(), (a).end()
#define rall(a) (a).rbegin(), (a).rend()

// shortcut type
typedef long long ll;
typedef long double ld;
typedef vector<int> vi;
typedef vector<vi> vii;
typedef vector<ll> vl;
typedef vector<vl> vll;
typedef pair<int, int> pi;
typedef pair<ll, ll> pl;

// Constants
const int MOD = 1e9 + 7;

//                                       Sk Najir

class Solution {
public:
    bool isZeroArray(vector<int>& v, vector<vector<int>>& q) {
        int n=v.size();
        vi pre(n,0);
        for(auto it:q){
            pre[it[0]]--;
            if(it[1]!=n-1)pre[it[1]+1]++;
        }
        ll sm=0;
        for(int i=0;i<n;i++){
            sm+=pre[i];
            v[i]=v[i]+sm;
            
        }
        for(auto it:v)if(it>0)return 0;
        return 1;
    
    }
};",1454822825
Sk Najir,Najir581,926,3643,cpp,"#define all(a) (a).begin(), (a).end()
#define rall(a) (a).rbegin(), (a).rend()

// shortcut type
typedef long long ll;
typedef long double ld;
typedef vector<int> vi;
typedef vector<vi> vii;
typedef vector<ll> vl;
typedef vector<vl> vll;
typedef pair<int, int> pi;
typedef pair<ll, ll> pl;

// Constants
const int MOD = 1e9 + 7;
template <typename T>
class SegmentTree {
public:
    SegmentTree() {}
    SegmentTree(int n) {
        this->n = n;
        seg.resize(4 * n, 0);
        lazy.resize(4 * n, 0);
    }
    SegmentTree(std::vector<T>& tem) {
        n = tem.size();
        seg.resize(4 * n, 0);
        lazy.resize(4 * n, 0);
        build(0, 0, n - 1, tem);
    }

    T query(int leftRange, int rightRange) {
        return query(0, 0, n - 1, leftRange, rightRange);
    }

    void update(int leftRange, int rightRange, T UpVal) {
        update(0, 0, n - 1, leftRange, rightRange, UpVal);
    }
    
    T Nodevalue(int ind) {
        return value(0, 0, n - 1, ind);
    }

private:
    std::vector<T> seg;
    std::vector<T> lazy;
    int n;

    void propagate(int ind, int start, int end) {
        if (lazy[ind] != 0) {
            seg[ind] += lazy[ind];
            if (start != end) {
                lazy[ind * 2 + 1] += lazy[ind];
                lazy[ind * 2 + 2] += lazy[ind];
            }
            lazy[ind] = 0;
        }
    }

    void build(int TreeIndex, int startTree, int endTree, std::vector<T>& tem) {
        if (startTree == endTree) {
            seg[TreeIndex] = tem[startTree];
            return;
        }
        int mid = (startTree + endTree) / 2;
        build(TreeIndex * 2 + 1, startTree, mid, tem);
        build(TreeIndex * 2 + 2, mid + 1, endTree, tem);
        seg[TreeIndex] = std::max(seg[TreeIndex * 2 + 1], seg[TreeIndex * 2 + 2]);
    }

    T value(int TreeIndex, int startTree, int endTree, int index) {
        propagate(TreeIndex, startTree, endTree);
        if (startTree == endTree) {
            return seg[TreeIndex];
        }
        int mid = (startTree + endTree) / 2;
        if (index <= mid)
            return value(TreeIndex * 2 + 1, startTree, mid, index);
        return value(TreeIndex * 2 + 2, mid + 1, endTree, index);
    }

    T query(int ind, int leftTree, int rightTree, int leftRange, int rightRange) {
        propagate(ind, leftTree, rightTree);
        if (rightTree < leftRange || leftTree > rightRange)
            return std::numeric_limits<T>::min();
        if (leftRange <= leftTree && rightRange >= rightTree)
            return seg[ind];
        int mid = (leftTree + rightTree) / 2;
        return std::max(query(ind * 2 + 1, leftTree, mid, leftRange, rightRange),
                        query(ind * 2 + 2, mid + 1, rightTree, leftRange, rightRange));
    }

    void update(int ind, int leftTree, int rightTree, int l, int r, T val) {
        propagate(ind, leftTree, rightTree);
        if (l > rightTree || r < leftTree)
            return;
        if (leftTree >= l && rightTree <= r) {
            seg[ind] += val;
            if (leftTree != rightTree) {
                lazy[ind * 2 + 1] += val;
                lazy[ind * 2 + 2] += val;
            }
            return;
        }
        int mid = (leftTree + rightTree) / 2;
        update(ind * 2 + 1, leftTree, mid, l, r, val);
        update(ind * 2 + 2, mid + 1, rightTree, l, r, val);
        seg[ind] = std::max(seg[ind * 2 + 1], seg[ind * 2 + 2]);
    }
};

class Solution {
public:
    int minZeroArray(vector<int>& v, vector<vector<int>>& q) {
        
         SegmentTree<int>seg(v);
        if(seg.query(0,v.size()-1)<=0)return 0;
        for(int i=0;i<q.size();i++){
            seg.update(q[i][0],q[i][1],-q[i][2]);
            if(seg.query(0,v.size()-1)<=0)return i+1;
        }
        
        return -1;
    }
};",1454846787
ninja_master2002,ninja_master2002,928,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int n=nums.size();
        vector<int>pre(n);
        pre[0]=nums[0];
        for(int i=1;i<n;i++){
            pre[i]=pre[i-1]+nums[i];
        }
        int ans=0;
        for(int i=0;i<n;i++){
            if(nums[i]==0){
                int left=(i==0 ? 0 : pre[i-1]);
                int right = (i==n-1 ? 0 : pre[n-1]-pre[i]);
                if(left==right)ans+=2;
                else if(abs(left-right)==1)ans++;
            }
        }
        return ans;
    }
};",1454810002
ninja_master2002,ninja_master2002,928,3639,cpp,"#define ll int
template<class T, class U>
// T -> node, U->update.
struct Lsegtree{
    vector<T>st;
    vector<U>lazy;
    ll n;
    T identity_element;
    U identity_update;
 
    /*
        Definition of identity_element: the element I such that combine(x,I) = x
        for all x
 
        Definition of identity_update: the element I such that apply(x,I) = x
        for all x        
    */
 
    Lsegtree(ll n, T identity_element, U identity_update)
    {
        this->n = n;
        this->identity_element = identity_element;
        this->identity_update = identity_update;
        st.assign(4*n+5,identity_element);
        lazy.assign(4*n+5, identity_update);
    }
 
 
    T combine(T l, T r)
    {
        // change this function as required.
        //change on actually what we want
        T ans =max(l,r);
        return ans;
    }
    void buildUtil(ll v, ll tl, ll tr, vector<T>&a)
    {
        if(tl == tr)
        {
            st[v] = a[tl];
            return;
        }
        ll tm = (tl + tr)>>1;
        buildUtil(2*v + 1, tl, tm,a);
        buildUtil(2*v + 2,tm+1,tr,a);
        st[v] = combine(st[2*v + 1], st[2*v + 2]);
    }
 
    // change the following 2 functions, and you're more or less done.
    T apply(T curr, U upd, ll tl, ll tr)
    {
        T ans = upd;
        ans+=curr;
        
        // increment range by upd:
        // T ans =(tr - tl + 1)*upd;
        return ans;
    }
 
    U combineUpdate(U old_upd, U new_upd, ll tl, ll tr)
    {
        //3rd function we need to change
        U ans=old_upd;
        ans+=new_upd;
 
        return ans;
    }  
 
 
    void push_down(ll v, ll tl, ll tr)
    {
        //for the below line to work, make sure the ""=="" operator is defined for U.
        if(lazy[v] == identity_update)return;
        st[v] = apply(st[v], lazy[v], tl, tr);
        if(2*v + 1 <= 4*n)
        {
            ll tm = (tl + tr)>>1;
            lazy[2*v + 1] = combineUpdate(lazy[2*v+1], lazy[v], tl, tm);
            lazy[2*v + 2] = combineUpdate(lazy[2*v+2], lazy[v], tm+1,tr);            
        }
        lazy[v] = identity_update;
    }
    T queryUtil(ll v, ll tl, ll tr, ll l, ll r)//tl and tr is the range the current block of segtree is holding 
    {
        push_down(v,tl,tr);
        if(l > r)return identity_element;
        if(tr < l or tl > r)
        {
            return identity_element;
        }
        if(l <= tl and r >= tr)
        {
            return st[v];
        }
        ll tm = (tl + tr)>>1;
        return combine(queryUtil(2*v+1,tl,tm,l,r), queryUtil(2*v+2,tm+1,tr,l,r));
    }
 
    void updateUtil(ll v, ll tl, ll tr, ll l, ll r, U upd)
    {
        push_down(v,tl,tr); 
        if(tr < l or tl > r)return;
        if(tl >=l and tr <=r)
        {
            lazy[v] = combineUpdate(lazy[v],upd,tl,tr);
            push_down(v,tl,tr);
        }
        else
        {
            ll tm = (tl + tr)>>1;
            updateUtil(2*v+1,tl,tm,l,r,upd);
            updateUtil(2*v+2,tm+1,tr,l,r,upd);
            st[v] = combine(st[2*v + 1], st[2*v+2]);
        }
    }
    void build(vector<T>a)
    {
        assert( (ll)a.size() == n);
        buildUtil(0,0,n-1,a);
    }
    T query(ll l, ll r)
    {
        return queryUtil(0,0,n-1,l,r);
    }
    void update(ll l,ll r, U upd)
    {
        updateUtil(0,0,n-1,l,r,upd);
    }
};
class Solution {
public:
    const int N=-1e9;
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n=nums.size();
        // vector<ll>a(n);
        // for(int i=0;i<n;i++)a[i]=nums[i];
        Lsegtree<ll,ll>st(n,-N,0);
        st.build(nums);
        if(st.query(0,n-1)<=0)return true;
        int q=queries.size();
        for(int i=0;i<q;i++){
            ll l=queries[i][0],r=queries[i][1],val=1;
            st.update(l,r,-val);
            if(st.query(0,n-1)<=0)return true;
        }
        return false;
    }
};",1454839464
ninja_master2002,ninja_master2002,928,3643,cpp,"#define ll int
template<class T, class U>
// T -> node, U->update.
struct Lsegtree{
    vector<T>st;
    vector<U>lazy;
    ll n;
    T identity_element;
    U identity_update;
 
    /*
        Definition of identity_element: the element I such that combine(x,I) = x
        for all x
 
        Definition of identity_update: the element I such that apply(x,I) = x
        for all x        
    */
 
    Lsegtree(ll n, T identity_element, U identity_update)
    {
        this->n = n;
        this->identity_element = identity_element;
        this->identity_update = identity_update;
        st.assign(4*n+5,identity_element);
        lazy.assign(4*n+5, identity_update);
    }
 
 
    T combine(T l, T r)
    {
        // change this function as required.
        //change on actually what we want
        T ans =max(l,r);
        return ans;
    }
    void buildUtil(ll v, ll tl, ll tr, vector<T>&a)
    {
        if(tl == tr)
        {
            st[v] = a[tl];
            return;
        }
        ll tm = (tl + tr)>>1;
        buildUtil(2*v + 1, tl, tm,a);
        buildUtil(2*v + 2,tm+1,tr,a);
        st[v] = combine(st[2*v + 1], st[2*v + 2]);
    }
 
    // change the following 2 functions, and you're more or less done.
    T apply(T curr, U upd, ll tl, ll tr)
    {
        T ans = upd;
        ans+=curr;
        
        // increment range by upd:
        // T ans =(tr - tl + 1)*upd;
        return ans;
    }
 
    U combineUpdate(U old_upd, U new_upd, ll tl, ll tr)
    {
        //3rd function we need to change
        U ans=old_upd;
        ans+=new_upd;
 
        return ans;
    }  
 
 
    void push_down(ll v, ll tl, ll tr)
    {
        //for the below line to work, make sure the ""=="" operator is defined for U.
        if(lazy[v] == identity_update)return;
        st[v] = apply(st[v], lazy[v], tl, tr);
        if(2*v + 1 <= 4*n)
        {
            ll tm = (tl + tr)>>1;
            lazy[2*v + 1] = combineUpdate(lazy[2*v+1], lazy[v], tl, tm);
            lazy[2*v + 2] = combineUpdate(lazy[2*v+2], lazy[v], tm+1,tr);            
        }
        lazy[v] = identity_update;
    }
    T queryUtil(ll v, ll tl, ll tr, ll l, ll r)//tl and tr is the range the current block of segtree is holding 
    {
        push_down(v,tl,tr);
        if(l > r)return identity_element;
        if(tr < l or tl > r)
        {
            return identity_element;
        }
        if(l <= tl and r >= tr)
        {
            return st[v];
        }
        ll tm = (tl + tr)>>1;
        return combine(queryUtil(2*v+1,tl,tm,l,r), queryUtil(2*v+2,tm+1,tr,l,r));
    }
 
    void updateUtil(ll v, ll tl, ll tr, ll l, ll r, U upd)
    {
        push_down(v,tl,tr); 
        if(tr < l or tl > r)return;
        if(tl >=l and tr <=r)
        {
            lazy[v] = combineUpdate(lazy[v],upd,tl,tr);
            push_down(v,tl,tr);
        }
        else
        {
            ll tm = (tl + tr)>>1;
            updateUtil(2*v+1,tl,tm,l,r,upd);
            updateUtil(2*v+2,tm+1,tr,l,r,upd);
            st[v] = combine(st[2*v + 1], st[2*v+2]);
        }
    }
    void build(vector<T>a)
    {
        assert( (ll)a.size() == n);
        buildUtil(0,0,n-1,a);
    }
    T query(ll l, ll r)
    {
        return queryUtil(0,0,n-1,l,r);
    }
    void update(ll l,ll r, U upd)
    {
        updateUtil(0,0,n-1,l,r,upd);
    }
};

class Solution {
    const int N=-1e9;
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n=nums.size();
        // vector<ll>a(n);
        // for(int i=0;i<n;i++)a[i]=nums[i];
        Lsegtree<ll,ll>st(n,-N,0);
        st.build(nums);
        if(st.query(0,n-1)<=0)return 0;
        int q=queries.size();
        for(int i=0;i<q;i++){
            ll l=queries[i][0],r=queries[i][1],val=queries[i][2];
            st.update(l,r,-val);
            if(st.query(0,n-1)<=0)return i+1;
        }
        return -1;
    }
};",1454836025
sainath2003r,sainath2003r,929,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int totalSum = 0;
        for(int i = 0;i<nums.size();i++){
            totalSum += nums[i];
        }
        
        int currSum = 0;
        int ans = 0;
        for(int i = 0;i<nums.size();i++){
            currSum += nums[i];
            if(nums[i] == 0){
                if(currSum == (totalSum - currSum)){
                    ans += 2;
                }
                if(abs(totalSum - 2 * currSum) == 1){
                    ans += 1;
                }
            }
        }
        
        return ans;
    }
};",1454820851
sainath2003r,sainath2003r,929,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        vector<int> arr(n,0);
        for(int i = 0;i<queries.size();i++){
            int x = queries[i][0], y = queries[i][1];
            arr[x] += 1;
            if((y+1) <n) arr[y+1] -= 1; 
        }
        for(int i = 1;i<n;i++){
            arr[i] += arr[i-1];
        }
        
        for(int i = 0;i<n;i++){
            if(arr[i] < nums[i]){
                return false;
            }
        }
        
        return true;
    }
};",1454838277
sainath2003r,sainath2003r,929,3643,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries,int k) {
        int n = nums.size();
        vector<int> arr(n,0);
        for(int i = 0;i<k;i++){
            int x = queries[i][0], y = queries[i][1], val = queries[i][2];
            arr[x] += val;
            if((y+1) <n) arr[y+1] -= val; 
        }
        for(int i = 1;i<n;i++){
            arr[i] += arr[i-1];
        }
        
        for(int i = 0;i<n;i++){
            if(arr[i] < nums[i]){
                return false;
            }
        }
        
        return true;
    }
    
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int s = 0 , e = queries.size();
        int ans = -1;
        while(s<=e){
            int mid = (s+e)/2;
            if(isZeroArray(nums,queries,mid)){
                ans = mid;
                e = mid-1;
            }else{
                s = mid + 1;
            }
        }
        return ans;
    }
};",1454854160
Amit Pandey,pandey__amit,930,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int n=nums.size();
        int total=0,sum=0,cnt=0;
        for(auto it:nums) total+=it;
        // cout<<total<<""\n"";
        for(int i=0;i<n;i++){
            sum+=nums[i];
            // cout<<sum<<"" "";
            if(nums[i]==0){
                if(sum == total-sum){
                    cnt+=2;
                }
                else if(abs(total-2*sum)==1){
                    cnt+=1;
                }
            }
        }
        return cnt;
    }
};",1454815898
Amit Pandey,pandey__amit,930,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        bool f=1;
        int n=nums.size();
        vector<long long> arr(n+1,0);
        for(auto it:queries){
            arr[it[0]]-=1;
            arr[it[1]+1]+=1;
        }
        for(int i=1;i<=n;i++){
            arr[i]+=arr[i-1];
        }
        for(int i=0;i<n;i++){
            if(nums[i]+arr[i]>0){
                f=0;
            }
        }
        return f;
    }
};",1454827928
Amit Pandey,pandey__amit,930,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int k=queries.size();
        int n=nums.size();
        int cnt0=count(nums.begin(),nums.end(),0);
        if(cnt0==n){
            return 0;
        }
        long long low=1,high=k,ans=-1,mid;
        while(low<=high){
            mid=(low+high)/2;
            vector<long long> arr(n+1,0);
            bool f=1;
            for(int i=0;i<mid;i++){
                arr[queries[i][0]]-=queries[i][2];
                arr[queries[i][1]+1]+=queries[i][2];
            }
            for(int i=1;i<=n;i++){
                arr[i]+=arr[i-1];
            }
            for(int i=0;i<n;i++){
                if(nums[i]+arr[i]>0){
                    f=0;
                }
            }
            if(f){
                ans=mid;
                high=mid-1;
            }
            else{
                low=mid+1;
            }
        }
        return ans;
    }
};",1454846860
locus,flyinglemonjx,931,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        n = len(nums)

        def simulate(start, direction):
            arr = nums[:]
            curr = start
            while 0 <= curr < n:
                if arr[curr] == 0:
                    curr += direction
                else:
                    arr[curr] -= 1
                    direction *= -1
                    curr += direction
            return all(x == 0 for x in arr)

        ans = 0
        for i in range(n):
            if nums[i] == 0:
                ans += simulate(i, 1) + simulate(i, -1)
        return ans",1454807430
locus,flyinglemonjx,931,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        """"""
        greedy，就是每一次都對queries減。直到等於0
        檢查最後是不是都是0
        問題是每做一次就要n，總共要n^2
        
        可以用""有多少魔法""來紀錄曲線圖
        """"""
        def sol1():
            n = len(nums)
            diff = [0] * (n + 1)

            for l, r in queries:
                diff[l] += 1
                diff[r + 1] -= 1

            prefix_sum = 0
            for i in range(n):
                prefix_sum += diff[i]
                if nums[i] > prefix_sum:
                    return False

            return True
        return sol1()",1454820923
locus,flyinglemonjx,931,3643,python3,"class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        def sol1():
            n = len(nums)
            if sum(nums) == 0:
                return 0
            
            diff = [0] * (n + 2)

            idx = 0
            k = 0
            for l, r, v in queries:
                k += 1

                if r < idx:
                    continue

                l = max(l, idx)
                diff[l] += v
                diff[r + 1] -= v
                while idx < n and diff[idx] >= nums[idx]:
                    diff[idx+1] += diff[idx]
                    idx += 1
                
                if idx == n:
                    return k
            return -1

        return sol1()",1454846879
Prajwal Shah,Pajju_0330,932,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int n = nums.size();
        int tot = 0;
        for(auto &i: nums) tot += i;
        int sum = 0, ans = 0;
        for(int i = 0; i < n; ++i){
            if(nums[i] == 0){
                if(sum == (tot -  sum)) ans += 2;
                else if(sum == (tot - sum + 1)) ans++;
                else if(sum  + 1 == (tot - sum)) ans++;
            }
            sum += nums[i];
        }
        return ans;
    }
};",1454810611
Prajwal Shah,Pajju_0330,932,3639,cpp,"class Solution {
public:
    const int MX = 1e5 + 5;
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        vector<int>diff(MX,0);
        for(auto &i: queries){
            diff[i[0]]++; diff[i[1] + 1]--;
        }
        for(int i = 1; i  < MX; ++i){
            diff[i] += diff[i-1];
        }
        for(int i = 0; i < n; ++i){
            if(nums[i] > diff[i]) return false;
        }
        return true;
    }
};",1454821051
Prajwal Shah,Pajju_0330,932,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& q) {
        int n = nums.size();
        auto solveForK = [&](int k){
            vector<int>diff(n + 5,0); 
            for(int i = 0; i < k; ++i){
                diff[q[i][0]]+=q[i][2]; 
                diff[q[i][1] + 1]-=q[i][2];
            }  
            for(int i = 1; i  <= n; ++i) diff[i] += diff[i-1];
            for(int i = 0; i < n; ++i){
                if(nums[i] > diff[i]) return false;
            }
            return true;
        };
        int qu = q.size();
        if(solveForK(qu) == false) return -1;
        int low = 0, high = qu;
        int ans  =qu;
        while(low <= high){
            int mid = low + (high - low)/2;
            if(solveForK(mid)){
                ans = mid;
                high = mid - 1;
            }else{
                low = mid + 1;
            }
        }
        return ans;
    }
};",1454832111
Vansh Agrawal,vansh_ag,933,3616,java,"class Solution {
    public int countValidSelections(int[] nums) {
        int n = nums.length;
        int validSelections = 0;

        for (int start = 0; start < n; start++) {
            if (nums[start] != 0) continue;

            for (int direction = -1; direction <= 1; direction += 2) {
                int[] temp = nums.clone();
                int curr = start;
                int dir = direction;

                while (curr >= 0 && curr < n) {
                    if (temp[curr] == 0) {
                        curr += dir;
                    } else {
                        temp[curr]--;
                        dir = -dir;
                        curr += dir;
                    }
                }

                boolean allZero = true;
                for (int num : temp) {
                    if (num != 0) {
                        allZero = false;
                        break;
                    }
                }

                if (allZero) {
                    validSelections++;
                }
            }
        }

        return validSelections;
    }
}",1454805505
Vansh Agrawal,vansh_ag,933,3639,java,"class Solution {
    public boolean isZeroArray(int[] nums, int[][] queries) {
        int n = nums.length;
        int[] arr = new int[n + 1];
        
        for (int[] query : queries) {
            int l = query[0];
            int r = query[1];
            arr[l]++;
            if (r + 1 < n) arr[r + 1]--;
        }
        
        int sum = 0;
        for (int i = 0; i < n; i++) {
            sum += arr[i];
            if (nums[i] > sum)  return false;
        }
        return true;
    }
}",1454825669
Vansh Agrawal,vansh_ag,933,3643,java,"class Solution {
    private boolean canProcessFirstKQueries(int[] nums, int[][] queries, int k) {
        int n = nums.length;
        int[] diff = new int[n + 1];

        for (int i = 0; i < k; i++) {
            int l = queries[i][0], r = queries[i][1], val = queries[i][2];
            diff[l] -= val;
            if (r + 1 < n) {
                diff[r + 1] += val;
            }
        }

        int sum = 0;
        for (int i = 0; i < n; i++) {
            sum += diff[i];
            if (nums[i] + sum > 0) return false;
        }
        return true;
    }

    
    public int minZeroArray(int[] nums, int[][] queries) {
        int n = nums.length;
        int[] diff = new int[n + 1];
        int[] a = nums.clone();

        for (int i = 0; i < n; i++) diff[i] = nums[i];
        int low = 0, high = queries.length, ans = -1;

        while (low <= high) {
            int mid = low + (high - low) / 2;
            if (canProcessFirstKQueries(a, queries, mid)) {
                ans = mid;
                high = mid - 1;
            } else low = mid + 1;
        }
        return ans;
    }
}",1454846989
jacobj2,jacobj2,936,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        res = 0
        for i in range(len(nums)):
            if nums[i]!=0:
                continue
            curr = [x for x in nums]
            p = i
            right = True
            while p>=0 and p < len(curr):
                if curr[p]==0:
                    if right:
                        p+=1
                    else:
                        p-=1
                else:
                    curr[p]-=1
                    right^=1
                    if right:
                        p+=1
                    else:
                        p-=1
            if all(x==0 for x in curr):
                res+=1
            curr = [x for x in nums]
            p = i
            right = False
            while p>=0 and p < len(curr):
                if curr[p]==0:
                    if right:
                        p+=1
                    else:
                        p-=1
                else:
                    curr[p]-=1
                    right^=1
                    if right:
                        p+=1
                    else:
                        p-=1
            if all(x==0 for x in curr):
                res+=1
        return res
            ",1454809170
jacobj2,jacobj2,936,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        sweep = [0]*len(nums)
        for i in range(len(queries)):
            sweep[queries[i][0]]+=1
            if queries[i][1] + 1 < len(sweep):
                sweep[queries[i][1]+1]-=1
        for i in range(1,len(sweep)):
            sweep[i]+=sweep[i-1]
        for i in range(len(nums)):
            if nums[i] > sweep[i]:
                return False
        return True",1454811540
jacobj2,jacobj2,936,3643,python3,"class SegmentTree:
    def __init__(self, nums):
        self.nums = nums
        self.tree = [0]*(4*len(nums))
        self.lazy = [0]*(4*len(nums))
        self.build_tree(0,0,len(nums)-1)
    def build_tree(self, node, left, right):
        if left==right:
            self.tree[node] = self.nums[left]
            return
        mid = (left+right)>>1
        self.build_tree(2*node+1,left,mid)
        self.build_tree(2*node+2,mid+1,right)
        self.tree[node] = max(self.tree[2*node+2], self.tree[2*node+1])
    def upd(self, node, left, right, arrLeft, arrRight, val):
        if self.lazy[node] > 0:
            self.tree[node] = max(self.tree[node] - self.lazy[node], 0)
            if arrLeft!=arrRight:
                self.lazy[2*node+1] += self.lazy[node]
                self.lazy[2*node+2] += self.lazy[node]
            self.lazy[node] = 0
        if arrLeft > right or arrRight < left:
            return
        if arrLeft >= left and arrRight<=right:
            self.tree[node] = max(self.tree[node] - val, 0)
            if arrLeft!=arrRight:
                self.lazy[2*node+1] += val
                self.lazy[2*node+2] += val
            return
        mid = (arrLeft + arrRight)>>1
        self.upd(2*node+1,left,right,arrLeft,mid,val)
        self.upd(2*node+2,left,right,mid+1,arrRight,val)
        self.tree[node] = max(self.tree[2*node+1],self.tree[2*node+2])
class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        if all(x==0 for x in nums):
            return 0
        segTree = SegmentTree(nums)
        #print(segTree.tree[0])
        for i in range(len(queries)):
            l,r,v = queries[i]
            segTree.upd(0,l,r,0,len(nums)-1,v)
            if segTree.tree[0]==0:
                return i + 1
        return -1
        ",1454832232
Hridyansh Gupta,hridyansh28,937,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int n=nums.size();
     int c=0;
        for(int i=0;i<n;i++){
            if(nums[i]==0){
                int sum=0;
                for(int j=0;j<=i-1;j++){
                    sum+=nums[j];
                }
                int sum2=0;
                for(int j=i+1;j<n;j++)sum2+=nums[j];
                if(abs(sum2-sum)==1)c++;
                else if(sum2==sum)c=c+2;
            }
        }
        return c;
    }
};",1454812193
Hridyansh Gupta,hridyansh28,937,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n=nums.size();
        vector<int> v(n+1);
        int nn=queries.size();
        for(int i=0;i<nn;i++){
            v[queries[i][0]]++;
            v[queries[i][1]+1]--;
        }
        int sum=0;
        for(int i=0;i<=n;i++){
            sum+=v[i];
            v[i]=sum;
        }
        for(int i=0;i<n;i++){
            if(nums[i]!=0 and v[i]<nums[i]){
                return false;
            }
        }return true;
    }
};",1454822056
Hridyansh Gupta,hridyansh28,937,3643,cpp,"class Solution {
public:

    int check(vector<int>& nums, vector<vector<int>>& queries,int n,int nn,int m){
        vector<int> v(n+1);
        for(int i=0;i<m;i++){
            v[queries[i][0]]+=queries[i][2];
            v[queries[i][1]+1]-=queries[i][2];
        }
        int sum=0;
        for(int i=0;i<n;i++){
            sum+=v[i];
            if(nums[i]>0 and sum<nums[i])return 0;
        }
        return 1;
    }
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n=nums.size();
        int nn=queries.size();
        int l=0;int r=nn;int ans=-1;
        while(l<=r){
            int m=(l+r)/2;
            if(check(nums,queries,n,nn,m)){
                r=m-1;
                ans=m;
            }
            else l=m+1;
        }
        return ans;
    }
};",1454847079
sarayu_sathyam,sarayu_sathyam,939,3616,python,"class Solution(object):
    def countValidSelections(self, nums):
        def simulate(start, direction):
            n = len(nums)
            curr = start
            arr = nums[:]  # Make a copy of nums to simulate the process
            while 0 <= curr < n:
                if arr[curr] == 0:
                    curr += direction  # Move in the current direction
                else:
                    arr[curr] -= 1
                    direction *= -1  # Reverse the direction
                    curr += direction
            return all(x == 0 for x in arr)

        n = len(nums)
        count = 0
        for i in range(n):
            if nums[i] == 0:
            # Check both directions from index i
                if simulate(i, -1):  # Moving left
                    count += 1
                if simulate(i, 1):   # Moving right
                    count += 1
        return count        
        ",1454821054
sarayu_sathyam,sarayu_sathyam,939,3639,python,"class Solution(object):
    def isZeroArray(self,nums, queries):
        n = len(nums)
        diff = [0] * (n + 1)  

        for li, ri in queries:
            diff[li] += 1
            if ri + 1 < n:
                diff[ri + 1] -= 1

        decrements = [0] * n
        current_decrement = 0
        for i in range(n):
            current_decrement += diff[i]
            decrements[i] = current_decrement

        for i in range(n):
            if nums[i] > decrements[i]:  
                return False

        return True
",1454832706
sarayu_sathyam,sarayu_sathyam,939,3643,python,"class Solution(object):
    def minZeroArray(self, nums, queries):
        n = len(nums)
        diff = [0] * (n + 1) 
        def canZeroArray(k):
            decrements = [0] * (n + 1)
        
            for i in range(k):
                li, ri, vali = queries[i]
                decrements[li] += vali
                if ri + 1 < n:
                    decrements[ri + 1] -= vali
            cumulative = 0
            for i in range(n):
                cumulative += decrements[i]
                if nums[i] > cumulative: 
                    return False
        
            return True
        if all(num == 0 for num in nums):
            return 0
        left, right = 1, len(queries)
        result = -1
        while left <= right:
            mid = (left + right) // 2
            if canZeroArray(mid):
                result = mid  
                right = mid - 1
            else:
                left = mid + 1

        return result

        ",1454847155
Remineva,Remineva,940,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        pre = [0]
        for num in nums:
            pre.append(pre[-1] + num)
        suf = [0]
        for num in reversed(nums):
            suf.append(suf[-1] + num)
        suf = suf[::-1]
        res = 0
        n = len(nums)
        for i in range(n):
            if nums[i] == 0:
                if pre[i] == suf[i]:
                    res += 2
                elif abs(pre[i] - suf[i]) == 1:
                    res += 1
        return res",1454814501
Remineva,Remineva,940,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        n = len(nums)
        diff = [0] * (n + 1)
        for i, j in queries:
            diff[i] += 1
            diff[j+1] -= 1
        ls = list(accumulate(diff))
        for i in range(n):
            if nums[i] > ls[i]:
                return False
        return True",1454819690
Remineva,Remineva,940,3643,python3,"class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        n = len(nums)
        
        def check(k):
            diff = [0] * (n + 1)
            for idx in range(k):
                i, j, v = queries[idx]
                diff[i] += v
                diff[j+1] -= v
            ls = list(accumulate(diff))
            for i in range(n):
                if nums[i] > ls[i]:
                    return False
            return True
        
        cnt = 0
        for num in nums:
            cnt += num
        if cnt == 0:
            return 0
        
        if not check(len(queries)):
            return -1
        l = 0
        r = len(queries)
        while l < r:
            m = (l + r) // 2
            if check(m):
                r = m
            else:
                l = m + 1
        return l",1454847163
Yash Garg,KINGZIE,941,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
         int ans = 0;
        
         int sum = 0;
        int num = 0;
        
        for(int i = 0;i<nums.size();i++){
            sum += nums[i];
        }
        for(int i = 0;i<nums.size();i++){
           num += nums[i];
            sum -= nums[i];
            if(nums[i] == 0 && (sum == num)){
                 ans += 2;
            }
            else if(nums[i] == 0 && abs(sum - num) == 1){
                 ans++;
            }
        }
     
      return ans;
    }
};",1454812911
Yash Garg,KINGZIE,941,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& q) {
         int n = nums.size();
         vector<int>diff(n+1,0);
        
         
        for(int i = 0;i<q.size();i++){
            diff[q[i][0]]++;
            diff[q[i][1]+1]--;
        }
        for(int i = 0;i<n;i++){
            if(i != 0){
                diff[i] += diff[i-1];
            }
            if(diff[i] < nums[i])
               return false;
        }
      return true;
    }
};",1454821866
Yash Garg,KINGZIE,941,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& q) {
         int n = nums.size();
        int low = 0;
        int high = q.size();
        int ans = -1;
        
        while(low <= high){ 
            int mid = (low + high)/2;
            vector<int>diff(n+1,0);
            int flag = 0;
            for(int i = 0;i<mid;i++){
                diff[q[i][0]] += q[i][2];
                diff[q[i][1]+1] -= q[i][2];
            }
            for(int i = 0;i<n;i++){
                if(i != 0){
                    diff[i] += diff[i-1];
                }
                if(diff[i] < nums[i]){
                     flag = 1;
                    break;
                }     
            }
           if(flag == 1){
              low = mid + 1;
           }
            else{
                 ans = mid;
                high = mid - 1;
            }
         }
      return ans;
    }
};",1454832400
Anton,AntonPolyansky,942,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        total = sum(nums)
        def simulate(i,arr,dir,total):
            while i >= 0 and i < len(arr):
                if arr[i] > 0:
                    arr[i] -= 1
                    dir = 1 - dir
                    total -= 1
                    if dir == 0:
                        i += 1
                    else: 
                        i -= 1
                    continue
                while i < len(arr) and i>= 0 and arr[i] == 0:
                    if dir == 0:
                        i += 1
                    else: 
                        i -= 1
            
            return total == 0

        answ = 0
        for i in range(len(nums)):
            if nums[i] == 0:
                if simulate(i,nums[::],0,total): answ += 1
                if simulate(i,nums[::],1,total): answ += 1    
        return answ
            ",1454817252
Anton,AntonPolyansky,942,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        d = defaultdict(int)
        for l, r in queries:
            d[l] += 1
            d[r + 1] -= 1
        cur = 0
        for i in range(len(nums)):
            cur += d[i]
            if cur < nums[i]:
                return False
        return True
        ",1454840614
Anton,AntonPolyansky,942,3643,python3,"class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        d = defaultdict(list)
        for i, (l, r, val) in enumerate(queries):
            d[l].append((val, i))
            d[r + 1].append((-val, i))
        
        def check(j):
            cur = 0
            for i in range(len(nums)):
                for val, idx in d[i]:
                    if idx < j:
                        cur += val
                if nums[i] > cur:
                    return False
            return True

        left = 0
        right = len(queries)
        k = float('inf')
        while left <= right:
            mid = (left + right) >> 1
            if check(mid):
                k = min(k,mid)
                right = mid - 1
            else:
                left = mid + 1
        return -1 if k == float('inf') else k
                    
                    ",1454854495
sajid_fuuast,sajid_fuuast,944,3616,java,"class Solution {
    public int countValidSelections(int[] nums) {
         int n = nums.length;
        int count = 0;

        
        for (int i = 0; i < n; i++) {
            if (nums[i] == 0) {
              
                if (canMakeAllZero(nums, i, -1)) {
                    count++;
                }
               
                if (canMakeAllZero(nums, i, 1)) {
                    count++;
                }
            }
        }

        return count;
    }




private boolean canMakeAllZero(int[] nums, int start, int direction) {
        int n = nums.length;
        boolean[] visited = new boolean[n];
        int curr = start;

        
        int[] temp = nums.clone();

        while (curr >= 0 && curr < n) {
            if (temp[curr] == 0) {
              
                curr += direction;
            } else if (temp[curr] > 0) {
               
                temp[curr]--;

               
                direction *= -1;

             
                curr += direction;
            }

           
            if (curr >= 0 && curr < n) {
                visited[curr] = true;
            }
        }

     
        for (int value : temp) {
            if (value > 0) {
                return false;
            }
        }

        return true;
    }
    
}",1454813349
sajid_fuuast,sajid_fuuast,944,3639,java,"class Solution {
    public boolean isZeroArray(int[] nums, int[][] queries) {
       int n = nums.length;
        int[] dec = new int[n + 1]; 

        
        for (int[] query : queries) {
            int l = query[0];
            int r = query[1];
            --dec[l]; 
            if (r + 1 < n) {
                ++dec[r + 1]; 
            }
        }

        
        int[] tDec = new int[n];
        int cDec = 0;
        for (int i = 0; i < n; i++) {
            cDec += dec[i];
            tDec[i] = cDec;
        }

      
        for (int i = 0; i < n; i++) {
            if (nums[i] + tDec[i] > 0) {
                return false; 
            }
        }

        return true;   
    }
}",1454825647
sajid_fuuast,sajid_fuuast,944,3643,java,"class Solution {
    public int minZeroArray(int[] nums, int[][] queries) {
   int lt = 0, rt = queries.length;
        int n = nums.length;

        
        while (lt < rt) {
            int md = lt + (rt - lt) / 2;

           
            int[] dec = new int[n + 1]; 

           
            for (int i = 0; i < md; i++) {
                int l = queries[i][0];
                int r = queries[i][1];
                int val = queries[i][2];

                dec[l] -= val; 
                if (r + 1 < n) {
                    dec[r + 1] += val; 
                }
            }

           
            
            int cuDec = 0;
            boolean canZeroArray = true; 

            for (int i = 0; i < n; i++) {
                cuDec += dec[i];
               
                
                if (nums[i] + cuDec > 0) {
                    canZeroArray = false; 
                    
                    break; 
                }
            }

           
            if (canZeroArray) {
                rt = md; 
            } else {
                lt = md + 1; 
            }
        }

        
        if (lt == queries.length) {
          
            
            int[] dec = new int[n + 1]; 
            

         
            for (int i = 0; i < lt; i++) {
                int l = queries[i][0];
                int r = queries[i][1];
                int vl = queries[i][2];

                dec[l] -= vl; 
                if (r + 1 < n) {
                    dec[r + 1] += vl; 
                }
            }

           int cuDec = 0; 
            
            for (int i = 0; i < n; i++) {
                cuDec += dec[i];
                if (nums[i] + cuDec > 0) {
                    return -1; 
                    
                }
            }
        }

        return lt;     
    }
}",1454854522
Bipul Kumar,211FA04639,948,3616,python3,"
import math
import cmath

def add_two_numbers(a, b):
    return a + b

def square_root(num):
    return math.sqrt(num)

def area_of_triangle(base, height):
    return 0.5 * base * height

def quadratic_roots(a, b, c):
    discriminant = b**2 - 4*a*c
    root1 = (-b + cmath.sqrt(discriminant)) / (2 * a)
    root2 = (-b - cmath.sqrt(discriminant)) / (2 * a)
    return root1, root2

def is_armstrong_number(num):
    digits = list(map(int, str(num)))
    power = len(digits)
    return num == sum([digit ** power for digit in digits])

def is_prime_number(num):
    if num <= 1:
        return False
    for i in range(2, int(math.sqrt(num)) + 1):
        if num % i == 0:
            return False
    return True

def is_even_or_odd(num):
    return ""Even"" if num % 2 == 0 else ""Odd""

def are_coprime(a, b):
    return math.gcd(a, b) == 1

def is_perfect_number(num):
    divisors_sum = sum([i for i in range(1, num) if num % i == 0])
    return divisors_sum == num

def is_lucky_number(num):
    sieve = [True] * (num + 1)
    sieve[0] = sieve[1] = False
    for start in range(2, int(num**0.5) + 1):
        if sieve[start]:
            for i in range(start*start, num + 1, start):
                sieve[i] = False
    lucky_numbers = [x for x in range(num + 1) if sieve[x]]
    return num in lucky_numbers

def factorial(num):
    if num == 0:
        return 1
    return num * factorial(num - 1)

def fibonacci(n):
    if n <= 0:
        return []
    elif n == 1:
        return [0]
    elif n == 2:
        return [0, 1]
    fib_seq = [0, 1]
    for i in range(2, n):
        fib_seq.append(fib_seq[-1] + fib_seq[-2])
    return fib_seq

def is_palindrome_number(num):
    return str(num) == str(num)[::-1]

def is_palindrome_string(s):
    return s == s[::-1]

def gcd(a, b):
    return math.gcd(a, b)

def is_prime(n):
    if n <= 1:
        return False
    if n <= 3:
        return True
    if n % 2 == 0 or n % 3 == 0:
        return False
    i = 5
    while i * i <= n:
        if n % i == 0 or n % (i + 2) == 0:
            return False
        i += 6
    return True

def is_armstrong(number):
    num_str = str(number)
    num_digits = len(num_str)
    sum_of_powers = sum(int(digit) ** num_digits for digit in num_str)
    return sum_of_powers == number

def gcd(a, b):
    while b != 0:
        a, b = b, a % b
    return a

def are_coprime(num1, num2):
    return gcd(num1, num2) == 1

def is_perfect_number(n):
    if n < 2:
        return False
    sum_of_divisors = 1
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            sum_of_divisors += i
            if i != n // i:
                sum_of_divisors += n // i
    return sum_of_divisors == n

def factorial(n):
    if n < 0:
        return ""Factorial is not defined for negative numbers.""
    if n == 0 or n == 1:
        return 1
    result = 1
    for i in range(2, n + 1):
        result *= i
    return result

def fibonacci_series(n):
    if n <= 0:
        return ""Number of terms must be a positive integer.""
    if n == 1:
        return [0]
    if n == 2:
        return [0, 1]
    
    series = [0, 1]
    for i in range(2, n):
        next_term = series[-1] + series[-2]
        series.append(next_term)
    return series

class Solution:
    def countValidSelections(self, nums: list[int]) -> int:
        def simulate(start_index, movement_direction):
            # Create a copy of nums to simulate without altering the original
            nums_copy = nums[:]
            current_position = start_index
            array_length = len(nums_copy)
            
            while 0 <= current_position < array_length:
                if nums_copy[current_position] == 0:
                    current_position += movement_direction
                else:
                    nums_copy[current_position] -= 1
                    movement_direction *= -1  # Reverse the direction
                    current_position += movement_direction
            
            # Check if all elements in nums_copy are zero
            return all(value == 0 for value in nums_copy)

        valid_selections_count = 0
        for index in range(len(nums)):
            if nums[index] == 0:
                # Check both directions for this starting position
                if simulate(index, -1):  # Moving left
                    valid_selections_count += 1
                if simulate(index, 1):  # Moving right
                    valid_selections_count += 1
        
        return valid_selections_count

    
    
    
    
    
import math
import cmath

def add_two_numbers(a, b):
    return a + b

def square_root(num):
    return math.sqrt(num)

def area_of_triangle(base, height):
    return 0.5 * base * height

def quadratic_roots(a, b, c):
    discriminant = b**2 - 4*a*c
    root1 = (-b + cmath.sqrt(discriminant)) / (2 * a)
    root2 = (-b - cmath.sqrt(discriminant)) / (2 * a)
    return root1, root2

def is_armstrong_number(num):
    digits = list(map(int, str(num)))
    power = len(digits)
    return num == sum([digit ** power for digit in digits])

def is_prime_number(num):
    if num <= 1:
        return False
    for i in range(2, int(math.sqrt(num)) + 1):
        if num % i == 0:
            return False
    return True

def is_even_or_odd(num):
    return ""Even"" if num % 2 == 0 else ""Odd""

def are_coprime(a, b):
    return math.gcd(a, b) == 1

def is_perfect_number(num):
    divisors_sum = sum([i for i in range(1, num) if num % i == 0])
    return divisors_sum == num

def is_lucky_number(num):
    sieve = [True] * (num + 1)
    sieve[0] = sieve[1] = False
    for start in range(2, int(num**0.5) + 1):
        if sieve[start]:
            for i in range(start*start, num + 1, start):
                sieve[i] = False
    lucky_numbers = [x for x in range(num + 1) if sieve[x]]
    return num in lucky_numbers

def factorial(num):
    if num == 0:
        return 1
    return num * factorial(num - 1)

def fibonacci(n):
    if n <= 0:
        return []
    elif n == 1:
        return [0]
    elif n == 2:
        return [0, 1]
    fib_seq = [0, 1]
    for i in range(2, n):
        fib_seq.append(fib_seq[-1] + fib_seq[-2])
    return fib_seq

def is_palindrome_number(num):
    return str(num) == str(num)[::-1]

def is_palindrome_string(s):
    return s == s[::-1]

def gcd(a, b):
    return math.gcd(a, b)

def is_prime(n):
    if n <= 1:
        return False
    if n <= 3:
        return True
    if n % 2 == 0 or n % 3 == 0:
        return False
    i = 5
    while i * i <= n:
        if n % i == 0 or n % (i + 2) == 0:
            return False
        i += 6
    return True

def is_armstrong(number):
    num_str = str(number)
    num_digits = len(num_str)
    sum_of_powers = sum(int(digit) ** num_digits for digit in num_str)
    return sum_of_powers == number

def gcd(a, b):
    while b != 0:
        a, b = b, a % b
    return a

def are_coprime(num1, num2):
    return gcd(num1, num2) == 1

def is_perfect_number(n):
    if n < 2:
        return False
    sum_of_divisors = 1
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            sum_of_divisors += i
            if i != n // i:
                sum_of_divisors += n // i
    return sum_of_divisors == n

def factorial(n):
    if n < 0:
        return ""Factorial is not defined for negative numbers.""
    if n == 0 or n == 1:
        return 1
    result = 1
    for i in range(2, n + 1):
        result *= i
    return result

def fibonacci_series(n):
    if n <= 0:
        return ""Number of terms must be a positive integer.""
    if n == 1:
        return [0]
    if n == 2:
        return [0, 1]
    
    series = [0, 1]
    for i in range(2, n):
        next_term = series[-1] + series[-2]
        series.append(next_term)
    return series",1454813928
Bipul Kumar,211FA04639,948,3639,python3,"
import math
import cmath

def add_two_numbers(a, b):
    return a + b

def square_root(num):
    return math.sqrt(num)

def area_of_triangle(base, height):
    return 0.5 * base * height

def quadratic_roots(a, b, c):
    discriminant = b**2 - 4*a*c
    root1 = (-b + cmath.sqrt(discriminant)) / (2 * a)
    root2 = (-b - cmath.sqrt(discriminant)) / (2 * a)
    return root1, root2

def is_armstrong_number(num):
    digits = list(map(int, str(num)))
    power = len(digits)
    return num == sum([digit ** power for digit in digits])

def is_prime_number(num):
    if num <= 1:
        return False
    for i in range(2, int(math.sqrt(num)) + 1):
        if num % i == 0:
            return False
    return True

def is_even_or_odd(num):
    return ""Even"" if num % 2 == 0 else ""Odd""

def are_coprime(a, b):
    return math.gcd(a, b) == 1

def is_perfect_number(num):
    divisors_sum = sum([i for i in range(1, num) if num % i == 0])
    return divisors_sum == num

def is_lucky_number(num):
    sieve = [True] * (num + 1)
    sieve[0] = sieve[1] = False
    for start in range(2, int(num**0.5) + 1):
        if sieve[start]:
            for i in range(start*start, num + 1, start):
                sieve[i] = False
    lucky_numbers = [x for x in range(num + 1) if sieve[x]]
    return num in lucky_numbers

def factorial(num):
    if num == 0:
        return 1
    return num * factorial(num - 1)

def fibonacci(n):
    if n <= 0:
        return []
    elif n == 1:
        return [0]
    elif n == 2:
        return [0, 1]
    fib_seq = [0, 1]
    for i in range(2, n):
        fib_seq.append(fib_seq[-1] + fib_seq[-2])
    return fib_seq

def is_palindrome_number(num):
    return str(num) == str(num)[::-1]

def is_palindrome_string(s):
    return s == s[::-1]

def gcd(a, b):
    return math.gcd(a, b)

def is_prime(n):
    if n <= 1:
        return False
    if n <= 3:
        return True
    if n % 2 == 0 or n % 3 == 0:
        return False
    i = 5
    while i * i <= n:
        if n % i == 0 or n % (i + 2) == 0:
            return False
        i += 6
    return True

def is_armstrong(number):
    num_str = str(number)
    num_digits = len(num_str)
    sum_of_powers = sum(int(digit) ** num_digits for digit in num_str)
    return sum_of_powers == number

def gcd(a, b):
    while b != 0:
        a, b = b, a % b
    return a

def are_coprime(num1, num2):
    return gcd(num1, num2) == 1

def is_perfect_number(n):
    if n < 2:
        return False
    sum_of_divisors = 1
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            sum_of_divisors += i
            if i != n // i:
                sum_of_divisors += n // i
    return sum_of_divisors == n

def factorial(n):
    if n < 0:
        return ""Factorial is not defined for negative numbers.""
    if n == 0 or n == 1:
        return 1
    result = 1
    for i in range(2, n + 1):
        result *= i
    return result

def fibonacci_series(n):
    if n <= 0:
        return ""Number of terms must be a positive integer.""
    if n == 1:
        return [0]
    if n == 2:
        return [0, 1]
    
    series = [0, 1]
    for i in range(2, n):
        next_term = series[-1] + series[-2]
        series.append(next_term)
    return series


class Solution:
    def isZeroArray(self, kasbf: list[int], kafkaewj: list[list[int]]) -> bool:
        daesu = len(kasbf)
        aodsibga = [0] * (daesu + 1)

        for faeofihb in kafkaewj:
            doiehf, aoeif = faeofihb[0], faeofihb[1]
            aodsibga[doiehf] -= 1
            if aoeif + 1 < daesu:
                aodsibga[aoeif + 1] += 1

        dgeb = 0
        for dsginb in range(daesu):
            dgeb += aodsibga[dsginb]
            kasbf[dsginb] += dgeb
            if kasbf[dsginb] > 0:
                return False

        return True

    
    
import math
import cmath

def add_two_numbers(a, b):
    return a + b

def square_root(num):
    return math.sqrt(num)

def area_of_triangle(base, height):
    return 0.5 * base * height

def quadratic_roots(a, b, c):
    discriminant = b**2 - 4*a*c
    root1 = (-b + cmath.sqrt(discriminant)) / (2 * a)
    root2 = (-b - cmath.sqrt(discriminant)) / (2 * a)
    return root1, root2

def is_armstrong_number(num):
    digits = list(map(int, str(num)))
    power = len(digits)
    return num == sum([digit ** power for digit in digits])

def is_prime_number(num):
    if num <= 1:
        return False
    for i in range(2, int(math.sqrt(num)) + 1):
        if num % i == 0:
            return False
    return True

def is_even_or_odd(num):
    return ""Even"" if num % 2 == 0 else ""Odd""

def are_coprime(a, b):
    return math.gcd(a, b) == 1

def is_perfect_number(num):
    divisors_sum = sum([i for i in range(1, num) if num % i == 0])
    return divisors_sum == num

def is_lucky_number(num):
    sieve = [True] * (num + 1)
    sieve[0] = sieve[1] = False
    for start in range(2, int(num**0.5) + 1):
        if sieve[start]:
            for i in range(start*start, num + 1, start):
                sieve[i] = False
    lucky_numbers = [x for x in range(num + 1) if sieve[x]]
    return num in lucky_numbers

def factorial(num):
    if num == 0:
        return 1
    return num * factorial(num - 1)

def fibonacci(n):
    if n <= 0:
        return []
    elif n == 1:
        return [0]
    elif n == 2:
        return [0, 1]
    fib_seq = [0, 1]
    for i in range(2, n):
        fib_seq.append(fib_seq[-1] + fib_seq[-2])
    return fib_seq

def is_palindrome_number(num):
    return str(num) == str(num)[::-1]

def is_palindrome_string(s):
    return s == s[::-1]

def gcd(a, b):
    return math.gcd(a, b)

def is_prime(n):
    if n <= 1:
        return False
    if n <= 3:
        return True
    if n % 2 == 0 or n % 3 == 0:
        return False
    i = 5
    while i * i <= n:
        if n % i == 0 or n % (i + 2) == 0:
            return False
        i += 6
    return True

def is_armstrong(number):
    num_str = str(number)
    num_digits = len(num_str)
    sum_of_powers = sum(int(digit) ** num_digits for digit in num_str)
    return sum_of_powers == number

def gcd(a, b):
    while b != 0:
        a, b = b, a % b
    return a

def are_coprime(num1, num2):
    return gcd(num1, num2) == 1

def is_perfect_number(n):
    if n < 2:
        return False
    sum_of_divisors = 1
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            sum_of_divisors += i
            if i != n // i:
                sum_of_divisors += n // i
    return sum_of_divisors == n

def factorial(n):
    if n < 0:
        return ""Factorial is not defined for negative numbers.""
    if n == 0 or n == 1:
        return 1
    result = 1
    for i in range(2, n + 1):
        result *= i
    return result

def fibonacci_series(n):
    if n <= 0:
        return ""Number of terms must be a positive integer.""
    if n == 1:
        return [0]
    if n == 2:
        return [0, 1]
    
    series = [0, 1]
    for i in range(2, n):
        next_term = series[-1] + series[-2]
        series.append(next_term)
    return series",1454848831
Bipul Kumar,211FA04639,948,3643,python3,"import math
import cmath

def add_two_numbers(a, b):
    return a + b

def square_root(num):
    return math.sqrt(num)

def area_of_triangle(base, height):
    return 0.5 * base * height

def quadratic_roots(a, b, c):
    discriminant = b**2 - 4*a*c
    root1 = (-b + cmath.sqrt(discriminant)) / (2 * a)
    root2 = (-b - cmath.sqrt(discriminant)) / (2 * a)
    return root1, root2

def is_armstrong_number(num):
    digits = list(map(int, str(num)))
    power = len(digits)
    return num == sum([digit ** power for digit in digits])

def is_prime_number(num):
    if num <= 1:
        return False
    for i in range(2, int(math.sqrt(num)) + 1):
        if num % i == 0:
            return False
    return True

def is_even_or_odd(num):
    return ""Even"" if num % 2 == 0 else ""Odd""

def are_coprime(a, b):
    return math.gcd(a, b) == 1

def is_perfect_number(num):
    divisors_sum = sum([i for i in range(1, num) if num % i == 0])
    return divisors_sum == num

def is_lucky_number(num):
    sieve = [True] * (num + 1)
    sieve[0] = sieve[1] = False
    for start in range(2, int(num**0.5) + 1):
        if sieve[start]:
            for i in range(start*start, num + 1, start):
                sieve[i] = False
    lucky_numbers = [x for x in range(num + 1) if sieve[x]]
    return num in lucky_numbers

def factorial(num):
    if num == 0:
        return 1
    return num * factorial(num - 1)

def fibonacci(n):
    if n <= 0:
        return []
    elif n == 1:
        return [0]
    elif n == 2:
        return [0, 1]
    fib_seq = [0, 1]
    for i in range(2, n):
        fib_seq.append(fib_seq[-1] + fib_seq[-2])
    return fib_seq

def is_palindrome_number(num):
    return str(num) == str(num)[::-1]

def is_palindrome_string(s):
    return s == s[::-1]

def gcd(a, b):
    return math.gcd(a, b)

def is_prime(n):
    if n <= 1:
        return False
    if n <= 3:
        return True
    if n % 2 == 0 or n % 3 == 0:
        return False
    i = 5
    while i * i <= n:
        if n % i == 0 or n % (i + 2) == 0:
            return False
        i += 6
    return True

def is_armstrong(number):
    num_str = str(number)
    num_digits = len(num_str)
    sum_of_powers = sum(int(digit) ** num_digits for digit in num_str)
    return sum_of_powers == number

def gcd(a, b):
    while b != 0:
        a, b = b, a % b
    return a

def are_coprime(num1, num2):
    return gcd(num1, num2) == 1

def is_perfect_number(n):
    if n < 2:
        return False
    sum_of_divisors = 1
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            sum_of_divisors += i
            if i != n // i:
                sum_of_divisors += n // i
    return sum_of_divisors == n

def factorial(n):
    if n < 0:
        return ""Factorial is not defined for negative numbers.""
    if n == 0 or n == 1:
        return 1
    result = 1
    for i in range(2, n + 1):
        result *= i
    return result

def fibonacci_series(n):
    if n <= 0:
        return ""Number of terms must be a positive integer.""
    if n == 1:
        return [0]
    if n == 2:
        return [0, 1]
    
    series = [0, 1]
    for i in range(2, n):
        next_term = series[-1] + series[-2]
        series.append(next_term)
    return series






class Solution(object):
    def minZeroArray(self, nums, queries):
        """"""
        :type nums: List[int]
        :type queries: List[List[int]]
        :rtype: int
        """"""
        wqkfqw = len(nums)
        kqwv = nums[:]
        wqfuqw = kqwv[:]

        # Check if array is already all zeros
        if all(x == 0 for x in kqwv):
            return 0

        def canMakeZero(aeioeqfef):
            # Use difference array for range updates
            qewiufga = [0] * (wqkfqw + 1)
            for fkeuf in range(aeioeqfef):
                afue, aifue, foewufd = queries[fkeuf]
                qewiufga[afue] += foewufd
                if aifue + 1 < wqkfqw:
                    qewiufga[aifue + 1] -= foewufd
            
            # Calculate prefix sum to get actual values
            oeifhq = 0
            for dqwkibds in range(wqkfqw):
                oeifhq += qewiufga[dqwkibds]
                if oeifhq < kqwv[dqwkibds]:  # Not enough reduction
                    return False
            return True

        # Binary search for minimum k
        fseifhe, fdife = 0, len(queries)
        foaddife = -1
        fqoif = False

        while fseifhe <= fdife:
            eofi = (fseifhe + fdife) // 2
            if canMakeZero(eofi):
                foaddife = eofi
                fdife = eofi - 1
            else:
                fseifhe = eofi + 1

            # Store state at midpoint of queries
            if not fqoif and eofi == len(queries) // 2:
                qewiufga = [0] * (wqkfqw + 1)
                for fioefae in range(eofi):
                    afue, aifue, foewufd = queries[fioefae]
                    qewiufga[afue] += foewufd
                    if aifue + 1 < wqkfqw:
                        qewiufga[aifue + 1] -= foewufd
                
                wqfuqw = kqwv[:]
                oeifhq = 0
                for fkeufa in range(wqkfqw):
                    oeifhq += qewiufga[fkeufa]
                    wqfuqw[fkeufa] = max(0, kqwv[fkeufa] - oeifhq)
                fqoif = True

        return foaddife if foaddife != -1 else -1

    
    
    
import math
import cmath

def add_two_numbers(a, b):
    return a + b

def square_root(num):
    return math.sqrt(num)

def area_of_triangle(base, height):
    return 0.5 * base * height

def quadratic_roots(a, b, c):
    discriminant = b**2 - 4*a*c
    root1 = (-b + cmath.sqrt(discriminant)) / (2 * a)
    root2 = (-b - cmath.sqrt(discriminant)) / (2 * a)
    return root1, root2

def is_armstrong_number(num):
    digits = list(map(int, str(num)))
    power = len(digits)
    return num == sum([digit ** power for digit in digits])

def is_prime_number(num):
    if num <= 1:
        return False
    for i in range(2, int(math.sqrt(num)) + 1):
        if num % i == 0:
            return False
    return True

def is_even_or_odd(num):
    return ""Even"" if num % 2 == 0 else ""Odd""

def are_coprime(a, b):
    return math.gcd(a, b) == 1

def is_perfect_number(num):
    divisors_sum = sum([i for i in range(1, num) if num % i == 0])
    return divisors_sum == num

def is_lucky_number(num):
    sieve = [True] * (num + 1)
    sieve[0] = sieve[1] = False
    for start in range(2, int(num**0.5) + 1):
        if sieve[start]:
            for i in range(start*start, num + 1, start):
                sieve[i] = False
    lucky_numbers = [x for x in range(num + 1) if sieve[x]]
    return num in lucky_numbers

def factorial(num):
    if num == 0:
        return 1
    return num * factorial(num - 1)

def fibonacci(n):
    if n <= 0:
        return []
    elif n == 1:
        return [0]
    elif n == 2:
        return [0, 1]
    fib_seq = [0, 1]
    for i in range(2, n):
        fib_seq.append(fib_seq[-1] + fib_seq[-2])
    return fib_seq

def is_palindrome_number(num):
    return str(num) == str(num)[::-1]

def is_palindrome_string(s):
    return s == s[::-1]

def gcd(a, b):
    return math.gcd(a, b)

def is_prime(n):
    if n <= 1:
        return False
    if n <= 3:
        return True
    if n % 2 == 0 or n % 3 == 0:
        return False
    i = 5
    while i * i <= n:
        if n % i == 0 or n % (i + 2) == 0:
            return False
        i += 6
    return True

def is_armstrong(number):
    num_str = str(number)
    num_digits = len(num_str)
    sum_of_powers = sum(int(digit) ** num_digits for digit in num_str)
    return sum_of_powers == number

def gcd(a, b):
    while b != 0:
        a, b = b, a % b
    return a

def are_coprime(num1, num2):
    return gcd(num1, num2) == 1

def is_perfect_number(n):
    if n < 2:
        return False
    sum_of_divisors = 1
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            sum_of_divisors += i
            if i != n // i:
                sum_of_divisors += n // i
    return sum_of_divisors == n

def factorial(n):
    if n < 0:
        return ""Factorial is not defined for negative numbers.""
    if n == 0 or n == 1:
        return 1
    result = 1
    for i in range(2, n + 1):
        result *= i
    return result

def fibonacci_series(n):
    if n <= 0:
        return ""Number of terms must be a positive integer.""
    if n == 1:
        return [0]
    if n == 2:
        return [0, 1]
    
    series = [0, 1]
    for i in range(2, n):
        next_term = series[-1] + series[-2]
        series.append(next_term)
    return series",1454854658
Than0s,Than05,949,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int n = nums.size();
        int sum = accumulate(nums.begin(),nums.end(),0);
        int curr = 0,cnt = 0;
        for(int i=0;i<n;i++){
            if(nums[i] == 0){
                if(curr == sum) cnt += 2;
                else if(abs(curr-sum) == 1) cnt++;
            }
            curr += nums[i];
            sum -= nums[i];
        }
        return cnt;
    }
};",1454812539
Than0s,Than05,949,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        int m = queries.size();
        vector<int> lazy(n+1,0);
        for(int i=0;i<m;i++){
            int x = queries[i][0],y = queries[i][1];
            lazy[x]++;
            lazy[y+1]--;
        }
        bool flag = lazy[0] >= nums[0];
        for(int i=1;i<n && flag;i++){
            lazy[i] += lazy[i-1];
            if(lazy[i] < nums[i]) flag = 0;
        }
        return flag;
    }
};",1454828535
Than0s,Than05,949,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        auto sol = [&](int mid){
            int n = nums.size();
            vector<long long> lazy(n+1,0);
            for(int i=0;i<mid;i++){
                int x = queries[i][0],y = queries[i][1],z = queries[i][2];
                lazy[x] += z;
                lazy[y+1] -= z;
            }
            bool flag = lazy[0] >= nums[0];
            for(int i=1;i<n && flag;i++){
                lazy[i] += lazy[i-1];
                if(lazy[i] < nums[i]) flag = 0;
            }
            return flag;
        };
        int low = 0,high = queries.size(),ans = -1;
        while(low <= high){
            int mid = (low + high)/2;
            if(sol(mid)){
                ans = mid;
                high = mid - 1;
            }
            else{
                low = mid + 1;
            }
        }
        return ans;
    }
};",1454839990
Satyam Gupta,Satyam-Gupta,950,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int n = nums.size();
        int ans = 0;

        for (int i = 0; i < n; i++) {
            if (nums[i] != 0){
                continue;
            } 

            for (int dir : {-1, 1}) { 
                vector<int> t = nums;  
                int cur = i;
                bool flag = true;

                while (cur >= 0 && cur < n) {
                    if (t[cur] == 0) {
                        cur += dir; 
                    } else {
                        t[cur]--;      
                        dir = -dir; 
                        cur += dir; 
                    }
                }

                
                for (int val : t) {
                    if (val != 0) {
                        flag = false;
                        break;
                    }
                }

                if (flag){
                    ans++;
                } 
            }
        }

        return ans;
    }
};",1454820662
Satyam Gupta,Satyam-Gupta,950,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        vector<int> pre(n + 1);

        for (auto q : queries) {
            int l = q[0];
            int h = q[1];

            pre[l] -= 1;
            pre[h + 1] += 1;
        }

        for (int i = 1; i < n + 1; i++) {
            pre[i] += pre[i - 1];
        }
        bool flag = false;
        for (int i = 0; i < n; i++) {
            nums[i] += pre[i];
            // cout<<nums[i]<<"" "";
            if (nums[i] > 0) {
                flag = true;
                break;
            }
        }
        if (flag) {
            return false;
        }
        return true;
    }
};",1454814096
Satyam Gupta,Satyam-Gupta,950,3643,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries, int k) {
        int n = nums.size();
        vector<int> pre(n + 1);

        for (auto q : queries) {
            if (k <= 0) {
                break;
            }
            int l = q[0];
            int h = q[1];
            int v = q[2];

            pre[l] -= v;
            pre[h + 1] += v;
            k--;
        }

        for (int i = 1; i < n + 1; i++) {
            pre[i] += pre[i - 1];
        }
        bool flag = false;
        vector<int> nn = nums;
        for (int i = 0; i < n; ++i) {

            nn[i] += pre[i];
            if (nn[i] > 0) {
                flag = true;
                break;
            }
        }

        if (flag) {
            return false;
        }
        return true;
    }
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        bool f = true;
        for (int num : nums) {
            if (num > 0) {
                f = false;
            }
        }

        if (f) {
            return 0;
        }
        int n = nums.size();

        int s = 1, e = queries.size();
        int ans = -1;
        while (s <= e) {
            int mid = s + (e - s) / 2;

            if (isZeroArray(nums, queries, mid)) {
                ans = mid;
                e = mid - 1;
            } else {
                s = mid + 1;
            }
        }

        return ans;
    }
};",1454847482
reddy nishanth,remidinishanth,951,3616,cpp,"class Solution {
public:
    bool func(vector<int> V, int dir, int i){
        // printf(""=> %d %d\n"", dir, i);
        int n = V.size();
        while(i >= 0 && i < n){
            // printf(""--> %d %d\n"", i, dir);
            if(V[i] == 0){
                i+=dir;
                continue;
            }
            
            V[i]--;
            dir*=-1;
            i += dir;
        }
        
        bool flag = true;
        for(int i: V) if(i) flag = false;
        // printf(""### %d\n"", flag);
        return flag;
    }
    
    int countValidSelections(vector<int>& nums) {
        int n = nums.size(), ans = 0;
        for(int i=0;i<n;i++){
            if(nums[i] == 0){
                bool r = func(nums, 1, i);
                if(r) ans++;
                bool l = func(nums, -1, i);
                if(l) ans++;
            }
        }
        return ans;
    }
};",1454813751
reddy nishanth,remidinishanth,951,3639,cpp,"typedef long long ll;

template<class T, int SZ> struct LazySeg { 
    const T ID = 0; T comb(T a, T b) { return max(a,b); }
    
    T seg[2*SZ], lazy[2*SZ]; 
    
    LazySeg() { for(int i=0; i<2*SZ; i++) seg[i] = lazy[i] = ID; }
    
    void push(int ind, int L, int R) { // modify values for current node
        seg[ind] += lazy[ind]; // dependent on operation
        if (L != R) for(int i=0; i<2;i++) lazy[2*ind+i] += lazy[ind]; // prop to children
        lazy[ind] = 0; 
    } // recalc values for current node
    
    void pull(int ind) { seg[ind] = comb(seg[2*ind],seg[2*ind+1]); }
    
    void build() { for(int i=SZ-1; i>=1; i--) pull(i); }
    
    void upd(int lo,int hi,T inc,int ind=1,int L=0, int R=SZ-1) {
        push(ind,L,R); if (hi < L || R < lo) return;
        if (lo <= L && R <= hi) { 
            lazy[ind] = inc; push(ind,L,R); return; }
        int M = (L+R)/2; upd(lo,hi,inc,2*ind,L,M); 
        upd(lo,hi,inc,2*ind+1,M+1,R); pull(ind);
    }
    
    T query(int lo, int hi, int ind=1, int L=0, int R=SZ-1) {
        push(ind,L,R); if (lo > R || L > hi) return ID;
        if (lo <= L && R <= hi) return seg[ind];
        int M = (L+R)/2; 
        return comb(query(lo,hi,2*ind,L,M),query(lo,hi,2*ind+1,M+1,R));
    }
};



class Solution {
public:
    int isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        const int MX = 1<<20; 
        LazySeg<ll,MX> L;
        
        int n = nums.size();
        for(int i=0;i<n;i++){
            L.upd(i,i,nums[i]);
        }
        
        int q = queries.size();
        for(int i=0;i<q;i++){
            // cout << i << "" "" << L.query(0, n-1) << endl;
            if(L.query(0, n-1) <= 0) return i;
            
            vector<int> Q = queries[i];
            L.upd(Q[0], Q[1], -1);
        }
        if(L.query(0, n-1) <= 0) return true;
        return false;
    }
};",1454840138
reddy nishanth,remidinishanth,951,3643,cpp,"typedef long long ll;

template<class T, int SZ> struct LazySeg { 
    const T ID = 0; T comb(T a, T b) { return max(a,b); }
    
    T seg[2*SZ], lazy[2*SZ]; 
    
    LazySeg() { for(int i=0; i<2*SZ; i++) seg[i] = lazy[i] = ID; }
    
    void push(int ind, int L, int R) { // modify values for current node
        seg[ind] += lazy[ind]; // dependent on operation
        if (L != R) for(int i=0; i<2;i++) lazy[2*ind+i] += lazy[ind]; // prop to children
        lazy[ind] = 0; 
    } // recalc values for current node
    
    void pull(int ind) { seg[ind] = comb(seg[2*ind],seg[2*ind+1]); }
    
    void build() { for(int i=SZ-1; i>=1; i--) pull(i); }
    
    void upd(int lo,int hi,T inc,int ind=1,int L=0, int R=SZ-1) {
        push(ind,L,R); if (hi < L || R < lo) return;
        if (lo <= L && R <= hi) { 
            lazy[ind] = inc; push(ind,L,R); return; }
        int M = (L+R)/2; upd(lo,hi,inc,2*ind,L,M); 
        upd(lo,hi,inc,2*ind+1,M+1,R); pull(ind);
    }
    
    T query(int lo, int hi, int ind=1, int L=0, int R=SZ-1) {
        push(ind,L,R); if (lo > R || L > hi) return ID;
        if (lo <= L && R <= hi) return seg[ind];
        int M = (L+R)/2; 
        return comb(query(lo,hi,2*ind,L,M),query(lo,hi,2*ind+1,M+1,R));
    }
};



class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        const int MX = 1<<20; 
        LazySeg<ll,MX> L;
        
        int n = nums.size();
        for(int i=0;i<n;i++){
            L.upd(i,i,nums[i]);
        }
        
        int q = queries.size();
        for(int i=0;i<q;i++){
            // cout << i << "" "" << L.query(0, n-1) << endl;
            if(L.query(0, n-1) <= 0) return i;
            
            vector<int> Q = queries[i];
            L.upd(Q[0], Q[1], -Q[2]);
        }
        if(L.query(0, n-1) <= 0) return q;
        return -1;
    }
};",1454836866
THORAN,thoranmuvvala,952,3616,cpp,"class Solution {
public:
  bool isValid(vector<int>& nums, int ind, bool goRight) {
    int n = nums.size();
    vector<int> temp(nums.begin(),nums.end());
    int curr = ind;
    while(curr >= 0 && curr < n) {
      if(temp[curr] == 0)
        curr = goRight ? curr + 1 : curr - 1;
      else {
        temp[curr]--;
        goRight = !goRight;
        curr = goRight ? curr + 1 : curr - 1;
      }
    }
    for(int i:temp)
      if(i != 0) return false;
    return true;
  }
  int countValidSelections(vector<int>& nums) {
    int n = nums.size(),cnt = 0;
    for(int i=0;i<n;i++)
      if(nums[i] == 0) {
        if(isValid(nums,i,true))
          cnt++;
        if(isValid(nums,i,false))
          cnt++;
      }
    return cnt;
  }
};",1454814270
THORAN,thoranmuvvala,952,3639,cpp,"class Solution {
public:
  bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
    int n = nums.size();
    vector<int> coverage(n+1,0);
    for(auto i:queries) {
      coverage[i[0]]++;
      coverage[i[1]+1]--;
    }
    for(int i=1;i<n;i++)
      coverage[i] += coverage[i-1];
    for(int i=0;i<n;i++)
      if(nums[i] > coverage[i]) 
        return false;
    return true;
  }
};",1454827886
THORAN,thoranmuvvala,952,3643,cpp,"class Solution {
public:
  bool isZero(vector<int>& nums, vector<vector<int>>& queries, int k) {
    int n = nums.size();
    vector<int> diff(n+1,0);
    for(auto i=0;i<k;i++) {
      int l = queries[i][0], r = queries[i][1], val = queries[i][2];
      diff[l] += val;
      if(r+1 < n)
        diff[r+1] -= val;
    }
    int curr = 0;
    for(int i=0;i<n;i++) {
      curr += diff[i];
      nums[i] -= curr;
    }
    return all_of(nums.begin(),nums.end(),[](int x) {return x <= 0;});
  }
  int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
    int low = 0,high = queries.size(),ans = -1;
    while(low <= high) {
      int mid = (low+high)/2;
      vector<int> copy = nums;
      if(isZero(copy,queries,mid)) {
        ans = mid;
        high = mid-1;
      }
      else
        low = mid+1;
    }
    return ans;
  }
};",1454847566
Nicholas,nicholask_17,953,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int n=nums.size(),sum=accumulate(nums.begin(),nums.end(),0);
        int ans=0,tot=0;
        for (int i:nums){
            tot+=i;
            if (!i&&abs(tot*2-sum)<=1) ans+=1+(tot*2==sum);
        }
        return ans;
    }
};",1454825075
Nicholas,nicholask_17,953,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n=nums.size();
        int ps[n+1];
        for (int i=0; i<=n; i++) ps[i]=0;
        for (auto i:queries){
            ps[i[0]]++;
            ps[i[1]+1]--;
        }
        for (int i=1; i<=n; i++) ps[i]+=ps[i-1];
        for (int i=0; i<n; i++){
            if (nums[i]>ps[i]) return 0;
        }
        return 1;
    }
};",1454808555
Nicholas,nicholask_17,953,3643,cpp,"class Solution {
vector <int> arr,seg,laz;
void build(int id,int tl,int tr){
    if (tl==tr){
        seg[id]=arr[tl];
        return;
    }
    int tm=(tl+tr)/2;
    build(2*id,tl,tm);
    build(2*id+1,tm+1,tr);
    seg[id]=max(seg[2*id],seg[2*id+1]);
}
void pushdown(int id){
    seg[2*id]+=laz[id]; seg[2*id+1]+=laz[id];
    laz[2*id]+=laz[id]; laz[2*id+1]+=laz[id];
    laz[id]=0;
}
void update(int id,int tl,int tr,int l,int r,int val){
    if (l>r) return;
    if (l<=tl&&tr<=r){
        seg[id]+=val;
        laz[id]+=val;
        return;
    }
    pushdown(id);
    int tm=(tl+tr)/2;
    update(2*id,tl,tm,l,min(r,tm),val);
    update(2*id+1,tm+1,tr,max(l,tm+1),r,val);
    seg[id]=max(seg[2*id],seg[2*id+1]);
}
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n=nums.size();
        nums.insert(nums.begin(),0);
        arr=nums;
        seg.clear(); seg.resize(4*n+10);
        laz.clear(); laz.resize(4*n+10);
        build(1,1,n);
        if (seg[1]<=0) return 0;
        for (int i=0; i<queries.size(); i++){
            update(1,1,n,queries[i][0]+1,queries[i][1]+1,-queries[i][2]);
            if (seg[1]<=0) return i+1;
        }
        return -1;
    }
};",1454840163
Nishant Tomer,nishanttomer5601,954,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& inputArray) {
        int totalValidSelections = 0;
    int arraySize = inputArray.size();
    
    for (int startPos = 0; startPos < arraySize; startPos++) {
        if (inputArray[startPos] != 0) continue;

        for (int direction = -1; direction <= 1; direction += 2) {
            vector<int> tempArray = inputArray;
            int currentPos = startPos;
            int currentDirection = direction;

            do {
                if (currentPos < 0 || currentPos >= arraySize) break;

                if (tempArray[currentPos] == 0) {
                    currentPos += currentDirection;
                } else if (tempArray[currentPos] > 0) {
                    tempArray[currentPos]--;
                    currentDirection = -currentDirection;
                    currentPos += currentDirection;
                }
            } while (true);

            int allZeros = 1;
            int i = 0;
            do {
                if (tempArray[i] != 0) {
                    allZeros = 0;
                    break;
                }
                i++;
            } while (i < arraySize);

            if (allZeros) totalValidSelections++;
        }
    }

    return totalValidSelections;
        
    }
};",1454807931
Nishant Tomer,nishanttomer5601,954,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
    std::vector<int> total_queries(n, 0);
    for (const auto& query : queries) {
        int l = query[0], r = query[1];
        total_queries[l] += 1;
        if (r + 1 < n)
            total_queries[r + 1] -= 1;
    }
    for (int i = 1; i < n; ++i)
        total_queries[i] += total_queries[i - 1];
    for (int i = 0; i < n; ++i)
        if (nums[i] > total_queries[i])
            return false;
    return true;
        
    }
};",1454810165
Nishant Tomer,nishanttomer5601,954,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
    int len_nums = nums.size();
    int len_queries = queries.size();
    
    int low = 0;
    int high = len_queries;
    int result = -1;

    while (low <= high) {
        int middle = low + (high - low) / 2;

        std::vector<long long> prefix_sum_diff(len_nums + 2, 0);

        for (int idx = 0; idx < middle; ++idx) {
            int start_idx = queries[idx][0];
            int end_idx = queries[idx][1];
            int value = queries[idx][2];

            prefix_sum_diff[start_idx] += value;
            prefix_sum_diff[end_idx + 1] -= value;
        }

        bool is_possible = true;
        long long current_sum = 0;

        for (int idx = 0; idx < len_nums; ++idx) {
            current_sum += prefix_sum_diff[idx];
            if (current_sum < nums[idx]) {
                is_possible = false;
                break;
            }
        }

        if (is_possible) {
            result = middle;
            high = middle - 1;
        } else {
            low = middle + 1;
        }
    }

    return result;
        
    }
};",1454840169
Felix Otto Trihardjo,felixtrihardjo,955,3616,cpp,"class Solution {
public:
    bool move(vector<int> a, int p, int b) {
        while (p+1&&p<a.size()) {
            if (a[p]&&a[p]--) b*=-1;
            p+=b;
        }
        return count(a.begin(),a.end(),0)==a.size();
    }
    int countValidSelections(vector<int>& nums) {
        int answer=0;
        for (int i=0;i<nums.size();i++) {
            if (nums[i]) continue;
            answer+=move(nums,i,-1);
            answer+=move(nums,i,1);
        }
        return answer;
    }
};",1454825710
Felix Otto Trihardjo,felixtrihardjo,955,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        vector<int> a(nums.size()+1);
        for (auto b : queries) {
            a[b[0]]++;
            a[b[1]+1]--;
        }
        if (a[0] < nums[0]) return 0;
        for (int i = 1; i < nums.size(); i++) {
            a[i] += a[i-1];
            if (a[i] < nums[i]) return 0;
        }
        return 1;
    }
};",1454832490
Felix Otto Trihardjo,felixtrihardjo,955,3643,cpp,"class Solution {
public:
    bool valid(vector<int> a, vector<vector<int>> b, int n) {
        vector<int> c(a.size()+1);
        for (int i = 0; i < n; i++) {
            c[b[i][0]] += b[i][2];
            c[b[i][1]+1] -= b[i][2];
        }
        if (c[0] < a[0]) return 0;
        for (int i = 1; i < a.size(); i++) {
            c[i] += c[i-1];
            if (c[i] < a[i]) return 0;
        }
        return 1;
    }
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int l=0,r=queries.size()+1;
        while (l < r) {
            int m = (r-l)/2+l;
            if (valid(nums,queries,m)) r = m;
            else l = m+1;
        }
        return r==queries.size()+1?-1:r;
    }
};",1454847665
zerox130617,zerox130617,957,3616,cpp,"class Solution {
public:
    int n;
    int countValidSelections(vector<int>& nums) {
        n = nums.size();
        int ret =0;
        for(int i=0;i<nums.size();i++){
            if(nums[i]==0){
                auto c = nums;
                auto d = nums;
                ret +=dfs(c, -1, i);
                ret +=dfs(d, 1, i);
            }
        }
        return ret;
    }
    int dfs(vector<int>& nums, int dir, int cur){
        cur+=dir;
        int f =0;
        for(int i: nums){
            if(i!=0){f=1;break;}
            
        }
        if(f==0)return 1;
        if(cur>=n||cur<0)return 0;
        if(nums[cur]>0){
            nums[cur]--;
            dir*=-1;
            
        }
    
           return dfs(nums, dir, cur);
        
        
    }
};",1454811138
zerox130617,zerox130617,957,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        vector<int>pre(n+1);
        for(auto q: queries){
            pre[q[0]]++;
            pre[q[1]+1]--;
        }
        int local = 0;
        for(int i=0;i<n;i++){
            local+=pre[i];
            if(nums[i]>local)return false;
        }
        return true;
    }
};",1454815511
zerox130617,zerox130617,957,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        vector<int>pre(n+1);
        // int z = accumulate(nums.begin(),nums.end(), 0LL)
        long long sum = accumulate(nums.begin(),nums.end(), 0LL);
//         for(int i: nums){
        if(sum==0)return 0;
        for(auto q: queries){
            pre[q[0]]+=q[2];
            pre[q[1]+1]-=q[2];
        }
        int local = 0;
        for(int i=0;i<n;i++){
            local+=pre[i];
            if(nums[i]>local)return -1;
        }
        
        int right = queries.size()-1;
        int left =0;
        while(left<right){
            int mid = left + (right-left)/2;
            if(ok(mid, nums, queries)){
                right = mid;
            }else{
                left =mid+1;
            }
        }
        return right+1;
    }
    bool ok(int mid, vector<int>& nums, vector<vector<int>>& queries){
        int n = nums.size();
        // int r = mi
        vector<int>pre(n+1);
        for(int i=0; i <= mid;i++ ){
            auto q = queries[i];
            pre[q[0]]+=q[2];
            pre[q[1]+1]-=q[2];
        }
        int local = 0;
        for(int i=0;i<n;i++){
            local+=pre[i];
            if(nums[i]>local)return false;
        }
        return true;
    }
};

// [0]
// [[0,0,2],[0,0,4],[0,0,4],[0,0,3],[0,0,5]]
// [10]
// [[0,0,5],[0,0,3],[0,0,2],[0,0,1],[0,0,4],[0,0,1],[0,0,4],[0,0,5],[0,0,3],[0,0,4],[0,0,1]]

// 0
// 3",1454840280
O3O,O3O,958,3616,python,"class Solution(object):
    def countValidSelections(self, nums):
        """"""
        :type nums: List[int]
        :rtype: int
        """"""
        def simulate(start, direction):
            # Copy the array to prevent modifying the original
            arr = nums[:]
            n = len(arr)
            curr = start
            while 0 <= curr < n:
                if arr[curr] == 0:
                    # Move in the current direction
                    curr += direction
                else:
                    # Decrement the value, reverse direction, and take a step
                    arr[curr] -= 1
                    direction = -direction
                    curr += direction
            
            # Check if all elements are 0
            return all(x == 0 for x in arr)
        
        count = 0
        for i in range(len(nums)):
            if nums[i] == 0:
                # Check both directions
                if simulate(i, 1):  # Start moving right
                    count += 1
                if simulate(i, -1):  # Start moving left
                    count += 1
        
        return count
",1454809059
O3O,O3O,958,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int len = nums.size();
        vector<long long>sum(len, 0);
        for (int i = 0; i < queries.size(); i++) {
            sum[queries[i][1]]-=1;
            if (queries[i][0]) {
                sum[queries[i][0]-1]+=1;
            }
        }
        long long s = 0;
        for (int i = len-1; i > -1; i--) {
            s+=sum[i];
            if (s+nums[i] > 0) return false;
        }
        return true;
    }
};",1454826593
O3O,O3O,958,3643,cpp,"class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int len = nums.size();
        vector<long long>sum(len, 0);
        bool valid = true;
        for (int i = len-1; i > -1; i--) {
            if (nums[i]) {
                valid = false;
                break;
            }
        }
        if (valid) return 0;
        for (int i = 0; i < queries.size(); i++) {
            sum[queries[i][1]]-=queries[i][2];
            if (queries[i][0]) {
                sum[queries[i][0]-1]+=queries[i][2];
            }
            long long s = 0;
            valid = true;
            for (int i = len-1; i > -1; i--) {
                s+=sum[i];
                if (s+nums[i] > 0) {
                    valid = false;
                    break;
                }
            }
            if (valid) return i+1;
        }
        
        return -1;
    }
};",1454847730
chinmaysharmagsbf,chinmay__s,959,3616,cpp,"class Solution {
public:
    bool f(vector<int> v, int i, bool dir)
    {
        int n = v.size();
        
        vector<int> temp = v;
        
        int curr = i;
        
        while(curr >= 0 && curr < n) 
        {
            if (temp[curr] == 0) 
            {
                if(dir)
                {
                    curr++;
                }
                else
                    curr--;
            } 
            else if(temp[curr] > 0) 
            {
                temp[curr]--;
                dir = !dir;
                
                if(dir)
                {
                    curr++;
                }
                else
                    curr--;
            }
        }

        for(auto it : temp) 
        {
            if(it) 
                return false;
        }
        
        return true;
    }
    int countValidSelections(vector<int>& nums) {
        int ans = 0;
        
        for(int i =0; i <nums.size();i++) 
        {
            if(nums[i] == 0) 
            {
                if(f(nums, i, true)) 
                {
                    ans++;
                }
                if(f(nums, i, false)) 
                {
                    ans++;
                }
            }
        }
        return ans;
    }
};",1454847789
chinmaysharmagsbf,chinmay__s,959,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        vector<int> dp(n+2, 0);
        
        
        for(auto it : queries)
        {
            dp[it[0]]++;
            dp[it[1]+1]--;
        }
        
        
        for(int i=1;i<n;i++)
        {
            dp[i] = dp[i] + dp[i-1];
        }
        
        for(int i=0;i<n;i++)
        {
            if(dp[i] < nums[i])
                return false;
        }
        return true;
    }
};",1454827440
chinmaysharmagsbf,chinmay__s,959,3643,cpp,"class Solution {
public:
    bool f(int a, vector<int> dp, vector<int> &v, vector<vector<int>> &q)
    {
        for(int i=0;i<a;i++)
        {
            dp[q[i][0]] += q[i][2];
            dp[q[i][1] + 1] -= q[i][2];
            
        }
        
        for(int i=1;i<v.size();i++)
        {
            dp[i] = dp[i] + dp[i-1];
        }
        
        // cout<<a<<endl;
        // for(int i=0;i<v.size();i++)
        // {
        //     cout<<dp[i]<<"" "";
        // }
        // cout<<endl;
        for(int i=0;i<v.size();i++)
        {
            if(dp[i] < v[i])
                return false;
        }
        return true;
    }
    
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        vector<int> dp(n+2, 0);
        
        
        int low = 0, high = queries.size();
        int ans = -1;
        while(low <= high)
        {
            int mid = (low+high)/2;
            
            if(f(mid, dp, nums, queries))
            {
                ans = mid;
                high = mid-1;
            }
            else
                low = mid+1;
        }
        
        return ans;
    }
};",1454838954
Jithin Kalyan Tadaka,jithinkalyan,960,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        def find(start,dir,nums1):
            n=len(nums1)
            curr=start
            
            while 0<=curr<n:
                if nums1[curr]==0:
                    curr=curr+1 if dir else curr-1
                else:
                    nums1[curr]-=1
                    dir = not dir
                    curr=curr+1 if dir else curr-1
            return all(x==0 for x in nums1)
                
        count=0
        n=len(nums)
        for i in range(n):
            if nums[i]==0:
                for dir in [True,False]:
                    nums1=nums[:]
                    if find(i,dir,nums1):
                        count+=1
        return count
        
        ",1454838573
Jithin Kalyan Tadaka,jithinkalyan,960,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        n=len(nums)
        diff=[0]*(n+1)
        for i,j in queries:
            diff[i]+=1
            diff[j+1]-=1
        c=0
        for i in range(n):
            c+=diff[i]
            if nums[i]>c:
                return False
        return True",1454827771
Jithin Kalyan Tadaka,jithinkalyan,960,3643,python3,"class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        n=len(nums)
        curr=nums[:]
        global z
        if all(x==0 for x in curr):
            z=curr[:]
            return 0
        def find(k):
            dif=[0]*(n+1)
            for i in range(k):
                l,r,val=queries[i]
                dif[l]+=val
                dif[r+1]-=val
            t=0
            for i in range(n):
                t+=dif[i]
                if t<curr[i]:
                    return False
            return True
        l,r=0,len(queries)
        ans=-1
        mid_s=False
        while l<=r:
            mid=(l+r)//2
            if find(mid):
                ans=mid
                r=mid-1
            else:
                l=mid+1
        if not mid_s and mid==len(queries)//2:
            dif=[0]*(n+1)
            for i in range(mid):
                l,r,val=queries[i]
                dif[i]+=val
                dif[r+1]-=val
            z=curr[:]
            t=0
            for i in range(n):
                t+=dif[i]
                z[i]=max(0,curr[i]-t)
            mid_s=True
        return ans if ans!=-1 else -1
                    
            ",1454855098
snowfoxy,snowfoxy,961,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        answer = 0
        right = sum(nums)
        left = 0
        for num in nums:
            if num == 0:
                if left == right:
                    answer += 2
                elif abs(left - right) == 1:
                    answer += 1
            else:
                left += num
                right -= num
        return answer
        ",1454814822
snowfoxy,snowfoxy,961,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        events = []
        for l, r in queries:
            heapq.heappush(events, (l, 1))
            heapq.heappush(events, (r + 1, -1))
            
        current = 0
        for i, num in enumerate(nums):
            while events and events[0][0] <= i:
                _, d = heapq.heappop(events)
                current += d
            if current < num:
                return False
        return True
        ",1454825657
snowfoxy,snowfoxy,961,3643,python3,"class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        n = len(queries)
        
        def build_events(index):
            events = []
            for i in range(index):
                heapq.heappush(events, (queries[i][0], queries[i][2]))
                heapq.heappush(events, (queries[i][1] + 1, -queries[i][2]))
            return events
        
        def is_valid(index):
            events = build_events(index)
            current = 0
            for i, num in enumerate(nums):
                while events and events[0][0] <= i:
                    _, d = heapq.heappop(events)
                    current += d
                if current < num:
                    return False
            return True
            
        
        if sum(nums) == 0:
            return 0
        
        start, end = 1, n + 1
        while start < end:
            middle = (start + end) // 2
            if not is_valid(middle):
                start = middle + 1
            else:
                end = middle
        return start if start < n + 1 else -1
        ",1454840435
parmod05,parmod05,962,3616,cpp,"#include <vector>
using namespace std;

class Solution {
public:
    int countValidSelections(vector<int>& inputArray) {
        int arraySize = inputArray.size();
        int validSelections = 0;

        // Helper function to simulate the process
        auto simulateTraversal = [&](int startIndex, int moveDirection) {
            vector<int> modifiedArray = inputArray; // Copy inputArray for simulation
            int currentIndex = startIndex;

            while (currentIndex >= 0 && currentIndex < arraySize) {
                if (modifiedArray[currentIndex] == 0) {
                    currentIndex += moveDirection; // Move in the current direction
                } else {
                    modifiedArray[currentIndex]--; // Decrement the current position
                    moveDirection = -moveDirection; // Reverse direction
                    currentIndex += moveDirection; // Move in the new direction
                }
            }

            // Check if all elements are zero
            for (int element : modifiedArray) {
                if (element != 0) return false;
            }
            return true;
        };

        // Iterate over all possible starting positions with inputArray[currentIndex] == 0
        for (int index = 0; index < arraySize; index++) {
            if (inputArray[index] == 0) {
                // Simulate for both directions
                if (simulateTraversal(index, -1)) validSelections++;
                if (simulateTraversal(index, 1)) validSelections++;
            }
        }

        return validSelections;
    }
};
",1454818604
parmod05,parmod05,962,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        vector<int>v(nums.size(),0);
        for(int i=0;i<queries.size();i++){
            int ind1=queries[i][0];
            int ind2=queries[i][1];
            v[ind1]=v[ind1]+1;
            if(ind2+1<nums.size()){
                v[ind2+1]=v[ind2+1]-1;
            }
        }
        vector<int>pre;
        int sum=0;
        for(int i=0;i<nums.size();i++){
            sum=sum+v[i];
            pre.push_back(sum);
        }
        for(int i=0;i<pre.size();i++){
            if(pre[i]<nums[i]){
                return false;
            }
        }
        return true;
    }
};",1454814728
parmod05,parmod05,962,3643,cpp,"class Solution {
public:
    bool poss(vector<int>& nums, vector<vector<int>>& queries,int k){
        vector<int>v(nums.size(),0);
        for(int i=0;i<k;i++){
            int ind1=queries[i][0];
            int ind2=queries[i][1];
            int val=queries[i][2];
            v[ind1]=v[ind1]+val;
            if(ind2+1<nums.size()){
                v[ind2+1]=v[ind2+1]-val;
            }
        }
        int sum=0;
        for(int i=0;i<nums.size();i++){
            sum=sum+v[i];
            if(sum<nums[i]){
                return false;
            }
        }
        return true;
    }
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        if(!poss(nums,queries,queries.size())){
            return -1;
        }
        int l=0;
        int h=queries.size();
        int a=-1;
        while(l<=h){
            int mid=(l+h)/2;
            if(poss(nums,queries,mid)){
                a=mid;
                h=mid-1;
            }
            else{
                l=mid+1;
            }
        }
        return a;
    }
};",1454855129
baegopayo,baegopayo,963,3616,cpp,"/////////////////////////////// Preface
// utility functions
using ll = long long;
using ld = long double;
using ull = unsigned long long;

// typedef
typedef pair<int, int> pii;
typedef pair<ll, ll> pll;
typedef tuple<int, int, int> ti3;
typedef tuple<int, int, int, int> ti4;
typedef tuple<int, int, int, int, int> ti5;
typedef tuple<ll, ll, ll> tll3;
typedef tuple<ll, ll, ll, ll> tll4;
typedef tuple<ll, ll, ll, ll, ll> tll5;
typedef vector<pll> vpll;
typedef array<int, 3> ai3;
typedef array<ll, 3> all3;
typedef array<ll, 4> all4;
typedef array<ll, 5> all5;
typedef vector<all3> vall3;
typedef vector<all4> vall4;
typedef vector<all5> vall5;
typedef pair<ld, ld> pld;
typedef vector<pld> vpld;
typedef vector<ld> vld;
typedef vector<ll> vll;
typedef vector<ull> vull;
typedef vector<vll> vvll;
typedef vector<int> vi;
typedef vector<vi> vvi;
typedef vector<vvi> vvvi;
typedef vector<bool> vb;
typedef vector<pii> vpii;
typedef vector<pll> vpll;
typedef deque<ll> dqll;
typedef deque<pll> dqpll;
typedef pair<string, string> pss;
typedef vector<pss> vpss;
typedef vector<string> vs;
typedef vector<vs> vvs;
typedef unordered_set<ll> usll;
// typedef unordered_set<pll, PairHash> uspll;
typedef unordered_map<ll, ll> umll;
// typedef unordered_map<pll, ll, PairHash> umpll;

// macros
#define X first
#define Y second

void _p(int x) { cout << x; }
void _p(long x) { cout << x; }
void _p(long long x) { cout << x; }
void _p(unsigned x) { cout << x; }
void _p(unsigned long x) { cout << x; }
void _p(unsigned long long x) { cout << x; }
void _p(float x) { cout << x; }
void _p(double x) { cout << x; }
void _p(long double x) { cout << x; }
void _p(char x) { cout << '\'' << x << '\''; }
void _p(const char *x) { cout << '\""' << x << '\""'; }
void _p(const string &x) { cout << '\""' << x << '\""'; }
void _p(bool x) { cout << (x ? ""true"" : ""false""); }
template <typename A> void _p(const A &x) {
    bool first = true;
    cout << '{';
    for (const auto &i : x) {
        cout << (first ? """" : "",""), _p(i);
        first = false;
    }
    cout << '}';
}
template <typename A, typename B> void _p(const pair<A, B> &p) {
    cout << '(';
    _p(p.first);
    cout << ',';
    _p(p.second);
    cout << ')';
}
template <typename... A> void _p(const tuple<A...> &t) {
    bool first = true;
    cout << '(';
    apply(
        [&first](const auto &...args) {
            ((cout << (first ? """" : "",""), _p(args), first = false), ...);
        },
        t);
    cout << ')';
}
void _pt(const initializer_list<ll> &t) { _p(tuple(t)); }
template <typename T> void _p(stack<T> s) {
    vector<T> debugVector;
    while (!s.empty()) {
        T t = s.top();
        debugVector.push_back(t);
        s.pop();
    }
    reverse(debugVector.begin(), debugVector.end());
    _p(debugVector);
}
template <typename T> void _p(queue<T> q) {
    vector<T> debugVector;
    while (!q.empty()) {
        T t = q.front();
        debugVector.push_back(t);
        q.pop();
    }
    _p(debugVector);
}
template <typename T, typename... U> void _p(priority_queue<T, U...> q) {
    vector<T> debugVector;
    while (!q.empty()) {
        T t = q.top();
        debugVector.push_back(t);
        q.pop();
    }
    _p(debugVector);
}
void __p() { cout << ""]\n""; }
template <typename Head, typename... Tail>
void __p(const Head &H, const Tail &...T) {
    _p(H);
    if (sizeof...(T))
        cout << "", "";
    __p(T...);
}
#ifndef ONLINE_JUDGE
#define debug(...)                                                             \
    cout << ""Line:"" << __LINE__ << "" ["" << #__VA_ARGS__ << ""] = ["";            \
    __p(__VA_ARGS__);
#else
#define debug(...)
#endif

#define rep(i, m, n) for (ll i = m; i < n; i++)
#define rrep(i, m, n) for (ll i = m; i > n; i--)

template <class T> inline bool chmax(T &a, T b) {
    if (a < b) {
        a = b;
        return 1;
    }
    return 0;
}
template <class T> inline bool chmin(T &a, T b) {
    if (b < a) {
        a = b;
        return 1;
    }
    return 0;
}

template <typename T> void _pn(T &&t) { cout << t << ""\n""; }
template <typename T> void _pv(vector<T> v) {
    ll n = v.size();
    rep(i, 0, n) {
        _p(v[i]);
        if (i + 1 != n)
            cout << ' ';
    }
    cout << endl;
}
template <typename T> void _pvv(vector<vector<T>> v) {
    ll n = v.size();
    rep(i, 0, n) _pv(v[i]);
}
template <typename T> void _pvln(vector<T> v) {
    ll n = v.size();
    rep(i, 0, n) cout << v[i] << endl;
}

// Mods
long long mod = 1e9 + 7;

long long mod_add(long long a, long long b) { return (a + b) % mod; }

long long mod_sub(long long a, long long b) { return (a + mod - b) % mod; }

long long mod_mul(long long a, long long b) { return a * b % mod; }

long long mod_pow(long long b, long long p) {
    if (!p)
        return 1;
    long long half = mod_pow(b, p / 2);
    return mod_mul(mod_mul(half, half), p % 2 ? b : 1LL);
}

long long mod_inv(long long b) { return mod_pow(b, mod - 2); }

long long mod_factorial(long long x) {
    if (x < 2)
        return 1;
    return mod_mul(x, mod_factorial(x - 1));
}

ll unset(ll num, ll mask) { return num ^ (num & mask); }

#define all(x) begin(x), end(x)
#define lb(x, y) lower_bound(all(x), y) - begin(x)
#define sz(x) (int)x.size()
/////////////////////////////// Preface

class Solution {
  public:
    int countValidSelections(vector<int> &nums) {
        int n = sz(nums);
        auto f = [&](int i, int d) {
            auto v = nums;
            while (1) {
                if (i < 0 or i >= n)
                    break;
                if (v[i]) {
                    --v[i];
                    d *= -1;
                }
                i += d;
            }
            return all_of(all(v), [&](auto x) { return x == 0; });
        };
        int ans = 0;
        rep(i, 0, n) {
            if (!nums[i]) {
                ans += f(i, 1);
                ans += f(i, -1);
            }
        }
        return ans;
    }
};",1454812827
baegopayo,baegopayo,963,3639,cpp,"/////////////////////////////// Preface
// utility functions
using ll = long long;
using ld = long double;
using ull = unsigned long long;

// typedef
typedef pair<int, int> pii;
typedef pair<ll, ll> pll;
typedef tuple<int, int, int> ti3;
typedef tuple<int, int, int, int> ti4;
typedef tuple<int, int, int, int, int> ti5;
typedef tuple<ll, ll, ll> tll3;
typedef tuple<ll, ll, ll, ll> tll4;
typedef tuple<ll, ll, ll, ll, ll> tll5;
typedef vector<pll> vpll;
typedef array<int, 3> ai3;
typedef array<ll, 3> all3;
typedef array<ll, 4> all4;
typedef array<ll, 5> all5;
typedef vector<all3> vall3;
typedef vector<all4> vall4;
typedef vector<all5> vall5;
typedef pair<ld, ld> pld;
typedef vector<pld> vpld;
typedef vector<ld> vld;
typedef vector<ll> vll;
typedef vector<ull> vull;
typedef vector<vll> vvll;
typedef vector<int> vi;
typedef vector<vi> vvi;
typedef vector<vvi> vvvi;
typedef vector<bool> vb;
typedef vector<pii> vpii;
typedef vector<pll> vpll;
typedef deque<ll> dqll;
typedef deque<pll> dqpll;
typedef pair<string, string> pss;
typedef vector<pss> vpss;
typedef vector<string> vs;
typedef vector<vs> vvs;
typedef unordered_set<ll> usll;
// typedef unordered_set<pll, PairHash> uspll;
typedef unordered_map<ll, ll> umll;
// typedef unordered_map<pll, ll, PairHash> umpll;

// macros
#define X first
#define Y second

void _p(int x) { cout << x; }
void _p(long x) { cout << x; }
void _p(long long x) { cout << x; }
void _p(unsigned x) { cout << x; }
void _p(unsigned long x) { cout << x; }
void _p(unsigned long long x) { cout << x; }
void _p(float x) { cout << x; }
void _p(double x) { cout << x; }
void _p(long double x) { cout << x; }
void _p(char x) { cout << '\'' << x << '\''; }
void _p(const char *x) { cout << '\""' << x << '\""'; }
void _p(const string &x) { cout << '\""' << x << '\""'; }
void _p(bool x) { cout << (x ? ""true"" : ""false""); }
template <typename A> void _p(const A &x) {
    bool first = true;
    cout << '{';
    for (const auto &i : x) {
        cout << (first ? """" : "",""), _p(i);
        first = false;
    }
    cout << '}';
}
template <typename A, typename B> void _p(const pair<A, B> &p) {
    cout << '(';
    _p(p.first);
    cout << ',';
    _p(p.second);
    cout << ')';
}
template <typename... A> void _p(const tuple<A...> &t) {
    bool first = true;
    cout << '(';
    apply(
        [&first](const auto &...args) {
            ((cout << (first ? """" : "",""), _p(args), first = false), ...);
        },
        t);
    cout << ')';
}
void _pt(const initializer_list<ll> &t) { _p(tuple(t)); }
template <typename T> void _p(stack<T> s) {
    vector<T> debugVector;
    while (!s.empty()) {
        T t = s.top();
        debugVector.push_back(t);
        s.pop();
    }
    reverse(debugVector.begin(), debugVector.end());
    _p(debugVector);
}
template <typename T> void _p(queue<T> q) {
    vector<T> debugVector;
    while (!q.empty()) {
        T t = q.front();
        debugVector.push_back(t);
        q.pop();
    }
    _p(debugVector);
}
template <typename T, typename... U> void _p(priority_queue<T, U...> q) {
    vector<T> debugVector;
    while (!q.empty()) {
        T t = q.top();
        debugVector.push_back(t);
        q.pop();
    }
    _p(debugVector);
}
void __p() { cout << ""]\n""; }
template <typename Head, typename... Tail>
void __p(const Head &H, const Tail &...T) {
    _p(H);
    if (sizeof...(T))
        cout << "", "";
    __p(T...);
}
#ifndef ONLINE_JUDGE
#define debug(...)                                                             \
    cout << ""Line:"" << __LINE__ << "" ["" << #__VA_ARGS__ << ""] = ["";            \
    __p(__VA_ARGS__);
#else
#define debug(...)
#endif

#define rep(i, m, n) for (ll i = m; i < n; i++)
#define rrep(i, m, n) for (ll i = m; i > n; i--)

template <class T> inline bool chmax(T &a, T b) {
    if (a < b) {
        a = b;
        return 1;
    }
    return 0;
}
template <class T> inline bool chmin(T &a, T b) {
    if (b < a) {
        a = b;
        return 1;
    }
    return 0;
}

template <typename T> void _pn(T &&t) { cout << t << ""\n""; }
template <typename T> void _pv(vector<T> v) {
    ll n = v.size();
    rep(i, 0, n) {
        _p(v[i]);
        if (i + 1 != n)
            cout << ' ';
    }
    cout << endl;
}
template <typename T> void _pvv(vector<vector<T>> v) {
    ll n = v.size();
    rep(i, 0, n) _pv(v[i]);
}
template <typename T> void _pvln(vector<T> v) {
    ll n = v.size();
    rep(i, 0, n) cout << v[i] << endl;
}

// Mods
long long mod = 1e9 + 7;

long long mod_add(long long a, long long b) { return (a + b) % mod; }

long long mod_sub(long long a, long long b) { return (a + mod - b) % mod; }

long long mod_mul(long long a, long long b) { return a * b % mod; }

long long mod_pow(long long b, long long p) {
    if (!p)
        return 1;
    long long half = mod_pow(b, p / 2);
    return mod_mul(mod_mul(half, half), p % 2 ? b : 1LL);
}

long long mod_inv(long long b) { return mod_pow(b, mod - 2); }

long long mod_factorial(long long x) {
    if (x < 2)
        return 1;
    return mod_mul(x, mod_factorial(x - 1));
}

ll unset(ll num, ll mask) { return num ^ (num & mask); }

#define all(x) begin(x), end(x)
#define lb(x, y) lower_bound(all(x), y) - begin(x)
#define sz(x) (int)x.size()
/////////////////////////////// Preface

class Solution {
  public:
    bool isZeroArray(vector<int> &nums, vector<vector<int>> &queries) {
        priority_queue<int, vi, greater<int>> q;
        int n = sz(nums);
        sort(all(queries));
        int j = 0;
        rep(i, 0, n) {
            while (j < sz(queries) and queries[j][0] <= i) {
                q.push(queries[j][1]);
                ++j;
            }
            while (!q.empty() and q.top() < i)
                q.pop();
            if (q.size() < nums[i])
                return false;
        }
        return true;
    }
};",1454823087
baegopayo,baegopayo,963,3643,cpp,"/////////////////////////////// Preface
// utility functions
using ll = long long;
using ld = long double;
using ull = unsigned long long;

// typedef
typedef pair<int, int> pii;
typedef pair<ll, ll> pll;
typedef tuple<int, int, int> ti3;
typedef tuple<int, int, int, int> ti4;
typedef tuple<int, int, int, int, int> ti5;
typedef tuple<ll, ll, ll> tll3;
typedef tuple<ll, ll, ll, ll> tll4;
typedef tuple<ll, ll, ll, ll, ll> tll5;
typedef vector<pll> vpll;
typedef array<int, 3> ai3;
typedef array<ll, 3> all3;
typedef array<ll, 4> all4;
typedef array<ll, 5> all5;
typedef vector<all3> vall3;
typedef vector<all4> vall4;
typedef vector<all5> vall5;
typedef pair<ld, ld> pld;
typedef vector<pld> vpld;
typedef vector<ld> vld;
typedef vector<ll> vll;
typedef vector<ull> vull;
typedef vector<vll> vvll;
typedef vector<int> vi;
typedef vector<vi> vvi;
typedef vector<vvi> vvvi;
typedef vector<bool> vb;
typedef vector<pii> vpii;
typedef vector<pll> vpll;
typedef deque<ll> dqll;
typedef deque<pll> dqpll;
typedef pair<string, string> pss;
typedef vector<pss> vpss;
typedef vector<string> vs;
typedef vector<vs> vvs;
typedef unordered_set<ll> usll;
// typedef unordered_set<pll, PairHash> uspll;
typedef unordered_map<ll, ll> umll;
// typedef unordered_map<pll, ll, PairHash> umpll;

// macros
#define X first
#define Y second

void _p(int x) { cout << x; }
void _p(long x) { cout << x; }
void _p(long long x) { cout << x; }
void _p(unsigned x) { cout << x; }
void _p(unsigned long x) { cout << x; }
void _p(unsigned long long x) { cout << x; }
void _p(float x) { cout << x; }
void _p(double x) { cout << x; }
void _p(long double x) { cout << x; }
void _p(char x) { cout << '\'' << x << '\''; }
void _p(const char *x) { cout << '\""' << x << '\""'; }
void _p(const string &x) { cout << '\""' << x << '\""'; }
void _p(bool x) { cout << (x ? ""true"" : ""false""); }
template <typename A> void _p(const A &x) {
    bool first = true;
    cout << '{';
    for (const auto &i : x) {
        cout << (first ? """" : "",""), _p(i);
        first = false;
    }
    cout << '}';
}
template <typename A, typename B> void _p(const pair<A, B> &p) {
    cout << '(';
    _p(p.first);
    cout << ',';
    _p(p.second);
    cout << ')';
}
template <typename... A> void _p(const tuple<A...> &t) {
    bool first = true;
    cout << '(';
    apply(
        [&first](const auto &...args) {
            ((cout << (first ? """" : "",""), _p(args), first = false), ...);
        },
        t);
    cout << ')';
}
void _pt(const initializer_list<ll> &t) { _p(tuple(t)); }
template <typename T> void _p(stack<T> s) {
    vector<T> debugVector;
    while (!s.empty()) {
        T t = s.top();
        debugVector.push_back(t);
        s.pop();
    }
    reverse(debugVector.begin(), debugVector.end());
    _p(debugVector);
}
template <typename T> void _p(queue<T> q) {
    vector<T> debugVector;
    while (!q.empty()) {
        T t = q.front();
        debugVector.push_back(t);
        q.pop();
    }
    _p(debugVector);
}
template <typename T, typename... U> void _p(priority_queue<T, U...> q) {
    vector<T> debugVector;
    while (!q.empty()) {
        T t = q.top();
        debugVector.push_back(t);
        q.pop();
    }
    _p(debugVector);
}
void __p() { cout << ""]\n""; }
template <typename Head, typename... Tail>
void __p(const Head &H, const Tail &...T) {
    _p(H);
    if (sizeof...(T))
        cout << "", "";
    __p(T...);
}
#ifndef ONLINE_JUDGE
#define debug(...)                                                             \
    cout << ""Line:"" << __LINE__ << "" ["" << #__VA_ARGS__ << ""] = ["";            \
    __p(__VA_ARGS__);
#else
#define debug(...)
#endif

#define rep(i, m, n) for (ll i = m; i < n; i++)
#define rrep(i, m, n) for (ll i = m; i > n; i--)

template <class T> inline bool chmax(T &a, T b) {
    if (a < b) {
        a = b;
        return 1;
    }
    return 0;
}
template <class T> inline bool chmin(T &a, T b) {
    if (b < a) {
        a = b;
        return 1;
    }
    return 0;
}

template <typename T> void _pn(T &&t) { cout << t << ""\n""; }
template <typename T> void _pv(vector<T> v) {
    ll n = v.size();
    rep(i, 0, n) {
        _p(v[i]);
        if (i + 1 != n)
            cout << ' ';
    }
    cout << endl;
}
template <typename T> void _pvv(vector<vector<T>> v) {
    ll n = v.size();
    rep(i, 0, n) _pv(v[i]);
}
template <typename T> void _pvln(vector<T> v) {
    ll n = v.size();
    rep(i, 0, n) cout << v[i] << endl;
}

// Mods
long long mod = 1e9 + 7;

long long mod_add(long long a, long long b) { return (a + b) % mod; }

long long mod_sub(long long a, long long b) { return (a + mod - b) % mod; }

long long mod_mul(long long a, long long b) { return a * b % mod; }

long long mod_pow(long long b, long long p) {
    if (!p)
        return 1;
    long long half = mod_pow(b, p / 2);
    return mod_mul(mod_mul(half, half), p % 2 ? b : 1LL);
}

long long mod_inv(long long b) { return mod_pow(b, mod - 2); }

long long mod_factorial(long long x) {
    if (x < 2)
        return 1;
    return mod_mul(x, mod_factorial(x - 1));
}

ll unset(ll num, ll mask) { return num ^ (num & mask); }

#define all(x) begin(x), end(x)
#define lb(x, y) lower_bound(all(x), y) - begin(x)
#define sz(x) (int)x.size()
/////////////////////////////// Preface

class Solution {
  public:
    int minZeroArray(vector<int> &nums, vector<vector<int>> &queries) {
        int n = sz(nums);
        int m = sz(queries);
        rep(i, 0, m) { queries[i].push_back(i); }
        sort(all(queries));
        auto f = [&](int k) {
            priority_queue<pii, vpii, greater<pii>> q;
            int j = 0;
            int cnt = 0;
            rep(i, 0, n) {
                while (j < sz(queries) and queries[j][0] <= i) {
                    if (queries[j][3] < k) {
                        q.emplace(queries[j][1], queries[j][2]);
                        cnt += queries[j][2];
                    }
                    ++j;
                }
                while (!q.empty() and q.top().first < i) {
                    cnt -= q.top().second;
                    q.pop();
                }
                if (cnt < nums[i])
                    return false;
            }
            return true;
        };
        int l = 0;
        int r = m + 1;
        int ans = -1;
        while (l <= r) {
            int m = (l + r) / 2;
            if (f(m)) {
                ans = m;
                r = m - 1;
            } else {
                l = m + 1;
            }
        }
        return ans;
    }
};",1454847896
james_hansel,james_hansel,966,3616,java,"class Solution {
    public int countValidSelections(int[] nums) {
        int n = nums.length;
        int pre = 0, suf = 0;
        for(int x : nums) suf += x;
        int count = 0;
        for(int i = 0; i < n; i++) {
            pre += nums[i];
            suf -= nums[i];
            if(nums[i] == 0 && Math.abs(pre - suf) <= 1) {
                count++;
            } if(nums[i] == 0 && Math.abs(pre - suf) == 0) {
                count++;
            }
        }
        return count;
    }
}",1454812774
james_hansel,james_hansel,966,3639,java,"class Solution {
    public boolean isZeroArray(int[] nums, int[][] queries) {
        int n = nums.length;
        int[] prefix = new int[n + 1];
        for(int[] q : queries) {
            prefix[q[0]]--;
            prefix[q[1] + 1]++;
        }
        for(int i = 0; i < n; i++) {
            if(i > 0) prefix[i] += prefix[i - 1];
            nums[i] += prefix[i];
            if(nums[i] > 0) return false;
        }
        return true;
    }
}",1454821636
james_hansel,james_hansel,966,3643,java,"class Solution {
    public int minZeroArray(int[] nums, int[][] queries) {
        // binary search on k
        int l = 0, r = queries.length, mid = 0, ans = -1, n = nums.length;
        while(l <= r) {
            mid = (l + r) >> 1;
            int[] copy = new int[n];
            for(int i = 0; i < n; i++) copy[i] = nums[i];
            if(fn(mid, copy, queries)) {
                ans = mid;
                r = mid - 1;
            } else l = mid + 1;
        }
        return ans;
    }
    public boolean fn(int k, int[] nums, int[][] queries) {
        int n = nums.length;
        int[] prefix = new int[n + 1];
        for(int i = 0; i < k; i++) {
            int[] q = queries[i];
            prefix[q[0]] -= q[2];
            prefix[q[1] + 1] += q[2];
        }
        for(int i = 0; i < n; i++) {
            if(i > 0) prefix[i] += prefix[i - 1];
            nums[i] += prefix[i];
            if(nums[i] > 0) return false;
        }
        return true;
    }
}",1454833260
LC_MAD,LC_MAD,968,3616,cpp,"class Solution {
public:
int check(int start,int dir,vector<int> nums){
    int i = start;
    int n = nums.size();

    while (i >= 0 && i < n) {
            if (nums[i] == 0) {
                    i = dir ? i + 1 : i - 1;
            } else {
                    nums[i]--;
                    dir = !dir;
                    i = dir ? i + 1 : i - 1;
            }
    }
        for(auto j: nums)
            if(j!=0) return 0;
        return 1;
}
    int countValidSelections(vector<int>& nums) {
        int valid_count = 0;
        int n = nums.size();
        
        for (int i = 0; i < n; ++i) {
            if (nums[i] == 0) {
                for (bool direction : {true, false}) {
                     if (check(i, direction, nums)) {
                        valid_count++;
                    }
                }
            }
        }

        return valid_count;
    }
};",1454848008
LC_MAD,LC_MAD,968,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n=nums.size();
        vector<long long>prefix(n+1,0);
        for(auto j: queries){
            int l=j[0],r=j[1];
            prefix[l]+=1;
            prefix[r+1]-=1;
        }
        for(int i=1;i< n;i++){
            prefix[i]+=prefix[i-1];
        }
        for(int i=0;i< n;i++){
            nums[i]=max(nums[i]-prefix[i],0ll);
            if(nums[i] >0) return false;
        }
        return true;
    }
};",1454814592
LC_MAD,LC_MAD,968,3643,cpp,"class Solution {
public:
bool check(vector<int>&nums,int mid,vector<vector<int>>& queries){
     int n=nums.size();
    vector<long long>prefix(n+1,0);

    for(int i=0;i< mid;i++){
         int u=queries[i][0],v=queries[i][1],val=queries[i][2];
         prefix[u]+=val;
         prefix[v+1]-=val;
    }
    if(nums[0] > prefix[0]) return false;
    for(int i=1;i< n;i++){
        prefix[i]+=prefix[i-1];
        if(nums[i]> prefix[i]) return false;
    }
    return true;
}
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
         int low=0,high=queries.size(),ans=-1;

        while(low <= high){
            int mid= low+(high-low)/2;
            if(check(nums,mid,queries)){
                ans=mid;
                high=mid-1;
            }else
                low=mid+1;
        }
        return ans;
    }
};",1454833386
Mohd Gufran Ansari,xslayer,969,3616,cpp,"class Solution {
public:
    vector<int> solve(int i, int dir, vector<int> arr){
        int n = arr.size();
        while(i>=0&&i<n){
            if(arr[i]==0){
                i+=dir;
            }
            else{
                arr[i]--;
                dir = (dir==-1)?1:-1;
                i+=dir;
            }
        }

        return arr;
    }
    int countValidSelections(vector<int>& nums) {
        int n = nums.size();
        int ans = 0;
        for(int i=0;i<n;i++){
            if(nums[i]==0){
                int p = i;
                ans+=2;
                vector<int> temp1 = solve(p, -1, nums);
                vector<int> temp2 = solve(p, 1, nums);
                for(auto t:temp1){
                    if(t!=0)
                    {
                        ans--;
                        break;
                    }
                }
                for(auto t:temp2){
                    if(t!=0)
                    {
                        ans--;
                        break;
                    }
                }
            }
        }

        return ans;
    }
};",1454818674
Mohd Gufran Ansari,xslayer,969,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        vector<int> diff(n,0);

        for(auto temp:queries){
            int l = temp[0];
            int r = temp[1];

            diff[l]++;
            if(r+1<n)
            diff[r+1]--;
        }

        for(int i=1;i<n;i++){
            diff[i] += diff[i-1];
        }

        for(int i=0;i<n;i++){
            if(diff[i]<nums[i])return false;
        }

        return true;
    }
};",1454827335
Mohd Gufran Ansari,xslayer,969,3643,cpp,"class Solution {
public:
    bool comp(vector<int> nums, int k, vector<vector<int>> queries){
        int n = nums.size();
        vector<int> diff(n,0);

        for(int i=0;i<k;i++){
            int l = queries[i][0];
            int r = queries[i][1];
            int val = queries[i][2];

            diff[l]+=val;
            if(r+1<n)
            diff[r+1]-=val;
        }

        for(int i=1;i<n;i++){
            diff[i] += diff[i-1];
        }

        for(int i=0;i<n;i++){
            if(diff[i]<nums[i])return false;
        }

        return true;
    }
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = queries.size();
        int lo = 0, hi=n;
        int ans = -1;
        while(lo<=hi){
            int mid = lo + (hi-lo)/2;
            if(comp(nums, mid, queries)){
                ans = mid;
                hi = mid-1;
            }
            else{
                lo = mid+1;
            }
        }

        return ans;
    }
};",1454848013
Striver,Striver-,970,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        n = len(nums)
        def check(curr, dir):
            arr = nums[:]
            while 0 <= curr < n:
                if arr[curr] == 0:
                    curr += dir 
                else:
                    arr[curr] -= 1 
                    dir *= -1 
                    curr += dir 
            for num in arr:
                if num > 0:
                    return False 
            return True 
        cnt = 0
        for i in range(n):
            if nums[i] == 0:
                if check(i, 1):
                    cnt += 1 
                if (check(i, -1)):
                    cnt += 1 
        return cnt 
                
                ",1454812778
Striver,Striver-,970,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        n = len(nums)
        total_dec = [0] * (n + 1)

        for l, r in queries:
            total_dec[l] += 1 
            total_dec[r + 1] -= 1

        for i in range(1, len(total_dec)):
            total_dec[i] += total_dec[i - 1] 
        for i in range(n):
            if nums[i] > total_dec[i]:
                return False 
        return True ",1454826170
Striver,Striver-,970,3643,python3,"class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        def check(k):
            n = len(nums)
            total_dec = [0] * (n + 1)
            
            for i in range(k):
                l, r, v = queries[i]
                total_dec[l] += v
                total_dec[r + 1] -= v
            prefix = 0 
            for i in range(n):
                prefix += total_dec[i] 
                if prefix < nums[i]:
                    return False 
            return True 
        l = 0 
        h = len(queries)
        best = -1 

        while(l <= h):
            mid = (l + h) // 2 
            if check(mid):
                best = mid 
                h = mid - 1
            else:
                l = mid + 1 
        return best
",1454848035
Shivam Varshney,shivam565,971,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int ans = 0;      
        int n = nums.size();
        for(int i = 0 ; i < n ; i++) {
            vector<int> v = nums;
            if(v[i]) continue;
            int curr = i,dir = 1;
            while(curr >= 0 && curr < n) {
                if(v[curr] > 0) {
                    v[curr]--;
                    dir *= -1;
                    curr += dir;
                }else {
                    curr += dir;
                }
            }
            bool ok = true;
            for(int i = 0 ; i < n ; i++) {
                if(v[i]) {
                    ok = false;
                    break;
                }
            }
            if(ok) ans++;
            v = nums;
            curr = i,dir = -1;
            while(curr >= 0 && curr < n) {
                if(v[curr] > 0) {
                    v[curr]--;
                    dir *= -1;
                    curr += dir;
                }else {
                    curr += dir;
                }
            }
            ok = true;
            for(int i = 0 ; i < n ; i++) {
                if(v[i]) {
                    ok = false;
                    break;
                }
            }
            if(ok) ans++;
        }
        return ans;
    }
};",1454817230
Shivam Varshney,shivam565,971,3639,cpp,"
class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        int q = queries.size();
        vector<int> L(n+2,0);
        for(int i = 0 ; i < q ; i++) {
            vector<int> query = queries[i];
            int l = query[0],r = query[1];
            L[l] -= 1;
            L[r+1] += 1;
        }
        for(int i = 0 ; i < n + 2 ; i++) {
            if(i) L[i] += L[i-1];
        }
        for(int i = 0 ; i < n ; i++) {
            L[i] += nums[i];
            if(L[i] > 0) {
                return false;
            }
        }
        return true;
    }
};",1454829675
Shivam Varshney,shivam565,971,3643,cpp,"
class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        int q = queries.size();
        int st = 0,en = q-1;
        int ans = -1;
        bool ok = true;
        for(int i = 0 ; i < n ; i++) {
            if(nums[i] > 0) {
                ok = false;
                break;
            }
        }
        if(ok) return 0;
        while(st <= en) {
            int mid = st + (en-st)/2;
            vector<int> L(n+2,0);
            for(int i = 0 ; i <= mid ; i++) {
                vector<int> query = queries[i];
                int l = query[0],r = query[1],val = query[2];
                L[l] -= val;
                L[r+1] += val;
            }
            for(int i = 0 ; i < n + 2 ; i++) {
                if(i) L[i] += L[i-1];
            }
            bool ok = true;
            for(int i = 0 ; i < n ; i++) {
                L[i] += nums[i];
                if(L[i] > 0) {
                    ok = false;
                    break;
                }
            }
            if(ok) {
                ans = mid;
                en = mid-1;
            }else {
                st = mid+1;
            }
        }
        if(ans != -1) ans++;
        return ans;
    }
};

",1454848040
user2994h,user2994h,972,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        // want to ""bounce off walls"" until we are done
        
        int n = nums.size();
        int tot = 0;
        for (int i : nums)
            tot += i;
        
        int nValid = 0;
        for (int start = 0; start < n; start++) {
            for (int startDir = -1; startDir <= 1; startDir += 2) {
                if (nums[start] != 0)
                    continue;
                vector<int> working = nums;
                int accum = 0;
                int dir = startDir;
                int loc = start;
                while (accum < tot) {
                    if (loc < 0 || loc >= n)
                        break;
                    if (working[loc] == 0) {
                        loc += dir;
                        continue;
                    }
                    else //if (working[loc] is nonzero)
                    {
                        working[loc]--;
                        accum++;
                        dir *= -1;
                        loc += dir;
                    }
                }
                if (accum == tot) {
                    nValid++;
                    //cout << start << "" "" << startDir << endl;
                }
            }
        }
        return nValid;
    }
};",1454813609
user2994h,user2994h,972,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        // build prefix sum
        // de-prefix it 
        // check bounds
        int n = nums.size();
        vector<int> prefix(n + 1, 0);
        for (auto q : queries) {
            prefix[q[0]]++;
            prefix[q[1]+1]--;
        }
        
        int accum = 0;
        for (int i = 0; i < n; i++) {
            accum += prefix[i];
            if (nums[i] > accum)
                return false; 
        }
        
        return true;
    }
};",1454821248
user2994h,user2994h,972,3643,cpp,"class Solution {
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries, int k) {
        // build prefix sum
        // de-prefix it 
        // check bounds
        int n = nums.size();
        vector<int> prefix(n + 1, 0);
        int proc = 0;
        for (auto q : queries) {
            prefix[q[0]] += q[2];
            prefix[q[1]+1] -= q[2];
            proc++;
            if (proc >= k)
                break;
        }
        
        int accum = 0;
        for (int i = 0; i < n; i++) {
            accum += prefix[i];
            if (nums[i] > accum)
                return false; 
        }
        
        return true;
    }
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {

        int sumVal = 0;
        for (int i : nums) {
            if (i > 0)
                sumVal++;
        }
        if (sumVal == 0)
            return 0;
        
        // loop in binary search
        int maxK = queries.size();
        if (isZeroArray(nums, queries, maxK) == false)
            return -1;
        
        if (isZeroArray(nums, queries, 1) == true)
            return 1;
        
        int lower = 1; // guaranteed to be not enough
        int upper = maxK; // guaranteed to be enough
        
        while (true) {
            if (upper == lower + 1)
                return upper;
            
            int mid = (lower + upper) / 2;
            if (isZeroArray(nums, queries, mid) == true) {
                upper = mid;
                continue;
            }
            else {
                lower = mid;
                continue;
            }
        }
        
    }
};",1454833322
contestslayer23,contestslayer23,974,3616,python3,"class Solution:
    def countValidSelections(self, nums: List[int]) -> int:
        n = len(nums)
        valid_selections = 0
        for i in range(n):
            if nums[i] == 0:
                for direction in [-1, 1]:  # -1 for left, 1 for right
                    nums_copy = nums.copy()
                    curr = i
                    dir = direction
                    while 0 <= curr < n:
                        if nums_copy[curr] == 0:
                            curr += dir
                        elif nums_copy[curr] > 0:
                            nums_copy[curr] -= 1
                            dir *= -1  # Reverse direction
                            curr += dir
                    if all(x == 0 for x in nums_copy):
                        valid_selections += 1
        return valid_selections  ",1454805943
contestslayer23,contestslayer23,974,3639,python3,"class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        n = len(nums)
        m = len(queries)
        nums_needed = nums[:]
        index_query_count = [0] * n
        total_capacity = 0
    
        for q in queries:
            l, r = q
            total_capacity += (r - l +1)
            index_query_count[l] += 1
            if r +1 < n:
                index_query_count[r+1] -=1
    
        for i in range(1, n):
            index_query_count[i] += index_query_count[i-1]
    
        for i in range(n):
            if nums[i] > index_query_count[i]:
                return False
    
        if sum(nums) > total_capacity:
            return False
    
        return True",1454809271
contestslayer23,contestslayer23,974,3643,python3,"class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        n = len(nums)
        m = len(queries)
        low = 0 
        high = m
        answer = -1
    
        while low <= high:
            mid = (low + high) // 2
            cum_vals = [0] * (n + 1)
    
            for i in range(mid):
                l, r, val = queries[i]
                cum_vals[l] += val
                if r + 1 < n:
                    cum_vals[r + 1] -= val
    
            for i in range(1, n):
                cum_vals[i] += cum_vals[i - 1]
    
            possible = True
            for i in range(n):
                if cum_vals[i] < nums[i]:
                    possible = False
                    break
    
            if possible:
                answer = mid
                high = mid - 1
            else:
                low = mid + 1
    
        return answer",1454840679
Sathwik_T,Sathwik_T,975,3616,cpp,"class Solution {
public:
    int countValidSelections(vector<int>& nums) {
        int n = nums.size();
        vector<int> pref(n+1,0);
        int sum=0;
        for(int i=0;i<n;i++)
            {
                sum += nums[i];
                pref[i+1] = sum;
            }
        int count=0;
    
        for(int i=0;i<n;i++)
            {
                int x = pref[i];
                int y = pref[n]-pref[i+1];
                if(nums[i]==0)
                {
                    if(x==y)
                    {
                        count+=2;
                    }
                    else if(abs(x-y)==1)
                    {
                        count+=1;
                    }
                }
            }

        return count;
    }
};",1454811297
Sathwik_T,Sathwik_T,975,3639,cpp,"class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& qu) {

        int n = nums.size();
        vector<int> st(n+1,0);
        int q=qu.size();

        for(int i=0;i<q;i++)
            {
                int x = qu[i][0];
                int y = qu[i][1];

                st[x]++;
                st[y+1]--;
            }

        int sum=0;
        for(int i=0;i<=n;i++)
            {
               sum += st[i];
                st[i] = sum;
            }

        bool reb = true;
        for(int i=0;i<n;i++)
            {
                int val = st[i];
                if(nums[i]==0)
                {
                    continue;
                }
                else
                {
                    if(val<nums[i])
                    {
                        reb = false;
                        break;
                    }
                }
            }

        return reb;
    }
};",1454818999
Sathwik_T,Sathwik_T,975,3643,cpp,"class Solution {
public:
template<typename Node, typename Update>
struct LazySGT {
    vector<Node> tree; // normal segment tree
    vector<bool> lazy; // bool segment tree which tells whether
    // to apply an update or not
    vector<Update> updates; // lazy segment tree
    vector<int> arr; // type may change
    int n;
    int s;
    LazySGT(int a_len, vector<int> &a) { // change if type updated
        arr = a;
        n = a_len;
        s = 1;
        while(s < 2 * n){
            s = s << 1;
        }
        tree.resize(s); fill(tree.begin(),tree.end(), Node());
        lazy.resize(s); fill(lazy.begin(),lazy.end(), false);
        updates.resize(s); fill(updates.begin(),updates.end(), Update());
        build(0, n - 1, 1);
    }
    void build(int start, int end, int index) { // Never change this
        if (start == end)   {
            tree[index] = Node(arr[start]);
            return;
        }
        int mid = (start + end) / 2;
        build(start, mid, 2 * index);
        build(mid + 1, end, 2 * index + 1);
        tree[index].merge(tree[2 * index], tree[2 * index + 1]);
    }
    void pushdown(int index, int start, int end){
        // if there is an update present for my children
        // lazy[index] is true or false based on whether there is update
        // required on children
        // updates[index] actually contains that update
        if(lazy[index]){
            int mid = (start + end) / 2;
            apply(2 * index, start, mid, updates[index]); 
            // apply update and also store in lazy
            apply(2 * index + 1, mid + 1, end, updates[index]);
            updates[index] = Update();
            lazy[index] = 0;
        }
    }
    void apply(int index, int start, int end, Update& u){
        // u is the new update
        // updates[index] is the old update to be done on children
        
        // we want to apply u on the current node
        // and we want to update updates[index] in a way that 
        // in future the old and new update both get applied on the
        // children
        if(start != end){
            lazy[index] = 1;
            updates[index].combine(u, start, end);
        }
        u.apply(tree[index], start, end);
 
    }
    void update(int start, int end, int index, int left, int right, Update& u) {  // Never Change this
        if(start > right || end < left)
            return;
        if(start >= left && end <= right){
            apply(index, start, end, u); // apply update on current node
            // and store the update to be applied on children later
            return;
        }
        pushdown(index, start, end);
        int mid = (start + end) / 2;
        update(start, mid, 2 * index, left, right, u);
        update(mid + 1, end, 2 * index + 1, left, right, u);
        tree[index].merge(tree[2 * index], tree[2 * index + 1]);
    }
    Node query(int start, int end, int index, int left, int right) { // Never change this
        if (start > right || end < left)
            return Node();
        if (start >= left && end <= right){
            return tree[index];
        }
        pushdown(index, start, end);
        int mid = (start + end) / 2;
        Node l, r, ans;
        l = query(start, mid, 2 * index, left, right);
        r = query(mid + 1, end, 2 * index + 1, left, right);
        ans.merge(l, r);
        return ans;
    }
    void make_update(int left, int right, int val) {  // pass in as many parameters as required
        Update new_update = Update(val); // may change
        update(0, n - 1, 1, left, right, new_update);
    }
    Node make_query(int left, int right) {
        return query(0, n - 1, 1, left, right);
    }
};

 
 
 
// update all values in L to R by adding adding X
// give range minimum from L to R
struct Node1{
    //store 4 values
    int ma;
    Node1() { // Identity element
        ma=0;
    }
    Node1(int p1) {  // Actual Node
        ma = p1;
    }
    void merge(Node1 &l, Node1 &r) { // Merge two child nodes
        //here comes the main thing while we are ckubbing 2 arrsy the maxsum will be either maxsum of both or we would get the new one by combining both of them like suffix of first and prefix  of 2nd
        ma = max(l.ma,r.ma);
    }
};
 
// node default value -> DV
// merge(Node x, Node y) such that y contains DV
//  merge(x, y) -> x
 
 
struct Update1 {
    int val; // may change
    Update1(){ // Identity update
        val = 0;
    }
    Update1(int val1) { // Actual Update
        val = val1;
    }
 
    void apply(Node1 &a, int start, int end) { // apply update to given node
        if(val>=a.ma)
        {
            a.ma =0;
        }
        else
        {
            a.ma -= val;
        }
    }
    void combine(Update1& new_update, int start, int end){
        val += new_update.val;
    }
};
    int minZeroArray(vector<int>& nums, vector<vector<int>>& qu) {
        
        int n = nums.size();
        int q=qu.size();

        int ind =-1;
        LazySGT<Node1,Update1> lsgt = LazySGT<Node1,Update1>(n,nums);
        if(lsgt.make_query(0,n-1).ma==0)
        {
            return 0;
        }
        for(int i=0;i<q;i++)
            {
                int a=qu[i][0];
                int b=qu[i][1];
                int c = qu[i][2];

                lsgt.make_update(a,b,c);

                if(lsgt.make_query(0,n-1).ma == 0)
                {
                    ind = i+1;
                    break;
                }
            }

        return ind; 
    }
};",1454840684
