username,userslug,contest_rank,question_id,language,code,submission_id
Aibar Kuanyshbay,kaikaikaikaikai,7,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numo) {
        vector<pair<int, int>> v;
        map<int, int> m;
        for (int i : nums) {
            v.push_back({i + k + 1, -1});
            v.push_back({i, 1});
            v.push_back({i - k, 0});
            m[i]++;
        }
        sort(v.begin(), v.end());
        int cur = 0, ans = 0;
        for (auto i : v) {
            int x = i.first;
            if (i.second == -1) {
                cur--; 
                ans = max(ans, min(cur, numo));
            } else if (i.second == 1) {
                ans = max(ans, m[x] + min(cur - m[x], numo));
            } else {
                cur++; 
                ans = max(ans, min(cur, numo));
            }
        }
        return ans;
    }
};",1447678852
Aibar Kuanyshbay,kaikaikaikaikai,7,3626,cpp,"class Solution {
public:
    bool f(int n, int t) {
        int m = 1 % t;
        while (n > 0) {
            m = m * (n % 10) % t;
            n /= 10;
        }
        return m == 0;
    }
    int smallestNumber(int n, int t) {
        while (true) {
            if (f(n, t))
                break;
            n++;
        }
        return n;
    }
};",1447654345
Aibar Kuanyshbay,kaikaikaikaikai,7,3635,cpp,"class Solution {
public:
    vector<vector<int>> dp;
    void calcDP() {
        dp = vector<vector<int>>(55, vector<int>(55, 100));
        dp[0][0] = 0;
        for (int i = 0; i < 50; i++)
            for (int j = 0; j < 50; j++) {
                dp[i + 1][j] = min(dp[i + 1][j], dp[i][j] + 1);
                dp[i + 2][j] = min(dp[i + 2][j], dp[i][j] + 1);
                dp[i + 3][j] = min(dp[i + 3][j], dp[i][j] + 1);
                dp[i + 1][j + 1] = min(dp[i + 1][j + 1], dp[i][j] + 1);
                dp[i][j + 1] = min(dp[i][j + 1], dp[i][j] + 1);
                dp[i][j + 2] = min(dp[i][j + 2], dp[i][j] + 1);
            }
    }
    vector<int> primes = {2, 3, 5, 7};
    vector<vector<int>> p = {
        {},           // 0
        {0, 0, 0, 0}, // 1
        {1, 0, 0, 0}, // 2
        {0, 1, 0, 0}, // 3
        {2, 0, 0, 0}, // 4
        {0, 0, 1, 0}, // 5
        {1, 1, 0, 0}, // 6
        {0, 0, 0, 1}, // 7
        {3, 0, 0, 0}, // 8
        {0, 2, 0, 0}, // 9
    };
    vector<int> cnt;
    int n;
    vector<int> a;
    void primeFact(long long& t) {
        cnt = vector<int>(4, 0);
        for (int i = 0; i < 4; i++) {
            while (t % primes[i] == 0) {
                t /= primes[i];
                cnt[i]++;
            }
        }
    }
    bool check(string num, long long t) {
        long long tt = 1LL % t;
        int cnt0 = 0;
        for (char c : num) {
            tt = tt * (c - '0') % t;
            if (c == '0')
                cnt0++;
        }
        return tt == 0 && cnt0 == 0;
    }
    void delZeroes(string& s) {
        int pos = -1;
        for (int i = 0; i < n; i++)
            if (s[i] == '0') {
                pos = i;
                break;
            }
        if (pos == -1)
            return;
        for (int i = pos; i < n; i++)
            s[i] = '1';
    }
    string smallestNumber(string num, long long t) {
        calcDP();

        n = num.size();
        delZeroes(num);
        
        if (check(num, t))
            return num;

        
        primeFact(t);
        if (t > 1)
            return ""-1"";
        
        reverse(num.begin(), num.end());
        a = vector<int>(n + 50, 0);
        
        for (int i = 0; i < n; i++)
            a[i] = num[i] - '0';

        n += 50;
        
        for (int i = 0; i < n; i++)
            if (a[i] > 0) {
                for (int j = 0; j < 4; j++)
                    cnt[j] -= p[a[i]][j];
            }
        
        for (int i = 0; i < n; i++) {
            if (a[i] > 0) {
                for (int j = 0; j < 4; j++)
                    cnt[j] += p[a[i]][j];
            }
            for (int c = a[i] + 1; c <= 9; c++) {
                for (int j = 0; j < 4; j++)
                    cnt[j] -= p[c][j];

                int needLen = max(0, cnt[2]) + max(0, cnt[3]);
                int cnt2 = max(0, cnt[0]), cnt3 = max(0, cnt[1]);
                needLen += dp[cnt2][cnt3];

                if (i >= needLen) {
                    string ans = """";
                    for (int j = n - 1; j > i; j--)
                        ans += char(a[j] + '0');

                    ans += char(c + '0');

                    for (int j = 1; j <= i - needLen; j++)
                        ans += '1';

                    vector<int> w;
                    for (int j = 1; j <= max(0, cnt[2]); j++)
                        w.push_back(5);
                    for (int j = 1; j <= max(0, cnt[3]); j++)
                        w.push_back(7);
                    while (cnt2 > 0 || cnt3 > 0) {
                        int y = 0;
                        for (int x = 1; x <= 9; x++) {
                            if (x == 5 || x == 7)
                                continue;
                            if (p[x][0] <= cnt2 && p[x][1] <= cnt3) {
                                if (dp[cnt2 - p[x][0]][cnt3 - p[x][1]] == dp[cnt2][cnt3] - 1) {
                                    y = x;
                                    break;
                                }
                            }
                        }
                        w.push_back(y);
                        cnt2 -= p[y][0];
                        cnt3 -= p[y][1];
                    }
                    sort(w.begin(), w.end());
                    for (int x : w)
                        ans += char(x + '0');

                    reverse(ans.begin(), ans.end());
                    while (ans.back() == '0')
                        ans.pop_back();

                    reverse(ans.begin(), ans.end());
                    
                    return ans;
                }
                    
                for (int j = 0; j < 4; j++)
                    cnt[j] += p[c][j];
            }
        }
        return ""-2"";
    }
};",1447757508
Aibar Kuanyshbay,kaikaikaikaikai,7,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numo) {
        vector<pair<int, int>> v;
        map<int, int> m;
        for (int i : nums) {
            v.push_back({i + k + 1, -1});
            v.push_back({i, 1});
            v.push_back({i - k, 0});
            m[i]++;
        }
        sort(v.begin(), v.end());
        int cur = 0, ans = 0;
        for (auto i : v) {
            int x = i.first;
            if (i.second == -1) {
                cur--; 
                ans = max(ans, min(cur, numo));
            } else if (i.second == 1) {
                ans = max(ans, m[x] + min(cur - m[x], numo));
            } else {
                cur++; 
                ans = max(ans, min(cur, numo));
            }
        }
        return ans;
    }
};",1447678530
Nguyễn Thảo,nguyenquocthao00,8,3622,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        n=len(nums)
        c=Counter(nums)
        keys=sorted(c.keys())
        l,r,res,s = 0,0,0,c[keys[0]]
        for i,v in enumerate(keys):
            while v-keys[l]>k:
                s-=c[keys[l]]
                l+=1
            while r+1<len(keys) and keys[r+1]-v<=k:
                s+=c[keys[r+1]]
                r+=1
            res=max(res, min(s, c[v] + numOperations))
        l,r,s = 0,0,0
        while r<len(keys):
            if keys[r]-keys[l]>2*k:
                s-=c[keys[l]]
                l+=1
            else:
                s+=c[keys[r]]
                r+=1
                res=max(res, min(s, numOperations))
        return res
            
            
        ",1447674098
Nguyễn Thảo,nguyenquocthao00,8,3626,python3,"class Solution:
    def smallestNumber(self, n: int, t: int) -> int:
        while True:
            x=1
            for v in str(n): x*=int(v)
            if x%t==0: return n
            n+=1
        ",1447653706
Nguyễn Thảo,nguyenquocthao00,8,3635,python3,"bases=[[], [], [2], [3], [2,2], [5], [2,3], [7], [2,2,2], [3,3]]
class Solution:
    def smallestNumber(self, num: str, t: int) -> str:
        prods = [0]*10
        for i in range(2, 10):
            while t%i==0:
                prods[i]+=1
                t=t//i
        if t!=1: return ""-1""
        # print(prods)
        n=len(num)
        last=len(num)
        for i,v in enumerate(num):
            if v=='0':
                last=i
                break
            for p in bases[int(v)]: prods[p]-=1
        # print(prods, last)
        def natleast(tup):
            # 2,3,5,7
            # if not any(tup): return True
            # if n==0: return False
            n=tup[2]+tup[3]
            n+=tup[1]//2
            tup[1]%=2
            if tup[1]==1:
                tup[0]-=1
                tup[1]-=1
                n+=1
            n+=(tup[0]+2)//3
            return n
        def gettup():
            return [max(prods[i],0) for i in (2,3,5,7)]
        res=list(num)
        def fill(start):
            # n2 = natleast(gettup())
            # while start<n and n-start>=n2:
            #     res[start]='1'
            #     start+=1
            n=len(res)
            for i in range(start, len(res)):
                for j in range(1, 10):
                    for p in bases[j]: prods[p]-=1
                    if natleast(gettup()) <= len(res)-i-1:
                        res[i] = str(j)
                        break
                    for p in bases[j]: prods[p]+=1
            return ''.join(res)
            
        if natleast(gettup()) <= n-last:
            return fill(last)
        for i in range(last-1,-1,-1):
            for p in bases[int(res[i])]: prods[p]+=1
            for j in range(int(res[i])+1, 10):
                for p in bases[j]: prods[p]-=1
                if natleast(gettup()) <= n-i-1: 
                    res[i] = str(j)
                    return fill(i+1)
                for p in bases[j]: prods[p]+=1
        res.append('')
        nx = natleast(gettup())
        while len(res)<nx: res.append('')
        return fill(0)
            
            
        

                
                
        
        
        ",1447738998
Nguyễn Thảo,nguyenquocthao00,8,3640,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        n=len(nums)
        c=Counter(nums)
        keys=sorted(c.keys())
        l,r,res,s = 0,0,0,c[keys[0]]
        for i,v in enumerate(keys):
            while v-keys[l]>k:
                s-=c[keys[l]]
                l+=1
            while r+1<len(keys) and keys[r+1]-v<=k:
                s+=c[keys[r+1]]
                r+=1
            res=max(res, min(s, c[v] + numOperations))
        l,r,s = 0,0,0
        while r<len(keys):
            if keys[r]-keys[l]>2*k:
                s-=c[keys[l]]
                l+=1
            else:
                s+=c[keys[r]]
                r+=1
                res=max(res, min(s, numOperations))
        return res        ",1447675277
Ying Liu,pein531,9,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int> &nums, int k, int numOperations) {
        sort(nums.begin(), nums.end());
        int n = nums.size();
        map<int, int> cnt;
        for(int i = 0; i < n; i++) {
            cnt[nums[i]]++;
        }
        int ans = 0;
        deque<int> dq2k;
        for(auto it : nums) {
            dq2k.push_back(it);
            while(dq2k.back() - dq2k.front() > 2 * k) {
                dq2k.pop_front();
            }
            ans = max(ans, min((int)dq2k.size(), numOperations));
        }
        int l = 0, r = 0;
        for(auto it : nums) {
            while(r < n && nums[r] - it <= k) {
                r++;
            }
            while(l < r && it - nums[l] > k) {
                l++;
            }
            ans = max(ans, min(r - l - cnt[it], numOperations) + cnt[it]);
        }
        return ans;
    }
};",1447772751
Ying Liu,pein531,9,3626,cpp,"class Solution {
public:
    int smallestNumber(int n, int t) {
        int ans;
        for(int num = n; ; num++) {
            int x = num, m = 1;
            while(x) {
                int d = x % 10;
                m = m * d % t;
                x /= 10;
            }
            if(m == 0) {
                ans = num;
                break;
            }
        }
        return ans;
    }
};",1447698232
Ying Liu,pein531,9,3635,cpp,"class Solution {
public:
    void change(vector<int> &v, long long x, long long y) {
        for(int i = 2; i <= 9; i++) {
            while(x % i == 0) {
                x /= i;
                v[i]++;
            }
            while(y % i == 0) {
                y /= i;
                v[i]--;
            }
        }
    }

    int maxcnt(vector<int> &v) {
        int ans = 1;
        if(v[3] >= 2)
            return 9;
        if(v[2] >= 3)
            return 8;
        if(v[7] >= 1)
            return 7;
        if(v[2] >= 1 && v[3] >= 1)
            return 6;
        if(v[5] >= 1)
            return 5;
        if(v[2] >= 2)
            return 4;
        if(v[3] >= 1)
            return 3;
        if(v[2] >= 1)
            return 2;
        return 1;
    }

    bool check(vector<int> &v) {
        for(int i = 2; i <= 9; i++) {
            if(v[i] > 0)
                return false;
        }
        return true;
    }

    string smallestNumber(string num, long long t) {
        vector<int> v(10, 0);
        for(int i = 2; i <= 9; i++) {
            while(t % i == 0) {
                t /= i;
                v[i]++;
            }
            if(v[i] == 0) {
                v[i] = -10000;
            }
        }
        if(t != 1) return ""-1"";
        bool flag = false;
        for(int i = 0; i < num.size(); i++) {
            if(num[i] == '0') {
                flag = true;
            }
            if(flag) num[i] = '1';
        }
        vector<int> ans = v;
        for(int i = 0; i < num.size(); i++) {
            int x = num[i] - '0';
            for(int j = 2; j <= 9; j++) {
                while(x % j == 0) {
                    x /= j;
                    ans[j]--;
                }
            }
        }
        if(check(ans)) {
            return num;
        }
        for(int i = num.size() - 1; i >= 0; i--) {
            int y = num[i] - '0';
            for(int x = y + 1; x <= 9; x++) {
                change(ans, y, x);
                num[i] = x + '0';
                for(int j = i + 1; j < num.size(); j++) {
                    int z = num[j] - '0';
                    change(ans, z, 1);
                    num[j] = '1';
                }
                for(int j = num.size() - 1; j > i; j--) {
                    int cnt = maxcnt(ans);
                    change(ans, 1, cnt);
                    num[j] = cnt + '0';
                }
                if(check(ans)) {
                    return num;
                }
                y = x;
            }
        }
        string str = """";
        ans = v;
        while(!check(ans)) {
            int cnt = maxcnt(ans);
            change(ans, 1, cnt);
            str += cnt + '0';
        }
        while(str.size() <= num.size()) {
            str += '1';
        }
        reverse(str.begin(), str.end());
        return str;
    }
};",1447729851
Ying Liu,pein531,9,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int> &nums, int k, int numOperations) {
        sort(nums.begin(), nums.end());
        int n = nums.size();
        map<int, int> cnt;
        for(int i = 0; i < n; i++) {
            cnt[nums[i]]++;
        }
        int ans = 0;
        deque<int> dq2k;
        for(auto it : nums) {
            dq2k.push_back(it);
            while(dq2k.back() - dq2k.front() > 2 * k) {
                dq2k.pop_front();
            }
            ans = max(ans, min((int)dq2k.size(), numOperations));
        }
        int l = 0, r = 0;
        for(auto it : nums) {
            while(r < n && nums[r] - it <= k) {
                r++;
            }
            while(l < r && it - nums[l] > k) {
                l++;
            }
            ans = max(ans, min(r - l - cnt[it], numOperations) + cnt[it]);
        }
        return ans;
    }
};",1447772355
trchen,trchen,12,3622,cpp,"class Solution {
 public:
  int maxFrequency(vector<int>& nums, int k, int numOperations) {
    sort(nums.begin(), nums.end());
    set<int> mids;
    unordered_map<int, int> cnts;
    for (auto c : nums) {
      cnts[c]++;
      mids.insert(c);
      mids.insert(c - k);
      mids.insert(c + k);
    }
    int n = nums.size();
    int left = 0;
    int right = 0;
    int ret = 0;
    for (auto mid : mids) {
      while (left < n && nums[left] < mid - k) {
        ++left;
      }
      while (right < n && nums[right] <= mid + k) {
        ++right;
      }
      // cout << mid << ' ' << left << ' ' << right << endl;
      ret = max(ret, min(right - left - cnts[mid], numOperations) + cnts[mid]);
    }
    return ret;
  }
};",1447698848
trchen,trchen,12,3626,cpp,"using ll = long long;

class Solution {
 public:
  ll Product(int a) {
    int ret = 1;
    while (a > 0) {
      ret *= (a % 10);
      a /= 10;
    }
    return ret;
  }

  int smallestNumber(int n, int t) {
    for (int i = n; i < numeric_limits<int>::max(); ++i) {
      if (Product(i) % t == 0) {
        return i;
      }
    }
    return 0;
  }
};",1447656544
trchen,trchen,12,3635,cpp,"using ll = long long;

class Solution {
 public:
  void ToNextValid(string& num) {
    int n = num.size();
    for (int i = 0; i < n; ++i) {
      if (num[i] == '0') {
        for (int j = i; j < n; ++j) {
          num[j] = '1';
        }
        return;
      }
    }
  }

  bool SmallestFree(int n, array<int, 4> cnt, string& ret) {
    ret.clear();
    if (ret.size() + cnt[1] / 2 > n) {
      return false;
    }
    ret += string(cnt[1] / 2, '9');
    cnt[1] %= 2;
    if (ret.size() + cnt[0] / 3 > n) {
      return false;
    }
    ret += string(cnt[0] / 3, '8');
    cnt[0] %= 3;
    if (ret.size() + cnt[3] > n) {
      return false;
    }
    ret += string(cnt[3], '7');
    if (cnt[0] > 0 && cnt[1] > 0) {
      ret += '6';
      cnt[0]--;
      cnt[1]--;
    }
    if (ret.size() + cnt[2] > n) {
      return false;
    }
    ret += string(cnt[2], '5');
    if (cnt[0] >= 2) {
      ret += '4';
      cnt[0] -= 2;
    }
    ret += string(cnt[1], '3');
    ret += string(cnt[0], '2');
    if (ret.size() > n) {
      return false;
    }
    ret += string(n - ret.size(), '1');
    reverse(ret.begin(), ret.end());
    return true;
  }

  array<int, 4> Count(ll n) {
    array<int, 4> ret{ 0, 0, 0, 0 };
    while (n % 2 == 0) {
      ret[0]++;
      n /= 2;
    }
    while (n % 3 == 0) {
      ret[1]++;
      n /= 3;
    }
    while (n % 5 == 0) {
      ret[2]++;
      n /= 5;
    }
    while (n % 7 == 0) {
      ret[3]++;
      n /= 7;
    }
    return ret;
  }

  array<int, 4> Add(const array<int, 4>& lhs, const array<int, 4>& rhs) {
    array<int, 4> ret;
    for (int i = 0; i < 4; ++i) {
      ret[i] = lhs[i] + rhs[i];
    }
    return ret;
  }

  array<int, 4> Remain(const array<int, 4>& total, const array<int, 4>& current) {
    array<int, 4> ret;
    for (int i = 0; i < 4; ++i) {
      ret[i] = max(0, total[i] - current[i]);
    }
    return ret;
  }

  string smallestNumber(string num, long long t) {
    array<int, 4> total{ 0, 0, 0, 0 };
    while (t % 2 == 0) {
      total[0]++;
      t /= 2;
    }
    while (t % 3 == 0) {
      total[1]++;
      t /= 3;
    }
    while (t % 5 == 0) {
      total[2]++;
      t /= 5;
    }
    while (t % 7 == 0) {
      total[3]++;
      t /= 7;
    }
    if (t > 1) {
      return ""-1"";
    }
    ToNextValid(num);
    int n = num.size();
    std::vector<array<int, 4>> cnts(n + 1);
    cnts[0] = { 0, 0, 0, 0 };
    for (int i = 1; i <= n; ++i) {
      cnts[i] = Add(cnts[i - 1], Count(num[i - 1] - '0'));
    }
    if (Remain(total, cnts.back()) == array<int, 4>{ 0, 0, 0, 0 }) {
      return num;
    }
    for (int i = n - 1; i >= 0; --i) {
      auto remain = Remain(total, cnts[i]);
      for (char c = num[i] + 1; c <= '9'; ++c) {
        auto true_remain = Remain(remain, Count(c - '0'));
        string rm;
        if (SmallestFree(n - 1 - i, true_remain, rm)) {
          return num.substr(0, i) + c + rm;
        }
      }
    }
    string ret;
    ret.clear();
    auto cnt = total;
    ret += string(cnt[1] / 2, '9');
    cnt[1] %= 2;
    ret += string(cnt[0] / 3, '8');
    cnt[0] %= 3;
    ret += string(cnt[3], '7');
    if (cnt[0] > 0 && cnt[1] > 0) {
      ret += '6';
      cnt[0]--;
      cnt[1]--;
    }
    ret += string(cnt[2], '5');
    if (cnt[0] >= 2) {
      ret += '4';
      cnt[0] -= 2;
    }
    ret += string(cnt[1], '3');
    ret += string(cnt[0], '2');
    if (ret.size() < num.size() + 1) {
      ret += string(num.size() + 1 - ret.size(), '1');
    }
    reverse(ret.begin(), ret.end());
    return ret;
  }
};",1447782555
trchen,trchen,12,3640,cpp,"class Solution {
 public:
  int maxFrequency(vector<int>& nums, int k, int numOperations) {
    sort(nums.begin(), nums.end());
    set<int> mids;
    unordered_map<int, int> cnts;
    for (auto c : nums) {
      cnts[c]++;
      mids.insert(c);
      mids.insert(c - k);
      mids.insert(c + k);
    }
    int n = nums.size();
    int left = 0;
    int right = 0;
    int ret = 0;
    for (auto mid : mids) {
      while (left < n && nums[left] < mid - k) {
        ++left;
      }
      while (right < n && nums[right] <= mid + k) {
        ++right;
      }
      // cout << mid << ' ' << left << ' ' << right << endl;
      ret = max(ret, min(right - left - cnts[mid], numOperations) + cnts[mid]);
    }
    return ret;
  }
};",1447698256
Mas,puktt,15,3622,cpp,"class Solution {
public:
    int solve(vector<int>& nums, int k, int numOperations) {
        int ans = 0;
        for (int i = 0, freq = 0; i < nums.size(); ++i) {
            if (i && nums[i] == nums[i - 1]) {
                ++freq;
            } else {
                freq = 1;
            }

            int j = upper_bound(nums.begin(), nums.end(), nums[i] + k) - nums.begin();
            int pp = lower_bound(nums.begin(), nums.end(), nums[i] - k) - nums.begin();
            int c = i - pp - freq + 1;
            ans = max(ans, freq + min(c + j - i - 1, numOperations));

            if (nums[i] + k < nums.back()) {
                int jj = upper_bound(nums.begin(), nums.end(), nums[i] + k + k) - nums.begin();
                ans = max(ans, min(freq + jj - i - 1, numOperations));
            }
        }
        return ans;
    }

    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        sort(nums.begin(), nums.end());
        int ans = solve(nums, k, numOperations);
        reverse(nums.begin(), nums.end());
        for (int i = 0; i < nums.size(); ++i) {
            nums[i] = 1e9 - nums[i];
        }

        return max(ans, solve(nums, k, numOperations));
    }
};",1447793303
Mas,puktt,15,3626,cpp,"class Solution {
public:
    int smallestNumber(int n, int t) {
        do {
            int x = n;
            int prod = 1;
            while (x) {
                prod *= x % 10;
                x /= 10;
            }
            if (prod % t == 0) {
                return n;
            }
        } while (++n);
        return -1;
    }
};",1447792880
Mas,puktt,15,3635,cpp,"class Solution {
public:
    int count[10];

    string sanityCheck(string &num, long long t) {
        // sanity check
        string ans = """";
        for (int i = 9; i >= 2; --i) {
            while (t % i == 0) {
                ans.push_back('0' + i);
                t /= i;
            }
        }
        reverse(ans.begin(), ans.end());
        if (t > 1) {
            return ""-1"";   
        }
        if (ans.size() >  num.size() || (ans.size() == num.size() && ans >= num)) {
            return ans;
        }
        return """";
    }

    void modif(char c, int diff) {
        if (c == '9') {
            count[3] += 2 * diff;
        } else if (c == '8') {
            count[2] += 3 * diff;
        } else if (c == '6') {
            count[2] += diff;      
            count[3] += diff;
        } else if (c == '4') {
            count[2] += 2 * diff;
        } else if (c > '1') {
            count[c - '0'] += diff;
        }
    }

    bool countGood() {
        for (int i = 2; i <= 9; ++i) {
            if (count[i] > 0) {
                return false;
            }
        }
        return true;
    }

    bool possibleToFill(int len) {
        int need =
            max(0, count[5]) + 
            max(0, count[7]) + 
            max(0, count[3] / 2) + 
            max(0, count[2] / 3);

        int tr = max(0, count[3] % 2);
        int tw = max(0, count[2] % 3);
        if (tr > 0) {
            ++need;
            --tw;
        }
        if (tw > 0) {
            ++need;
        }
        return need <= len;
    }

    void fill(string &num, int l) {
        for (int r = num.size() - 1; r > l; --r) {
            if (count[3] > 1) {
                count[3] -= 2;
                num[r] = '9';
            } else if (count[2] > 2) {
                count[2] -= 3;
                num[r] = '8';
            } else if (count[7] > 0) {
                --count[7];
                num[r] = '7';
            } else if (count[2] > 0 && count[3] > 0) {
                --count[2];
                --count[3];
                num[r] = '6';
            } else if (count[5] > 0) {
                --count[5];
                num[r] = '5';
            } else if (count[2] > 1) {
                count[2] -= 2;
                num[r] = '4';
            } else if (count[3] > 0) {
                --count[3];
                num[r] = '3';
            } else if (count[2] > 0) {
                --count[2];
                num[r] = '2';
            } else {
                num[r] = '1';
            }
        }
    }

    void OUT() {
        return;
        for (int i = 2; i <= 9; ++i) {
            cout << i << "" "" << count[i] << endl;
        }
        cout << endl;
    }

    string smallestNumber(string num, long long t) {
        string ret = sanityCheck(num, t);
        if (ret != """") {
            return ret;
        }

        memset(count, 0, sizeof(count));
        for (int i = 2; i <= 9; ++i) {
            while (t % i == 0) {
                ++count[i];
                t /= i;
            }
        }

        bool hasZero = false;
        for (int i = 0; i < num.size(); ++i) {
            if (num[i] == '0') {
                hasZero = true;
            }
            if (hasZero) {
                num[i] = '1';
            } else {
                modif(num[i], -1);
            }
        }

        OUT();

        if (countGood()) {
            return num;
        }

        for (int i = num.size() - 1; i >= 0; --i) {
            for (char c = num[i] + 1; c <= '9'; ++c) {
                modif(c - 1, 1);
                modif(c, -1);
                ++num[i];
                if (possibleToFill(num.size() - i - 1)) {
                    fill(num, i);
                    return num;
                }
            }
            modif('9', 1);
            OUT();
        }
        num = ""1"" + num;
        fill(num, 0);
        return num;
    }
};",1447798395
Mas,puktt,15,3640,cpp,"class Solution {
public:
    int solve(vector<int>& nums, int k, int numOperations) {
        int ans = 0;
        for (int i = 0, freq = 0; i < nums.size(); ++i) {
            if (i && nums[i] == nums[i - 1]) {
                ++freq;
            } else {
                freq = 1;
            }

            int j = upper_bound(nums.begin(), nums.end(), nums[i] + k) - nums.begin();
            int pp = lower_bound(nums.begin(), nums.end(), nums[i] - k) - nums.begin();
            int c = i - pp - freq + 1;
            ans = max(ans, freq + min(c + j - i - 1, numOperations));

            if (nums[i] + k < nums.back()) {
                int jj = upper_bound(nums.begin(), nums.end(), nums[i] + k + k) - nums.begin();
                ans = max(ans, min(freq + jj - i - 1, numOperations));
            }
        }
        return ans;
    }

    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        sort(nums.begin(), nums.end());
        int ans = solve(nums, k, numOperations);
        reverse(nums.begin(), nums.end());
        for (int i = 0; i < nums.size(); ++i) {
            nums[i] = 1e9 - nums[i];
        }

        return max(ans, solve(nums, k, numOperations));
    }
};",1447792386
aknov711,aknov711,17,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        int ans=0;
        map<int,int>cnt;
        map<int,int>mp;
        
        for(int i=0;i<nums.size();i++){
            cnt[nums[i]]++;
            mp[nums[i]]+=0;
            mp[nums[i]-k]++;
            mp[nums[i]+k+1]--;
        }
        
        int overlap=0;
        for(auto e: mp){
            overlap += e.second;
            
            int x = overlap;
            x-=cnt[e.first];
            x=min(x, numOperations);
            x+=cnt[e.first];
            ans=max(ans, x);
            
            //cout<<overlap<<"" ""<<e.first<<"" ""<<e.second<<"" ""<<x<<endl;
        }
        
        return ans;
    }
};",1447693420
aknov711,aknov711,17,3626,cpp,"class Solution {
    bool div(int n, int t){
        int res=1;
      while(n>0){
          res *= (n%10);
          n/=10;
      }  
        return res%t==0;
    }
public:
    int smallestNumber(int n, int t) {
        for(int i=n;;i++){
            if(div(i, t))
                return i;
        }
    }
};",1447654062
aknov711,aknov711,17,3635,cpp,"class Solution {
    bool check(string num, long long t){
        for(auto e: num){
            int val = e-'0';
            if(val==0)
                return false;
            t/=__gcd(t, 1LL*val);
        }
        return t==1;
    }
    
    bool comp(string a, string b){
        if(a.size()<b.size())
            return true;
        if(a.size()>b.size())
            return false;
        return a<b;
    }
public:
    string smallestNumber(string num, long long t) {
        vector<int>primes = {2,3,5,7};
        
       string ans = """";
        if(check(num, t))
            return num;
        int n = num.size();
        bool zero[n];
        memset(zero, false, sizeof(zero));
        for(int i=0;i<n;i++){
            if(num[i]=='0')
                zero[i]=true;
            if(i>0)
                zero[i]|=zero[i-1];
        }
        
        long long till[n];
        long long temp_t=t;
        for(int i=0;i<n;i++){
            int val = num[i]-'0';
          //  if(i==0){
                long long x = __gcd(temp_t, 1LL*val);
                temp_t /= x;
          //  }
            till[i]=temp_t;
        }
        for(int pos=n-1;pos>=0;pos--){
            if(pos>0 && zero[pos-1])
                continue;
            // pos is the first point of difference
            int curVal = num[pos]-'0';
            for(int numAtThisPos=curVal+1;numAtThisPos<10;numAtThisPos++){
                long long till_now =  (pos==0 ? t : till[pos-1]); 
                till_now /= __gcd(till_now, 1LL*numAtThisPos);
                int cnt[10];
                memset(cnt, 0, sizeof(cnt));
                for(auto e: primes){
                    while(till_now%e == 0)
                    {
                        till_now/=e;
                        cnt[e]++;
                    }
                }
                if(till_now>1)
                    continue;
                int countAhead = n - pos -1;
                cnt[8]+=(cnt[2]/3);
                cnt[2]%=3;
                if(cnt[2] == 2){
                    cnt[4]++;
                    cnt[2]=0;
                }
                
                cnt[9] += (cnt[3]/2);
                cnt[3]%=2;
                
                if(cnt[3]==1){
                    if(cnt[2]==1){
                        cnt[6]++;
                        cnt[3]=0;
                        cnt[2]=0;
                    } else if(cnt[4]==1){
                        cnt[6]++;
                        cnt[3]=0;
                        cnt[2]++;
                        cnt[4]--;
                    }
                }
                int minLen = 0;
                for(int j=0;j<10;j++)
                    minLen+=cnt[j];
                
                if(minLen > countAhead)
                    continue;
                string ans = num.substr(0, pos);
                ans += (char)('0' + numAtThisPos);
                int ones = countAhead - minLen;
                for(int j=0;j<ones;j++)
                    ans += ""1"";
                for(int j=2;j<=9;j++){
                    for(int k=0;k<cnt[j];k++){
                        ans += (char)('0' + j);
                    }
                }
                return ans;
            }
        }
        long long till_now = t;
        int cnt[10];
                memset(cnt, 0, sizeof(cnt));
                for(auto e: primes){
                    while(till_now%e == 0)
                    {
                        till_now/=e;
                        cnt[e]++;
                    }
                }
                if(till_now>1)
                    return ""-1"";
        
        
         cnt[8]+=(cnt[2]/3);
                cnt[2]%=3;
                if(cnt[2] == 2){
                    cnt[4]++;
                    cnt[2]=0;
                }
                
                cnt[9] += (cnt[3]/2);
                cnt[3]%=2;
        
        if(cnt[3]==1){
                    if(cnt[2]==1){
                        cnt[6]++;
                        cnt[3]=0;
                        cnt[2]=0;
                    } else if(cnt[4]==1){
                        cnt[6]++;
                        cnt[3]=0;
                        cnt[2]++;
                        cnt[4]--;
                    }
                }
                for(int j=2;j<=9;j++){
                    for(int k=0;k<cnt[j];k++){
                        ans += (char)('0' + j);
                    }
                }
        
        if(comp(ans, num)){
           int diff = num.size()-ans.size();
           string temp = """";
            for(int i=0;i<diff;i++)
                temp+=""1"";
            ans = temp + ans;
            if(comp(ans, num))
                ans = ""1"" + ans;
        }
                return ans;
        
        return ""-1"";
    }
};",1447778961
aknov711,aknov711,17,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
         int ans=0;
        map<int,int>cnt;
        map<int,int>mp;
        
        for(int i=0;i<nums.size();i++){
            cnt[nums[i]]++;
            mp[nums[i]]+=0;
            mp[nums[i]-k]++;
            mp[nums[i]+k+1]--;
        }
        
        int overlap=0;
        for(auto e: mp){
            overlap += e.second;
            
            int x = overlap;
            x-=cnt[e.first];
            x=min(x, numOperations);
            x+=cnt[e.first];
            ans=max(ans, x);
            
            //cout<<overlap<<"" ""<<e.first<<"" ""<<e.second<<"" ""<<x<<endl;
        }
        
        return ans;
    }
};",1447696681
Jingzhe Tang,skywalkert,18,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& A, int k, int m) {
        typedef long long LL;
        int ans = 0;
        map<int, int> ctr;
        for(int x: A)
            ++ctr[x];
        int sum = 0;
        for(auto it = ctr.begin(), jt = it, kt = it; it != ctr.end(); ++it) {
            for( ; jt != ctr.end() && jt -> first + k < it -> first; sum -= (jt++) -> second);
            for( ; kt != ctr.end() && kt -> first <= it -> first + k; sum += (kt++) -> second);
            int cur = it -> second;
            ans = max(ans, min(sum, m + cur));
        }
        sum = 0;
        for(auto it = ctr.begin(), jt = it, kt = it; it != ctr.end(); ++it) {
            LL M = it -> first + k, R = M + k;
            for( ; jt != ctr.end() && jt -> first < M; ++jt);
            for( ; kt != ctr.end() && kt -> first <= R; sum += (kt++) -> second);
            ans = max(ans, min(sum, m));
            sum -= it -> second;
        }
        return ans;
    }
};",1447688454
Jingzhe Tang,skywalkert,18,3626,cpp,"class Solution {
    bool chk(int n, int t) {
        int rem = 1;
        for(char ch: to_string(n))
            rem = rem * (ch - '0') % t;
        return !rem;
    }
public:
    int smallestNumber(int n, int t) {
        for( ; !chk(n, t); ++n);
        return n;
    }
};",1447663110
Jingzhe Tang,skywalkert,18,3635,cpp,"class Solution {
public:
    string smallestNumber(string num, long long t) {
        typedef long long LL;
        static const int pr[4] = {2, 3, 5, 7}, ex[4] = {3, 2, 1, 1};
        static const char *pat = ""8957"";
        int upp[4] = {};
        for(int i = 0; i < 4; ++i)
            for( ; t % pr[i] == 0; t /= pr[i], ++upp[i]);
        if(t > 1)
            return ""-1"";
        int n = num.size(), low[4] = {}, m = 0;
        for( ; m < n; ++m) {
            if(num[m] == '0') {
                ++m;
                break;
            }
            for(int j = 0, o = num[m] - '0'; j < 4 && o > 1; ++j)
                for( ; o % pr[j] == 0; o /= pr[j], ++low[j]);
        }
        static int dt[4];
        auto getCost = [&]() -> int {
            int ret = 0;
            for(int i = 0; i < 4; ++i) {
                dt[i] = max(upp[i] - low[i], 0);
                ret += dt[i] / ex[i];
                dt[i] %= ex[i];
            }
            if(dt[0] + dt[1] > 0)
                ret += dt[0] == 2 && dt[1] == 1 ? 2 : 1;
            return ret;
        };
        auto gen = [&](int L) {
            int M = L, R = num.size();
            for(int i = 0; i < 4; ++i) {
                dt[i] = max(upp[i] - low[i], 0);
                for( ; dt[i] >= ex[i]; num[M++] = pat[i], dt[i] -= ex[i]);
            }
            if(dt[0] == 2 && dt[1] == 1) {
                num[M++] = '2';
                num[M++] = '6';
            } else if(dt[0] + dt[1] > 0) {
                int prd = 1;
                for( ; dt[0] > 0; --dt[0], prd *= pr[0]);
                for( ; dt[1] > 0; --dt[1], prd *= pr[1]);
                num[M++] = '0' + prd;
            }
            for( ; M < R; num[M++] = '1');
            sort(num.begin() + L, num.begin() + R);
        };
        if(m == n && num[m - 1] != '0' && !getCost())
            return num;
        while(m > 0) {
            int sta = num[m - 1] - '0';
            for(int j = 0, o = sta; j < 4 && o > 1; ++j)
                for( ; o % pr[j] == 0; o /= pr[j], --low[j]);
            while(sta < 9) {
                ++sta;
                for(int j = 0, o = sta; j < 4 && o > 1; ++j)
                    for( ; o % pr[j] == 0; o /= pr[j], ++low[j]);
                if(getCost() <= n - m) {
                    num[m - 1] = '0' + sta;
                    gen(m);
                    return num;
                }
                for(int j = 0, o = sta; j < 4 && o > 1; ++j)
                    for( ; o % pr[j] == 0; o /= pr[j], --low[j]);
            }
            --m;
        }
        num.resize(max(getCost(), n + 1));
        gen(0);
        return num;
        // 2 3 5 7
        // 3000 0200 0010 0001 | 1100
        // 30 02 11
        // 00 | 01 10 11 20 | 21
    }
};",1447771760
Jingzhe Tang,skywalkert,18,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& A, int k, int m) {
        typedef long long LL;
        int ans = 0;
        map<int, int> ctr;
        for(int x: A)
            ++ctr[x];
        int sum = 0;
        for(auto it = ctr.begin(), jt = it, kt = it; it != ctr.end(); ++it) {
            for( ; jt != ctr.end() && jt -> first + k < it -> first; sum -= (jt++) -> second);
            for( ; kt != ctr.end() && kt -> first <= it -> first + k; sum += (kt++) -> second);
            int cur = it -> second;
            ans = max(ans, min(sum, m + cur));
        }
        sum = 0;
        for(auto it = ctr.begin(), jt = it, kt = it; it != ctr.end(); ++it) {
            LL M = it -> first + k, R = M + k;
            for( ; jt != ctr.end() && jt -> first < M; ++jt);
            for( ; kt != ctr.end() && kt -> first <= R; sum += (kt++) -> second);
            ans = max(ans, min(sum, m));
            sum -= it -> second;
        }
        return ans;
    }
};",1447687850
Ethan,ethanrao,21,3622,cpp,"class Solution {
public:
    int n;
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        n = nums.size();
        int l = 0, r = 0;
        std::sort(nums.begin(), nums.end());
        int ans = 0;
        for(; l < n; ++l){
            while(r < n - 1 && nums[r + 1] - nums[l] <= 2 * k) ++r;
            ans = std::max(ans, std::min(r - l + 1, numOperations));
        }
        for(l = 0, r = 0; l < n; l = r + 1){
            r = l;
            while(r < n - 1 && nums[r + 1] == nums[r]) ++r;
            int t1, t2, L, R;
            L = 0, R = l;
            while(L < R){
                int mid = L + R >> 1;
                if(nums[l] - nums[mid] <= k) R = mid;
                else L = mid + 1;
            }
            t1 = l - L;
            L = r, R = n - 1;
            while(L < R){
                int mid = L + R + 1 >> 1;
                if(nums[mid] - nums[r] <= k) L = mid;
                else R = mid - 1;
            }
            t2 = L - r;
            ans = std::max(ans, r - l + 1 + std::min(numOperations, t1 + t2));
        }
        return ans;
    }
};",1447672725
Ethan,ethanrao,21,3626,cpp,"class Solution {
public:    
    int smallestNumber(int n, int t) {
        int k = 1000000000;
        for (int i = n; i<=k ; i++) {
            int ans = 1, tt = i;
            while (tt > 0) {
                ans *= (tt % 10);
                tt /= 10;
            }
            if (ans % t == 0) return i;
        }
        return 1;
    }
};
",1447674170
Ethan,ethanrao,21,3635,cpp,"class Solution {
public:
    int d[4], e[4], f[4], ans[10], g[4];
    string smallestNumber(string num, long long t) {
        long long tt = t;
        while(tt % 2 == 0) ++d[0], tt /= 2;
        while(tt % 3 == 0) ++d[1], tt /= 3;
        while(tt % 5 == 0) ++d[2], tt /= 5;
        while(tt % 7 == 0) ++d[3], tt /= 7;
        if(tt > 1){
            std::string res;
            res += '-', res += '1';
            return res;
        }
        int n = num.size();
        bool flag = true;
        for(int i = 0; i < n; ++i){
            if(num[i] == '2') ++e[0];
            else if(num[i] == '3') ++e[1];
            else if(num[i] == '4') e[0] += 2;
            else if(num[i] == '5') ++e[2];
            else if(num[i] == '6') ++e[0], ++e[1];
            else if(num[i] == '7') ++e[3];
            else if(num[i] == '8') e[0] += 3;
            else if(num[i] == '9') e[1] += 2;
            if(num[i] == '0') flag = false;
        }
        if(d[0] <= e[0] && d[1] <= e[1] && d[2] <= e[2] && d[3] <= e[3] && flag == true) return num;
        e[0] = e[1] = e[2] = e[3] = 0;
        int ok1 = -1, ok2 = -1;
        for(int i = 0; i < n; ++i){
            for(int j = 9; j >= num[i] - '0' + 1; --j){
                for(int k = 0; k <= 3; ++k) f[k] = e[k];
                if(j == 2) ++f[0];
                else if(j == 3) ++f[1];
                else if(j == 4) f[0] += 2;
                else if(j == 5) ++f[2];
                else if(j == 6) ++f[0], ++f[1];
                else if(j == 7) ++f[3];
                else if(j == 8) f[0] += 3;
                else if(j == 9) f[1] += 2;
                int sy = 0;
                if(d[0] >= f[0]) sy += (d[0] - f[0] + 2) / 3;
                if(d[1] >= f[1]) sy += (d[1] - f[1] + 1) / 2;
                if(d[2] >= f[2]) sy += d[2] - f[2];
                if(d[3] >= f[3]) sy += d[3] - f[3];
                if(d[0] >= f[0] && d[1] >= f[1] && (d[0] - f[0]) % 3 == 1 && (d[1] - f[1]) % 2 == 1) --sy;
                //if(i == 1 && j == 4) printf(""%d %d %d %d\n"", f[0], f[1], f[2], f[3]);
                if(sy <= n - 1 - i){
                    ok1 = i;
                    ok2 = j;
                    g[0] = f[0];
                    g[1] = f[1];
                    g[2] = f[2];
                    g[3] = f[3];
                }
            }
            if(num[i] == '2') ++e[0];
            else if(num[i] == '3') ++e[1];
            else if(num[i] == '4') e[0] += 2;
            else if(num[i] == '5') ++e[2];
            else if(num[i] == '6') ++e[0], ++e[1];
            else if(num[i] == '7') ++e[3];
            else if(num[i] == '8') e[0] += 3;
            else if(num[i] == '9') e[1] += 2;
            if(num[i] == '0') break;
        }
        if(ok1 == -1 && ok2 == -1){
            ans[8] = d[0] / 3;
            if(d[0] % 3 == 1) ++ans[2];
            if(d[0] % 3 == 2) ++ans[4];
            ans[9] = d[1] / 2;
            if(d[1] % 2 == 1) ++ans[3];
            ans[5] = d[2];
            ans[7] = d[3];
            if(d[0] % 3 == 1 && d[1] % 2 == 1){
                --ans[2], --ans[3];
                ++ans[6];
            }
            if(d[0] % 3 == 2 && d[1] % 2 == 1){
                --ans[4], --ans[3];
                ++ans[2], ++ans[6];
            }
            std::string res;
            for(int i = 0; i <= 9; ++i){
                for(int j = 1; j <= ans[i]; ++j){
                    res += (i + '0');
                }
            }
            std::string II;
            for(int i = 1; i <= (int)num.size() - (int)res.size() + 1; ++i) II += '1';
            res = II + res;
            return res;
        }
        std::string res;
        for(int i = 0; i < ok1; ++i) res += num[i];
        res += ('0' + ok2);
        for(int i = 0; i <= 3; ++i) d[i] = std::max(0, d[i] - g[i]);
        ans[8] = d[0] / 3;
        if(d[0] % 3 == 1) ++ans[2];
        if(d[0] % 3 == 2) ++ans[4];
        ans[9] = d[1] / 2;
        if(d[1] % 2 == 1) ++ans[3];
        ans[5] = d[2];
        ans[7] = d[3];
        if(d[0] % 3 == 1 && d[1] % 2 == 1){
            --ans[2], --ans[3];
            ++ans[6];
        }
        if(d[0] % 3 == 2 && d[1] % 2 == 1){
            --ans[4], --ans[3];
            ++ans[2], ++ans[6];
        }
        ans[1] = n - ok1 - 1 - ans[2] - ans[3] - ans[4] - ans[5] - ans[6] - ans[7] - ans[8] - ans[9];
        for(int i = 0; i <= 9; ++i){
            for(int j = 1; j <= ans[i]; ++j){
                res += (i + '0');
            }
        }
        return res;
    } 
};",1447784906
Ethan,ethanrao,21,3640,cpp,"class Solution {
public:
    int n;
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        n = nums.size();
        int l = 0, r = 0;
        std::sort(nums.begin(), nums.end());
        int ans = 0;
        for(; l < n; ++l){
            while(r < n - 1 && nums[r + 1] - nums[l] <= 2 * k) ++r;
            ans = std::max(ans, std::min(r - l + 1, numOperations));
        }
        for(l = 0, r = 0; l < n; l = r + 1){
            r = l;
            while(r < n - 1 && nums[r + 1] == nums[r]) ++r;
            int t1, t2, L, R;
            L = 0, R = l;
            while(L < R){
                int mid = L + R >> 1;
                if(nums[l] - nums[mid] <= k) R = mid;
                else L = mid + 1;
            }
            t1 = l - L;
            L = r, R = n - 1;
            while(L < R){
                int mid = L + R + 1 >> 1;
                if(nums[mid] - nums[r] <= k) L = mid;
                else R = mid - 1;
            }
            t2 = L - r;
            ans = std::max(ans, r - l + 1 + std::min(numOperations, t1 + t2));
        }
        return ans;
    }
};",1447672247
Vladislav,timetoai,22,3622,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, ops: int) -> int:
        nums.sort()
        ret = 1
        for num in set(nums):
            i1 = bisect_left(nums, num - k)
            i2 = bisect_right(nums, num + k)
            cnt = bisect_left(nums, num + 1) - bisect_left(nums, num)
            ret = max(ret, min(i2 - i1, ops + cnt))
        r = 0
        for l in range(len(nums)):
            while r + 1 < len(nums) and r + 1 - l + 1 <= ops and nums[r + 1] - nums[l] <= 2 * k:
                r += 1
            ret = max(ret, r - l + 1)
        return ret
        ",1447671837
Vladislav,timetoai,22,3626,python3,"class Solution:
    def smallestNumber(self, n: int, t: int) -> int:
        while True:
            x = n
            prod = 1
            while x > 0:
                x, rem = divmod(x, 10)
                prod *= rem
            if prod % t == 0:
                return n
            n += 1",1447658023
Vladislav,timetoai,22,3635,python3,"def form(req):
    req = {key: max(0, val) for key, val in req.items()}
    nine, three = divmod(req[3], 2)
    eight, two = divmod(req[2], 3)
    if three > 0 and two > 0:
        six = 1
        three -= 1
        two -= 1
    else:
        six = 0
    five = req[5]
    seven = req[7]
    if two == 2:
        four = 1
        two -= 2
    else:
        four = 0
    min_set = ""2"" * two + ""3"" * three + ""4"" * four + ""5"" * five + \
        ""6"" * six + ""7"" * seven + ""8"" * eight + ""9"" * nine
    return min_set


class Solution:
    def smallestNumber(self, num: str, t: int) -> str:
        order = [[], [], [2], [3], [2, 2], [5], [2, 3], [7], [2,2,2], [3,3]]
        req = {2: 0, 3: 0, 5: 0, 7: 0}
        for i in req:
            while t % i == 0:
                t //= i
                req[i] += 1
        if t != 1:
            return ""-1""
        print(""base req"", req)

        min_set = form(req)
        if len(min_set) > len(num):
            return min_set
        
        ret = list(map(int, num))
        has_zero = False
        for i in range(len(ret)):
            if has_zero:
                ret[i] = 1
            elif ret[i] == 0:
                has_zero = True
                ret[i] = 1
        for num in ret:
            for mul in order[num]:
                req[mul] -= 1
        if any(v > 0 for v in req.values()):
            for i in range(len(ret) - 1, - 1, - 1):
                for mul in order[ret[i]]:
                    req[mul] += 1
                # print(req)
                for ni in range(ret[i] + 1, 10):
                    for mul in order[ni]:
                        req[mul] -= 1
                    cur_min = form(req)
                    # print(ret[:i], ni, cur_min, req)
                    if len(cur_min) <= len(ret) - i - 1:
                        rem = len(ret) - i - 1
                        return ''.join(map(str, ret[:i])) + str(ni) + ""1"" * (rem - len(cur_min)) + cur_min
                    for mul in order[ni]:
                        req[mul] += 1
            return ""1"" * (len(ret) + 1 - len(min_set)) + min_set
                    
        return ''.join(map(str, ret))
        ",1447769105
Vladislav,timetoai,22,3640,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, ops: int) -> int:
        nums.sort()
        ret = 1
        for num in set(nums):
            i1 = bisect_left(nums, num - k)
            i2 = bisect_right(nums, num + k)
            cnt = bisect_left(nums, num + 1) - bisect_left(nums, num)
            ret = max(ret, min(i2 - i1, ops + cnt))
        r = 0
        for l in range(len(nums)):
            while r + 1 < len(nums) and r + 1 - l + 1 <= ops and nums[r + 1] - nums[l] <= 2 * k:
                r += 1
            ret = max(ret, r - l + 1)
        return ret
        ",1447672684
Nutty Professor,varkatkl,24,3622,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        nums.sort()
        MAX = nums[-1]
        N = len(nums)
        counts = [0] * (MAX + 10)
        for num in nums:
            counts[num] += 1

        def check(n):
            if n > N:
                return False
            i = 0
            heap = []
            r2 = 0
            while i + n <= N:
                # [i, i + n - 1]
                L, R = nums[i], nums[i + n - 1]
                i += 1
                vl, vr = R - k, L + k
                while r2 <= MAX and r2 <= L + k:
                    heapq.heappush(heap, (-counts[r2], r2))
                    r2 += 1
                while heap and heap[0][1] < R - k:
                    heapq.heappop(heap)
                if R - L <= 2 * k:
                    eq = 0 if not heap else -heap[0][0]
                    if n - eq <= numOperations:
                        return True
            return False

        lo, hi = 1, N + 1
        while hi - lo > 1:
            mid = (lo + hi) // 2
            if check(mid):
                lo = mid
            else:
                hi = mid
        return lo
",1447740173
Nutty Professor,varkatkl,24,3626,python3,"class Solution:
    def smallestNumber(self, n: int, t: int) -> int:
        def digit_product(n):
            ret = 1
            while n > 0:
                ret *= n % 10
                n //= 10
            return ret

        while digit_product(n) % t != 0:
            n += 1
        return n
",1447653883
Nutty Professor,varkatkl,24,3635,python3,"d_counts = [
            [0, 0, 0, 0],
            [0, 0, 0, 0],
            [1, 0, 0, 0],
            [0, 1, 0, 0],
            [2, 0, 0, 0],
            [0, 0, 1, 0],
            [1, 1, 0, 0],
            [0, 0, 0, 1],
            [3, 0, 0, 0],
            [0, 2, 0, 0]
        ]
PRIMES = [2, 3, 5, 7]
def min_digits(counts):
        c2, c3, c5, c7 = counts
        ret = 0
        digits = [0] * 10
        ret += c3 // 2
        digits[9] += c3 // 2
        c3 %= 2
        ret += c2 // 3
        digits[8] += c2 // 3
        c2 %= 3
        ret += c7
        digits[7] += c7
        c7 = 0
        if c2 > 0 and c3 > 0:
            c2 -= 1
            c3 -= 1
            ret += 1
            digits[6] += 1
        ret += c5
        digits[5] += c5
        c5 = 0
        if c2 >= 2:
            ret += 1
            c2 -= 2
            digits[4] += 1
        if c3 > 0:
            ret += 1
            digits[3] += 1
        if c2 > 0:
            ret += 1
            digits[2] += 1
        return ret, digits


class Solution:
    def smallestNumber(self, num: str, t: int) -> str:
        
        t_counts = [0, 0, 0, 0]
        tt = t
        for i, p in enumerate(PRIMES):
            while tt % p == 0:
                t_counts[i] += 1
                tt = tt // p

        if tt != 1:
            return ""-1""

        
        N = len(num)
        nonzero = [True] * (N + 1)
        for i in range(N):
            nonzero[i + 1] = nonzero[i] and (num[i] != '0')
        pp = 1
        for i in range(N):
            pp = pp * int(num[i]) % t
        if nonzero[N] and pp == 0:
            return num

        # result strictly g.t num
        
        pref = [[0] * 4 for _ in range(N + 1)]
        for i in range(N):
            d = int(num[i])
            for j in range(4):
                pref[i + 1][j] = pref[i][j] + d_counts[d][j]
            
        for i in range(N - 1, -1, -1):
            if not nonzero[i]:
                continue
            d = int(num[i])
            counts = pref[i][:]
            for d2 in range(d + 1, 10):
                for j in range(4):
                    counts[j] += d_counts[d2][j]

                need_counts = [0] * 4
                for j in range(4):
                    need_counts[j] = max(0, t_counts[j] - counts[j])

                for j in range(4):
                    counts[j] -= d_counts[d2][j]
                dc, digs = min_digits(need_counts)
                if dc + i + 1 <= N:
                    suffix = []
                    for ii in range(2, 10):
                        suffix += [str(ii)] * digs[ii]
                    extra = N - i - 1 - dc
                    suffix = ''.join('1' for _ in range(extra)) + ''.join(suffix)
                    return num[:i] + str(d2) + suffix

        return self.smallestNumber('1' + ('0' * N), t)",1447800957
Nutty Professor,varkatkl,24,3640,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        nums.sort()
        N = len(nums)
        counts = sorted(collections.Counter(nums).items())
        NC = len(counts)
        def check(n):
            if n > N:
                return False
            i = 0
            heap = []
            r2 = 0
            while i + n <= N:
                # [i, i + n - 1]
                L, R = nums[i], nums[i + n - 1]
                i += 1
                vl, vr = R - k, L + k
                while r2 < NC and counts[r2][0] <= L + k:
                    heapq.heappush(heap, (-counts[r2][1], counts[r2][0]))
                    r2 += 1
                while heap and heap[0][1] < R - k:
                    heapq.heappop(heap)
                if R - L <= 2 * k:
                    eq = 0 if not heap else -heap[0][0]
                    if n - eq <= numOperations:
                        return True
            return False

        lo, hi = 1, N + 1
        while hi - lo > 1:
            mid = (lo + hi) // 2
            if check(mid):
                lo = mid
            else:
                hi = mid
        return lo
",1447745539
Dylan Smith,DylanSmith,25,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int K, int numOperations) {
        sort(nums.begin(), nums.end());
        map<int, int> freq;
        for (int i : nums) freq[i]++;
        vector<pair<int, int>> pairs;
        for (auto &p : freq) {
            pairs.push_back(p);
        }
        int j = 0, k = 0;
        vector<int> pre((int)pairs.size());
        for (int i = 0; i < (int)pairs.size(); i++) {
            pre[i] = pairs[i].second;
            if (i > 0) pre[i] += pre[i - 1];
        }
        int res = 0;
        for (int i = 0; i < (int)pairs.size(); i++) {
            k = max(k, i);
            while (k + 1 < pairs.size() && pairs[k + 1].first - pairs[i].first <= K) k++;
            while (pairs[i].first - pairs[j].first > K) j++;
            int sum = pre[k] - (j == 0 ? 0 : pre[j - 1]);
            res = max(res, pairs[i].second + min(numOperations, sum - pairs[i].second));
        }
        j = 0;
        for (int i = 0; i < (int)nums.size(); i++) {
            while (nums[i] - nums[j] > K * 2) j++;
            res = max(res, min(numOperations, i - j + 1));
        }
        return res;
    }
};",1447673070
Dylan Smith,DylanSmith,25,3626,cpp,"class Solution {
public:
    bool check(int n, int k) {
        int sum = 1;
        while (n) {
            sum *= n % 10;
            n /= 10;
        }
        return sum % k == 0;
    }
    int smallestNumber(int n, int t) {
        int cur = n;
        while (!check(cur, t)) {
            cur++;
        }
        return cur;
    }
};",1447654224
Dylan Smith,DylanSmith,25,3635,cpp,"typedef long long ll;

#define pb push_back
#define sz(x) (int)x.size()
#define all(x) begin(x),end(x)
#define lb(x,y) lower_bound(all(x),y)-begin(x)
class Solution {
public:
    bool check2(int two, int three, int five, int seven, vector<int> &freq) {
        two = max(0, two - freq[2] - freq[4] * 2 - freq[6] - freq[8] * 3);
        three = max(0, three - freq[3] - freq[6] - freq[9] * 2);
        five = max(0, five - freq[5]);
        seven = max(0, seven - freq[7]);
        return !two && !three && !five && !seven;
    }
    string check(int two, int three, int five, int seven, vector<int> &freq) {
        two = max(0, two - freq[2] - freq[4] * 2 - freq[6] - freq[8] * 3);
        three = max(0, three - freq[3] - freq[6] - freq[9] * 2);
        five = max(0, five - freq[5]);
        seven = max(0, seven - freq[7]);
        string res = """";
        while (two > 1) {
            res += ""8"";
            two = max(0, two - 3);
        }
        while (three > 1) {
            res += ""9"";
            three = max(0, three - 2);
        }
        if (two || three) {
            res += ""6"";
        }
        while (five) {
            res += ""5"";
            five--;
        }
        while (seven) {
            res += ""7"";
            seven--;
        }
        sort(all(res));
        return res;
    }
    string smallestNumber(string num, long long t) {
        for (int i = 0; i < sz(num); i++) {
            if (num[i] == '0') {
                for (int j = i; j < sz(num); j++) {
                    num[j] = '1';
                }
                break;
            }
        }
        int two = 0, three = 0, five = 0, seven = 0;
        while (t % 2 == 0) {
            two++;
            t /= 2;
        }
        while (t % 3 == 0) {
            three++;
            t /= 3;
        }
        while (t % 5 == 0) {
            five++;
            t /= 5;
        }
        while (t % 7 == 0) {
            seven++;
            t /= 7;
        }
        if (t > 1) return ""-1"";
        vector<int> freq(10, 0);
        for (char c : num) freq[c - '0']++;
        if (check2(two, three, five, seven, freq)) return num;
        for (int i = sz(num) - 1; i >= 0; i--) {
            freq[num[i] - '0']--;
            if (num[i] < '9') {
                for (char c = num[i] + 1; c <= '9'; c++) {
                    freq[c - '0']++;
                    string s = check(two, three, five, seven, freq);
                    if (sz(s) < sz(num) - i) {
                        // solution found w/ this length
                        num[i] = c;
                        for (int j = i + 1; j < sz(num); j++) {
                            
                            for (char c2 = '1'; c2 <= '9'; c2++) {
                                freq[c2 - '0']++;
                                string s2 = check(two, three, five, seven, freq);
                                if (sz(s2) < sz(num) - j) {
                                    num[j] = c2;
                                    break;
                                }
                                freq[c2 - '0']--;
                            }
                        }
                        return num;
                    }
                    freq[c - '0']--;
                }
            }
        }
        string res = check(two, three, five, seven, freq);
        while (sz(res) <= sz(num)) res += ""1"";
        for (int i = 0; i < sz(res); i++) {
            for (char c  = '1'; c <= '9'; c++) {
                freq[c - '0']++;
                string s = check(two, three, five, seven, freq);
                if (sz(s) < sz(res) - i) {
                    res[i] = c;
                    break;
                }
                freq[c - '0']--;
            }
        }
        return res;
    }
};",1447794627
Dylan Smith,DylanSmith,25,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int K, int numOperations) {
        sort(nums.begin(), nums.end());
        map<int, int> freq;
        for (int i : nums) freq[i]++;
        vector<pair<int, int>> pairs;
        for (auto &p : freq) {
            pairs.push_back(p);
        }
        int j = 0, k = 0;
        vector<int> pre((int)pairs.size());
        for (int i = 0; i < (int)pairs.size(); i++) {
            pre[i] = pairs[i].second;
            if (i > 0) pre[i] += pre[i - 1];
        }
        int res = 0;
        for (int i = 0; i < (int)pairs.size(); i++) {
            k = max(k, i);
            while (k + 1 < pairs.size() && pairs[k + 1].first - pairs[i].first <= K) k++;
            while (pairs[i].first - pairs[j].first > K) j++;
            int sum = pre[k] - (j == 0 ? 0 : pre[j - 1]);
            res = max(res, pairs[i].second + min(numOperations, sum - pairs[i].second));
        }
        j = 0;
        for (int i = 0; i < (int)nums.size(); i++) {
            while (nums[i] - nums[j] > K * 2) j++;
            res = max(res, min(numOperations, i - j + 1));
        }
        return res;
    }
};",1447673916
Haunted_Cpp,Xx_DarDoAzuL_xX,26,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        int mx = 0;
        const int MX = *max_element(nums.begin(), nums.end());
        vector<int> pre(MX + 10);
        map<int, int> cnt;
        for (auto& value : nums) {
            int lo = max(0, value - k);
            int hi = min(MX + 3, value + k);
            ++pre[lo];
            --pre[hi + 1];
            ++cnt[value];
        }

        int sum = 0;
        for (int i = 0; i < MX + 5; i++) {
            sum += pre[i];

            int add = sum - cnt[i];
            add = min(add, numOperations);
            mx = max(mx, cnt[i] + add);
        }

        return mx;
    }
};",1447664869
Haunted_Cpp,Xx_DarDoAzuL_xX,26,3626,cpp,"class Solution {
public:
    int smallestNumber(int n, int t) {
        auto prod = [&](int m) {
          long long pt = 1;
            while (m) {
                pt *= m % 10;
                m /= 10;
            }
            return pt;
        };
        for (int i = n; ; i++) {
            if ((prod(i) % t) == 0) {
                return i;
            }
        }
        return -1;
    }
};",1447653056
Haunted_Cpp,Xx_DarDoAzuL_xX,26,3635,cpp,"class Solution {
public:
    const static int N = 48;
    int dp[N][N][N][N];
    string smallestNumber(string num, long long t) {

        vector<int> cnt(10);
        auto factor_integer = [&](long long n, int fill) {
            if (fill) {
                for (auto& to : cnt) to = 0;
            }
            vector<int> factor;
            for (int i = 2; i <= min(9LL, n); i++) {
              while ((n % i) == 0) {
                n /= i;
                factor.emplace_back(i);
                if (fill) ++cnt[i];
              }
            }
            if (n >= 2) {
                if (fill && n < 10) ++cnt[n];
                factor.emplace_back(n);
            }
            return factor;
        };
        auto check = factor_integer(t, 1);
        if (check.back() > 9) {
            return ""-1"";
        }
        vector< vector<int> > f(10);
        for (int i = 2; i <= 9; i++) f[i] = factor_integer(i, 0);

        for (int i = 0; i <= cnt[2]; i++) {
            for (int j = 0; j <= cnt[3]; j++) {
                for (int a = 0; a <= cnt[5]; a++) {
                    for (int b = 0; b <= cnt[7]; b++) {
                        dp[i][j][a][b] = -1;
                    }
                }
            }
        }
     
        const int INF = 1e9;
        
        auto best_way = [&](auto&& self, int two, int three, int five, int seven) {
            if (two + three + five + seven == 0) return 0;

            assert(two >= 0);
            assert(three >= 0);
            assert(five >= 0);
            assert(seven >= 0);
            int& res = dp[two][three][five][seven];
            if (~res) return res;
            
            res = INF;

            // put a five
            if (five)  res = min(res, 1 + self(self, two, three, max(0, five - 1), seven));
            if (seven) res = min(res, 1 + self(self, two, three, five, max(0, seven - 1)));
            if (two) {
                // 2
                res = min(res, 1 + self(self, max(0, two - 1), three, five, seven));
                // 4
                res = min(res, 1 + self(self, max(0, two - 2), three, five, seven));
                // 6
                res = min(res, 1 + self(self, max(0, two - 1), max(0, three - 1), five, seven));
                // 8
                res = min(res, 1 + self(self, max(0, two - 3), three, five, seven));
            }
            if (three) {
                // 3
                res = min(res, 1 + self(self, two, max(0, three - 1), five, seven));
                // 9
                res = min(res, 1 + self(self, two, max(0, three - 2), five, seven));
            }
            
            return res;
        };

        string calc;
        auto backtrack = [&](auto&& self, int two, int three, int five, int seven) {
            if (two + three + five + seven == 0) return;
         

            int opt = best_way(best_way, two, three, five, seven);

            vector<int> nxt(10);
            
            for (int i = 2; i <= 9; i++) {

                nxt[2] = two;
                nxt[3] = three;
                nxt[5] = five;
                nxt[7] = seven;

                for (auto& ff : f[i]) {
                    --nxt[ff];
                    nxt[ff] = max(0, nxt[ff]);
                }

                assert(nxt[2] >= 0);
                assert(nxt[3] >= 0);
                assert(nxt[5] >= 0);
                assert(nxt[7] >= 0);
                
                if (opt == 1 + best_way(best_way, nxt[2], nxt[3], nxt[5], nxt[7])) {
                    calc += (char) ('0' + i);
                    self(self, nxt[2], nxt[3], nxt[5], nxt[7]);
                    return;
                }
            }
            assert(false);
        };

        int has_zero = 0;
        // with same size
        for (auto& c : num) {
            if (c == '0') ++has_zero;
            int dig = c - '0';
            for (auto& ff : f[dig]) {
                --cnt[ff];
            }
        }
        if (has_zero == 0 && *max_element(cnt.begin(), cnt.end()) <= 0) {
            return num;
        }

        int empty_spot = 0;

        vector<string> get_best;
        string ans1 = ""-1"";
        
        for (int i = (int) num.size() - 1; i >= 0; i--) {

            // add digit again
            int dig = num[i] - '0';
            for (auto& ff : f[dig]) ++cnt[ff];
            has_zero -= (dig == 0);

            if (!has_zero) {

                // try a bigger one
                for (int j = dig + 1; j <= 9; j++) {
                    for (auto& ff : f[j]) --cnt[ff];
                    int opt = best_way(best_way, max(0, cnt[2]), max(0, cnt[3]), max(0, cnt[5]), max(0, cnt[7]));
                    
                    
                    if (opt <= empty_spot) {
    
                        int d = empty_spot - opt;
             //           cout << i << ' ' << j << '\n';
                        ans1 = """";
                        ans1 = num.substr(0, i);
                        ans1 += (char) ('0' + j);
    
                        while (d--) ans1 += '1';
                        
                        calc = """";
                        backtrack(backtrack, max(0, cnt[2]), max(0, cnt[3]), max(0, cnt[5]), max(0, cnt[7]));
                        ans1 += calc;
                        get_best.emplace_back(ans1);
                       // for (auto& ff : f[j]) ++cnt[ff];
                        goto done;
                    }
                    for (auto& ff : f[j]) ++cnt[ff];
                }
            }
            ++empty_spot;
        }
        done:;
        // with greater size
        
        {
            check = factor_integer(t, 1);
            calc = """";
            backtrack(backtrack, cnt[2], cnt[3], cnt[5], cnt[7]);
            
            string best_way = calc;
            
            int diff = max(0, (int) num.size() - (int) best_way.size() + 1) ;
   
            if (diff) best_way = string(diff, '1') + best_way;
            // try this one
            get_best.emplace_back(best_way);
        }
        
        sort(get_best.begin(), get_best.end(), [&](const string& a, const string& b) {
           return a.size() < b.size() || (a.size() < b.size() && a < b); 
        });

      
        
        return get_best[0];
    }
};",1447795618
Haunted_Cpp,Xx_DarDoAzuL_xX,26,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        int mx = 0;
        const int MX = *max_element(nums.begin(), nums.end());
        //vector<int> pre(MX + 10);
        map<int, int> cnt;
        map<int, vector< int > > events;
        
        for (auto& value : nums) {
            int lo = max(0, value - k);
            int hi = min(MX + 3, value + k);

            events[lo].emplace_back(+1);
            //++pre[lo];
            //--pre[hi + 1];
            events[hi + 1].emplace_back(-1);
            ++cnt[value];
            events[value].emplace_back(+0);
        }

        int sum = 0;
        for (auto& [value, event] : events) {
            for (auto& to : event) {
                sum += to;
            }
            int add = sum - cnt[ value ];
            add = min(add, numOperations);
            mx = max(mx, cnt[ value ] + add);
        }

        return mx;
    }
};",1447672459
Abhishek Choudhary,theabbie,32,3622,python3,"import bisect

class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        nums.sort()
        ctr = Counter(nums)
        s = set()
        for el in nums:
            s.add(el)
            s.add(el - k)
            s.add(el + k)
        res = 0
        for el in s:
            res = max(res, ctr[el] + min(bisect.bisect_right(nums, el + k) - bisect.bisect_left(nums, el - k) - ctr[el], numOperations))
        return res",1447664319
Abhishek Choudhary,theabbie,32,3626,python3,"class Solution:
    def smallestNumber(self, n: int, t: int) -> int:
        def prod(x):
            p = 1
            while x:
                p *= (x % 10)
                x //= 10
            return p
        while prod(n) % t != 0:
            n += 1
        return n",1447666533
Abhishek Choudhary,theabbie,32,3640,python3,"import bisect

class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        nums.sort()
        ctr = Counter(nums)
        s = set()
        for el in nums:
            s.add(el)
            s.add(el - k)
            s.add(el + k)
        res = 0
        for el in s:
            res = max(res, ctr[el] + min(bisect.bisect_right(nums, el + k) - bisect.bisect_left(nums, el - k) - ctr[el], numOperations))
        return res",1447663547
Ryan,ryanwong0127,33,3622,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        counts = defaultdict(int)
        events = defaultdict(int)
        for num in nums:
            counts[num] += 1
            start = num - k
            end = num + k + 1 
            events[start] += 1
            events[end] -= 1

        points = set(events.keys())
        points.update(counts.keys())
        sorted_points = sorted(points)

        current_count_adjustable = 0
        res = 0
        
        for x in sorted_points:
            if x in events:
                current_count_adjustable += events[x]
            adjusted_count = current_count_adjustable - counts.get(x, 0)
            adjusted_count = max(0, adjusted_count)
            total_count = counts.get(x, 0) + min(adjusted_count, numOperations)
            res = max(res, total_count)

        return res",1447667133
Ryan,ryanwong0127,33,3626,python3,"class Solution:
    def smallestNumber(self, n: int, t: int) -> int:
        def product_of_digits(x):
            p = 1
            while x > 0:
                p *= (x % 10)
                x = x// 10
                if p == 0:
                    break
            return p

        curr = n
        while True:
            prod = product_of_digits(curr)
            if t == 0:
                if prod == 0:
                    return curr
            else:
                if prod % t == 0:
                    return curr
            curr += 1",1447653902
Ryan,ryanwong0127,33,3640,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        counts = defaultdict(int)
        events = defaultdict(int)
        for num in nums:
            counts[num] += 1
            start = num - k
            end = num + k + 1 
            events[start] += 1
            events[end] -= 1

        points = set(events.keys())
        points.update(counts.keys())
        sorted_points = sorted(points)

        current_count_adjustable = 0
        res = 0
        
        for x in sorted_points:
            if x in events:
                current_count_adjustable += events[x]

            adjusted_count = current_count_adjustable - counts.get(x, 0)
            adjusted_count = max(0, adjusted_count)

            total_count = counts.get(x, 0) + min(adjusted_count, numOperations)
            res = max(res, total_count)

        return res

    



",1447666281
SR3mix,SR3mix,34,3622,cpp,"typedef long long ll;
class Solution {
public:
    int maxFrequency(vector<int>& nums_i, int kk, int ops) {
        vector<ll>nums; for (auto i : nums_i) nums.push_back(i);
        ll k = kk;
        sort(nums.begin(), nums.end());
        map<int, int> m;
        for (auto i : nums) m[i]++;
        int ans = 0;
        for (int i = 0; i < nums.size(); i++) {
            ll x = nums[i];
            int pure = 0; if (m.find(x) != m.end()) pure = m[x];
            ll lo = x - k;
            ll hi = x + k;
            int base = upper_bound(nums.begin(), nums.end(), hi) - lower_bound(nums.begin(), nums.end(), lo) - pure;
            int get = pure + min(base, ops);
            //cout << ""v1: "" << i << "","" << get << endl;
            ans = max(ans, get);
        }
        
        for (int i = 0; i < nums.size(); i++) {
            ll x = nums[i] - k;
            int pure = 0; if (m.find(x) != m.end()) pure = m[x];
            ll lo = x - k;
            ll hi = x + k;
            int base = upper_bound(nums.begin(), nums.end(), hi) - lower_bound(nums.begin(), nums.end(), lo) - pure;
            int get = pure + min(base, ops);
            //cout << ""v2: "" << i << "","" << get << endl;
            ans = max(ans, get);
        }
        
        for (int i = 0; i < nums.size(); i++) {
            ll x = nums[i] + k;
            int pure = 0; if (m.find(x) != m.end()) pure = m[x];
            ll lo = x - k;
            ll hi = x + k;
            int base = upper_bound(nums.begin(), nums.end(), hi) - lower_bound(nums.begin(), nums.end(), lo) - pure;
            int get = pure + min(base, ops);
            //cout << ""v3: "" << i << "","" << get << endl;
            ans = max(ans, get);
        }
        
        return ans;
    }
};",1447666797
SR3mix,SR3mix,34,3626,cpp,"class Solution {
public:
    int smallestNumber(int n, int t) {
        for (int i = n; i < 1e6; i++) {
            string s = to_string(i);
            int prod = 1;
            for (auto c : s) prod *= (c - '0');
            if (prod%t == 0) return i;
        }
        return -1;
    }
};",1447668953
SR3mix,SR3mix,34,3640,cpp,"typedef long long ll;
class Solution {
public:
    int maxFrequency(vector<int>& nums_i, int kk, int ops) {
        vector<ll>nums; for (auto i : nums_i) nums.push_back(i);
        ll k = kk;
        sort(nums.begin(), nums.end());
        map<int, int> m;
        for (auto i : nums) m[i]++;
        int ans = 0;
        for (int i = 0; i < nums.size(); i++) {
            ll x = nums[i];
            int pure = 0; if (m.find(x) != m.end()) pure = m[x];
            ll lo = x - k;
            ll hi = x + k;
            int base = upper_bound(nums.begin(), nums.end(), hi) - lower_bound(nums.begin(), nums.end(), lo) - pure;
            int get = pure + min(base, ops);
            //cout << ""v1: "" << i << "","" << get << endl;
            ans = max(ans, get);
        }
        
        for (int i = 0; i < nums.size(); i++) {
            ll x = nums[i] - k;
            int pure = 0; if (m.find(x) != m.end()) pure = m[x];
            ll lo = x - k;
            ll hi = x + k;
            int base = upper_bound(nums.begin(), nums.end(), hi) - lower_bound(nums.begin(), nums.end(), lo) - pure;
            int get = pure + min(base, ops);
            //cout << ""v2: "" << i << "","" << get << endl;
            ans = max(ans, get);
        }
        
        for (int i = 0; i < nums.size(); i++) {
            ll x = nums[i] + k;
            int pure = 0; if (m.find(x) != m.end()) pure = m[x];
            ll lo = x - k;
            ll hi = x + k;
            int base = upper_bound(nums.begin(), nums.end(), hi) - lower_bound(nums.begin(), nums.end(), lo) - pure;
            int get = pure + min(base, ops);
            //cout << ""v3: "" << i << "","" << get << endl;
            ans = max(ans, get);
        }
        
        return ans;
    }
};",1447666062
Dipanshu Pandey,callmepandey,35,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        
        map < int , int > frq;
        map < int , int > ax;
        for(int &i : nums) {
            frq[i - k]++;
            frq[i + k + 1]--;
            frq[i] += 0;
            ax[i]++;
        }
        
        int mx = 0 , sum = 0;
        for(auto &a : frq) {
            sum += a.second;
            int already = sum - ax[a.first];
            int canMax = min(numOperations , already);
            mx = max(mx , canMax + ax[a.first]);
            
        }
        return mx;
    }
};",1447670446
Dipanshu Pandey,callmepandey,35,3626,cpp,"class Solution {
public:
    int smallestNumber(int n, int t) {
        while(1) {
            int product = 1;
            int x = n;
            while(x) {
                product *= x%10;
                x /= 10;
            }
            if(product % t == 0) return n;
            ++n;
        }
        return n;
    }
};",1447653647
Dipanshu Pandey,callmepandey,35,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        
        map < int , int > frq;
        map < int , int > ax;
        for(int &i : nums) {
            frq[i - k]++;
            frq[i + k + 1]--;
            frq[i] += 0;
            ax[i]++;
        }
        
        int mx = 0 , sum = 0;
        for(auto &a : frq) {
            sum += a.second;
            int already = sum - ax[a.first];
            int canMax = min(numOperations , already);
            mx = max(mx , canMax + ax[a.first]);
            
        }
        return mx;
    }
};",1447670907
Arnav Goyal,Pikachu0123,38,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        int n = nums.size();
        const int N = 1e5 + 10;
        vector<int> range(N, 0);
        for(int &x : nums){
            range[max(0, x - k)] += 1;
            range[min(N-1, x + k + 1)] -= 1;
        }
        vector<int> freq(N, 0);
        for(int &x : nums)
            freq[x] += 1;
        int ans = 0;
        for(int i=1; i<N; i++)
            range[i] += range[i-1];
        for(int i=0; i<N; i++){
            ans = max(ans, min(numOperations, range[i] - freq[i]) + freq[i]);
        }

        return ans;
    }
};",1447668836
Arnav Goyal,Pikachu0123,38,3626,cpp,"class Solution {
public:
    int smallestNumber(int n, int t) {
        for(int i=n; i<=1000; i++){
            int pro = 1;
            int temp = i;
            while(temp){
                pro = pro * (temp % 10);
                temp /= 10;
            }
            if (pro % t == 0) return i;
        }
        return 100;
    }
};",1447653512
Arnav Goyal,Pikachu0123,38,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        int n = nums.size();
        vector<int> comp = {-k, k};
        for(int &x : nums){
            comp.push_back(x);
            comp.push_back(x-k);
            comp.push_back(x+k+1);
        }
        sort(comp.begin(), comp.end());

        map<int,int> mp;
        int cnt = 0;
        for(int &x : comp){
            if (mp.find(x) == mp.end())
                mp[x] = cnt++;
        }

        cnt += 10;
        
        vector<int> range(cnt, 0);
        for(int &x : nums){
            range[max(0, mp[x-k])] += 1;
            range[min(cnt-1, mp[x+k+1])] -= 1;
        }
        vector<int> freq(cnt, 0);
        for(int &x : nums)
            freq[mp[x]] += 1;
        int ans = 0;
        for(int i=1; i<cnt; i++)
            range[i] += range[i-1];
        for(int i=0; i<cnt; i++){
            ans = max(ans, min(numOperations, range[i] - freq[i]) + freq[i]);
        }

        return ans;
    }
};",1447676329
Aman Ghosh,Homie_Lander7,39,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        map<int,int>mp,freq;
        int n=nums.size();
        for(auto i:nums){
            freq[i]++;
            mp[i-k]++;
            mp[i+k+1]--;
            mp[i];
        }
        int ans=0,sum=0;
        for(auto i:mp){
            
            sum+=i.second;
            int cur=sum;
            cur-=freq[i.first];
            cur=min(cur,numOperations);
            ans=max(ans,cur+freq[i.first]);
        }
        return ans;
    }
};",1447676411
Aman Ghosh,Homie_Lander7,39,3626,cpp,"class Solution {
public:
    int smallestNumber(int n, int t) {
        for(int i = n; ; i++) {
            int num = i;
            int prod = 1;
            while(num) {
                prod *= num % 10;
                num /= 10;
                prod%=t;
            }
            if(prod % t == 0) return i;
        }
        
    }
};",1447676783
Aman Ghosh,Homie_Lander7,39,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        map<int,int>mp,freq;
        int n=nums.size();
        for(auto i:nums){
            freq[i]++;
            mp[i-k]++;
            mp[i+k+1]--;
            mp[i];
        }
        int ans=0,sum=0;
        for(auto i:mp){
            
            sum+=i.second;
            int cur=sum;
            cur-=freq[i.first];
            cur=min(cur,numOperations);
            ans=max(ans,cur+freq[i.first]);
        }
        return ans;
    }
};",1447676135
Md Abedin,MdAbedin,40,3622,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        counts = Counter(nums)
        c = 0
        ans = 0

        for x in range(-k,max(nums)+k+1):
            c += counts[x+k]
            ans = max(ans,min(numOperations,c-counts[x])+counts[x])
            c -= counts[x-k]

        return ans",1447665822
Md Abedin,MdAbedin,40,3626,python3,"class Solution:
    def smallestNumber(self, n: int, t: int) -> int:
        x = n

        while True:
            if prod(map(int,str(x)))%t == 0: return x
            x += 1",1447653016
Md Abedin,MdAbedin,40,3640,python3,"from sortedcontainers import SortedList

class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        sl = SortedList(nums)
        counts = Counter(nums)
        ans = 0

        for num in nums:
            for x in [num-k,num,num+k]:
                ans = max(ans,min(numOperations,sl.bisect_right(x+k)-sl.bisect_left(x-k)-counts[x])+counts[x])

        return ans",1447676985
Wibo,Wibo,43,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        vector<pair<int, int>> evs;
        for (int x : nums) {
            evs.emplace_back(x-k, 0);
            evs.emplace_back(x, 1);
            evs.emplace_back(x+k+1, 2);
        }

        sort(evs.begin(), evs.end());
        int ans = 0, cnt = 0;
        for (int l=0; l<(int)evs.size(); ) {
            int r = l;
            while (r < (int)evs.size() && evs[l].first == evs[r].first) r++;

            int sub = 0;
            for (int i=l; i<r; i++) {
                if (evs[i].second == 0) cnt++;
                else if (evs[i].second == 1) sub++;
                else cnt--;
            }

            ans = max(ans, min(cnt - sub, numOperations) + sub);
            l = r;
        }

        return ans;
    }
};",1447670223
Wibo,Wibo,43,3626,cpp,"class Solution {
public:
    int smallestNumber(int n, int t) {
        while (1) {
            int p = 1;
            for (int i=n; i; i/=10) p *= i%10;
            if (p == 0 || p % t == 0) return n;
            n++;
        }
    }
};",1447662637
Wibo,Wibo,43,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        vector<pair<int, int>> evs;
        for (int x : nums) {
            evs.emplace_back(x-k, 0);
            evs.emplace_back(x, 1);
            evs.emplace_back(x+k+1, 2);
        }

        sort(evs.begin(), evs.end());
        int ans = 0, cnt = 0;
        for (int l=0; l<(int)evs.size(); ) {
            int r = l;
            while (r < (int)evs.size() && evs[l].first == evs[r].first) r++;

            int sub = 0;
            for (int i=l; i<r; i++) {
                if (evs[i].second == 0) cnt++;
                else if (evs[i].second == 1) sub++;
                else cnt--;
            }

            ans = max(ans, min(cnt - sub, numOperations) + sub);
            l = r;
        }

        return ans;
    }
};",1447670932
czjnbb,czjnbb,44,3622,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        
        nums.sort()
        d = Counter(nums)
        
        keys = sorted(d.keys())
        vals = [d[k] for k in keys]
        
        res = max(d.values())
        
        pres = [0]
        for v in vals:
            pres.append(pres[-1] + v)
        
        for i,n in enumerate(keys):
            
            pl = bisect.bisect_left(keys, n - k)
            pr = bisect.bisect_right(keys, n + k)
            
            tot = min(pres[pr] - pres[pl] - d[n], numOperations)
            res = max(res, tot + d[n])
            
            lpt = n - k
            minus = d[lpt] if lpt in d else 0
            pl = bisect.bisect_left(keys, lpt - k)
            pr = bisect.bisect_right(keys, lpt + k)
            tot = min(pres[pr] - pres[pl] - minus, numOperations)
            res = max(res, tot + minus)
            
            rpt = n + k
            minus = d[rpt] if rpt in d else 0
            pl = bisect.bisect_left(keys, rpt - k)
            pr = bisect.bisect_right(keys, rpt + k)
            tot = min(pres[pr] - pres[pl] - minus, numOperations)
            res = max(res, tot + minus)
            
        return res
            
            
            
            
            ",1447680421
czjnbb,czjnbb,44,3626,python3,"class Solution:
    def smallestNumber(self, n: int, t: int) -> int:
        
        while True:
            s = [int(i) for i in str(n)]
            p = 1
            for c in s:
                p *= c
            if p % t == 0:
                return n
            n += 1",1447653577
czjnbb,czjnbb,44,3640,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        
        nums.sort()
        d = Counter(nums)
        
        keys = sorted(d.keys())
        vals = [d[k] for k in keys]
        
        res = max(d.values())
        
        pres = [0]
        for v in vals:
            pres.append(pres[-1] + v)
        
        for i,n in enumerate(keys):
            
            pl = bisect.bisect_left(keys, n - k)
            pr = bisect.bisect_right(keys, n + k)
            
            tot = min(pres[pr] - pres[pl] - d[n], numOperations)
            res = max(res, tot + d[n])
            
            lpt = n - k
            minus = d[lpt] if lpt in d else 0
            pl = bisect.bisect_left(keys, lpt - k)
            pr = bisect.bisect_right(keys, lpt + k)
            tot = min(pres[pr] - pres[pl] - minus, numOperations)
            res = max(res, tot + minus)
            
            rpt = n + k
            minus = d[rpt] if rpt in d else 0
            pl = bisect.bisect_left(keys, rpt - k)
            pr = bisect.bisect_right(keys, rpt + k)
            tot = min(pres[pr] - pres[pl] - minus, numOperations)
            res = max(res, tot + minus)
            
        return res",1447681004
Waster,waster,46,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        map<int, int> mp;
        map<int, int> mp2;
        int res =0, cur = 0;
        for(int i: nums){
            mp[i]++;
            mp2[i-k]++;
            mp2[i] = mp2[i];
            mp2[i+k+1]--;
        }
        for(auto &[k, v] : mp2){
            cur += v;
            //cout << k << "" "" << cur << endl;
            res = max(res, mp[k] + min(cur - mp[k], numOperations));
        }
        return res;
    }
};",1447679323
Waster,waster,46,3626,cpp,"class Solution {
public:
    bool check(int i, int j){
        int p = 1;
        while(i > 0){
            p *= i%10;
            i /= 10;
        }
        if(p == 0)return 1;
        return p%j == 0;
    }
    int smallestNumber(int n, int t) {
        for(int i = n; i < 200; i++){
            if(check(i, t))
                return i;
        }
        return 0;
    }
};",1447657280
Waster,waster,46,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        map<int, int> mp;
        map<int, int> mp2;
        int res =0, cur = 0;
        for(int i: nums){
            mp[i]++;
            mp2[i-k]++;
            mp2[i] = mp2[i];
            mp2[i+k+1]--;
        }
        for(auto &[k, v] : mp2){
            cur += v;
            res = max(res, mp[k] + min(cur - mp[k], numOperations));
        }
        return res;
    }
};",1447681794
Bharath Raj S,rath772k,47,3622,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        freq = defaultdict(int)
        freq2 = defaultdict(int)
        for num in nums:
            freq[num+k+1] -= 1
            freq[num-k] += 1
            freq[num] += 0
            freq2[num] += 1

        keys = list(freq.keys())
        keys.sort()

        for i in range(1, len(keys)):
            freq[keys[i]] += freq[keys[i-1]]

        ans = 0

        for k_, v in freq.items():
            op_contribution = min(numOperations, v - freq2[k_])
            ans = max(ans, op_contribution + freq2[k_])

        return ans",1447681784
Bharath Raj S,rath772k,47,3626,python3,"class Solution:
    def smallestNumber(self, n: int, t: int) -> int:
        def prod(num):
            ans = 1
            while num:
                ans *= num % 10
                num //= 10
            return ans

        while True:
            if prod(n) % t == 0:
                return n
            n += 1",1447656418
Bharath Raj S,rath772k,47,3640,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        freq = defaultdict(int)
        freq2 = defaultdict(int)
        for num in nums:
            freq[num+k+1] -= 1
            freq[num-k] += 1
            freq[num] += 0
            freq2[num] += 1

        keys = list(freq.keys())
        keys.sort()

        for i in range(1, len(keys)):
            freq[keys[i]] += freq[keys[i-1]]

        ans = 0

        for k_, v in freq.items():
            op_contribution = min(numOperations, v - freq2[k_])
            ans = max(ans, op_contribution + freq2[k_])

        return ans",1447682576
John Rigby,vanshkunwarji41,48,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        map<int,int> m;
        if(k==0){
            int r=0;
            for(int i:nums){
                m[i]++;
                r=max(r,m[i]);
            }
            return r;
        }
        set<int> s;
        for(int i:nums){
            s.insert(i-k);
            s.insert(i);
            s.insert(i+1);
            s.insert(i+k+1);
        }
        int t=0;
        for(auto i:s){
            m[i]=t++;
        }
        int a[t],b[t];
        memset(a,0,sizeof(a));
        memset(b,0,sizeof(b));
        for(int i:nums){
            a[m[i]]++;
            b[m[i-k]]++;
            b[m[i]]--;
            b[m[i+1]]++;
            b[m[i+k+1]]--;
        }
        int r=0;
        int x=0,y=0;
        for(int i=0;i<t;i++){
            x=a[i];
            y+=b[i];
            r=max(r,x+min(y,numOperations));
        }
        return r;
    }
};",1447682755
John Rigby,vanshkunwarji41,48,3626,cpp,"class Solution {
public:
    bool f(int n, int t){
        int p=1;
        while(n){
            p*=n%10;
            n/=10;
        }
        return (p%t)==0;
    }
    int smallestNumber(int n, int t) {
        while(1){
            if(f(n,t)){
                return n;
            }
            n++;
        }

        return 0;
    }
};",1447654262
John Rigby,vanshkunwarji41,48,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        map<int,int> m;
        if(k==0){
            int r=0;
            for(int i:nums){
                m[i]++;
                r=max(r,m[i]);
            }
            return r;
        }
        set<int> s;
        for(int i:nums){
            s.insert(i-k);
            s.insert(i);
            s.insert(i+1);
            s.insert(i+k+1);
        }
        int t=0;
        for(auto i:s){
            m[i]=t++;
        }
        int a[t],b[t];
        memset(a,0,sizeof(a));
        memset(b,0,sizeof(b));
        for(int i:nums){
            a[m[i]]++;
            b[m[i-k]]++;
            b[m[i]]--;
            b[m[i+1]]++;
            b[m[i+k+1]]--;
        }
        int r=0;
        int x=0,y=0;
        for(int i=0;i<t;i++){
            x=a[i];
            y+=b[i];
            r=max(r,x+min(y,numOperations));
        }
        return r;
    }
};",1447682354
Sergei Sobol,sobols,49,3622,cpp,"enum EAction {
    BEGIN,
    END,
    NUM,
};

class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        vector<pair<int, int>> v;
        for (int x : nums) {
            v.emplace_back(x - k, BEGIN);
            v.emplace_back(x, NUM);
            v.emplace_back(x + k, END);
        }
        sort(v.begin(), v.end());
        int ans = 0;
        int cur = 0;
        
        for (size_t i = 0; i < v.size(); ) {
            size_t j = i;
            int nums = 0;
            int begins = 0;
            int ends = 0;
            while (j < v.size() && v[i].first == v[j].first) {
                if (v[j].second == BEGIN) {
                    begins++;
                } else if (v[j].second == END) {
                    ends++;
                } else if (v[j].second == NUM) {
                    nums++;
                }
                ++j;
            }
            
            cur += begins;
            int ops = cur - nums;
            ans = max(ans, nums + min(ops, numOperations));
            cur -= ends;
            i = j;
        }
        return ans;
    }
};",1447683038
Sergei Sobol,sobols,49,3626,cpp,"class Solution {
public:
    long long DigP(int x) {
        long long ret = 1;
        do {
            ret *= (x % 10);
            x /= 10;
        } while (x != 0);
        return ret;
    }
    
    int smallestNumber(int n, int t) {
        while (true) {
            if (DigP(n) % t == 0) {
                return n;
            }
            ++n;
        }
    }
};",1447655501
Sergei Sobol,sobols,49,3640,cpp,"enum EAction {
    BEGIN,
    END,
    NUM,
};

class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        vector<pair<int, int>> v;
        for (int x : nums) {
            v.emplace_back(x - k, BEGIN);
            v.emplace_back(x, NUM);
            v.emplace_back(x + k, END);
        }
        sort(v.begin(), v.end());
        int ans = 0;
        int cur = 0;
        
        for (size_t i = 0; i < v.size(); ) {
            size_t j = i;
            int nums = 0;
            int begins = 0;
            int ends = 0;
            while (j < v.size() && v[i].first == v[j].first) {
                if (v[j].second == BEGIN) {
                    begins++;
                } else if (v[j].second == END) {
                    ends++;
                } else if (v[j].second == NUM) {
                    nums++;
                }
                ++j;
            }
            
            cur += begins;
            int ops = cur - nums;
            ans = max(ans, nums + min(ops, numOperations));
            cur -= ends;
            i = j;
        }
        return ans;
    }
};",1447682311
Srihari,6JXJlfduFP,50,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int o) {
        int n = nums.size();
        unordered_map<int,int> freq;
        map<long long,long long> mp;
        for (auto& num : nums) {
            mp[num - k]++;
            mp[num]--;
            freq[num]++;
            if (k){
                mp[num + 1]++;
                mp[num + k + 1]--;
            }
        }
        long long res = 0;
        long long prev = 0;
        for(auto&[k, v] : mp) {
            prev += v;
            v = prev;
            long long cur = min(o * 1LL, v) + freq[k];
            res = max(res, cur);
        }
        return int(res);
    }
};",1447683182
Srihari,6JXJlfduFP,50,3626,cpp,"class Solution {
public:
    int smallestNumber(int n, int t) {
        auto f = [&](int a)->int{
            string tmp = to_string(a);
            int res = 1;
            for(auto& c : tmp) {
                res *= (c - '0');
            }
            return res;
        };
        while(true) {
            if (f(n) % t == 0) return n;
            n++;
        }
    }
};",1447654015
Srihari,6JXJlfduFP,50,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int o) {
        int n = nums.size();
        unordered_map<int,int> freq;
        map<long long,long long> mp;
        for (auto& num : nums) {
            mp[num - k]++;
            mp[num]--;
            freq[num]++;
            if (k){
                mp[num + 1]++;
                mp[num + k + 1]--;
            }
        }
        long long res = 0;
        long long prev = 0;
        for(auto&[k, v] : mp) {
            prev += v;
            v = prev;
            long long cur = min(o * 1LL, v) + freq[k];
            res = max(res, cur);
        }
        return int(res);
    }
};",1447684386
Anonymous,never_seen,51,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        map<int, int> mp, freq;
        for (int i = 0; i < nums.size(); i++){
            freq[nums[i]]++;
            mp[nums[i] - k]++;
            mp[nums[i] + k + 1]--;
        }
        int cnt = 0, ans = 0;
        for (auto &e : mp){
            cnt += e.second;
            ans = max(ans, cnt);
        }
        ans = min(ans, numOperations);
        sort(nums.begin(), nums.end());
        auto count = [&](int l, int r){
            return upper_bound(nums.begin(), nums.end(), r) - lower_bound(nums.begin(), nums.end(), l);
        };
        for (auto &e : freq){
            int p = count(e.first - k, e.first + k) - e.second;
            ans = max(ans, e.second + min(p, numOperations));
        }
        return ans;
    }
};",1447684591
Anonymous,never_seen,51,3626,cpp,"class Solution {
public:
    int smallestNumber(int n, int t) {
        for (int i = n; ; i++){
            int prod = 1, j = i;
            while(j){
                prod *= j % 10;
                j /= 10;
            }
            if (prod % t == 0) return i;
        }
    }
};",1447662713
Anonymous,never_seen,51,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        map<int, int> mp, freq;
        for (int i = 0; i < nums.size(); i++){
            freq[nums[i]]++;
            mp[nums[i] - k]++;
            mp[nums[i] + k + 1]--;
        }
        int cnt = 0, ans = 0;
        for (auto &e : mp){
            cnt += e.second;
            ans = max(ans, cnt);
        }
        ans = min(ans, numOperations);
        sort(nums.begin(), nums.end());
        auto count = [&](int l, int r){
            return upper_bound(nums.begin(), nums.end(), r) - lower_bound(nums.begin(), nums.end(), l);
        };
        for (auto &e : freq){
            int p = count(e.first - k, e.first + k) - e.second;
            ans = max(ans, e.second + min(p, numOperations));
        }
        return ans;
    }
};",1447684925
Larry,LarryNY,53,3622,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        N = len(nums)
        f = collections.Counter(nums)

        def go(x):
            lindex = bisect.bisect_left(nums, x - k)
            rindex = bisect.bisect_right(nums, x + k)
            
            same = f[x]
            changes = min((rindex - lindex) - f[x], numOperations)
            return same + changes
        
        nums.sort()
        best = 0
        for i in range(nums[0], nums[-1] + 1):
            best = max(best, go(i))
        return best",1447681628
Larry,LarryNY,53,3626,python3,"class Solution:
    def smallestNumber(self, n: int, t: int) -> int:
        def good(x):
            p = 1
            for c in str(x):
                p *= int(c)
            return p % t == 0
        
        while not good(n):
            n += 1
        return n",1447653343
Larry,LarryNY,53,3640,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        N = len(nums)
        f = collections.Counter(nums)

        def go(x):
            lindex = bisect.bisect_left(nums, x - k)
            rindex = bisect.bisect_right(nums, x + k)
            
            same = f[x]
            changes = min((rindex - lindex) - f[x], numOperations)
            return same + changes
        
        events = []
        for x in nums:
            events.append(x)
            events.append(x - k)
            events.append(x + k)
            
        nums.sort()
        
        best = 0
        for i in sorted(set(events)):
            best = max(best, go(i))
        return best",1447686629
HinaSnow,HanaYukii,54,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& num, int k, int op) {
        map<int,int>mp;
        map<int,int>cnt;
        for (auto &i : num) {
            mp[i-k]++;
            mp[i+k+1]--;
            mp[i];
            cnt[i]++;
        }
        int cur = 0;
        int ans = 1;
        for (auto &i : mp) {
            cur += i.second;
            ans = max(ans, min(cur, cnt[i.first] + op));
        }
        return ans;
    }
};",1447685964
HinaSnow,HanaYukii,54,3626,cpp,"class Solution {
public:
    int smallestNumber(int n, int tt) {
        while (1) {
            int sum = 1;
            int t = n;
            while (t) {
                sum *= t % 10;
                t /= 10;
            }
            if (sum % tt == 0) {
                return n;
            } else {
                n++;
            }
        }
        return 0;
    }
};",1447655425
HinaSnow,HanaYukii,54,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& num, int k, int op) {
        map<int,int>mp;
        map<int,int>cnt;
        for (auto &i : num) {
            mp[i-k]++;
            mp[i+k+1]--;
            mp[i];
            cnt[i]++;
        }
        int cur = 0;
        int ans = 1;
        for (auto &i : mp) {
            cur += i.second;
            ans = max(ans, min(cur, cnt[i.first] + op));
        }
        return ans;
    }
};",1447686678
Frank Rodriguez,whynot4,56,3622,java,"class Solution {
    public int maxFrequency(int[] nums, int k, int numOperations) {
        var seen = new TreeSet<Integer>();
        for (int num : nums) {
            seen.add(num);
            seen.add(num-k);
            seen.add(num+k+1);
        }
        var toIndex = new HashMap<Integer, Integer>();
        int len = 0;
        for (int num : seen) {
            toIndex.put(num, len);
            len++;
        }

        var freq = new int[len];
        var sum = new int[len];
        for (int num : nums) {
            freq[toIndex.get(num)]++;
            
            int i = toIndex.get(num-k);
            sum[i]++;
            i = toIndex.get(num+k+1);
            sum[i]--;
        }

        var prefix = new int[len];
        prefix[0] = sum[0];
        for (int i=1; i<len; i++) {
            prefix[i] = prefix[i-1] + sum[i];
        }

        int ans = 1;
        for (int i=0; i<len; i++) {
            int op = Math.min(prefix[i], freq[i]+numOperations);
            ans = Math.max(ans, op);
        }
        return ans;
    }
}",1447689096
Frank Rodriguez,whynot4,56,3626,java,"class Solution {
    public int smallestNumber(int n, int t) {
        while (product(n)%t != 0) {
            n++;
        }
        return n;
    }

    int product(int n) {
        int ans = 1;
        while (n > 0) {
            ans *= n%10;
            n/=10;
        }
        return ans;
    }
}",1447653957
Frank Rodriguez,whynot4,56,3640,java,"class Solution {
    public int maxFrequency(int[] nums, int k, int numOperations) {
        var seen = new TreeSet<Integer>();
        for (int num : nums) {
            seen.add(num);
            seen.add(num-k);
            seen.add(num+k+1);
        }
        var toIndex = new HashMap<Integer, Integer>();
        int len = 0;
        for (int num : seen) {
            toIndex.put(num, len);
            len++;
        }

        var freq = new int[len];
        var sum = new int[len];
        for (int num : nums) {
            freq[toIndex.get(num)]++;
            
            int i = toIndex.get(num-k);
            sum[i]++;
            i = toIndex.get(num+k+1);
            sum[i]--;
        }

        var prefix = new int[len];
        prefix[0] = sum[0];
        for (int i=1; i<len; i++) {
            prefix[i] = prefix[i-1] + sum[i];
        }

        int ans = 1;
        for (int i=0; i<len; i++) {
            int op = Math.min(prefix[i], freq[i]+numOperations);
            ans = Math.max(ans, op);
        }
        return ans;
    }
}",1447688523
sai kiran,p_saikiran,57,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        sort(nums.begin(), nums.end());
        int n=nums.size(), sol=0;
        map<int,int> f;
        for(int i:nums)f[i]++;
        for(int i=0;i<n;i++) {
            int idx = upper_bound(nums.begin(), nums.end(), nums[i]+2*k)-nums.begin();
            idx--;
            sol=max(min(idx-i+1, numOperations), sol);

            int lb = lower_bound(nums.begin(), nums.end(), nums[i]-k)-nums.begin();
            int ub = upper_bound(nums.begin(), nums.end(), nums[i]+k)-nums.begin();
            ub--;
            sol=max(f[nums[i]]+min(ub-lb+1-f[nums[i]], numOperations), sol);
        }
        return sol;
    }
};",1447682183
sai kiran,p_saikiran,57,3626,cpp,"class Solution {
public:
    int pro(int n) {
        int sol=1;
        while(n>0) {
            sol*=(n%10);
            n/=10;
        }
        return sol;
    }
    int smallestNumber(int n, int t) {
        while(pro(n)%t != 0) n++;
        return n;
    }
};",1447654883
sai kiran,p_saikiran,57,3640,cpp,"typedef long long ll;
class Solution {
public:
    int maxFrequency(vector<int>& nums_t, int k, int numOperations) {
        vector<ll> nums;
        for(int i:nums_t)nums.push_back(i);
        sort(nums.begin(), nums.end());
        int n=nums.size(), sol=0;
        map<ll,int> f;
        for(int i:nums)f[i]++;
        for(int i=0;i<n;i++) {
            int idx = upper_bound(nums.begin(), nums.end(), nums[i]+(ll)2*k)-nums.begin();
            idx--;
            sol=max(min(idx-i+1, numOperations), sol);

            int lb = lower_bound(nums.begin(), nums.end(), nums[i]-k)-nums.begin();
            int ub = upper_bound(nums.begin(), nums.end(), nums[i]+k)-nums.begin();
            ub--;
            sol=max(f[nums[i]]+min(ub-lb+1-f[nums[i]], numOperations), sol);
        }
        return sol;
    }
};",1447689133
M Kawa,mkawa222,58,3622,python3,"from collections import Counter

class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        cnt=Counter(nums)
        nums.sort()
        n=len(nums)
        l=r=0
        ans=0
        for a in nums:
            while nums[l]<a-k:l+=1
            while r<n and nums[r]<=a+k:r+=1
            ans=max(ans,min(numOperations+cnt[a],r-l))
        r=0
        for l in range(n):
            while r<n and nums[r]<=nums[l]+2*k:r+=1
            ans=max(ans,min(r-l,numOperations))
        return ans
",1447690680
M Kawa,mkawa222,58,3626,python3,"class Solution:
    def smallestNumber(self, n: int, t: int) -> int:
        def mul(a):
            res=1
            while a:
                a,r=divmod(a,10)
                res*=r
            return res
        
        for a in range(n,n+100):
            if mul(a)%t==0:
                return a
        return 0
",1447664748
M Kawa,mkawa222,58,3640,python3,"from collections import Counter

class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        cnt=Counter(nums)
        nums.sort()
        n=len(nums)
        l=r=0
        ans=0
        for a in nums:
            while nums[l]<a-k:l+=1
            while r<n and nums[r]<=a+k:r+=1
            ans=max(ans,min(numOperations+cnt[a],r-l))
        r=0
        for l in range(n):
            while r<n and nums[r]<=nums[l]+2*k:r+=1
            ans=max(ans,min(r-l,numOperations))
        return ans
",1447690454
N M,nnmm11,59,3622,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        ct = Counter(nums)
        lo, hi = min(nums), max(nums)
        best = 0
        within_k = sum(ct[i] for i in range(lo, lo+k))
        for i in range(lo, hi+1):
            within_k += ct[i + k]
            within_k -= ct[i - k - 1]
            # print(i, ct[i], within_k)
            cur = ct[i] + min(numOperations, within_k - ct[i])
            if cur > best:
                best = cur
        return best
            
            
            
            ",1447672187
N M,nnmm11,59,3626,python3,"class Solution:
    def smallestNumber(self, n: int, t: int) -> int:
        i = n - 1
        while True:
            i += 1
            if prod(int(c) for c in str(i)) % t == 0:
                return i",1447675417
N M,nnmm11,59,3640,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        ct = Counter(nums)
        pos = set(nums)
        pos = sorted(
            pos
            | set(x + k for x in pos)
            | set(x - k for x in pos)
        )
        best = 0
        lo, hi = 0, 0 # hi is exclusive
        within_k = 0
        for i in range(len(pos)):
            x = pos[i]
            # Move hi up.
            while hi < len(pos) and pos[hi] <= x + k:
                within_k += ct[pos[hi]]
                hi += 1
            # Move lo up.
            while pos[lo] < x - k:
                within_k -= ct[pos[lo]]
                lo += 1
            # print(i, ct[i], within_k)
            cur = ct[x] + min(numOperations, within_k - ct[x])
            if cur > best:
                best = cur
        return best",1447691111
zhz,eatcoc10,61,3622,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        nums.sort()
        maxx = max(nums)
        freq = defaultdict(int)
        for num in nums:
            freq[num] += 1
        ans = 0
        for num in range(1, maxx + 1):
            left = num - k
            right = num + k
            i = bisect_left(nums, left)
            j = bisect_right(nums, right) - 1
            # print(i, j)
            ans = max(min(j - i + 1 - freq[num], numOperations) + freq[num], ans)
        # print()
        return ans",1447685014
zhz,eatcoc10,61,3626,python3,"class Solution:
    def smallestNumber(self, n: int, t: int) -> int:
        while True:
            a = list(map(int, str(n)))
            p = 1
            for num in a:
                p *= num
            if p % t == 0:
                return n
            n += 1
        ",1447656863
zhz,eatcoc10,61,3640,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        freq = defaultdict(int)
        nums.sort()
        for num in nums:
            freq[num] += 1
        nums2 = []
        for num in nums:
            nums2.append(num)
            nums2.append(num + k)
            nums2.append(num - k)
        # nums2.sort()
        ans = 0
        for num in nums2:
            left = num - k
            right = num + k
            i = bisect_left(nums, left)
            j = bisect_right(nums, right) - 1
            # print(i, j)
            ans = max(min(j - i + 1 - freq[num], numOperations) + freq[num], ans)
        # print()
        return ans",1447691681
Ashutosh Rana,Ashutosh_3036,62,3622,python3,"from typing import List
from collections import Counter

class Solution:
    def lower_bound(self, nums: List[int], target: int) -> int:
        left, right = 0, len(nums)
        while left < right:
            mid = left + (right - left) // 2
            if nums[mid] < target:
                left = mid + 1
            else:
                right = mid
        return left

    def upper_bound(self, nums: List[int], target: int) -> int:
        left, right = 0, len(nums)
        while left < right:
            mid = left + (right - left) // 2
            if nums[mid] <= target:
                left = mid + 1
            else:
                right = mid
        return left

    def calculate_max_frequency(self, nums: List[int]) -> int:
        return max(Counter(nums).values(), default=0)

    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        if k == 0:
            return self.calculate_max_frequency(nums)
        
        nums.sort()
        max_freq = 1
        unique_nums = set(nums)
        
        for base in nums:
            # Define a range centered on `base`, from `base - k` to `base + k`, with step `k`
            for target in range(base - k, base + k + 1, k):
                
                # Inline binary search for the lower bound of `target - k`
                start, end = 0, len(nums)
                while start < end:
                    midpoint = (start + end) // 2
                    if nums[midpoint] < target - k:
                        start = midpoint + 1
                    else:
                        end = midpoint
                range_start = start

                # Inline binary search for the upper bound of `target + k`
                start, end = 0, len(nums)
                while start < end:
                    midpoint = (start + end) // 2
                    if nums[midpoint] <= target + k:
                        start = midpoint + 1
                    else:
                        end = midpoint
                range_end = start

                # Calculate the count of numbers within the range [target - k, target + k]
                count_in_range = range_end - range_start

                # Inline binary search for the exact `target` lower and upper bounds
                start, end = 0, len(nums)
                while start < end:
                    midpoint = (start + end) // 2
                    if nums[midpoint] < target:
                        start = midpoint + 1
                    else:
                        end = midpoint
                element_start = start

                start, end = 0, len(nums)
                while start < end:
                    midpoint = (start + end) // 2
                    if nums[midpoint] <= target:
                        start = midpoint + 1
                    else:
                        end = midpoint
                element_end = start

                # Calculate the count of occurrences of `target` itself
                exact_count = element_end - element_start

                # Adjust the frequency with extra elements within the range if possible
                extra_count = count_in_range - (exact_count if target in unique_nums else 0)
                max_freq = max(max_freq, exact_count + min(extra_count, numOperations))

        return max_freq
",1447680703
Ashutosh Rana,Ashutosh_3036,62,3626,cpp,"class Solution {
public:
    int smallestNumber(int n, int t) {
        while(true) {
            string s = to_string(n);
            int p = 1;
            for(auto ch:s) p*=(ch-'0');
            if(p%t==0) return n;
            ++n;
        }
        return 0;
    }
};",1447654951
Ashutosh Rana,Ashutosh_3036,62,3640,python3,"from typing import List
from collections import Counter

class Solution:
    def lower_bound(self, nums: List[int], target: int) -> int:
        left, right = 0, len(nums)
        while left < right:
            mid = left + (right - left) // 2
            if nums[mid] < target:
                left = mid + 1
            else:
                right = mid
        return left

    def upper_bound(self, nums: List[int], target: int) -> int:
        left, right = 0, len(nums)
        while left < right:
            mid = left + (right - left) // 2
            if nums[mid] <= target:
                left = mid + 1
            else:
                right = mid
        return left

    def calculate_max_frequency(self, nums: List[int]) -> int:
        return max(Counter(nums).values(), default=0)

    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        if k == 0:
            return self.calculate_max_frequency(nums)
        
        nums.sort()
        max_freq = 1
        unique_nums = set(nums)
        
        for base in nums:
            # Define a range centered on `base`, from `base - k` to `base + k`, with step `k`
            for target in range(base - k, base + k + 1, k):
                
                # Inline binary search for the lower bound of `target - k`
                start, end = 0, len(nums)
                while start < end:
                    midpoint = (start + end) // 2
                    if nums[midpoint] < target - k:
                        start = midpoint + 1
                    else:
                        end = midpoint
                range_start = start

                # Inline binary search for the upper bound of `target + k`
                start, end = 0, len(nums)
                while start < end:
                    midpoint = (start + end) // 2
                    if nums[midpoint] <= target + k:
                        start = midpoint + 1
                    else:
                        end = midpoint
                range_end = start

                # Calculate the count of numbers within the range [target - k, target + k]
                count_in_range = range_end - range_start

                # Inline binary search for the exact `target` lower and upper bounds
                start, end = 0, len(nums)
                while start < end:
                    midpoint = (start + end) // 2
                    if nums[midpoint] < target:
                        start = midpoint + 1
                    else:
                        end = midpoint
                element_start = start

                start, end = 0, len(nums)
                while start < end:
                    midpoint = (start + end) // 2
                    if nums[midpoint] <= target:
                        start = midpoint + 1
                    else:
                        end = midpoint
                element_end = start

                # Calculate the count of occurrences of `target` itself
                exact_count = element_end - element_start

                # Adjust the frequency with extra elements within the range if possible
                extra_count = count_in_range - (exact_count if target in unique_nums else 0)
                max_freq = max(max_freq, exact_count + min(extra_count, numOperations))

        return max_freq
",1447681672
VILLANOVA_ECON,VILLANOVA_ECON,63,3622,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        
        
        nums.sort()
        
        best_ans = 0
        
        num_store = collections.Counter(nums)
        
        
        
        for key,count in num_store.items():
            min_index = bisect.bisect_left(nums,key-k)
            max_index = bisect.bisect_right(nums,key+k)
            best_ans = max(best_ans,min(max_index-min_index,numOperations+count))
            
            new_key = key+k
            min_index = bisect.bisect_left(nums,new_key-k)
            max_index = bisect.bisect_right(nums,new_key+k)
            best_ans = max(best_ans,min(max_index-min_index,numOperations))
            
            new_key = key-k
            min_index = bisect.bisect_left(nums,new_key-k)
            max_index = bisect.bisect_right(nums,new_key+k)
            best_ans = max(best_ans,min(max_index-min_index,numOperations))
        return best_ans",1447681298
VILLANOVA_ECON,VILLANOVA_ECON,63,3626,python3,"class Solution:
    def smallestNumber(self, n: int, t: int) -> int:
        
        for x in range(n,10**5+10):
            key = 1
            for y in [int(y) for y in str(x)]:
                key *= y
            
            if key%t == 0:
                return x",1447655871
VILLANOVA_ECON,VILLANOVA_ECON,63,3640,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        
        
        nums.sort()
        
        best_ans = 0
        
        num_store = collections.Counter(nums)
        
        
        
        for key,count in num_store.items():
            min_index = bisect.bisect_left(nums,key-k)
            max_index = bisect.bisect_right(nums,key+k)
            best_ans = max(best_ans,min(max_index-min_index,numOperations+count))
            
            new_key = key+k
            min_index = bisect.bisect_left(nums,new_key-k)
            max_index = bisect.bisect_right(nums,new_key+k)
            best_ans = max(best_ans,min(max_index-min_index,numOperations))
            
            new_key = key-k
            min_index = bisect.bisect_left(nums,new_key-k)
            max_index = bisect.bisect_right(nums,new_key+k)
            best_ans = max(best_ans,min(max_index-min_index,numOperations))
        return best_ans",1447682624
congthanh2000,congthanh2000,64,3622,cpp,"// 0 - 10
// 6 - 16
// 15 - 25
// 15 - 25
class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        vector<int> points;
        for (int x : nums) {
            points.push_back(x);
            points.push_back(x - k);
            points.push_back(x + k);
        }
        sort(points.begin(), points.end());
        points.resize(unique(points.begin(), points.end()) - points.begin());
        int n = points.size();
        vector<int> c(n + 1, 0);
        for (int x : nums) {
            int L = x - k, R = x + k;
            int l = lower_bound(points.begin(), points.end(), L) - points.begin();
            int r = upper_bound(points.begin(), points.end(), R) - points.begin();
            c[l] += 1;
            c[r] -= 1;
        }
        for (int i = 1; i <= n; i++) c[i] += c[i - 1];
        map<int, int> M;
        for (int x : nums) M[x]++;
        int ans = 0;
        for (int i = 0; i < n; i++) {
            int need = c[i] - M[points[i]];
            int d = M[points[i]] + min(numOperations, need);
            ans = max(ans, d);
        }
        return ans;
    }
};",1447682664
congthanh2000,congthanh2000,64,3626,cpp,"int get(int n) {
    if (n < 10) return n;
    return get(n / 10) * (n % 10);
}
class Solution {
public:
    int smallestNumber(int n, int t) {
        while (get(n) % t) n++;
        return n;
    }
};",1447654892
congthanh2000,congthanh2000,64,3640,cpp,"// 0 - 10
// 6 - 16
// 15 - 25
// 15 - 25
class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        vector<int> points;
        for (int x : nums) {
            points.push_back(x);
            points.push_back(x - k);
            points.push_back(x + k);
        }
        sort(points.begin(), points.end());
        points.resize(unique(points.begin(), points.end()) - points.begin());
        int n = points.size();
        vector<int> c(n + 1, 0);
        for (int x : nums) {
            int L = x - k, R = x + k;
            int l = lower_bound(points.begin(), points.end(), L) - points.begin();
            int r = upper_bound(points.begin(), points.end(), R) - points.begin();
            c[l] += 1;
            c[r] -= 1;
        }
        for (int i = 1; i <= n; i++) c[i] += c[i - 1];
        map<int, int> M;
        for (int x : nums) M[x]++;
        int ans = 0;
        for (int i = 0; i < n; i++) {
            int need = c[i] - M[points[i]];
            int d = M[points[i]] + min(numOperations, need);
            ans = max(ans, d);
        }
        return ans;
    }
};",1447682844
ssk4988,ssk4988,65,3622,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        events = []
        c = Counter(nums)
        for x in nums:
            events.append((x - k, 1))
            events.append((x + k + 1, -1))
            events.append((x, 2))
        events.sort()
        v = 0
        ans = 0
        for x, t in events:
            if t != 2: v += t
            ans = max(ans, c[x] + min(v - c[x], numOperations))
        return ans",1447682591
ssk4988,ssk4988,65,3626,python3,"class Solution:
    def smallestNumber(self, n: int, t: int) -> int:
        while True:
            prod = 1
            for d in str(n):
                prod *= int(d)
            if prod % t == 0: return n
            n += 1",1447653824
ssk4988,ssk4988,65,3640,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        events = []
        c = Counter(nums)
        for x in nums:
            events.append((x - k, 1))
            events.append((x + k + 1, -1))
            events.append((x, 2))
        events.sort()
        v = 0
        ans = 0
        for x, t in events:
            if t != 2: v += t
            ans = max(ans, c[x] + min(v - c[x], numOperations))
        return ans",1447683122
agakishy,agakishy,67,3622,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        c = Counter(nums)
        d = Counter()
        for x in nums:
            d[x-k] += 1
            d[x] -= 1
            d[x+1] += 1
            d[x+k+1] -= 1
        pairs = sorted(list(d.items()))

        ans = acc = 0
        for x, i in pairs:
            acc += i
            cnt = 0
            if x in c: cnt = c[x]
            ans = max(ans, cnt + min(acc, numOperations))
            # print(x, i, acc, ans)
        return ans
        
        ",1447693444
agakishy,agakishy,67,3626,python3,"class Solution:
    def smallestNumber(self, n: int, t: int) -> int:
        i = n
        while True:
            s = str(i)
            sdigits = list(s)
            acc = 1
            for sd in sdigits:
                acc *= int(sd)
                if acc % t == 0:
                    return i
            i += 1
        return ""wtf?""",1447656691
agakishy,agakishy,67,3640,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        c = Counter(nums)
        d = Counter()
        for x in nums:
            d[x-k] += 1
            d[x] -= 1
            d[x+1] += 1
            d[x+k+1] -= 1
        pairs = sorted(list(d.items()))

        ans = acc = 0
        for x, i in pairs:
            acc += i
            cnt = 0
            if x in c: cnt = c[x]
            ans = max(ans, cnt + min(acc, numOperations))
            # print(x, i, acc, ans)
        return ans",1447693793
Ujjawal Gupta,ujjawalgupta20,69,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        map<int,int> mp, frequency;
        for(auto it:nums) {
            mp[it - k]++;
            frequency[it]++;
            mp[it + k + 1] --;
            mp[it] = mp[it];
        }
        int ans = 0, sum = 0;
        for(auto &it:mp) {
            sum += it.second;
            int f = 0;
            if(frequency.find(it.first) != frequency.end()) f += frequency[it.first];
            ans = max(ans, min(sum - f, numOperations) + f);
        }

        return ans;
    }
};",1447681187
Ujjawal Gupta,ujjawalgupta20,69,3626,cpp,"class Solution {
public:
    int smallestNumber(int n, int t) {
        for(int i = n; i < n + 100; i++) {
            int val = i;
            int p = 1;
            while(val) {
                p *= (val%10);
                val/=10;
            }
            if(p % t == 0) return i;
        }
        return 0;
    }
};",1447662308
Ujjawal Gupta,ujjawalgupta20,69,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        map<int,int> mp, frequency;
        for(auto it:nums) {
            mp[it - k]++;
            frequency[it]++;
            mp[it + k + 1] --;
            mp[it] = mp[it];
        }
        int ans = 0, sum = 0;
        for(auto &it:mp) {
            sum += it.second;
            int f = 0;
            if(frequency.find(it.first) != frequency.end()) f += frequency[it.first];
            ans = max(ans, min(sum - f, numOperations) + f);
        }

        return ans;
    }
};",1447684039
Chuan-Chih Chou,chuan-chih,72,3622,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        nums.sort()
        c = Counter(nums)
        n = len(nums)
        ans = l = r = 0
        for v in range(nums[0], nums[-1] + 1):
            while r < n and nums[r] <= v + k:
                r += 1
            while nums[l] < v - k:
                l += 1
            ans = max(ans, c[v] + min(numOperations, r - l - c[v]))
        return ans
            ",1447679925
Chuan-Chih Chou,chuan-chih,72,3626,python3,"class Solution:
    def smallestNumber(self, n: int, t: int) -> int:
        while True:
            if not reduce(mul, (int(d) for d in str(n))) % t:
                return n
            n += 1",1447654227
Chuan-Chih Chou,chuan-chih,72,3640,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        nums.sort()
        c = Counter(nums)
        n = len(nums)
        ans = l = r = 0
        for v in nums:
            while r < n and nums[r] <= v + k:
                r += 1
            while nums[l] < v - k:
                l += 1
            ans = max(ans, c[v] + min(numOperations, r - l - c[v]))
        l = 0
        for r, v in enumerate(nums):
            if v - nums[l] > 2 * k:
                l += 1
            ans = max(ans, min(numOperations, r - l + 1))
        return ans
        ",1447695529
nipunjain099,nipunjain099,76,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        sort(nums.begin(),nums.end());
        map<int,int> events;
        for(auto num:nums){
            events[max(0,num-k)]++;
            events[min(1000000001,num+k+1)]--;
            if(!events.contains(num)) events[num]=0;
        }
        int ind=0;
        int ct=0;
        int mx=0;
        for(auto event:events){
            ct += event.second;
            int t=0;
            while((ind<nums.size()) && (nums[ind] == event.first)){
                t++;
                ind++;
            }
            mx = max(mx, t+min(numOperations,ct-t));
        }
        return mx;
    }
};",1447688597
nipunjain099,nipunjain099,76,3626,cpp,"class Solution {
public:
    int smallestNumber(int n, int t) {
        while(n<200){
            int a=n,mul=1;
            while(a>0){
                mul *= (a%10);
                a/=10;
            }
            if((mul%t)==0) return n;
            n++;
        }
        return n;
    }
};",1447697259
nipunjain099,nipunjain099,76,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        sort(nums.begin(),nums.end());
        map<int,int> events;
        for(auto num:nums){
            events[max(0,num-k)]++;
            events[min(1000000001,num+k+1)]--;
            if(!events.contains(num)) events[num]=0;
        }
        int ind=0;
        int ct=0;
        int mx=0;
        for(auto event:events){
            ct += event.second;
            int t=0;
            while((ind<nums.size()) && (nums[ind] == event.first)){
                t++;
                ind++;
            }
            mx = max(mx, t+min(numOperations,ct-t));
        }
        return mx;
    }
};",1447687927
Kirill S,kirya2604,78,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        sort(nums.begin(), nums.end());
        int answer = 1;

        int r = 0, n = nums.size();
        for (int i = 0; i < n; i++) {
            while (r + 1 < n && nums[r + 1] - nums[i] <= k + k)
                r ++;
            answer = max(answer, min(numOperations, r - i + 1));
        }

        int l = 0;
        r = 0;
        for (int i = 0; i < n; i ++) {
            if (i > 0 && nums[i - 1] == nums[i]) continue;

            int j = i;
            while (j + 1 < n && nums[j + 1] == nums[i]) j ++;
            
            while (nums[l] + k < nums[i]) l ++;
            while (r + 1 < n && nums[r + 1] <= k + nums[i]) r ++;

            int cnt = j - i + 1;
            int cnt2 = r - l + 1 - cnt;
            answer = max(answer, min(numOperations, cnt2) + cnt);
        }
        
        return answer;
    }
};",1447697918
Kirill S,kirya2604,78,3626,cpp,"class Solution {
public:
    int smallestNumber(int n, int t) {
        for (int i = n; ;i ++)
            {
                int x = i;
                int q = 1;
                while (x > 0) {
                    q *= (x % 10);
                    x /= 10;
                }

                if (q % t == 0) return i;
            }
    }
};",1447656636
Kirill S,kirya2604,78,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        sort(nums.begin(), nums.end());
        int answer = 1;

        int r = 0, n = nums.size();
        for (int i = 0; i < n; i++) {
            while (r + 1 < n && nums[r + 1] - nums[i] <= k + k)
                r ++;
            answer = max(answer, min(numOperations, r - i + 1));
        }

        int l = 0;
        r = 0;
        for (int i = 0; i < n; i ++) {
            if (i > 0 && nums[i - 1] == nums[i]) continue;

            int j = i;
            while (j + 1 < n && nums[j + 1] == nums[i]) j ++;
            
            while (nums[l] + k < nums[i]) l ++;
            while (r + 1 < n && nums[r + 1] <= k + nums[i]) r ++;

            int cnt = j - i + 1;
            int cnt2 = r - l + 1 - cnt;
            answer = max(answer, min(numOperations, cnt2) + cnt);
        }
        
        return answer;
    }
};",1447697653
Mohit_is_back,Mohit_2k_kukreja,79,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        for(auto &i : nums) i += k;
        int maxi = *max_element(nums.begin(), nums.end());
        vector<int> freq(maxi + k + 2, 0);
        
        map<int, int> mp;
        for(auto i: nums) mp[i]++;
        
        for(auto i: nums){
            freq[i - k]++;
            freq[i + k + 1]--;
        }
        
        for(int i=1; i<freq.size(); i++){
            freq[i] += freq[i-1];
        }
        
        int res = 0;
        for(int i=1; i<freq.size(); i++){
            int sub = max(0, freq[i] - mp[i] - numOperations);
            res = max(res, freq[i] - sub);
        }
        return res;
    }
};",1447681283
Mohit_is_back,Mohit_2k_kukreja,79,3626,cpp,"class Solution {
public:
    int smallestNumber(int n, int t) {
        for(int i=0; i<15; i++){
            int curr = n + i;
            int s = 1;
            while(curr){
                s *= curr % 10;
                curr /= 10;
            }
            
            if(s % t == 0) return n + i;
        }
        return 0;
    }
};",1447655411
Mohit_is_back,Mohit_2k_kukreja,79,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {        
        map<int, int> mp, freq;
        for(auto i: nums) {mp[i]++; freq[i] = 0;}
        
//         1->1, 4-> 1, 5
        
        for(auto i: nums){
            freq[i - k]++;
            freq[i + k + 1]--;
        }
        
        
        int res = 0;
        int s = 0;
        for(auto it : freq){
            s += it.second;
            int sub = max(0, s - mp[it.first] - numOperations);
            res = max(res, s - sub);
        }
        return res;
    }
};",1447698943
Андрей Хромых,khromykh,82,3622,java,"class Solution {
    public int maxFrequency(int[] nums, int k, int numOperations) {
        Map<Integer, Integer> counts = new HashMap<>();
        for (var x : nums) {
            counts.merge(x, 1, Integer::sum);
        }

        Arrays.sort(nums);
        int res = 0;
        for (int i = 0, l = 0, r = 0; i < nums.length; i++) {
            while (r < nums.length && nums[r] <= nums[i] + k) r++;
            while (nums[l] < nums[i] - k) l++;
            int numOp = Math.min(r-l - counts.get(nums[i]), numOperations);
            res = Math.max(res, numOp + counts.get(nums[i]));
        }

        for (int l = 0, r = 0; r < nums.length; r++) {
            while (nums[l] < nums[r] - 2 * k) l++;
            res = Math.max(Math.min(numOperations, r - l + 1), res);
        }
        
        return res;
    }
}",1447690122
Андрей Хромых,khromykh,82,3626,java,"class Solution {
    public int smallestNumber(int n, int t) {
        for (int i = n;; i++) {
            if (pr(i) % t == 0) return i;
        }
    }

    int pr(int x) {
        int res = 1;
        while (x != 0) {
            res *= x % 10;
            x /= 10;
        }
        return res;
    }
}",1447665940
Андрей Хромых,khromykh,82,3640,java,"class Solution {
    public int maxFrequency(int[] nums, int k, int numOperations) {
        Map<Integer, Integer> counts = new HashMap<>();
        for (var x : nums) {
            counts.merge(x, 1, Integer::sum);
        }

        Arrays.sort(nums);
        int res = 0;
        for (int i = 0, l = 0, r = 0; i < nums.length; i++) {
            while (r < nums.length && nums[r] <= nums[i] + k) r++;
            while (nums[l] < nums[i] - k) l++;
            int numOp = Math.min(r-l - counts.get(nums[i]), numOperations);
            res = Math.max(res, numOp + counts.get(nums[i]));
        }

        for (int l = 0, r = 0; r < nums.length; r++) {
            while (nums[l] < nums[r] - 2 * k) l++;
            res = Math.max(Math.min(numOperations, r - l + 1), res);
        }
        
        return res;
    }
}",1447689772
Chaitanya Bhutada,_chaitanya99,83,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        sort(nums.begin(), nums.end());
        unordered_map<int, int> mp;
        for (auto &i: nums) mp[i]++;
        int ans = 0;
        for (int i = 0; i < nums.size(); i++) {
            int itnel = lower_bound(nums.begin(), nums.end(), nums[i]-k) - nums.begin();
            int itnele = upper_bound(nums.begin(), nums.end(), nums[i]+k) - nums.begin();
            int ye = itnele - itnel;
            ans = max(ans, mp[nums[i]] + min(numOperations, ye-mp[nums[i]]));
        }

        for (int i = 0; i < nums.size(); i++) {
            int itnele = upper_bound(nums.begin(), nums.end(), nums[i]+2*k) - nums.begin();
            int ye = itnele - i;
            ans = max(ans, min(ye, numOperations));
        }
        
        return ans;
    }
};",1447684316
Chaitanya Bhutada,_chaitanya99,83,3626,cpp,"class Solution {
private:
    int calc(int x) {
        string s = to_string(x);
        int h = 1;
        for (auto &ch: s) {
            h *= (ch-'0');
        }
        return h;
    }
public:
    int smallestNumber(int n, int t) {
        for (int i = n;;i++) {
            if (calc(i)%t == 0) return i;
        }
        return 0;
    }
};",1447654666
Chaitanya Bhutada,_chaitanya99,83,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        vector<long long> numsi;
        for (auto &i: nums) numsi.push_back(i);
        sort(numsi.begin(), numsi.end());
        unordered_map<long long, int> mp;
        for (auto &i: numsi) mp[i]++;
        int ans = 0;
        for (int i = 0; i < numsi.size(); i++) {
            int itnel = lower_bound(numsi.begin(), numsi.end(), numsi[i]-k) - numsi.begin();
            int itnele = upper_bound(numsi.begin(), numsi.end(), numsi[i]+k) - numsi.begin();
            int ye = itnele - itnel;
            ans = max(ans, mp[numsi[i]] + min(numOperations, ye-mp[numsi[i]]));
        }

        for (int i = 0; i < numsi.size(); i++) {
            int itnele = upper_bound(numsi.begin(), numsi.end(), numsi[i]+2*k) - numsi.begin();
            int ye = itnele - i;
            ans = max(ans, min(ye, numOperations));
        }
        
        return ans;
        
    }
};",1447690457
Vineet Motwani,rookie-coder,84,3622,cpp,"#define ll long long
class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int ops) {
        unordered_map<ll, int> mp;
        vector<ll> x_vals;
        vector<pair<ll, int>> v;
        for (int& i : nums) {
            mp[i]++;
            ll l = (ll)i - k, r = (ll)i+k+1;
            v.push_back({l, 1});
            v.push_back({r, -1});
            x_vals.push_back(i);
            x_vals.push_back(l);
            x_vals.push_back(r);
        }
        sort(begin(x_vals), end(x_vals));
        x_vals.erase(unique(begin(x_vals), end(x_vals)), end(x_vals));
        sort(begin(v), end(v));
        int idx = 0;
        ll o = 0;
        int res = 0;
        for (ll& x : x_vals) {
            while (idx<v.size() and v[idx].first<=x) {
                o += v[idx].second;
                idx++;
            }
            int f = mp[x];
            ll adj = o - f;
            int tot = f + min((ll)ops, adj);
            res = max(res, tot);
        }
        return res;
    }
};",1447690241
Vineet Motwani,rookie-coder,84,3626,cpp,"class Solution {
    vector<int> fn(int i) {
        vector<int> v;
        while(i) {
            v.push_back(i%10);
            i/=10;
        }
        return v;
    }
    bool pro(vector<int> v, int t) {
        int duct = 1;
        for(auto& i : v)
                duct*=i;
        return (duct%t==0);
    }
public:
    int smallestNumber(int n, int t) {
        while(1) {
            if(pro(fn(n), t))
                return n;
            else
                n++;
        }
        return n;
    }
};",1447660148
Vineet Motwani,rookie-coder,84,3640,cpp,"#define ll long long
class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int ops) {
        unordered_map<ll, int> mp;
        vector<ll> x_vals;
        vector<pair<ll, int>> v;
        for (int& i : nums) {
            mp[i]++;
            ll l = (ll)i - k, r = (ll)i+k+1;
            v.push_back({l, 1});
            v.push_back({r, -1});
            x_vals.push_back(i);
            x_vals.push_back(l);
            x_vals.push_back(r);
        }
        sort(begin(x_vals), end(x_vals));
        x_vals.erase(unique(begin(x_vals), end(x_vals)), end(x_vals));
        sort(begin(v), end(v));
        int idx = 0;
        ll o = 0;
        int res = 0;
        for (ll& x : x_vals) {
            while (idx<v.size() and v[idx].first<=x) {
                o += v[idx].second;
                idx++;
            }
            int f = mp[x];
            ll adj = o - f;
            int tot = f + min((ll)ops, adj);
            res = max(res, tot);
        }
        return res;
    }
};",1447690757
Win_Handsome,win_handsome,86,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& arr, int k, int numOperations) {
        int n = arr.size();
        unordered_map<int, int> count, add;
        set<int> temp;
        for(int i = 0; i < n; i++){
            add[max(1, arr[i] - k)]++;
            add[arr[i] + k + 1]--;
            count[arr[i]]++;
            
            temp.insert(max(1, arr[i] - k));
            temp.insert(arr[i] + k + 1);
            temp.insert(arr[i]);
        }
        int ans = INT_MIN, sum = 0;
        for(auto &i : temp){
            sum += add[i];
            ans = max(ans, count[i] + min(numOperations, sum - count[i]));
        }
        return ans;
    }
};",1447690435
Win_Handsome,win_handsome,86,3626,cpp,"class Solution {
public:
    int smallestNumber(int n, int t) {
        while(true){
            int temp = n;
            int prod = 1;
            while(temp){
                prod *= temp % 10;
                temp /= 10;
            }
            if(prod % t == 0) return n;
            n++;
        }
        return -1;
    }
};",1447662641
Win_Handsome,win_handsome,86,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& arr, int k, int numOperations) {
        int n = arr.size();
        unordered_map<int, int> count, add;
        set<int> temp;
        for(int i = 0; i < n; i++){
            add[max(1, arr[i] - k)]++;
            add[arr[i] + k + 1]--;
            count[arr[i]]++;
            
            temp.insert(max(1, arr[i] - k));
            temp.insert(arr[i] + k + 1);
            temp.insert(arr[i]);
        }
        int ans = INT_MIN, sum = 0;
        for(auto &i : temp){
            sum += add[i];
            ans = max(ans, count[i] + min(numOperations, sum - count[i]));
        }
        return ans;
    }
};",1447690959
Jaeha Yi,jaehayi1,87,3622,python3,"from collections import defaultdict
from bisect import bisect_left, bisect_right

class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        '''
        Can update each element in nums at most once

        alternatively, the solution (res), we need to find the number that has the most nums
        in range [-k, k] if only numOp elements were changed 

        - if the sol is not on nums[i], we only need to check nums[i] +- k (this will maximize freq)
        '''
        counter = defaultdict(int)
        for x in nums: counter[x] += 1
        nums.sort()

        def check(x): 
            ret = counter[x]
            lo = bisect_left(nums, x - k)
            hi = bisect_right(nums, x + k)
            ret += min(numOperations, hi - lo - counter[x])
            return ret

        res = 0
        for i in range(len(nums)): 
            # check nums[i] and nums[i] +- k
            res = max(res, check(nums[i]))
            res = max(res, check(nums[i] + k))
            res = max(res, check(nums[i] - k))
        
        return res",1447700563
Jaeha Yi,jaehayi1,87,3626,python3,"class Solution:
    def smallestNumber(self, n: int, t: int) -> int:
        res = n
        
        def prod(x): 
            ret = 1
            for c in str(x): 
                ret *= int(c)
            return ret
            
        while True: 
            if prod(res) % t == 0:
                return res

            res += 1

        return -1",1447657908
Jaeha Yi,jaehayi1,87,3640,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        '''
        Can update each element in nums at most once

        alternatively, the solution (res), we need to find the number that has the most nums
        in range [-k, k] if only numOp elements were changed 

        - if the sol is not on nums[i], we only need to check nums[i] +- k (this will maximize freq)
        '''
        counter = defaultdict(int)
        for x in nums: counter[x] += 1
        nums.sort()

        def check(x): 
            ret = counter[x]
            lo = bisect_left(nums, x - k)
            hi = bisect_right(nums, x + k)
            ret += min(numOperations, hi - lo - counter[x])
            return ret

        res = 0
        for i in range(len(nums)): 
            # check nums[i] and nums[i] +- k
            res = max(res, check(nums[i]))
            res = max(res, check(nums[i] + k))
            res = max(res, check(nums[i] - k))
        
        return res",1447701289
parallel_stream,parallel_stream,88,3622,java,"class Solution {
  
  private static final int MAX = 100000;

  public int maxFrequency(int[] nums, int k, int numOperations) {
    int[] fq = new int[MAX + 1];
    Arrays.stream(nums).forEach(num -> fq[num]++);
    long[] pre = new long[MAX + 1];
    pre[0] = fq[0];
    IntStream.rangeClosed(1, MAX).forEach(i -> pre[i] = pre[i - 1] + fq[i]);
    int ans = 0;
    for (int x = 0; x <= MAX; x++) {
      int left = Math.max(x - k, 0);
      int right = Math.min(x + k, MAX);
      long total = pre[right] - (left > 0 ? pre[left - 1] : 0);
      long diff = total - fq[x];
      ans = Math.max(ans, fq[x] + (int) Math.min(diff, numOperations));
    }
    return ans;
  }
}",1447673121
parallel_stream,parallel_stream,88,3626,java,"class Solution {
  public int smallestNumber(int n, int t) {
    while (true) {
      int product = 1;
      int temp = n;
      while (temp > 0) {
        product *= temp % 10;
        temp /= 10;
      }
      if (product % t == 0) {
        return n;
      }
      n++;
    }
  }
}",1447653391
parallel_stream,parallel_stream,88,3640,java,"class Solution {
  
  public int maxFrequency(int[] nums, int k, int numOperations) {
    Arrays.sort(nums);
    List<Integer> values = new ArrayList<>();
    Arrays.stream(nums).forEach(num -> {
      values.add(num);
      values.add(num - k);
      values.add(num + k);
    });
    Collections.sort(values);
    List<Integer> uniqueValues = new ArrayList<>();
    uniqueValues.add(values.get(0));
    IntStream.range(1, values.size())
        .filter(i -> !values.get(i).equals(values.get(i - 1)))
        .mapToObj(values::get)
        .forEach(uniqueValues::add);
    int ans = 0;
    for (int uv : uniqueValues) {
      int lb = lb(nums, uv - k);
      int ub = ub(nums, uv + k);
      int count = ub - lb;
      int fq = 0;
      int idx = Arrays.binarySearch(nums, uv);
      if (idx >= 0) {
        int first = idx;
        while (first > 0 && nums[first - 1] == uv) {
          first--;
        }
        int last = idx;
        while (last < nums.length - 1 && nums[last + 1] == uv) {
          last++;
        }
        fq = last - first + 1;
      }
      ans = fq > 0
          ? Math.max(ans, fq + Math.min(numOperations, count - fq))
          : Math.max(ans, Math.min(numOperations, count));
    }
    return ans;
  }

  private int lb(int[] nums, int target) {
    int l = 0, r = nums.length;
    while (l < r) {
      int m = l + (r - l) / 2;
      if (nums[m] >= target) {
        r = m;
      } else {
        l = m + 1;
      }
    }
    return l;
  }

  private int ub(int[] nums, int target) {
    int l = 0, r = nums.length;
    while (l < r) {
      int m = l + (r - l) / 2;
      if (nums[m] > target) {
        r = m;
      } else {
        l = m + 1;
      }
    }
    return l;
  }
}",1447691870
Gautam Agarwal,gaut_2003,90,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        int n = nums.size();
        map<long long,int> mp;
        map<int,int> cnt;
        for(int i=0;i<n;i++){
            mp[nums[i]-k]++;
            mp[nums[i]+k+1]--;
            mp[nums[i]] += 0;
            cnt[nums[i]]++;
        }
        int prev_count = 0;
        for(auto it=mp.begin();it != mp.end();it++){
            if(it != mp.begin()){
                long long value = (*it).first;
                mp[value] += prev_count;
            }
            prev_count = (*it).second;
        }
        int ans = 0;
        for(auto val:mp){
            long long value = val.first;
            int not_apply = cnt[value];
            int apply = (val.second - not_apply);
            ans = max(ans,not_apply + (apply > numOperations ? numOperations : apply));
        }
        return ans;
    }
};",1447697191
Gautam Agarwal,gaut_2003,90,3626,cpp,"class Solution {
public:
    int getProduct(int n){
        int prod = 1;
        while(n!=0){
            prod *= (n%10);
            n /= 10;
        }
        return prod;
    }
    int smallestNumber(int n, int t) {
        for(int i=n;i<=100;i++){
            int prod = getProduct(i);
            if(prod%t == 0) return i;
        }
        return -1;
    }
};",1447702640
Gautam Agarwal,gaut_2003,90,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        int n = nums.size();
        map<long long,int> mp;
        map<int,int> cnt;
        for(int i=0;i<n;i++){
            mp[nums[i]-k]++;
            mp[nums[i]+k+1]--;
            mp[nums[i]] += 0;
            cnt[nums[i]]++;
        }
        int prev_count = 0;
        for(auto it=mp.begin();it != mp.end();it++){
            if(it != mp.begin()){
                long long value = (*it).first;
                mp[value] += prev_count;
            }
            prev_count = (*it).second;
        }
        int ans = 0;
        for(auto val:mp){
            long long value = val.first;
            int not_apply = cnt[value];
            int apply = (val.second - not_apply);
            ans = max(ans,not_apply + (apply > numOperations ? numOperations : apply));
        }
        return ans;
    }
};",1447696226
ocavue,ocavue,92,3622,python3,"from typing import List
from collections import Counter
import bisect


# A binary indexed tree (BIT)
class BIT:
    def __init__(self, size: int):
        self.bit = [0] * (size + 1)

    # Add 'diff' to index i
    def add(self, i, diff):
        i += 1

        # Traverse all ancestors and add 'diff'
        while i < len(self.bit):
            # Add 'diff' to current node of BI Tree
            self.bit[i] += diff

            # Update index to that of parent in update View
            i += i & (-i)

    # Returns sum(arr[0:i])
    def sum(self, i):
        s = 0
        while i > 0:
            s += self.bit[i]

            # (i & (-i)) is the lowest bit
            i -= i & (-i)
        return s

    # Returns sum(arr[i:j])
    def sum_range(self, i, j):
        return self.sum(j) - self.sum(i)


class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        num_set = set()
        for num in nums:
            num_set.add(num)
            num_set.add(num - k)
            num_set.add(num + k)

        alt_to_num = sorted(num_set)
        alt_len = len(alt_to_num)
        num_to_alt = {num: alt for alt, num in enumerate(alt_to_num)}

        alt_counter = Counter()
        for num in nums:
            alt = num_to_alt[num]
            alt_counter[alt] += 1

        bit = BIT(len(alt_to_num) + 2)

        for alt, count in alt_counter.items():
            bit.add(alt, count)

        sorted_nums = sorted(num_set)

        result = 0

        for alt in range(0, alt_len):
            num = alt_to_num[alt]

            num_prev = num - k
            num_next = num + k

            alt_i = bisect.bisect_left(sorted_nums, num_prev)
            alt_j = bisect.bisect_right(sorted_nums, num_next)

            count = bit.sum_range(alt_i, alt_j)
            count_noop = alt_counter[alt]
            count_need_op = count - count_noop
            count_can_op = min(numOperations, count_need_op)

            result = max(result, count_noop + count_can_op)

            # print(f""{alt=} {num=} {alt_i=} {alt_j=} {count=}"")

        return result

 ",1447703877
ocavue,ocavue,92,3626,python3,"class Solution:
    def smallestNumber(self, n: int, t: int) -> int:
        for num in range(n, 10**9):
            s = str(num)
            digits = [int(char) for char in s]
            prod = 1
            for dig in digits:
                prod *= dig 

            if prod % t == 0:
                return num 
        return -1",1447654640
ocavue,ocavue,92,3640,python3,"from typing import List
from collections import Counter
import bisect


# A binary indexed tree (BIT)
class BIT:
    def __init__(self, size: int):
        self.bit = [0] * (size + 1)

    # Add 'diff' to index i
    def add(self, i, diff):
        i += 1

        # Traverse all ancestors and add 'diff'
        while i < len(self.bit):
            # Add 'diff' to current node of BI Tree
            self.bit[i] += diff

            # Update index to that of parent in update View
            i += i & (-i)

    # Returns sum(arr[0:i])
    def sum(self, i):
        s = 0
        while i > 0:
            s += self.bit[i]

            # (i & (-i)) is the lowest bit
            i -= i & (-i)
        return s

    # Returns sum(arr[i:j])
    def sum_range(self, i, j):
        return self.sum(j) - self.sum(i)


class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        num_set = set()
        for num in nums:
            num_set.add(num)
            num_set.add(num - k)
            num_set.add(num + k)

        alt_to_num = sorted(num_set)
        alt_len = len(alt_to_num)
        num_to_alt = {num: alt for alt, num in enumerate(alt_to_num)}

        alt_counter = Counter()
        for num in nums:
            alt = num_to_alt[num]
            alt_counter[alt] += 1

        bit = BIT(len(alt_to_num) + 2)

        for alt, count in alt_counter.items():
            bit.add(alt, count)

        sorted_nums = sorted(num_set)

        result = 0

        for alt in range(0, alt_len):
            num = alt_to_num[alt]

            num_prev = num - k
            num_next = num + k

            alt_i = bisect.bisect_left(sorted_nums, num_prev)
            alt_j = bisect.bisect_right(sorted_nums, num_next)

            count = bit.sum_range(alt_i, alt_j)
            count_noop = alt_counter[alt]
            count_need_op = count - count_noop
            count_can_op = min(numOperations, count_need_op)

            result = max(result, count_noop + count_can_op)

            # print(f""{alt=} {num=} {alt_i=} {alt_j=} {count=}"")

        return result

 ",1447704172
Anupam Shah,user9218i,93,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& arr, int range, int maxOps) {
        map<int, int> rangeMap, freq;
        
        int minVal = INT_MAX, maxVal = INT_MIN, maxElement = 0;
        for(int i = 0; i < arr.size(); i++) {
            minVal = min(minVal, arr[i] - range);
            maxVal = max(maxVal, arr[i] + range);
            maxElement = max(maxElement, arr[i]);
            
            freq[arr[i]]++;
            rangeMap[arr[i] - range]++;
            rangeMap[arr[i] + range + 1]--;
            rangeMap[arr[i]] += 0;
        }
        
        int result = 0, previous = 0;
        for(auto& item : rangeMap) {
            item.second += previous;

            int currentCount = (item.first >= 1 && item.first <= maxElement) ? freq[item.first] : 0;
            int additions = min(item.second - currentCount, maxOps);

            result = max(result, currentCount + additions);
            previous = item.second;
        }
        return result;
    }
};
",1447701355
Anupam Shah,user9218i,93,3626,cpp,"class Solution {
public:
    bool check(int& num, int& t) {
        int pr = 1;
        string str = to_string(num);
        for(int i = 0; i < str.length(); i ++)
            pr *= str[i] - '0';
        if(pr % t == 0)
            return 1;
        return 0;
    }
    int smallestNumber(int n, int t) {
        int i = n;
        while(1) {
            if(check(i, t)) {
                return i;
            }
            if(i >= 1e8)    break;
            i ++;
        }
        return 2;
    }
};",1447704273
Anupam Shah,user9218i,93,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& arr, int range, int maxOps) {
        map<int, int> rangeMap, freq;
        
        int minVal = INT_MAX, maxVal = INT_MIN, maxElement = 0;
        for(int i = 0; i < arr.size(); i++) {
            minVal = min(minVal, arr[i] - range);
            maxVal = max(maxVal, arr[i] + range);
            maxElement = max(maxElement, arr[i]);
            
            freq[arr[i]]++;
            rangeMap[arr[i] - range]++;
            rangeMap[arr[i] + range + 1]--;
            rangeMap[arr[i]] += 0;
        }
        
        int result = 0, previous = 0;
        for(auto& item : rangeMap) {
            item.second += previous;

            int currentCount = (item.first >= 1 && item.first <= maxElement) ? freq[item.first] : 0;
            int additions = min(item.second - currentCount, maxOps);

            result = max(result, currentCount + additions);
            previous = item.second;
        }
        return result;
    }
};
",1447700882
Saijayavinoth T V S,saijayavinoth,94,3622,python3,"from bisect import *
class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        count = Counter(nums)
        nums.sort()
        ans = 0
        for num in range(nums[0], nums[-1]+1):
            within_range = bisect(nums, num+k) - bisect_left(nums, num-k) - count.get(num, 0)
            ans = max(ans, count.get(num, 0) + min(numOperations, within_range))
        return ans
        ",1447671235
Saijayavinoth T V S,saijayavinoth,94,3626,python3,"class Solution:
    def smallestNumber(self, n: int, t: int) -> int:
        def possible(n):
            p = 1
            while n > 0:
                p*=n%10
                n//=10
            return p%t==0
            
        while not possible(n):
            n+=1
        return n",1447657761
Saijayavinoth T V S,saijayavinoth,94,3640,python3,"from bisect import *
class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        arr = []
        for num in nums:
            arr.extend([num-k, num, num+k])
        count = Counter(nums)
        nums.sort()
        arr.sort()
        ans = 0
        for num in arr:
            within_range = bisect(nums, num+k) - bisect_left(nums, num-k) - count.get(num, 0)
            ans = max(ans, count.get(num, 0) + min(numOperations, within_range))
        return ans",1447685146
Sandeep P,Sandeep_P,95,3622,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        ct=Counter(nums)
        a=sorted(ct.keys())
        b=set()
        for x in a:
            b.add(x)
            b.add(x+k)
            b.add(x-k)
        b=sorted(b)
        sm=0
        i,j=0,0
        n=len(a)
        ans=0
        for target in b:
            while j<n and a[j]-target<=k:
                sm+=ct[a[j]]
                j+=1
            while i<n and target-a[i]>k:
                sm-=ct[a[i]]
                i+=1
            cur=ct[target]
            take=min(numOperations,sm-cur)
            ans=max(ans,cur+take)
        return ans",1447683826
Sandeep P,Sandeep_P,95,3626,python3,"class Solution:
    def smallestNumber(self, n: int, t: int) -> int:
        ans=n
        while prod(map(int,str(ans)))%t!=0:
            ans+=1
        return ans",1447653585
Sandeep P,Sandeep_P,95,3640,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        ct=Counter(nums)
        a=sorted(ct.keys())
        b=set()
        for x in a:
            b.add(x)
            b.add(x+k)
            b.add(x-k)
        b=sorted(b)
        sm=0
        i,j=0,0
        n=len(a)
        ans=0
        for target in b:
            while j<n and a[j]-target<=k:
                sm+=ct[a[j]]
                j+=1
            while i<n and target-a[i]>k:
                sm-=ct[a[i]]
                i+=1
            cur=ct[target]
            take=min(numOperations,sm-cur)
            ans=max(ans,cur+take)
        return ans
",1447685246
eCtjNAHCiQ,eCtjNAHCiQ,98,3622,java,"import java.util.*;

class Solution {
    public int maxFrequency(int[] nums, int k, int numOperations) {
        TreeSet<Integer> set = new TreeSet<>();
        for (int num : nums) {
            set.add(num - k);
            set.add(num);
            set.add(num + k + 1);
        }
        List<Integer> list = new ArrayList<>(set);
        int M = list.size();
        HashMap<Integer, Integer> map = new HashMap<>();
        for (int i = 0; i < M; i++) {
            map.put(list.get(i), i);
        }
        int[] counts = new int[M + 1]; 
        int[] adj = new int[M];

        for (int num : nums) {
            int start = num - k;
            int end = num + k + 1;

            Integer l = map.get(start);
            if (l == null) {
                l = 0;
            }

            Integer r = map.get(end);
            if (r == null) {
                r = M;
            }

            counts[l] += 1;
            counts[r] -= 1;

            Integer idx = map.get(num);
            if (idx != null) {
                adj[idx] += 1;
            }
        }
        int[] freq = new int[M];
        freq[0] = counts[0];
        for (int i = 1; i < M; i++) {
            counts[i] += counts[i - 1];
            freq[i] = counts[i];
        }
        int max = 0;
        for (int i = 0; i < M; i++) {
            int totalAdjusted = freq[i] - adj[i];
            int frequency = adj[i] + Math.min(totalAdjusted, numOperations);
            if (frequency > max) {
                max = frequency;
            }
        }

        return max;
    }
}
",1447688057
eCtjNAHCiQ,eCtjNAHCiQ,98,3626,java,"class Solution {
    public int smallestNumber(int n, int t) {
        return check(n,t);
    }

    public int check(int n,int t){
        int temp = n;
        int prod = 1;
        while(temp>0) {
            prod *= temp%10;
            temp = temp/10;
        }
        if(prod%t == 0) return n;
        int ans = check(n+1,t);
        return ans;
    }
}",1447660480
eCtjNAHCiQ,eCtjNAHCiQ,98,3640,java,"class Solution {
    public int maxFrequency(int[] nums, int k, int numOperations) {
        TreeSet<Integer> set = new TreeSet<>();
        for (int num : nums) {
            set.add(num - k);
            set.add(num);
            set.add(num + k + 1);
        }
        List<Integer> list = new ArrayList<>(set);
        int M = list.size();

        HashMap<Integer, Integer> map = new HashMap<>();
        for (int i = 0; i < M; i++) {
            map.put(list.get(i), i);
        }

        int[] counts = new int[M + 1]; 
        int[] adj = new int[M];

        for (int num : nums) {
            int start = num - k;
            int end = num + k + 1;

            Integer l = map.get(start);
            if (l == null) {
                l = 0;
            }

            Integer r = map.get(end);
            if (r == null) {
                r = M;
            }

            counts[l] += 1;
            counts[r] -= 1;
            Integer idx = map.get(num);
            if (idx != null) {
                adj[idx] += 1;
            }
        }

        int[] freq = new int[M];
        freq[0] = counts[0];
        for (int i = 1; i < M; i++) {
            counts[i] += counts[i - 1];
            freq[i] = counts[i];
        }

        int max = 0;
        for (int i = 0; i < M; i++) {
            int totalAdjusted = freq[i] - adj[i];
            int frequency = adj[i] + Math.min(totalAdjusted, numOperations);
            if (frequency > max) {
                max = frequency;
            }
        }

        return max;
    }
}
",1447695537
Teemu Ryyti,delivery,99,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        sort(nums.begin(), nums.end());
        int mx = nums.back() + 1;
        vector<int> c(mx);
        for (auto x: nums) {
            ++c[x];
        }
        
        vector<int> t(mx + 1);
        for (int i = 0; i < mx; ++i) {
            t[i+1] = t[i] + c[i];
        }
        int ans = 0;
        for (int i = 0; i < mx; ++i) {
            int l = max(0, i - k);
            int r = min(mx - 1, i + k);
            int cur = c[i] + min(numOperations, t[r+1] - t[l] - c[i]);
            ans = max(ans, cur);
        }
        
        return ans;
    }
};",1447671378
Teemu Ryyti,delivery,99,3626,cpp,"class Solution {
public:
    int smallestNumber(int n, int t) {
        while(true) {
            int x = n;
            int s = 1;
            while(x) {
                s *= x % 10;
                x /= 10;
            }
            if (s % t == 0) {
                return n;
            }
            ++n;
        }
        return n;
    }
};",1447654700
Teemu Ryyti,delivery,99,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        sort(nums.begin(), nums.end());
        
        int l = 0, n = nums.size();
        int ans = 0;
        for (int r = 0; r < n; ++r) {
            while (nums[r] - nums[l] > 2 * k) {
                ++l;
            }
            int tot = r - l + 1;
            ans = max(ans, min(tot, numOperations));
        }
        
        map<int, int> m;
        for (auto x: nums) {
            ++m[x];
        } 
        
        l = 0;
        int r = 0;
        for (int i = 0; i < n; ++i) {
            while (r + 1 < n && nums[r + 1] - nums[i] <= k) {
                ++r;
            }
            while (nums[i] - nums[l] > k) {
                ++l;
            }
            int tot = r - l + 1;
            ans = max(ans, m[nums[i]] + min(numOperations, tot - m[nums[i]]));
        }
        
        return ans;
    }
};",1447704563
jakao,jakao,101,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        map<int, int> sweep;
        for(int i = 0; i < nums.size(); i++){
            sweep[nums[i] - k]++;
            sweep[nums[i] + k + 1]--;
        }
        int now = 0, mx = 0;
        
        for(auto i : sweep){
            now += i.second;
            mx = max(mx, now);
        }
        mx = min(mx, numOperations);
        
        map<int, int> mp;
        for(int i : nums){
            mp[i] ++;
        }
        sort(nums.begin(), nums.end());
        vector<int> ind = nums;
        ind.resize(unique(ind.begin(), ind.end()) - ind.begin());
        int ans = 1;
        for(int i : ind){
            int r = upper_bound(nums.begin(), nums.end(), i+k) - upper_bound(nums.begin(), nums.end(), i);
            int l = lower_bound(nums.begin(), nums.end(), i) - lower_bound(nums.begin(), nums.end(), i-k);
            // cout << i << "" : "" << l << "" "" << r << "" : "" << min(r + l, numOperations) + mp[i] << endl;
            ans = max(ans, min(r + l, numOperations) + mp[i]);
        }
        return max(mx, ans);
    }
};",1447685248
jakao,jakao,101,3626,cpp,"class Solution {
public:
    int smallestNumber(int n, int t) {
        for(int i = n;; i++){
            int x = i, p = 1;
            while(x){
                p *= x%10;
                x/=10;
            }
            if(p % t == 0){
                return i;
            }
        }
    }
};",1447656868
jakao,jakao,101,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        map<int, int> sweep;
        for(int i = 0; i < nums.size(); i++){
            sweep[nums[i] - k]++;
            sweep[nums[i] + k + 1]--;
        }
        int now = 0, mx = 0;
        
        for(auto i : sweep){
            now += i.second;
            mx = max(mx, now);
        }
        mx = min(mx, numOperations);
        
        map<int, int> mp;
        for(int i : nums){
            mp[i] ++;
        }
        sort(nums.begin(), nums.end());
        vector<int> ind = nums;
        ind.resize(unique(ind.begin(), ind.end()) - ind.begin());
        int ans = 1;
        for(int i : ind){
            int r = upper_bound(nums.begin(), nums.end(), i+k) - upper_bound(nums.begin(), nums.end(), i);
            int l = lower_bound(nums.begin(), nums.end(), i) - lower_bound(nums.begin(), nums.end(), i-k);
            // cout << i << "" : "" << l << "" "" << r << "" : "" << min(r + l, numOperations) + mp[i] << endl;
            ans = max(ans, min(r + l, numOperations) + mp[i]);
        }
        return max(mx, ans);
    }
};",1447685855
fpeterfalvi,fpeterfalvi,102,3622,java,"import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

class Solution {
    public int maxFrequency(int[] nums, int k, int numOperations) {
        Map<Integer, Integer> freqs = new HashMap<>();
        for (int num : nums) {
            freqs.put(num, freqs.getOrDefault(num, 0) + 1);
        }
        Arrays.sort(nums);
        int result = 0;
        List<Integer> toCheck = new ArrayList<>();
        for (int num : nums) {
            toCheck.add(num);
            toCheck.add(num - k);
            toCheck.add(num + k);
        }
        for (int num : toCheck) {
            int left = lowerBound(nums, (int)Math.max((long)num - k, Integer.MIN_VALUE));
            int right = upperBound(nums, (int)Math.min((long)num + k, Integer.MAX_VALUE)) - 1;
            int interval = (Math.min(right - left + 1, freqs.getOrDefault(num, 0) + numOperations));
            result = Math.max(result, interval);
        }
        return result;
    }

    static int lowerBound(int[] arr, int val) {
        int index;
        int step;
        int first = 0;
        int count = arr.length;
        while (count > 0) {
            step = count / 2;
            index = first + step;
            if (arr[index] < val) {
                first = index + 1;
                count -= step + 1;
            } else {
                count = step;
            }
        }
        return first;
    }

    static int upperBound(int[] arr, int val) {
        int index;
        int step;
        int first = 0;
        int count = arr.length;
        while (count > 0) {
            step = count / 2;
            index = first + step;
            if (arr[index] <= val) {
                first = index + 1;
                count -= step + 1;
            } else {
                count = step;
            }
        }
        return first;
    }
}",1447685992
fpeterfalvi,fpeterfalvi,102,3626,java,"class Solution {
    public int smallestNumber(int n, int t) {
        int x = n;
        while(digitProd(x) % t != 0) {
            x++;
        }
        return x;
    }
    
    int digitProd(int x) {
        int prod = 1;
        for (char c : Integer.toString(x).toCharArray()) {
            prod *= c - '0';
        }
        return prod;
    }
}",1447654429
fpeterfalvi,fpeterfalvi,102,3640,java,"import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

class Solution {
    public int maxFrequency(int[] nums, int k, int numOperations) {
        Map<Integer, Integer> freqs = new HashMap<>();
        for (int num : nums) {
            freqs.put(num, freqs.getOrDefault(num, 0) + 1);
        }
        Arrays.sort(nums);
        int result = 0;
        List<Integer> toCheck = new ArrayList<>();
        for (int num : nums) {
            toCheck.add(num);
            toCheck.add(num - k);
            toCheck.add(num + k);
        }
        for (int num : toCheck) {
            int left = lowerBound(nums, (int)Math.max((long)num - k, Integer.MIN_VALUE));
            int right = upperBound(nums, (int)Math.min((long)num + k, Integer.MAX_VALUE)) - 1;
            int interval = (Math.min(right - left + 1, freqs.getOrDefault(num, 0) + numOperations));
            result = Math.max(result, interval);
        }
        return result;
    }

    static int lowerBound(int[] arr, int val) {
        int index;
        int step;
        int first = 0;
        int count = arr.length;
        while (count > 0) {
            step = count / 2;
            index = first + step;
            if (arr[index] < val) {
                first = index + 1;
                count -= step + 1;
            } else {
                count = step;
            }
        }
        return first;
    }

    static int upperBound(int[] arr, int val) {
        int index;
        int step;
        int first = 0;
        int count = arr.length;
        while (count > 0) {
            step = count / 2;
            index = first + step;
            if (arr[index] <= val) {
                first = index + 1;
                count -= step + 1;
            } else {
                count = step;
            }
        }
        return first;
    }
}",1447684948
Pratyush Raman,therealpratyushraman,103,3622,java,"import java.util.*;

class Solution {
    public int maxFrequency(int[] nums, int k, int numOperations) {
        Map<Integer, Integer> freqMap = new HashMap<>();
        List<int[]> events = new ArrayList<>();
        for (int num : nums) {
            freqMap.put(num, freqMap.getOrDefault(num, 0) + 1);
            events.add(new int[]{num - k, 1});
            events.add(new int[]{num + k + 1, -1});
        }

        Set<Integer> tSet = new HashSet<>();
        for (int num : nums) {
            tSet.add(num);
        }
        for (int[] event : events) {
            tSet.add(event[0]);
        }

        List<Integer> tList = new ArrayList<>(tSet);
        Collections.sort(tList);
        events.sort((a, b) -> Integer.compare(a[0], b[0]));

        int coverage = 0, idx = 0, maxFreq = 0;
        int n = events.size();
        for (int t : tList) {
            while (idx < n && events.get(idx)[0] <= t) {
                coverage += events.get(idx)[1];
                idx++;
            }
            int freq = freqMap.getOrDefault(t, 0);
            int possibleFreq = freq + Math.min(numOperations, coverage - freq);
            maxFreq = Math.max(maxFreq, possibleFreq);
        }
        return maxFreq;
    }
}
",1447674666
Pratyush Raman,therealpratyushraman,103,3626,java,"class Solution {
    public int smallestNumber(int n, int t) {
        for (int i = n;; i++) {
            int prod = 1, temp = i;
            if (i == 0) prod = 0;
            while (temp > 0) {
                int d = temp % 10;
                if (d == 0) {
                    prod = 0;
                    break;
                }
                prod *= d;
                temp /= 10;
            }
            if (prod % t == 0) return i;
        }
    }
}
",1447654929
Pratyush Raman,therealpratyushraman,103,3640,java,"import java.util.*;

class Solution {
    public int maxFrequency(int[] nums, int k, int numOperations) {
        Map<Integer, Integer> freqMap = new HashMap<>();
        List<int[]> events = new ArrayList<>();
        Set<Integer> positions = new HashSet<>();
        for (int num : nums) {
            freqMap.put(num, freqMap.getOrDefault(num, 0) + 1);
            events.add(new int[]{num - k, 1});
            events.add(new int[]{num + k + 1, -1});
            positions.add(num);
            positions.add(num - k);
            positions.add(num + k + 1);
        }
        List<Integer> tList = new ArrayList<>(positions);
        Collections.sort(tList);
        events.sort((a, b) -> Integer.compare(a[0], b[0]));
        int coverage = 0, idx = 0, maxFreq = 0, n = events.size();
        for (int t : tList) {
            while (idx < n && events.get(idx)[0] <= t) {
                coverage += events.get(idx)[1];
                idx++;
            }
            int freq = freqMap.getOrDefault(t, 0);
            int possibleFreq = freq + Math.min(numOperations, coverage - freq);
            maxFreq = Math.max(maxFreq, possibleFreq);
        }
        return maxFreq;
    }
}
",1447686022
17ucs031,17ucs031,104,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        map<int, int> mp;
        vector<int> f(1e5 + 1, 0);
        
        int mini = 2e5, maxi = -1e5, curr = 0;
        for(int i = 0; i < nums.size(); i ++) {
            mini = min(mini, nums[i] - k);
            maxi = max(maxi, nums[i] + k);
            curr = max(curr, nums[i]);
            f[nums[i]] ++;
            mp[nums[i] - k] ++, mp[nums[i]+k+1] --;
        }
        
        int ans = 0;
        for(int i = mini; i <= maxi; i ++) {
            mp[i] += mp[i-1];
            int mc = (i >= 1 and i <= curr ? f[i] : 0);
            int extra = mp[i] - mc;
            extra = min(extra, numOperations);
            // if(i >= 1 and i <= 5)
            //     cout << i << "" "" << mc + extra << endl;
            ans = max(ans, mc + extra);
        }
        return ans;
    }
};",1447678748
17ucs031,17ucs031,104,3626,cpp,"class Solution {
public:
    bool f(int n, int t, int p = 1) {
        string s = to_string(n);
        for(auto it : s)    p *= it - '0';
        return p%t == 0;
    }
    int smallestNumber(int n, int t) {
        for(int i = n; i <= 1e7; i++) {
            if(f(i, t))     return i;
        }
        return -1;
    }
};",1447653218
17ucs031,17ucs031,104,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        map<int, int> mp;
        map<int, int> f;
        
        int mini = 2e9, maxi = -1e9, curr = 0;
        for(int i = 0; i < nums.size(); i ++) {
            mini = min(mini, nums[i] - k);
            maxi = max(maxi, nums[i] + k);
            curr = max(curr, nums[i]);
            
            f[nums[i]] ++;
            mp[nums[i] - k] ++, mp[nums[i]+k+1] --;
            mp[nums[i]] += 0;
        }
        
        int ans = 0;
        // for(int i = mini; i <= maxi; i ++) {
        
        int last = 0;
        for(auto &it : mp) {
            it.second += last;

            int mc = (it.first >= 1 and it.first <= curr ? f[it.first] : 0);
            int extra = it.second - mc;
            extra = min(extra, numOperations);

            //cout << it.first << "" "" << it.second << endl; 
            //"" "" << mc + extra << endl;
            ans = max(ans, mc + extra);
            
            last = it.second;
        }
        return ans;
    }
};",1447696106
Hell,Vinayak_Gupta_20,105,3622,java,"class Solution {
    public int maxFrequency(int[] nums, int k, int op) {
        Arrays.sort(nums);
        int n = nums.length;
        Map<Integer,Integer> mp = new HashMap<>();
        int ans = 1;
        for(int x:nums) mp.put(x,mp.getOrDefault(x,0)+1);
        for(int i=0;i<n;i++){
            int x = nums[i];
            int l = findLarge(nums,x-k);
            int r = findSmall(nums,x+k);
            int len = r-l+1;
            int diff = len - mp.get(x);
            int extra = Math.min(op,diff);
            ans = Math.max(ans,extra+mp.get(x));
            int left = findLarge(nums,x-2*k);
            int right = findSmall(nums,x+k*2);
            int st = findLarge(nums,x);
            int end = findSmall(nums,x);
            int len2 = end-left+1;
            int len3 = right-st+1;
            ans = Math.max(ans,Math.min(op,len2));
            ans = Math.max(ans,Math.min(op,len3));
        }
        return ans;
    }

    public int findLarge(int[] nums, int req){
        int st = 0;
        int end = nums.length-1;
        int ans = -1;
        while(st<=end){
            int mid = st+(end-st)/2;
            if(nums[mid]>=req){
                ans = mid;
                end = mid-1;
            }
            else st = mid+1;
        }
        return ans;
    }

    public int findSmall(int[] nums, int req){
        int st = 0;
        int end = nums.length-1;
        int ans = -1;
        while(st<=end){
            int mid = st+(end-st)/2;
            if(nums[mid]<=req){
                ans = mid;
                st = mid+1;
            }
            else end = mid-1;
        }
        return ans;
    }
}",1447686663
Hell,Vinayak_Gupta_20,105,3626,java,"class Solution {
    public int smallestNumber(int n, int t) {
        while(n<100000){
            int p = 1;
            int x = n;
            while(x>0) {
                p *= x%10;
                x/=10;
            }
            if(p%t==0) return n;
            n++;
        }
        return -1;
    }
}",1447656282
Hell,Vinayak_Gupta_20,105,3640,java,"class Solution {
    public int maxFrequency(int[] nums, long k, long op) {
        Arrays.sort(nums);
        int n = nums.length;
        Map<Integer, Long> mp = new HashMap<>();
        long ans = 1;
        for (int x : nums) mp.put(x, mp.getOrDefault(x, 0L) + 1);
        for (int i = 0; i < n; i++) {
            int x = nums[i];
            long l = findLarge(nums, x - k);
            long r = findSmall(nums, x + k);
            long len = r - l + 1;
            long diff = len - mp.get(x);
            long extra = Math.min(op, diff);
            ans = Math.max(ans, extra + mp.get(x));
            long left = findLarge(nums, x - 2 * k);
            long right = findSmall(nums, x + 2 * k);
            long st = findLarge(nums, x);
            long end = findSmall(nums, x);
            long len2 = end - left + 1;
            long len3 = right - st + 1;
            ans = Math.max(ans, Math.min(op, len2));
            ans = Math.max(ans, Math.min(op, len3));
        }
        return (int) ans;
    }

    public long findLarge(int[] nums, long req) {
        int st = 0;
        int end = nums.length - 1;
        long ans = -1;
        while (st <= end) {
            int mid = st + (end - st) / 2;
            if (nums[mid] >= req) {
                ans = mid;
                end = mid - 1;
            } else st = mid + 1;
        }
        return ans;
    }

    public long findSmall(int[] nums, long req) {
        int st = 0;
        int end = nums.length - 1;
        long ans = -1;
        while (st <= end) {
            int mid = st + (end - st) / 2;
            if (nums[mid] <= req) {
                ans = mid;
                st = mid + 1;
            } else end = mid - 1;
        }
        return ans;
    }
}
",1447696330
luciaa,luciaa,106,3622,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        cnt = Counter(nums)
        nums.sort()
        res = 0
        for tgt in range(max(nums) + 1):
            l, r = bisect_left(nums, tgt - k), bisect_right(nums, tgt + k)
            res = max(res, min(r - l, cnt[tgt] + numOperations))
        return res
        ",1447686939
luciaa,luciaa,106,3626,python3,"class Solution:
    def smallestNumber(self, n: int, t: int) -> int:
        cur = n
        while True:
            p = reduce(operator.mul, map(int, str(cur)), 1)
            if p % t == 0:
                return cur
            cur += 1
        ",1447661289
luciaa,luciaa,106,3640,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        cnt = Counter(nums)
        nums.sort()
        res = 0
        for e in nums:
            for tgt in [e - k, e, e + k]:
                l, r = bisect_left(nums, tgt - k), bisect_right(nums, tgt + k)
                res = max(res, min(r - l, cnt[tgt] + numOperations))
        return res",1447696630
Andrey,A_Le_K,108,3622,cpp,"static const int __ = []() { std::ios::sync_with_stdio(false); std::cin.tie(nullptr); std::cout.tie(nullptr); return 0; }();

typedef long long ll; typedef unsigned int ui; typedef unsigned long long ull; typedef pair<int ,int> pii; typedef pair<ll, ll> pll; typedef double rl;
typedef pii int2; typedef tuple<int, int, int> int3; typedef tuple<int, int, int, int> int4; typedef tuple<int, int, int, int, int> int5;
typedef pll ll2; typedef tuple<ll, ll, ll> ll3; typedef tuple<ll, ll, ll, ll> ll4; typedef tuple<ll, ll, ll, ll, ll> ll5;
typedef vector<int> vi; typedef vector<pii> vii; typedef vector<ll> vll; typedef vector<pll> vll_ll; typedef vector<vi> vvi; typedef vector<vii> vvii; typedef vector<vll> vvll; typedef vector<vll_ll> vvll_ll;

#define pb push_back
#define mp make_pair
#define eb emplace_back
#define xx first
#define yy second
#define FOR(i,N) for(int i=0; i<N; i++)
#define g0(x) get<0>(x)
#define g1(x) get<1>(x)
#define g2(x) get<2>(x)
#define g3(x) get<3>(x)
#define g4(x) get<4>(x)

template<typename A> string to_string(A* ptr) { stringstream ss; ss << ""0x"" << std::setw(16) << std::setfill ('0') << std::hex << (uint64_t)(uintptr_t)ptr; return ss.str(); }
string to_string(char c) { return ((string)""'""+c)+ ""'""; }
template <typename A, typename B> string to_string(pair<A, B> p);
template <typename A, typename B, typename C> string to_string(tuple<A, B, C> p);
template <typename A, typename B, typename C, typename D> string to_string(tuple<A, B, C, D> p);
string to_string(const string& s) { return '""' + s + '""'; }
string to_string(const char* s) { return to_string((string) s); }
string to_string(bool b) { return (b ? ""true"" : ""false""); }
string to_string(vector<bool> v) {
    bool first = true; string res = ""{"";
	for (int i = 0; i < static_cast<int>(v.size()); i++) { if (!first) { res += "", ""; } first = false; res += to_string(v[i]); }
	res += ""}""; return res;
}
template <size_t N> string to_string(bitset<N> v) { string res = """"; for (size_t i = 0; i < N; i++) { res += static_cast<char>('0' + v[i]); } return res; }
template <typename A> string to_string(A v) {
	bool first = true; string res = ""{"";
	for (const auto &x : v) {
		if (!first) { res += "", ""; }
		first = false; res += to_string(x);
	}
	res += ""}""; return res;
}
template <typename A, typename B> string to_string(pair<A, B> p) { return ""("" + to_string(p.first) + "", "" + to_string(p.second) + "")""; }
template <typename A, typename B, typename C> string to_string(tuple<A, B, C> p) { return ""("" + to_string(get<0>(p)) + "", "" + to_string(get<1>(p)) + "", "" + to_string(get<2>(p)) + "")""; }
template <typename A, typename B, typename C, typename D>
string to_string(tuple<A, B, C, D> p) { return ""("" + to_string(get<0>(p)) + "", "" + to_string(get<1>(p)) + "", "" + to_string(get<2>(p)) + "", "" + to_string(get<3>(p)) + "")""; }
void debug_out() { cout << endl; }
template <typename Head, typename... Tail> void debug_out(Head H, Tail... T) { cout << "" "" << to_string(H); debug_out(T...); }

#define popc __builtin_popcountll
//#define popc __builtin_popcount
//#define clz __builtin_clzll
//#define clz __builtin_clz
inline int bitLength(uint32_t val) { return 32 - __builtin_clz  (val); }
inline int bitLength(uint64_t val) { return 64 - __builtin_clzll(val); }

template<typename T> inline void domax(T& A, const T& B) { A=max(A, B); }
template<typename T> inline void domin(T& A, const T& B) { A=min(A, B); }

template<typename T>
inline T true_mod(T A, T B)
{
    assert(B>=1);
    A%=B;
    if(A<0) A+=B;
    return A;
}

template<typename T>
inline T div_down(T A, T B)
{
    return (A-true_mod(A,B))/B;
}

template<typename T>
inline T div_up(T A, T B)
{
    return div_down(A+B-1, B);
}

#define all(x) (x).begin(), (x).end()

#if 0
#define dbg(...) cout << ""["" << #__VA_ARGS__ << ""]:"", debug_out(__VA_ARGS__)
#else
#define dbg(...) 42
#endif


class Solution {
public:
    int maxFrequency(vector<int>& a, int k, int numOperations) {
        const int n=a.size();
        dbg(""============="");
        dbg(n);
        
        vector<ll> A(n);
        FOR(i, n) A[i]=a[i];
        ll K=k;
        
        sort(all(A));
        
        int result=0;
        const int mn=*min_element(all(a));
        const int mx=*max_element(all(a));
        
        map<int, int> MA;
        FOR(i, n) MA[a[i]]++;
        
        
        //for(int l=0, i=0, r=0; i<n; i++) {
        for(int l=0, i=mn, r=0; i<=mx; i++) {
            //while(l<n && -A[l]+A[i]>K)  l++;
            //while(r<n && -A[i]+A[r]<=K) r++;
            
            while(l<n && -A[l]+i>K)  l++;
            while(r<n && -i+A[r]<=K) r++;
            
            const int len_segment=r-l;
            //const int max_get=1+numOperations;
            
            auto it=MA.find(i);
            const int cnt=it==MA.end()?0:it->second;
            
            const int need_operations=r-l-cnt;
            const int can_make_operations=cnt+min(need_operations, numOperations);
            
            dbg(i, cnt, need_operations, can_make_operations);
            
            
            //const int curr=min(len_segment, max_get);
            domax(result, can_make_operations);
        }
        
        
        
        
        return result;
    }
};",1447679791
Andrey,A_Le_K,108,3626,cpp,"static const int __ = []() { std::ios::sync_with_stdio(false); std::cin.tie(nullptr); std::cout.tie(nullptr); return 0; }();

typedef long long ll; typedef unsigned int ui; typedef unsigned long long ull; typedef pair<int ,int> pii; typedef pair<ll, ll> pll; typedef double rl;
typedef pii int2; typedef tuple<int, int, int> int3; typedef tuple<int, int, int, int> int4; typedef tuple<int, int, int, int, int> int5;
typedef pll ll2; typedef tuple<ll, ll, ll> ll3; typedef tuple<ll, ll, ll, ll> ll4; typedef tuple<ll, ll, ll, ll, ll> ll5;
typedef vector<int> vi; typedef vector<pii> vii; typedef vector<ll> vll; typedef vector<pll> vll_ll; typedef vector<vi> vvi; typedef vector<vii> vvii; typedef vector<vll> vvll; typedef vector<vll_ll> vvll_ll;

#define pb push_back
#define mp make_pair
#define eb emplace_back
#define xx first
#define yy second
#define FOR(i,N) for(int i=0; i<N; i++)
#define g0(x) get<0>(x)
#define g1(x) get<1>(x)
#define g2(x) get<2>(x)
#define g3(x) get<3>(x)
#define g4(x) get<4>(x)

template<typename A> string to_string(A* ptr) { stringstream ss; ss << ""0x"" << std::setw(16) << std::setfill ('0') << std::hex << (uint64_t)(uintptr_t)ptr; return ss.str(); }
string to_string(char c) { return ((string)""'""+c)+ ""'""; }
template <typename A, typename B> string to_string(pair<A, B> p);
template <typename A, typename B, typename C> string to_string(tuple<A, B, C> p);
template <typename A, typename B, typename C, typename D> string to_string(tuple<A, B, C, D> p);
string to_string(const string& s) { return '""' + s + '""'; }
string to_string(const char* s) { return to_string((string) s); }
string to_string(bool b) { return (b ? ""true"" : ""false""); }
string to_string(vector<bool> v) {
    bool first = true; string res = ""{"";
	for (int i = 0; i < static_cast<int>(v.size()); i++) { if (!first) { res += "", ""; } first = false; res += to_string(v[i]); }
	res += ""}""; return res;
}
template <size_t N> string to_string(bitset<N> v) { string res = """"; for (size_t i = 0; i < N; i++) { res += static_cast<char>('0' + v[i]); } return res; }
template <typename A> string to_string(A v) {
	bool first = true; string res = ""{"";
	for (const auto &x : v) {
		if (!first) { res += "", ""; }
		first = false; res += to_string(x);
	}
	res += ""}""; return res;
}
template <typename A, typename B> string to_string(pair<A, B> p) { return ""("" + to_string(p.first) + "", "" + to_string(p.second) + "")""; }
template <typename A, typename B, typename C> string to_string(tuple<A, B, C> p) { return ""("" + to_string(get<0>(p)) + "", "" + to_string(get<1>(p)) + "", "" + to_string(get<2>(p)) + "")""; }
template <typename A, typename B, typename C, typename D>
string to_string(tuple<A, B, C, D> p) { return ""("" + to_string(get<0>(p)) + "", "" + to_string(get<1>(p)) + "", "" + to_string(get<2>(p)) + "", "" + to_string(get<3>(p)) + "")""; }
void debug_out() { cout << endl; }
template <typename Head, typename... Tail> void debug_out(Head H, Tail... T) { cout << "" "" << to_string(H); debug_out(T...); }

#define popc __builtin_popcountll
//#define popc __builtin_popcount
//#define clz __builtin_clzll
//#define clz __builtin_clz
inline int bitLength(uint32_t val) { return 32 - __builtin_clz  (val); }
inline int bitLength(uint64_t val) { return 64 - __builtin_clzll(val); }

template<typename T> inline void domax(T& A, const T& B) { A=max(A, B); }
template<typename T> inline void domin(T& A, const T& B) { A=min(A, B); }

template<typename T>
inline T true_mod(T A, T B)
{
    assert(B>=1);
    A%=B;
    if(A<0) A+=B;
    return A;
}

template<typename T>
inline T div_down(T A, T B)
{
    return (A-true_mod(A,B))/B;
}

template<typename T>
inline T div_up(T A, T B)
{
    return div_down(A+B-1, B);
}

#define all(x) (x).begin(), (x).end()

#if 1
#define dbg(...) cout << ""["" << #__VA_ARGS__ << ""]:"", debug_out(__VA_ARGS__)
#else
#define dbg(...) 42
#endif

ll prod(ll n) {
    ll r=1;
    while(n) {
        r=r*(n%10);
        n/=10;
    }
    return r;
}

class Solution {
public:
    int smallestNumber(int n, int t) {
        for(ll i=n; true; i++) {
            if(prod(i)%t==0) return i;
        }
    }
};",1447653481
Andrey,A_Le_K,108,3640,cpp,"static const int __ = []() { std::ios::sync_with_stdio(false); std::cin.tie(nullptr); std::cout.tie(nullptr); return 0; }();

typedef long long ll; typedef unsigned int ui; typedef unsigned long long ull; typedef pair<int ,int> pii; typedef pair<ll, ll> pll; typedef double rl;
typedef pii int2; typedef tuple<int, int, int> int3; typedef tuple<int, int, int, int> int4; typedef tuple<int, int, int, int, int> int5;
typedef pll ll2; typedef tuple<ll, ll, ll> ll3; typedef tuple<ll, ll, ll, ll> ll4; typedef tuple<ll, ll, ll, ll, ll> ll5;
typedef vector<int> vi; typedef vector<pii> vii; typedef vector<ll> vll; typedef vector<pll> vll_ll; typedef vector<vi> vvi; typedef vector<vii> vvii; typedef vector<vll> vvll; typedef vector<vll_ll> vvll_ll;

#define pb push_back
#define mp make_pair
#define eb emplace_back
#define xx first
#define yy second
#define FOR(i,N) for(int i=0; i<N; i++)
#define g0(x) get<0>(x)
#define g1(x) get<1>(x)
#define g2(x) get<2>(x)
#define g3(x) get<3>(x)
#define g4(x) get<4>(x)

template<typename A> string to_string(A* ptr) { stringstream ss; ss << ""0x"" << std::setw(16) << std::setfill ('0') << std::hex << (uint64_t)(uintptr_t)ptr; return ss.str(); }
string to_string(char c) { return ((string)""'""+c)+ ""'""; }
template <typename A, typename B> string to_string(pair<A, B> p);
template <typename A, typename B, typename C> string to_string(tuple<A, B, C> p);
template <typename A, typename B, typename C, typename D> string to_string(tuple<A, B, C, D> p);
string to_string(const string& s) { return '""' + s + '""'; }
string to_string(const char* s) { return to_string((string) s); }
string to_string(bool b) { return (b ? ""true"" : ""false""); }
string to_string(vector<bool> v) {
    bool first = true; string res = ""{"";
	for (int i = 0; i < static_cast<int>(v.size()); i++) { if (!first) { res += "", ""; } first = false; res += to_string(v[i]); }
	res += ""}""; return res;
}
template <size_t N> string to_string(bitset<N> v) { string res = """"; for (size_t i = 0; i < N; i++) { res += static_cast<char>('0' + v[i]); } return res; }
template <typename A> string to_string(A v) {
	bool first = true; string res = ""{"";
	for (const auto &x : v) {
		if (!first) { res += "", ""; }
		first = false; res += to_string(x);
	}
	res += ""}""; return res;
}
template <typename A, typename B> string to_string(pair<A, B> p) { return ""("" + to_string(p.first) + "", "" + to_string(p.second) + "")""; }
template <typename A, typename B, typename C> string to_string(tuple<A, B, C> p) { return ""("" + to_string(get<0>(p)) + "", "" + to_string(get<1>(p)) + "", "" + to_string(get<2>(p)) + "")""; }
template <typename A, typename B, typename C, typename D>
string to_string(tuple<A, B, C, D> p) { return ""("" + to_string(get<0>(p)) + "", "" + to_string(get<1>(p)) + "", "" + to_string(get<2>(p)) + "", "" + to_string(get<3>(p)) + "")""; }
void debug_out() { cout << endl; }
template <typename Head, typename... Tail> void debug_out(Head H, Tail... T) { cout << "" "" << to_string(H); debug_out(T...); }

#define popc __builtin_popcountll
//#define popc __builtin_popcount
//#define clz __builtin_clzll
//#define clz __builtin_clz
inline int bitLength(uint32_t val) { return 32 - __builtin_clz  (val); }
inline int bitLength(uint64_t val) { return 64 - __builtin_clzll(val); }

template<typename T> inline void domax(T& A, const T& B) { A=max(A, B); }
template<typename T> inline void domin(T& A, const T& B) { A=min(A, B); }

template<typename T>
inline T true_mod(T A, T B)
{
    assert(B>=1);
    A%=B;
    if(A<0) A+=B;
    return A;
}

template<typename T>
inline T div_down(T A, T B)
{
    return (A-true_mod(A,B))/B;
}

template<typename T>
inline T div_up(T A, T B)
{
    return div_down(A+B-1, B);
}

#define all(x) (x).begin(), (x).end()

#if 0
#define dbg(...) cout << ""["" << #__VA_ARGS__ << ""]:"", debug_out(__VA_ARGS__)
#else
#define dbg(...) 42
#endif


class Solution {
public:
    int maxFrequency(vector<int>& a, int k, int numOperations) {
        const int n=a.size();
        dbg(""============="");
        dbg(n);
        
        vector<ll> A(n);
        FOR(i, n) A[i]=a[i];
        ll K=k;
        
        vector<ll> good; good.reserve(3*n);
        FOR(i, n) {
            good.pb(A[i]);
            good.pb(A[i]-K);
            good.pb(-A[i]+K);
        }
        
        sort(all(A));
        sort(all(good));
        
        
        int result=0;
        const int mn=*min_element(all(a));
        const int mx=*max_element(all(a));
        
        map<int, int> MA;
        FOR(i, n) MA[a[i]]++;
        
        
        const int SZ_GOOD=good.size();
        
        //for(int l=0, i=0, r=0; i<n; i++) {
        //for(int l=0, i=mn, r=0; i<=mx; i++) {
        for(int l=0, i=0, r=0; i<SZ_GOOD; i++) {
            //while(l<n && -A[l]+A[i]>K)  l++;
            //while(r<n && -A[i]+A[r]<=K) r++;
            const ll CHOICE=good[i];
            
            while(l<n && -A[l]+CHOICE>K)  l++;
            while(r<n && -CHOICE+A[r]<=K) r++;
            
            const int len_segment=r-l;
            //const int max_get=1+numOperations;
            
            //auto it=MA.find(i);
            auto it=MA.find(CHOICE);
            const int cnt=it==MA.end()?0:it->second;
            
            const int need_operations=r-l-cnt;
            const int can_make_operations=cnt+min(need_operations, numOperations);
            
            dbg(i, cnt, need_operations, can_make_operations);
            
            
            //const int curr=min(len_segment, max_get);
            domax(result, can_make_operations);
        }
        
        
        
        
        return result;
    }
};",1447687241
Tudor Buzu,Tudor67,109,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        const int N = nums.size();
        const int MIN_NUM = *min_element(nums.begin(), nums.end());
        const int MAX_NUM = *max_element(nums.begin(), nums.end());
        
        int res = 0;
        
        sort(nums.begin(), nums.end());
        
        vector<int> f(MAX_NUM + 1);
        for(int num: nums){
            f[num] += 1;
        }
        
        for(int num = MIN_NUM; num <= MAX_NUM; ++num){
            int l = lower_bound(nums.begin(), nums.end(), num - k) - nums.begin();
            int r = upper_bound(nums.begin(), nums.end(), num + k) - nums.begin();
            
            int elems = r - l;
            if(elems - f[num] > numOperations){
                elems = f[num] + numOperations;
            }
            
            res = max(res, elems);
        }
        
        
        return res;
    }
};",1447679786
Tudor Buzu,Tudor67,109,3626,cpp,"class Solution {
public:
    int smallestNumber(int n, int t) {
        while(true){
            string s = to_string(n);
            long long prod = 1;
            for(char c: s){
                int digit = c - '0';
                prod *= digit;
            }
            
            if(prod % t == 0){
                return n;
            }
            
            n += 1;
        }
        
        return -1;
    }
};",1447654174
Tudor Buzu,Tudor67,109,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& innums, int k, int numOperations) {
        vector<long long> nums(innums.size());
        for(int i = 0; i < (int)innums.size(); ++i){
            nums[i] = innums[i];
        }
        
        const int N = nums.size();
        
        int res = 0;
        
        sort(nums.begin(), nums.end());
        
        map<long long, int> f;
        for(int num: nums){
            f[num] += 1;
        }
        
        vector<long long> candidates(3 * N);
        for(int i = 0; i < N; ++i){
            candidates[i] = nums[i];
            candidates[i + N] = nums[i] - k;
            candidates[i + 2 * N] = nums[i] + k;
        }
        
        for(long long num: candidates){
            int l = lower_bound(nums.begin(), nums.end(), num - k) - nums.begin();
            int r = upper_bound(nums.begin(), nums.end(), num + k) - nums.begin();
            
            int elems = r - l;
            int fNum = (f.count(num) ? f[num] : 0);
            if(elems - fNum > numOperations){
                elems = fNum + numOperations;
            }
            
            res = max(res, elems);
        }
        
        
        return res;
    }
};",1447706164
Dmitrii Samoilov,whoawhoawhoa,111,3622,java,"class Solution {
    public int maxFrequency(int[] nums, int k, int numOperations) {
        List<long[]> events = new ArrayList<>();
        for (int i : nums) {
            events.add(new long[] {i - k, 1});
            events.add(new long[] {i, 0});
            events.add(new long[] {i + k + 1, -1});
        }
        events.sort((a, b) -> a[0] == b[0] ? Long.compare(a[1], b[1]) : Long.compare(a[0], b[0]));
        long res = 0, current = 0, real = 0, pos = 0;
        for (long[] e : events) {
            if (e[0] > pos) {
                current += real;
                real = 0;
                pos = e[0];
            }
            if (e[1] == 0) {
                real++;
                current--;
            } else {
                current += e[1];
            }
            // System.out.println(e[0] + "" "" + e[1] + "" "" + current + "" "" + real);
            res = Math.max(res, Math.min(current, numOperations) + real);
        }
        return (int) res;
    }
}",1447704091
Dmitrii Samoilov,whoawhoawhoa,111,3626,java,"class Solution {
    public int smallestNumber(int n, int t) {
        for (int i = n; i < n + 10; i++) {
            // System.out.println(prod(i))
            if (prod(i) % t == 0) {
                return i;
            }
        }
        return n + 10;
    }

    static int prod(int n) {
        int res = 1;
        while (n != 0) {
            res *= n % 10;
            n /= 10;
        }
        return res;
    }
}",1447657587
Dmitrii Samoilov,whoawhoawhoa,111,3640,java,"class Solution {
    public int maxFrequency(int[] nums, int k, int numOperations) {
        List<long[]> events = new ArrayList<>();
        for (int i : nums) {
            events.add(new long[] { i - k, 1 });
            events.add(new long[] { i, 0 });
            events.add(new long[] { i + k + 1, -1 });
        }
        events.sort((a, b) -> a[0] == b[0] ? Long.compare(a[1], b[1]) : Long.compare(a[0], b[0]));
        long res = 0, current = 0, real = 0, pos = 0;
        for (long[] e : events) {
            if (e[0] > pos) {
                current += real;
                real = 0;
                pos = e[0];
            }
            if (e[1] == 0) {
                real++;
                current--;
            } else {
                current += e[1];
            }
            // System.out.println(e[0] + "" "" + e[1] + "" "" + current + "" "" + real);
            res = Math.max(res, Math.min(current, numOperations) + real);
        }
        return (int) res;
    }
}",1447706313
LTKJ,LTKJ,112,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        sort(nums.begin(), nums.end());
        int ans = 0;
        for (int i = 0, sz = nums.size(); i < sz; i++) {
            auto i1 = lower_bound(nums.begin(), nums.end(), nums[i]);
            auto i2 = upper_bound(nums.begin(), nums.end(), nums[i]);
            auto i3 = lower_bound(nums.begin(), nums.end(), nums[i] - k);
            auto i4 = upper_bound(nums.begin(), nums.end(), nums[i] + k);
            ans = max(ans, int(i2 - i1) + min(int((i4 - i3) - (i2 - i1)), numOperations));

            auto i5 = upper_bound(nums.begin(), nums.end(), nums[i] + 2 * k);
            ans = max(ans, min(int(i5 - i1), numOperations));
        }
        return ans;
    }
};",1447693366
LTKJ,LTKJ,112,3626,cpp,"class Solution {
    static int f(int x) {
        int prod = 1;
        while (x > 0) {
            prod *= x % 10;
            x /= 10;
        }
        return prod;
    }
public:
    int smallestNumber(int n, int t) {
        for (int i = n; i < 1000; i++) {
            if (f(i) % t == 0) {
                return i;
            }
        }
        return -1;
    }
};",1447659279
LTKJ,LTKJ,112,3640,cpp,"class Solution {
    using ll = long long;
public:
    int maxFrequency(vector<int>& n, ll k, ll numOperations) {
        vector<ll> nums(n.begin(), n.end());
        sort(nums.begin(), nums.end());
        ll ans = 0;
        for (int i = 0, sz = nums.size(); i < sz; i++) {
            auto i1 = lower_bound(nums.begin(), nums.end(), nums[i]);
            auto i2 = upper_bound(nums.begin(), nums.end(), nums[i]);
            auto i3 = lower_bound(nums.begin(), nums.end(), nums[i] - k);
            auto i4 = upper_bound(nums.begin(), nums.end(), nums[i] + k);
            ans = max(ans, ll(i2 - i1) + min(ll((i4 - i3) - (i2 - i1)), numOperations));

            auto i5 = upper_bound(nums.begin(), nums.end(), nums[i] + 2 * k);
            ans = max(ans, min(ll(i5 - i1), numOperations));
        }
        return ans;
    }
};",1447697989
Mohit Jaisal,mohitjaisal,114,3622,java,"import java.util.*;

class Solution {
    public int maxFrequency(int[] nums, int k, int numOperations) {
        int n = nums.length;
        Map<Integer, Integer> frequencyMap = new HashMap<>();
        List<int[]> eventList = new ArrayList<>();
        
        int i = 0;
        while (i < n) {
            int num = nums[i];
            frequencyMap.put(num, frequencyMap.getOrDefault(num, 0) + 1);
            eventList.add(new int[]{num - k, 1});
            eventList.add(new int[]{num + k + 1, -1});
            i++;
        }
        
        Set<Integer> uniquePoints = new HashSet<>();
        i = 0;
        while (i < eventList.size()) {
            uniquePoints.add(eventList.get(i)[0]);
            i++;
        }
        
        Iterator<Integer> keyIterator = frequencyMap.keySet().iterator();
        while (keyIterator.hasNext()) {
            uniquePoints.add(keyIterator.next());
        }

        eventList.sort(Comparator.comparingInt(a -> a[0]));
        
        int eventIndex = 0;
        int overlapCount = 0;
        int maxFrequency = 0;
        int currentCount = 0;
        
        Iterator<Integer> pointIterator = new TreeSet<>(uniquePoints).iterator();
        while (pointIterator.hasNext()) {
            int point = pointIterator.next();
            while (eventIndex < eventList.size() && eventList.get(eventIndex)[0] <= point) {
                overlapCount += eventList.get(eventIndex)[1];
                eventIndex++;
            }
            
            currentCount = frequencyMap.getOrDefault(point, 0);
            int achievableFrequency = currentCount + Math.min(numOperations, overlapCount - currentCount);
            maxFrequency = Math.max(maxFrequency, achievableFrequency);
        }
        
        return maxFrequency;
    }
}
",1447673718
Mohit Jaisal,mohitjaisal,114,3626,java,"class Solution {
    private int productOfDigits(int x) {
        int product = 1;
        while (x > 0) {
            product *= x % 10;
            x /= 10;
        }
        return product;
    }

    public int smallestNumber(int n, int t) {
        while (productOfDigits(n) % t != 0) n++;
        return n;
    }
}
",1447663939
Mohit Jaisal,mohitjaisal,114,3640,java,"import java.util.*;

class Solution {
    public int maxFrequency(int[] nums, int k, int numOperations) {
        int n = nums.length;
        Map<Integer, Integer> frequencyMap = new HashMap<>();
        List<int[]> eventList = new ArrayList<>();
        
        int i = 0;
        while (i < n) {
            int num = nums[i];
            frequencyMap.put(num, frequencyMap.getOrDefault(num, 0) + 1);
            eventList.add(new int[]{num - k, 1});
            eventList.add(new int[]{num + k + 1, -1});
            i++;
        }
        
        Set<Integer> uniquePoints = new HashSet<>();
        i = 0;
        while (i < eventList.size()) {
            uniquePoints.add(eventList.get(i)[0]);
            i++;
        }
        
        Iterator<Integer> keyIterator = frequencyMap.keySet().iterator();
        while (keyIterator.hasNext()) {
            uniquePoints.add(keyIterator.next());
        }

        eventList.sort(Comparator.comparingInt(a -> a[0]));
        
        int eventIndex = 0;
        int overlapCount = 0;
        int maxFrequency = 0;
        int currentCount = 0;
        
        Iterator<Integer> pointIterator = new TreeSet<>(uniquePoints).iterator();
        while (pointIterator.hasNext()) {
            int point = pointIterator.next();
            while (eventIndex < eventList.size() && eventList.get(eventIndex)[0] <= point) {
                overlapCount += eventList.get(eventIndex)[1];
                eventIndex++;
            }
            
            currentCount = frequencyMap.getOrDefault(point, 0);
            int achievableFrequency = currentCount + Math.min(numOperations, overlapCount - currentCount);
            maxFrequency = Math.max(maxFrequency, achievableFrequency);
        }
        
        return maxFrequency;
    }
}
",1447707189
Darsh Patel,pdarsh9510,115,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations)
    {
        int mx=0;
        for(auto &it:nums)
        {
            mx=max(mx,it);
        }
        vector<int> v(mx+k+2,0);
        map<int,int> m;
        for(auto &it:nums)
        {
            m[it]++;
            int l=max(0,it-k),r=it+k;
            v[l]++;
            v[r+1]--;
        }
        int ans=0;
        for(int i=0;i<v.size();i++)
        {
            if(i>0)
            {
                v[i]+=v[i-1];
            }
            int x=v[i];
            int cnt=m[i];
            ans=max(ans,cnt);
            x-=cnt;
            x=min(x,numOperations);
            ans=max(ans,x+cnt);
        }
        return ans;
    }
};",1447692056
Darsh Patel,pdarsh9510,115,3626,cpp,"class Solution {
public:
    int smallestNumber(int n, int t)
    {
        int ans=n;
        for(int i=ans;i<=ans+t;i++)
        {
            int p=1,temp=i;
            while(temp)
            {
                p*=(temp%10);
                temp/=10;
            }
            if(p%t==0)
            {
                ans=i;
                break;
            }
        }
        return ans;
    }
};",1447656447
Darsh Patel,pdarsh9510,115,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations)
    {
        int mx=0;
        map<int,int> mp;
        for(auto &it:nums)
        {
            mx=max(mx,it);
            mp[it]=0;
        }
        map<int,int> m;
        for(auto &it:nums)
        {
            m[it]++;
            int l=it-k,r=it+k;
            mp[l]++;
            mp[r+1]--;
        }
        int ans=0,prev=INT_MIN;
        for(auto &it:mp)
        {
            if(prev!=INT_MIN)
            {
                it.second+=prev;
            }
            int x=it.second;
            int cnt=m[it.first];
            ans=max(ans,cnt);
            x-=cnt;
            x=min(x,numOperations);
            ans=max(ans,x+cnt);
            prev=it.second;
        }
        return ans;
    }
};",1447707565
Kuo-Yu Huang,ericet1234,116,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        sort(nums.begin(), nums.end());
        unordered_map<int, int> data;

        for(int n: nums){
            data[n]++;
        }
        // on target
        int ans =0;
        int l, r;
        for(int n: nums){
            l = upper_bound(nums.begin(), nums.end(), n-k-1)-nums.begin();
            r = upper_bound(nums.begin(), nums.end(), n+k)-1-nums.begin();

            ans = max(ans, min(r-l+1, data[n]+numOperations));
        }
        // range
        for(int i=0, r=0, n=0, size=nums.size() ; i<size ; i++){
            while(r<size && n<numOperations && nums[r]<=(nums[i]+2*k)){
                r++;
                n++;
            }
            //printf(""%d %d\n"", i, r);
            ans = max(ans, r-i);
            
            n--;
        }

        return ans;
    }
};",1447693777
Kuo-Yu Huang,ericet1234,116,3626,cpp,"class Solution {
private:
    int check(int n, int t){
        int s=1;

        while(n){
            s = s*(n%10);
            n = n / 10;
        }
        return (s%t)==0;
    }
public:
    int smallestNumber(int n, int t) {
        while(n){
            if(check(n, t)){
                return n;
            }
            n++;
        }
        return -1;
    }
};",1447658293
Kuo-Yu Huang,ericet1234,116,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        sort(nums.begin(), nums.end());
        unordered_map<int, int> data;

        for(int n: nums){
            data[n]++;
        }
        // on target
        int ans =0;
        int l, r;
        for(int n: nums){
            l = upper_bound(nums.begin(), nums.end(), n-k-1)-nums.begin();
            r = upper_bound(nums.begin(), nums.end(), n+k)-1-nums.begin();

            ans = max(ans, min(r-l+1, data[n]+numOperations));
        }
        // range
        for(int i=0, r=0, n=0, size=nums.size() ; i<size ; i++){
            while(r<size && n<numOperations && (nums[r]-k)<=(nums[i]+k)){
                r++;
                n++;
            }
            //printf(""%d %d\n"", i, r);
            ans = max(ans, r-i);
            
            n--;
        }

        return ans;
    }
};",1447698888
Mintu Jupally,mintujupally,117,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int nop) {
        int n=nums.size();

        int l=0, r=0;
        int ans=0;
        sort(nums.begin(), nums.end());
        int i=0;
        while(i<n)
        {
            while(r<n && nums[r]-nums[i]<=k) ++r;
            while(l<n && nums[i]-nums[l]>k) ++l;
            // cout<<l<<"" - ""<<r<<endl;
            int j=i+1;
            while(j<n && nums[i]==nums[j]) ++j;
            int same=j-i;
            // cout<<same<<endl;
            ans=max(ans, same + min((r-l-same), nop));
            i=j;
        }

        r=0;
        for(int i=0; i<n; i++)
        {
            while(r<n && nums[r]-nums[i]<=2*k) ++r;
            ans=max(ans, min(nop, r-i));
        }
        
        return ans;
    }
};",1447687073
Mintu Jupally,mintujupally,117,3626,cpp,"class Solution {
public:
    int prod(int n)
    {
        int val=1;
        while(n>0)
        {
            val*=n%10;
            n/=10;
        }
        return val;
    }

    int smallestNumber(int n, int t) {
        while(true)
        {
            if(prod(n)%t==0) return n;
            ++n;
        }

        return n;
    }
};",1447654757
Mintu Jupally,mintujupally,117,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int nop) {
        int n=nums.size();

        int l=0, r=0;
        int ans=0;
        sort(nums.begin(), nums.end());
        int i=0;
        while(i<n)
        {
            while(r<n && nums[r]-nums[i]<=k) ++r;
            while(l<n && nums[i]-nums[l]>k) ++l;
            // cout<<l<<"" - ""<<r<<endl;
            int j=i+1;
            while(j<n && nums[i]==nums[j]) ++j;
            int same=j-i;
            // cout<<same<<endl;
            ans=max(ans, same + min((r-l-same), nop));
            i=j;
        }

        r=0;
        for(int i=0; i<n; i++)
        {
            while(r<n && nums[r]-nums[i]<=2*k) ++r;
            ans=max(ans, min(nop, r-i));
        }
        
        return ans;
    }
};",1447689147
Ko-Yang,superwesly123,118,3622,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        nums.sort()
        i_min = 0
        k_min, k_max = 0, 0
        ans = 0
        c = Counter(nums)
        for j, num in enumerate(nums):
            target = num
            while target - k > nums[i_min]:
                i_min += 1
            while k_min + 1 < len(nums) and target + k >= nums[k_min + 1]:
                k_min += 1
            ans = max(ans, c[target] + min(k_min - i_min - c[target] + 1, numOperations))
            target = num + k
            while k_max + 1 < len(nums) and target + k >= nums[k_max + 1]:
                k_max += 1
            ans = max(ans, min(k_max - j + 1, numOperations))
        return ans",1447699157
Ko-Yang,superwesly123,118,3626,python3,"class Solution:
    def smallestNumber(self, n: int, t: int) -> int:
        for i in range(n, 1000):
            num = 1
            for c in str(i):
                num *= int(c)
            if num % t == 0:
                return i",1447654385
Ko-Yang,superwesly123,118,3640,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        nums.sort()
        i_min = 0
        k_min, k_max = 0, 0
        ans = 0
        c = Counter(nums)
        for j, num in enumerate(nums):
            target = num
            while target - k > nums[i_min]:
                i_min += 1
            while k_min + 1 < len(nums) and target + k >= nums[k_min + 1]:
                k_min += 1
            ans = max(ans, c[target] + min(k_min - i_min - c[target] + 1, numOperations))
            target = num + k
            while k_max + 1 < len(nums) and target + k >= nums[k_max + 1]:
                k_max += 1
            ans = max(ans, min(k_max - j + 1, numOperations))
        return ans",1447698790
john0312acc223,john0312acc223,120,3622,cpp,"constexpr long long OFFSET = 10000000000LL;

class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        deque<long long> actions;
        long long kll = k;
        set<long long> points;
        for (int n : nums) {
            long long nll = n;
            nll += OFFSET;
            assert(nll>0);
            assert(nll-kll>0);
            actions.push_back( (nll << 4) | 1 );
            actions.push_back( (nll << 4) | 3 );
            actions.push_back( ((nll+kll) << 4) | 2 );
            actions.push_back( ((nll-kll) << 4) | 0 );
            points.insert(nll);
            points.insert(nll+kll);
            points.insert(nll-kll);
        }
        sort(actions.begin(), actions.end());

        int res = 0;
        int at_cnt = 0;
        int in_cnt = 0;
        auto perform_first = [&] () {
            assert(actions.size() != 0);
            long long act = actions[0];
            actions.pop_front();
            long long atype = act&3LL;
            //printf(""BBB %lld %lld\n"", (act>>4)-OFFSET, atype);
            if (atype == 0) {
                in_cnt++;
            } else if (atype == 1) {
                at_cnt++;
            } else if (atype == 2) {
                in_cnt--;
            } else if (atype == 3) {
                at_cnt--;
            } else {
                assert(false);
            }
        };

        for (long long p : points) {
            while (actions.size() && (actions[0] >> 4) < p) {
                perform_first();
            }
            while (actions.size() && (actions[0] >> 4) == p && (actions[0]&2) == 0) {
                perform_first();
            }
            assert(at_cnt<=in_cnt);
            //printf(""AAA %lld %d %d\n"", p-OFFSET, at_cnt, in_cnt);
            res = max(res, at_cnt+min(in_cnt-at_cnt, numOperations));
        }
        return res;
    }
};",1447707504
john0312acc223,john0312acc223,120,3626,cpp,"class Solution {
public:
    int getProd(int x) {
        int res = 1;
        while (x != 0) {
            res = res * (x%10);
            x = x / 10;
        }
        return res;
    }
    int smallestNumber(int n, int t) {
        for (int i = n; ; i++) {
            if (getProd(i)%t==0) return i;
        }
    }
};",1447662645
john0312acc223,john0312acc223,120,3640,cpp,"constexpr long long OFFSET = 10000000000LL;

class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        deque<long long> actions;
        long long kll = k;
        set<long long> points;
        for (int n : nums) {
            long long nll = n;
            nll += OFFSET;
            assert(nll>0);
            assert(nll-kll>0);
            actions.push_back( (nll << 4) | 1 );
            actions.push_back( (nll << 4) | 3 );
            actions.push_back( ((nll+kll) << 4) | 2 );
            actions.push_back( ((nll-kll) << 4) | 0 );
            points.insert(nll);
            points.insert(nll+kll);
            points.insert(nll-kll);
        }
        sort(actions.begin(), actions.end());

        int res = 0;
        int at_cnt = 0;
        int in_cnt = 0;
        auto perform_first = [&] () {
            assert(actions.size() != 0);
            long long act = actions[0];
            actions.pop_front();
            long long atype = act&3LL;
            //printf(""BBB %lld %lld\n"", (act>>4)-OFFSET, atype);
            if (atype == 0) {
                in_cnt++;
            } else if (atype == 1) {
                at_cnt++;
            } else if (atype == 2) {
                in_cnt--;
            } else if (atype == 3) {
                at_cnt--;
            } else {
                assert(false);
            }
        };

        for (long long p : points) {
            while (actions.size() && (actions[0] >> 4) < p) {
                perform_first();
            }
            while (actions.size() && (actions[0] >> 4) == p && (actions[0]&2) == 0) {
                perform_first();
            }
            assert(at_cnt<=in_cnt);
            //printf(""AAA %lld %d %d\n"", p-OFFSET, at_cnt, in_cnt);
            res = max(res, at_cnt+min(in_cnt-at_cnt, numOperations));
        }
        return res;
    }
};",1447708851
sanath_tango3,sanath_tango3,121,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int n) {
        int ma=*max_element(nums.begin(),nums.end());
        
        vector<int> v(ma+2,0);
        unordered_map<int,int> fr;
        for(int i:nums){
            fr[i]++;
            int a=max(0,i-k);
            v[a]++;
            int b=min(ma+1,i+k+1);
            v[b]--;
        }
        int m=0;
        int ans=0;
        for(int i=0;i<v.size();i++){
            m+=v[i];
            int t=m-fr[i];
            ans=max(ans,fr[i]+min(t,n));
        }
        return ans;
        
        
    }
};",1447689865
sanath_tango3,sanath_tango3,121,3626,cpp,"class Solution {
public:
int find(int k){
int ans=1;
    while(k){
        int m=k%10;
        ans=ans*m;
        k=k/10;
    }

    return ans;
}
    int smallestNumber(int n, int t) {
        while(1){
            int cur=find(n);
            if(cur%t==0){
                return n;
            }
            n++;
        }
        return 1;
    }
};",1447658986
sanath_tango3,sanath_tango3,121,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int n) {
             int ma=*max_element(nums.begin(),nums.end());
        
       map<int,int> v;
        unordered_map<int,int> fr;
        for(int i:nums){
            fr[i]++;
            int a=max(0,i-k);
            v[a]++;
            int b=min(ma+1,i+k+1);
           
            v[b]--;
        }
        for(int i:nums){
            if(v.find(i)==v.end()){
                v[i]=0;
            }
        }
        int m=0;
        int ans=0;
        for(auto i:v){
            
            m+=i.second;
            int t=m-fr[i.first];
          //  cout<<i.first<<"" ""<<fr[i.first]<<"" ""<<m<<endl;
            ans=max(ans,fr[i.first]+min(t,n));
        }
        return ans;
    }
};",1447700799
Shiva sai K,shivasaikmalla,123,3622,java,"import java.util.Arrays;

class Solution {
    private int[] getFreqArr(int[] nums) {
        int[] f = new int[100001];
        for (int n : nums) {
            f[n]++;
        }
        return f;
    }
    
    private int[] getPrefArr(int[] f) {
        int[] p = new int[100001];
        p[0] = 0;
        for (int x = 1; x <= 100000; x++) {
            p[x] = p[x - 1] + f[x];
        }
        return p;
    }
    
    private int getRangeSum(int[] p, int l, int r) {
        return p[r] - p[l - 1];
    }
    
    private int getBoundVal(int v, int mn, int mx) {
        return Math.min(Math.max(v, mn), mx);
    }
    
    public int maxFrequency(int[] nums, int k, int nOps) {
        int[] f = getFreqArr(nums);
        int[] p = getPrefArr(f);
        
        int max_f = 0;
        for (int x = 1; x <= 100000; x++) {
            int l = getBoundVal(x - k, 1, 100000);
            int r = getBoundVal(x + k, 1, 100000);
            
            int tot_r = getRangeSum(p, l, r);
            int can_m = tot_r - f[x];
            max_f = Math.max(max_f, f[x] + Math.min(nOps, can_m));
        }
        return max_f;
    }
}",1447685561
Shiva sai K,shivasaikmalla,123,3626,java,"class Solution {
    public int smallestNumber(int n, int t) {
        while (true) {
            if (digitProduct(n) % t == 0) {
                return n;
            }
            n++;
        }
    }
    
    private int digitProduct(int x) {
        if (x == 0) return 0;
        int product = 1;
        while (x > 0) {
            product *= (x % 10);
            x /= 10;
        }
        return product;
    }
}",1447659305
Shiva sai K,shivasaikmalla,123,3640,java,"import java.util.*;

class Solution {
    private static class Evt {
        int pt;
        int d;
        
        Evt(int pt, int d) {
            this.pt = pt;
            this.d = d;
        }
    }
    
    private List<Evt> getEvts(int[] nums, int k) {
        List<Evt> evts = new ArrayList<>();
        for (int n : nums) {
            evts.add(new Evt(n - k, 1));
            evts.add(new Evt(n + k + 1, -1));
        }
        return evts;
    }
    
    private Map<Integer, Integer> getFreqMap(int[] nums) {
        Map<Integer, Integer> f = new TreeMap<>();
        for (int n : nums) {
            f.put(n, f.getOrDefault(n, 0) + 1);
        }
        return f;
    }
    
    private Set<Integer> getPts(List<Evt> evts, Map<Integer, Integer> f) {
        Set<Integer> pts = new TreeSet<>();
        for (Evt e : evts) {
            pts.add(e.pt);
        }
        pts.addAll(f.keySet());
        return pts;
    }
    
    private void sortEvts(List<Evt> evts) {
        Collections.sort(evts, (a, b) -> Integer.compare(a.pt, b.pt));
    }
    
    public int maxFrequency(int[] nums, int k, int nOps) {
        List<Evt> evts = getEvts(nums, k);
        Map<Integer, Integer> f = getFreqMap(nums);
        Set<Integer> pts = getPts(evts, f);
        sortEvts(evts);
        
        int i = 0;
        int c_ovl = 0;
        int max_f = 0;
        int act_c = 0;
        
        for (int t : pts) {
            while (i < evts.size() && evts.get(i).pt <= t) {
                c_ovl += evts.get(i).d;
                i++;
            }
            
            act_c = f.getOrDefault(t, 0);
            int pos_f = act_c + Math.min(nOps, c_ovl - act_c);
            max_f = Math.max(max_f, pos_f);
        }
        
        return max_f;
    }
}",1447701605
Ayush,torqueaj,124,3622,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        nums.sort()
        n = len(nums)
        ans = 0
        freq = defaultdict(int)
        for i in nums:
            freq[i]+=1
        for i in range(nums[0],nums[-1]+1):
            start = i - k
            end = i + k
            bsr = bisect_right(nums,end)
            bsl = bisect_left(nums,start)
            # print(bsl,bsr)
            ans = max(ans,freq[i]+min(numOperations,bsr-bsl-freq[i]))

        return ans
            
        ",1447678312
Ayush,torqueaj,124,3626,python3,"class Solution:
    def smallestNumber(self, n: int, t: int) -> int:
        while True:
            prod = 1
            for i in str(n):
                prod*=int(i)
            if prod%t ==0:
                return n
            n+=1
            
        ",1447653819
Ayush,torqueaj,124,3640,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        nums.sort()
        n = len(nums)
        ans = 0
        freq = defaultdict(int)
        for i in nums:
            freq[i]+=1
        for i in nums:
            start = i 
            end = i + 2*k
            bsr = bisect_right(nums,end)
            bsl = bisect_left(nums,start)
            ans = max(ans,min(numOperations,bsr-bsl))

            start = i - k
            end = i + k
            bsr = bisect_right(nums,end)
            bsl = bisect_left(nums,start)
            ans = max(ans,freq[i]+min(numOperations,bsr-bsl-freq[i]))
            

        return ans",1447692368
sveng101,sveng101,126,3622,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        f_dict = Counter(nums)
        nums2 = sorted(f_dict.keys())
        f_lst = [f_dict[num] for num in nums2]

        n = len(nums2)
        #print(nums2, f_lst)
        res = 0
        i1 = 0
        i2 = 0
        f = 0
        for idx, num in enumerate(nums2):
            for i1 in range(i1, idx):
                if nums2[i1] >= num - k: break
                f -= f_lst[i1]
            else:
                i1 = idx
            for i2 in range(i2, n):
                if nums2[i2] > num + k: break
                f += f_lst[i2]
            else:
                i2 = n
            res = max(res, min(f_lst[idx] + numOperations, f))
            #print(idx, i1, i2, f)
        if res >= numOperations: return res
        i1 = 0
        f = 0
        for i2, num in enumerate(nums2):
            for i1 in range(i1, i2):
                if nums2[i1] >= num - 2 * k: break
                f -= f_lst[i1]
            else:
                i1 = i2
            f += f_lst[i2]
            if f >= numOperations: return numOperations
            res = max(res, f)
        return res",1447701437
sveng101,sveng101,126,3626,python3,"class Solution:
    def smallestNumber(self, n: int, t: int) -> int:

        def digitProduct(num: int) -> int:
            res = 1
            while num:
                num, d = divmod(num, 10)
                res *= d
                if not res: return 0
            return res
        num = n
        while True:
            if not digitProduct(num) % t:
                return num
            num += 1",1447661437
sveng101,sveng101,126,3640,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        f_dict = Counter(nums)
        nums2 = sorted(f_dict.keys())
        f_lst = [f_dict[num] for num in nums2]

        n = len(nums2)
        #print(nums2, f_lst)
        res = 0
        i1 = 0
        i2 = 0
        f = 0
        for idx, num in enumerate(nums2):
            for i1 in range(i1, idx):
                if nums2[i1] >= num - k: break
                f -= f_lst[i1]
            else:
                i1 = idx
            for i2 in range(i2, n):
                if nums2[i2] > num + k: break
                f += f_lst[i2]
            else:
                i2 = n
            res = max(res, min(f_lst[idx] + numOperations, f))
            #print(idx, i1, i2, f)
        if res >= numOperations: return res
        i1 = 0
        f = 0
        for i2, num in enumerate(nums2):
            for i1 in range(i1, i2):
                if nums2[i1] >= num - 2 * k: break
                f -= f_lst[i1]
            else:
                i1 = i2
            f += f_lst[i2]
            if f >= numOperations: return numOperations
            res = max(res, f)
        return res",1447702789
dirigibility,dirigibility,127,3622,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        nums.sort()
        i = l = r = 0
        best = 0
        c = 0
        for j,n in enumerate(nums):
            if j and n == nums[j-1]:
                c += 1
            else:
                c = 1
            while r < len(nums) and nums[r] <= n+k:
                r += 1
            while nums[l] < n-k:
                l += 1
            while nums[i] < n-2*k:
                i += 1
            best = max(best,min(j-i+1,numOperations),min(r-l,c+numOperations))
        return best",1447693694
dirigibility,dirigibility,127,3626,python3,"class Solution:
    def smallestNumber(self, n: int, t: int) -> int:
        for k in count(n):
            if not reduce(mul,(int(d) for d in str(k)))%t:
                return k",1447653601
dirigibility,dirigibility,127,3640,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        nums.sort()
        i = l = r = 0
        best = 0
        c = 0
        for j,n in enumerate(nums):
            if j and n == nums[j-1]:
                c += 1
            else:
                c = 1
            while r < len(nums) and nums[r] <= n+k:
                r += 1
            while nums[l] < n-k:
                l += 1
            while nums[i] < n-2*k:
                i += 1
            best = max(best,min(j-i+1,numOperations),min(r-l,c+numOperations))
        return best",1447693403
idanro12,idanro12,129,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
    map<int, int> freq;
    for (int i = 0; i < nums.size(); i++) ++freq[nums[i]];

    struct rng {
        int val;
        int cnt;
    };
    vector<rng> rngs;
    for (auto it : freq)
        rngs.push_back({it.first, it.second});

    struct event {
        int pos;
        bool in_place;
        int diff;
    };
    vector<event> events;
    for (int i = 0; i < rngs.size(); i++) {
        events.push_back({rngs[i].val - k, false, +rngs[i].cnt}); // start of rng
        events.push_back({rngs[i].val + k + 1, false, -rngs[i].cnt}); // end of rng
        events.push_back({rngs[i].val, false, -rngs[i].cnt}); // start of rng
        events.push_back({rngs[i].val + 1, false, +rngs[i].cnt}); // end of rng
        events.push_back({rngs[i].val, true, +rngs[i].cnt}); // start of rng
        events.push_back({rngs[i].val + 1, true, -rngs[i].cnt}); // end of rng
    }
    sort(events.begin(), events.end(), [](const event& left, const event& right) {
        return left.pos < right.pos;
    });

    int ans = 1;

    int curr_cnt = 0;
    int curr_in_place = 0;
    int i = 0;
    while (i < events.size()) {
        int pos = events[i].pos;
        while (i < events.size() && events[i].pos == pos) {
            if (!events[i].in_place)
                curr_cnt += events[i].diff;
            else
                curr_in_place += events[i].diff;
            ++i;
        }

        ans = max(ans, curr_in_place + min(curr_cnt, numOperations));
    }

    return ans;
    }
};",1447703012
idanro12,idanro12,129,3626,cpp,"class Solution {
public:
    int mul(int num) {
        int sum = 1;
        while (num != 0) {
            sum *= num % 10;
            num /= 10;
        }

        return sum;
    }
    int smallestNumber(int n, int t) {
        int num = n;
        while (true) {
            if (mul(num) % t == 0) return num;
            ++num;
        }
        return 0;
    }
};",1447654593
idanro12,idanro12,129,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
            map<int, int> freq;
    for (int i = 0; i < nums.size(); i++) ++freq[nums[i]];

    struct rng {
        int val;
        int cnt;
    };
    vector<rng> rngs;
    for (auto it : freq)
        rngs.push_back({it.first, it.second});

    struct event {
        int pos;
        bool in_place;
        int diff;
    };
    vector<event> events;
    for (int i = 0; i < rngs.size(); i++) {
        events.push_back({rngs[i].val - k, false, +rngs[i].cnt}); // start of rng
        events.push_back({rngs[i].val + k + 1, false, -rngs[i].cnt}); // end of rng
        events.push_back({rngs[i].val, false, -rngs[i].cnt}); // start of rng
        events.push_back({rngs[i].val + 1, false, +rngs[i].cnt}); // end of rng
        events.push_back({rngs[i].val, true, +rngs[i].cnt}); // start of rng
        events.push_back({rngs[i].val + 1, true, -rngs[i].cnt}); // end of rng
    }
    sort(events.begin(), events.end(), [](const event& left, const event& right) {
        return left.pos < right.pos;
    });

    int ans = 1;

    int curr_cnt = 0;
    int curr_in_place = 0;
    int i = 0;
    while (i < events.size()) {
        int pos = events[i].pos;
        while (i < events.size() && events[i].pos == pos) {
            if (!events[i].in_place)
                curr_cnt += events[i].diff;
            else
                curr_in_place += events[i].diff;
            ++i;
        }

        ans = max(ans, curr_in_place + min(curr_cnt, numOperations));
    }

    return ans;
    }
};",1447703427
Vansh Dhawan,vanshdhawan60,132,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int ops) {
        int n = nums.size();
        vector<int> psum (n);
        map<int, int> freq;
        map<int, int> mp;
        sort(nums.begin(), nums.end());
        for (int &x: nums) {
            int low = x-k, high = x+k;
            ++mp[low]; --mp[high+1];
            ++freq[x];
            int idx = lower_bound(nums.begin(), nums.end(), low) - nums.begin();
            psum[idx]+=1;
            idx = upper_bound(nums.begin(), nums.end(), high) - nums.begin();
            if (idx<n) psum[idx] -= 1;
        }
        int ans = 0;
        int cnt = 0;
        for (int i=0; i<n; i++) {
            cnt += psum[i];
            ans = max (ans, freq[nums[i]] + min(cnt - freq[nums[i]], ops));
        }
        cnt = 0;
        for (auto [num, c]: mp) {
            cnt += c;
            ans = max (ans, freq[num] + min(cnt - freq[num], ops));
        }
        return ans;
    }
};",1447701850
Vansh Dhawan,vanshdhawan60,132,3626,cpp,"class Solution {
public:
    int smallestNumber(int n, int t) {
        int x = 1;
        int temp = n;
        while (temp) {
            x*=temp%10;
            temp/=10;
        }
        while (x%t!=0) {
            ++n;
            temp = n;
            x = 1;
            while (temp) {
                x*=temp%10;
                temp/=10;
            }
        }
        return n;
    }
};",1447658247
Vansh Dhawan,vanshdhawan60,132,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int ops) {
        
        int n = nums.size();
        vector<int> psum (n);
        map<int, int> freq;
        map<int, int> mp;
        sort(nums.begin(), nums.end());
        for (int &x: nums) {
            int low = x-k, high = x+k;
            ++mp[low]; --mp[high+1];
            ++freq[x];
            int idx = lower_bound(nums.begin(), nums.end(), low) - nums.begin();
            psum[idx]+=1;
            idx = upper_bound(nums.begin(), nums.end(), high) - nums.begin();
            if (idx<n) psum[idx] -= 1;
        }
        int ans = 0;
        int cnt = 0;
        for (int i=0; i<n; i++) {
            cnt += psum[i];
            ans = max (ans, freq[nums[i]] + min(cnt - freq[nums[i]], ops));
        }
        cnt = 0;
        for (auto [num, c]: mp) {
            cnt += c;
            ans = max (ans, freq[num] + min(cnt - freq[num], ops));
        }
        return ans;
    }
};",1447703663
gtushar,gtushar,133,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int num) {
        sort(nums.begin(), nums.end());
        vector<vector<int>> v;
        for(int i : nums) v.push_back(vector<int>{ i - k, i + k });
        // sort(v.begin(), v.end(), [](const vector<int>&a, const vector<int>&b) {
        //     if (a[1] != b[1]) return a[1] < b[1];
        //     return a[0] < b[0];
        // });
        int j = 0, ans = 0, n = v.size(), r = 0;
        for(int i = 0; i < n; ++i) {
            while(j < n && v[j][0] <= v[i][1]) ++j;
            ans = max(ans, min(num, j - i));
            // cout << ""i = "" << i << "", j = "" << j << endl;
        }
        map<int, int> mp;
        for(int i:nums) ++mp[i];
        j = 0; r = 0;
        for(int i = 0; i < n; ++i) {
            while(j < n && nums[j] < nums[i] - k) ++j;
            while(r < n && nums[r] <= nums[i] + k) ++r;
            ans = max(ans, min(num + mp[nums[i]], r - j));
            // cout << ""i = "" << i << "", j = "" << j << "", r = "" << r << endl;
        }
        return ans;
    }
};",1447701178
gtushar,gtushar,133,3626,cpp,"class Solution {
public:
    int smallestNumber(int n, int t) {
        while(1) {
            string s = to_string(n);
            long long sum = 1;
            for(char ch:s) sum *= (ch - '0');
            if (sum % t == 0) return n;
            ++n;
        }
    }
};",1447656260
gtushar,gtushar,133,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int num) {
         sort(nums.begin(), nums.end());
        vector<vector<int>> v;
        for(int i : nums) v.push_back(vector<int>{ i - k, i + k });
        // sort(v.begin(), v.end(), [](const vector<int>&a, const vector<int>&b) {
        //     if (a[1] != b[1]) return a[1] < b[1];
        //     return a[0] < b[0];
        // });
        int j = 0, ans = 0, n = v.size(), r = 0;
        for(int i = 0; i < n; ++i) {
            while(j < n && v[j][0] <= v[i][1]) ++j;
            ans = max(ans, min(num, j - i));
            // cout << ""i = "" << i << "", j = "" << j << endl;
        }
        map<int, int> mp;
        for(int i:nums) ++mp[i];
        j = 0; r = 0;
        for(int i = 0; i < n; ++i) {
            while(j < n && nums[j] < nums[i] - k) ++j;
            while(r < n && nums[r] <= nums[i] + k) ++r;
            ans = max(ans, min(num + mp[nums[i]], r - j));
            // cout << ""i = "" << i << "", j = "" << j << "", r = "" << r << endl;
        }
        return ans;
    }
};",1447703808
krishnanshu19,krishnanshu19,134,3622,cpp,"class Solution {
public:
    int get(vector<int>& nums, int bound){
        int l = 0, r = nums.size() ;
        while(l<r){
            int mid = (l+r)/2;
            if(nums[mid]>bound) r= mid;
            else l=mid+1;
        }
        return --l;
    }
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        sort(nums.begin(), nums.end());
        int maxx_count = 1;
        map<int,int> ct;
        for(auto x: nums){
            ct[x]++;
        }
        for(auto x: nums){
            int r = get(nums,x+k), l = get(nums,x-k-1)+1;
            // cout<<x<<"" ""<<l<<"" ""<<r<<endl;
            maxx_count = max(maxx_count, min(r-l+1 - ct[x], numOperations)+ct[x]);
        }

        queue<int> q;
        for(auto x: nums){
            while(!q.empty() && q.front() < x-k) q.pop();
            q.push(x+k);
            maxx_count = max(maxx_count, min(numOperations, (int)q.size()));
        }
        return maxx_count;
    }
};",1447703350
krishnanshu19,krishnanshu19,134,3626,cpp,"class Solution {
public:
    bool check(int n, int t){
        int a=1;
        while(n>0){
            a*= n%10;
            n/=10;
        }
        return a%t==0;
    }
    int smallestNumber(int n, int t) {
        while(!check(n,t)) n++;
        return n;
    }
};",1447654662
krishnanshu19,krishnanshu19,134,3640,cpp,"class Solution {
public:
    int get(vector<int>& nums, int bound){
        int l = 0, r = nums.size() ;
        while(l<r){
            int mid = (l+r)/2;
            if(nums[mid]>bound) r= mid;
            else l=mid+1;
        }
        return --l;
    }
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        sort(nums.begin(), nums.end());
        int maxx_count = 1;
        map<int,int> ct;
        for(auto x: nums){
            ct[x]++;
        }
        for(auto x: nums){
            int r = get(nums,x+k), l = get(nums,x-k-1)+1;
            // cout<<x<<"" ""<<l<<"" ""<<r<<endl;
            maxx_count = max(maxx_count, min(r-l+1 - ct[x], numOperations)+ct[x]);
        }

        queue<int> q;
        for(auto x: nums){
            while(!q.empty() && q.front() < x-k) q.pop();
            q.push(x+k);
            maxx_count = max(maxx_count, min(numOperations, (int)q.size()));
        }
        return maxx_count;
    }
};",1447703937
du0san84,du0san84,135,3622,python3,"class Solution:
    from bisect import bisect_left, bisect_right

    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        def count_range(nums, center, k):
            return len(nums)-bisect_left(nums, center-k)-(len(nums) - bisect_right(nums, center+k))
        ret = 0
        nums.sort()
        counter = {}
        for num in nums: counter[num] = counter.get(num, 0)+1

        for num in nums:
            # print(num, counter[num], count_range(nums, num, k),min(numOperations, count_range(nums, num, k)-counter[num]))
            ret = max(ret, counter[num]+min(numOperations, count_range(nums, num, k)-counter[num]))
            
            ret = max(ret, min(numOperations, count_range(nums, num+k, k)))

        return ret

        ",1447694671
du0san84,du0san84,135,3626,python3,"class Solution:
    def smallestNumber(self, n: int, t: int) -> int:
        def product(num):
            ret = 1
            for c in str(num):
                ret *= int(c)
            return ret
        while product(n)%t != 0: n+=1
        return n",1447656575
du0san84,du0san84,135,3640,python3,"class Solution:
    from bisect import bisect_left, bisect_right

    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        def count_range(nums, center, k):
            return len(nums)-bisect_left(nums, center-k)-(len(nums) - bisect_right(nums, center+k))
        ret = 0
        nums.sort()
        counter = {}
        for num in nums: counter[num] = counter.get(num, 0)+1

        for num in nums:
            # print(num, counter[num], count_range(nums, num, k),min(numOperations, count_range(nums, num, k)-counter[num]))
            ret = max(ret, counter[num]+min(numOperations, count_range(nums, num, k)-counter[num]))
            
            ret = max(ret, min(numOperations, count_range(nums, num+k, k)))

        return ret

        ",1447694950
cyruskm,cyruskm,136,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        sort(nums.begin(), nums.end());
        vector<int> s;
        vector<int> c;
        map<int, int> m;
        map<int, int> mcum;
        vector<int> tar;
        int l = nums.size();
        m[-999999] = 0;
        mcum[-999999] = 0;
        for(int n: nums){
            m[n]++;
        }
        int cum = 0;
        int lastN = -1;
        for(int n : nums){
            if(n != lastN){
                lastN = n;
                cum = cum + m[n];
                mcum[n] = cum;
                
                if(n - k >= nums[0]) tar.push_back(n - k);
                if(n + k <= nums[l-1]) tar.push_back(n + k);
                tar.push_back(n);
            }
        }
        sort(tar.begin(), tar.end());
        //
        int ans = 0;
        for(int t : tar){
            int eq = 0;
            if(m.find(t) != m.end()){
                eq = m[t];
            }
            auto it1 = mcum.lower_bound(t - k);
            auto it2 = mcum.lower_bound(t + k);
            it1--; // lower than t-k;
            if(it2 == mcum.end()) it2--;
            if(it2->first > t + k){
                it2--;
            }
            int rangeCnt = it2->second - it1->second;
            int needOp = rangeCnt - eq;
            needOp = min(needOp, numOperations);
            ans = max(ans, eq + needOp);
        }
        return ans;
        
        
    }
};",1447711132
cyruskm,cyruskm,136,3626,cpp,"class Solution {
public:
    int smallestNumber(int n, int t) {
        for(int i = n; i < 999999; i++){
            int i2 = i;
            int p = 1;
            while(i2 > 0){
                p *= (i2 % 10);
                i2 = i2 / 10;
            }
            if(p % t == 0){
                return i;
            }
        }
        return 0;
    }
};",1447655259
cyruskm,cyruskm,136,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        sort(nums.begin(), nums.end());
        vector<int> s;
        vector<int> c;
        map<int, int> m;
        map<int, int> mcum;
        vector<int> tar;
        int l = nums.size();
        m[-999999] = 0;
        mcum[-999999] = 0;
        for(int n: nums){
            m[n]++;
        }
        int cum = 0;
        int lastN = -1;
        for(int n : nums){
            if(n != lastN){
                lastN = n;
                cum = cum + m[n];
                mcum[n] = cum;
                
                if(n - k >= nums[0]) tar.push_back(n - k);
                if(n + k <= nums[l-1]) tar.push_back(n + k);
                tar.push_back(n);
            }
        }
        sort(tar.begin(), tar.end());
        //
        int ans = 0;
        for(int t : tar){
            int eq = 0;
            if(m.find(t) != m.end()){
                eq = m[t];
            }
            auto it1 = mcum.lower_bound(t - k);
            auto it2 = mcum.lower_bound(t + k);
            it1--; // lower than t-k;
            if(it2 == mcum.end()) it2--;
            if(it2->first > t + k){
                it2--;
            }
            int rangeCnt = it2->second - it1->second;
            int needOp = rangeCnt - eq;
            needOp = min(needOp, numOperations);
            ans = max(ans, eq + needOp);
        }
        return ans;
    }
};",1447712786
Vivek Kumar,orogtsm,139,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        map<int,int> mp;
        unordered_map<int,int> freq;
        for(auto x : nums)
        {
            mp[x-k]++;
            mp[x]=mp[x];
            mp[x+k+1]--;
            freq[x]++;
        }
        int count=0;
        int result=0;
        for(auto x : mp)
        {
            count+=x.second;
            int req = count-freq[x.first];
            result=max(result,freq[x.first]+min(req,numOperations));
        }
        return result;
    }
};",1447713119
Vivek Kumar,orogtsm,139,3626,cpp,"class Solution {
public:
    bool isDivisible(int n,int t)
    {
        int result=1;
        while(n)
        {
            result *= (n%10);
            n=n/10;
        }
        
        if(result%t == 0) return true;
        return false;
    }
    int smallestNumber(int n, int t) {
        while(true)
        {
            if(isDivisible(n,t)) return n;
            n++;
        }
        return -1;
    }
};",1447659308
Vivek Kumar,orogtsm,139,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        map<int,int> mp;
        unordered_map<int,int> freq;
        for(auto x : nums)
        {
            mp[x-k]++;
            mp[x]=mp[x];
            mp[x+k+1]--;
            freq[x]++;
        }
        int count=0;
        int result=0;
        for(auto x : mp)
        {
            count+=x.second;
            int req = count-freq[x.first];
            result=max(result,freq[x.first]+min(req,numOperations));
        }
        return result;
    }
};",1447712395
Deepanshu Attri,Cipher_07,142,3622,python3,"from collections import Counter

class Solution:
    def maxFrequency(self, nums, k, ops):
        res = 0
        cnt = Counter(nums)
        nums.sort()
        
        def prev(x):
            l, r = 0, len(nums) - 1
            while l < r:
                m = l + (r - l) // 2
                if nums[m] >= x - k:
                    r = m
                else:
                    l = m + 1
            return l

        def nxt(x):
            l, r = 0, len(nums) - 1
            while l < r:
                m = l + (r - l + 1) // 2
                if nums[m] <= x + k:
                    l = m
                else:
                    r = m - 1
            return l

        for i in range(len(nums)):
            b = prev(nums[i] - k)
            a = nxt(nums[i] - k)
            res = max(res, 1 + min(ops - 1, a - b))
            b = prev(nums[i])
            a = nxt(nums[i])
            res = max(res, cnt[nums[i]] + min(ops, a - b + 1 - cnt[nums[i]]))
            b = prev(nums[i] + k)
            a = nxt(nums[i] + k)
            res = max(res, 1 + min(ops - 1, a - b))

        return res
",1447710886
Deepanshu Attri,Cipher_07,142,3626,cpp,"class Solution
{
public:
    int smallestNumber(int n, int t)
    {
        for (int i = n; 1; i++)
        {
            int pro = 1;
            int x = i;
            while (x)
            {
                pro *= x % 10;
                x /= 10;
            }
            if (pro % t == 0)
                return i;
        }
        return -1;
    }
};",1447713808
Deepanshu Attri,Cipher_07,142,3640,python3,"from collections import Counter

class Solution:
    def maxFrequency(self, nums, k, ops):
        res = 0
        cnt = Counter(nums)
        nums.sort()
        
        def prev(x):
            l, r = 0, len(nums) - 1
            while l < r:
                m = l + (r - l) // 2
                if nums[m] >= x - k:
                    r = m
                else:
                    l = m + 1
            return l

        def nxt(x):
            l, r = 0, len(nums) - 1
            while l < r:
                m = l + (r - l + 1) // 2
                if nums[m] <= x + k:
                    l = m
                else:
                    r = m - 1
            return l

        for i in range(len(nums)):
            b = prev(nums[i] - k)
            a = nxt(nums[i] - k)
            res = max(res, 1 + min(ops - 1, a - b))
            b = prev(nums[i])
            a = nxt(nums[i])
            res = max(res, cnt[nums[i]] + min(ops, a - b + 1 - cnt[nums[i]]))
            b = prev(nums[i] + k)
            a = nxt(nums[i] + k)
            res = max(res, 1 + min(ops - 1, a - b))

        return res
",1447710159
Konstantin Kostin,libkonstantin,144,3622,java,"class Solution {
    public int maxFrequency(int[] nums, int k, int numOperations) {
        int n = nums.length;
        Arrays.sort(nums);
        int maxNum = nums[n - 1];
        int ans = 1;
        for (int e = 1, i = 0, l = 0, r = 0; e <= maxNum; ++e) {
            while (i < n && nums[i] < e) {
                i++;
            }
            int j = i;
            while (j < n && nums[j] == e) {
                j++;
            }
            
            while (e - nums[l] > k) {
                ++l;
            }
            while (r < n && nums[r] - e <= k) {
                ++r;
            }
            int cnt = (r - l) - (j - i);
            ans = Math.max(ans, (j - i) + Math.min(cnt, numOperations));
        }
        return ans;
    }
}",1447682054
Konstantin Kostin,libkonstantin,144,3626,java,"class Solution {
    
    long digitsProduct(int n) {
        int ans = 1;
        while (n > 0) {
            ans *= (n % 10);
            n /= 10;
        }
        return ans;
    }

    public int smallestNumber(int n, int t) {
        int ans = n;
        while (digitsProduct(ans) % t != 0) {
            ans++;
        }
        return ans;
    }
}",1447656504
Konstantin Kostin,libkonstantin,144,3640,java,"class Solution {

    record Event(long x, int cnt, int ops) implements Comparable<Event> {
        @Override
        public int compareTo(Event o) {
            return Long.compare(x, o.x);
        }
    }

    public int maxFrequency(int[] nums, int k, int numOperations) {
        int n = nums.length;
        Arrays.sort(nums);
        PriorityQueue<Event> queue = new PriorityQueue<>(6 * n);
        for (int x : nums) {
            queue.add(new Event(x - k,  1,  1));
            queue.add(new Event(x    , -1, -1));

            queue.add(new Event(x    ,  1, 0));
            queue.add(new Event(x + 1, -1, 0));

            queue.add(new Event(x + 1    ,  1,  1));
            queue.add(new Event(x + k + 1, -1, -1));
        }
        
        int ans = 0;
        int cntElements = 0;
        int neededOperations = 0;
        while (!queue.isEmpty()) {
            Event start = queue.peek();
            while (!queue.isEmpty() && queue.peek().x == start.x) {
                Event element = queue.remove();
                cntElements += element.cnt;
                neededOperations += element.ops;
            }
            ans = Math.max(ans, cntElements - Math.max(0, neededOperations - numOperations));
        }
        return ans;
    }
}",1447714059
Shashank Sharma,ShashankZobb,145,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int num) {
        sort(nums.begin(), nums.end());
        unordered_map<int, int>map1;
        for(int i:nums)map1[i]++;
        int ans = 0, n = nums.size(), t1 = 0, t2 = 0, t3 = 0;
        for(int i=0;i<n;i++){
            while(t2 < n && nums[t2]-nums[i] <= k)t2++;
            while(t1 < i && nums[i]-nums[t1] > k)t1++;
            ans = max(ans, min(num+map1[nums[i]], t2-t1));
            while(t3 < i && nums[i]-nums[t3] > (2*k))t3++;
            ans = max(ans, min(num, i-t3+1));
        }
        return ans;
    }
};",1447676745
Shashank Sharma,ShashankZobb,145,3626,cpp,"class Solution {
public:
    int smallestNumber(int n, int t) {
        while(true){
            string str = to_string(n);
            int temp = 1;
            for(char i:str){
                temp *= (i-'0');
                temp = temp%t;
            }
            if(temp == 0)break;
            n++;
        }
        return n;
    }
};",1447654776
Shashank Sharma,ShashankZobb,145,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int num) {
        sort(nums.begin(), nums.end());
        unordered_map<int, int>map1;
        for(int i:nums)map1[i]++;
        int ans = 0, n = nums.size(), t1 = 0, t2 = 0, t3 = 0;
        for(int i=0;i<n;i++){
            while(t2 < n && nums[t2]-nums[i] <= k)t2++;
            while(t1 < i && nums[i]-nums[t1] > k)t1++;
            ans = max(ans, min(num+map1[nums[i]], t2-t1));
            while(t3 < i && nums[i]-nums[t3] > (2*k))t3++;
            ans = max(ans, min(num, i-t3+1));
        }
        return ans;
    }
};",1447674517
james-ryans,james-ryans,146,3622,cpp,"const int N = 1e5 + 5;

class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        int n = nums.size();
        vector<int> freq(N, 0);
        for (int i = 0; i < n; i++) {
            freq[nums[i]]++;
        }
        for (int i = 1; i < N; i++) {
            freq[i] += freq[i - 1];
        }

        int maxFreq = 0;
        for (int i = 1; i < N; i++) {
            int cur = freq[i] - freq[i - 1];
            int range = freq[min(N - 1, i + k)] - freq[max(0, i - k - 1)];

            maxFreq = max(maxFreq, cur + min(range - cur, numOperations));
        }
        return maxFreq;
    }
};",1447670331
james-ryans,james-ryans,146,3626,cpp,"class Solution {
private:
    bool div(int n, int t) {
        int x = 1;
        while (n > 0) {
            x *= n % 10;
            n /= 10;
        }
        return x % t == 0;
    }
public:
    int smallestNumber(int n, int t) {
        while (!div(n, t)) {
            n++;
        }
        return n;
    }
};",1447654607
james-ryans,james-ryans,146,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        int n = nums.size();
        map<int, int> freq;
        for (int i = 0; i < n; i++) {
            freq[nums[i]]++;
            freq[nums[i] - k];
            freq[nums[i] + k];
        }

        int maxFreq = 0;
        
        int freqRange = 0;
        auto l = freq.begin();
        auto r = freq.begin();
        for (auto it = freq.begin(); it != freq.end(); it++) {
            while (l->first < it->first - k) {
                freqRange -= l->second;
                l++;
            }
            while (r != freq.end() && r->first <= it->first + k) {
                freqRange += r->second;
                r++;
            }

            int cur = it->second;
            maxFreq = max(maxFreq, cur + min(freqRange - cur, numOperations));
        }
        
        return maxFreq;
    }
};",1447705813
Neal@阳谷县,x____x,149,3622,cpp,"class Solution {
public:
  int maxFrequency(vector<int>& nums, int k, int numOperations) {
    int n = nums.size();
    sort(nums.begin(), nums.end());
    map<int, int> c;
    for (int x : nums) ++c[x];
    int lo = nums[0], hi = nums.back();
    int ret = 0;
    for (int x = lo, i = 0, j = 0; x <= hi; ++x) {
      while (i < n && nums[i] < x - k) ++i;
      while (j < n && nums[j] <= x + k) ++j;
      int y = min(j - i - c[x], numOperations);
      // cout << x << ' ' << i << ' ' << j << ' ' << y << ' ' << y + c[x] << endl;
      ret = max(ret, y + c[x]);
    }
    return ret;
  }
};",1447689914
Neal@阳谷县,x____x,149,3626,python3,"class Solution:
  def smallestNumber(self, n: int, t: int) -> int:
    while 1:
      x = 1
      for y in map(int, str(n)):
        x = x * y % t
      if x == 0:
        return n
      n += 1
    return -1
        ",1447655004
Neal@阳谷县,x____x,149,3640,cpp,"class Solution {
public:
  int maxFrequency(vector<int>& nums, int k, int numOperations) {
    int n = nums.size();
    sort(nums.begin(), nums.end());
    map<int, int> c;
    int hi = nums.back();
    for (int x : nums) ++c[x];
    vector<int> a;
    for (int x : nums) {
      a.push_back(x);
      if (x + k <= hi) a.push_back(x + k);
    }
    sort(a.begin(), a.end());
    int ret = 0, i = 0, j = 0;
    for (int x : a) {
      while (i < n && nums[i] < x - k) ++i;
      while (j < n && nums[j] <= x + k) ++j;
      int y = min(j - i - c[x], numOperations);
      ret = max(ret, c[x] + y);
    }
    return ret;
  }
};",1447714753
Alphorix,Alphorix,151,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        sort(nums.begin(), nums.end());
        vector<int> cnt;
        cnt.push_back(1);
        for(int i = 1 ; i < nums.size() ; ++i) {
            if(nums[i] == nums[i-1]) {
                ++cnt.back();
            } else {
                cnt.push_back(1);
            }
        }
        nums.erase(unique(nums.begin(), nums.end()), nums.end());
        vector<int> prefix = cnt;
        for(int i = 1 ; i < nums.size() ; ++i) {
            prefix[i] += prefix[i-1];
        }

        int ans = 0;
        for(int i = 0 ; i < nums.size() ; ++i) {
            int left = lower_bound(nums.begin(), nums.end(), nums[i] - k) - nums.begin() - 1;
            int left_val = (left == -1 ? 0 : prefix[left]);
            int right = upper_bound(nums.begin(), nums.end(), nums[i] + k) - nums.begin() - 1;
            int right_val = prefix[right];
            int cur = cnt[i] + min(numOperations, right_val - left_val - cnt[i]);
            ans = max(ans, cur);
        }

        int ptr = 0;
        for(int i = 0 ; i < nums.size() ; ++i) {
            while(nums[i] - nums[ptr] > 2 * k) ++ptr;
            int cur = prefix[i] - (ptr == 0 ? 0 : prefix[ptr-1]);
            ans = max(ans, min(cur, numOperations));
        }
        return ans;
    }
};",1447697614
Alphorix,Alphorix,151,3626,cpp,"class Solution {
public:
    int getProd(int n) {
        int t = 1;
        while(n > 0) {
            t *= n % 10;
            n /= 10;
        }
        return t;
    }

    int smallestNumber(int n, int t) {
        for(int i = n ; i ; ++i) {
            if(getProd(i) % t == 0) {
                return i;
            }
        }
        return 0;
    }
};",1447659389
Alphorix,Alphorix,151,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        sort(nums.begin(), nums.end());
        vector<int> cnt;
        cnt.push_back(1);
        for(int i = 1 ; i < nums.size() ; ++i) {
            if(nums[i] == nums[i-1]) {
                ++cnt.back();
            } else {
                cnt.push_back(1);
            }
        }
        nums.erase(unique(nums.begin(), nums.end()), nums.end());
        vector<int> prefix = cnt;
        for(int i = 1 ; i < nums.size() ; ++i) {
            prefix[i] += prefix[i-1];
        }

        int ans = 0;
        for(int i = 0 ; i < nums.size() ; ++i) {
            int left = lower_bound(nums.begin(), nums.end(), nums[i] - k) - nums.begin() - 1;
            int left_val = (left == -1 ? 0 : prefix[left]);
            int right = upper_bound(nums.begin(), nums.end(), nums[i] + k) - nums.begin() - 1;
            int right_val = prefix[right];
            int cur = cnt[i] + min(numOperations, right_val - left_val - cnt[i]);
            ans = max(ans, cur);
        }

        int ptr = 0;
        for(int i = 0 ; i < nums.size() ; ++i) {
            while(nums[i] - nums[ptr] > 2 * k) ++ptr;
            int cur = prefix[i] - (ptr == 0 ? 0 : prefix[ptr-1]);
            ans = max(ans, min(cur, numOperations));
        }
        return ans;
    }
};",1447696260
Kevin Pan,Kevin_Pan,152,3622,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        ans = 0
        l, r = 0, 0
        n = len(nums)
        cnt = Counter(nums)
        nums = sorted(nums)
        for i in range(len(nums)):
            if i > 0 and nums[i] == nums[i - 1]:
                continue
            while nums[i] - k > nums[l]:
                l += 1
            while r + 1 < n and nums[r + 1] - k <= nums[i]:
                r += 1
            ans = max(ans, cnt[nums[i]] + min(r - l + 1 - cnt[nums[i]], numOperations))
        l = 0
        for r in range(n):
            if nums[l] + 2 * k < nums[r]:
                l += 1
            ans = max(ans, min(r - l + 1, numOperations))
        return ans",1447707106
Kevin Pan,Kevin_Pan,152,3626,python3,"class Solution:
    def smallestNumber(self, n: int, t: int) -> int:
        curr = n
        while 1:
            s = str(curr)
            pr = 1
            for x in s:
                pr *= int(x)
            if pr % t == 0:
                return curr
            curr += 1
        return -1",1447654134
Kevin Pan,Kevin_Pan,152,3640,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        ans = 0
        l, r = 0, 0
        n = len(nums)
        cnt = Counter(nums)
        nums = sorted(nums)
        for i in range(len(nums)):
            if i > 0 and nums[i] == nums[i - 1]:
                continue
            while nums[i] - k > nums[l]:
                l += 1
            while r + 1 < n and nums[r + 1] - k <= nums[i]:
                r += 1
            ans = max(ans, cnt[nums[i]] + min(r - l + 1 - cnt[nums[i]], numOperations))
        l = 0
        for r in range(n):
            if nums[l] + 2 * k < nums[r]:
                l += 1
            ans = max(ans, min(r - l + 1, numOperations))
        return ans",1447707439
Rohit Jain,rohitathuffinnn,153,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        int n=nums.size();
        map<int,int>mpp;
        for(auto it:nums)mpp[it]++;
        int res=0;
        sort(nums.begin(),nums.end());
        for(int i=nums[0];i<=nums.back();i++){
            int l=lower_bound(nums.begin(),nums.end(),i-k)-nums.begin();
            int e=upper_bound(nums.begin(),nums.end(),i+k)-nums.begin();
            res=max(res,min(e-l,numOperations+mpp[i]));
        }
        return res;
    }
};",1447688787
Rohit Jain,rohitathuffinnn,153,3626,cpp,"class Solution {
public:
    int prod(int i){
        int res=1;
        while(i){
            res*=(i%10);
            i/=10;
        }
        return res;
    }
    int smallestNumber(int n, int t) {
        for(int i=n;i<=1000;i++){
            if(prod(i)%t==0)return i;
        }
        return -1;
    }
};",1447654624
Rohit Jain,rohitathuffinnn,153,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        sort(nums.begin(),nums.end());
        int n=nums.size();
        int res=0;
        for(int i=0;i<n;i++){
            int e=upper_bound(nums.begin(),nums.end(),(int)min(1LL*nums.back(),1LL*nums[i]+2*k))-nums.begin();
            res=max(res,min(numOperations,e-i));
        }

        map<int,int>freq;
        for(auto it:nums)freq[it]++;
        for(int i=0;i<n;i++){
            int l=lower_bound(nums.begin(),nums.end(),nums[i]-k)-nums.begin();
            int e=upper_bound(nums.begin(),nums.end(),nums[i]+k)-nums.begin();
            res=max(res,min(e-l,numOperations+freq[nums[i]]));
        }
        return res;




        
    }
};",1447707528
Wen-Chieh Tung,WJTung,154,3622,cpp,"class Solution {
 public:
  int maxFrequency(vector<int>& nums, int k, int numOperations) {
    unordered_map<int, int> count;
    set<int> targets;
    for (int num : nums) {
      ++count[num];
      targets.insert(num);
      targets.insert(num - k);
      targets.insert(num + k);
    }
    sort(nums.begin(), nums.end());
    int left = 0;
    int right = 0;
    int ans = 1;
    for (int target : targets) {
      while (left < nums.size() && nums[left] < target - k) {
        ++left;
      }
      while (right + 1 < nums.size() && nums[right + 1] <= target + k) {
        ++right;
      }
      if (left >= nums.size()) {
        continue;
      }
      int cur = count[target] + min(right - left + 1 - count[target], numOperations);
      ans = max(cur, ans);
    }
    return ans;
  }
};",1447697625
Wen-Chieh Tung,WJTung,154,3626,cpp,"class Solution {
 public:
    int smallestNumber(int n, int t) {
      for (int i = n; ; ++i) {
        int P = 1;
        int cur = i;
        while (cur > 0) {
          P *= (cur % 10);
          cur /= 10;
        }
        if (P % t == 0) {
          return i;
        }
      }
      return -1;
    }
};",1447655402
Wen-Chieh Tung,WJTung,154,3640,cpp,"class Solution {
 public:
  int maxFrequency(vector<int>& nums, int k, int numOperations) {
    unordered_map<int, int> count;
    set<int> targets;
    for (int num : nums) {
      ++count[num];
      targets.insert(num);
      targets.insert(num - k);
      targets.insert(num + k);
    }
    sort(nums.begin(), nums.end());
    int left = 0;
    int right = 0;
    int ans = 1;
    for (int target : targets) {
      while (left < nums.size() && nums[left] < target - k) {
        ++left;
      }
      while (right + 1 < nums.size() && nums[right + 1] <= target + k) {
        ++right;
      }
      if (left >= nums.size()) {
        continue;
      }
      int cur = count[target] + min(right - left + 1 - count[target], numOperations);
      ans = max(cur, ans);
    }
    return ans;
  }
};",1447698840
Palash Jhaveri,Pal_J,155,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        int n = nums.size();
        int ans = 0;
        map<int,int> freq;
        for(int i = 0;i<n;i++){
            freq[nums[i]]++;
            ans = max(ans,freq[nums[i]]);
        }
        map<int,int> mp;
        for(int i = 0;i<n;i++){
            mp[nums[i]] += 0;
            mp[nums[i]-k]++;
            mp[nums[i]+k+1]--;
        }
        int currk = 0;
        for(auto it : mp){
            currk += it.second;
            int op = currk;
            op -= freq[it.first];
            op = min(op,numOperations);
            op += freq[it.first];
            ans = max(ans,op);
        }
        return ans;
    }
};",1447707100
Palash Jhaveri,Pal_J,155,3626,cpp,"class Solution {
public:
    int smallestNumber(int n, int t) {
        while(n <= 1e6){
            int temp = n;
            int prod = 1;
            while(temp > 0){
                prod *= (temp%10);
                temp/=10;
            }
            if(prod % t == 0) return n;
            n++;
        }
        return -1;
    }
};",1447655468
Palash Jhaveri,Pal_J,155,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        int n = nums.size();
        int ans = 0;
        map<int,int> freq;
        for(int i = 0;i<n;i++){
            freq[nums[i]]++;
            ans = max(ans,freq[nums[i]]);
        }
        map<int,int> mp;
        for(int i = 0;i<n;i++){
            mp[nums[i]] += 0;
            mp[nums[i]-k]++;
            mp[nums[i]+k+1]--;
        }
        int currk = 0;
        for(auto it : mp){
            currk += it.second;
            int op = currk;
            op -= freq[it.first];
            op = min(op,numOperations);
            op += freq[it.first];
            ans = max(ans,op);
        }
        return ans;
    }
};",1447707955
Dragoljub Duric,dragoljub-duric,157,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        vector<int> witout_operations(1e5 + 3, 0);
        vector<int> with_operations(1e5 + 3, 0);
        
        for(int i : nums){
            ++witout_operations[i];
            int low = max(i - k, 0);
            ++with_operations[low];
            --with_operations[i];
            ++with_operations[i + 1];
            int high = i + k + 1;
            if(high >= with_operations.size())
                 high =    with_operations.size() - 1;
            --with_operations[high];
        }

        int maxi = 0, curr = 0, sum_with = 0;

        for(int i = 0; i < 1e5 + 3; ++i){
            sum_with += with_operations[i];
            curr = min(sum_with, numOperations) + witout_operations[i];
            maxi = max(curr, maxi);
        }

        return maxi;
    }
};",1447678232
Dragoljub Duric,dragoljub-duric,157,3626,cpp,"class Solution {
public:
    int digit_prod(int n){
        int p = 1;
        while(n){
            p *= (n%10);
            n /= 10;
        }
        return p;
    }

    int smallestNumber(int n, int t) {
        while(true){
            if(digit_prod(n) % t == 0) return n;
            ++n;
        }

        return -1;
    }
};",1447655363
Dragoljub Duric,dragoljub-duric,157,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        map<int, int> witout_operations;
        map<int, int> with_operations;
        
        for(int i : nums){
            ++witout_operations[i];
            int low = max(i - k, 0);
            ++with_operations[low];
            --with_operations[i];
            ++with_operations[i + 1];
            --with_operations[i + k + 1];
        }

        int maxi = 0, curr = 0, sum_with = 0;
        
        auto it_wo = witout_operations.begin();
        
        for(auto it = with_operations.begin(); it != with_operations.end(); ++it){
            sum_with += it -> second;
            maxi = max(min(sum_with, numOperations), maxi);

            while(it_wo != witout_operations.end() && it_wo -> first < it -> first){
                ++it_wo;
            }
            
            if(it_wo != witout_operations.end() && it_wo -> first == it -> first){
                curr = min(sum_with, numOperations) + it_wo -> second;
                maxi = max(curr, maxi);
            }
        }

        return maxi;
    }
};",1447699321
Subhrajyoti Nayak,subhra_29,158,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        sort(nums.begin(),nums.end());
        int ans=0,n=nums.size();
        int i=-1,j=-1;
        map<int,int>mp;
        for(int x:nums) mp[x]++;
        for(int x=nums[0]-k;x<=nums[n-1]+k;x++){
            while(i<n-1 && nums[i+1]<x-k) i++;
            while(j<n-1 && nums[j+1]<=x+k) j++;
           // cout<<i<<"" ""<<j<<'\n';
            int op=j-i-mp[x];
            op=min(op,numOperations);
            op+=mp[x];
            ans=max(ans,op);
        }
        return ans;
    }
};",1447678085
Subhrajyoti Nayak,subhra_29,158,3626,cpp,"class Solution {
public:
    int smallestNumber(int n, int t) {
        while(1){
            int p=1;
            int m=n;
            while(m) p*=(m%10),m/=10;
            if(p%t==0) return n;
            n++;
        }
        return n;
    }
};",1447654801
Subhrajyoti Nayak,subhra_29,158,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        sort(nums.begin(),nums.end());
        int ans=0,n=nums.size();
        int i=-1,j=-1;
        map<int,int>mp;
        for(int x:nums) mp[x]++;
        set<int>v;
        for(int x:nums){
            v.insert(x-k);v.insert(x+k);
            v.insert(x);
        }
        for(int x:v){
            while(i<n-1 && nums[i+1]<x-k) i++;
            while(j<n-1 && nums[j+1]<=x+k) j++;
            //cout<<i<<"" ""<<j<<'\n';
            int op=j-i-mp[x];
            op=min(op,numOperations);
            op+=mp[x];
            ans=max(ans,op);
        }
        return ans;
    }
};",1447717073
VinayKumarReddy_5204,VinayKumarReddy_5204,160,3622,csharp,"public class Solution {
    public int MaxFrequency(int[] n, int k, int o) {
        var f = BuildFrequencyMap(n);
        var e = BuildEvents(n, k);
        var p = CollectUniquePoints(e, f);
        
        // Sort events for processing
        e.Sort((a, b) => a.Item1.CompareTo(b.Item1));
        
        return CalculateMaxFrequency(e, p, f, o);
    }

    private Dictionary<int, int> BuildFrequencyMap(int[] n) {
        var f = new Dictionary<int, int>();
        foreach (int x in n) {
            if (!f.ContainsKey(x)) {
                f[x] = 0;
            }
            f[x]++;
        }
        return f;
    }

    private List<(int, int)> BuildEvents(int[] n, int k) {
        var e = new List<(int, int)>();
        foreach (int x in n) {
            e.Add((x - k, 1));    // Start of event
            e.Add((x + k + 1, -1)); // End of event
        }
        return e;
    }

    private SortedSet<int> CollectUniquePoints(List<(int, int)> e, Dictionary<int, int> f) {
        var s = new SortedSet<int>();
        foreach (var ev in e) {
            s.Add(ev.Item1);
        }
        foreach (var key in f.Keys) {
            s.Add(key);
        }
        return s;
    }

    private int CalculateMaxFrequency(List<(int, int)> e, SortedSet<int> p, Dictionary<int, int> f, int o) {
        int i = 0;
        int c = 0; 
        int m = 0;

        foreach (int t in p) {
            // Process events up to the current point t
            while (i < e.Count && e[i].Item1 <= t) {
                c += e[i].Item2; // Update current overlap
                i++;
            }

            int a = f.ContainsKey(t) ? f[t] : 0;
            int q = a + Math.Min(o, c - a);
            m = Math.Max(m, q);
        }

        return m;
    }
}
",1447690345
VinayKumarReddy_5204,VinayKumarReddy_5204,160,3626,csharp,"public class Solution {
    public int SmallestNumber(int n, int t) {
        for (int i = n; i <= 100; i++) {
            int product = 1;
            int num = i;
            
            if (num == 0) {
                product = 0;
            } else {
                while (num > 0) {
                    product *= num % 10;
                    num /= 10;
                }
            }
            
            if (product % t == 0) {
                return i;
            }
        }
        return -1;
    }
}
",1447656647
VinayKumarReddy_5204,VinayKumarReddy_5204,160,3640,csharp,"public class Solution {
    public int MaxFrequency(int[] n, int k, int o) {
        var f = BuildFrequencyMap(n);
        var e = BuildEvents(n, k);
        var p = CollectUniquePoints(e, f);
        
        // Sort events for processing
        e.Sort((a, b) => a.Item1.CompareTo(b.Item1));
        
        return CalculateMaxFrequency(e, p, f, o);
    }

    private Dictionary<int, int> BuildFrequencyMap(int[] n) {
        var f = new Dictionary<int, int>();
        foreach (int x in n) {
            if (!f.ContainsKey(x)) {
                f[x] = 0;
            }
            f[x]++;
        }
        return f;
    }

    private List<(int, int)> BuildEvents(int[] n, int k) {
        var e = new List<(int, int)>();
        foreach (int x in n) {
            e.Add((x - k, 1));    // Start of event
            e.Add((x + k + 1, -1)); // End of event
        }
        return e;
    }

    private SortedSet<int> CollectUniquePoints(List<(int, int)> e, Dictionary<int, int> f) {
        var s = new SortedSet<int>();
        foreach (var ev in e) {
            s.Add(ev.Item1);
        }
        foreach (var key in f.Keys) {
            s.Add(key);
        }
        return s;
    }

    private int CalculateMaxFrequency(List<(int, int)> e, SortedSet<int> p, Dictionary<int, int> f, int o) {
        int i = 0;
        int c = 0; 
        int m = 0;

        foreach (int t in p) {
            // Process events up to the current point t
            while (i < e.Count && e[i].Item1 <= t) {
                c += e[i].Item2; // Update current overlap
                i++;
            }

            int a = f.ContainsKey(t) ? f[t] : 0;
            int q = a + Math.Min(o, c - a);
            m = Math.Max(m, q);
        }

        return m;
    }
}
",1447690688
Akshat mangal,iamakshat01,161,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) 
    {
        int n=nums.size();
        map<int,int> m;

        for(int i=0;i<n;i++)
        {
            m[nums[i]-k]++;
            m[nums[i]]--;
            m[nums[i]+1]++;
            m[nums[i]+k+1]--;
        }

        int cur=0;
        for(auto &x: m)
        {
            cur+=x.second;
            x.second=min(cur, numOperations);
        }
        for(int i=0;i<n;i++)
            m[nums[i]]++;
       
       cur=0;
       for(auto x: m)
           cur=max(cur, x.second);
       return cur;
    }
};",1447704576
Akshat mangal,iamakshat01,161,3626,cpp,"class Solution {
public:
    int smallestNumber(int n, int t) 
    {
        while(true)
        {
            string s=to_string(n);
            int prod=1;
            for(auto x: s)
                prod=prod*(x-'0');
            if(prod%t==0)
            {
                return n;
            }
            n++;
        }
        return -1;
    }
};",1447655114
Akshat mangal,iamakshat01,161,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        int n=nums.size();
        map<int,int> m;

        for(int i=0;i<n;i++)
        {
            m[nums[i]-k]++;
            m[nums[i]]--;
            m[nums[i]+1]++;
            m[nums[i]+k+1]--;
        }

        int cur=0;
        for(auto &x: m)
        {
            cur+=x.second;
            x.second=min(cur, numOperations);
        }
        for(int i=0;i<n;i++)
            m[nums[i]]++;
       
       cur=0;
       for(auto x: m)
           cur=max(cur, x.second);
       return cur;
    }
};",1447709226
田星,txingml,162,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        sort(nums.begin(), nums.end());
        map<int, int> table;
        for (int num : nums) {
            table[num-k]++;
            table[num+k+1]--;
        }
        int a = INT_MIN;
        int cnt = 0;
        int ret = 1;
        int n = nums.size();
        int i = 0;
        for (const auto& [b, tmp] : table) {
            int m = 1;
            int mm = 0;
            // cout << ""a b "" << a <<' ' << b << endl;
            while (i < n && nums[i] < b) {
                if (i+1 < n && nums[i+1] == nums[i]) {
                    m++;
                } else {
                    m = 1;
                }
                i++;
                mm = max(mm, m);
            }
            int moved = cnt - mm;
            moved = min(moved, numOperations);
            // cout <<  mm << ' ' << moved << endl; 
            ret = max(ret, mm + moved);
            a = b;
            cnt += tmp;
        }
        return ret;
        
    }
};",1447700710
田星,txingml,162,3626,cpp,"int solve(int n) {
    int ret = 1;
    while (n) {
        ret *= n % 10;
        n /= 10;
    }
    return ret;
}
class Solution {
public:
    int smallestNumber(int n, int t) {
        while (solve(n) % t != 0) {
            n++;
        }
        return n;
        
    }
};",1447654812
Aibar Kuanyshbay,kaikaikaikaikai,7,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numo) {
        vector<pair<int, int>> v;
        map<int, int> m;
        for (int i : nums) {
            v.push_back({i + k + 1, -1});
            v.push_back({i, 1});
            v.push_back({i - k, 0});
            m[i]++;
        }
        sort(v.begin(), v.end());
        int cur = 0, ans = 0;
        for (auto i : v) {
            int x = i.first;
            if (i.second == -1) {
                cur--; 
                ans = max(ans, min(cur, numo));
            } else if (i.second == 1) {
                ans = max(ans, m[x] + min(cur - m[x], numo));
            } else {
                cur++; 
                ans = max(ans, min(cur, numo));
            }
        }
        return ans;
    }
};",1447678852
Aibar Kuanyshbay,kaikaikaikaikai,7,3626,cpp,"class Solution {
public:
    bool f(int n, int t) {
        int m = 1 % t;
        while (n > 0) {
            m = m * (n % 10) % t;
            n /= 10;
        }
        return m == 0;
    }
    int smallestNumber(int n, int t) {
        while (true) {
            if (f(n, t))
                break;
            n++;
        }
        return n;
    }
};",1447654345
Aibar Kuanyshbay,kaikaikaikaikai,7,3635,cpp,"class Solution {
public:
    vector<vector<int>> dp;
    void calcDP() {
        dp = vector<vector<int>>(55, vector<int>(55, 100));
        dp[0][0] = 0;
        for (int i = 0; i < 50; i++)
            for (int j = 0; j < 50; j++) {
                dp[i + 1][j] = min(dp[i + 1][j], dp[i][j] + 1);
                dp[i + 2][j] = min(dp[i + 2][j], dp[i][j] + 1);
                dp[i + 3][j] = min(dp[i + 3][j], dp[i][j] + 1);
                dp[i + 1][j + 1] = min(dp[i + 1][j + 1], dp[i][j] + 1);
                dp[i][j + 1] = min(dp[i][j + 1], dp[i][j] + 1);
                dp[i][j + 2] = min(dp[i][j + 2], dp[i][j] + 1);
            }
    }
    vector<int> primes = {2, 3, 5, 7};
    vector<vector<int>> p = {
        {},           // 0
        {0, 0, 0, 0}, // 1
        {1, 0, 0, 0}, // 2
        {0, 1, 0, 0}, // 3
        {2, 0, 0, 0}, // 4
        {0, 0, 1, 0}, // 5
        {1, 1, 0, 0}, // 6
        {0, 0, 0, 1}, // 7
        {3, 0, 0, 0}, // 8
        {0, 2, 0, 0}, // 9
    };
    vector<int> cnt;
    int n;
    vector<int> a;
    void primeFact(long long& t) {
        cnt = vector<int>(4, 0);
        for (int i = 0; i < 4; i++) {
            while (t % primes[i] == 0) {
                t /= primes[i];
                cnt[i]++;
            }
        }
    }
    bool check(string num, long long t) {
        long long tt = 1LL % t;
        int cnt0 = 0;
        for (char c : num) {
            tt = tt * (c - '0') % t;
            if (c == '0')
                cnt0++;
        }
        return tt == 0 && cnt0 == 0;
    }
    void delZeroes(string& s) {
        int pos = -1;
        for (int i = 0; i < n; i++)
            if (s[i] == '0') {
                pos = i;
                break;
            }
        if (pos == -1)
            return;
        for (int i = pos; i < n; i++)
            s[i] = '1';
    }
    string smallestNumber(string num, long long t) {
        calcDP();

        n = num.size();
        delZeroes(num);
        
        if (check(num, t))
            return num;

        
        primeFact(t);
        if (t > 1)
            return ""-1"";
        
        reverse(num.begin(), num.end());
        a = vector<int>(n + 50, 0);
        
        for (int i = 0; i < n; i++)
            a[i] = num[i] - '0';

        n += 50;
        
        for (int i = 0; i < n; i++)
            if (a[i] > 0) {
                for (int j = 0; j < 4; j++)
                    cnt[j] -= p[a[i]][j];
            }
        
        for (int i = 0; i < n; i++) {
            if (a[i] > 0) {
                for (int j = 0; j < 4; j++)
                    cnt[j] += p[a[i]][j];
            }
            for (int c = a[i] + 1; c <= 9; c++) {
                for (int j = 0; j < 4; j++)
                    cnt[j] -= p[c][j];

                int needLen = max(0, cnt[2]) + max(0, cnt[3]);
                int cnt2 = max(0, cnt[0]), cnt3 = max(0, cnt[1]);
                needLen += dp[cnt2][cnt3];

                if (i >= needLen) {
                    string ans = """";
                    for (int j = n - 1; j > i; j--)
                        ans += char(a[j] + '0');

                    ans += char(c + '0');

                    for (int j = 1; j <= i - needLen; j++)
                        ans += '1';

                    vector<int> w;
                    for (int j = 1; j <= max(0, cnt[2]); j++)
                        w.push_back(5);
                    for (int j = 1; j <= max(0, cnt[3]); j++)
                        w.push_back(7);
                    while (cnt2 > 0 || cnt3 > 0) {
                        int y = 0;
                        for (int x = 1; x <= 9; x++) {
                            if (x == 5 || x == 7)
                                continue;
                            if (p[x][0] <= cnt2 && p[x][1] <= cnt3) {
                                if (dp[cnt2 - p[x][0]][cnt3 - p[x][1]] == dp[cnt2][cnt3] - 1) {
                                    y = x;
                                    break;
                                }
                            }
                        }
                        w.push_back(y);
                        cnt2 -= p[y][0];
                        cnt3 -= p[y][1];
                    }
                    sort(w.begin(), w.end());
                    for (int x : w)
                        ans += char(x + '0');

                    reverse(ans.begin(), ans.end());
                    while (ans.back() == '0')
                        ans.pop_back();

                    reverse(ans.begin(), ans.end());
                    
                    return ans;
                }
                    
                for (int j = 0; j < 4; j++)
                    cnt[j] += p[c][j];
            }
        }
        return ""-2"";
    }
};",1447757508
Aibar Kuanyshbay,kaikaikaikaikai,7,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numo) {
        vector<pair<int, int>> v;
        map<int, int> m;
        for (int i : nums) {
            v.push_back({i + k + 1, -1});
            v.push_back({i, 1});
            v.push_back({i - k, 0});
            m[i]++;
        }
        sort(v.begin(), v.end());
        int cur = 0, ans = 0;
        for (auto i : v) {
            int x = i.first;
            if (i.second == -1) {
                cur--; 
                ans = max(ans, min(cur, numo));
            } else if (i.second == 1) {
                ans = max(ans, m[x] + min(cur - m[x], numo));
            } else {
                cur++; 
                ans = max(ans, min(cur, numo));
            }
        }
        return ans;
    }
};",1447678530
Nguyễn Thảo,nguyenquocthao00,8,3622,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        n=len(nums)
        c=Counter(nums)
        keys=sorted(c.keys())
        l,r,res,s = 0,0,0,c[keys[0]]
        for i,v in enumerate(keys):
            while v-keys[l]>k:
                s-=c[keys[l]]
                l+=1
            while r+1<len(keys) and keys[r+1]-v<=k:
                s+=c[keys[r+1]]
                r+=1
            res=max(res, min(s, c[v] + numOperations))
        l,r,s = 0,0,0
        while r<len(keys):
            if keys[r]-keys[l]>2*k:
                s-=c[keys[l]]
                l+=1
            else:
                s+=c[keys[r]]
                r+=1
                res=max(res, min(s, numOperations))
        return res
            
            
        ",1447674098
Nguyễn Thảo,nguyenquocthao00,8,3626,python3,"class Solution:
    def smallestNumber(self, n: int, t: int) -> int:
        while True:
            x=1
            for v in str(n): x*=int(v)
            if x%t==0: return n
            n+=1
        ",1447653706
Nguyễn Thảo,nguyenquocthao00,8,3635,python3,"bases=[[], [], [2], [3], [2,2], [5], [2,3], [7], [2,2,2], [3,3]]
class Solution:
    def smallestNumber(self, num: str, t: int) -> str:
        prods = [0]*10
        for i in range(2, 10):
            while t%i==0:
                prods[i]+=1
                t=t//i
        if t!=1: return ""-1""
        # print(prods)
        n=len(num)
        last=len(num)
        for i,v in enumerate(num):
            if v=='0':
                last=i
                break
            for p in bases[int(v)]: prods[p]-=1
        # print(prods, last)
        def natleast(tup):
            # 2,3,5,7
            # if not any(tup): return True
            # if n==0: return False
            n=tup[2]+tup[3]
            n+=tup[1]//2
            tup[1]%=2
            if tup[1]==1:
                tup[0]-=1
                tup[1]-=1
                n+=1
            n+=(tup[0]+2)//3
            return n
        def gettup():
            return [max(prods[i],0) for i in (2,3,5,7)]
        res=list(num)
        def fill(start):
            # n2 = natleast(gettup())
            # while start<n and n-start>=n2:
            #     res[start]='1'
            #     start+=1
            n=len(res)
            for i in range(start, len(res)):
                for j in range(1, 10):
                    for p in bases[j]: prods[p]-=1
                    if natleast(gettup()) <= len(res)-i-1:
                        res[i] = str(j)
                        break
                    for p in bases[j]: prods[p]+=1
            return ''.join(res)
            
        if natleast(gettup()) <= n-last:
            return fill(last)
        for i in range(last-1,-1,-1):
            for p in bases[int(res[i])]: prods[p]+=1
            for j in range(int(res[i])+1, 10):
                for p in bases[j]: prods[p]-=1
                if natleast(gettup()) <= n-i-1: 
                    res[i] = str(j)
                    return fill(i+1)
                for p in bases[j]: prods[p]+=1
        res.append('')
        nx = natleast(gettup())
        while len(res)<nx: res.append('')
        return fill(0)
            
            
        

                
                
        
        
        ",1447738998
Nguyễn Thảo,nguyenquocthao00,8,3640,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        n=len(nums)
        c=Counter(nums)
        keys=sorted(c.keys())
        l,r,res,s = 0,0,0,c[keys[0]]
        for i,v in enumerate(keys):
            while v-keys[l]>k:
                s-=c[keys[l]]
                l+=1
            while r+1<len(keys) and keys[r+1]-v<=k:
                s+=c[keys[r+1]]
                r+=1
            res=max(res, min(s, c[v] + numOperations))
        l,r,s = 0,0,0
        while r<len(keys):
            if keys[r]-keys[l]>2*k:
                s-=c[keys[l]]
                l+=1
            else:
                s+=c[keys[r]]
                r+=1
                res=max(res, min(s, numOperations))
        return res        ",1447675277
Ying Liu,pein531,9,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int> &nums, int k, int numOperations) {
        sort(nums.begin(), nums.end());
        int n = nums.size();
        map<int, int> cnt;
        for(int i = 0; i < n; i++) {
            cnt[nums[i]]++;
        }
        int ans = 0;
        deque<int> dq2k;
        for(auto it : nums) {
            dq2k.push_back(it);
            while(dq2k.back() - dq2k.front() > 2 * k) {
                dq2k.pop_front();
            }
            ans = max(ans, min((int)dq2k.size(), numOperations));
        }
        int l = 0, r = 0;
        for(auto it : nums) {
            while(r < n && nums[r] - it <= k) {
                r++;
            }
            while(l < r && it - nums[l] > k) {
                l++;
            }
            ans = max(ans, min(r - l - cnt[it], numOperations) + cnt[it]);
        }
        return ans;
    }
};",1447772751
Ying Liu,pein531,9,3626,cpp,"class Solution {
public:
    int smallestNumber(int n, int t) {
        int ans;
        for(int num = n; ; num++) {
            int x = num, m = 1;
            while(x) {
                int d = x % 10;
                m = m * d % t;
                x /= 10;
            }
            if(m == 0) {
                ans = num;
                break;
            }
        }
        return ans;
    }
};",1447698232
Ying Liu,pein531,9,3635,cpp,"class Solution {
public:
    void change(vector<int> &v, long long x, long long y) {
        for(int i = 2; i <= 9; i++) {
            while(x % i == 0) {
                x /= i;
                v[i]++;
            }
            while(y % i == 0) {
                y /= i;
                v[i]--;
            }
        }
    }

    int maxcnt(vector<int> &v) {
        int ans = 1;
        if(v[3] >= 2)
            return 9;
        if(v[2] >= 3)
            return 8;
        if(v[7] >= 1)
            return 7;
        if(v[2] >= 1 && v[3] >= 1)
            return 6;
        if(v[5] >= 1)
            return 5;
        if(v[2] >= 2)
            return 4;
        if(v[3] >= 1)
            return 3;
        if(v[2] >= 1)
            return 2;
        return 1;
    }

    bool check(vector<int> &v) {
        for(int i = 2; i <= 9; i++) {
            if(v[i] > 0)
                return false;
        }
        return true;
    }

    string smallestNumber(string num, long long t) {
        vector<int> v(10, 0);
        for(int i = 2; i <= 9; i++) {
            while(t % i == 0) {
                t /= i;
                v[i]++;
            }
            if(v[i] == 0) {
                v[i] = -10000;
            }
        }
        if(t != 1) return ""-1"";
        bool flag = false;
        for(int i = 0; i < num.size(); i++) {
            if(num[i] == '0') {
                flag = true;
            }
            if(flag) num[i] = '1';
        }
        vector<int> ans = v;
        for(int i = 0; i < num.size(); i++) {
            int x = num[i] - '0';
            for(int j = 2; j <= 9; j++) {
                while(x % j == 0) {
                    x /= j;
                    ans[j]--;
                }
            }
        }
        if(check(ans)) {
            return num;
        }
        for(int i = num.size() - 1; i >= 0; i--) {
            int y = num[i] - '0';
            for(int x = y + 1; x <= 9; x++) {
                change(ans, y, x);
                num[i] = x + '0';
                for(int j = i + 1; j < num.size(); j++) {
                    int z = num[j] - '0';
                    change(ans, z, 1);
                    num[j] = '1';
                }
                for(int j = num.size() - 1; j > i; j--) {
                    int cnt = maxcnt(ans);
                    change(ans, 1, cnt);
                    num[j] = cnt + '0';
                }
                if(check(ans)) {
                    return num;
                }
                y = x;
            }
        }
        string str = """";
        ans = v;
        while(!check(ans)) {
            int cnt = maxcnt(ans);
            change(ans, 1, cnt);
            str += cnt + '0';
        }
        while(str.size() <= num.size()) {
            str += '1';
        }
        reverse(str.begin(), str.end());
        return str;
    }
};",1447729851
Ying Liu,pein531,9,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int> &nums, int k, int numOperations) {
        sort(nums.begin(), nums.end());
        int n = nums.size();
        map<int, int> cnt;
        for(int i = 0; i < n; i++) {
            cnt[nums[i]]++;
        }
        int ans = 0;
        deque<int> dq2k;
        for(auto it : nums) {
            dq2k.push_back(it);
            while(dq2k.back() - dq2k.front() > 2 * k) {
                dq2k.pop_front();
            }
            ans = max(ans, min((int)dq2k.size(), numOperations));
        }
        int l = 0, r = 0;
        for(auto it : nums) {
            while(r < n && nums[r] - it <= k) {
                r++;
            }
            while(l < r && it - nums[l] > k) {
                l++;
            }
            ans = max(ans, min(r - l - cnt[it], numOperations) + cnt[it]);
        }
        return ans;
    }
};",1447772355
trchen,trchen,12,3622,cpp,"class Solution {
 public:
  int maxFrequency(vector<int>& nums, int k, int numOperations) {
    sort(nums.begin(), nums.end());
    set<int> mids;
    unordered_map<int, int> cnts;
    for (auto c : nums) {
      cnts[c]++;
      mids.insert(c);
      mids.insert(c - k);
      mids.insert(c + k);
    }
    int n = nums.size();
    int left = 0;
    int right = 0;
    int ret = 0;
    for (auto mid : mids) {
      while (left < n && nums[left] < mid - k) {
        ++left;
      }
      while (right < n && nums[right] <= mid + k) {
        ++right;
      }
      // cout << mid << ' ' << left << ' ' << right << endl;
      ret = max(ret, min(right - left - cnts[mid], numOperations) + cnts[mid]);
    }
    return ret;
  }
};",1447698848
trchen,trchen,12,3626,cpp,"using ll = long long;

class Solution {
 public:
  ll Product(int a) {
    int ret = 1;
    while (a > 0) {
      ret *= (a % 10);
      a /= 10;
    }
    return ret;
  }

  int smallestNumber(int n, int t) {
    for (int i = n; i < numeric_limits<int>::max(); ++i) {
      if (Product(i) % t == 0) {
        return i;
      }
    }
    return 0;
  }
};",1447656544
trchen,trchen,12,3635,cpp,"using ll = long long;

class Solution {
 public:
  void ToNextValid(string& num) {
    int n = num.size();
    for (int i = 0; i < n; ++i) {
      if (num[i] == '0') {
        for (int j = i; j < n; ++j) {
          num[j] = '1';
        }
        return;
      }
    }
  }

  bool SmallestFree(int n, array<int, 4> cnt, string& ret) {
    ret.clear();
    if (ret.size() + cnt[1] / 2 > n) {
      return false;
    }
    ret += string(cnt[1] / 2, '9');
    cnt[1] %= 2;
    if (ret.size() + cnt[0] / 3 > n) {
      return false;
    }
    ret += string(cnt[0] / 3, '8');
    cnt[0] %= 3;
    if (ret.size() + cnt[3] > n) {
      return false;
    }
    ret += string(cnt[3], '7');
    if (cnt[0] > 0 && cnt[1] > 0) {
      ret += '6';
      cnt[0]--;
      cnt[1]--;
    }
    if (ret.size() + cnt[2] > n) {
      return false;
    }
    ret += string(cnt[2], '5');
    if (cnt[0] >= 2) {
      ret += '4';
      cnt[0] -= 2;
    }
    ret += string(cnt[1], '3');
    ret += string(cnt[0], '2');
    if (ret.size() > n) {
      return false;
    }
    ret += string(n - ret.size(), '1');
    reverse(ret.begin(), ret.end());
    return true;
  }

  array<int, 4> Count(ll n) {
    array<int, 4> ret{ 0, 0, 0, 0 };
    while (n % 2 == 0) {
      ret[0]++;
      n /= 2;
    }
    while (n % 3 == 0) {
      ret[1]++;
      n /= 3;
    }
    while (n % 5 == 0) {
      ret[2]++;
      n /= 5;
    }
    while (n % 7 == 0) {
      ret[3]++;
      n /= 7;
    }
    return ret;
  }

  array<int, 4> Add(const array<int, 4>& lhs, const array<int, 4>& rhs) {
    array<int, 4> ret;
    for (int i = 0; i < 4; ++i) {
      ret[i] = lhs[i] + rhs[i];
    }
    return ret;
  }

  array<int, 4> Remain(const array<int, 4>& total, const array<int, 4>& current) {
    array<int, 4> ret;
    for (int i = 0; i < 4; ++i) {
      ret[i] = max(0, total[i] - current[i]);
    }
    return ret;
  }

  string smallestNumber(string num, long long t) {
    array<int, 4> total{ 0, 0, 0, 0 };
    while (t % 2 == 0) {
      total[0]++;
      t /= 2;
    }
    while (t % 3 == 0) {
      total[1]++;
      t /= 3;
    }
    while (t % 5 == 0) {
      total[2]++;
      t /= 5;
    }
    while (t % 7 == 0) {
      total[3]++;
      t /= 7;
    }
    if (t > 1) {
      return ""-1"";
    }
    ToNextValid(num);
    int n = num.size();
    std::vector<array<int, 4>> cnts(n + 1);
    cnts[0] = { 0, 0, 0, 0 };
    for (int i = 1; i <= n; ++i) {
      cnts[i] = Add(cnts[i - 1], Count(num[i - 1] - '0'));
    }
    if (Remain(total, cnts.back()) == array<int, 4>{ 0, 0, 0, 0 }) {
      return num;
    }
    for (int i = n - 1; i >= 0; --i) {
      auto remain = Remain(total, cnts[i]);
      for (char c = num[i] + 1; c <= '9'; ++c) {
        auto true_remain = Remain(remain, Count(c - '0'));
        string rm;
        if (SmallestFree(n - 1 - i, true_remain, rm)) {
          return num.substr(0, i) + c + rm;
        }
      }
    }
    string ret;
    ret.clear();
    auto cnt = total;
    ret += string(cnt[1] / 2, '9');
    cnt[1] %= 2;
    ret += string(cnt[0] / 3, '8');
    cnt[0] %= 3;
    ret += string(cnt[3], '7');
    if (cnt[0] > 0 && cnt[1] > 0) {
      ret += '6';
      cnt[0]--;
      cnt[1]--;
    }
    ret += string(cnt[2], '5');
    if (cnt[0] >= 2) {
      ret += '4';
      cnt[0] -= 2;
    }
    ret += string(cnt[1], '3');
    ret += string(cnt[0], '2');
    if (ret.size() < num.size() + 1) {
      ret += string(num.size() + 1 - ret.size(), '1');
    }
    reverse(ret.begin(), ret.end());
    return ret;
  }
};",1447782555
trchen,trchen,12,3640,cpp,"class Solution {
 public:
  int maxFrequency(vector<int>& nums, int k, int numOperations) {
    sort(nums.begin(), nums.end());
    set<int> mids;
    unordered_map<int, int> cnts;
    for (auto c : nums) {
      cnts[c]++;
      mids.insert(c);
      mids.insert(c - k);
      mids.insert(c + k);
    }
    int n = nums.size();
    int left = 0;
    int right = 0;
    int ret = 0;
    for (auto mid : mids) {
      while (left < n && nums[left] < mid - k) {
        ++left;
      }
      while (right < n && nums[right] <= mid + k) {
        ++right;
      }
      // cout << mid << ' ' << left << ' ' << right << endl;
      ret = max(ret, min(right - left - cnts[mid], numOperations) + cnts[mid]);
    }
    return ret;
  }
};",1447698256
Mas,puktt,15,3622,cpp,"class Solution {
public:
    int solve(vector<int>& nums, int k, int numOperations) {
        int ans = 0;
        for (int i = 0, freq = 0; i < nums.size(); ++i) {
            if (i && nums[i] == nums[i - 1]) {
                ++freq;
            } else {
                freq = 1;
            }

            int j = upper_bound(nums.begin(), nums.end(), nums[i] + k) - nums.begin();
            int pp = lower_bound(nums.begin(), nums.end(), nums[i] - k) - nums.begin();
            int c = i - pp - freq + 1;
            ans = max(ans, freq + min(c + j - i - 1, numOperations));

            if (nums[i] + k < nums.back()) {
                int jj = upper_bound(nums.begin(), nums.end(), nums[i] + k + k) - nums.begin();
                ans = max(ans, min(freq + jj - i - 1, numOperations));
            }
        }
        return ans;
    }

    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        sort(nums.begin(), nums.end());
        int ans = solve(nums, k, numOperations);
        reverse(nums.begin(), nums.end());
        for (int i = 0; i < nums.size(); ++i) {
            nums[i] = 1e9 - nums[i];
        }

        return max(ans, solve(nums, k, numOperations));
    }
};",1447793303
Mas,puktt,15,3626,cpp,"class Solution {
public:
    int smallestNumber(int n, int t) {
        do {
            int x = n;
            int prod = 1;
            while (x) {
                prod *= x % 10;
                x /= 10;
            }
            if (prod % t == 0) {
                return n;
            }
        } while (++n);
        return -1;
    }
};",1447792880
Mas,puktt,15,3635,cpp,"class Solution {
public:
    int count[10];

    string sanityCheck(string &num, long long t) {
        // sanity check
        string ans = """";
        for (int i = 9; i >= 2; --i) {
            while (t % i == 0) {
                ans.push_back('0' + i);
                t /= i;
            }
        }
        reverse(ans.begin(), ans.end());
        if (t > 1) {
            return ""-1"";   
        }
        if (ans.size() >  num.size() || (ans.size() == num.size() && ans >= num)) {
            return ans;
        }
        return """";
    }

    void modif(char c, int diff) {
        if (c == '9') {
            count[3] += 2 * diff;
        } else if (c == '8') {
            count[2] += 3 * diff;
        } else if (c == '6') {
            count[2] += diff;      
            count[3] += diff;
        } else if (c == '4') {
            count[2] += 2 * diff;
        } else if (c > '1') {
            count[c - '0'] += diff;
        }
    }

    bool countGood() {
        for (int i = 2; i <= 9; ++i) {
            if (count[i] > 0) {
                return false;
            }
        }
        return true;
    }

    bool possibleToFill(int len) {
        int need =
            max(0, count[5]) + 
            max(0, count[7]) + 
            max(0, count[3] / 2) + 
            max(0, count[2] / 3);

        int tr = max(0, count[3] % 2);
        int tw = max(0, count[2] % 3);
        if (tr > 0) {
            ++need;
            --tw;
        }
        if (tw > 0) {
            ++need;
        }
        return need <= len;
    }

    void fill(string &num, int l) {
        for (int r = num.size() - 1; r > l; --r) {
            if (count[3] > 1) {
                count[3] -= 2;
                num[r] = '9';
            } else if (count[2] > 2) {
                count[2] -= 3;
                num[r] = '8';
            } else if (count[7] > 0) {
                --count[7];
                num[r] = '7';
            } else if (count[2] > 0 && count[3] > 0) {
                --count[2];
                --count[3];
                num[r] = '6';
            } else if (count[5] > 0) {
                --count[5];
                num[r] = '5';
            } else if (count[2] > 1) {
                count[2] -= 2;
                num[r] = '4';
            } else if (count[3] > 0) {
                --count[3];
                num[r] = '3';
            } else if (count[2] > 0) {
                --count[2];
                num[r] = '2';
            } else {
                num[r] = '1';
            }
        }
    }

    void OUT() {
        return;
        for (int i = 2; i <= 9; ++i) {
            cout << i << "" "" << count[i] << endl;
        }
        cout << endl;
    }

    string smallestNumber(string num, long long t) {
        string ret = sanityCheck(num, t);
        if (ret != """") {
            return ret;
        }

        memset(count, 0, sizeof(count));
        for (int i = 2; i <= 9; ++i) {
            while (t % i == 0) {
                ++count[i];
                t /= i;
            }
        }

        bool hasZero = false;
        for (int i = 0; i < num.size(); ++i) {
            if (num[i] == '0') {
                hasZero = true;
            }
            if (hasZero) {
                num[i] = '1';
            } else {
                modif(num[i], -1);
            }
        }

        OUT();

        if (countGood()) {
            return num;
        }

        for (int i = num.size() - 1; i >= 0; --i) {
            for (char c = num[i] + 1; c <= '9'; ++c) {
                modif(c - 1, 1);
                modif(c, -1);
                ++num[i];
                if (possibleToFill(num.size() - i - 1)) {
                    fill(num, i);
                    return num;
                }
            }
            modif('9', 1);
            OUT();
        }
        num = ""1"" + num;
        fill(num, 0);
        return num;
    }
};",1447798395
Mas,puktt,15,3640,cpp,"class Solution {
public:
    int solve(vector<int>& nums, int k, int numOperations) {
        int ans = 0;
        for (int i = 0, freq = 0; i < nums.size(); ++i) {
            if (i && nums[i] == nums[i - 1]) {
                ++freq;
            } else {
                freq = 1;
            }

            int j = upper_bound(nums.begin(), nums.end(), nums[i] + k) - nums.begin();
            int pp = lower_bound(nums.begin(), nums.end(), nums[i] - k) - nums.begin();
            int c = i - pp - freq + 1;
            ans = max(ans, freq + min(c + j - i - 1, numOperations));

            if (nums[i] + k < nums.back()) {
                int jj = upper_bound(nums.begin(), nums.end(), nums[i] + k + k) - nums.begin();
                ans = max(ans, min(freq + jj - i - 1, numOperations));
            }
        }
        return ans;
    }

    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        sort(nums.begin(), nums.end());
        int ans = solve(nums, k, numOperations);
        reverse(nums.begin(), nums.end());
        for (int i = 0; i < nums.size(); ++i) {
            nums[i] = 1e9 - nums[i];
        }

        return max(ans, solve(nums, k, numOperations));
    }
};",1447792386
aknov711,aknov711,17,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        int ans=0;
        map<int,int>cnt;
        map<int,int>mp;
        
        for(int i=0;i<nums.size();i++){
            cnt[nums[i]]++;
            mp[nums[i]]+=0;
            mp[nums[i]-k]++;
            mp[nums[i]+k+1]--;
        }
        
        int overlap=0;
        for(auto e: mp){
            overlap += e.second;
            
            int x = overlap;
            x-=cnt[e.first];
            x=min(x, numOperations);
            x+=cnt[e.first];
            ans=max(ans, x);
            
            //cout<<overlap<<"" ""<<e.first<<"" ""<<e.second<<"" ""<<x<<endl;
        }
        
        return ans;
    }
};",1447693420
aknov711,aknov711,17,3626,cpp,"class Solution {
    bool div(int n, int t){
        int res=1;
      while(n>0){
          res *= (n%10);
          n/=10;
      }  
        return res%t==0;
    }
public:
    int smallestNumber(int n, int t) {
        for(int i=n;;i++){
            if(div(i, t))
                return i;
        }
    }
};",1447654062
aknov711,aknov711,17,3635,cpp,"class Solution {
    bool check(string num, long long t){
        for(auto e: num){
            int val = e-'0';
            if(val==0)
                return false;
            t/=__gcd(t, 1LL*val);
        }
        return t==1;
    }
    
    bool comp(string a, string b){
        if(a.size()<b.size())
            return true;
        if(a.size()>b.size())
            return false;
        return a<b;
    }
public:
    string smallestNumber(string num, long long t) {
        vector<int>primes = {2,3,5,7};
        
       string ans = """";
        if(check(num, t))
            return num;
        int n = num.size();
        bool zero[n];
        memset(zero, false, sizeof(zero));
        for(int i=0;i<n;i++){
            if(num[i]=='0')
                zero[i]=true;
            if(i>0)
                zero[i]|=zero[i-1];
        }
        
        long long till[n];
        long long temp_t=t;
        for(int i=0;i<n;i++){
            int val = num[i]-'0';
          //  if(i==0){
                long long x = __gcd(temp_t, 1LL*val);
                temp_t /= x;
          //  }
            till[i]=temp_t;
        }
        for(int pos=n-1;pos>=0;pos--){
            if(pos>0 && zero[pos-1])
                continue;
            // pos is the first point of difference
            int curVal = num[pos]-'0';
            for(int numAtThisPos=curVal+1;numAtThisPos<10;numAtThisPos++){
                long long till_now =  (pos==0 ? t : till[pos-1]); 
                till_now /= __gcd(till_now, 1LL*numAtThisPos);
                int cnt[10];
                memset(cnt, 0, sizeof(cnt));
                for(auto e: primes){
                    while(till_now%e == 0)
                    {
                        till_now/=e;
                        cnt[e]++;
                    }
                }
                if(till_now>1)
                    continue;
                int countAhead = n - pos -1;
                cnt[8]+=(cnt[2]/3);
                cnt[2]%=3;
                if(cnt[2] == 2){
                    cnt[4]++;
                    cnt[2]=0;
                }
                
                cnt[9] += (cnt[3]/2);
                cnt[3]%=2;
                
                if(cnt[3]==1){
                    if(cnt[2]==1){
                        cnt[6]++;
                        cnt[3]=0;
                        cnt[2]=0;
                    } else if(cnt[4]==1){
                        cnt[6]++;
                        cnt[3]=0;
                        cnt[2]++;
                        cnt[4]--;
                    }
                }
                int minLen = 0;
                for(int j=0;j<10;j++)
                    minLen+=cnt[j];
                
                if(minLen > countAhead)
                    continue;
                string ans = num.substr(0, pos);
                ans += (char)('0' + numAtThisPos);
                int ones = countAhead - minLen;
                for(int j=0;j<ones;j++)
                    ans += ""1"";
                for(int j=2;j<=9;j++){
                    for(int k=0;k<cnt[j];k++){
                        ans += (char)('0' + j);
                    }
                }
                return ans;
            }
        }
        long long till_now = t;
        int cnt[10];
                memset(cnt, 0, sizeof(cnt));
                for(auto e: primes){
                    while(till_now%e == 0)
                    {
                        till_now/=e;
                        cnt[e]++;
                    }
                }
                if(till_now>1)
                    return ""-1"";
        
        
         cnt[8]+=(cnt[2]/3);
                cnt[2]%=3;
                if(cnt[2] == 2){
                    cnt[4]++;
                    cnt[2]=0;
                }
                
                cnt[9] += (cnt[3]/2);
                cnt[3]%=2;
        
        if(cnt[3]==1){
                    if(cnt[2]==1){
                        cnt[6]++;
                        cnt[3]=0;
                        cnt[2]=0;
                    } else if(cnt[4]==1){
                        cnt[6]++;
                        cnt[3]=0;
                        cnt[2]++;
                        cnt[4]--;
                    }
                }
                for(int j=2;j<=9;j++){
                    for(int k=0;k<cnt[j];k++){
                        ans += (char)('0' + j);
                    }
                }
        
        if(comp(ans, num)){
           int diff = num.size()-ans.size();
           string temp = """";
            for(int i=0;i<diff;i++)
                temp+=""1"";
            ans = temp + ans;
            if(comp(ans, num))
                ans = ""1"" + ans;
        }
                return ans;
        
        return ""-1"";
    }
};",1447778961
aknov711,aknov711,17,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
         int ans=0;
        map<int,int>cnt;
        map<int,int>mp;
        
        for(int i=0;i<nums.size();i++){
            cnt[nums[i]]++;
            mp[nums[i]]+=0;
            mp[nums[i]-k]++;
            mp[nums[i]+k+1]--;
        }
        
        int overlap=0;
        for(auto e: mp){
            overlap += e.second;
            
            int x = overlap;
            x-=cnt[e.first];
            x=min(x, numOperations);
            x+=cnt[e.first];
            ans=max(ans, x);
            
            //cout<<overlap<<"" ""<<e.first<<"" ""<<e.second<<"" ""<<x<<endl;
        }
        
        return ans;
    }
};",1447696681
Jingzhe Tang,skywalkert,18,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& A, int k, int m) {
        typedef long long LL;
        int ans = 0;
        map<int, int> ctr;
        for(int x: A)
            ++ctr[x];
        int sum = 0;
        for(auto it = ctr.begin(), jt = it, kt = it; it != ctr.end(); ++it) {
            for( ; jt != ctr.end() && jt -> first + k < it -> first; sum -= (jt++) -> second);
            for( ; kt != ctr.end() && kt -> first <= it -> first + k; sum += (kt++) -> second);
            int cur = it -> second;
            ans = max(ans, min(sum, m + cur));
        }
        sum = 0;
        for(auto it = ctr.begin(), jt = it, kt = it; it != ctr.end(); ++it) {
            LL M = it -> first + k, R = M + k;
            for( ; jt != ctr.end() && jt -> first < M; ++jt);
            for( ; kt != ctr.end() && kt -> first <= R; sum += (kt++) -> second);
            ans = max(ans, min(sum, m));
            sum -= it -> second;
        }
        return ans;
    }
};",1447688454
Jingzhe Tang,skywalkert,18,3626,cpp,"class Solution {
    bool chk(int n, int t) {
        int rem = 1;
        for(char ch: to_string(n))
            rem = rem * (ch - '0') % t;
        return !rem;
    }
public:
    int smallestNumber(int n, int t) {
        for( ; !chk(n, t); ++n);
        return n;
    }
};",1447663110
Jingzhe Tang,skywalkert,18,3635,cpp,"class Solution {
public:
    string smallestNumber(string num, long long t) {
        typedef long long LL;
        static const int pr[4] = {2, 3, 5, 7}, ex[4] = {3, 2, 1, 1};
        static const char *pat = ""8957"";
        int upp[4] = {};
        for(int i = 0; i < 4; ++i)
            for( ; t % pr[i] == 0; t /= pr[i], ++upp[i]);
        if(t > 1)
            return ""-1"";
        int n = num.size(), low[4] = {}, m = 0;
        for( ; m < n; ++m) {
            if(num[m] == '0') {
                ++m;
                break;
            }
            for(int j = 0, o = num[m] - '0'; j < 4 && o > 1; ++j)
                for( ; o % pr[j] == 0; o /= pr[j], ++low[j]);
        }
        static int dt[4];
        auto getCost = [&]() -> int {
            int ret = 0;
            for(int i = 0; i < 4; ++i) {
                dt[i] = max(upp[i] - low[i], 0);
                ret += dt[i] / ex[i];
                dt[i] %= ex[i];
            }
            if(dt[0] + dt[1] > 0)
                ret += dt[0] == 2 && dt[1] == 1 ? 2 : 1;
            return ret;
        };
        auto gen = [&](int L) {
            int M = L, R = num.size();
            for(int i = 0; i < 4; ++i) {
                dt[i] = max(upp[i] - low[i], 0);
                for( ; dt[i] >= ex[i]; num[M++] = pat[i], dt[i] -= ex[i]);
            }
            if(dt[0] == 2 && dt[1] == 1) {
                num[M++] = '2';
                num[M++] = '6';
            } else if(dt[0] + dt[1] > 0) {
                int prd = 1;
                for( ; dt[0] > 0; --dt[0], prd *= pr[0]);
                for( ; dt[1] > 0; --dt[1], prd *= pr[1]);
                num[M++] = '0' + prd;
            }
            for( ; M < R; num[M++] = '1');
            sort(num.begin() + L, num.begin() + R);
        };
        if(m == n && num[m - 1] != '0' && !getCost())
            return num;
        while(m > 0) {
            int sta = num[m - 1] - '0';
            for(int j = 0, o = sta; j < 4 && o > 1; ++j)
                for( ; o % pr[j] == 0; o /= pr[j], --low[j]);
            while(sta < 9) {
                ++sta;
                for(int j = 0, o = sta; j < 4 && o > 1; ++j)
                    for( ; o % pr[j] == 0; o /= pr[j], ++low[j]);
                if(getCost() <= n - m) {
                    num[m - 1] = '0' + sta;
                    gen(m);
                    return num;
                }
                for(int j = 0, o = sta; j < 4 && o > 1; ++j)
                    for( ; o % pr[j] == 0; o /= pr[j], --low[j]);
            }
            --m;
        }
        num.resize(max(getCost(), n + 1));
        gen(0);
        return num;
        // 2 3 5 7
        // 3000 0200 0010 0001 | 1100
        // 30 02 11
        // 00 | 01 10 11 20 | 21
    }
};",1447771760
Jingzhe Tang,skywalkert,18,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& A, int k, int m) {
        typedef long long LL;
        int ans = 0;
        map<int, int> ctr;
        for(int x: A)
            ++ctr[x];
        int sum = 0;
        for(auto it = ctr.begin(), jt = it, kt = it; it != ctr.end(); ++it) {
            for( ; jt != ctr.end() && jt -> first + k < it -> first; sum -= (jt++) -> second);
            for( ; kt != ctr.end() && kt -> first <= it -> first + k; sum += (kt++) -> second);
            int cur = it -> second;
            ans = max(ans, min(sum, m + cur));
        }
        sum = 0;
        for(auto it = ctr.begin(), jt = it, kt = it; it != ctr.end(); ++it) {
            LL M = it -> first + k, R = M + k;
            for( ; jt != ctr.end() && jt -> first < M; ++jt);
            for( ; kt != ctr.end() && kt -> first <= R; sum += (kt++) -> second);
            ans = max(ans, min(sum, m));
            sum -= it -> second;
        }
        return ans;
    }
};",1447687850
Ethan,ethanrao,21,3622,cpp,"class Solution {
public:
    int n;
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        n = nums.size();
        int l = 0, r = 0;
        std::sort(nums.begin(), nums.end());
        int ans = 0;
        for(; l < n; ++l){
            while(r < n - 1 && nums[r + 1] - nums[l] <= 2 * k) ++r;
            ans = std::max(ans, std::min(r - l + 1, numOperations));
        }
        for(l = 0, r = 0; l < n; l = r + 1){
            r = l;
            while(r < n - 1 && nums[r + 1] == nums[r]) ++r;
            int t1, t2, L, R;
            L = 0, R = l;
            while(L < R){
                int mid = L + R >> 1;
                if(nums[l] - nums[mid] <= k) R = mid;
                else L = mid + 1;
            }
            t1 = l - L;
            L = r, R = n - 1;
            while(L < R){
                int mid = L + R + 1 >> 1;
                if(nums[mid] - nums[r] <= k) L = mid;
                else R = mid - 1;
            }
            t2 = L - r;
            ans = std::max(ans, r - l + 1 + std::min(numOperations, t1 + t2));
        }
        return ans;
    }
};",1447672725
Ethan,ethanrao,21,3626,cpp,"class Solution {
public:    
    int smallestNumber(int n, int t) {
        int k = 1000000000;
        for (int i = n; i<=k ; i++) {
            int ans = 1, tt = i;
            while (tt > 0) {
                ans *= (tt % 10);
                tt /= 10;
            }
            if (ans % t == 0) return i;
        }
        return 1;
    }
};
",1447674170
Ethan,ethanrao,21,3635,cpp,"class Solution {
public:
    int d[4], e[4], f[4], ans[10], g[4];
    string smallestNumber(string num, long long t) {
        long long tt = t;
        while(tt % 2 == 0) ++d[0], tt /= 2;
        while(tt % 3 == 0) ++d[1], tt /= 3;
        while(tt % 5 == 0) ++d[2], tt /= 5;
        while(tt % 7 == 0) ++d[3], tt /= 7;
        if(tt > 1){
            std::string res;
            res += '-', res += '1';
            return res;
        }
        int n = num.size();
        bool flag = true;
        for(int i = 0; i < n; ++i){
            if(num[i] == '2') ++e[0];
            else if(num[i] == '3') ++e[1];
            else if(num[i] == '4') e[0] += 2;
            else if(num[i] == '5') ++e[2];
            else if(num[i] == '6') ++e[0], ++e[1];
            else if(num[i] == '7') ++e[3];
            else if(num[i] == '8') e[0] += 3;
            else if(num[i] == '9') e[1] += 2;
            if(num[i] == '0') flag = false;
        }
        if(d[0] <= e[0] && d[1] <= e[1] && d[2] <= e[2] && d[3] <= e[3] && flag == true) return num;
        e[0] = e[1] = e[2] = e[3] = 0;
        int ok1 = -1, ok2 = -1;
        for(int i = 0; i < n; ++i){
            for(int j = 9; j >= num[i] - '0' + 1; --j){
                for(int k = 0; k <= 3; ++k) f[k] = e[k];
                if(j == 2) ++f[0];
                else if(j == 3) ++f[1];
                else if(j == 4) f[0] += 2;
                else if(j == 5) ++f[2];
                else if(j == 6) ++f[0], ++f[1];
                else if(j == 7) ++f[3];
                else if(j == 8) f[0] += 3;
                else if(j == 9) f[1] += 2;
                int sy = 0;
                if(d[0] >= f[0]) sy += (d[0] - f[0] + 2) / 3;
                if(d[1] >= f[1]) sy += (d[1] - f[1] + 1) / 2;
                if(d[2] >= f[2]) sy += d[2] - f[2];
                if(d[3] >= f[3]) sy += d[3] - f[3];
                if(d[0] >= f[0] && d[1] >= f[1] && (d[0] - f[0]) % 3 == 1 && (d[1] - f[1]) % 2 == 1) --sy;
                //if(i == 1 && j == 4) printf(""%d %d %d %d\n"", f[0], f[1], f[2], f[3]);
                if(sy <= n - 1 - i){
                    ok1 = i;
                    ok2 = j;
                    g[0] = f[0];
                    g[1] = f[1];
                    g[2] = f[2];
                    g[3] = f[3];
                }
            }
            if(num[i] == '2') ++e[0];
            else if(num[i] == '3') ++e[1];
            else if(num[i] == '4') e[0] += 2;
            else if(num[i] == '5') ++e[2];
            else if(num[i] == '6') ++e[0], ++e[1];
            else if(num[i] == '7') ++e[3];
            else if(num[i] == '8') e[0] += 3;
            else if(num[i] == '9') e[1] += 2;
            if(num[i] == '0') break;
        }
        if(ok1 == -1 && ok2 == -1){
            ans[8] = d[0] / 3;
            if(d[0] % 3 == 1) ++ans[2];
            if(d[0] % 3 == 2) ++ans[4];
            ans[9] = d[1] / 2;
            if(d[1] % 2 == 1) ++ans[3];
            ans[5] = d[2];
            ans[7] = d[3];
            if(d[0] % 3 == 1 && d[1] % 2 == 1){
                --ans[2], --ans[3];
                ++ans[6];
            }
            if(d[0] % 3 == 2 && d[1] % 2 == 1){
                --ans[4], --ans[3];
                ++ans[2], ++ans[6];
            }
            std::string res;
            for(int i = 0; i <= 9; ++i){
                for(int j = 1; j <= ans[i]; ++j){
                    res += (i + '0');
                }
            }
            std::string II;
            for(int i = 1; i <= (int)num.size() - (int)res.size() + 1; ++i) II += '1';
            res = II + res;
            return res;
        }
        std::string res;
        for(int i = 0; i < ok1; ++i) res += num[i];
        res += ('0' + ok2);
        for(int i = 0; i <= 3; ++i) d[i] = std::max(0, d[i] - g[i]);
        ans[8] = d[0] / 3;
        if(d[0] % 3 == 1) ++ans[2];
        if(d[0] % 3 == 2) ++ans[4];
        ans[9] = d[1] / 2;
        if(d[1] % 2 == 1) ++ans[3];
        ans[5] = d[2];
        ans[7] = d[3];
        if(d[0] % 3 == 1 && d[1] % 2 == 1){
            --ans[2], --ans[3];
            ++ans[6];
        }
        if(d[0] % 3 == 2 && d[1] % 2 == 1){
            --ans[4], --ans[3];
            ++ans[2], ++ans[6];
        }
        ans[1] = n - ok1 - 1 - ans[2] - ans[3] - ans[4] - ans[5] - ans[6] - ans[7] - ans[8] - ans[9];
        for(int i = 0; i <= 9; ++i){
            for(int j = 1; j <= ans[i]; ++j){
                res += (i + '0');
            }
        }
        return res;
    } 
};",1447784906
Ethan,ethanrao,21,3640,cpp,"class Solution {
public:
    int n;
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        n = nums.size();
        int l = 0, r = 0;
        std::sort(nums.begin(), nums.end());
        int ans = 0;
        for(; l < n; ++l){
            while(r < n - 1 && nums[r + 1] - nums[l] <= 2 * k) ++r;
            ans = std::max(ans, std::min(r - l + 1, numOperations));
        }
        for(l = 0, r = 0; l < n; l = r + 1){
            r = l;
            while(r < n - 1 && nums[r + 1] == nums[r]) ++r;
            int t1, t2, L, R;
            L = 0, R = l;
            while(L < R){
                int mid = L + R >> 1;
                if(nums[l] - nums[mid] <= k) R = mid;
                else L = mid + 1;
            }
            t1 = l - L;
            L = r, R = n - 1;
            while(L < R){
                int mid = L + R + 1 >> 1;
                if(nums[mid] - nums[r] <= k) L = mid;
                else R = mid - 1;
            }
            t2 = L - r;
            ans = std::max(ans, r - l + 1 + std::min(numOperations, t1 + t2));
        }
        return ans;
    }
};",1447672247
Vladislav,timetoai,22,3622,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, ops: int) -> int:
        nums.sort()
        ret = 1
        for num in set(nums):
            i1 = bisect_left(nums, num - k)
            i2 = bisect_right(nums, num + k)
            cnt = bisect_left(nums, num + 1) - bisect_left(nums, num)
            ret = max(ret, min(i2 - i1, ops + cnt))
        r = 0
        for l in range(len(nums)):
            while r + 1 < len(nums) and r + 1 - l + 1 <= ops and nums[r + 1] - nums[l] <= 2 * k:
                r += 1
            ret = max(ret, r - l + 1)
        return ret
        ",1447671837
Vladislav,timetoai,22,3626,python3,"class Solution:
    def smallestNumber(self, n: int, t: int) -> int:
        while True:
            x = n
            prod = 1
            while x > 0:
                x, rem = divmod(x, 10)
                prod *= rem
            if prod % t == 0:
                return n
            n += 1",1447658023
Vladislav,timetoai,22,3635,python3,"def form(req):
    req = {key: max(0, val) for key, val in req.items()}
    nine, three = divmod(req[3], 2)
    eight, two = divmod(req[2], 3)
    if three > 0 and two > 0:
        six = 1
        three -= 1
        two -= 1
    else:
        six = 0
    five = req[5]
    seven = req[7]
    if two == 2:
        four = 1
        two -= 2
    else:
        four = 0
    min_set = ""2"" * two + ""3"" * three + ""4"" * four + ""5"" * five + \
        ""6"" * six + ""7"" * seven + ""8"" * eight + ""9"" * nine
    return min_set


class Solution:
    def smallestNumber(self, num: str, t: int) -> str:
        order = [[], [], [2], [3], [2, 2], [5], [2, 3], [7], [2,2,2], [3,3]]
        req = {2: 0, 3: 0, 5: 0, 7: 0}
        for i in req:
            while t % i == 0:
                t //= i
                req[i] += 1
        if t != 1:
            return ""-1""
        print(""base req"", req)

        min_set = form(req)
        if len(min_set) > len(num):
            return min_set
        
        ret = list(map(int, num))
        has_zero = False
        for i in range(len(ret)):
            if has_zero:
                ret[i] = 1
            elif ret[i] == 0:
                has_zero = True
                ret[i] = 1
        for num in ret:
            for mul in order[num]:
                req[mul] -= 1
        if any(v > 0 for v in req.values()):
            for i in range(len(ret) - 1, - 1, - 1):
                for mul in order[ret[i]]:
                    req[mul] += 1
                # print(req)
                for ni in range(ret[i] + 1, 10):
                    for mul in order[ni]:
                        req[mul] -= 1
                    cur_min = form(req)
                    # print(ret[:i], ni, cur_min, req)
                    if len(cur_min) <= len(ret) - i - 1:
                        rem = len(ret) - i - 1
                        return ''.join(map(str, ret[:i])) + str(ni) + ""1"" * (rem - len(cur_min)) + cur_min
                    for mul in order[ni]:
                        req[mul] += 1
            return ""1"" * (len(ret) + 1 - len(min_set)) + min_set
                    
        return ''.join(map(str, ret))
        ",1447769105
Vladislav,timetoai,22,3640,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, ops: int) -> int:
        nums.sort()
        ret = 1
        for num in set(nums):
            i1 = bisect_left(nums, num - k)
            i2 = bisect_right(nums, num + k)
            cnt = bisect_left(nums, num + 1) - bisect_left(nums, num)
            ret = max(ret, min(i2 - i1, ops + cnt))
        r = 0
        for l in range(len(nums)):
            while r + 1 < len(nums) and r + 1 - l + 1 <= ops and nums[r + 1] - nums[l] <= 2 * k:
                r += 1
            ret = max(ret, r - l + 1)
        return ret
        ",1447672684
Nutty Professor,varkatkl,24,3622,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        nums.sort()
        MAX = nums[-1]
        N = len(nums)
        counts = [0] * (MAX + 10)
        for num in nums:
            counts[num] += 1

        def check(n):
            if n > N:
                return False
            i = 0
            heap = []
            r2 = 0
            while i + n <= N:
                # [i, i + n - 1]
                L, R = nums[i], nums[i + n - 1]
                i += 1
                vl, vr = R - k, L + k
                while r2 <= MAX and r2 <= L + k:
                    heapq.heappush(heap, (-counts[r2], r2))
                    r2 += 1
                while heap and heap[0][1] < R - k:
                    heapq.heappop(heap)
                if R - L <= 2 * k:
                    eq = 0 if not heap else -heap[0][0]
                    if n - eq <= numOperations:
                        return True
            return False

        lo, hi = 1, N + 1
        while hi - lo > 1:
            mid = (lo + hi) // 2
            if check(mid):
                lo = mid
            else:
                hi = mid
        return lo
",1447740173
Nutty Professor,varkatkl,24,3626,python3,"class Solution:
    def smallestNumber(self, n: int, t: int) -> int:
        def digit_product(n):
            ret = 1
            while n > 0:
                ret *= n % 10
                n //= 10
            return ret

        while digit_product(n) % t != 0:
            n += 1
        return n
",1447653883
Nutty Professor,varkatkl,24,3635,python3,"d_counts = [
            [0, 0, 0, 0],
            [0, 0, 0, 0],
            [1, 0, 0, 0],
            [0, 1, 0, 0],
            [2, 0, 0, 0],
            [0, 0, 1, 0],
            [1, 1, 0, 0],
            [0, 0, 0, 1],
            [3, 0, 0, 0],
            [0, 2, 0, 0]
        ]
PRIMES = [2, 3, 5, 7]
def min_digits(counts):
        c2, c3, c5, c7 = counts
        ret = 0
        digits = [0] * 10
        ret += c3 // 2
        digits[9] += c3 // 2
        c3 %= 2
        ret += c2 // 3
        digits[8] += c2 // 3
        c2 %= 3
        ret += c7
        digits[7] += c7
        c7 = 0
        if c2 > 0 and c3 > 0:
            c2 -= 1
            c3 -= 1
            ret += 1
            digits[6] += 1
        ret += c5
        digits[5] += c5
        c5 = 0
        if c2 >= 2:
            ret += 1
            c2 -= 2
            digits[4] += 1
        if c3 > 0:
            ret += 1
            digits[3] += 1
        if c2 > 0:
            ret += 1
            digits[2] += 1
        return ret, digits


class Solution:
    def smallestNumber(self, num: str, t: int) -> str:
        
        t_counts = [0, 0, 0, 0]
        tt = t
        for i, p in enumerate(PRIMES):
            while tt % p == 0:
                t_counts[i] += 1
                tt = tt // p

        if tt != 1:
            return ""-1""

        
        N = len(num)
        nonzero = [True] * (N + 1)
        for i in range(N):
            nonzero[i + 1] = nonzero[i] and (num[i] != '0')
        pp = 1
        for i in range(N):
            pp = pp * int(num[i]) % t
        if nonzero[N] and pp == 0:
            return num

        # result strictly g.t num
        
        pref = [[0] * 4 for _ in range(N + 1)]
        for i in range(N):
            d = int(num[i])
            for j in range(4):
                pref[i + 1][j] = pref[i][j] + d_counts[d][j]
            
        for i in range(N - 1, -1, -1):
            if not nonzero[i]:
                continue
            d = int(num[i])
            counts = pref[i][:]
            for d2 in range(d + 1, 10):
                for j in range(4):
                    counts[j] += d_counts[d2][j]

                need_counts = [0] * 4
                for j in range(4):
                    need_counts[j] = max(0, t_counts[j] - counts[j])

                for j in range(4):
                    counts[j] -= d_counts[d2][j]
                dc, digs = min_digits(need_counts)
                if dc + i + 1 <= N:
                    suffix = []
                    for ii in range(2, 10):
                        suffix += [str(ii)] * digs[ii]
                    extra = N - i - 1 - dc
                    suffix = ''.join('1' for _ in range(extra)) + ''.join(suffix)
                    return num[:i] + str(d2) + suffix

        return self.smallestNumber('1' + ('0' * N), t)",1447800957
Nutty Professor,varkatkl,24,3640,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        nums.sort()
        N = len(nums)
        counts = sorted(collections.Counter(nums).items())
        NC = len(counts)
        def check(n):
            if n > N:
                return False
            i = 0
            heap = []
            r2 = 0
            while i + n <= N:
                # [i, i + n - 1]
                L, R = nums[i], nums[i + n - 1]
                i += 1
                vl, vr = R - k, L + k
                while r2 < NC and counts[r2][0] <= L + k:
                    heapq.heappush(heap, (-counts[r2][1], counts[r2][0]))
                    r2 += 1
                while heap and heap[0][1] < R - k:
                    heapq.heappop(heap)
                if R - L <= 2 * k:
                    eq = 0 if not heap else -heap[0][0]
                    if n - eq <= numOperations:
                        return True
            return False

        lo, hi = 1, N + 1
        while hi - lo > 1:
            mid = (lo + hi) // 2
            if check(mid):
                lo = mid
            else:
                hi = mid
        return lo
",1447745539
Dylan Smith,DylanSmith,25,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int K, int numOperations) {
        sort(nums.begin(), nums.end());
        map<int, int> freq;
        for (int i : nums) freq[i]++;
        vector<pair<int, int>> pairs;
        for (auto &p : freq) {
            pairs.push_back(p);
        }
        int j = 0, k = 0;
        vector<int> pre((int)pairs.size());
        for (int i = 0; i < (int)pairs.size(); i++) {
            pre[i] = pairs[i].second;
            if (i > 0) pre[i] += pre[i - 1];
        }
        int res = 0;
        for (int i = 0; i < (int)pairs.size(); i++) {
            k = max(k, i);
            while (k + 1 < pairs.size() && pairs[k + 1].first - pairs[i].first <= K) k++;
            while (pairs[i].first - pairs[j].first > K) j++;
            int sum = pre[k] - (j == 0 ? 0 : pre[j - 1]);
            res = max(res, pairs[i].second + min(numOperations, sum - pairs[i].second));
        }
        j = 0;
        for (int i = 0; i < (int)nums.size(); i++) {
            while (nums[i] - nums[j] > K * 2) j++;
            res = max(res, min(numOperations, i - j + 1));
        }
        return res;
    }
};",1447673070
Dylan Smith,DylanSmith,25,3626,cpp,"class Solution {
public:
    bool check(int n, int k) {
        int sum = 1;
        while (n) {
            sum *= n % 10;
            n /= 10;
        }
        return sum % k == 0;
    }
    int smallestNumber(int n, int t) {
        int cur = n;
        while (!check(cur, t)) {
            cur++;
        }
        return cur;
    }
};",1447654224
Dylan Smith,DylanSmith,25,3635,cpp,"typedef long long ll;

#define pb push_back
#define sz(x) (int)x.size()
#define all(x) begin(x),end(x)
#define lb(x,y) lower_bound(all(x),y)-begin(x)
class Solution {
public:
    bool check2(int two, int three, int five, int seven, vector<int> &freq) {
        two = max(0, two - freq[2] - freq[4] * 2 - freq[6] - freq[8] * 3);
        three = max(0, three - freq[3] - freq[6] - freq[9] * 2);
        five = max(0, five - freq[5]);
        seven = max(0, seven - freq[7]);
        return !two && !three && !five && !seven;
    }
    string check(int two, int three, int five, int seven, vector<int> &freq) {
        two = max(0, two - freq[2] - freq[4] * 2 - freq[6] - freq[8] * 3);
        three = max(0, three - freq[3] - freq[6] - freq[9] * 2);
        five = max(0, five - freq[5]);
        seven = max(0, seven - freq[7]);
        string res = """";
        while (two > 1) {
            res += ""8"";
            two = max(0, two - 3);
        }
        while (three > 1) {
            res += ""9"";
            three = max(0, three - 2);
        }
        if (two || three) {
            res += ""6"";
        }
        while (five) {
            res += ""5"";
            five--;
        }
        while (seven) {
            res += ""7"";
            seven--;
        }
        sort(all(res));
        return res;
    }
    string smallestNumber(string num, long long t) {
        for (int i = 0; i < sz(num); i++) {
            if (num[i] == '0') {
                for (int j = i; j < sz(num); j++) {
                    num[j] = '1';
                }
                break;
            }
        }
        int two = 0, three = 0, five = 0, seven = 0;
        while (t % 2 == 0) {
            two++;
            t /= 2;
        }
        while (t % 3 == 0) {
            three++;
            t /= 3;
        }
        while (t % 5 == 0) {
            five++;
            t /= 5;
        }
        while (t % 7 == 0) {
            seven++;
            t /= 7;
        }
        if (t > 1) return ""-1"";
        vector<int> freq(10, 0);
        for (char c : num) freq[c - '0']++;
        if (check2(two, three, five, seven, freq)) return num;
        for (int i = sz(num) - 1; i >= 0; i--) {
            freq[num[i] - '0']--;
            if (num[i] < '9') {
                for (char c = num[i] + 1; c <= '9'; c++) {
                    freq[c - '0']++;
                    string s = check(two, three, five, seven, freq);
                    if (sz(s) < sz(num) - i) {
                        // solution found w/ this length
                        num[i] = c;
                        for (int j = i + 1; j < sz(num); j++) {
                            
                            for (char c2 = '1'; c2 <= '9'; c2++) {
                                freq[c2 - '0']++;
                                string s2 = check(two, three, five, seven, freq);
                                if (sz(s2) < sz(num) - j) {
                                    num[j] = c2;
                                    break;
                                }
                                freq[c2 - '0']--;
                            }
                        }
                        return num;
                    }
                    freq[c - '0']--;
                }
            }
        }
        string res = check(two, three, five, seven, freq);
        while (sz(res) <= sz(num)) res += ""1"";
        for (int i = 0; i < sz(res); i++) {
            for (char c  = '1'; c <= '9'; c++) {
                freq[c - '0']++;
                string s = check(two, three, five, seven, freq);
                if (sz(s) < sz(res) - i) {
                    res[i] = c;
                    break;
                }
                freq[c - '0']--;
            }
        }
        return res;
    }
};",1447794627
Dylan Smith,DylanSmith,25,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int K, int numOperations) {
        sort(nums.begin(), nums.end());
        map<int, int> freq;
        for (int i : nums) freq[i]++;
        vector<pair<int, int>> pairs;
        for (auto &p : freq) {
            pairs.push_back(p);
        }
        int j = 0, k = 0;
        vector<int> pre((int)pairs.size());
        for (int i = 0; i < (int)pairs.size(); i++) {
            pre[i] = pairs[i].second;
            if (i > 0) pre[i] += pre[i - 1];
        }
        int res = 0;
        for (int i = 0; i < (int)pairs.size(); i++) {
            k = max(k, i);
            while (k + 1 < pairs.size() && pairs[k + 1].first - pairs[i].first <= K) k++;
            while (pairs[i].first - pairs[j].first > K) j++;
            int sum = pre[k] - (j == 0 ? 0 : pre[j - 1]);
            res = max(res, pairs[i].second + min(numOperations, sum - pairs[i].second));
        }
        j = 0;
        for (int i = 0; i < (int)nums.size(); i++) {
            while (nums[i] - nums[j] > K * 2) j++;
            res = max(res, min(numOperations, i - j + 1));
        }
        return res;
    }
};",1447673916
Haunted_Cpp,Xx_DarDoAzuL_xX,26,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        int mx = 0;
        const int MX = *max_element(nums.begin(), nums.end());
        vector<int> pre(MX + 10);
        map<int, int> cnt;
        for (auto& value : nums) {
            int lo = max(0, value - k);
            int hi = min(MX + 3, value + k);
            ++pre[lo];
            --pre[hi + 1];
            ++cnt[value];
        }

        int sum = 0;
        for (int i = 0; i < MX + 5; i++) {
            sum += pre[i];

            int add = sum - cnt[i];
            add = min(add, numOperations);
            mx = max(mx, cnt[i] + add);
        }

        return mx;
    }
};",1447664869
Haunted_Cpp,Xx_DarDoAzuL_xX,26,3626,cpp,"class Solution {
public:
    int smallestNumber(int n, int t) {
        auto prod = [&](int m) {
          long long pt = 1;
            while (m) {
                pt *= m % 10;
                m /= 10;
            }
            return pt;
        };
        for (int i = n; ; i++) {
            if ((prod(i) % t) == 0) {
                return i;
            }
        }
        return -1;
    }
};",1447653056
Haunted_Cpp,Xx_DarDoAzuL_xX,26,3635,cpp,"class Solution {
public:
    const static int N = 48;
    int dp[N][N][N][N];
    string smallestNumber(string num, long long t) {

        vector<int> cnt(10);
        auto factor_integer = [&](long long n, int fill) {
            if (fill) {
                for (auto& to : cnt) to = 0;
            }
            vector<int> factor;
            for (int i = 2; i <= min(9LL, n); i++) {
              while ((n % i) == 0) {
                n /= i;
                factor.emplace_back(i);
                if (fill) ++cnt[i];
              }
            }
            if (n >= 2) {
                if (fill && n < 10) ++cnt[n];
                factor.emplace_back(n);
            }
            return factor;
        };
        auto check = factor_integer(t, 1);
        if (check.back() > 9) {
            return ""-1"";
        }
        vector< vector<int> > f(10);
        for (int i = 2; i <= 9; i++) f[i] = factor_integer(i, 0);

        for (int i = 0; i <= cnt[2]; i++) {
            for (int j = 0; j <= cnt[3]; j++) {
                for (int a = 0; a <= cnt[5]; a++) {
                    for (int b = 0; b <= cnt[7]; b++) {
                        dp[i][j][a][b] = -1;
                    }
                }
            }
        }
     
        const int INF = 1e9;
        
        auto best_way = [&](auto&& self, int two, int three, int five, int seven) {
            if (two + three + five + seven == 0) return 0;

            assert(two >= 0);
            assert(three >= 0);
            assert(five >= 0);
            assert(seven >= 0);
            int& res = dp[two][three][five][seven];
            if (~res) return res;
            
            res = INF;

            // put a five
            if (five)  res = min(res, 1 + self(self, two, three, max(0, five - 1), seven));
            if (seven) res = min(res, 1 + self(self, two, three, five, max(0, seven - 1)));
            if (two) {
                // 2
                res = min(res, 1 + self(self, max(0, two - 1), three, five, seven));
                // 4
                res = min(res, 1 + self(self, max(0, two - 2), three, five, seven));
                // 6
                res = min(res, 1 + self(self, max(0, two - 1), max(0, three - 1), five, seven));
                // 8
                res = min(res, 1 + self(self, max(0, two - 3), three, five, seven));
            }
            if (three) {
                // 3
                res = min(res, 1 + self(self, two, max(0, three - 1), five, seven));
                // 9
                res = min(res, 1 + self(self, two, max(0, three - 2), five, seven));
            }
            
            return res;
        };

        string calc;
        auto backtrack = [&](auto&& self, int two, int three, int five, int seven) {
            if (two + three + five + seven == 0) return;
         

            int opt = best_way(best_way, two, three, five, seven);

            vector<int> nxt(10);
            
            for (int i = 2; i <= 9; i++) {

                nxt[2] = two;
                nxt[3] = three;
                nxt[5] = five;
                nxt[7] = seven;

                for (auto& ff : f[i]) {
                    --nxt[ff];
                    nxt[ff] = max(0, nxt[ff]);
                }

                assert(nxt[2] >= 0);
                assert(nxt[3] >= 0);
                assert(nxt[5] >= 0);
                assert(nxt[7] >= 0);
                
                if (opt == 1 + best_way(best_way, nxt[2], nxt[3], nxt[5], nxt[7])) {
                    calc += (char) ('0' + i);
                    self(self, nxt[2], nxt[3], nxt[5], nxt[7]);
                    return;
                }
            }
            assert(false);
        };

        int has_zero = 0;
        // with same size
        for (auto& c : num) {
            if (c == '0') ++has_zero;
            int dig = c - '0';
            for (auto& ff : f[dig]) {
                --cnt[ff];
            }
        }
        if (has_zero == 0 && *max_element(cnt.begin(), cnt.end()) <= 0) {
            return num;
        }

        int empty_spot = 0;

        vector<string> get_best;
        string ans1 = ""-1"";
        
        for (int i = (int) num.size() - 1; i >= 0; i--) {

            // add digit again
            int dig = num[i] - '0';
            for (auto& ff : f[dig]) ++cnt[ff];
            has_zero -= (dig == 0);

            if (!has_zero) {

                // try a bigger one
                for (int j = dig + 1; j <= 9; j++) {
                    for (auto& ff : f[j]) --cnt[ff];
                    int opt = best_way(best_way, max(0, cnt[2]), max(0, cnt[3]), max(0, cnt[5]), max(0, cnt[7]));
                    
                    
                    if (opt <= empty_spot) {
    
                        int d = empty_spot - opt;
             //           cout << i << ' ' << j << '\n';
                        ans1 = """";
                        ans1 = num.substr(0, i);
                        ans1 += (char) ('0' + j);
    
                        while (d--) ans1 += '1';
                        
                        calc = """";
                        backtrack(backtrack, max(0, cnt[2]), max(0, cnt[3]), max(0, cnt[5]), max(0, cnt[7]));
                        ans1 += calc;
                        get_best.emplace_back(ans1);
                       // for (auto& ff : f[j]) ++cnt[ff];
                        goto done;
                    }
                    for (auto& ff : f[j]) ++cnt[ff];
                }
            }
            ++empty_spot;
        }
        done:;
        // with greater size
        
        {
            check = factor_integer(t, 1);
            calc = """";
            backtrack(backtrack, cnt[2], cnt[3], cnt[5], cnt[7]);
            
            string best_way = calc;
            
            int diff = max(0, (int) num.size() - (int) best_way.size() + 1) ;
   
            if (diff) best_way = string(diff, '1') + best_way;
            // try this one
            get_best.emplace_back(best_way);
        }
        
        sort(get_best.begin(), get_best.end(), [&](const string& a, const string& b) {
           return a.size() < b.size() || (a.size() < b.size() && a < b); 
        });

      
        
        return get_best[0];
    }
};",1447795618
Haunted_Cpp,Xx_DarDoAzuL_xX,26,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        int mx = 0;
        const int MX = *max_element(nums.begin(), nums.end());
        //vector<int> pre(MX + 10);
        map<int, int> cnt;
        map<int, vector< int > > events;
        
        for (auto& value : nums) {
            int lo = max(0, value - k);
            int hi = min(MX + 3, value + k);

            events[lo].emplace_back(+1);
            //++pre[lo];
            //--pre[hi + 1];
            events[hi + 1].emplace_back(-1);
            ++cnt[value];
            events[value].emplace_back(+0);
        }

        int sum = 0;
        for (auto& [value, event] : events) {
            for (auto& to : event) {
                sum += to;
            }
            int add = sum - cnt[ value ];
            add = min(add, numOperations);
            mx = max(mx, cnt[ value ] + add);
        }

        return mx;
    }
};",1447672459
Abhishek Choudhary,theabbie,32,3622,python3,"import bisect

class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        nums.sort()
        ctr = Counter(nums)
        s = set()
        for el in nums:
            s.add(el)
            s.add(el - k)
            s.add(el + k)
        res = 0
        for el in s:
            res = max(res, ctr[el] + min(bisect.bisect_right(nums, el + k) - bisect.bisect_left(nums, el - k) - ctr[el], numOperations))
        return res",1447664319
Abhishek Choudhary,theabbie,32,3626,python3,"class Solution:
    def smallestNumber(self, n: int, t: int) -> int:
        def prod(x):
            p = 1
            while x:
                p *= (x % 10)
                x //= 10
            return p
        while prod(n) % t != 0:
            n += 1
        return n",1447666533
Abhishek Choudhary,theabbie,32,3640,python3,"import bisect

class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        nums.sort()
        ctr = Counter(nums)
        s = set()
        for el in nums:
            s.add(el)
            s.add(el - k)
            s.add(el + k)
        res = 0
        for el in s:
            res = max(res, ctr[el] + min(bisect.bisect_right(nums, el + k) - bisect.bisect_left(nums, el - k) - ctr[el], numOperations))
        return res",1447663547
Ryan,ryanwong0127,33,3622,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        counts = defaultdict(int)
        events = defaultdict(int)
        for num in nums:
            counts[num] += 1
            start = num - k
            end = num + k + 1 
            events[start] += 1
            events[end] -= 1

        points = set(events.keys())
        points.update(counts.keys())
        sorted_points = sorted(points)

        current_count_adjustable = 0
        res = 0
        
        for x in sorted_points:
            if x in events:
                current_count_adjustable += events[x]
            adjusted_count = current_count_adjustable - counts.get(x, 0)
            adjusted_count = max(0, adjusted_count)
            total_count = counts.get(x, 0) + min(adjusted_count, numOperations)
            res = max(res, total_count)

        return res",1447667133
Ryan,ryanwong0127,33,3626,python3,"class Solution:
    def smallestNumber(self, n: int, t: int) -> int:
        def product_of_digits(x):
            p = 1
            while x > 0:
                p *= (x % 10)
                x = x// 10
                if p == 0:
                    break
            return p

        curr = n
        while True:
            prod = product_of_digits(curr)
            if t == 0:
                if prod == 0:
                    return curr
            else:
                if prod % t == 0:
                    return curr
            curr += 1",1447653902
Ryan,ryanwong0127,33,3640,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        counts = defaultdict(int)
        events = defaultdict(int)
        for num in nums:
            counts[num] += 1
            start = num - k
            end = num + k + 1 
            events[start] += 1
            events[end] -= 1

        points = set(events.keys())
        points.update(counts.keys())
        sorted_points = sorted(points)

        current_count_adjustable = 0
        res = 0
        
        for x in sorted_points:
            if x in events:
                current_count_adjustable += events[x]

            adjusted_count = current_count_adjustable - counts.get(x, 0)
            adjusted_count = max(0, adjusted_count)

            total_count = counts.get(x, 0) + min(adjusted_count, numOperations)
            res = max(res, total_count)

        return res

    



",1447666281
SR3mix,SR3mix,34,3622,cpp,"typedef long long ll;
class Solution {
public:
    int maxFrequency(vector<int>& nums_i, int kk, int ops) {
        vector<ll>nums; for (auto i : nums_i) nums.push_back(i);
        ll k = kk;
        sort(nums.begin(), nums.end());
        map<int, int> m;
        for (auto i : nums) m[i]++;
        int ans = 0;
        for (int i = 0; i < nums.size(); i++) {
            ll x = nums[i];
            int pure = 0; if (m.find(x) != m.end()) pure = m[x];
            ll lo = x - k;
            ll hi = x + k;
            int base = upper_bound(nums.begin(), nums.end(), hi) - lower_bound(nums.begin(), nums.end(), lo) - pure;
            int get = pure + min(base, ops);
            //cout << ""v1: "" << i << "","" << get << endl;
            ans = max(ans, get);
        }
        
        for (int i = 0; i < nums.size(); i++) {
            ll x = nums[i] - k;
            int pure = 0; if (m.find(x) != m.end()) pure = m[x];
            ll lo = x - k;
            ll hi = x + k;
            int base = upper_bound(nums.begin(), nums.end(), hi) - lower_bound(nums.begin(), nums.end(), lo) - pure;
            int get = pure + min(base, ops);
            //cout << ""v2: "" << i << "","" << get << endl;
            ans = max(ans, get);
        }
        
        for (int i = 0; i < nums.size(); i++) {
            ll x = nums[i] + k;
            int pure = 0; if (m.find(x) != m.end()) pure = m[x];
            ll lo = x - k;
            ll hi = x + k;
            int base = upper_bound(nums.begin(), nums.end(), hi) - lower_bound(nums.begin(), nums.end(), lo) - pure;
            int get = pure + min(base, ops);
            //cout << ""v3: "" << i << "","" << get << endl;
            ans = max(ans, get);
        }
        
        return ans;
    }
};",1447666797
SR3mix,SR3mix,34,3626,cpp,"class Solution {
public:
    int smallestNumber(int n, int t) {
        for (int i = n; i < 1e6; i++) {
            string s = to_string(i);
            int prod = 1;
            for (auto c : s) prod *= (c - '0');
            if (prod%t == 0) return i;
        }
        return -1;
    }
};",1447668953
SR3mix,SR3mix,34,3640,cpp,"typedef long long ll;
class Solution {
public:
    int maxFrequency(vector<int>& nums_i, int kk, int ops) {
        vector<ll>nums; for (auto i : nums_i) nums.push_back(i);
        ll k = kk;
        sort(nums.begin(), nums.end());
        map<int, int> m;
        for (auto i : nums) m[i]++;
        int ans = 0;
        for (int i = 0; i < nums.size(); i++) {
            ll x = nums[i];
            int pure = 0; if (m.find(x) != m.end()) pure = m[x];
            ll lo = x - k;
            ll hi = x + k;
            int base = upper_bound(nums.begin(), nums.end(), hi) - lower_bound(nums.begin(), nums.end(), lo) - pure;
            int get = pure + min(base, ops);
            //cout << ""v1: "" << i << "","" << get << endl;
            ans = max(ans, get);
        }
        
        for (int i = 0; i < nums.size(); i++) {
            ll x = nums[i] - k;
            int pure = 0; if (m.find(x) != m.end()) pure = m[x];
            ll lo = x - k;
            ll hi = x + k;
            int base = upper_bound(nums.begin(), nums.end(), hi) - lower_bound(nums.begin(), nums.end(), lo) - pure;
            int get = pure + min(base, ops);
            //cout << ""v2: "" << i << "","" << get << endl;
            ans = max(ans, get);
        }
        
        for (int i = 0; i < nums.size(); i++) {
            ll x = nums[i] + k;
            int pure = 0; if (m.find(x) != m.end()) pure = m[x];
            ll lo = x - k;
            ll hi = x + k;
            int base = upper_bound(nums.begin(), nums.end(), hi) - lower_bound(nums.begin(), nums.end(), lo) - pure;
            int get = pure + min(base, ops);
            //cout << ""v3: "" << i << "","" << get << endl;
            ans = max(ans, get);
        }
        
        return ans;
    }
};",1447666062
Dipanshu Pandey,callmepandey,35,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        
        map < int , int > frq;
        map < int , int > ax;
        for(int &i : nums) {
            frq[i - k]++;
            frq[i + k + 1]--;
            frq[i] += 0;
            ax[i]++;
        }
        
        int mx = 0 , sum = 0;
        for(auto &a : frq) {
            sum += a.second;
            int already = sum - ax[a.first];
            int canMax = min(numOperations , already);
            mx = max(mx , canMax + ax[a.first]);
            
        }
        return mx;
    }
};",1447670446
Dipanshu Pandey,callmepandey,35,3626,cpp,"class Solution {
public:
    int smallestNumber(int n, int t) {
        while(1) {
            int product = 1;
            int x = n;
            while(x) {
                product *= x%10;
                x /= 10;
            }
            if(product % t == 0) return n;
            ++n;
        }
        return n;
    }
};",1447653647
Dipanshu Pandey,callmepandey,35,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        
        map < int , int > frq;
        map < int , int > ax;
        for(int &i : nums) {
            frq[i - k]++;
            frq[i + k + 1]--;
            frq[i] += 0;
            ax[i]++;
        }
        
        int mx = 0 , sum = 0;
        for(auto &a : frq) {
            sum += a.second;
            int already = sum - ax[a.first];
            int canMax = min(numOperations , already);
            mx = max(mx , canMax + ax[a.first]);
            
        }
        return mx;
    }
};",1447670907
Arnav Goyal,Pikachu0123,38,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        int n = nums.size();
        const int N = 1e5 + 10;
        vector<int> range(N, 0);
        for(int &x : nums){
            range[max(0, x - k)] += 1;
            range[min(N-1, x + k + 1)] -= 1;
        }
        vector<int> freq(N, 0);
        for(int &x : nums)
            freq[x] += 1;
        int ans = 0;
        for(int i=1; i<N; i++)
            range[i] += range[i-1];
        for(int i=0; i<N; i++){
            ans = max(ans, min(numOperations, range[i] - freq[i]) + freq[i]);
        }

        return ans;
    }
};",1447668836
Arnav Goyal,Pikachu0123,38,3626,cpp,"class Solution {
public:
    int smallestNumber(int n, int t) {
        for(int i=n; i<=1000; i++){
            int pro = 1;
            int temp = i;
            while(temp){
                pro = pro * (temp % 10);
                temp /= 10;
            }
            if (pro % t == 0) return i;
        }
        return 100;
    }
};",1447653512
Arnav Goyal,Pikachu0123,38,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        int n = nums.size();
        vector<int> comp = {-k, k};
        for(int &x : nums){
            comp.push_back(x);
            comp.push_back(x-k);
            comp.push_back(x+k+1);
        }
        sort(comp.begin(), comp.end());

        map<int,int> mp;
        int cnt = 0;
        for(int &x : comp){
            if (mp.find(x) == mp.end())
                mp[x] = cnt++;
        }

        cnt += 10;
        
        vector<int> range(cnt, 0);
        for(int &x : nums){
            range[max(0, mp[x-k])] += 1;
            range[min(cnt-1, mp[x+k+1])] -= 1;
        }
        vector<int> freq(cnt, 0);
        for(int &x : nums)
            freq[mp[x]] += 1;
        int ans = 0;
        for(int i=1; i<cnt; i++)
            range[i] += range[i-1];
        for(int i=0; i<cnt; i++){
            ans = max(ans, min(numOperations, range[i] - freq[i]) + freq[i]);
        }

        return ans;
    }
};",1447676329
Aman Ghosh,Homie_Lander7,39,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        map<int,int>mp,freq;
        int n=nums.size();
        for(auto i:nums){
            freq[i]++;
            mp[i-k]++;
            mp[i+k+1]--;
            mp[i];
        }
        int ans=0,sum=0;
        for(auto i:mp){
            
            sum+=i.second;
            int cur=sum;
            cur-=freq[i.first];
            cur=min(cur,numOperations);
            ans=max(ans,cur+freq[i.first]);
        }
        return ans;
    }
};",1447676411
Aman Ghosh,Homie_Lander7,39,3626,cpp,"class Solution {
public:
    int smallestNumber(int n, int t) {
        for(int i = n; ; i++) {
            int num = i;
            int prod = 1;
            while(num) {
                prod *= num % 10;
                num /= 10;
                prod%=t;
            }
            if(prod % t == 0) return i;
        }
        
    }
};",1447676783
Aman Ghosh,Homie_Lander7,39,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        map<int,int>mp,freq;
        int n=nums.size();
        for(auto i:nums){
            freq[i]++;
            mp[i-k]++;
            mp[i+k+1]--;
            mp[i];
        }
        int ans=0,sum=0;
        for(auto i:mp){
            
            sum+=i.second;
            int cur=sum;
            cur-=freq[i.first];
            cur=min(cur,numOperations);
            ans=max(ans,cur+freq[i.first]);
        }
        return ans;
    }
};",1447676135
Md Abedin,MdAbedin,40,3622,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        counts = Counter(nums)
        c = 0
        ans = 0

        for x in range(-k,max(nums)+k+1):
            c += counts[x+k]
            ans = max(ans,min(numOperations,c-counts[x])+counts[x])
            c -= counts[x-k]

        return ans",1447665822
Md Abedin,MdAbedin,40,3626,python3,"class Solution:
    def smallestNumber(self, n: int, t: int) -> int:
        x = n

        while True:
            if prod(map(int,str(x)))%t == 0: return x
            x += 1",1447653016
Md Abedin,MdAbedin,40,3640,python3,"from sortedcontainers import SortedList

class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        sl = SortedList(nums)
        counts = Counter(nums)
        ans = 0

        for num in nums:
            for x in [num-k,num,num+k]:
                ans = max(ans,min(numOperations,sl.bisect_right(x+k)-sl.bisect_left(x-k)-counts[x])+counts[x])

        return ans",1447676985
Wibo,Wibo,43,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        vector<pair<int, int>> evs;
        for (int x : nums) {
            evs.emplace_back(x-k, 0);
            evs.emplace_back(x, 1);
            evs.emplace_back(x+k+1, 2);
        }

        sort(evs.begin(), evs.end());
        int ans = 0, cnt = 0;
        for (int l=0; l<(int)evs.size(); ) {
            int r = l;
            while (r < (int)evs.size() && evs[l].first == evs[r].first) r++;

            int sub = 0;
            for (int i=l; i<r; i++) {
                if (evs[i].second == 0) cnt++;
                else if (evs[i].second == 1) sub++;
                else cnt--;
            }

            ans = max(ans, min(cnt - sub, numOperations) + sub);
            l = r;
        }

        return ans;
    }
};",1447670223
Wibo,Wibo,43,3626,cpp,"class Solution {
public:
    int smallestNumber(int n, int t) {
        while (1) {
            int p = 1;
            for (int i=n; i; i/=10) p *= i%10;
            if (p == 0 || p % t == 0) return n;
            n++;
        }
    }
};",1447662637
Wibo,Wibo,43,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        vector<pair<int, int>> evs;
        for (int x : nums) {
            evs.emplace_back(x-k, 0);
            evs.emplace_back(x, 1);
            evs.emplace_back(x+k+1, 2);
        }

        sort(evs.begin(), evs.end());
        int ans = 0, cnt = 0;
        for (int l=0; l<(int)evs.size(); ) {
            int r = l;
            while (r < (int)evs.size() && evs[l].first == evs[r].first) r++;

            int sub = 0;
            for (int i=l; i<r; i++) {
                if (evs[i].second == 0) cnt++;
                else if (evs[i].second == 1) sub++;
                else cnt--;
            }

            ans = max(ans, min(cnt - sub, numOperations) + sub);
            l = r;
        }

        return ans;
    }
};",1447670932
czjnbb,czjnbb,44,3622,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        
        nums.sort()
        d = Counter(nums)
        
        keys = sorted(d.keys())
        vals = [d[k] for k in keys]
        
        res = max(d.values())
        
        pres = [0]
        for v in vals:
            pres.append(pres[-1] + v)
        
        for i,n in enumerate(keys):
            
            pl = bisect.bisect_left(keys, n - k)
            pr = bisect.bisect_right(keys, n + k)
            
            tot = min(pres[pr] - pres[pl] - d[n], numOperations)
            res = max(res, tot + d[n])
            
            lpt = n - k
            minus = d[lpt] if lpt in d else 0
            pl = bisect.bisect_left(keys, lpt - k)
            pr = bisect.bisect_right(keys, lpt + k)
            tot = min(pres[pr] - pres[pl] - minus, numOperations)
            res = max(res, tot + minus)
            
            rpt = n + k
            minus = d[rpt] if rpt in d else 0
            pl = bisect.bisect_left(keys, rpt - k)
            pr = bisect.bisect_right(keys, rpt + k)
            tot = min(pres[pr] - pres[pl] - minus, numOperations)
            res = max(res, tot + minus)
            
        return res
            
            
            
            
            ",1447680421
czjnbb,czjnbb,44,3626,python3,"class Solution:
    def smallestNumber(self, n: int, t: int) -> int:
        
        while True:
            s = [int(i) for i in str(n)]
            p = 1
            for c in s:
                p *= c
            if p % t == 0:
                return n
            n += 1",1447653577
czjnbb,czjnbb,44,3640,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        
        nums.sort()
        d = Counter(nums)
        
        keys = sorted(d.keys())
        vals = [d[k] for k in keys]
        
        res = max(d.values())
        
        pres = [0]
        for v in vals:
            pres.append(pres[-1] + v)
        
        for i,n in enumerate(keys):
            
            pl = bisect.bisect_left(keys, n - k)
            pr = bisect.bisect_right(keys, n + k)
            
            tot = min(pres[pr] - pres[pl] - d[n], numOperations)
            res = max(res, tot + d[n])
            
            lpt = n - k
            minus = d[lpt] if lpt in d else 0
            pl = bisect.bisect_left(keys, lpt - k)
            pr = bisect.bisect_right(keys, lpt + k)
            tot = min(pres[pr] - pres[pl] - minus, numOperations)
            res = max(res, tot + minus)
            
            rpt = n + k
            minus = d[rpt] if rpt in d else 0
            pl = bisect.bisect_left(keys, rpt - k)
            pr = bisect.bisect_right(keys, rpt + k)
            tot = min(pres[pr] - pres[pl] - minus, numOperations)
            res = max(res, tot + minus)
            
        return res",1447681004
Waster,waster,46,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        map<int, int> mp;
        map<int, int> mp2;
        int res =0, cur = 0;
        for(int i: nums){
            mp[i]++;
            mp2[i-k]++;
            mp2[i] = mp2[i];
            mp2[i+k+1]--;
        }
        for(auto &[k, v] : mp2){
            cur += v;
            //cout << k << "" "" << cur << endl;
            res = max(res, mp[k] + min(cur - mp[k], numOperations));
        }
        return res;
    }
};",1447679323
Waster,waster,46,3626,cpp,"class Solution {
public:
    bool check(int i, int j){
        int p = 1;
        while(i > 0){
            p *= i%10;
            i /= 10;
        }
        if(p == 0)return 1;
        return p%j == 0;
    }
    int smallestNumber(int n, int t) {
        for(int i = n; i < 200; i++){
            if(check(i, t))
                return i;
        }
        return 0;
    }
};",1447657280
Waster,waster,46,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        map<int, int> mp;
        map<int, int> mp2;
        int res =0, cur = 0;
        for(int i: nums){
            mp[i]++;
            mp2[i-k]++;
            mp2[i] = mp2[i];
            mp2[i+k+1]--;
        }
        for(auto &[k, v] : mp2){
            cur += v;
            res = max(res, mp[k] + min(cur - mp[k], numOperations));
        }
        return res;
    }
};",1447681794
Bharath Raj S,rath772k,47,3622,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        freq = defaultdict(int)
        freq2 = defaultdict(int)
        for num in nums:
            freq[num+k+1] -= 1
            freq[num-k] += 1
            freq[num] += 0
            freq2[num] += 1

        keys = list(freq.keys())
        keys.sort()

        for i in range(1, len(keys)):
            freq[keys[i]] += freq[keys[i-1]]

        ans = 0

        for k_, v in freq.items():
            op_contribution = min(numOperations, v - freq2[k_])
            ans = max(ans, op_contribution + freq2[k_])

        return ans",1447681784
Bharath Raj S,rath772k,47,3626,python3,"class Solution:
    def smallestNumber(self, n: int, t: int) -> int:
        def prod(num):
            ans = 1
            while num:
                ans *= num % 10
                num //= 10
            return ans

        while True:
            if prod(n) % t == 0:
                return n
            n += 1",1447656418
Bharath Raj S,rath772k,47,3640,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        freq = defaultdict(int)
        freq2 = defaultdict(int)
        for num in nums:
            freq[num+k+1] -= 1
            freq[num-k] += 1
            freq[num] += 0
            freq2[num] += 1

        keys = list(freq.keys())
        keys.sort()

        for i in range(1, len(keys)):
            freq[keys[i]] += freq[keys[i-1]]

        ans = 0

        for k_, v in freq.items():
            op_contribution = min(numOperations, v - freq2[k_])
            ans = max(ans, op_contribution + freq2[k_])

        return ans",1447682576
John Rigby,vanshkunwarji41,48,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        map<int,int> m;
        if(k==0){
            int r=0;
            for(int i:nums){
                m[i]++;
                r=max(r,m[i]);
            }
            return r;
        }
        set<int> s;
        for(int i:nums){
            s.insert(i-k);
            s.insert(i);
            s.insert(i+1);
            s.insert(i+k+1);
        }
        int t=0;
        for(auto i:s){
            m[i]=t++;
        }
        int a[t],b[t];
        memset(a,0,sizeof(a));
        memset(b,0,sizeof(b));
        for(int i:nums){
            a[m[i]]++;
            b[m[i-k]]++;
            b[m[i]]--;
            b[m[i+1]]++;
            b[m[i+k+1]]--;
        }
        int r=0;
        int x=0,y=0;
        for(int i=0;i<t;i++){
            x=a[i];
            y+=b[i];
            r=max(r,x+min(y,numOperations));
        }
        return r;
    }
};",1447682755
John Rigby,vanshkunwarji41,48,3626,cpp,"class Solution {
public:
    bool f(int n, int t){
        int p=1;
        while(n){
            p*=n%10;
            n/=10;
        }
        return (p%t)==0;
    }
    int smallestNumber(int n, int t) {
        while(1){
            if(f(n,t)){
                return n;
            }
            n++;
        }

        return 0;
    }
};",1447654262
John Rigby,vanshkunwarji41,48,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        map<int,int> m;
        if(k==0){
            int r=0;
            for(int i:nums){
                m[i]++;
                r=max(r,m[i]);
            }
            return r;
        }
        set<int> s;
        for(int i:nums){
            s.insert(i-k);
            s.insert(i);
            s.insert(i+1);
            s.insert(i+k+1);
        }
        int t=0;
        for(auto i:s){
            m[i]=t++;
        }
        int a[t],b[t];
        memset(a,0,sizeof(a));
        memset(b,0,sizeof(b));
        for(int i:nums){
            a[m[i]]++;
            b[m[i-k]]++;
            b[m[i]]--;
            b[m[i+1]]++;
            b[m[i+k+1]]--;
        }
        int r=0;
        int x=0,y=0;
        for(int i=0;i<t;i++){
            x=a[i];
            y+=b[i];
            r=max(r,x+min(y,numOperations));
        }
        return r;
    }
};",1447682354
Sergei Sobol,sobols,49,3622,cpp,"enum EAction {
    BEGIN,
    END,
    NUM,
};

class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        vector<pair<int, int>> v;
        for (int x : nums) {
            v.emplace_back(x - k, BEGIN);
            v.emplace_back(x, NUM);
            v.emplace_back(x + k, END);
        }
        sort(v.begin(), v.end());
        int ans = 0;
        int cur = 0;
        
        for (size_t i = 0; i < v.size(); ) {
            size_t j = i;
            int nums = 0;
            int begins = 0;
            int ends = 0;
            while (j < v.size() && v[i].first == v[j].first) {
                if (v[j].second == BEGIN) {
                    begins++;
                } else if (v[j].second == END) {
                    ends++;
                } else if (v[j].second == NUM) {
                    nums++;
                }
                ++j;
            }
            
            cur += begins;
            int ops = cur - nums;
            ans = max(ans, nums + min(ops, numOperations));
            cur -= ends;
            i = j;
        }
        return ans;
    }
};",1447683038
Sergei Sobol,sobols,49,3626,cpp,"class Solution {
public:
    long long DigP(int x) {
        long long ret = 1;
        do {
            ret *= (x % 10);
            x /= 10;
        } while (x != 0);
        return ret;
    }
    
    int smallestNumber(int n, int t) {
        while (true) {
            if (DigP(n) % t == 0) {
                return n;
            }
            ++n;
        }
    }
};",1447655501
Sergei Sobol,sobols,49,3640,cpp,"enum EAction {
    BEGIN,
    END,
    NUM,
};

class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        vector<pair<int, int>> v;
        for (int x : nums) {
            v.emplace_back(x - k, BEGIN);
            v.emplace_back(x, NUM);
            v.emplace_back(x + k, END);
        }
        sort(v.begin(), v.end());
        int ans = 0;
        int cur = 0;
        
        for (size_t i = 0; i < v.size(); ) {
            size_t j = i;
            int nums = 0;
            int begins = 0;
            int ends = 0;
            while (j < v.size() && v[i].first == v[j].first) {
                if (v[j].second == BEGIN) {
                    begins++;
                } else if (v[j].second == END) {
                    ends++;
                } else if (v[j].second == NUM) {
                    nums++;
                }
                ++j;
            }
            
            cur += begins;
            int ops = cur - nums;
            ans = max(ans, nums + min(ops, numOperations));
            cur -= ends;
            i = j;
        }
        return ans;
    }
};",1447682311
Srihari,6JXJlfduFP,50,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int o) {
        int n = nums.size();
        unordered_map<int,int> freq;
        map<long long,long long> mp;
        for (auto& num : nums) {
            mp[num - k]++;
            mp[num]--;
            freq[num]++;
            if (k){
                mp[num + 1]++;
                mp[num + k + 1]--;
            }
        }
        long long res = 0;
        long long prev = 0;
        for(auto&[k, v] : mp) {
            prev += v;
            v = prev;
            long long cur = min(o * 1LL, v) + freq[k];
            res = max(res, cur);
        }
        return int(res);
    }
};",1447683182
Srihari,6JXJlfduFP,50,3626,cpp,"class Solution {
public:
    int smallestNumber(int n, int t) {
        auto f = [&](int a)->int{
            string tmp = to_string(a);
            int res = 1;
            for(auto& c : tmp) {
                res *= (c - '0');
            }
            return res;
        };
        while(true) {
            if (f(n) % t == 0) return n;
            n++;
        }
    }
};",1447654015
Srihari,6JXJlfduFP,50,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int o) {
        int n = nums.size();
        unordered_map<int,int> freq;
        map<long long,long long> mp;
        for (auto& num : nums) {
            mp[num - k]++;
            mp[num]--;
            freq[num]++;
            if (k){
                mp[num + 1]++;
                mp[num + k + 1]--;
            }
        }
        long long res = 0;
        long long prev = 0;
        for(auto&[k, v] : mp) {
            prev += v;
            v = prev;
            long long cur = min(o * 1LL, v) + freq[k];
            res = max(res, cur);
        }
        return int(res);
    }
};",1447684386
Anonymous,never_seen,51,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        map<int, int> mp, freq;
        for (int i = 0; i < nums.size(); i++){
            freq[nums[i]]++;
            mp[nums[i] - k]++;
            mp[nums[i] + k + 1]--;
        }
        int cnt = 0, ans = 0;
        for (auto &e : mp){
            cnt += e.second;
            ans = max(ans, cnt);
        }
        ans = min(ans, numOperations);
        sort(nums.begin(), nums.end());
        auto count = [&](int l, int r){
            return upper_bound(nums.begin(), nums.end(), r) - lower_bound(nums.begin(), nums.end(), l);
        };
        for (auto &e : freq){
            int p = count(e.first - k, e.first + k) - e.second;
            ans = max(ans, e.second + min(p, numOperations));
        }
        return ans;
    }
};",1447684591
Anonymous,never_seen,51,3626,cpp,"class Solution {
public:
    int smallestNumber(int n, int t) {
        for (int i = n; ; i++){
            int prod = 1, j = i;
            while(j){
                prod *= j % 10;
                j /= 10;
            }
            if (prod % t == 0) return i;
        }
    }
};",1447662713
Anonymous,never_seen,51,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        map<int, int> mp, freq;
        for (int i = 0; i < nums.size(); i++){
            freq[nums[i]]++;
            mp[nums[i] - k]++;
            mp[nums[i] + k + 1]--;
        }
        int cnt = 0, ans = 0;
        for (auto &e : mp){
            cnt += e.second;
            ans = max(ans, cnt);
        }
        ans = min(ans, numOperations);
        sort(nums.begin(), nums.end());
        auto count = [&](int l, int r){
            return upper_bound(nums.begin(), nums.end(), r) - lower_bound(nums.begin(), nums.end(), l);
        };
        for (auto &e : freq){
            int p = count(e.first - k, e.first + k) - e.second;
            ans = max(ans, e.second + min(p, numOperations));
        }
        return ans;
    }
};",1447684925
Larry,LarryNY,53,3622,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        N = len(nums)
        f = collections.Counter(nums)

        def go(x):
            lindex = bisect.bisect_left(nums, x - k)
            rindex = bisect.bisect_right(nums, x + k)
            
            same = f[x]
            changes = min((rindex - lindex) - f[x], numOperations)
            return same + changes
        
        nums.sort()
        best = 0
        for i in range(nums[0], nums[-1] + 1):
            best = max(best, go(i))
        return best",1447681628
Larry,LarryNY,53,3626,python3,"class Solution:
    def smallestNumber(self, n: int, t: int) -> int:
        def good(x):
            p = 1
            for c in str(x):
                p *= int(c)
            return p % t == 0
        
        while not good(n):
            n += 1
        return n",1447653343
Larry,LarryNY,53,3640,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        N = len(nums)
        f = collections.Counter(nums)

        def go(x):
            lindex = bisect.bisect_left(nums, x - k)
            rindex = bisect.bisect_right(nums, x + k)
            
            same = f[x]
            changes = min((rindex - lindex) - f[x], numOperations)
            return same + changes
        
        events = []
        for x in nums:
            events.append(x)
            events.append(x - k)
            events.append(x + k)
            
        nums.sort()
        
        best = 0
        for i in sorted(set(events)):
            best = max(best, go(i))
        return best",1447686629
HinaSnow,HanaYukii,54,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& num, int k, int op) {
        map<int,int>mp;
        map<int,int>cnt;
        for (auto &i : num) {
            mp[i-k]++;
            mp[i+k+1]--;
            mp[i];
            cnt[i]++;
        }
        int cur = 0;
        int ans = 1;
        for (auto &i : mp) {
            cur += i.second;
            ans = max(ans, min(cur, cnt[i.first] + op));
        }
        return ans;
    }
};",1447685964
HinaSnow,HanaYukii,54,3626,cpp,"class Solution {
public:
    int smallestNumber(int n, int tt) {
        while (1) {
            int sum = 1;
            int t = n;
            while (t) {
                sum *= t % 10;
                t /= 10;
            }
            if (sum % tt == 0) {
                return n;
            } else {
                n++;
            }
        }
        return 0;
    }
};",1447655425
HinaSnow,HanaYukii,54,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& num, int k, int op) {
        map<int,int>mp;
        map<int,int>cnt;
        for (auto &i : num) {
            mp[i-k]++;
            mp[i+k+1]--;
            mp[i];
            cnt[i]++;
        }
        int cur = 0;
        int ans = 1;
        for (auto &i : mp) {
            cur += i.second;
            ans = max(ans, min(cur, cnt[i.first] + op));
        }
        return ans;
    }
};",1447686678
Frank Rodriguez,whynot4,56,3622,java,"class Solution {
    public int maxFrequency(int[] nums, int k, int numOperations) {
        var seen = new TreeSet<Integer>();
        for (int num : nums) {
            seen.add(num);
            seen.add(num-k);
            seen.add(num+k+1);
        }
        var toIndex = new HashMap<Integer, Integer>();
        int len = 0;
        for (int num : seen) {
            toIndex.put(num, len);
            len++;
        }

        var freq = new int[len];
        var sum = new int[len];
        for (int num : nums) {
            freq[toIndex.get(num)]++;
            
            int i = toIndex.get(num-k);
            sum[i]++;
            i = toIndex.get(num+k+1);
            sum[i]--;
        }

        var prefix = new int[len];
        prefix[0] = sum[0];
        for (int i=1; i<len; i++) {
            prefix[i] = prefix[i-1] + sum[i];
        }

        int ans = 1;
        for (int i=0; i<len; i++) {
            int op = Math.min(prefix[i], freq[i]+numOperations);
            ans = Math.max(ans, op);
        }
        return ans;
    }
}",1447689096
Frank Rodriguez,whynot4,56,3626,java,"class Solution {
    public int smallestNumber(int n, int t) {
        while (product(n)%t != 0) {
            n++;
        }
        return n;
    }

    int product(int n) {
        int ans = 1;
        while (n > 0) {
            ans *= n%10;
            n/=10;
        }
        return ans;
    }
}",1447653957
Frank Rodriguez,whynot4,56,3640,java,"class Solution {
    public int maxFrequency(int[] nums, int k, int numOperations) {
        var seen = new TreeSet<Integer>();
        for (int num : nums) {
            seen.add(num);
            seen.add(num-k);
            seen.add(num+k+1);
        }
        var toIndex = new HashMap<Integer, Integer>();
        int len = 0;
        for (int num : seen) {
            toIndex.put(num, len);
            len++;
        }

        var freq = new int[len];
        var sum = new int[len];
        for (int num : nums) {
            freq[toIndex.get(num)]++;
            
            int i = toIndex.get(num-k);
            sum[i]++;
            i = toIndex.get(num+k+1);
            sum[i]--;
        }

        var prefix = new int[len];
        prefix[0] = sum[0];
        for (int i=1; i<len; i++) {
            prefix[i] = prefix[i-1] + sum[i];
        }

        int ans = 1;
        for (int i=0; i<len; i++) {
            int op = Math.min(prefix[i], freq[i]+numOperations);
            ans = Math.max(ans, op);
        }
        return ans;
    }
}",1447688523
sai kiran,p_saikiran,57,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        sort(nums.begin(), nums.end());
        int n=nums.size(), sol=0;
        map<int,int> f;
        for(int i:nums)f[i]++;
        for(int i=0;i<n;i++) {
            int idx = upper_bound(nums.begin(), nums.end(), nums[i]+2*k)-nums.begin();
            idx--;
            sol=max(min(idx-i+1, numOperations), sol);

            int lb = lower_bound(nums.begin(), nums.end(), nums[i]-k)-nums.begin();
            int ub = upper_bound(nums.begin(), nums.end(), nums[i]+k)-nums.begin();
            ub--;
            sol=max(f[nums[i]]+min(ub-lb+1-f[nums[i]], numOperations), sol);
        }
        return sol;
    }
};",1447682183
sai kiran,p_saikiran,57,3626,cpp,"class Solution {
public:
    int pro(int n) {
        int sol=1;
        while(n>0) {
            sol*=(n%10);
            n/=10;
        }
        return sol;
    }
    int smallestNumber(int n, int t) {
        while(pro(n)%t != 0) n++;
        return n;
    }
};",1447654883
sai kiran,p_saikiran,57,3640,cpp,"typedef long long ll;
class Solution {
public:
    int maxFrequency(vector<int>& nums_t, int k, int numOperations) {
        vector<ll> nums;
        for(int i:nums_t)nums.push_back(i);
        sort(nums.begin(), nums.end());
        int n=nums.size(), sol=0;
        map<ll,int> f;
        for(int i:nums)f[i]++;
        for(int i=0;i<n;i++) {
            int idx = upper_bound(nums.begin(), nums.end(), nums[i]+(ll)2*k)-nums.begin();
            idx--;
            sol=max(min(idx-i+1, numOperations), sol);

            int lb = lower_bound(nums.begin(), nums.end(), nums[i]-k)-nums.begin();
            int ub = upper_bound(nums.begin(), nums.end(), nums[i]+k)-nums.begin();
            ub--;
            sol=max(f[nums[i]]+min(ub-lb+1-f[nums[i]], numOperations), sol);
        }
        return sol;
    }
};",1447689133
M Kawa,mkawa222,58,3622,python3,"from collections import Counter

class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        cnt=Counter(nums)
        nums.sort()
        n=len(nums)
        l=r=0
        ans=0
        for a in nums:
            while nums[l]<a-k:l+=1
            while r<n and nums[r]<=a+k:r+=1
            ans=max(ans,min(numOperations+cnt[a],r-l))
        r=0
        for l in range(n):
            while r<n and nums[r]<=nums[l]+2*k:r+=1
            ans=max(ans,min(r-l,numOperations))
        return ans
",1447690680
M Kawa,mkawa222,58,3626,python3,"class Solution:
    def smallestNumber(self, n: int, t: int) -> int:
        def mul(a):
            res=1
            while a:
                a,r=divmod(a,10)
                res*=r
            return res
        
        for a in range(n,n+100):
            if mul(a)%t==0:
                return a
        return 0
",1447664748
M Kawa,mkawa222,58,3640,python3,"from collections import Counter

class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        cnt=Counter(nums)
        nums.sort()
        n=len(nums)
        l=r=0
        ans=0
        for a in nums:
            while nums[l]<a-k:l+=1
            while r<n and nums[r]<=a+k:r+=1
            ans=max(ans,min(numOperations+cnt[a],r-l))
        r=0
        for l in range(n):
            while r<n and nums[r]<=nums[l]+2*k:r+=1
            ans=max(ans,min(r-l,numOperations))
        return ans
",1447690454
N M,nnmm11,59,3622,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        ct = Counter(nums)
        lo, hi = min(nums), max(nums)
        best = 0
        within_k = sum(ct[i] for i in range(lo, lo+k))
        for i in range(lo, hi+1):
            within_k += ct[i + k]
            within_k -= ct[i - k - 1]
            # print(i, ct[i], within_k)
            cur = ct[i] + min(numOperations, within_k - ct[i])
            if cur > best:
                best = cur
        return best
            
            
            
            ",1447672187
N M,nnmm11,59,3626,python3,"class Solution:
    def smallestNumber(self, n: int, t: int) -> int:
        i = n - 1
        while True:
            i += 1
            if prod(int(c) for c in str(i)) % t == 0:
                return i",1447675417
N M,nnmm11,59,3640,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        ct = Counter(nums)
        pos = set(nums)
        pos = sorted(
            pos
            | set(x + k for x in pos)
            | set(x - k for x in pos)
        )
        best = 0
        lo, hi = 0, 0 # hi is exclusive
        within_k = 0
        for i in range(len(pos)):
            x = pos[i]
            # Move hi up.
            while hi < len(pos) and pos[hi] <= x + k:
                within_k += ct[pos[hi]]
                hi += 1
            # Move lo up.
            while pos[lo] < x - k:
                within_k -= ct[pos[lo]]
                lo += 1
            # print(i, ct[i], within_k)
            cur = ct[x] + min(numOperations, within_k - ct[x])
            if cur > best:
                best = cur
        return best",1447691111
zhz,eatcoc10,61,3622,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        nums.sort()
        maxx = max(nums)
        freq = defaultdict(int)
        for num in nums:
            freq[num] += 1
        ans = 0
        for num in range(1, maxx + 1):
            left = num - k
            right = num + k
            i = bisect_left(nums, left)
            j = bisect_right(nums, right) - 1
            # print(i, j)
            ans = max(min(j - i + 1 - freq[num], numOperations) + freq[num], ans)
        # print()
        return ans",1447685014
zhz,eatcoc10,61,3626,python3,"class Solution:
    def smallestNumber(self, n: int, t: int) -> int:
        while True:
            a = list(map(int, str(n)))
            p = 1
            for num in a:
                p *= num
            if p % t == 0:
                return n
            n += 1
        ",1447656863
zhz,eatcoc10,61,3640,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        freq = defaultdict(int)
        nums.sort()
        for num in nums:
            freq[num] += 1
        nums2 = []
        for num in nums:
            nums2.append(num)
            nums2.append(num + k)
            nums2.append(num - k)
        # nums2.sort()
        ans = 0
        for num in nums2:
            left = num - k
            right = num + k
            i = bisect_left(nums, left)
            j = bisect_right(nums, right) - 1
            # print(i, j)
            ans = max(min(j - i + 1 - freq[num], numOperations) + freq[num], ans)
        # print()
        return ans",1447691681
Ashutosh Rana,Ashutosh_3036,62,3622,python3,"from typing import List
from collections import Counter

class Solution:
    def lower_bound(self, nums: List[int], target: int) -> int:
        left, right = 0, len(nums)
        while left < right:
            mid = left + (right - left) // 2
            if nums[mid] < target:
                left = mid + 1
            else:
                right = mid
        return left

    def upper_bound(self, nums: List[int], target: int) -> int:
        left, right = 0, len(nums)
        while left < right:
            mid = left + (right - left) // 2
            if nums[mid] <= target:
                left = mid + 1
            else:
                right = mid
        return left

    def calculate_max_frequency(self, nums: List[int]) -> int:
        return max(Counter(nums).values(), default=0)

    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        if k == 0:
            return self.calculate_max_frequency(nums)
        
        nums.sort()
        max_freq = 1
        unique_nums = set(nums)
        
        for base in nums:
            # Define a range centered on `base`, from `base - k` to `base + k`, with step `k`
            for target in range(base - k, base + k + 1, k):
                
                # Inline binary search for the lower bound of `target - k`
                start, end = 0, len(nums)
                while start < end:
                    midpoint = (start + end) // 2
                    if nums[midpoint] < target - k:
                        start = midpoint + 1
                    else:
                        end = midpoint
                range_start = start

                # Inline binary search for the upper bound of `target + k`
                start, end = 0, len(nums)
                while start < end:
                    midpoint = (start + end) // 2
                    if nums[midpoint] <= target + k:
                        start = midpoint + 1
                    else:
                        end = midpoint
                range_end = start

                # Calculate the count of numbers within the range [target - k, target + k]
                count_in_range = range_end - range_start

                # Inline binary search for the exact `target` lower and upper bounds
                start, end = 0, len(nums)
                while start < end:
                    midpoint = (start + end) // 2
                    if nums[midpoint] < target:
                        start = midpoint + 1
                    else:
                        end = midpoint
                element_start = start

                start, end = 0, len(nums)
                while start < end:
                    midpoint = (start + end) // 2
                    if nums[midpoint] <= target:
                        start = midpoint + 1
                    else:
                        end = midpoint
                element_end = start

                # Calculate the count of occurrences of `target` itself
                exact_count = element_end - element_start

                # Adjust the frequency with extra elements within the range if possible
                extra_count = count_in_range - (exact_count if target in unique_nums else 0)
                max_freq = max(max_freq, exact_count + min(extra_count, numOperations))

        return max_freq
",1447680703
Ashutosh Rana,Ashutosh_3036,62,3626,cpp,"class Solution {
public:
    int smallestNumber(int n, int t) {
        while(true) {
            string s = to_string(n);
            int p = 1;
            for(auto ch:s) p*=(ch-'0');
            if(p%t==0) return n;
            ++n;
        }
        return 0;
    }
};",1447654951
Ashutosh Rana,Ashutosh_3036,62,3640,python3,"from typing import List
from collections import Counter

class Solution:
    def lower_bound(self, nums: List[int], target: int) -> int:
        left, right = 0, len(nums)
        while left < right:
            mid = left + (right - left) // 2
            if nums[mid] < target:
                left = mid + 1
            else:
                right = mid
        return left

    def upper_bound(self, nums: List[int], target: int) -> int:
        left, right = 0, len(nums)
        while left < right:
            mid = left + (right - left) // 2
            if nums[mid] <= target:
                left = mid + 1
            else:
                right = mid
        return left

    def calculate_max_frequency(self, nums: List[int]) -> int:
        return max(Counter(nums).values(), default=0)

    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        if k == 0:
            return self.calculate_max_frequency(nums)
        
        nums.sort()
        max_freq = 1
        unique_nums = set(nums)
        
        for base in nums:
            # Define a range centered on `base`, from `base - k` to `base + k`, with step `k`
            for target in range(base - k, base + k + 1, k):
                
                # Inline binary search for the lower bound of `target - k`
                start, end = 0, len(nums)
                while start < end:
                    midpoint = (start + end) // 2
                    if nums[midpoint] < target - k:
                        start = midpoint + 1
                    else:
                        end = midpoint
                range_start = start

                # Inline binary search for the upper bound of `target + k`
                start, end = 0, len(nums)
                while start < end:
                    midpoint = (start + end) // 2
                    if nums[midpoint] <= target + k:
                        start = midpoint + 1
                    else:
                        end = midpoint
                range_end = start

                # Calculate the count of numbers within the range [target - k, target + k]
                count_in_range = range_end - range_start

                # Inline binary search for the exact `target` lower and upper bounds
                start, end = 0, len(nums)
                while start < end:
                    midpoint = (start + end) // 2
                    if nums[midpoint] < target:
                        start = midpoint + 1
                    else:
                        end = midpoint
                element_start = start

                start, end = 0, len(nums)
                while start < end:
                    midpoint = (start + end) // 2
                    if nums[midpoint] <= target:
                        start = midpoint + 1
                    else:
                        end = midpoint
                element_end = start

                # Calculate the count of occurrences of `target` itself
                exact_count = element_end - element_start

                # Adjust the frequency with extra elements within the range if possible
                extra_count = count_in_range - (exact_count if target in unique_nums else 0)
                max_freq = max(max_freq, exact_count + min(extra_count, numOperations))

        return max_freq
",1447681672
VILLANOVA_ECON,VILLANOVA_ECON,63,3622,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        
        
        nums.sort()
        
        best_ans = 0
        
        num_store = collections.Counter(nums)
        
        
        
        for key,count in num_store.items():
            min_index = bisect.bisect_left(nums,key-k)
            max_index = bisect.bisect_right(nums,key+k)
            best_ans = max(best_ans,min(max_index-min_index,numOperations+count))
            
            new_key = key+k
            min_index = bisect.bisect_left(nums,new_key-k)
            max_index = bisect.bisect_right(nums,new_key+k)
            best_ans = max(best_ans,min(max_index-min_index,numOperations))
            
            new_key = key-k
            min_index = bisect.bisect_left(nums,new_key-k)
            max_index = bisect.bisect_right(nums,new_key+k)
            best_ans = max(best_ans,min(max_index-min_index,numOperations))
        return best_ans",1447681298
VILLANOVA_ECON,VILLANOVA_ECON,63,3626,python3,"class Solution:
    def smallestNumber(self, n: int, t: int) -> int:
        
        for x in range(n,10**5+10):
            key = 1
            for y in [int(y) for y in str(x)]:
                key *= y
            
            if key%t == 0:
                return x",1447655871
VILLANOVA_ECON,VILLANOVA_ECON,63,3640,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        
        
        nums.sort()
        
        best_ans = 0
        
        num_store = collections.Counter(nums)
        
        
        
        for key,count in num_store.items():
            min_index = bisect.bisect_left(nums,key-k)
            max_index = bisect.bisect_right(nums,key+k)
            best_ans = max(best_ans,min(max_index-min_index,numOperations+count))
            
            new_key = key+k
            min_index = bisect.bisect_left(nums,new_key-k)
            max_index = bisect.bisect_right(nums,new_key+k)
            best_ans = max(best_ans,min(max_index-min_index,numOperations))
            
            new_key = key-k
            min_index = bisect.bisect_left(nums,new_key-k)
            max_index = bisect.bisect_right(nums,new_key+k)
            best_ans = max(best_ans,min(max_index-min_index,numOperations))
        return best_ans",1447682624
congthanh2000,congthanh2000,64,3622,cpp,"// 0 - 10
// 6 - 16
// 15 - 25
// 15 - 25
class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        vector<int> points;
        for (int x : nums) {
            points.push_back(x);
            points.push_back(x - k);
            points.push_back(x + k);
        }
        sort(points.begin(), points.end());
        points.resize(unique(points.begin(), points.end()) - points.begin());
        int n = points.size();
        vector<int> c(n + 1, 0);
        for (int x : nums) {
            int L = x - k, R = x + k;
            int l = lower_bound(points.begin(), points.end(), L) - points.begin();
            int r = upper_bound(points.begin(), points.end(), R) - points.begin();
            c[l] += 1;
            c[r] -= 1;
        }
        for (int i = 1; i <= n; i++) c[i] += c[i - 1];
        map<int, int> M;
        for (int x : nums) M[x]++;
        int ans = 0;
        for (int i = 0; i < n; i++) {
            int need = c[i] - M[points[i]];
            int d = M[points[i]] + min(numOperations, need);
            ans = max(ans, d);
        }
        return ans;
    }
};",1447682664
congthanh2000,congthanh2000,64,3626,cpp,"int get(int n) {
    if (n < 10) return n;
    return get(n / 10) * (n % 10);
}
class Solution {
public:
    int smallestNumber(int n, int t) {
        while (get(n) % t) n++;
        return n;
    }
};",1447654892
congthanh2000,congthanh2000,64,3640,cpp,"// 0 - 10
// 6 - 16
// 15 - 25
// 15 - 25
class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        vector<int> points;
        for (int x : nums) {
            points.push_back(x);
            points.push_back(x - k);
            points.push_back(x + k);
        }
        sort(points.begin(), points.end());
        points.resize(unique(points.begin(), points.end()) - points.begin());
        int n = points.size();
        vector<int> c(n + 1, 0);
        for (int x : nums) {
            int L = x - k, R = x + k;
            int l = lower_bound(points.begin(), points.end(), L) - points.begin();
            int r = upper_bound(points.begin(), points.end(), R) - points.begin();
            c[l] += 1;
            c[r] -= 1;
        }
        for (int i = 1; i <= n; i++) c[i] += c[i - 1];
        map<int, int> M;
        for (int x : nums) M[x]++;
        int ans = 0;
        for (int i = 0; i < n; i++) {
            int need = c[i] - M[points[i]];
            int d = M[points[i]] + min(numOperations, need);
            ans = max(ans, d);
        }
        return ans;
    }
};",1447682844
ssk4988,ssk4988,65,3622,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        events = []
        c = Counter(nums)
        for x in nums:
            events.append((x - k, 1))
            events.append((x + k + 1, -1))
            events.append((x, 2))
        events.sort()
        v = 0
        ans = 0
        for x, t in events:
            if t != 2: v += t
            ans = max(ans, c[x] + min(v - c[x], numOperations))
        return ans",1447682591
ssk4988,ssk4988,65,3626,python3,"class Solution:
    def smallestNumber(self, n: int, t: int) -> int:
        while True:
            prod = 1
            for d in str(n):
                prod *= int(d)
            if prod % t == 0: return n
            n += 1",1447653824
ssk4988,ssk4988,65,3640,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        events = []
        c = Counter(nums)
        for x in nums:
            events.append((x - k, 1))
            events.append((x + k + 1, -1))
            events.append((x, 2))
        events.sort()
        v = 0
        ans = 0
        for x, t in events:
            if t != 2: v += t
            ans = max(ans, c[x] + min(v - c[x], numOperations))
        return ans",1447683122
agakishy,agakishy,67,3622,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        c = Counter(nums)
        d = Counter()
        for x in nums:
            d[x-k] += 1
            d[x] -= 1
            d[x+1] += 1
            d[x+k+1] -= 1
        pairs = sorted(list(d.items()))

        ans = acc = 0
        for x, i in pairs:
            acc += i
            cnt = 0
            if x in c: cnt = c[x]
            ans = max(ans, cnt + min(acc, numOperations))
            # print(x, i, acc, ans)
        return ans
        
        ",1447693444
agakishy,agakishy,67,3626,python3,"class Solution:
    def smallestNumber(self, n: int, t: int) -> int:
        i = n
        while True:
            s = str(i)
            sdigits = list(s)
            acc = 1
            for sd in sdigits:
                acc *= int(sd)
                if acc % t == 0:
                    return i
            i += 1
        return ""wtf?""",1447656691
agakishy,agakishy,67,3640,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        c = Counter(nums)
        d = Counter()
        for x in nums:
            d[x-k] += 1
            d[x] -= 1
            d[x+1] += 1
            d[x+k+1] -= 1
        pairs = sorted(list(d.items()))

        ans = acc = 0
        for x, i in pairs:
            acc += i
            cnt = 0
            if x in c: cnt = c[x]
            ans = max(ans, cnt + min(acc, numOperations))
            # print(x, i, acc, ans)
        return ans",1447693793
Ujjawal Gupta,ujjawalgupta20,69,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        map<int,int> mp, frequency;
        for(auto it:nums) {
            mp[it - k]++;
            frequency[it]++;
            mp[it + k + 1] --;
            mp[it] = mp[it];
        }
        int ans = 0, sum = 0;
        for(auto &it:mp) {
            sum += it.second;
            int f = 0;
            if(frequency.find(it.first) != frequency.end()) f += frequency[it.first];
            ans = max(ans, min(sum - f, numOperations) + f);
        }

        return ans;
    }
};",1447681187
Ujjawal Gupta,ujjawalgupta20,69,3626,cpp,"class Solution {
public:
    int smallestNumber(int n, int t) {
        for(int i = n; i < n + 100; i++) {
            int val = i;
            int p = 1;
            while(val) {
                p *= (val%10);
                val/=10;
            }
            if(p % t == 0) return i;
        }
        return 0;
    }
};",1447662308
Ujjawal Gupta,ujjawalgupta20,69,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        map<int,int> mp, frequency;
        for(auto it:nums) {
            mp[it - k]++;
            frequency[it]++;
            mp[it + k + 1] --;
            mp[it] = mp[it];
        }
        int ans = 0, sum = 0;
        for(auto &it:mp) {
            sum += it.second;
            int f = 0;
            if(frequency.find(it.first) != frequency.end()) f += frequency[it.first];
            ans = max(ans, min(sum - f, numOperations) + f);
        }

        return ans;
    }
};",1447684039
Chuan-Chih Chou,chuan-chih,72,3622,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        nums.sort()
        c = Counter(nums)
        n = len(nums)
        ans = l = r = 0
        for v in range(nums[0], nums[-1] + 1):
            while r < n and nums[r] <= v + k:
                r += 1
            while nums[l] < v - k:
                l += 1
            ans = max(ans, c[v] + min(numOperations, r - l - c[v]))
        return ans
            ",1447679925
Chuan-Chih Chou,chuan-chih,72,3626,python3,"class Solution:
    def smallestNumber(self, n: int, t: int) -> int:
        while True:
            if not reduce(mul, (int(d) for d in str(n))) % t:
                return n
            n += 1",1447654227
Chuan-Chih Chou,chuan-chih,72,3640,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        nums.sort()
        c = Counter(nums)
        n = len(nums)
        ans = l = r = 0
        for v in nums:
            while r < n and nums[r] <= v + k:
                r += 1
            while nums[l] < v - k:
                l += 1
            ans = max(ans, c[v] + min(numOperations, r - l - c[v]))
        l = 0
        for r, v in enumerate(nums):
            if v - nums[l] > 2 * k:
                l += 1
            ans = max(ans, min(numOperations, r - l + 1))
        return ans
        ",1447695529
nipunjain099,nipunjain099,76,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        sort(nums.begin(),nums.end());
        map<int,int> events;
        for(auto num:nums){
            events[max(0,num-k)]++;
            events[min(1000000001,num+k+1)]--;
            if(!events.contains(num)) events[num]=0;
        }
        int ind=0;
        int ct=0;
        int mx=0;
        for(auto event:events){
            ct += event.second;
            int t=0;
            while((ind<nums.size()) && (nums[ind] == event.first)){
                t++;
                ind++;
            }
            mx = max(mx, t+min(numOperations,ct-t));
        }
        return mx;
    }
};",1447688597
nipunjain099,nipunjain099,76,3626,cpp,"class Solution {
public:
    int smallestNumber(int n, int t) {
        while(n<200){
            int a=n,mul=1;
            while(a>0){
                mul *= (a%10);
                a/=10;
            }
            if((mul%t)==0) return n;
            n++;
        }
        return n;
    }
};",1447697259
nipunjain099,nipunjain099,76,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        sort(nums.begin(),nums.end());
        map<int,int> events;
        for(auto num:nums){
            events[max(0,num-k)]++;
            events[min(1000000001,num+k+1)]--;
            if(!events.contains(num)) events[num]=0;
        }
        int ind=0;
        int ct=0;
        int mx=0;
        for(auto event:events){
            ct += event.second;
            int t=0;
            while((ind<nums.size()) && (nums[ind] == event.first)){
                t++;
                ind++;
            }
            mx = max(mx, t+min(numOperations,ct-t));
        }
        return mx;
    }
};",1447687927
Kirill S,kirya2604,78,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        sort(nums.begin(), nums.end());
        int answer = 1;

        int r = 0, n = nums.size();
        for (int i = 0; i < n; i++) {
            while (r + 1 < n && nums[r + 1] - nums[i] <= k + k)
                r ++;
            answer = max(answer, min(numOperations, r - i + 1));
        }

        int l = 0;
        r = 0;
        for (int i = 0; i < n; i ++) {
            if (i > 0 && nums[i - 1] == nums[i]) continue;

            int j = i;
            while (j + 1 < n && nums[j + 1] == nums[i]) j ++;
            
            while (nums[l] + k < nums[i]) l ++;
            while (r + 1 < n && nums[r + 1] <= k + nums[i]) r ++;

            int cnt = j - i + 1;
            int cnt2 = r - l + 1 - cnt;
            answer = max(answer, min(numOperations, cnt2) + cnt);
        }
        
        return answer;
    }
};",1447697918
Kirill S,kirya2604,78,3626,cpp,"class Solution {
public:
    int smallestNumber(int n, int t) {
        for (int i = n; ;i ++)
            {
                int x = i;
                int q = 1;
                while (x > 0) {
                    q *= (x % 10);
                    x /= 10;
                }

                if (q % t == 0) return i;
            }
    }
};",1447656636
Kirill S,kirya2604,78,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        sort(nums.begin(), nums.end());
        int answer = 1;

        int r = 0, n = nums.size();
        for (int i = 0; i < n; i++) {
            while (r + 1 < n && nums[r + 1] - nums[i] <= k + k)
                r ++;
            answer = max(answer, min(numOperations, r - i + 1));
        }

        int l = 0;
        r = 0;
        for (int i = 0; i < n; i ++) {
            if (i > 0 && nums[i - 1] == nums[i]) continue;

            int j = i;
            while (j + 1 < n && nums[j + 1] == nums[i]) j ++;
            
            while (nums[l] + k < nums[i]) l ++;
            while (r + 1 < n && nums[r + 1] <= k + nums[i]) r ++;

            int cnt = j - i + 1;
            int cnt2 = r - l + 1 - cnt;
            answer = max(answer, min(numOperations, cnt2) + cnt);
        }
        
        return answer;
    }
};",1447697653
Mohit_is_back,Mohit_2k_kukreja,79,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        for(auto &i : nums) i += k;
        int maxi = *max_element(nums.begin(), nums.end());
        vector<int> freq(maxi + k + 2, 0);
        
        map<int, int> mp;
        for(auto i: nums) mp[i]++;
        
        for(auto i: nums){
            freq[i - k]++;
            freq[i + k + 1]--;
        }
        
        for(int i=1; i<freq.size(); i++){
            freq[i] += freq[i-1];
        }
        
        int res = 0;
        for(int i=1; i<freq.size(); i++){
            int sub = max(0, freq[i] - mp[i] - numOperations);
            res = max(res, freq[i] - sub);
        }
        return res;
    }
};",1447681283
Mohit_is_back,Mohit_2k_kukreja,79,3626,cpp,"class Solution {
public:
    int smallestNumber(int n, int t) {
        for(int i=0; i<15; i++){
            int curr = n + i;
            int s = 1;
            while(curr){
                s *= curr % 10;
                curr /= 10;
            }
            
            if(s % t == 0) return n + i;
        }
        return 0;
    }
};",1447655411
Mohit_is_back,Mohit_2k_kukreja,79,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {        
        map<int, int> mp, freq;
        for(auto i: nums) {mp[i]++; freq[i] = 0;}
        
//         1->1, 4-> 1, 5
        
        for(auto i: nums){
            freq[i - k]++;
            freq[i + k + 1]--;
        }
        
        
        int res = 0;
        int s = 0;
        for(auto it : freq){
            s += it.second;
            int sub = max(0, s - mp[it.first] - numOperations);
            res = max(res, s - sub);
        }
        return res;
    }
};",1447698943
Андрей Хромых,khromykh,82,3622,java,"class Solution {
    public int maxFrequency(int[] nums, int k, int numOperations) {
        Map<Integer, Integer> counts = new HashMap<>();
        for (var x : nums) {
            counts.merge(x, 1, Integer::sum);
        }

        Arrays.sort(nums);
        int res = 0;
        for (int i = 0, l = 0, r = 0; i < nums.length; i++) {
            while (r < nums.length && nums[r] <= nums[i] + k) r++;
            while (nums[l] < nums[i] - k) l++;
            int numOp = Math.min(r-l - counts.get(nums[i]), numOperations);
            res = Math.max(res, numOp + counts.get(nums[i]));
        }

        for (int l = 0, r = 0; r < nums.length; r++) {
            while (nums[l] < nums[r] - 2 * k) l++;
            res = Math.max(Math.min(numOperations, r - l + 1), res);
        }
        
        return res;
    }
}",1447690122
Андрей Хромых,khromykh,82,3626,java,"class Solution {
    public int smallestNumber(int n, int t) {
        for (int i = n;; i++) {
            if (pr(i) % t == 0) return i;
        }
    }

    int pr(int x) {
        int res = 1;
        while (x != 0) {
            res *= x % 10;
            x /= 10;
        }
        return res;
    }
}",1447665940
Андрей Хромых,khromykh,82,3640,java,"class Solution {
    public int maxFrequency(int[] nums, int k, int numOperations) {
        Map<Integer, Integer> counts = new HashMap<>();
        for (var x : nums) {
            counts.merge(x, 1, Integer::sum);
        }

        Arrays.sort(nums);
        int res = 0;
        for (int i = 0, l = 0, r = 0; i < nums.length; i++) {
            while (r < nums.length && nums[r] <= nums[i] + k) r++;
            while (nums[l] < nums[i] - k) l++;
            int numOp = Math.min(r-l - counts.get(nums[i]), numOperations);
            res = Math.max(res, numOp + counts.get(nums[i]));
        }

        for (int l = 0, r = 0; r < nums.length; r++) {
            while (nums[l] < nums[r] - 2 * k) l++;
            res = Math.max(Math.min(numOperations, r - l + 1), res);
        }
        
        return res;
    }
}",1447689772
Chaitanya Bhutada,_chaitanya99,83,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        sort(nums.begin(), nums.end());
        unordered_map<int, int> mp;
        for (auto &i: nums) mp[i]++;
        int ans = 0;
        for (int i = 0; i < nums.size(); i++) {
            int itnel = lower_bound(nums.begin(), nums.end(), nums[i]-k) - nums.begin();
            int itnele = upper_bound(nums.begin(), nums.end(), nums[i]+k) - nums.begin();
            int ye = itnele - itnel;
            ans = max(ans, mp[nums[i]] + min(numOperations, ye-mp[nums[i]]));
        }

        for (int i = 0; i < nums.size(); i++) {
            int itnele = upper_bound(nums.begin(), nums.end(), nums[i]+2*k) - nums.begin();
            int ye = itnele - i;
            ans = max(ans, min(ye, numOperations));
        }
        
        return ans;
    }
};",1447684316
Chaitanya Bhutada,_chaitanya99,83,3626,cpp,"class Solution {
private:
    int calc(int x) {
        string s = to_string(x);
        int h = 1;
        for (auto &ch: s) {
            h *= (ch-'0');
        }
        return h;
    }
public:
    int smallestNumber(int n, int t) {
        for (int i = n;;i++) {
            if (calc(i)%t == 0) return i;
        }
        return 0;
    }
};",1447654666
Chaitanya Bhutada,_chaitanya99,83,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        vector<long long> numsi;
        for (auto &i: nums) numsi.push_back(i);
        sort(numsi.begin(), numsi.end());
        unordered_map<long long, int> mp;
        for (auto &i: numsi) mp[i]++;
        int ans = 0;
        for (int i = 0; i < numsi.size(); i++) {
            int itnel = lower_bound(numsi.begin(), numsi.end(), numsi[i]-k) - numsi.begin();
            int itnele = upper_bound(numsi.begin(), numsi.end(), numsi[i]+k) - numsi.begin();
            int ye = itnele - itnel;
            ans = max(ans, mp[numsi[i]] + min(numOperations, ye-mp[numsi[i]]));
        }

        for (int i = 0; i < numsi.size(); i++) {
            int itnele = upper_bound(numsi.begin(), numsi.end(), numsi[i]+2*k) - numsi.begin();
            int ye = itnele - i;
            ans = max(ans, min(ye, numOperations));
        }
        
        return ans;
        
    }
};",1447690457
Vineet Motwani,rookie-coder,84,3622,cpp,"#define ll long long
class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int ops) {
        unordered_map<ll, int> mp;
        vector<ll> x_vals;
        vector<pair<ll, int>> v;
        for (int& i : nums) {
            mp[i]++;
            ll l = (ll)i - k, r = (ll)i+k+1;
            v.push_back({l, 1});
            v.push_back({r, -1});
            x_vals.push_back(i);
            x_vals.push_back(l);
            x_vals.push_back(r);
        }
        sort(begin(x_vals), end(x_vals));
        x_vals.erase(unique(begin(x_vals), end(x_vals)), end(x_vals));
        sort(begin(v), end(v));
        int idx = 0;
        ll o = 0;
        int res = 0;
        for (ll& x : x_vals) {
            while (idx<v.size() and v[idx].first<=x) {
                o += v[idx].second;
                idx++;
            }
            int f = mp[x];
            ll adj = o - f;
            int tot = f + min((ll)ops, adj);
            res = max(res, tot);
        }
        return res;
    }
};",1447690241
Vineet Motwani,rookie-coder,84,3626,cpp,"class Solution {
    vector<int> fn(int i) {
        vector<int> v;
        while(i) {
            v.push_back(i%10);
            i/=10;
        }
        return v;
    }
    bool pro(vector<int> v, int t) {
        int duct = 1;
        for(auto& i : v)
                duct*=i;
        return (duct%t==0);
    }
public:
    int smallestNumber(int n, int t) {
        while(1) {
            if(pro(fn(n), t))
                return n;
            else
                n++;
        }
        return n;
    }
};",1447660148
Vineet Motwani,rookie-coder,84,3640,cpp,"#define ll long long
class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int ops) {
        unordered_map<ll, int> mp;
        vector<ll> x_vals;
        vector<pair<ll, int>> v;
        for (int& i : nums) {
            mp[i]++;
            ll l = (ll)i - k, r = (ll)i+k+1;
            v.push_back({l, 1});
            v.push_back({r, -1});
            x_vals.push_back(i);
            x_vals.push_back(l);
            x_vals.push_back(r);
        }
        sort(begin(x_vals), end(x_vals));
        x_vals.erase(unique(begin(x_vals), end(x_vals)), end(x_vals));
        sort(begin(v), end(v));
        int idx = 0;
        ll o = 0;
        int res = 0;
        for (ll& x : x_vals) {
            while (idx<v.size() and v[idx].first<=x) {
                o += v[idx].second;
                idx++;
            }
            int f = mp[x];
            ll adj = o - f;
            int tot = f + min((ll)ops, adj);
            res = max(res, tot);
        }
        return res;
    }
};",1447690757
Win_Handsome,win_handsome,86,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& arr, int k, int numOperations) {
        int n = arr.size();
        unordered_map<int, int> count, add;
        set<int> temp;
        for(int i = 0; i < n; i++){
            add[max(1, arr[i] - k)]++;
            add[arr[i] + k + 1]--;
            count[arr[i]]++;
            
            temp.insert(max(1, arr[i] - k));
            temp.insert(arr[i] + k + 1);
            temp.insert(arr[i]);
        }
        int ans = INT_MIN, sum = 0;
        for(auto &i : temp){
            sum += add[i];
            ans = max(ans, count[i] + min(numOperations, sum - count[i]));
        }
        return ans;
    }
};",1447690435
Win_Handsome,win_handsome,86,3626,cpp,"class Solution {
public:
    int smallestNumber(int n, int t) {
        while(true){
            int temp = n;
            int prod = 1;
            while(temp){
                prod *= temp % 10;
                temp /= 10;
            }
            if(prod % t == 0) return n;
            n++;
        }
        return -1;
    }
};",1447662641
Win_Handsome,win_handsome,86,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& arr, int k, int numOperations) {
        int n = arr.size();
        unordered_map<int, int> count, add;
        set<int> temp;
        for(int i = 0; i < n; i++){
            add[max(1, arr[i] - k)]++;
            add[arr[i] + k + 1]--;
            count[arr[i]]++;
            
            temp.insert(max(1, arr[i] - k));
            temp.insert(arr[i] + k + 1);
            temp.insert(arr[i]);
        }
        int ans = INT_MIN, sum = 0;
        for(auto &i : temp){
            sum += add[i];
            ans = max(ans, count[i] + min(numOperations, sum - count[i]));
        }
        return ans;
    }
};",1447690959
Jaeha Yi,jaehayi1,87,3622,python3,"from collections import defaultdict
from bisect import bisect_left, bisect_right

class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        '''
        Can update each element in nums at most once

        alternatively, the solution (res), we need to find the number that has the most nums
        in range [-k, k] if only numOp elements were changed 

        - if the sol is not on nums[i], we only need to check nums[i] +- k (this will maximize freq)
        '''
        counter = defaultdict(int)
        for x in nums: counter[x] += 1
        nums.sort()

        def check(x): 
            ret = counter[x]
            lo = bisect_left(nums, x - k)
            hi = bisect_right(nums, x + k)
            ret += min(numOperations, hi - lo - counter[x])
            return ret

        res = 0
        for i in range(len(nums)): 
            # check nums[i] and nums[i] +- k
            res = max(res, check(nums[i]))
            res = max(res, check(nums[i] + k))
            res = max(res, check(nums[i] - k))
        
        return res",1447700563
Jaeha Yi,jaehayi1,87,3626,python3,"class Solution:
    def smallestNumber(self, n: int, t: int) -> int:
        res = n
        
        def prod(x): 
            ret = 1
            for c in str(x): 
                ret *= int(c)
            return ret
            
        while True: 
            if prod(res) % t == 0:
                return res

            res += 1

        return -1",1447657908
Jaeha Yi,jaehayi1,87,3640,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        '''
        Can update each element in nums at most once

        alternatively, the solution (res), we need to find the number that has the most nums
        in range [-k, k] if only numOp elements were changed 

        - if the sol is not on nums[i], we only need to check nums[i] +- k (this will maximize freq)
        '''
        counter = defaultdict(int)
        for x in nums: counter[x] += 1
        nums.sort()

        def check(x): 
            ret = counter[x]
            lo = bisect_left(nums, x - k)
            hi = bisect_right(nums, x + k)
            ret += min(numOperations, hi - lo - counter[x])
            return ret

        res = 0
        for i in range(len(nums)): 
            # check nums[i] and nums[i] +- k
            res = max(res, check(nums[i]))
            res = max(res, check(nums[i] + k))
            res = max(res, check(nums[i] - k))
        
        return res",1447701289
parallel_stream,parallel_stream,88,3622,java,"class Solution {
  
  private static final int MAX = 100000;

  public int maxFrequency(int[] nums, int k, int numOperations) {
    int[] fq = new int[MAX + 1];
    Arrays.stream(nums).forEach(num -> fq[num]++);
    long[] pre = new long[MAX + 1];
    pre[0] = fq[0];
    IntStream.rangeClosed(1, MAX).forEach(i -> pre[i] = pre[i - 1] + fq[i]);
    int ans = 0;
    for (int x = 0; x <= MAX; x++) {
      int left = Math.max(x - k, 0);
      int right = Math.min(x + k, MAX);
      long total = pre[right] - (left > 0 ? pre[left - 1] : 0);
      long diff = total - fq[x];
      ans = Math.max(ans, fq[x] + (int) Math.min(diff, numOperations));
    }
    return ans;
  }
}",1447673121
parallel_stream,parallel_stream,88,3626,java,"class Solution {
  public int smallestNumber(int n, int t) {
    while (true) {
      int product = 1;
      int temp = n;
      while (temp > 0) {
        product *= temp % 10;
        temp /= 10;
      }
      if (product % t == 0) {
        return n;
      }
      n++;
    }
  }
}",1447653391
parallel_stream,parallel_stream,88,3640,java,"class Solution {
  
  public int maxFrequency(int[] nums, int k, int numOperations) {
    Arrays.sort(nums);
    List<Integer> values = new ArrayList<>();
    Arrays.stream(nums).forEach(num -> {
      values.add(num);
      values.add(num - k);
      values.add(num + k);
    });
    Collections.sort(values);
    List<Integer> uniqueValues = new ArrayList<>();
    uniqueValues.add(values.get(0));
    IntStream.range(1, values.size())
        .filter(i -> !values.get(i).equals(values.get(i - 1)))
        .mapToObj(values::get)
        .forEach(uniqueValues::add);
    int ans = 0;
    for (int uv : uniqueValues) {
      int lb = lb(nums, uv - k);
      int ub = ub(nums, uv + k);
      int count = ub - lb;
      int fq = 0;
      int idx = Arrays.binarySearch(nums, uv);
      if (idx >= 0) {
        int first = idx;
        while (first > 0 && nums[first - 1] == uv) {
          first--;
        }
        int last = idx;
        while (last < nums.length - 1 && nums[last + 1] == uv) {
          last++;
        }
        fq = last - first + 1;
      }
      ans = fq > 0
          ? Math.max(ans, fq + Math.min(numOperations, count - fq))
          : Math.max(ans, Math.min(numOperations, count));
    }
    return ans;
  }

  private int lb(int[] nums, int target) {
    int l = 0, r = nums.length;
    while (l < r) {
      int m = l + (r - l) / 2;
      if (nums[m] >= target) {
        r = m;
      } else {
        l = m + 1;
      }
    }
    return l;
  }

  private int ub(int[] nums, int target) {
    int l = 0, r = nums.length;
    while (l < r) {
      int m = l + (r - l) / 2;
      if (nums[m] > target) {
        r = m;
      } else {
        l = m + 1;
      }
    }
    return l;
  }
}",1447691870
Gautam Agarwal,gaut_2003,90,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        int n = nums.size();
        map<long long,int> mp;
        map<int,int> cnt;
        for(int i=0;i<n;i++){
            mp[nums[i]-k]++;
            mp[nums[i]+k+1]--;
            mp[nums[i]] += 0;
            cnt[nums[i]]++;
        }
        int prev_count = 0;
        for(auto it=mp.begin();it != mp.end();it++){
            if(it != mp.begin()){
                long long value = (*it).first;
                mp[value] += prev_count;
            }
            prev_count = (*it).second;
        }
        int ans = 0;
        for(auto val:mp){
            long long value = val.first;
            int not_apply = cnt[value];
            int apply = (val.second - not_apply);
            ans = max(ans,not_apply + (apply > numOperations ? numOperations : apply));
        }
        return ans;
    }
};",1447697191
Gautam Agarwal,gaut_2003,90,3626,cpp,"class Solution {
public:
    int getProduct(int n){
        int prod = 1;
        while(n!=0){
            prod *= (n%10);
            n /= 10;
        }
        return prod;
    }
    int smallestNumber(int n, int t) {
        for(int i=n;i<=100;i++){
            int prod = getProduct(i);
            if(prod%t == 0) return i;
        }
        return -1;
    }
};",1447702640
Gautam Agarwal,gaut_2003,90,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        int n = nums.size();
        map<long long,int> mp;
        map<int,int> cnt;
        for(int i=0;i<n;i++){
            mp[nums[i]-k]++;
            mp[nums[i]+k+1]--;
            mp[nums[i]] += 0;
            cnt[nums[i]]++;
        }
        int prev_count = 0;
        for(auto it=mp.begin();it != mp.end();it++){
            if(it != mp.begin()){
                long long value = (*it).first;
                mp[value] += prev_count;
            }
            prev_count = (*it).second;
        }
        int ans = 0;
        for(auto val:mp){
            long long value = val.first;
            int not_apply = cnt[value];
            int apply = (val.second - not_apply);
            ans = max(ans,not_apply + (apply > numOperations ? numOperations : apply));
        }
        return ans;
    }
};",1447696226
ocavue,ocavue,92,3622,python3,"from typing import List
from collections import Counter
import bisect


# A binary indexed tree (BIT)
class BIT:
    def __init__(self, size: int):
        self.bit = [0] * (size + 1)

    # Add 'diff' to index i
    def add(self, i, diff):
        i += 1

        # Traverse all ancestors and add 'diff'
        while i < len(self.bit):
            # Add 'diff' to current node of BI Tree
            self.bit[i] += diff

            # Update index to that of parent in update View
            i += i & (-i)

    # Returns sum(arr[0:i])
    def sum(self, i):
        s = 0
        while i > 0:
            s += self.bit[i]

            # (i & (-i)) is the lowest bit
            i -= i & (-i)
        return s

    # Returns sum(arr[i:j])
    def sum_range(self, i, j):
        return self.sum(j) - self.sum(i)


class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        num_set = set()
        for num in nums:
            num_set.add(num)
            num_set.add(num - k)
            num_set.add(num + k)

        alt_to_num = sorted(num_set)
        alt_len = len(alt_to_num)
        num_to_alt = {num: alt for alt, num in enumerate(alt_to_num)}

        alt_counter = Counter()
        for num in nums:
            alt = num_to_alt[num]
            alt_counter[alt] += 1

        bit = BIT(len(alt_to_num) + 2)

        for alt, count in alt_counter.items():
            bit.add(alt, count)

        sorted_nums = sorted(num_set)

        result = 0

        for alt in range(0, alt_len):
            num = alt_to_num[alt]

            num_prev = num - k
            num_next = num + k

            alt_i = bisect.bisect_left(sorted_nums, num_prev)
            alt_j = bisect.bisect_right(sorted_nums, num_next)

            count = bit.sum_range(alt_i, alt_j)
            count_noop = alt_counter[alt]
            count_need_op = count - count_noop
            count_can_op = min(numOperations, count_need_op)

            result = max(result, count_noop + count_can_op)

            # print(f""{alt=} {num=} {alt_i=} {alt_j=} {count=}"")

        return result

 ",1447703877
ocavue,ocavue,92,3626,python3,"class Solution:
    def smallestNumber(self, n: int, t: int) -> int:
        for num in range(n, 10**9):
            s = str(num)
            digits = [int(char) for char in s]
            prod = 1
            for dig in digits:
                prod *= dig 

            if prod % t == 0:
                return num 
        return -1",1447654640
ocavue,ocavue,92,3640,python3,"from typing import List
from collections import Counter
import bisect


# A binary indexed tree (BIT)
class BIT:
    def __init__(self, size: int):
        self.bit = [0] * (size + 1)

    # Add 'diff' to index i
    def add(self, i, diff):
        i += 1

        # Traverse all ancestors and add 'diff'
        while i < len(self.bit):
            # Add 'diff' to current node of BI Tree
            self.bit[i] += diff

            # Update index to that of parent in update View
            i += i & (-i)

    # Returns sum(arr[0:i])
    def sum(self, i):
        s = 0
        while i > 0:
            s += self.bit[i]

            # (i & (-i)) is the lowest bit
            i -= i & (-i)
        return s

    # Returns sum(arr[i:j])
    def sum_range(self, i, j):
        return self.sum(j) - self.sum(i)


class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        num_set = set()
        for num in nums:
            num_set.add(num)
            num_set.add(num - k)
            num_set.add(num + k)

        alt_to_num = sorted(num_set)
        alt_len = len(alt_to_num)
        num_to_alt = {num: alt for alt, num in enumerate(alt_to_num)}

        alt_counter = Counter()
        for num in nums:
            alt = num_to_alt[num]
            alt_counter[alt] += 1

        bit = BIT(len(alt_to_num) + 2)

        for alt, count in alt_counter.items():
            bit.add(alt, count)

        sorted_nums = sorted(num_set)

        result = 0

        for alt in range(0, alt_len):
            num = alt_to_num[alt]

            num_prev = num - k
            num_next = num + k

            alt_i = bisect.bisect_left(sorted_nums, num_prev)
            alt_j = bisect.bisect_right(sorted_nums, num_next)

            count = bit.sum_range(alt_i, alt_j)
            count_noop = alt_counter[alt]
            count_need_op = count - count_noop
            count_can_op = min(numOperations, count_need_op)

            result = max(result, count_noop + count_can_op)

            # print(f""{alt=} {num=} {alt_i=} {alt_j=} {count=}"")

        return result

 ",1447704172
Anupam Shah,user9218i,93,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& arr, int range, int maxOps) {
        map<int, int> rangeMap, freq;
        
        int minVal = INT_MAX, maxVal = INT_MIN, maxElement = 0;
        for(int i = 0; i < arr.size(); i++) {
            minVal = min(minVal, arr[i] - range);
            maxVal = max(maxVal, arr[i] + range);
            maxElement = max(maxElement, arr[i]);
            
            freq[arr[i]]++;
            rangeMap[arr[i] - range]++;
            rangeMap[arr[i] + range + 1]--;
            rangeMap[arr[i]] += 0;
        }
        
        int result = 0, previous = 0;
        for(auto& item : rangeMap) {
            item.second += previous;

            int currentCount = (item.first >= 1 && item.first <= maxElement) ? freq[item.first] : 0;
            int additions = min(item.second - currentCount, maxOps);

            result = max(result, currentCount + additions);
            previous = item.second;
        }
        return result;
    }
};
",1447701355
Anupam Shah,user9218i,93,3626,cpp,"class Solution {
public:
    bool check(int& num, int& t) {
        int pr = 1;
        string str = to_string(num);
        for(int i = 0; i < str.length(); i ++)
            pr *= str[i] - '0';
        if(pr % t == 0)
            return 1;
        return 0;
    }
    int smallestNumber(int n, int t) {
        int i = n;
        while(1) {
            if(check(i, t)) {
                return i;
            }
            if(i >= 1e8)    break;
            i ++;
        }
        return 2;
    }
};",1447704273
Anupam Shah,user9218i,93,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& arr, int range, int maxOps) {
        map<int, int> rangeMap, freq;
        
        int minVal = INT_MAX, maxVal = INT_MIN, maxElement = 0;
        for(int i = 0; i < arr.size(); i++) {
            minVal = min(minVal, arr[i] - range);
            maxVal = max(maxVal, arr[i] + range);
            maxElement = max(maxElement, arr[i]);
            
            freq[arr[i]]++;
            rangeMap[arr[i] - range]++;
            rangeMap[arr[i] + range + 1]--;
            rangeMap[arr[i]] += 0;
        }
        
        int result = 0, previous = 0;
        for(auto& item : rangeMap) {
            item.second += previous;

            int currentCount = (item.first >= 1 && item.first <= maxElement) ? freq[item.first] : 0;
            int additions = min(item.second - currentCount, maxOps);

            result = max(result, currentCount + additions);
            previous = item.second;
        }
        return result;
    }
};
",1447700882
Saijayavinoth T V S,saijayavinoth,94,3622,python3,"from bisect import *
class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        count = Counter(nums)
        nums.sort()
        ans = 0
        for num in range(nums[0], nums[-1]+1):
            within_range = bisect(nums, num+k) - bisect_left(nums, num-k) - count.get(num, 0)
            ans = max(ans, count.get(num, 0) + min(numOperations, within_range))
        return ans
        ",1447671235
Saijayavinoth T V S,saijayavinoth,94,3626,python3,"class Solution:
    def smallestNumber(self, n: int, t: int) -> int:
        def possible(n):
            p = 1
            while n > 0:
                p*=n%10
                n//=10
            return p%t==0
            
        while not possible(n):
            n+=1
        return n",1447657761
Saijayavinoth T V S,saijayavinoth,94,3640,python3,"from bisect import *
class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        arr = []
        for num in nums:
            arr.extend([num-k, num, num+k])
        count = Counter(nums)
        nums.sort()
        arr.sort()
        ans = 0
        for num in arr:
            within_range = bisect(nums, num+k) - bisect_left(nums, num-k) - count.get(num, 0)
            ans = max(ans, count.get(num, 0) + min(numOperations, within_range))
        return ans",1447685146
Sandeep P,Sandeep_P,95,3622,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        ct=Counter(nums)
        a=sorted(ct.keys())
        b=set()
        for x in a:
            b.add(x)
            b.add(x+k)
            b.add(x-k)
        b=sorted(b)
        sm=0
        i,j=0,0
        n=len(a)
        ans=0
        for target in b:
            while j<n and a[j]-target<=k:
                sm+=ct[a[j]]
                j+=1
            while i<n and target-a[i]>k:
                sm-=ct[a[i]]
                i+=1
            cur=ct[target]
            take=min(numOperations,sm-cur)
            ans=max(ans,cur+take)
        return ans",1447683826
Sandeep P,Sandeep_P,95,3626,python3,"class Solution:
    def smallestNumber(self, n: int, t: int) -> int:
        ans=n
        while prod(map(int,str(ans)))%t!=0:
            ans+=1
        return ans",1447653585
Sandeep P,Sandeep_P,95,3640,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        ct=Counter(nums)
        a=sorted(ct.keys())
        b=set()
        for x in a:
            b.add(x)
            b.add(x+k)
            b.add(x-k)
        b=sorted(b)
        sm=0
        i,j=0,0
        n=len(a)
        ans=0
        for target in b:
            while j<n and a[j]-target<=k:
                sm+=ct[a[j]]
                j+=1
            while i<n and target-a[i]>k:
                sm-=ct[a[i]]
                i+=1
            cur=ct[target]
            take=min(numOperations,sm-cur)
            ans=max(ans,cur+take)
        return ans
",1447685246
eCtjNAHCiQ,eCtjNAHCiQ,98,3622,java,"import java.util.*;

class Solution {
    public int maxFrequency(int[] nums, int k, int numOperations) {
        TreeSet<Integer> set = new TreeSet<>();
        for (int num : nums) {
            set.add(num - k);
            set.add(num);
            set.add(num + k + 1);
        }
        List<Integer> list = new ArrayList<>(set);
        int M = list.size();
        HashMap<Integer, Integer> map = new HashMap<>();
        for (int i = 0; i < M; i++) {
            map.put(list.get(i), i);
        }
        int[] counts = new int[M + 1]; 
        int[] adj = new int[M];

        for (int num : nums) {
            int start = num - k;
            int end = num + k + 1;

            Integer l = map.get(start);
            if (l == null) {
                l = 0;
            }

            Integer r = map.get(end);
            if (r == null) {
                r = M;
            }

            counts[l] += 1;
            counts[r] -= 1;

            Integer idx = map.get(num);
            if (idx != null) {
                adj[idx] += 1;
            }
        }
        int[] freq = new int[M];
        freq[0] = counts[0];
        for (int i = 1; i < M; i++) {
            counts[i] += counts[i - 1];
            freq[i] = counts[i];
        }
        int max = 0;
        for (int i = 0; i < M; i++) {
            int totalAdjusted = freq[i] - adj[i];
            int frequency = adj[i] + Math.min(totalAdjusted, numOperations);
            if (frequency > max) {
                max = frequency;
            }
        }

        return max;
    }
}
",1447688057
eCtjNAHCiQ,eCtjNAHCiQ,98,3626,java,"class Solution {
    public int smallestNumber(int n, int t) {
        return check(n,t);
    }

    public int check(int n,int t){
        int temp = n;
        int prod = 1;
        while(temp>0) {
            prod *= temp%10;
            temp = temp/10;
        }
        if(prod%t == 0) return n;
        int ans = check(n+1,t);
        return ans;
    }
}",1447660480
eCtjNAHCiQ,eCtjNAHCiQ,98,3640,java,"class Solution {
    public int maxFrequency(int[] nums, int k, int numOperations) {
        TreeSet<Integer> set = new TreeSet<>();
        for (int num : nums) {
            set.add(num - k);
            set.add(num);
            set.add(num + k + 1);
        }
        List<Integer> list = new ArrayList<>(set);
        int M = list.size();

        HashMap<Integer, Integer> map = new HashMap<>();
        for (int i = 0; i < M; i++) {
            map.put(list.get(i), i);
        }

        int[] counts = new int[M + 1]; 
        int[] adj = new int[M];

        for (int num : nums) {
            int start = num - k;
            int end = num + k + 1;

            Integer l = map.get(start);
            if (l == null) {
                l = 0;
            }

            Integer r = map.get(end);
            if (r == null) {
                r = M;
            }

            counts[l] += 1;
            counts[r] -= 1;
            Integer idx = map.get(num);
            if (idx != null) {
                adj[idx] += 1;
            }
        }

        int[] freq = new int[M];
        freq[0] = counts[0];
        for (int i = 1; i < M; i++) {
            counts[i] += counts[i - 1];
            freq[i] = counts[i];
        }

        int max = 0;
        for (int i = 0; i < M; i++) {
            int totalAdjusted = freq[i] - adj[i];
            int frequency = adj[i] + Math.min(totalAdjusted, numOperations);
            if (frequency > max) {
                max = frequency;
            }
        }

        return max;
    }
}
",1447695537
Teemu Ryyti,delivery,99,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        sort(nums.begin(), nums.end());
        int mx = nums.back() + 1;
        vector<int> c(mx);
        for (auto x: nums) {
            ++c[x];
        }
        
        vector<int> t(mx + 1);
        for (int i = 0; i < mx; ++i) {
            t[i+1] = t[i] + c[i];
        }
        int ans = 0;
        for (int i = 0; i < mx; ++i) {
            int l = max(0, i - k);
            int r = min(mx - 1, i + k);
            int cur = c[i] + min(numOperations, t[r+1] - t[l] - c[i]);
            ans = max(ans, cur);
        }
        
        return ans;
    }
};",1447671378
Teemu Ryyti,delivery,99,3626,cpp,"class Solution {
public:
    int smallestNumber(int n, int t) {
        while(true) {
            int x = n;
            int s = 1;
            while(x) {
                s *= x % 10;
                x /= 10;
            }
            if (s % t == 0) {
                return n;
            }
            ++n;
        }
        return n;
    }
};",1447654700
Teemu Ryyti,delivery,99,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        sort(nums.begin(), nums.end());
        
        int l = 0, n = nums.size();
        int ans = 0;
        for (int r = 0; r < n; ++r) {
            while (nums[r] - nums[l] > 2 * k) {
                ++l;
            }
            int tot = r - l + 1;
            ans = max(ans, min(tot, numOperations));
        }
        
        map<int, int> m;
        for (auto x: nums) {
            ++m[x];
        } 
        
        l = 0;
        int r = 0;
        for (int i = 0; i < n; ++i) {
            while (r + 1 < n && nums[r + 1] - nums[i] <= k) {
                ++r;
            }
            while (nums[i] - nums[l] > k) {
                ++l;
            }
            int tot = r - l + 1;
            ans = max(ans, m[nums[i]] + min(numOperations, tot - m[nums[i]]));
        }
        
        return ans;
    }
};",1447704563
jakao,jakao,101,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        map<int, int> sweep;
        for(int i = 0; i < nums.size(); i++){
            sweep[nums[i] - k]++;
            sweep[nums[i] + k + 1]--;
        }
        int now = 0, mx = 0;
        
        for(auto i : sweep){
            now += i.second;
            mx = max(mx, now);
        }
        mx = min(mx, numOperations);
        
        map<int, int> mp;
        for(int i : nums){
            mp[i] ++;
        }
        sort(nums.begin(), nums.end());
        vector<int> ind = nums;
        ind.resize(unique(ind.begin(), ind.end()) - ind.begin());
        int ans = 1;
        for(int i : ind){
            int r = upper_bound(nums.begin(), nums.end(), i+k) - upper_bound(nums.begin(), nums.end(), i);
            int l = lower_bound(nums.begin(), nums.end(), i) - lower_bound(nums.begin(), nums.end(), i-k);
            // cout << i << "" : "" << l << "" "" << r << "" : "" << min(r + l, numOperations) + mp[i] << endl;
            ans = max(ans, min(r + l, numOperations) + mp[i]);
        }
        return max(mx, ans);
    }
};",1447685248
jakao,jakao,101,3626,cpp,"class Solution {
public:
    int smallestNumber(int n, int t) {
        for(int i = n;; i++){
            int x = i, p = 1;
            while(x){
                p *= x%10;
                x/=10;
            }
            if(p % t == 0){
                return i;
            }
        }
    }
};",1447656868
jakao,jakao,101,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        map<int, int> sweep;
        for(int i = 0; i < nums.size(); i++){
            sweep[nums[i] - k]++;
            sweep[nums[i] + k + 1]--;
        }
        int now = 0, mx = 0;
        
        for(auto i : sweep){
            now += i.second;
            mx = max(mx, now);
        }
        mx = min(mx, numOperations);
        
        map<int, int> mp;
        for(int i : nums){
            mp[i] ++;
        }
        sort(nums.begin(), nums.end());
        vector<int> ind = nums;
        ind.resize(unique(ind.begin(), ind.end()) - ind.begin());
        int ans = 1;
        for(int i : ind){
            int r = upper_bound(nums.begin(), nums.end(), i+k) - upper_bound(nums.begin(), nums.end(), i);
            int l = lower_bound(nums.begin(), nums.end(), i) - lower_bound(nums.begin(), nums.end(), i-k);
            // cout << i << "" : "" << l << "" "" << r << "" : "" << min(r + l, numOperations) + mp[i] << endl;
            ans = max(ans, min(r + l, numOperations) + mp[i]);
        }
        return max(mx, ans);
    }
};",1447685855
fpeterfalvi,fpeterfalvi,102,3622,java,"import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

class Solution {
    public int maxFrequency(int[] nums, int k, int numOperations) {
        Map<Integer, Integer> freqs = new HashMap<>();
        for (int num : nums) {
            freqs.put(num, freqs.getOrDefault(num, 0) + 1);
        }
        Arrays.sort(nums);
        int result = 0;
        List<Integer> toCheck = new ArrayList<>();
        for (int num : nums) {
            toCheck.add(num);
            toCheck.add(num - k);
            toCheck.add(num + k);
        }
        for (int num : toCheck) {
            int left = lowerBound(nums, (int)Math.max((long)num - k, Integer.MIN_VALUE));
            int right = upperBound(nums, (int)Math.min((long)num + k, Integer.MAX_VALUE)) - 1;
            int interval = (Math.min(right - left + 1, freqs.getOrDefault(num, 0) + numOperations));
            result = Math.max(result, interval);
        }
        return result;
    }

    static int lowerBound(int[] arr, int val) {
        int index;
        int step;
        int first = 0;
        int count = arr.length;
        while (count > 0) {
            step = count / 2;
            index = first + step;
            if (arr[index] < val) {
                first = index + 1;
                count -= step + 1;
            } else {
                count = step;
            }
        }
        return first;
    }

    static int upperBound(int[] arr, int val) {
        int index;
        int step;
        int first = 0;
        int count = arr.length;
        while (count > 0) {
            step = count / 2;
            index = first + step;
            if (arr[index] <= val) {
                first = index + 1;
                count -= step + 1;
            } else {
                count = step;
            }
        }
        return first;
    }
}",1447685992
fpeterfalvi,fpeterfalvi,102,3626,java,"class Solution {
    public int smallestNumber(int n, int t) {
        int x = n;
        while(digitProd(x) % t != 0) {
            x++;
        }
        return x;
    }
    
    int digitProd(int x) {
        int prod = 1;
        for (char c : Integer.toString(x).toCharArray()) {
            prod *= c - '0';
        }
        return prod;
    }
}",1447654429
fpeterfalvi,fpeterfalvi,102,3640,java,"import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

class Solution {
    public int maxFrequency(int[] nums, int k, int numOperations) {
        Map<Integer, Integer> freqs = new HashMap<>();
        for (int num : nums) {
            freqs.put(num, freqs.getOrDefault(num, 0) + 1);
        }
        Arrays.sort(nums);
        int result = 0;
        List<Integer> toCheck = new ArrayList<>();
        for (int num : nums) {
            toCheck.add(num);
            toCheck.add(num - k);
            toCheck.add(num + k);
        }
        for (int num : toCheck) {
            int left = lowerBound(nums, (int)Math.max((long)num - k, Integer.MIN_VALUE));
            int right = upperBound(nums, (int)Math.min((long)num + k, Integer.MAX_VALUE)) - 1;
            int interval = (Math.min(right - left + 1, freqs.getOrDefault(num, 0) + numOperations));
            result = Math.max(result, interval);
        }
        return result;
    }

    static int lowerBound(int[] arr, int val) {
        int index;
        int step;
        int first = 0;
        int count = arr.length;
        while (count > 0) {
            step = count / 2;
            index = first + step;
            if (arr[index] < val) {
                first = index + 1;
                count -= step + 1;
            } else {
                count = step;
            }
        }
        return first;
    }

    static int upperBound(int[] arr, int val) {
        int index;
        int step;
        int first = 0;
        int count = arr.length;
        while (count > 0) {
            step = count / 2;
            index = first + step;
            if (arr[index] <= val) {
                first = index + 1;
                count -= step + 1;
            } else {
                count = step;
            }
        }
        return first;
    }
}",1447684948
Pratyush Raman,therealpratyushraman,103,3622,java,"import java.util.*;

class Solution {
    public int maxFrequency(int[] nums, int k, int numOperations) {
        Map<Integer, Integer> freqMap = new HashMap<>();
        List<int[]> events = new ArrayList<>();
        for (int num : nums) {
            freqMap.put(num, freqMap.getOrDefault(num, 0) + 1);
            events.add(new int[]{num - k, 1});
            events.add(new int[]{num + k + 1, -1});
        }

        Set<Integer> tSet = new HashSet<>();
        for (int num : nums) {
            tSet.add(num);
        }
        for (int[] event : events) {
            tSet.add(event[0]);
        }

        List<Integer> tList = new ArrayList<>(tSet);
        Collections.sort(tList);
        events.sort((a, b) -> Integer.compare(a[0], b[0]));

        int coverage = 0, idx = 0, maxFreq = 0;
        int n = events.size();
        for (int t : tList) {
            while (idx < n && events.get(idx)[0] <= t) {
                coverage += events.get(idx)[1];
                idx++;
            }
            int freq = freqMap.getOrDefault(t, 0);
            int possibleFreq = freq + Math.min(numOperations, coverage - freq);
            maxFreq = Math.max(maxFreq, possibleFreq);
        }
        return maxFreq;
    }
}
",1447674666
Pratyush Raman,therealpratyushraman,103,3626,java,"class Solution {
    public int smallestNumber(int n, int t) {
        for (int i = n;; i++) {
            int prod = 1, temp = i;
            if (i == 0) prod = 0;
            while (temp > 0) {
                int d = temp % 10;
                if (d == 0) {
                    prod = 0;
                    break;
                }
                prod *= d;
                temp /= 10;
            }
            if (prod % t == 0) return i;
        }
    }
}
",1447654929
Pratyush Raman,therealpratyushraman,103,3640,java,"import java.util.*;

class Solution {
    public int maxFrequency(int[] nums, int k, int numOperations) {
        Map<Integer, Integer> freqMap = new HashMap<>();
        List<int[]> events = new ArrayList<>();
        Set<Integer> positions = new HashSet<>();
        for (int num : nums) {
            freqMap.put(num, freqMap.getOrDefault(num, 0) + 1);
            events.add(new int[]{num - k, 1});
            events.add(new int[]{num + k + 1, -1});
            positions.add(num);
            positions.add(num - k);
            positions.add(num + k + 1);
        }
        List<Integer> tList = new ArrayList<>(positions);
        Collections.sort(tList);
        events.sort((a, b) -> Integer.compare(a[0], b[0]));
        int coverage = 0, idx = 0, maxFreq = 0, n = events.size();
        for (int t : tList) {
            while (idx < n && events.get(idx)[0] <= t) {
                coverage += events.get(idx)[1];
                idx++;
            }
            int freq = freqMap.getOrDefault(t, 0);
            int possibleFreq = freq + Math.min(numOperations, coverage - freq);
            maxFreq = Math.max(maxFreq, possibleFreq);
        }
        return maxFreq;
    }
}
",1447686022
17ucs031,17ucs031,104,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        map<int, int> mp;
        vector<int> f(1e5 + 1, 0);
        
        int mini = 2e5, maxi = -1e5, curr = 0;
        for(int i = 0; i < nums.size(); i ++) {
            mini = min(mini, nums[i] - k);
            maxi = max(maxi, nums[i] + k);
            curr = max(curr, nums[i]);
            f[nums[i]] ++;
            mp[nums[i] - k] ++, mp[nums[i]+k+1] --;
        }
        
        int ans = 0;
        for(int i = mini; i <= maxi; i ++) {
            mp[i] += mp[i-1];
            int mc = (i >= 1 and i <= curr ? f[i] : 0);
            int extra = mp[i] - mc;
            extra = min(extra, numOperations);
            // if(i >= 1 and i <= 5)
            //     cout << i << "" "" << mc + extra << endl;
            ans = max(ans, mc + extra);
        }
        return ans;
    }
};",1447678748
17ucs031,17ucs031,104,3626,cpp,"class Solution {
public:
    bool f(int n, int t, int p = 1) {
        string s = to_string(n);
        for(auto it : s)    p *= it - '0';
        return p%t == 0;
    }
    int smallestNumber(int n, int t) {
        for(int i = n; i <= 1e7; i++) {
            if(f(i, t))     return i;
        }
        return -1;
    }
};",1447653218
17ucs031,17ucs031,104,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        map<int, int> mp;
        map<int, int> f;
        
        int mini = 2e9, maxi = -1e9, curr = 0;
        for(int i = 0; i < nums.size(); i ++) {
            mini = min(mini, nums[i] - k);
            maxi = max(maxi, nums[i] + k);
            curr = max(curr, nums[i]);
            
            f[nums[i]] ++;
            mp[nums[i] - k] ++, mp[nums[i]+k+1] --;
            mp[nums[i]] += 0;
        }
        
        int ans = 0;
        // for(int i = mini; i <= maxi; i ++) {
        
        int last = 0;
        for(auto &it : mp) {
            it.second += last;

            int mc = (it.first >= 1 and it.first <= curr ? f[it.first] : 0);
            int extra = it.second - mc;
            extra = min(extra, numOperations);

            //cout << it.first << "" "" << it.second << endl; 
            //"" "" << mc + extra << endl;
            ans = max(ans, mc + extra);
            
            last = it.second;
        }
        return ans;
    }
};",1447696106
Hell,Vinayak_Gupta_20,105,3622,java,"class Solution {
    public int maxFrequency(int[] nums, int k, int op) {
        Arrays.sort(nums);
        int n = nums.length;
        Map<Integer,Integer> mp = new HashMap<>();
        int ans = 1;
        for(int x:nums) mp.put(x,mp.getOrDefault(x,0)+1);
        for(int i=0;i<n;i++){
            int x = nums[i];
            int l = findLarge(nums,x-k);
            int r = findSmall(nums,x+k);
            int len = r-l+1;
            int diff = len - mp.get(x);
            int extra = Math.min(op,diff);
            ans = Math.max(ans,extra+mp.get(x));
            int left = findLarge(nums,x-2*k);
            int right = findSmall(nums,x+k*2);
            int st = findLarge(nums,x);
            int end = findSmall(nums,x);
            int len2 = end-left+1;
            int len3 = right-st+1;
            ans = Math.max(ans,Math.min(op,len2));
            ans = Math.max(ans,Math.min(op,len3));
        }
        return ans;
    }

    public int findLarge(int[] nums, int req){
        int st = 0;
        int end = nums.length-1;
        int ans = -1;
        while(st<=end){
            int mid = st+(end-st)/2;
            if(nums[mid]>=req){
                ans = mid;
                end = mid-1;
            }
            else st = mid+1;
        }
        return ans;
    }

    public int findSmall(int[] nums, int req){
        int st = 0;
        int end = nums.length-1;
        int ans = -1;
        while(st<=end){
            int mid = st+(end-st)/2;
            if(nums[mid]<=req){
                ans = mid;
                st = mid+1;
            }
            else end = mid-1;
        }
        return ans;
    }
}",1447686663
Hell,Vinayak_Gupta_20,105,3626,java,"class Solution {
    public int smallestNumber(int n, int t) {
        while(n<100000){
            int p = 1;
            int x = n;
            while(x>0) {
                p *= x%10;
                x/=10;
            }
            if(p%t==0) return n;
            n++;
        }
        return -1;
    }
}",1447656282
Hell,Vinayak_Gupta_20,105,3640,java,"class Solution {
    public int maxFrequency(int[] nums, long k, long op) {
        Arrays.sort(nums);
        int n = nums.length;
        Map<Integer, Long> mp = new HashMap<>();
        long ans = 1;
        for (int x : nums) mp.put(x, mp.getOrDefault(x, 0L) + 1);
        for (int i = 0; i < n; i++) {
            int x = nums[i];
            long l = findLarge(nums, x - k);
            long r = findSmall(nums, x + k);
            long len = r - l + 1;
            long diff = len - mp.get(x);
            long extra = Math.min(op, diff);
            ans = Math.max(ans, extra + mp.get(x));
            long left = findLarge(nums, x - 2 * k);
            long right = findSmall(nums, x + 2 * k);
            long st = findLarge(nums, x);
            long end = findSmall(nums, x);
            long len2 = end - left + 1;
            long len3 = right - st + 1;
            ans = Math.max(ans, Math.min(op, len2));
            ans = Math.max(ans, Math.min(op, len3));
        }
        return (int) ans;
    }

    public long findLarge(int[] nums, long req) {
        int st = 0;
        int end = nums.length - 1;
        long ans = -1;
        while (st <= end) {
            int mid = st + (end - st) / 2;
            if (nums[mid] >= req) {
                ans = mid;
                end = mid - 1;
            } else st = mid + 1;
        }
        return ans;
    }

    public long findSmall(int[] nums, long req) {
        int st = 0;
        int end = nums.length - 1;
        long ans = -1;
        while (st <= end) {
            int mid = st + (end - st) / 2;
            if (nums[mid] <= req) {
                ans = mid;
                st = mid + 1;
            } else end = mid - 1;
        }
        return ans;
    }
}
",1447696330
luciaa,luciaa,106,3622,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        cnt = Counter(nums)
        nums.sort()
        res = 0
        for tgt in range(max(nums) + 1):
            l, r = bisect_left(nums, tgt - k), bisect_right(nums, tgt + k)
            res = max(res, min(r - l, cnt[tgt] + numOperations))
        return res
        ",1447686939
luciaa,luciaa,106,3626,python3,"class Solution:
    def smallestNumber(self, n: int, t: int) -> int:
        cur = n
        while True:
            p = reduce(operator.mul, map(int, str(cur)), 1)
            if p % t == 0:
                return cur
            cur += 1
        ",1447661289
luciaa,luciaa,106,3640,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        cnt = Counter(nums)
        nums.sort()
        res = 0
        for e in nums:
            for tgt in [e - k, e, e + k]:
                l, r = bisect_left(nums, tgt - k), bisect_right(nums, tgt + k)
                res = max(res, min(r - l, cnt[tgt] + numOperations))
        return res",1447696630
Andrey,A_Le_K,108,3622,cpp,"static const int __ = []() { std::ios::sync_with_stdio(false); std::cin.tie(nullptr); std::cout.tie(nullptr); return 0; }();

typedef long long ll; typedef unsigned int ui; typedef unsigned long long ull; typedef pair<int ,int> pii; typedef pair<ll, ll> pll; typedef double rl;
typedef pii int2; typedef tuple<int, int, int> int3; typedef tuple<int, int, int, int> int4; typedef tuple<int, int, int, int, int> int5;
typedef pll ll2; typedef tuple<ll, ll, ll> ll3; typedef tuple<ll, ll, ll, ll> ll4; typedef tuple<ll, ll, ll, ll, ll> ll5;
typedef vector<int> vi; typedef vector<pii> vii; typedef vector<ll> vll; typedef vector<pll> vll_ll; typedef vector<vi> vvi; typedef vector<vii> vvii; typedef vector<vll> vvll; typedef vector<vll_ll> vvll_ll;

#define pb push_back
#define mp make_pair
#define eb emplace_back
#define xx first
#define yy second
#define FOR(i,N) for(int i=0; i<N; i++)
#define g0(x) get<0>(x)
#define g1(x) get<1>(x)
#define g2(x) get<2>(x)
#define g3(x) get<3>(x)
#define g4(x) get<4>(x)

template<typename A> string to_string(A* ptr) { stringstream ss; ss << ""0x"" << std::setw(16) << std::setfill ('0') << std::hex << (uint64_t)(uintptr_t)ptr; return ss.str(); }
string to_string(char c) { return ((string)""'""+c)+ ""'""; }
template <typename A, typename B> string to_string(pair<A, B> p);
template <typename A, typename B, typename C> string to_string(tuple<A, B, C> p);
template <typename A, typename B, typename C, typename D> string to_string(tuple<A, B, C, D> p);
string to_string(const string& s) { return '""' + s + '""'; }
string to_string(const char* s) { return to_string((string) s); }
string to_string(bool b) { return (b ? ""true"" : ""false""); }
string to_string(vector<bool> v) {
    bool first = true; string res = ""{"";
	for (int i = 0; i < static_cast<int>(v.size()); i++) { if (!first) { res += "", ""; } first = false; res += to_string(v[i]); }
	res += ""}""; return res;
}
template <size_t N> string to_string(bitset<N> v) { string res = """"; for (size_t i = 0; i < N; i++) { res += static_cast<char>('0' + v[i]); } return res; }
template <typename A> string to_string(A v) {
	bool first = true; string res = ""{"";
	for (const auto &x : v) {
		if (!first) { res += "", ""; }
		first = false; res += to_string(x);
	}
	res += ""}""; return res;
}
template <typename A, typename B> string to_string(pair<A, B> p) { return ""("" + to_string(p.first) + "", "" + to_string(p.second) + "")""; }
template <typename A, typename B, typename C> string to_string(tuple<A, B, C> p) { return ""("" + to_string(get<0>(p)) + "", "" + to_string(get<1>(p)) + "", "" + to_string(get<2>(p)) + "")""; }
template <typename A, typename B, typename C, typename D>
string to_string(tuple<A, B, C, D> p) { return ""("" + to_string(get<0>(p)) + "", "" + to_string(get<1>(p)) + "", "" + to_string(get<2>(p)) + "", "" + to_string(get<3>(p)) + "")""; }
void debug_out() { cout << endl; }
template <typename Head, typename... Tail> void debug_out(Head H, Tail... T) { cout << "" "" << to_string(H); debug_out(T...); }

#define popc __builtin_popcountll
//#define popc __builtin_popcount
//#define clz __builtin_clzll
//#define clz __builtin_clz
inline int bitLength(uint32_t val) { return 32 - __builtin_clz  (val); }
inline int bitLength(uint64_t val) { return 64 - __builtin_clzll(val); }

template<typename T> inline void domax(T& A, const T& B) { A=max(A, B); }
template<typename T> inline void domin(T& A, const T& B) { A=min(A, B); }

template<typename T>
inline T true_mod(T A, T B)
{
    assert(B>=1);
    A%=B;
    if(A<0) A+=B;
    return A;
}

template<typename T>
inline T div_down(T A, T B)
{
    return (A-true_mod(A,B))/B;
}

template<typename T>
inline T div_up(T A, T B)
{
    return div_down(A+B-1, B);
}

#define all(x) (x).begin(), (x).end()

#if 0
#define dbg(...) cout << ""["" << #__VA_ARGS__ << ""]:"", debug_out(__VA_ARGS__)
#else
#define dbg(...) 42
#endif


class Solution {
public:
    int maxFrequency(vector<int>& a, int k, int numOperations) {
        const int n=a.size();
        dbg(""============="");
        dbg(n);
        
        vector<ll> A(n);
        FOR(i, n) A[i]=a[i];
        ll K=k;
        
        sort(all(A));
        
        int result=0;
        const int mn=*min_element(all(a));
        const int mx=*max_element(all(a));
        
        map<int, int> MA;
        FOR(i, n) MA[a[i]]++;
        
        
        //for(int l=0, i=0, r=0; i<n; i++) {
        for(int l=0, i=mn, r=0; i<=mx; i++) {
            //while(l<n && -A[l]+A[i]>K)  l++;
            //while(r<n && -A[i]+A[r]<=K) r++;
            
            while(l<n && -A[l]+i>K)  l++;
            while(r<n && -i+A[r]<=K) r++;
            
            const int len_segment=r-l;
            //const int max_get=1+numOperations;
            
            auto it=MA.find(i);
            const int cnt=it==MA.end()?0:it->second;
            
            const int need_operations=r-l-cnt;
            const int can_make_operations=cnt+min(need_operations, numOperations);
            
            dbg(i, cnt, need_operations, can_make_operations);
            
            
            //const int curr=min(len_segment, max_get);
            domax(result, can_make_operations);
        }
        
        
        
        
        return result;
    }
};",1447679791
Andrey,A_Le_K,108,3626,cpp,"static const int __ = []() { std::ios::sync_with_stdio(false); std::cin.tie(nullptr); std::cout.tie(nullptr); return 0; }();

typedef long long ll; typedef unsigned int ui; typedef unsigned long long ull; typedef pair<int ,int> pii; typedef pair<ll, ll> pll; typedef double rl;
typedef pii int2; typedef tuple<int, int, int> int3; typedef tuple<int, int, int, int> int4; typedef tuple<int, int, int, int, int> int5;
typedef pll ll2; typedef tuple<ll, ll, ll> ll3; typedef tuple<ll, ll, ll, ll> ll4; typedef tuple<ll, ll, ll, ll, ll> ll5;
typedef vector<int> vi; typedef vector<pii> vii; typedef vector<ll> vll; typedef vector<pll> vll_ll; typedef vector<vi> vvi; typedef vector<vii> vvii; typedef vector<vll> vvll; typedef vector<vll_ll> vvll_ll;

#define pb push_back
#define mp make_pair
#define eb emplace_back
#define xx first
#define yy second
#define FOR(i,N) for(int i=0; i<N; i++)
#define g0(x) get<0>(x)
#define g1(x) get<1>(x)
#define g2(x) get<2>(x)
#define g3(x) get<3>(x)
#define g4(x) get<4>(x)

template<typename A> string to_string(A* ptr) { stringstream ss; ss << ""0x"" << std::setw(16) << std::setfill ('0') << std::hex << (uint64_t)(uintptr_t)ptr; return ss.str(); }
string to_string(char c) { return ((string)""'""+c)+ ""'""; }
template <typename A, typename B> string to_string(pair<A, B> p);
template <typename A, typename B, typename C> string to_string(tuple<A, B, C> p);
template <typename A, typename B, typename C, typename D> string to_string(tuple<A, B, C, D> p);
string to_string(const string& s) { return '""' + s + '""'; }
string to_string(const char* s) { return to_string((string) s); }
string to_string(bool b) { return (b ? ""true"" : ""false""); }
string to_string(vector<bool> v) {
    bool first = true; string res = ""{"";
	for (int i = 0; i < static_cast<int>(v.size()); i++) { if (!first) { res += "", ""; } first = false; res += to_string(v[i]); }
	res += ""}""; return res;
}
template <size_t N> string to_string(bitset<N> v) { string res = """"; for (size_t i = 0; i < N; i++) { res += static_cast<char>('0' + v[i]); } return res; }
template <typename A> string to_string(A v) {
	bool first = true; string res = ""{"";
	for (const auto &x : v) {
		if (!first) { res += "", ""; }
		first = false; res += to_string(x);
	}
	res += ""}""; return res;
}
template <typename A, typename B> string to_string(pair<A, B> p) { return ""("" + to_string(p.first) + "", "" + to_string(p.second) + "")""; }
template <typename A, typename B, typename C> string to_string(tuple<A, B, C> p) { return ""("" + to_string(get<0>(p)) + "", "" + to_string(get<1>(p)) + "", "" + to_string(get<2>(p)) + "")""; }
template <typename A, typename B, typename C, typename D>
string to_string(tuple<A, B, C, D> p) { return ""("" + to_string(get<0>(p)) + "", "" + to_string(get<1>(p)) + "", "" + to_string(get<2>(p)) + "", "" + to_string(get<3>(p)) + "")""; }
void debug_out() { cout << endl; }
template <typename Head, typename... Tail> void debug_out(Head H, Tail... T) { cout << "" "" << to_string(H); debug_out(T...); }

#define popc __builtin_popcountll
//#define popc __builtin_popcount
//#define clz __builtin_clzll
//#define clz __builtin_clz
inline int bitLength(uint32_t val) { return 32 - __builtin_clz  (val); }
inline int bitLength(uint64_t val) { return 64 - __builtin_clzll(val); }

template<typename T> inline void domax(T& A, const T& B) { A=max(A, B); }
template<typename T> inline void domin(T& A, const T& B) { A=min(A, B); }

template<typename T>
inline T true_mod(T A, T B)
{
    assert(B>=1);
    A%=B;
    if(A<0) A+=B;
    return A;
}

template<typename T>
inline T div_down(T A, T B)
{
    return (A-true_mod(A,B))/B;
}

template<typename T>
inline T div_up(T A, T B)
{
    return div_down(A+B-1, B);
}

#define all(x) (x).begin(), (x).end()

#if 1
#define dbg(...) cout << ""["" << #__VA_ARGS__ << ""]:"", debug_out(__VA_ARGS__)
#else
#define dbg(...) 42
#endif

ll prod(ll n) {
    ll r=1;
    while(n) {
        r=r*(n%10);
        n/=10;
    }
    return r;
}

class Solution {
public:
    int smallestNumber(int n, int t) {
        for(ll i=n; true; i++) {
            if(prod(i)%t==0) return i;
        }
    }
};",1447653481
Andrey,A_Le_K,108,3640,cpp,"static const int __ = []() { std::ios::sync_with_stdio(false); std::cin.tie(nullptr); std::cout.tie(nullptr); return 0; }();

typedef long long ll; typedef unsigned int ui; typedef unsigned long long ull; typedef pair<int ,int> pii; typedef pair<ll, ll> pll; typedef double rl;
typedef pii int2; typedef tuple<int, int, int> int3; typedef tuple<int, int, int, int> int4; typedef tuple<int, int, int, int, int> int5;
typedef pll ll2; typedef tuple<ll, ll, ll> ll3; typedef tuple<ll, ll, ll, ll> ll4; typedef tuple<ll, ll, ll, ll, ll> ll5;
typedef vector<int> vi; typedef vector<pii> vii; typedef vector<ll> vll; typedef vector<pll> vll_ll; typedef vector<vi> vvi; typedef vector<vii> vvii; typedef vector<vll> vvll; typedef vector<vll_ll> vvll_ll;

#define pb push_back
#define mp make_pair
#define eb emplace_back
#define xx first
#define yy second
#define FOR(i,N) for(int i=0; i<N; i++)
#define g0(x) get<0>(x)
#define g1(x) get<1>(x)
#define g2(x) get<2>(x)
#define g3(x) get<3>(x)
#define g4(x) get<4>(x)

template<typename A> string to_string(A* ptr) { stringstream ss; ss << ""0x"" << std::setw(16) << std::setfill ('0') << std::hex << (uint64_t)(uintptr_t)ptr; return ss.str(); }
string to_string(char c) { return ((string)""'""+c)+ ""'""; }
template <typename A, typename B> string to_string(pair<A, B> p);
template <typename A, typename B, typename C> string to_string(tuple<A, B, C> p);
template <typename A, typename B, typename C, typename D> string to_string(tuple<A, B, C, D> p);
string to_string(const string& s) { return '""' + s + '""'; }
string to_string(const char* s) { return to_string((string) s); }
string to_string(bool b) { return (b ? ""true"" : ""false""); }
string to_string(vector<bool> v) {
    bool first = true; string res = ""{"";
	for (int i = 0; i < static_cast<int>(v.size()); i++) { if (!first) { res += "", ""; } first = false; res += to_string(v[i]); }
	res += ""}""; return res;
}
template <size_t N> string to_string(bitset<N> v) { string res = """"; for (size_t i = 0; i < N; i++) { res += static_cast<char>('0' + v[i]); } return res; }
template <typename A> string to_string(A v) {
	bool first = true; string res = ""{"";
	for (const auto &x : v) {
		if (!first) { res += "", ""; }
		first = false; res += to_string(x);
	}
	res += ""}""; return res;
}
template <typename A, typename B> string to_string(pair<A, B> p) { return ""("" + to_string(p.first) + "", "" + to_string(p.second) + "")""; }
template <typename A, typename B, typename C> string to_string(tuple<A, B, C> p) { return ""("" + to_string(get<0>(p)) + "", "" + to_string(get<1>(p)) + "", "" + to_string(get<2>(p)) + "")""; }
template <typename A, typename B, typename C, typename D>
string to_string(tuple<A, B, C, D> p) { return ""("" + to_string(get<0>(p)) + "", "" + to_string(get<1>(p)) + "", "" + to_string(get<2>(p)) + "", "" + to_string(get<3>(p)) + "")""; }
void debug_out() { cout << endl; }
template <typename Head, typename... Tail> void debug_out(Head H, Tail... T) { cout << "" "" << to_string(H); debug_out(T...); }

#define popc __builtin_popcountll
//#define popc __builtin_popcount
//#define clz __builtin_clzll
//#define clz __builtin_clz
inline int bitLength(uint32_t val) { return 32 - __builtin_clz  (val); }
inline int bitLength(uint64_t val) { return 64 - __builtin_clzll(val); }

template<typename T> inline void domax(T& A, const T& B) { A=max(A, B); }
template<typename T> inline void domin(T& A, const T& B) { A=min(A, B); }

template<typename T>
inline T true_mod(T A, T B)
{
    assert(B>=1);
    A%=B;
    if(A<0) A+=B;
    return A;
}

template<typename T>
inline T div_down(T A, T B)
{
    return (A-true_mod(A,B))/B;
}

template<typename T>
inline T div_up(T A, T B)
{
    return div_down(A+B-1, B);
}

#define all(x) (x).begin(), (x).end()

#if 0
#define dbg(...) cout << ""["" << #__VA_ARGS__ << ""]:"", debug_out(__VA_ARGS__)
#else
#define dbg(...) 42
#endif


class Solution {
public:
    int maxFrequency(vector<int>& a, int k, int numOperations) {
        const int n=a.size();
        dbg(""============="");
        dbg(n);
        
        vector<ll> A(n);
        FOR(i, n) A[i]=a[i];
        ll K=k;
        
        vector<ll> good; good.reserve(3*n);
        FOR(i, n) {
            good.pb(A[i]);
            good.pb(A[i]-K);
            good.pb(-A[i]+K);
        }
        
        sort(all(A));
        sort(all(good));
        
        
        int result=0;
        const int mn=*min_element(all(a));
        const int mx=*max_element(all(a));
        
        map<int, int> MA;
        FOR(i, n) MA[a[i]]++;
        
        
        const int SZ_GOOD=good.size();
        
        //for(int l=0, i=0, r=0; i<n; i++) {
        //for(int l=0, i=mn, r=0; i<=mx; i++) {
        for(int l=0, i=0, r=0; i<SZ_GOOD; i++) {
            //while(l<n && -A[l]+A[i]>K)  l++;
            //while(r<n && -A[i]+A[r]<=K) r++;
            const ll CHOICE=good[i];
            
            while(l<n && -A[l]+CHOICE>K)  l++;
            while(r<n && -CHOICE+A[r]<=K) r++;
            
            const int len_segment=r-l;
            //const int max_get=1+numOperations;
            
            //auto it=MA.find(i);
            auto it=MA.find(CHOICE);
            const int cnt=it==MA.end()?0:it->second;
            
            const int need_operations=r-l-cnt;
            const int can_make_operations=cnt+min(need_operations, numOperations);
            
            dbg(i, cnt, need_operations, can_make_operations);
            
            
            //const int curr=min(len_segment, max_get);
            domax(result, can_make_operations);
        }
        
        
        
        
        return result;
    }
};",1447687241
Tudor Buzu,Tudor67,109,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        const int N = nums.size();
        const int MIN_NUM = *min_element(nums.begin(), nums.end());
        const int MAX_NUM = *max_element(nums.begin(), nums.end());
        
        int res = 0;
        
        sort(nums.begin(), nums.end());
        
        vector<int> f(MAX_NUM + 1);
        for(int num: nums){
            f[num] += 1;
        }
        
        for(int num = MIN_NUM; num <= MAX_NUM; ++num){
            int l = lower_bound(nums.begin(), nums.end(), num - k) - nums.begin();
            int r = upper_bound(nums.begin(), nums.end(), num + k) - nums.begin();
            
            int elems = r - l;
            if(elems - f[num] > numOperations){
                elems = f[num] + numOperations;
            }
            
            res = max(res, elems);
        }
        
        
        return res;
    }
};",1447679786
Tudor Buzu,Tudor67,109,3626,cpp,"class Solution {
public:
    int smallestNumber(int n, int t) {
        while(true){
            string s = to_string(n);
            long long prod = 1;
            for(char c: s){
                int digit = c - '0';
                prod *= digit;
            }
            
            if(prod % t == 0){
                return n;
            }
            
            n += 1;
        }
        
        return -1;
    }
};",1447654174
Tudor Buzu,Tudor67,109,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& innums, int k, int numOperations) {
        vector<long long> nums(innums.size());
        for(int i = 0; i < (int)innums.size(); ++i){
            nums[i] = innums[i];
        }
        
        const int N = nums.size();
        
        int res = 0;
        
        sort(nums.begin(), nums.end());
        
        map<long long, int> f;
        for(int num: nums){
            f[num] += 1;
        }
        
        vector<long long> candidates(3 * N);
        for(int i = 0; i < N; ++i){
            candidates[i] = nums[i];
            candidates[i + N] = nums[i] - k;
            candidates[i + 2 * N] = nums[i] + k;
        }
        
        for(long long num: candidates){
            int l = lower_bound(nums.begin(), nums.end(), num - k) - nums.begin();
            int r = upper_bound(nums.begin(), nums.end(), num + k) - nums.begin();
            
            int elems = r - l;
            int fNum = (f.count(num) ? f[num] : 0);
            if(elems - fNum > numOperations){
                elems = fNum + numOperations;
            }
            
            res = max(res, elems);
        }
        
        
        return res;
    }
};",1447706164
Dmitrii Samoilov,whoawhoawhoa,111,3622,java,"class Solution {
    public int maxFrequency(int[] nums, int k, int numOperations) {
        List<long[]> events = new ArrayList<>();
        for (int i : nums) {
            events.add(new long[] {i - k, 1});
            events.add(new long[] {i, 0});
            events.add(new long[] {i + k + 1, -1});
        }
        events.sort((a, b) -> a[0] == b[0] ? Long.compare(a[1], b[1]) : Long.compare(a[0], b[0]));
        long res = 0, current = 0, real = 0, pos = 0;
        for (long[] e : events) {
            if (e[0] > pos) {
                current += real;
                real = 0;
                pos = e[0];
            }
            if (e[1] == 0) {
                real++;
                current--;
            } else {
                current += e[1];
            }
            // System.out.println(e[0] + "" "" + e[1] + "" "" + current + "" "" + real);
            res = Math.max(res, Math.min(current, numOperations) + real);
        }
        return (int) res;
    }
}",1447704091
Dmitrii Samoilov,whoawhoawhoa,111,3626,java,"class Solution {
    public int smallestNumber(int n, int t) {
        for (int i = n; i < n + 10; i++) {
            // System.out.println(prod(i))
            if (prod(i) % t == 0) {
                return i;
            }
        }
        return n + 10;
    }

    static int prod(int n) {
        int res = 1;
        while (n != 0) {
            res *= n % 10;
            n /= 10;
        }
        return res;
    }
}",1447657587
Dmitrii Samoilov,whoawhoawhoa,111,3640,java,"class Solution {
    public int maxFrequency(int[] nums, int k, int numOperations) {
        List<long[]> events = new ArrayList<>();
        for (int i : nums) {
            events.add(new long[] { i - k, 1 });
            events.add(new long[] { i, 0 });
            events.add(new long[] { i + k + 1, -1 });
        }
        events.sort((a, b) -> a[0] == b[0] ? Long.compare(a[1], b[1]) : Long.compare(a[0], b[0]));
        long res = 0, current = 0, real = 0, pos = 0;
        for (long[] e : events) {
            if (e[0] > pos) {
                current += real;
                real = 0;
                pos = e[0];
            }
            if (e[1] == 0) {
                real++;
                current--;
            } else {
                current += e[1];
            }
            // System.out.println(e[0] + "" "" + e[1] + "" "" + current + "" "" + real);
            res = Math.max(res, Math.min(current, numOperations) + real);
        }
        return (int) res;
    }
}",1447706313
LTKJ,LTKJ,112,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        sort(nums.begin(), nums.end());
        int ans = 0;
        for (int i = 0, sz = nums.size(); i < sz; i++) {
            auto i1 = lower_bound(nums.begin(), nums.end(), nums[i]);
            auto i2 = upper_bound(nums.begin(), nums.end(), nums[i]);
            auto i3 = lower_bound(nums.begin(), nums.end(), nums[i] - k);
            auto i4 = upper_bound(nums.begin(), nums.end(), nums[i] + k);
            ans = max(ans, int(i2 - i1) + min(int((i4 - i3) - (i2 - i1)), numOperations));

            auto i5 = upper_bound(nums.begin(), nums.end(), nums[i] + 2 * k);
            ans = max(ans, min(int(i5 - i1), numOperations));
        }
        return ans;
    }
};",1447693366
LTKJ,LTKJ,112,3626,cpp,"class Solution {
    static int f(int x) {
        int prod = 1;
        while (x > 0) {
            prod *= x % 10;
            x /= 10;
        }
        return prod;
    }
public:
    int smallestNumber(int n, int t) {
        for (int i = n; i < 1000; i++) {
            if (f(i) % t == 0) {
                return i;
            }
        }
        return -1;
    }
};",1447659279
LTKJ,LTKJ,112,3640,cpp,"class Solution {
    using ll = long long;
public:
    int maxFrequency(vector<int>& n, ll k, ll numOperations) {
        vector<ll> nums(n.begin(), n.end());
        sort(nums.begin(), nums.end());
        ll ans = 0;
        for (int i = 0, sz = nums.size(); i < sz; i++) {
            auto i1 = lower_bound(nums.begin(), nums.end(), nums[i]);
            auto i2 = upper_bound(nums.begin(), nums.end(), nums[i]);
            auto i3 = lower_bound(nums.begin(), nums.end(), nums[i] - k);
            auto i4 = upper_bound(nums.begin(), nums.end(), nums[i] + k);
            ans = max(ans, ll(i2 - i1) + min(ll((i4 - i3) - (i2 - i1)), numOperations));

            auto i5 = upper_bound(nums.begin(), nums.end(), nums[i] + 2 * k);
            ans = max(ans, min(ll(i5 - i1), numOperations));
        }
        return ans;
    }
};",1447697989
Mohit Jaisal,mohitjaisal,114,3622,java,"import java.util.*;

class Solution {
    public int maxFrequency(int[] nums, int k, int numOperations) {
        int n = nums.length;
        Map<Integer, Integer> frequencyMap = new HashMap<>();
        List<int[]> eventList = new ArrayList<>();
        
        int i = 0;
        while (i < n) {
            int num = nums[i];
            frequencyMap.put(num, frequencyMap.getOrDefault(num, 0) + 1);
            eventList.add(new int[]{num - k, 1});
            eventList.add(new int[]{num + k + 1, -1});
            i++;
        }
        
        Set<Integer> uniquePoints = new HashSet<>();
        i = 0;
        while (i < eventList.size()) {
            uniquePoints.add(eventList.get(i)[0]);
            i++;
        }
        
        Iterator<Integer> keyIterator = frequencyMap.keySet().iterator();
        while (keyIterator.hasNext()) {
            uniquePoints.add(keyIterator.next());
        }

        eventList.sort(Comparator.comparingInt(a -> a[0]));
        
        int eventIndex = 0;
        int overlapCount = 0;
        int maxFrequency = 0;
        int currentCount = 0;
        
        Iterator<Integer> pointIterator = new TreeSet<>(uniquePoints).iterator();
        while (pointIterator.hasNext()) {
            int point = pointIterator.next();
            while (eventIndex < eventList.size() && eventList.get(eventIndex)[0] <= point) {
                overlapCount += eventList.get(eventIndex)[1];
                eventIndex++;
            }
            
            currentCount = frequencyMap.getOrDefault(point, 0);
            int achievableFrequency = currentCount + Math.min(numOperations, overlapCount - currentCount);
            maxFrequency = Math.max(maxFrequency, achievableFrequency);
        }
        
        return maxFrequency;
    }
}
",1447673718
Mohit Jaisal,mohitjaisal,114,3626,java,"class Solution {
    private int productOfDigits(int x) {
        int product = 1;
        while (x > 0) {
            product *= x % 10;
            x /= 10;
        }
        return product;
    }

    public int smallestNumber(int n, int t) {
        while (productOfDigits(n) % t != 0) n++;
        return n;
    }
}
",1447663939
Mohit Jaisal,mohitjaisal,114,3640,java,"import java.util.*;

class Solution {
    public int maxFrequency(int[] nums, int k, int numOperations) {
        int n = nums.length;
        Map<Integer, Integer> frequencyMap = new HashMap<>();
        List<int[]> eventList = new ArrayList<>();
        
        int i = 0;
        while (i < n) {
            int num = nums[i];
            frequencyMap.put(num, frequencyMap.getOrDefault(num, 0) + 1);
            eventList.add(new int[]{num - k, 1});
            eventList.add(new int[]{num + k + 1, -1});
            i++;
        }
        
        Set<Integer> uniquePoints = new HashSet<>();
        i = 0;
        while (i < eventList.size()) {
            uniquePoints.add(eventList.get(i)[0]);
            i++;
        }
        
        Iterator<Integer> keyIterator = frequencyMap.keySet().iterator();
        while (keyIterator.hasNext()) {
            uniquePoints.add(keyIterator.next());
        }

        eventList.sort(Comparator.comparingInt(a -> a[0]));
        
        int eventIndex = 0;
        int overlapCount = 0;
        int maxFrequency = 0;
        int currentCount = 0;
        
        Iterator<Integer> pointIterator = new TreeSet<>(uniquePoints).iterator();
        while (pointIterator.hasNext()) {
            int point = pointIterator.next();
            while (eventIndex < eventList.size() && eventList.get(eventIndex)[0] <= point) {
                overlapCount += eventList.get(eventIndex)[1];
                eventIndex++;
            }
            
            currentCount = frequencyMap.getOrDefault(point, 0);
            int achievableFrequency = currentCount + Math.min(numOperations, overlapCount - currentCount);
            maxFrequency = Math.max(maxFrequency, achievableFrequency);
        }
        
        return maxFrequency;
    }
}
",1447707189
Darsh Patel,pdarsh9510,115,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations)
    {
        int mx=0;
        for(auto &it:nums)
        {
            mx=max(mx,it);
        }
        vector<int> v(mx+k+2,0);
        map<int,int> m;
        for(auto &it:nums)
        {
            m[it]++;
            int l=max(0,it-k),r=it+k;
            v[l]++;
            v[r+1]--;
        }
        int ans=0;
        for(int i=0;i<v.size();i++)
        {
            if(i>0)
            {
                v[i]+=v[i-1];
            }
            int x=v[i];
            int cnt=m[i];
            ans=max(ans,cnt);
            x-=cnt;
            x=min(x,numOperations);
            ans=max(ans,x+cnt);
        }
        return ans;
    }
};",1447692056
Darsh Patel,pdarsh9510,115,3626,cpp,"class Solution {
public:
    int smallestNumber(int n, int t)
    {
        int ans=n;
        for(int i=ans;i<=ans+t;i++)
        {
            int p=1,temp=i;
            while(temp)
            {
                p*=(temp%10);
                temp/=10;
            }
            if(p%t==0)
            {
                ans=i;
                break;
            }
        }
        return ans;
    }
};",1447656447
Darsh Patel,pdarsh9510,115,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations)
    {
        int mx=0;
        map<int,int> mp;
        for(auto &it:nums)
        {
            mx=max(mx,it);
            mp[it]=0;
        }
        map<int,int> m;
        for(auto &it:nums)
        {
            m[it]++;
            int l=it-k,r=it+k;
            mp[l]++;
            mp[r+1]--;
        }
        int ans=0,prev=INT_MIN;
        for(auto &it:mp)
        {
            if(prev!=INT_MIN)
            {
                it.second+=prev;
            }
            int x=it.second;
            int cnt=m[it.first];
            ans=max(ans,cnt);
            x-=cnt;
            x=min(x,numOperations);
            ans=max(ans,x+cnt);
            prev=it.second;
        }
        return ans;
    }
};",1447707565
Kuo-Yu Huang,ericet1234,116,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        sort(nums.begin(), nums.end());
        unordered_map<int, int> data;

        for(int n: nums){
            data[n]++;
        }
        // on target
        int ans =0;
        int l, r;
        for(int n: nums){
            l = upper_bound(nums.begin(), nums.end(), n-k-1)-nums.begin();
            r = upper_bound(nums.begin(), nums.end(), n+k)-1-nums.begin();

            ans = max(ans, min(r-l+1, data[n]+numOperations));
        }
        // range
        for(int i=0, r=0, n=0, size=nums.size() ; i<size ; i++){
            while(r<size && n<numOperations && nums[r]<=(nums[i]+2*k)){
                r++;
                n++;
            }
            //printf(""%d %d\n"", i, r);
            ans = max(ans, r-i);
            
            n--;
        }

        return ans;
    }
};",1447693777
Kuo-Yu Huang,ericet1234,116,3626,cpp,"class Solution {
private:
    int check(int n, int t){
        int s=1;

        while(n){
            s = s*(n%10);
            n = n / 10;
        }
        return (s%t)==0;
    }
public:
    int smallestNumber(int n, int t) {
        while(n){
            if(check(n, t)){
                return n;
            }
            n++;
        }
        return -1;
    }
};",1447658293
Kuo-Yu Huang,ericet1234,116,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        sort(nums.begin(), nums.end());
        unordered_map<int, int> data;

        for(int n: nums){
            data[n]++;
        }
        // on target
        int ans =0;
        int l, r;
        for(int n: nums){
            l = upper_bound(nums.begin(), nums.end(), n-k-1)-nums.begin();
            r = upper_bound(nums.begin(), nums.end(), n+k)-1-nums.begin();

            ans = max(ans, min(r-l+1, data[n]+numOperations));
        }
        // range
        for(int i=0, r=0, n=0, size=nums.size() ; i<size ; i++){
            while(r<size && n<numOperations && (nums[r]-k)<=(nums[i]+k)){
                r++;
                n++;
            }
            //printf(""%d %d\n"", i, r);
            ans = max(ans, r-i);
            
            n--;
        }

        return ans;
    }
};",1447698888
Mintu Jupally,mintujupally,117,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int nop) {
        int n=nums.size();

        int l=0, r=0;
        int ans=0;
        sort(nums.begin(), nums.end());
        int i=0;
        while(i<n)
        {
            while(r<n && nums[r]-nums[i]<=k) ++r;
            while(l<n && nums[i]-nums[l]>k) ++l;
            // cout<<l<<"" - ""<<r<<endl;
            int j=i+1;
            while(j<n && nums[i]==nums[j]) ++j;
            int same=j-i;
            // cout<<same<<endl;
            ans=max(ans, same + min((r-l-same), nop));
            i=j;
        }

        r=0;
        for(int i=0; i<n; i++)
        {
            while(r<n && nums[r]-nums[i]<=2*k) ++r;
            ans=max(ans, min(nop, r-i));
        }
        
        return ans;
    }
};",1447687073
Mintu Jupally,mintujupally,117,3626,cpp,"class Solution {
public:
    int prod(int n)
    {
        int val=1;
        while(n>0)
        {
            val*=n%10;
            n/=10;
        }
        return val;
    }

    int smallestNumber(int n, int t) {
        while(true)
        {
            if(prod(n)%t==0) return n;
            ++n;
        }

        return n;
    }
};",1447654757
Mintu Jupally,mintujupally,117,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int nop) {
        int n=nums.size();

        int l=0, r=0;
        int ans=0;
        sort(nums.begin(), nums.end());
        int i=0;
        while(i<n)
        {
            while(r<n && nums[r]-nums[i]<=k) ++r;
            while(l<n && nums[i]-nums[l]>k) ++l;
            // cout<<l<<"" - ""<<r<<endl;
            int j=i+1;
            while(j<n && nums[i]==nums[j]) ++j;
            int same=j-i;
            // cout<<same<<endl;
            ans=max(ans, same + min((r-l-same), nop));
            i=j;
        }

        r=0;
        for(int i=0; i<n; i++)
        {
            while(r<n && nums[r]-nums[i]<=2*k) ++r;
            ans=max(ans, min(nop, r-i));
        }
        
        return ans;
    }
};",1447689147
Ko-Yang,superwesly123,118,3622,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        nums.sort()
        i_min = 0
        k_min, k_max = 0, 0
        ans = 0
        c = Counter(nums)
        for j, num in enumerate(nums):
            target = num
            while target - k > nums[i_min]:
                i_min += 1
            while k_min + 1 < len(nums) and target + k >= nums[k_min + 1]:
                k_min += 1
            ans = max(ans, c[target] + min(k_min - i_min - c[target] + 1, numOperations))
            target = num + k
            while k_max + 1 < len(nums) and target + k >= nums[k_max + 1]:
                k_max += 1
            ans = max(ans, min(k_max - j + 1, numOperations))
        return ans",1447699157
Ko-Yang,superwesly123,118,3626,python3,"class Solution:
    def smallestNumber(self, n: int, t: int) -> int:
        for i in range(n, 1000):
            num = 1
            for c in str(i):
                num *= int(c)
            if num % t == 0:
                return i",1447654385
Ko-Yang,superwesly123,118,3640,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        nums.sort()
        i_min = 0
        k_min, k_max = 0, 0
        ans = 0
        c = Counter(nums)
        for j, num in enumerate(nums):
            target = num
            while target - k > nums[i_min]:
                i_min += 1
            while k_min + 1 < len(nums) and target + k >= nums[k_min + 1]:
                k_min += 1
            ans = max(ans, c[target] + min(k_min - i_min - c[target] + 1, numOperations))
            target = num + k
            while k_max + 1 < len(nums) and target + k >= nums[k_max + 1]:
                k_max += 1
            ans = max(ans, min(k_max - j + 1, numOperations))
        return ans",1447698790
john0312acc223,john0312acc223,120,3622,cpp,"constexpr long long OFFSET = 10000000000LL;

class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        deque<long long> actions;
        long long kll = k;
        set<long long> points;
        for (int n : nums) {
            long long nll = n;
            nll += OFFSET;
            assert(nll>0);
            assert(nll-kll>0);
            actions.push_back( (nll << 4) | 1 );
            actions.push_back( (nll << 4) | 3 );
            actions.push_back( ((nll+kll) << 4) | 2 );
            actions.push_back( ((nll-kll) << 4) | 0 );
            points.insert(nll);
            points.insert(nll+kll);
            points.insert(nll-kll);
        }
        sort(actions.begin(), actions.end());

        int res = 0;
        int at_cnt = 0;
        int in_cnt = 0;
        auto perform_first = [&] () {
            assert(actions.size() != 0);
            long long act = actions[0];
            actions.pop_front();
            long long atype = act&3LL;
            //printf(""BBB %lld %lld\n"", (act>>4)-OFFSET, atype);
            if (atype == 0) {
                in_cnt++;
            } else if (atype == 1) {
                at_cnt++;
            } else if (atype == 2) {
                in_cnt--;
            } else if (atype == 3) {
                at_cnt--;
            } else {
                assert(false);
            }
        };

        for (long long p : points) {
            while (actions.size() && (actions[0] >> 4) < p) {
                perform_first();
            }
            while (actions.size() && (actions[0] >> 4) == p && (actions[0]&2) == 0) {
                perform_first();
            }
            assert(at_cnt<=in_cnt);
            //printf(""AAA %lld %d %d\n"", p-OFFSET, at_cnt, in_cnt);
            res = max(res, at_cnt+min(in_cnt-at_cnt, numOperations));
        }
        return res;
    }
};",1447707504
john0312acc223,john0312acc223,120,3626,cpp,"class Solution {
public:
    int getProd(int x) {
        int res = 1;
        while (x != 0) {
            res = res * (x%10);
            x = x / 10;
        }
        return res;
    }
    int smallestNumber(int n, int t) {
        for (int i = n; ; i++) {
            if (getProd(i)%t==0) return i;
        }
    }
};",1447662645
john0312acc223,john0312acc223,120,3640,cpp,"constexpr long long OFFSET = 10000000000LL;

class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        deque<long long> actions;
        long long kll = k;
        set<long long> points;
        for (int n : nums) {
            long long nll = n;
            nll += OFFSET;
            assert(nll>0);
            assert(nll-kll>0);
            actions.push_back( (nll << 4) | 1 );
            actions.push_back( (nll << 4) | 3 );
            actions.push_back( ((nll+kll) << 4) | 2 );
            actions.push_back( ((nll-kll) << 4) | 0 );
            points.insert(nll);
            points.insert(nll+kll);
            points.insert(nll-kll);
        }
        sort(actions.begin(), actions.end());

        int res = 0;
        int at_cnt = 0;
        int in_cnt = 0;
        auto perform_first = [&] () {
            assert(actions.size() != 0);
            long long act = actions[0];
            actions.pop_front();
            long long atype = act&3LL;
            //printf(""BBB %lld %lld\n"", (act>>4)-OFFSET, atype);
            if (atype == 0) {
                in_cnt++;
            } else if (atype == 1) {
                at_cnt++;
            } else if (atype == 2) {
                in_cnt--;
            } else if (atype == 3) {
                at_cnt--;
            } else {
                assert(false);
            }
        };

        for (long long p : points) {
            while (actions.size() && (actions[0] >> 4) < p) {
                perform_first();
            }
            while (actions.size() && (actions[0] >> 4) == p && (actions[0]&2) == 0) {
                perform_first();
            }
            assert(at_cnt<=in_cnt);
            //printf(""AAA %lld %d %d\n"", p-OFFSET, at_cnt, in_cnt);
            res = max(res, at_cnt+min(in_cnt-at_cnt, numOperations));
        }
        return res;
    }
};",1447708851
sanath_tango3,sanath_tango3,121,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int n) {
        int ma=*max_element(nums.begin(),nums.end());
        
        vector<int> v(ma+2,0);
        unordered_map<int,int> fr;
        for(int i:nums){
            fr[i]++;
            int a=max(0,i-k);
            v[a]++;
            int b=min(ma+1,i+k+1);
            v[b]--;
        }
        int m=0;
        int ans=0;
        for(int i=0;i<v.size();i++){
            m+=v[i];
            int t=m-fr[i];
            ans=max(ans,fr[i]+min(t,n));
        }
        return ans;
        
        
    }
};",1447689865
sanath_tango3,sanath_tango3,121,3626,cpp,"class Solution {
public:
int find(int k){
int ans=1;
    while(k){
        int m=k%10;
        ans=ans*m;
        k=k/10;
    }

    return ans;
}
    int smallestNumber(int n, int t) {
        while(1){
            int cur=find(n);
            if(cur%t==0){
                return n;
            }
            n++;
        }
        return 1;
    }
};",1447658986
sanath_tango3,sanath_tango3,121,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int n) {
             int ma=*max_element(nums.begin(),nums.end());
        
       map<int,int> v;
        unordered_map<int,int> fr;
        for(int i:nums){
            fr[i]++;
            int a=max(0,i-k);
            v[a]++;
            int b=min(ma+1,i+k+1);
           
            v[b]--;
        }
        for(int i:nums){
            if(v.find(i)==v.end()){
                v[i]=0;
            }
        }
        int m=0;
        int ans=0;
        for(auto i:v){
            
            m+=i.second;
            int t=m-fr[i.first];
          //  cout<<i.first<<"" ""<<fr[i.first]<<"" ""<<m<<endl;
            ans=max(ans,fr[i.first]+min(t,n));
        }
        return ans;
    }
};",1447700799
Shiva sai K,shivasaikmalla,123,3622,java,"import java.util.Arrays;

class Solution {
    private int[] getFreqArr(int[] nums) {
        int[] f = new int[100001];
        for (int n : nums) {
            f[n]++;
        }
        return f;
    }
    
    private int[] getPrefArr(int[] f) {
        int[] p = new int[100001];
        p[0] = 0;
        for (int x = 1; x <= 100000; x++) {
            p[x] = p[x - 1] + f[x];
        }
        return p;
    }
    
    private int getRangeSum(int[] p, int l, int r) {
        return p[r] - p[l - 1];
    }
    
    private int getBoundVal(int v, int mn, int mx) {
        return Math.min(Math.max(v, mn), mx);
    }
    
    public int maxFrequency(int[] nums, int k, int nOps) {
        int[] f = getFreqArr(nums);
        int[] p = getPrefArr(f);
        
        int max_f = 0;
        for (int x = 1; x <= 100000; x++) {
            int l = getBoundVal(x - k, 1, 100000);
            int r = getBoundVal(x + k, 1, 100000);
            
            int tot_r = getRangeSum(p, l, r);
            int can_m = tot_r - f[x];
            max_f = Math.max(max_f, f[x] + Math.min(nOps, can_m));
        }
        return max_f;
    }
}",1447685561
Shiva sai K,shivasaikmalla,123,3626,java,"class Solution {
    public int smallestNumber(int n, int t) {
        while (true) {
            if (digitProduct(n) % t == 0) {
                return n;
            }
            n++;
        }
    }
    
    private int digitProduct(int x) {
        if (x == 0) return 0;
        int product = 1;
        while (x > 0) {
            product *= (x % 10);
            x /= 10;
        }
        return product;
    }
}",1447659305
Shiva sai K,shivasaikmalla,123,3640,java,"import java.util.*;

class Solution {
    private static class Evt {
        int pt;
        int d;
        
        Evt(int pt, int d) {
            this.pt = pt;
            this.d = d;
        }
    }
    
    private List<Evt> getEvts(int[] nums, int k) {
        List<Evt> evts = new ArrayList<>();
        for (int n : nums) {
            evts.add(new Evt(n - k, 1));
            evts.add(new Evt(n + k + 1, -1));
        }
        return evts;
    }
    
    private Map<Integer, Integer> getFreqMap(int[] nums) {
        Map<Integer, Integer> f = new TreeMap<>();
        for (int n : nums) {
            f.put(n, f.getOrDefault(n, 0) + 1);
        }
        return f;
    }
    
    private Set<Integer> getPts(List<Evt> evts, Map<Integer, Integer> f) {
        Set<Integer> pts = new TreeSet<>();
        for (Evt e : evts) {
            pts.add(e.pt);
        }
        pts.addAll(f.keySet());
        return pts;
    }
    
    private void sortEvts(List<Evt> evts) {
        Collections.sort(evts, (a, b) -> Integer.compare(a.pt, b.pt));
    }
    
    public int maxFrequency(int[] nums, int k, int nOps) {
        List<Evt> evts = getEvts(nums, k);
        Map<Integer, Integer> f = getFreqMap(nums);
        Set<Integer> pts = getPts(evts, f);
        sortEvts(evts);
        
        int i = 0;
        int c_ovl = 0;
        int max_f = 0;
        int act_c = 0;
        
        for (int t : pts) {
            while (i < evts.size() && evts.get(i).pt <= t) {
                c_ovl += evts.get(i).d;
                i++;
            }
            
            act_c = f.getOrDefault(t, 0);
            int pos_f = act_c + Math.min(nOps, c_ovl - act_c);
            max_f = Math.max(max_f, pos_f);
        }
        
        return max_f;
    }
}",1447701605
Ayush,torqueaj,124,3622,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        nums.sort()
        n = len(nums)
        ans = 0
        freq = defaultdict(int)
        for i in nums:
            freq[i]+=1
        for i in range(nums[0],nums[-1]+1):
            start = i - k
            end = i + k
            bsr = bisect_right(nums,end)
            bsl = bisect_left(nums,start)
            # print(bsl,bsr)
            ans = max(ans,freq[i]+min(numOperations,bsr-bsl-freq[i]))

        return ans
            
        ",1447678312
Ayush,torqueaj,124,3626,python3,"class Solution:
    def smallestNumber(self, n: int, t: int) -> int:
        while True:
            prod = 1
            for i in str(n):
                prod*=int(i)
            if prod%t ==0:
                return n
            n+=1
            
        ",1447653819
Ayush,torqueaj,124,3640,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        nums.sort()
        n = len(nums)
        ans = 0
        freq = defaultdict(int)
        for i in nums:
            freq[i]+=1
        for i in nums:
            start = i 
            end = i + 2*k
            bsr = bisect_right(nums,end)
            bsl = bisect_left(nums,start)
            ans = max(ans,min(numOperations,bsr-bsl))

            start = i - k
            end = i + k
            bsr = bisect_right(nums,end)
            bsl = bisect_left(nums,start)
            ans = max(ans,freq[i]+min(numOperations,bsr-bsl-freq[i]))
            

        return ans",1447692368
sveng101,sveng101,126,3622,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        f_dict = Counter(nums)
        nums2 = sorted(f_dict.keys())
        f_lst = [f_dict[num] for num in nums2]

        n = len(nums2)
        #print(nums2, f_lst)
        res = 0
        i1 = 0
        i2 = 0
        f = 0
        for idx, num in enumerate(nums2):
            for i1 in range(i1, idx):
                if nums2[i1] >= num - k: break
                f -= f_lst[i1]
            else:
                i1 = idx
            for i2 in range(i2, n):
                if nums2[i2] > num + k: break
                f += f_lst[i2]
            else:
                i2 = n
            res = max(res, min(f_lst[idx] + numOperations, f))
            #print(idx, i1, i2, f)
        if res >= numOperations: return res
        i1 = 0
        f = 0
        for i2, num in enumerate(nums2):
            for i1 in range(i1, i2):
                if nums2[i1] >= num - 2 * k: break
                f -= f_lst[i1]
            else:
                i1 = i2
            f += f_lst[i2]
            if f >= numOperations: return numOperations
            res = max(res, f)
        return res",1447701437
sveng101,sveng101,126,3626,python3,"class Solution:
    def smallestNumber(self, n: int, t: int) -> int:

        def digitProduct(num: int) -> int:
            res = 1
            while num:
                num, d = divmod(num, 10)
                res *= d
                if not res: return 0
            return res
        num = n
        while True:
            if not digitProduct(num) % t:
                return num
            num += 1",1447661437
sveng101,sveng101,126,3640,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        f_dict = Counter(nums)
        nums2 = sorted(f_dict.keys())
        f_lst = [f_dict[num] for num in nums2]

        n = len(nums2)
        #print(nums2, f_lst)
        res = 0
        i1 = 0
        i2 = 0
        f = 0
        for idx, num in enumerate(nums2):
            for i1 in range(i1, idx):
                if nums2[i1] >= num - k: break
                f -= f_lst[i1]
            else:
                i1 = idx
            for i2 in range(i2, n):
                if nums2[i2] > num + k: break
                f += f_lst[i2]
            else:
                i2 = n
            res = max(res, min(f_lst[idx] + numOperations, f))
            #print(idx, i1, i2, f)
        if res >= numOperations: return res
        i1 = 0
        f = 0
        for i2, num in enumerate(nums2):
            for i1 in range(i1, i2):
                if nums2[i1] >= num - 2 * k: break
                f -= f_lst[i1]
            else:
                i1 = i2
            f += f_lst[i2]
            if f >= numOperations: return numOperations
            res = max(res, f)
        return res",1447702789
dirigibility,dirigibility,127,3622,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        nums.sort()
        i = l = r = 0
        best = 0
        c = 0
        for j,n in enumerate(nums):
            if j and n == nums[j-1]:
                c += 1
            else:
                c = 1
            while r < len(nums) and nums[r] <= n+k:
                r += 1
            while nums[l] < n-k:
                l += 1
            while nums[i] < n-2*k:
                i += 1
            best = max(best,min(j-i+1,numOperations),min(r-l,c+numOperations))
        return best",1447693694
dirigibility,dirigibility,127,3626,python3,"class Solution:
    def smallestNumber(self, n: int, t: int) -> int:
        for k in count(n):
            if not reduce(mul,(int(d) for d in str(k)))%t:
                return k",1447653601
dirigibility,dirigibility,127,3640,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        nums.sort()
        i = l = r = 0
        best = 0
        c = 0
        for j,n in enumerate(nums):
            if j and n == nums[j-1]:
                c += 1
            else:
                c = 1
            while r < len(nums) and nums[r] <= n+k:
                r += 1
            while nums[l] < n-k:
                l += 1
            while nums[i] < n-2*k:
                i += 1
            best = max(best,min(j-i+1,numOperations),min(r-l,c+numOperations))
        return best",1447693403
idanro12,idanro12,129,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
    map<int, int> freq;
    for (int i = 0; i < nums.size(); i++) ++freq[nums[i]];

    struct rng {
        int val;
        int cnt;
    };
    vector<rng> rngs;
    for (auto it : freq)
        rngs.push_back({it.first, it.second});

    struct event {
        int pos;
        bool in_place;
        int diff;
    };
    vector<event> events;
    for (int i = 0; i < rngs.size(); i++) {
        events.push_back({rngs[i].val - k, false, +rngs[i].cnt}); // start of rng
        events.push_back({rngs[i].val + k + 1, false, -rngs[i].cnt}); // end of rng
        events.push_back({rngs[i].val, false, -rngs[i].cnt}); // start of rng
        events.push_back({rngs[i].val + 1, false, +rngs[i].cnt}); // end of rng
        events.push_back({rngs[i].val, true, +rngs[i].cnt}); // start of rng
        events.push_back({rngs[i].val + 1, true, -rngs[i].cnt}); // end of rng
    }
    sort(events.begin(), events.end(), [](const event& left, const event& right) {
        return left.pos < right.pos;
    });

    int ans = 1;

    int curr_cnt = 0;
    int curr_in_place = 0;
    int i = 0;
    while (i < events.size()) {
        int pos = events[i].pos;
        while (i < events.size() && events[i].pos == pos) {
            if (!events[i].in_place)
                curr_cnt += events[i].diff;
            else
                curr_in_place += events[i].diff;
            ++i;
        }

        ans = max(ans, curr_in_place + min(curr_cnt, numOperations));
    }

    return ans;
    }
};",1447703012
idanro12,idanro12,129,3626,cpp,"class Solution {
public:
    int mul(int num) {
        int sum = 1;
        while (num != 0) {
            sum *= num % 10;
            num /= 10;
        }

        return sum;
    }
    int smallestNumber(int n, int t) {
        int num = n;
        while (true) {
            if (mul(num) % t == 0) return num;
            ++num;
        }
        return 0;
    }
};",1447654593
idanro12,idanro12,129,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
            map<int, int> freq;
    for (int i = 0; i < nums.size(); i++) ++freq[nums[i]];

    struct rng {
        int val;
        int cnt;
    };
    vector<rng> rngs;
    for (auto it : freq)
        rngs.push_back({it.first, it.second});

    struct event {
        int pos;
        bool in_place;
        int diff;
    };
    vector<event> events;
    for (int i = 0; i < rngs.size(); i++) {
        events.push_back({rngs[i].val - k, false, +rngs[i].cnt}); // start of rng
        events.push_back({rngs[i].val + k + 1, false, -rngs[i].cnt}); // end of rng
        events.push_back({rngs[i].val, false, -rngs[i].cnt}); // start of rng
        events.push_back({rngs[i].val + 1, false, +rngs[i].cnt}); // end of rng
        events.push_back({rngs[i].val, true, +rngs[i].cnt}); // start of rng
        events.push_back({rngs[i].val + 1, true, -rngs[i].cnt}); // end of rng
    }
    sort(events.begin(), events.end(), [](const event& left, const event& right) {
        return left.pos < right.pos;
    });

    int ans = 1;

    int curr_cnt = 0;
    int curr_in_place = 0;
    int i = 0;
    while (i < events.size()) {
        int pos = events[i].pos;
        while (i < events.size() && events[i].pos == pos) {
            if (!events[i].in_place)
                curr_cnt += events[i].diff;
            else
                curr_in_place += events[i].diff;
            ++i;
        }

        ans = max(ans, curr_in_place + min(curr_cnt, numOperations));
    }

    return ans;
    }
};",1447703427
Vansh Dhawan,vanshdhawan60,132,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int ops) {
        int n = nums.size();
        vector<int> psum (n);
        map<int, int> freq;
        map<int, int> mp;
        sort(nums.begin(), nums.end());
        for (int &x: nums) {
            int low = x-k, high = x+k;
            ++mp[low]; --mp[high+1];
            ++freq[x];
            int idx = lower_bound(nums.begin(), nums.end(), low) - nums.begin();
            psum[idx]+=1;
            idx = upper_bound(nums.begin(), nums.end(), high) - nums.begin();
            if (idx<n) psum[idx] -= 1;
        }
        int ans = 0;
        int cnt = 0;
        for (int i=0; i<n; i++) {
            cnt += psum[i];
            ans = max (ans, freq[nums[i]] + min(cnt - freq[nums[i]], ops));
        }
        cnt = 0;
        for (auto [num, c]: mp) {
            cnt += c;
            ans = max (ans, freq[num] + min(cnt - freq[num], ops));
        }
        return ans;
    }
};",1447701850
Vansh Dhawan,vanshdhawan60,132,3626,cpp,"class Solution {
public:
    int smallestNumber(int n, int t) {
        int x = 1;
        int temp = n;
        while (temp) {
            x*=temp%10;
            temp/=10;
        }
        while (x%t!=0) {
            ++n;
            temp = n;
            x = 1;
            while (temp) {
                x*=temp%10;
                temp/=10;
            }
        }
        return n;
    }
};",1447658247
Vansh Dhawan,vanshdhawan60,132,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int ops) {
        
        int n = nums.size();
        vector<int> psum (n);
        map<int, int> freq;
        map<int, int> mp;
        sort(nums.begin(), nums.end());
        for (int &x: nums) {
            int low = x-k, high = x+k;
            ++mp[low]; --mp[high+1];
            ++freq[x];
            int idx = lower_bound(nums.begin(), nums.end(), low) - nums.begin();
            psum[idx]+=1;
            idx = upper_bound(nums.begin(), nums.end(), high) - nums.begin();
            if (idx<n) psum[idx] -= 1;
        }
        int ans = 0;
        int cnt = 0;
        for (int i=0; i<n; i++) {
            cnt += psum[i];
            ans = max (ans, freq[nums[i]] + min(cnt - freq[nums[i]], ops));
        }
        cnt = 0;
        for (auto [num, c]: mp) {
            cnt += c;
            ans = max (ans, freq[num] + min(cnt - freq[num], ops));
        }
        return ans;
    }
};",1447703663
gtushar,gtushar,133,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int num) {
        sort(nums.begin(), nums.end());
        vector<vector<int>> v;
        for(int i : nums) v.push_back(vector<int>{ i - k, i + k });
        // sort(v.begin(), v.end(), [](const vector<int>&a, const vector<int>&b) {
        //     if (a[1] != b[1]) return a[1] < b[1];
        //     return a[0] < b[0];
        // });
        int j = 0, ans = 0, n = v.size(), r = 0;
        for(int i = 0; i < n; ++i) {
            while(j < n && v[j][0] <= v[i][1]) ++j;
            ans = max(ans, min(num, j - i));
            // cout << ""i = "" << i << "", j = "" << j << endl;
        }
        map<int, int> mp;
        for(int i:nums) ++mp[i];
        j = 0; r = 0;
        for(int i = 0; i < n; ++i) {
            while(j < n && nums[j] < nums[i] - k) ++j;
            while(r < n && nums[r] <= nums[i] + k) ++r;
            ans = max(ans, min(num + mp[nums[i]], r - j));
            // cout << ""i = "" << i << "", j = "" << j << "", r = "" << r << endl;
        }
        return ans;
    }
};",1447701178
gtushar,gtushar,133,3626,cpp,"class Solution {
public:
    int smallestNumber(int n, int t) {
        while(1) {
            string s = to_string(n);
            long long sum = 1;
            for(char ch:s) sum *= (ch - '0');
            if (sum % t == 0) return n;
            ++n;
        }
    }
};",1447656260
gtushar,gtushar,133,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int num) {
         sort(nums.begin(), nums.end());
        vector<vector<int>> v;
        for(int i : nums) v.push_back(vector<int>{ i - k, i + k });
        // sort(v.begin(), v.end(), [](const vector<int>&a, const vector<int>&b) {
        //     if (a[1] != b[1]) return a[1] < b[1];
        //     return a[0] < b[0];
        // });
        int j = 0, ans = 0, n = v.size(), r = 0;
        for(int i = 0; i < n; ++i) {
            while(j < n && v[j][0] <= v[i][1]) ++j;
            ans = max(ans, min(num, j - i));
            // cout << ""i = "" << i << "", j = "" << j << endl;
        }
        map<int, int> mp;
        for(int i:nums) ++mp[i];
        j = 0; r = 0;
        for(int i = 0; i < n; ++i) {
            while(j < n && nums[j] < nums[i] - k) ++j;
            while(r < n && nums[r] <= nums[i] + k) ++r;
            ans = max(ans, min(num + mp[nums[i]], r - j));
            // cout << ""i = "" << i << "", j = "" << j << "", r = "" << r << endl;
        }
        return ans;
    }
};",1447703808
krishnanshu19,krishnanshu19,134,3622,cpp,"class Solution {
public:
    int get(vector<int>& nums, int bound){
        int l = 0, r = nums.size() ;
        while(l<r){
            int mid = (l+r)/2;
            if(nums[mid]>bound) r= mid;
            else l=mid+1;
        }
        return --l;
    }
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        sort(nums.begin(), nums.end());
        int maxx_count = 1;
        map<int,int> ct;
        for(auto x: nums){
            ct[x]++;
        }
        for(auto x: nums){
            int r = get(nums,x+k), l = get(nums,x-k-1)+1;
            // cout<<x<<"" ""<<l<<"" ""<<r<<endl;
            maxx_count = max(maxx_count, min(r-l+1 - ct[x], numOperations)+ct[x]);
        }

        queue<int> q;
        for(auto x: nums){
            while(!q.empty() && q.front() < x-k) q.pop();
            q.push(x+k);
            maxx_count = max(maxx_count, min(numOperations, (int)q.size()));
        }
        return maxx_count;
    }
};",1447703350
krishnanshu19,krishnanshu19,134,3626,cpp,"class Solution {
public:
    bool check(int n, int t){
        int a=1;
        while(n>0){
            a*= n%10;
            n/=10;
        }
        return a%t==0;
    }
    int smallestNumber(int n, int t) {
        while(!check(n,t)) n++;
        return n;
    }
};",1447654662
krishnanshu19,krishnanshu19,134,3640,cpp,"class Solution {
public:
    int get(vector<int>& nums, int bound){
        int l = 0, r = nums.size() ;
        while(l<r){
            int mid = (l+r)/2;
            if(nums[mid]>bound) r= mid;
            else l=mid+1;
        }
        return --l;
    }
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        sort(nums.begin(), nums.end());
        int maxx_count = 1;
        map<int,int> ct;
        for(auto x: nums){
            ct[x]++;
        }
        for(auto x: nums){
            int r = get(nums,x+k), l = get(nums,x-k-1)+1;
            // cout<<x<<"" ""<<l<<"" ""<<r<<endl;
            maxx_count = max(maxx_count, min(r-l+1 - ct[x], numOperations)+ct[x]);
        }

        queue<int> q;
        for(auto x: nums){
            while(!q.empty() && q.front() < x-k) q.pop();
            q.push(x+k);
            maxx_count = max(maxx_count, min(numOperations, (int)q.size()));
        }
        return maxx_count;
    }
};",1447703937
du0san84,du0san84,135,3622,python3,"class Solution:
    from bisect import bisect_left, bisect_right

    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        def count_range(nums, center, k):
            return len(nums)-bisect_left(nums, center-k)-(len(nums) - bisect_right(nums, center+k))
        ret = 0
        nums.sort()
        counter = {}
        for num in nums: counter[num] = counter.get(num, 0)+1

        for num in nums:
            # print(num, counter[num], count_range(nums, num, k),min(numOperations, count_range(nums, num, k)-counter[num]))
            ret = max(ret, counter[num]+min(numOperations, count_range(nums, num, k)-counter[num]))
            
            ret = max(ret, min(numOperations, count_range(nums, num+k, k)))

        return ret

        ",1447694671
du0san84,du0san84,135,3626,python3,"class Solution:
    def smallestNumber(self, n: int, t: int) -> int:
        def product(num):
            ret = 1
            for c in str(num):
                ret *= int(c)
            return ret
        while product(n)%t != 0: n+=1
        return n",1447656575
du0san84,du0san84,135,3640,python3,"class Solution:
    from bisect import bisect_left, bisect_right

    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        def count_range(nums, center, k):
            return len(nums)-bisect_left(nums, center-k)-(len(nums) - bisect_right(nums, center+k))
        ret = 0
        nums.sort()
        counter = {}
        for num in nums: counter[num] = counter.get(num, 0)+1

        for num in nums:
            # print(num, counter[num], count_range(nums, num, k),min(numOperations, count_range(nums, num, k)-counter[num]))
            ret = max(ret, counter[num]+min(numOperations, count_range(nums, num, k)-counter[num]))
            
            ret = max(ret, min(numOperations, count_range(nums, num+k, k)))

        return ret

        ",1447694950
cyruskm,cyruskm,136,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        sort(nums.begin(), nums.end());
        vector<int> s;
        vector<int> c;
        map<int, int> m;
        map<int, int> mcum;
        vector<int> tar;
        int l = nums.size();
        m[-999999] = 0;
        mcum[-999999] = 0;
        for(int n: nums){
            m[n]++;
        }
        int cum = 0;
        int lastN = -1;
        for(int n : nums){
            if(n != lastN){
                lastN = n;
                cum = cum + m[n];
                mcum[n] = cum;
                
                if(n - k >= nums[0]) tar.push_back(n - k);
                if(n + k <= nums[l-1]) tar.push_back(n + k);
                tar.push_back(n);
            }
        }
        sort(tar.begin(), tar.end());
        //
        int ans = 0;
        for(int t : tar){
            int eq = 0;
            if(m.find(t) != m.end()){
                eq = m[t];
            }
            auto it1 = mcum.lower_bound(t - k);
            auto it2 = mcum.lower_bound(t + k);
            it1--; // lower than t-k;
            if(it2 == mcum.end()) it2--;
            if(it2->first > t + k){
                it2--;
            }
            int rangeCnt = it2->second - it1->second;
            int needOp = rangeCnt - eq;
            needOp = min(needOp, numOperations);
            ans = max(ans, eq + needOp);
        }
        return ans;
        
        
    }
};",1447711132
cyruskm,cyruskm,136,3626,cpp,"class Solution {
public:
    int smallestNumber(int n, int t) {
        for(int i = n; i < 999999; i++){
            int i2 = i;
            int p = 1;
            while(i2 > 0){
                p *= (i2 % 10);
                i2 = i2 / 10;
            }
            if(p % t == 0){
                return i;
            }
        }
        return 0;
    }
};",1447655259
cyruskm,cyruskm,136,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        sort(nums.begin(), nums.end());
        vector<int> s;
        vector<int> c;
        map<int, int> m;
        map<int, int> mcum;
        vector<int> tar;
        int l = nums.size();
        m[-999999] = 0;
        mcum[-999999] = 0;
        for(int n: nums){
            m[n]++;
        }
        int cum = 0;
        int lastN = -1;
        for(int n : nums){
            if(n != lastN){
                lastN = n;
                cum = cum + m[n];
                mcum[n] = cum;
                
                if(n - k >= nums[0]) tar.push_back(n - k);
                if(n + k <= nums[l-1]) tar.push_back(n + k);
                tar.push_back(n);
            }
        }
        sort(tar.begin(), tar.end());
        //
        int ans = 0;
        for(int t : tar){
            int eq = 0;
            if(m.find(t) != m.end()){
                eq = m[t];
            }
            auto it1 = mcum.lower_bound(t - k);
            auto it2 = mcum.lower_bound(t + k);
            it1--; // lower than t-k;
            if(it2 == mcum.end()) it2--;
            if(it2->first > t + k){
                it2--;
            }
            int rangeCnt = it2->second - it1->second;
            int needOp = rangeCnt - eq;
            needOp = min(needOp, numOperations);
            ans = max(ans, eq + needOp);
        }
        return ans;
    }
};",1447712786
Vivek Kumar,orogtsm,139,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        map<int,int> mp;
        unordered_map<int,int> freq;
        for(auto x : nums)
        {
            mp[x-k]++;
            mp[x]=mp[x];
            mp[x+k+1]--;
            freq[x]++;
        }
        int count=0;
        int result=0;
        for(auto x : mp)
        {
            count+=x.second;
            int req = count-freq[x.first];
            result=max(result,freq[x.first]+min(req,numOperations));
        }
        return result;
    }
};",1447713119
Vivek Kumar,orogtsm,139,3626,cpp,"class Solution {
public:
    bool isDivisible(int n,int t)
    {
        int result=1;
        while(n)
        {
            result *= (n%10);
            n=n/10;
        }
        
        if(result%t == 0) return true;
        return false;
    }
    int smallestNumber(int n, int t) {
        while(true)
        {
            if(isDivisible(n,t)) return n;
            n++;
        }
        return -1;
    }
};",1447659308
Vivek Kumar,orogtsm,139,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        map<int,int> mp;
        unordered_map<int,int> freq;
        for(auto x : nums)
        {
            mp[x-k]++;
            mp[x]=mp[x];
            mp[x+k+1]--;
            freq[x]++;
        }
        int count=0;
        int result=0;
        for(auto x : mp)
        {
            count+=x.second;
            int req = count-freq[x.first];
            result=max(result,freq[x.first]+min(req,numOperations));
        }
        return result;
    }
};",1447712395
Deepanshu Attri,Cipher_07,142,3622,python3,"from collections import Counter

class Solution:
    def maxFrequency(self, nums, k, ops):
        res = 0
        cnt = Counter(nums)
        nums.sort()
        
        def prev(x):
            l, r = 0, len(nums) - 1
            while l < r:
                m = l + (r - l) // 2
                if nums[m] >= x - k:
                    r = m
                else:
                    l = m + 1
            return l

        def nxt(x):
            l, r = 0, len(nums) - 1
            while l < r:
                m = l + (r - l + 1) // 2
                if nums[m] <= x + k:
                    l = m
                else:
                    r = m - 1
            return l

        for i in range(len(nums)):
            b = prev(nums[i] - k)
            a = nxt(nums[i] - k)
            res = max(res, 1 + min(ops - 1, a - b))
            b = prev(nums[i])
            a = nxt(nums[i])
            res = max(res, cnt[nums[i]] + min(ops, a - b + 1 - cnt[nums[i]]))
            b = prev(nums[i] + k)
            a = nxt(nums[i] + k)
            res = max(res, 1 + min(ops - 1, a - b))

        return res
",1447710886
Deepanshu Attri,Cipher_07,142,3626,cpp,"class Solution
{
public:
    int smallestNumber(int n, int t)
    {
        for (int i = n; 1; i++)
        {
            int pro = 1;
            int x = i;
            while (x)
            {
                pro *= x % 10;
                x /= 10;
            }
            if (pro % t == 0)
                return i;
        }
        return -1;
    }
};",1447713808
Deepanshu Attri,Cipher_07,142,3640,python3,"from collections import Counter

class Solution:
    def maxFrequency(self, nums, k, ops):
        res = 0
        cnt = Counter(nums)
        nums.sort()
        
        def prev(x):
            l, r = 0, len(nums) - 1
            while l < r:
                m = l + (r - l) // 2
                if nums[m] >= x - k:
                    r = m
                else:
                    l = m + 1
            return l

        def nxt(x):
            l, r = 0, len(nums) - 1
            while l < r:
                m = l + (r - l + 1) // 2
                if nums[m] <= x + k:
                    l = m
                else:
                    r = m - 1
            return l

        for i in range(len(nums)):
            b = prev(nums[i] - k)
            a = nxt(nums[i] - k)
            res = max(res, 1 + min(ops - 1, a - b))
            b = prev(nums[i])
            a = nxt(nums[i])
            res = max(res, cnt[nums[i]] + min(ops, a - b + 1 - cnt[nums[i]]))
            b = prev(nums[i] + k)
            a = nxt(nums[i] + k)
            res = max(res, 1 + min(ops - 1, a - b))

        return res
",1447710159
Konstantin Kostin,libkonstantin,144,3622,java,"class Solution {
    public int maxFrequency(int[] nums, int k, int numOperations) {
        int n = nums.length;
        Arrays.sort(nums);
        int maxNum = nums[n - 1];
        int ans = 1;
        for (int e = 1, i = 0, l = 0, r = 0; e <= maxNum; ++e) {
            while (i < n && nums[i] < e) {
                i++;
            }
            int j = i;
            while (j < n && nums[j] == e) {
                j++;
            }
            
            while (e - nums[l] > k) {
                ++l;
            }
            while (r < n && nums[r] - e <= k) {
                ++r;
            }
            int cnt = (r - l) - (j - i);
            ans = Math.max(ans, (j - i) + Math.min(cnt, numOperations));
        }
        return ans;
    }
}",1447682054
Konstantin Kostin,libkonstantin,144,3626,java,"class Solution {
    
    long digitsProduct(int n) {
        int ans = 1;
        while (n > 0) {
            ans *= (n % 10);
            n /= 10;
        }
        return ans;
    }

    public int smallestNumber(int n, int t) {
        int ans = n;
        while (digitsProduct(ans) % t != 0) {
            ans++;
        }
        return ans;
    }
}",1447656504
Konstantin Kostin,libkonstantin,144,3640,java,"class Solution {

    record Event(long x, int cnt, int ops) implements Comparable<Event> {
        @Override
        public int compareTo(Event o) {
            return Long.compare(x, o.x);
        }
    }

    public int maxFrequency(int[] nums, int k, int numOperations) {
        int n = nums.length;
        Arrays.sort(nums);
        PriorityQueue<Event> queue = new PriorityQueue<>(6 * n);
        for (int x : nums) {
            queue.add(new Event(x - k,  1,  1));
            queue.add(new Event(x    , -1, -1));

            queue.add(new Event(x    ,  1, 0));
            queue.add(new Event(x + 1, -1, 0));

            queue.add(new Event(x + 1    ,  1,  1));
            queue.add(new Event(x + k + 1, -1, -1));
        }
        
        int ans = 0;
        int cntElements = 0;
        int neededOperations = 0;
        while (!queue.isEmpty()) {
            Event start = queue.peek();
            while (!queue.isEmpty() && queue.peek().x == start.x) {
                Event element = queue.remove();
                cntElements += element.cnt;
                neededOperations += element.ops;
            }
            ans = Math.max(ans, cntElements - Math.max(0, neededOperations - numOperations));
        }
        return ans;
    }
}",1447714059
Shashank Sharma,ShashankZobb,145,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int num) {
        sort(nums.begin(), nums.end());
        unordered_map<int, int>map1;
        for(int i:nums)map1[i]++;
        int ans = 0, n = nums.size(), t1 = 0, t2 = 0, t3 = 0;
        for(int i=0;i<n;i++){
            while(t2 < n && nums[t2]-nums[i] <= k)t2++;
            while(t1 < i && nums[i]-nums[t1] > k)t1++;
            ans = max(ans, min(num+map1[nums[i]], t2-t1));
            while(t3 < i && nums[i]-nums[t3] > (2*k))t3++;
            ans = max(ans, min(num, i-t3+1));
        }
        return ans;
    }
};",1447676745
Shashank Sharma,ShashankZobb,145,3626,cpp,"class Solution {
public:
    int smallestNumber(int n, int t) {
        while(true){
            string str = to_string(n);
            int temp = 1;
            for(char i:str){
                temp *= (i-'0');
                temp = temp%t;
            }
            if(temp == 0)break;
            n++;
        }
        return n;
    }
};",1447654776
Shashank Sharma,ShashankZobb,145,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int num) {
        sort(nums.begin(), nums.end());
        unordered_map<int, int>map1;
        for(int i:nums)map1[i]++;
        int ans = 0, n = nums.size(), t1 = 0, t2 = 0, t3 = 0;
        for(int i=0;i<n;i++){
            while(t2 < n && nums[t2]-nums[i] <= k)t2++;
            while(t1 < i && nums[i]-nums[t1] > k)t1++;
            ans = max(ans, min(num+map1[nums[i]], t2-t1));
            while(t3 < i && nums[i]-nums[t3] > (2*k))t3++;
            ans = max(ans, min(num, i-t3+1));
        }
        return ans;
    }
};",1447674517
james-ryans,james-ryans,146,3622,cpp,"const int N = 1e5 + 5;

class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        int n = nums.size();
        vector<int> freq(N, 0);
        for (int i = 0; i < n; i++) {
            freq[nums[i]]++;
        }
        for (int i = 1; i < N; i++) {
            freq[i] += freq[i - 1];
        }

        int maxFreq = 0;
        for (int i = 1; i < N; i++) {
            int cur = freq[i] - freq[i - 1];
            int range = freq[min(N - 1, i + k)] - freq[max(0, i - k - 1)];

            maxFreq = max(maxFreq, cur + min(range - cur, numOperations));
        }
        return maxFreq;
    }
};",1447670331
james-ryans,james-ryans,146,3626,cpp,"class Solution {
private:
    bool div(int n, int t) {
        int x = 1;
        while (n > 0) {
            x *= n % 10;
            n /= 10;
        }
        return x % t == 0;
    }
public:
    int smallestNumber(int n, int t) {
        while (!div(n, t)) {
            n++;
        }
        return n;
    }
};",1447654607
james-ryans,james-ryans,146,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        int n = nums.size();
        map<int, int> freq;
        for (int i = 0; i < n; i++) {
            freq[nums[i]]++;
            freq[nums[i] - k];
            freq[nums[i] + k];
        }

        int maxFreq = 0;
        
        int freqRange = 0;
        auto l = freq.begin();
        auto r = freq.begin();
        for (auto it = freq.begin(); it != freq.end(); it++) {
            while (l->first < it->first - k) {
                freqRange -= l->second;
                l++;
            }
            while (r != freq.end() && r->first <= it->first + k) {
                freqRange += r->second;
                r++;
            }

            int cur = it->second;
            maxFreq = max(maxFreq, cur + min(freqRange - cur, numOperations));
        }
        
        return maxFreq;
    }
};",1447705813
Neal@阳谷县,x____x,149,3622,cpp,"class Solution {
public:
  int maxFrequency(vector<int>& nums, int k, int numOperations) {
    int n = nums.size();
    sort(nums.begin(), nums.end());
    map<int, int> c;
    for (int x : nums) ++c[x];
    int lo = nums[0], hi = nums.back();
    int ret = 0;
    for (int x = lo, i = 0, j = 0; x <= hi; ++x) {
      while (i < n && nums[i] < x - k) ++i;
      while (j < n && nums[j] <= x + k) ++j;
      int y = min(j - i - c[x], numOperations);
      // cout << x << ' ' << i << ' ' << j << ' ' << y << ' ' << y + c[x] << endl;
      ret = max(ret, y + c[x]);
    }
    return ret;
  }
};",1447689914
Neal@阳谷县,x____x,149,3626,python3,"class Solution:
  def smallestNumber(self, n: int, t: int) -> int:
    while 1:
      x = 1
      for y in map(int, str(n)):
        x = x * y % t
      if x == 0:
        return n
      n += 1
    return -1
        ",1447655004
Neal@阳谷县,x____x,149,3640,cpp,"class Solution {
public:
  int maxFrequency(vector<int>& nums, int k, int numOperations) {
    int n = nums.size();
    sort(nums.begin(), nums.end());
    map<int, int> c;
    int hi = nums.back();
    for (int x : nums) ++c[x];
    vector<int> a;
    for (int x : nums) {
      a.push_back(x);
      if (x + k <= hi) a.push_back(x + k);
    }
    sort(a.begin(), a.end());
    int ret = 0, i = 0, j = 0;
    for (int x : a) {
      while (i < n && nums[i] < x - k) ++i;
      while (j < n && nums[j] <= x + k) ++j;
      int y = min(j - i - c[x], numOperations);
      ret = max(ret, c[x] + y);
    }
    return ret;
  }
};",1447714753
Alphorix,Alphorix,151,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        sort(nums.begin(), nums.end());
        vector<int> cnt;
        cnt.push_back(1);
        for(int i = 1 ; i < nums.size() ; ++i) {
            if(nums[i] == nums[i-1]) {
                ++cnt.back();
            } else {
                cnt.push_back(1);
            }
        }
        nums.erase(unique(nums.begin(), nums.end()), nums.end());
        vector<int> prefix = cnt;
        for(int i = 1 ; i < nums.size() ; ++i) {
            prefix[i] += prefix[i-1];
        }

        int ans = 0;
        for(int i = 0 ; i < nums.size() ; ++i) {
            int left = lower_bound(nums.begin(), nums.end(), nums[i] - k) - nums.begin() - 1;
            int left_val = (left == -1 ? 0 : prefix[left]);
            int right = upper_bound(nums.begin(), nums.end(), nums[i] + k) - nums.begin() - 1;
            int right_val = prefix[right];
            int cur = cnt[i] + min(numOperations, right_val - left_val - cnt[i]);
            ans = max(ans, cur);
        }

        int ptr = 0;
        for(int i = 0 ; i < nums.size() ; ++i) {
            while(nums[i] - nums[ptr] > 2 * k) ++ptr;
            int cur = prefix[i] - (ptr == 0 ? 0 : prefix[ptr-1]);
            ans = max(ans, min(cur, numOperations));
        }
        return ans;
    }
};",1447697614
Alphorix,Alphorix,151,3626,cpp,"class Solution {
public:
    int getProd(int n) {
        int t = 1;
        while(n > 0) {
            t *= n % 10;
            n /= 10;
        }
        return t;
    }

    int smallestNumber(int n, int t) {
        for(int i = n ; i ; ++i) {
            if(getProd(i) % t == 0) {
                return i;
            }
        }
        return 0;
    }
};",1447659389
Alphorix,Alphorix,151,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        sort(nums.begin(), nums.end());
        vector<int> cnt;
        cnt.push_back(1);
        for(int i = 1 ; i < nums.size() ; ++i) {
            if(nums[i] == nums[i-1]) {
                ++cnt.back();
            } else {
                cnt.push_back(1);
            }
        }
        nums.erase(unique(nums.begin(), nums.end()), nums.end());
        vector<int> prefix = cnt;
        for(int i = 1 ; i < nums.size() ; ++i) {
            prefix[i] += prefix[i-1];
        }

        int ans = 0;
        for(int i = 0 ; i < nums.size() ; ++i) {
            int left = lower_bound(nums.begin(), nums.end(), nums[i] - k) - nums.begin() - 1;
            int left_val = (left == -1 ? 0 : prefix[left]);
            int right = upper_bound(nums.begin(), nums.end(), nums[i] + k) - nums.begin() - 1;
            int right_val = prefix[right];
            int cur = cnt[i] + min(numOperations, right_val - left_val - cnt[i]);
            ans = max(ans, cur);
        }

        int ptr = 0;
        for(int i = 0 ; i < nums.size() ; ++i) {
            while(nums[i] - nums[ptr] > 2 * k) ++ptr;
            int cur = prefix[i] - (ptr == 0 ? 0 : prefix[ptr-1]);
            ans = max(ans, min(cur, numOperations));
        }
        return ans;
    }
};",1447696260
Kevin Pan,Kevin_Pan,152,3622,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        ans = 0
        l, r = 0, 0
        n = len(nums)
        cnt = Counter(nums)
        nums = sorted(nums)
        for i in range(len(nums)):
            if i > 0 and nums[i] == nums[i - 1]:
                continue
            while nums[i] - k > nums[l]:
                l += 1
            while r + 1 < n and nums[r + 1] - k <= nums[i]:
                r += 1
            ans = max(ans, cnt[nums[i]] + min(r - l + 1 - cnt[nums[i]], numOperations))
        l = 0
        for r in range(n):
            if nums[l] + 2 * k < nums[r]:
                l += 1
            ans = max(ans, min(r - l + 1, numOperations))
        return ans",1447707106
Kevin Pan,Kevin_Pan,152,3626,python3,"class Solution:
    def smallestNumber(self, n: int, t: int) -> int:
        curr = n
        while 1:
            s = str(curr)
            pr = 1
            for x in s:
                pr *= int(x)
            if pr % t == 0:
                return curr
            curr += 1
        return -1",1447654134
Kevin Pan,Kevin_Pan,152,3640,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        ans = 0
        l, r = 0, 0
        n = len(nums)
        cnt = Counter(nums)
        nums = sorted(nums)
        for i in range(len(nums)):
            if i > 0 and nums[i] == nums[i - 1]:
                continue
            while nums[i] - k > nums[l]:
                l += 1
            while r + 1 < n and nums[r + 1] - k <= nums[i]:
                r += 1
            ans = max(ans, cnt[nums[i]] + min(r - l + 1 - cnt[nums[i]], numOperations))
        l = 0
        for r in range(n):
            if nums[l] + 2 * k < nums[r]:
                l += 1
            ans = max(ans, min(r - l + 1, numOperations))
        return ans",1447707439
Rohit Jain,rohitathuffinnn,153,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        int n=nums.size();
        map<int,int>mpp;
        for(auto it:nums)mpp[it]++;
        int res=0;
        sort(nums.begin(),nums.end());
        for(int i=nums[0];i<=nums.back();i++){
            int l=lower_bound(nums.begin(),nums.end(),i-k)-nums.begin();
            int e=upper_bound(nums.begin(),nums.end(),i+k)-nums.begin();
            res=max(res,min(e-l,numOperations+mpp[i]));
        }
        return res;
    }
};",1447688787
Rohit Jain,rohitathuffinnn,153,3626,cpp,"class Solution {
public:
    int prod(int i){
        int res=1;
        while(i){
            res*=(i%10);
            i/=10;
        }
        return res;
    }
    int smallestNumber(int n, int t) {
        for(int i=n;i<=1000;i++){
            if(prod(i)%t==0)return i;
        }
        return -1;
    }
};",1447654624
Rohit Jain,rohitathuffinnn,153,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        sort(nums.begin(),nums.end());
        int n=nums.size();
        int res=0;
        for(int i=0;i<n;i++){
            int e=upper_bound(nums.begin(),nums.end(),(int)min(1LL*nums.back(),1LL*nums[i]+2*k))-nums.begin();
            res=max(res,min(numOperations,e-i));
        }

        map<int,int>freq;
        for(auto it:nums)freq[it]++;
        for(int i=0;i<n;i++){
            int l=lower_bound(nums.begin(),nums.end(),nums[i]-k)-nums.begin();
            int e=upper_bound(nums.begin(),nums.end(),nums[i]+k)-nums.begin();
            res=max(res,min(e-l,numOperations+freq[nums[i]]));
        }
        return res;




        
    }
};",1447707528
Wen-Chieh Tung,WJTung,154,3622,cpp,"class Solution {
 public:
  int maxFrequency(vector<int>& nums, int k, int numOperations) {
    unordered_map<int, int> count;
    set<int> targets;
    for (int num : nums) {
      ++count[num];
      targets.insert(num);
      targets.insert(num - k);
      targets.insert(num + k);
    }
    sort(nums.begin(), nums.end());
    int left = 0;
    int right = 0;
    int ans = 1;
    for (int target : targets) {
      while (left < nums.size() && nums[left] < target - k) {
        ++left;
      }
      while (right + 1 < nums.size() && nums[right + 1] <= target + k) {
        ++right;
      }
      if (left >= nums.size()) {
        continue;
      }
      int cur = count[target] + min(right - left + 1 - count[target], numOperations);
      ans = max(cur, ans);
    }
    return ans;
  }
};",1447697625
Wen-Chieh Tung,WJTung,154,3626,cpp,"class Solution {
 public:
    int smallestNumber(int n, int t) {
      for (int i = n; ; ++i) {
        int P = 1;
        int cur = i;
        while (cur > 0) {
          P *= (cur % 10);
          cur /= 10;
        }
        if (P % t == 0) {
          return i;
        }
      }
      return -1;
    }
};",1447655402
Wen-Chieh Tung,WJTung,154,3640,cpp,"class Solution {
 public:
  int maxFrequency(vector<int>& nums, int k, int numOperations) {
    unordered_map<int, int> count;
    set<int> targets;
    for (int num : nums) {
      ++count[num];
      targets.insert(num);
      targets.insert(num - k);
      targets.insert(num + k);
    }
    sort(nums.begin(), nums.end());
    int left = 0;
    int right = 0;
    int ans = 1;
    for (int target : targets) {
      while (left < nums.size() && nums[left] < target - k) {
        ++left;
      }
      while (right + 1 < nums.size() && nums[right + 1] <= target + k) {
        ++right;
      }
      if (left >= nums.size()) {
        continue;
      }
      int cur = count[target] + min(right - left + 1 - count[target], numOperations);
      ans = max(cur, ans);
    }
    return ans;
  }
};",1447698840
Palash Jhaveri,Pal_J,155,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        int n = nums.size();
        int ans = 0;
        map<int,int> freq;
        for(int i = 0;i<n;i++){
            freq[nums[i]]++;
            ans = max(ans,freq[nums[i]]);
        }
        map<int,int> mp;
        for(int i = 0;i<n;i++){
            mp[nums[i]] += 0;
            mp[nums[i]-k]++;
            mp[nums[i]+k+1]--;
        }
        int currk = 0;
        for(auto it : mp){
            currk += it.second;
            int op = currk;
            op -= freq[it.first];
            op = min(op,numOperations);
            op += freq[it.first];
            ans = max(ans,op);
        }
        return ans;
    }
};",1447707100
Palash Jhaveri,Pal_J,155,3626,cpp,"class Solution {
public:
    int smallestNumber(int n, int t) {
        while(n <= 1e6){
            int temp = n;
            int prod = 1;
            while(temp > 0){
                prod *= (temp%10);
                temp/=10;
            }
            if(prod % t == 0) return n;
            n++;
        }
        return -1;
    }
};",1447655468
Palash Jhaveri,Pal_J,155,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        int n = nums.size();
        int ans = 0;
        map<int,int> freq;
        for(int i = 0;i<n;i++){
            freq[nums[i]]++;
            ans = max(ans,freq[nums[i]]);
        }
        map<int,int> mp;
        for(int i = 0;i<n;i++){
            mp[nums[i]] += 0;
            mp[nums[i]-k]++;
            mp[nums[i]+k+1]--;
        }
        int currk = 0;
        for(auto it : mp){
            currk += it.second;
            int op = currk;
            op -= freq[it.first];
            op = min(op,numOperations);
            op += freq[it.first];
            ans = max(ans,op);
        }
        return ans;
    }
};",1447707955
Dragoljub Duric,dragoljub-duric,157,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        vector<int> witout_operations(1e5 + 3, 0);
        vector<int> with_operations(1e5 + 3, 0);
        
        for(int i : nums){
            ++witout_operations[i];
            int low = max(i - k, 0);
            ++with_operations[low];
            --with_operations[i];
            ++with_operations[i + 1];
            int high = i + k + 1;
            if(high >= with_operations.size())
                 high =    with_operations.size() - 1;
            --with_operations[high];
        }

        int maxi = 0, curr = 0, sum_with = 0;

        for(int i = 0; i < 1e5 + 3; ++i){
            sum_with += with_operations[i];
            curr = min(sum_with, numOperations) + witout_operations[i];
            maxi = max(curr, maxi);
        }

        return maxi;
    }
};",1447678232
Dragoljub Duric,dragoljub-duric,157,3626,cpp,"class Solution {
public:
    int digit_prod(int n){
        int p = 1;
        while(n){
            p *= (n%10);
            n /= 10;
        }
        return p;
    }

    int smallestNumber(int n, int t) {
        while(true){
            if(digit_prod(n) % t == 0) return n;
            ++n;
        }

        return -1;
    }
};",1447655363
Dragoljub Duric,dragoljub-duric,157,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        map<int, int> witout_operations;
        map<int, int> with_operations;
        
        for(int i : nums){
            ++witout_operations[i];
            int low = max(i - k, 0);
            ++with_operations[low];
            --with_operations[i];
            ++with_operations[i + 1];
            --with_operations[i + k + 1];
        }

        int maxi = 0, curr = 0, sum_with = 0;
        
        auto it_wo = witout_operations.begin();
        
        for(auto it = with_operations.begin(); it != with_operations.end(); ++it){
            sum_with += it -> second;
            maxi = max(min(sum_with, numOperations), maxi);

            while(it_wo != witout_operations.end() && it_wo -> first < it -> first){
                ++it_wo;
            }
            
            if(it_wo != witout_operations.end() && it_wo -> first == it -> first){
                curr = min(sum_with, numOperations) + it_wo -> second;
                maxi = max(curr, maxi);
            }
        }

        return maxi;
    }
};",1447699321
Subhrajyoti Nayak,subhra_29,158,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        sort(nums.begin(),nums.end());
        int ans=0,n=nums.size();
        int i=-1,j=-1;
        map<int,int>mp;
        for(int x:nums) mp[x]++;
        for(int x=nums[0]-k;x<=nums[n-1]+k;x++){
            while(i<n-1 && nums[i+1]<x-k) i++;
            while(j<n-1 && nums[j+1]<=x+k) j++;
           // cout<<i<<"" ""<<j<<'\n';
            int op=j-i-mp[x];
            op=min(op,numOperations);
            op+=mp[x];
            ans=max(ans,op);
        }
        return ans;
    }
};",1447678085
Subhrajyoti Nayak,subhra_29,158,3626,cpp,"class Solution {
public:
    int smallestNumber(int n, int t) {
        while(1){
            int p=1;
            int m=n;
            while(m) p*=(m%10),m/=10;
            if(p%t==0) return n;
            n++;
        }
        return n;
    }
};",1447654801
Subhrajyoti Nayak,subhra_29,158,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        sort(nums.begin(),nums.end());
        int ans=0,n=nums.size();
        int i=-1,j=-1;
        map<int,int>mp;
        for(int x:nums) mp[x]++;
        set<int>v;
        for(int x:nums){
            v.insert(x-k);v.insert(x+k);
            v.insert(x);
        }
        for(int x:v){
            while(i<n-1 && nums[i+1]<x-k) i++;
            while(j<n-1 && nums[j+1]<=x+k) j++;
            //cout<<i<<"" ""<<j<<'\n';
            int op=j-i-mp[x];
            op=min(op,numOperations);
            op+=mp[x];
            ans=max(ans,op);
        }
        return ans;
    }
};",1447717073
VinayKumarReddy_5204,VinayKumarReddy_5204,160,3622,csharp,"public class Solution {
    public int MaxFrequency(int[] n, int k, int o) {
        var f = BuildFrequencyMap(n);
        var e = BuildEvents(n, k);
        var p = CollectUniquePoints(e, f);
        
        // Sort events for processing
        e.Sort((a, b) => a.Item1.CompareTo(b.Item1));
        
        return CalculateMaxFrequency(e, p, f, o);
    }

    private Dictionary<int, int> BuildFrequencyMap(int[] n) {
        var f = new Dictionary<int, int>();
        foreach (int x in n) {
            if (!f.ContainsKey(x)) {
                f[x] = 0;
            }
            f[x]++;
        }
        return f;
    }

    private List<(int, int)> BuildEvents(int[] n, int k) {
        var e = new List<(int, int)>();
        foreach (int x in n) {
            e.Add((x - k, 1));    // Start of event
            e.Add((x + k + 1, -1)); // End of event
        }
        return e;
    }

    private SortedSet<int> CollectUniquePoints(List<(int, int)> e, Dictionary<int, int> f) {
        var s = new SortedSet<int>();
        foreach (var ev in e) {
            s.Add(ev.Item1);
        }
        foreach (var key in f.Keys) {
            s.Add(key);
        }
        return s;
    }

    private int CalculateMaxFrequency(List<(int, int)> e, SortedSet<int> p, Dictionary<int, int> f, int o) {
        int i = 0;
        int c = 0; 
        int m = 0;

        foreach (int t in p) {
            // Process events up to the current point t
            while (i < e.Count && e[i].Item1 <= t) {
                c += e[i].Item2; // Update current overlap
                i++;
            }

            int a = f.ContainsKey(t) ? f[t] : 0;
            int q = a + Math.Min(o, c - a);
            m = Math.Max(m, q);
        }

        return m;
    }
}
",1447690345
VinayKumarReddy_5204,VinayKumarReddy_5204,160,3626,csharp,"public class Solution {
    public int SmallestNumber(int n, int t) {
        for (int i = n; i <= 100; i++) {
            int product = 1;
            int num = i;
            
            if (num == 0) {
                product = 0;
            } else {
                while (num > 0) {
                    product *= num % 10;
                    num /= 10;
                }
            }
            
            if (product % t == 0) {
                return i;
            }
        }
        return -1;
    }
}
",1447656647
VinayKumarReddy_5204,VinayKumarReddy_5204,160,3640,csharp,"public class Solution {
    public int MaxFrequency(int[] n, int k, int o) {
        var f = BuildFrequencyMap(n);
        var e = BuildEvents(n, k);
        var p = CollectUniquePoints(e, f);
        
        // Sort events for processing
        e.Sort((a, b) => a.Item1.CompareTo(b.Item1));
        
        return CalculateMaxFrequency(e, p, f, o);
    }

    private Dictionary<int, int> BuildFrequencyMap(int[] n) {
        var f = new Dictionary<int, int>();
        foreach (int x in n) {
            if (!f.ContainsKey(x)) {
                f[x] = 0;
            }
            f[x]++;
        }
        return f;
    }

    private List<(int, int)> BuildEvents(int[] n, int k) {
        var e = new List<(int, int)>();
        foreach (int x in n) {
            e.Add((x - k, 1));    // Start of event
            e.Add((x + k + 1, -1)); // End of event
        }
        return e;
    }

    private SortedSet<int> CollectUniquePoints(List<(int, int)> e, Dictionary<int, int> f) {
        var s = new SortedSet<int>();
        foreach (var ev in e) {
            s.Add(ev.Item1);
        }
        foreach (var key in f.Keys) {
            s.Add(key);
        }
        return s;
    }

    private int CalculateMaxFrequency(List<(int, int)> e, SortedSet<int> p, Dictionary<int, int> f, int o) {
        int i = 0;
        int c = 0; 
        int m = 0;

        foreach (int t in p) {
            // Process events up to the current point t
            while (i < e.Count && e[i].Item1 <= t) {
                c += e[i].Item2; // Update current overlap
                i++;
            }

            int a = f.ContainsKey(t) ? f[t] : 0;
            int q = a + Math.Min(o, c - a);
            m = Math.Max(m, q);
        }

        return m;
    }
}
",1447690688
Akshat mangal,iamakshat01,161,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) 
    {
        int n=nums.size();
        map<int,int> m;

        for(int i=0;i<n;i++)
        {
            m[nums[i]-k]++;
            m[nums[i]]--;
            m[nums[i]+1]++;
            m[nums[i]+k+1]--;
        }

        int cur=0;
        for(auto &x: m)
        {
            cur+=x.second;
            x.second=min(cur, numOperations);
        }
        for(int i=0;i<n;i++)
            m[nums[i]]++;
       
       cur=0;
       for(auto x: m)
           cur=max(cur, x.second);
       return cur;
    }
};",1447704576
Akshat mangal,iamakshat01,161,3626,cpp,"class Solution {
public:
    int smallestNumber(int n, int t) 
    {
        while(true)
        {
            string s=to_string(n);
            int prod=1;
            for(auto x: s)
                prod=prod*(x-'0');
            if(prod%t==0)
            {
                return n;
            }
            n++;
        }
        return -1;
    }
};",1447655114
Akshat mangal,iamakshat01,161,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        int n=nums.size();
        map<int,int> m;

        for(int i=0;i<n;i++)
        {
            m[nums[i]-k]++;
            m[nums[i]]--;
            m[nums[i]+1]++;
            m[nums[i]+k+1]--;
        }

        int cur=0;
        for(auto &x: m)
        {
            cur+=x.second;
            x.second=min(cur, numOperations);
        }
        for(int i=0;i<n;i++)
            m[nums[i]]++;
       
       cur=0;
       for(auto x: m)
           cur=max(cur, x.second);
       return cur;
    }
};",1447709226
田星,txingml,162,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        sort(nums.begin(), nums.end());
        map<int, int> table;
        for (int num : nums) {
            table[num-k]++;
            table[num+k+1]--;
        }
        int a = INT_MIN;
        int cnt = 0;
        int ret = 1;
        int n = nums.size();
        int i = 0;
        for (const auto& [b, tmp] : table) {
            int m = 1;
            int mm = 0;
            // cout << ""a b "" << a <<' ' << b << endl;
            while (i < n && nums[i] < b) {
                if (i+1 < n && nums[i+1] == nums[i]) {
                    m++;
                } else {
                    m = 1;
                }
                i++;
                mm = max(mm, m);
            }
            int moved = cnt - mm;
            moved = min(moved, numOperations);
            // cout <<  mm << ' ' << moved << endl; 
            ret = max(ret, mm + moved);
            a = b;
            cnt += tmp;
        }
        return ret;
        
    }
};",1447700710
田星,txingml,162,3626,cpp,"int solve(int n) {
    int ret = 1;
    while (n) {
        ret *= n % 10;
        n /= 10;
    }
    return ret;
}
class Solution {
public:
    int smallestNumber(int n, int t) {
        while (solve(n) % t != 0) {
            n++;
        }
        return n;
        
    }
};",1447654812
田星,txingml,162,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        sort(nums.begin(), nums.end());
        map<int, int> table;
        for (int num : nums) {
            table[num-k]++;
            table[num+k+1]--;
        }
        int a = INT_MIN;
        int cnt = 0;
        int ret = 1;
        int n = nums.size();
        int i = 0;
        for (const auto& [b, tmp] : table) {
            int m = 1;
            int mm = 0;
            // cout << ""a b "" << a <<' ' << b << endl;
            while (i < n && nums[i] < b) {
                if (i+1 < n && nums[i+1] == nums[i]) {
                    m++;
                } else {
                    m = 1;
                }
                i++;
                mm = max(mm, m);
            }
            int moved = cnt - mm;
            moved = min(moved, numOperations);
            // cout <<  mm << ' ' << moved << endl; 
            ret = max(ret, mm + moved);
            a = b;
            cnt += tmp;
        }
        return ret;
        
    }
};",1447700293
Skhirtladze,jskhirtladze,163,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        vector <pair<int,int>> a;
        sort(nums.begin(),nums.end());
        for (int i=0;i<nums.size();i++)
            if (i==0 || nums[i]!=nums[i-1]) a.push_back(make_pair(nums[i], 1));
                                       else a[a.size()-1].second++;
        
        int n=a.size();
        vector <int> left_count(n,0);
        vector <int> right_count(n,0);
        
        int L=0;
        int R=0;
        int cnt=0;
        for (R=0;R<n;R++) {
           while (L<n && (a[R].first-a[L].first)>k) {
                cnt-=a[L].second;
                L++;
           }
           left_count[R]=cnt; 
           cnt+=a[R].second;
        }

        R=n-1;
        L=n-1;
        cnt=0;
        for (L=n-1;L>=0;L--) {
            while (R>-1 && (a[R].first-a[L].first)>k) {
                cnt-=a[R].second;
                R--;
            }
            right_count[L]=cnt;
            cnt+=a[L].second;
        }

        int ans=0;
        for (int i=0;i<n;i++) {
            int other=left_count[i]+right_count[i];
            int add=min(other,numOperations);
            ans=max(ans, a[i].second+add);
        }

        //cout<<ans<<endl;
        
        L=0;
        R=0;
        cnt=0;
        for (R=0;R<n;R++) {
            cnt+=a[R].second;
            while (L<n && (a[R].first-a[L].first)>(2*k)) {
                cnt-=a[L].second;
                L++;
            }
            ans=max(ans,min(cnt,numOperations));
        }

         //cout<<ans<<endl;
        return ans;
    }
};",1447709431
Skhirtladze,jskhirtladze,163,3626,cpp,"class Solution {
public:

    bool d(int n, int t) {
        int x=1;
        while (n) {
            x=x*(n%10);
            n/=10;
        }
        if (x%t==0) return true;
        return false;
    }

    int smallestNumber(int n, int t) {

        while (!d(n,t)) n++;
        return n;
    }
};",1447654924
Skhirtladze,jskhirtladze,163,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        vector <pair<int,int>> a;
        sort(nums.begin(),nums.end());
        for (int i=0;i<nums.size();i++)
            if (i==0 || nums[i]!=nums[i-1]) a.push_back(make_pair(nums[i], 1));
                                       else a[a.size()-1].second++;
        
        int n=a.size();
        vector <int> left_count(n,0);
        vector <int> right_count(n,0);
        
        int L=0;
        int R=0;
        int cnt=0;
        for (R=0;R<n;R++) {
           while (L<n && (a[R].first-a[L].first)>k) {
                cnt-=a[L].second;
                L++;
           }
           left_count[R]=cnt; 
           cnt+=a[R].second;
        }

        R=n-1;
        L=n-1;
        cnt=0;
        for (L=n-1;L>=0;L--) {
            while (R>-1 && (a[R].first-a[L].first)>k) {
                cnt-=a[R].second;
                R--;
            }
            right_count[L]=cnt;
            cnt+=a[L].second;
        }

        int ans=0;
        for (int i=0;i<n;i++) {
            int other=left_count[i]+right_count[i];
            int add=min(other,numOperations);
            ans=max(ans, a[i].second+add);
        }

        //cout<<ans<<endl;
        
        L=0;
        R=0;
        cnt=0;
        for (R=0;R<n;R++) {
            cnt+=a[R].second;
            while (L<n && (a[R].first-a[L].first)>(2*k)) {
                cnt-=a[L].second;
                L++;
            }
            ans=max(ans,min(cnt,numOperations));
        }

         //cout<<ans<<endl;
        return ans;
    }
};",1447709135
Shazif Afzal Ansari,BinaryWizardby360,165,3622,dart,"class Solution {
  int maxFrequency(List<int> n, int k, int ops) {
    final f = <int, int>{};
    for (var x in n) f[x] = (f[x] ?? 0) + 1;

    final e = <List<int>>[];
    for (var x in n) {
      e.add([x - k, 1]);
      e.add([x + k + 1, -1]);
    }
    e.sort((a, b) => a[0].compareTo(b[0]));

    final p = <int>{};
    for (var x in e) p.add(x[0]);
    for (var x in f.keys) p.add(x);
    final sp = p.toList()..sort();

    int i = 0, co = 0, mf = 0;
    for (var t in sp) {
      for (; i < e.length && e[i][0] <= t; i++) co += e[i][1];
      int ac = f[t] ?? 0;
      int pf = ac + (ops < co - ac ? ops : co - ac);
      mf = mf > pf ? mf : pf;
    }

    return mf;
  }
}
",1447716284
Shazif Afzal Ansari,BinaryWizardby360,165,3626,dart,"class Solution {
  int getDigitProduct(int num) {
    if (num == 0) return 0;

    int product = 1;
    while (num > 0) {
      product *= (num % 10);
      num ~/= 10;
    }
    return product;
  }

  int smallestNumber(int n, int t) {
    int current = n;

    while (true) {
      int product = getDigitProduct(current);
      if (product % t == 0) {
        return current;
      }
      current++;
    }
  }
}
",1447718001
Shazif Afzal Ansari,BinaryWizardby360,165,3640,dart,"class Solution {
  int maxFrequency(List<int> n, int k, int ops) {
    final f = <int, int>{};
    for (var x in n) f[x] = (f[x] ?? 0) + 1;

    final e = <List<int>>[];
    for (var x in n) {
      e.add([x - k, 1]);
      e.add([x + k + 1, -1]);
    }
    e.sort((a, b) => a[0].compareTo(b[0]));

    final p = <int>{};
    for (var x in e) p.add(x[0]);
    for (var x in f.keys) p.add(x);
    final sp = p.toList()..sort();

    int i = 0, co = 0, mf = 0;
    for (var t in sp) {
      for (; i < e.length && e[i][0] <= t; i++) co += e[i][1];
      int ac = f[t] ?? 0;
      int pf = ac + (ops < co - ac ? ops : co - ac);
      mf = mf > pf ? mf : pf;
    }

    return mf;
  }
}
",1447715881
Om Ashish Soni,Om_Ashish_Soni,166,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        sort(nums.begin(),nums.end());
        map<int,int> mp;
        for(auto num:nums) mp[num]++;
        int mx=0;
        for(int num=nums.front();num<=nums.back();num++){
            int left=lower_bound(nums.begin(),nums.end(),num-k)-nums.begin();
            int right=upper_bound(nums.begin(),nums.end(),num+k)-nums.begin()-1;
            int window=right-left+1;
            int freq=mp[num];
            int rest=min(window-freq,numOperations);
            
            mx=max(mx,freq+rest);
        }
        return mx;
    }
};",1447673313
Om Ashish Soni,Om_Ashish_Soni,166,3626,cpp,"class Solution {
public:
    int smallestNumber(int n, int t) {
        for(int i=n;;i++){
            string s=to_string(i);
            int mul=1;
            for(char ch:s){
                int digit=(int)(ch-'0');
                mul*=digit;
            }
            if(mul%t == 0) return i;
        }
        return -1;
    }
};",1447654609
Om Ashish Soni,Om_Ashish_Soni,166,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        int n=nums.size();
        map<int,int> mp;
        for(auto num:nums) mp[num]++;

//         int l=0;
//         int r=n;
        
//         while(l<=r){
//             int mid=l+(r-l)/2;
            
//         }
        
        
        sort(nums.begin(),nums.end());
        vector<int> v={nums[0]};
        for(int i=1;i<n;i++){
            v.push_back((nums[i]+nums[i-1])/2);
            v.push_back(nums[i]);
        }
        int mx=0;
        for(auto num:v){
            int left=lower_bound(nums.begin(),nums.end(),num-k)-nums.begin();
            int right=upper_bound(nums.begin(),nums.end(),num+k)-nums.begin()-1;
            int window=right-left+1;
            int freq=mp[num];
            int rest=min(window-freq,numOperations);
            // cout<<""for num : ""<<num<<"" => ""<<freq<<"" , ""<<(window-freq)<<"" vs ""<<numOperations<<endl;
            mx=max(mx,freq+rest);
            
            
        }
        
        for(int i=0;i<n;i++){
            int num=nums[i];
            int left=lower_bound(nums.begin(),nums.end(),num-2*k)-nums.begin();
            int window=i-left+1;
            int freq=0;
            int rest=min(window-freq,numOperations);
            // cout<<""for num : ""<<num<<"" => ""<<freq<<"" , ""<<(window-freq)<<"" vs ""<<numOperations<<endl;
            mx=max(mx,freq+rest);
        }

            
        return mx;
    }
};",1447701148
Satyam Kumar,Satyam_86770,167,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        unordered_map<int,int>range;
        unordered_map<int,int>fre;
        int minRange = 1e9;
        int maxRange = -1e9;
        for(int i=0;i<nums.size();i++)
        {
            fre[nums[i]]++;
            int left = nums[i]-k;
            int right = nums[i]+k;
            minRange = min(minRange, left);
            maxRange = max(maxRange,right);
            range[left]++;
            range[right+1]--;
        }
        
        int ans = 1;
        
        for(int i=minRange;i<=maxRange;i++)
        {
             range[i] += range[i-1];
             int currentElementFrequency = fre[i];
             int maxFrequency = range[i] - currentElementFrequency;
             maxFrequency = min(maxFrequency,numOperations);
             maxFrequency += currentElementFrequency;
             ans = max(ans,maxFrequency);
        }

        return ans;
    }
};",1447692637
Satyam Kumar,Satyam_86770,167,3626,cpp,"class Solution {
public:
    bool chk(int i,int t)
    {  
      int pre = 1;   
       while(i)
           {
               pre*=(i%10);
               i/=10;
           }

        if(pre%t==0)
        {
            return true;
        }else{
            return false;
        }
    }

    int smallestNumber(int n, int t) {

      for(int i=n;;i++)
      {
         if(chk(i,t))
         {
             return i;
         }
             
      }

      return n;  

     
       
    }
};",1447662545
Satyam Kumar,Satyam_86770,167,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        sort(nums.begin(),nums.end());
        map<int,int>range;
        map<int,int>fre;
        int minRange = 2e9;
        int maxRange = -2e9;
        for(int i=0;i<nums.size();i++)
        {
            fre[nums[i]]++;
            int left = nums[i]-k;
            int right = nums[i]+k;
            minRange = min(minRange, left);
            maxRange = max(maxRange,right);
            range[left]++;
            range[right+1]--;
            range[nums[i]]+=0;
        }
        
        int ans = 1;

        int prevousRangeSum = 0;
        
        for(auto it=range.begin();it!=range.end();it++)
        {   
             
             it->second += prevousRangeSum;
             prevousRangeSum = it->second;
             int currentElementFrequency = fre[it->first];
             int maxFrequency = it->second - currentElementFrequency;
             maxFrequency = min(maxFrequency,numOperations);
             maxFrequency += currentElementFrequency;
             ans = max(ans,maxFrequency);
        }

        return ans;
    }
};",1447718265
cm_fast,cm_fast,168,3622,cpp,"

class Solution
{
public:
    int helper1(vector<pair<int, int>> &v, long long x)
    {
        int low = 0, high = v.size() - 1;
        while (low <= high)
        {
            int mid = low + (high - low) / 2;
            if (v[mid].first == x)
            {
                return v[mid].second;
            }
            else if (v[mid].first < x)
            {
                low = mid + 1;
            }
            else
            {
                high = mid - 1;
            }
        }
        return 0;
    }
    int helper2(vector<int> &a, long long x, int k)
    {
        int lower = lower_bound(a.begin(), a.end(), (int)(x - k)) - a.begin();
        int upper = upper_bound(a.begin(), a.end(), (int)(x + k)) - a.begin();
        return upper - lower;
    }
    int maxFrequency(vector<int> &a, int k, int cnt)
    {
        sort(a.begin(), a.end());
        int n = a.size();
        map<int, int> mp;
        for (int i = 0; i < n; i++)
        {
            mp[a[i]]++;
        }
        vector<pair<int, int>> v;
        for (auto &i : mp)
        {
            v.push_back({i.first, i.second});
        }
        int m = v.size();
        vector<long long> distt;
        for (int i = 0; i < m; i++)
        {
            distt.push_back((long long)v[i].first);
            distt.push_back((long long)v[i].first - k);
            distt.push_back((long long)v[i].first + k);
        }
        sort(distt.begin(), distt.end());
        map<int, int> mpp;
        vector<long long> dist;
        for (int i = 0; i < distt.size(); i++)
        {
            mpp[distt[i]]++;
        }
        for (auto &i : mpp)
        {
            dist.push_back(i.first);
        }
        int ans = 0;
        map<int, int> count;
        for (int i = 0; i < (int)(v.size()); i++)
        {
            count[v[i].first] = v[i].second;
        }
        for (int i = 0; i < (int)(dist.size()); i++)
        {

            int ans1 = count[dist[i]];
            int ans2 = helper2(a, dist[i], k);
            int freq = ans1 + min((long long)(cnt), (long long)(ans2 - ans1));
            ans = max(ans, freq);
        }
        return ans;
    }
};
",1447709968
cm_fast,cm_fast,168,3626,cpp,"class Solution {
public:
    int smallestNumber(int n, int t) {
        for(int i=n;i<=(n+1000);i++)
        {
            int temp=i;
            int mul=1;
            while(temp>0)
            {
                int rem=temp%10;
                mul=mul*rem;
                temp=temp/10;
            }
            if(mul%t==0)
            {
                return i;
            }
        }
        return n;
    }
};",1447655497
cm_fast,cm_fast,168,3640,cpp,"#include <bits/stdc++.h>
using namespace std;

class Solution
{
public:
    int helper1(vector<pair<int, int>> &v, long long x)
    {
        int left = 0, right = v.size() - 1;
        while (left <= right)
        {
            int mid = left + (right - left) / 2;
            if (v[mid].first == x)
            {
                return v[mid].second;
            }
            else if (v[mid].first < x)
            {
                left = mid + 1;
            }
            else
            {
                right = mid - 1;
            }
        }
        return 0;
    }
    int helper2(vector<int> &a, long long x, int k)
    {
        int lower = lower_bound(a.begin(), a.end(), (int)(x - k)) - a.begin();
        int upper = upper_bound(a.begin(), a.end(), (int)(x + k)) - a.begin();
        return upper - lower;
    }
    int maxFrequency(vector<int> &a, int k, int cnt)
    {
        sort(a.begin(), a.end());
        int n = a.size();
        map<int, int> mp;
        for (int i = 0; i < n; i++)
        {
            mp[a[i]]++;
        }
        vector<pair<int, int>> v;
        for (auto &i : mp)
        {
            v.push_back({i.first, i.second});
        }
        int m = v.size();
        vector<long long> distt;
        for (int i = 0; i < m; i++)
        {
            distt.push_back((long long)v[i].first);
            distt.push_back((long long)v[i].first - k);
            distt.push_back((long long)v[i].first + k);
        }
        sort(distt.begin(), distt.end());
        map<int, int> mpp;
        vector<long long> dist;
        for (int i = 0; i < distt.size(); i++)
        {
            mpp[distt[i]]++;
        }
        for (auto &i : mpp)
        {
            dist.push_back(i.first);
        }
        int ans = 0;
        for (int i = 0; i < (int)(dist.size()); i++)
        {

            int ans1 = helper1(v, dist[i]);
            int ans2 = helper2(a, dist[i], k);
            int freq = ans1 + min((long long)(cnt), (long long)(ans2 - ans1));
            ans = max(ans, freq);
        }
        return ans;
    }
};
",1447706273
Meng-Hsuan Wu,meng-hsuan,169,3622,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        n = len(nums)
        nums.sort()
        C = Counter(nums)
        
        best = 0
        l = r = 0
        for c in range(n):
            while nums[l] < nums[c] - k:
                l += 1
            while r < n - 1 and nums[r + 1] <= nums[c] + k:
                r += 1
            best = max(best, min(C[nums[c]] + numOperations, r - l + 1))
        
        l = 0
        for r in range(n):
            while nums[l] < nums[r] - k * 2:
                l += 1
            best = max(best, min(numOperations, r - l + 1))
        
        return best
    ",1447708004
Meng-Hsuan Wu,meng-hsuan,169,3626,python3,"class Solution:
    def smallestNumber(self, n: int, t: int) -> int:
        ans = n
        
        def pod(a: int) -> int:
            ret = 1
            for ch in str(a):
                ret *= int(ch)
            
            return ret
        
        while pod(ans) % t:
            ans += 1
        
        return ans
    ",1447661791
Meng-Hsuan Wu,meng-hsuan,169,3640,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        n = len(nums)
        nums.sort()
        C = Counter(nums)
        
        best = 0
        l = r = 0
        for c in range(n):
            while nums[l] < nums[c] - k:
                l += 1
            while r < n - 1 and nums[r + 1] <= nums[c] + k:
                r += 1
            best = max(best, min(C[nums[c]] + numOperations, r - l + 1))
        
        l = 0
        for r in range(n):
            while nums[l] < nums[r] - k * 2:
                l += 1
            best = max(best, min(numOperations, r - l + 1))
        
        return best
    ",1447710345
Mohim Singla,Mohim-Singla,170,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int op) {
        int max_ele = *max_element(nums.begin(), nums.end());
        unordered_map<int, int> ump;
        
        // vector<int> v(max_ele + k + 1, 0);
        map<int, int> mp;
        for(int i=0;i<=max_ele + k + 1;i++) {
            mp[i]=0;
        }
        int maxi=1;
        for(auto &it: nums) {
            ump[it]++;
            maxi=max(maxi, ump[it]);
            // v[it-k]++;
            // v[it+k+1]--;
            mp[it-k]++;
            mp[it+k+1]--;
        }
        
        if(op==0) return maxi;
        
        int currWindow=0;
        int ans=1;
        // for(int i=0;i<v.size();i++) {
        //     int currVal=v[i];
        //     currWindow+=currVal;
        //     int temp = ump[i]+min(currWindow-ump[i], op);
        //     ans=max(ans, temp);
        // }
        for(auto &it: mp) {
            int i=it.first;
            int currVal=it.second;
            currWindow+=currVal;
            // cout<<it.first<<"" ""<<it.second<<"" ""<<currWindow<<ump[i]<<endl;
            int temp = ump[i]+min(currWindow-ump[i], op);
            ans=max(ans, temp);
        }
        
        return ans;
        
        
        
    }
};",1447699363
Mohim Singla,Mohim-Singla,170,3626,cpp,"class Solution {
public:
    int smallestNumber(int n, int t) {
        for (int i=0;i<=10;i++) {
            string curr = to_string(n);
            int currP = 1;
            for(auto &c: curr) {
                currP*=(c-'0');
            }
            
            if(currP%t==0) return n;
            n++;
        }
        
        return n;
    }
};",1447656262
Mohim Singla,Mohim-Singla,170,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int op) {
        int max_ele = *max_element(nums.begin(), nums.end());
        unordered_map<int, int> ump;
        
        map<int, int> mp;
        int maxi=1;
        for(auto &it: nums) {
            ump[it]++;
            maxi=max(maxi, ump[it]);
            mp[it-k]++;
            mp[it+k+1]--;
            if(mp.find(it)==mp.end()) {
                mp[it]=0;
            }
        }
        
        if(op==0) return maxi;
        
        int currWindow=0;
        int ans=1;
        for(auto &it: mp) {
            int i=it.first;
            int currVal=it.second;
            currWindow+=currVal;
            int temp = ump[i]+min(currWindow-ump[i], op);
            ans=max(ans, temp);
        }
        
        return ans;
    }
};",1447710455
fizhim,fizhim,171,3622,rust,"impl Solution {
    pub fn max_frequency(mut nums: Vec<i32>, k: i32, num_operations: i32) -> i32 {
        nums.sort();
        let mut ans = 0;
        for i in 0..nums.len() {
            let cur = nums[i];
            let j = nums.partition_point(|&x| x <= cur + k * 2) as i32;
            let l0 = nums.partition_point(|&x| x < cur + k) as i32;
            let l1 = nums.partition_point(|&x| x <= cur + k) as i32;
            ans = (num_operations.min(l0 - i as i32 + j - l1) + l1 - l0).max(ans);
            //println!(""{cur} {i} {j} {l0} {l1} {ans}"");
        }
        for i in 0..nums.len() {
            let cur = nums[i];
            let i = nums.partition_point(|&x| x < cur - k) as i32;
            let j = nums.partition_point(|&x| x <= cur + k) as i32;
            let l0 = nums.partition_point(|&x| x < cur) as i32;
            let l1 = nums.partition_point(|&x| x <= cur) as i32;
            ans = (num_operations.min(l0 - i + j - l1) + l1 - l0).max(ans);
        }
        ans
    }
}",1447699467
fizhim,fizhim,171,3626,javascript,"/**
 * @param {number} n
 * @param {number} t
 * @return {number}
 */
var smallestNumber = function(n, t) {
    while (true) {
        let x = n;
        let p = 1;
        while (x > 0) {
            p *= x % 10;
            x = Math.floor(x / 10);
        }
        if ((p % t) == 0) {
            return n;
        }
        ++n;
    }
};",1447710548
fizhim,fizhim,171,3640,rust,"impl Solution {
    pub fn max_frequency(mut nums: Vec<i32>, k: i32, num_operations: i32) -> i32 {
        nums.sort();
        let mut ans = 0;
        for i in 0..nums.len() {
            let cur = nums[i];
            let j = nums.partition_point(|&x| x <= cur + k * 2) as i32;
            let l0 = nums.partition_point(|&x| x < cur + k) as i32;
            let l1 = nums.partition_point(|&x| x <= cur + k) as i32;
            ans = (num_operations.min(l0 - i as i32 + j - l1) + l1 - l0).max(ans);
            //println!(""{cur} {i} {j} {l0} {l1} {ans}"");
        }
        for i in 0..nums.len() {
            let cur = nums[i];
            let i = nums.partition_point(|&x| x < cur - k) as i32;
            let j = nums.partition_point(|&x| x <= cur + k) as i32;
            let l0 = nums.partition_point(|&x| x < cur) as i32;
            let l1 = nums.partition_point(|&x| x <= cur) as i32;
            ans = (num_operations.min(l0 - i + j - l1) + l1 - l0).max(ans);
        }
        ans
    }
}",1447698088
Daniel,dlisay430,174,3622,csharp,"public class Solution {
    public int MaxFrequency(int[] nums, int k, int numOperations) {
        Dictionary<int, int> dict = nums.GroupBy(x => x).ToDictionary(x => x.Key, x => x.Count());
        nums = nums.OrderBy(x => x).ToArray();
        int ind1 = 0;
        int ind2 = 0;
        int result = 0;
        for (int i = 0; i < nums.Length; i++){
            while (ind1 < nums.Length && (nums[i] - nums[ind1]) > k){
                ind1++;
            }
            while (ind2 < nums.Length && (nums[ind2] - nums[i]) <= k){
                ind2++;
            }
            int newMax = Math.Min(ind2 - ind1, numOperations + dict[nums[i]]);
            result = Math.Max(result, newMax);
        }
        ind1 = 0;
        for (int i = 0; i < nums.Length; i++){
            while (ind1 < nums.Length && (nums[i] - nums[ind1]) > (2 * k)){
                ind1++;
            }
            int newMax = Math.Min(i - ind1 + 1, numOperations);
            result = Math.Max(result, newMax);
        }
        return result;
    }
}",1447701806
Daniel,dlisay430,174,3626,csharp,"public class Solution {
    private int GetProduct(int x){
        int result = 1;
        while (x > 0){
            result *= x % 10;
            x /= 10;
        }
        return result;
    }
    public int SmallestNumber(int n, int t) {
        for (int i = n;; i++){
            if (GetProduct(i) % t == 0){
                return i;
            }
        }
        return -1;
    }
}",1447655177
Daniel,dlisay430,174,3640,csharp,"public class Solution {
    public int MaxFrequency(int[] nums, int k, int numOperations) {
        Dictionary<int, int> dict = nums.GroupBy(x => x).ToDictionary(x => x.Key, x => x.Count());
        nums = nums.OrderBy(x => x).ToArray();
        int ind1 = 0;
        int ind2 = 0;
        int result = 0;
        for (int i = 0; i < nums.Length; i++){
            while (ind1 < nums.Length && (nums[i] - nums[ind1]) > k){
                ind1++;
            }
            while (ind2 < nums.Length && (nums[ind2] - nums[i]) <= k){
                ind2++;
            }
            int newMax = Math.Min(ind2 - ind1, numOperations + dict[nums[i]]);
            result = Math.Max(result, newMax);
        }
        ind1 = 0;
        for (int i = 0; i < nums.Length; i++){
            while (ind1 < nums.Length && (nums[i] - nums[ind1]) > (2 * k)){
                ind1++;
            }
            int newMax = Math.Min(i - ind1 + 1, numOperations);
            result = Math.Max(result, newMax);
        }
        return result;
    }
}",1447702605
papapolak,papapolak,175,3622,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        c = Counter(nums)
        keys = sorted(c.keys())
        vals = [0] + [c[key] for key in keys]
        for i in range(1, len(vals)):
            vals[i] += vals[i-1]
        l = len(keys)
        
        result = left = right = 0
        for key in keys:
            while keys[left] < key - k:
                left += 1
            while right != l and keys[right] <= key + k:
                right += 1
            # print(key, left, right)
            result = max(result, min(
                vals[right] - vals[left],
                c[key] + numOperations
            ))
            
        left = right = 0
        for key in keys:
            key = key + k
            while keys[left] < key - k:
                left += 1
            while right != l and keys[right] <= key + k:
                right += 1
            # print(key, left, right)
            result = max(result, min(
                vals[right] - vals[left],
                c[key] + numOperations
            ))

        return result",1447691929
papapolak,papapolak,175,3626,python3,"class Solution:
    def smallestNumber(self, n: int, t: int) -> int:
        for i in count(n):
            x = 1
            j = i
            while i:
                i, y = divmod(i, 10)
                x *= y
            if not (x % t):
                return j",1447656819
papapolak,papapolak,175,3640,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        
        c = Counter(nums)
        keys = sorted(c.keys())
        vals = [0] + [c[key] for key in keys]
        for i in range(1, len(vals)):
            vals[i] += vals[i-1]
        l = len(keys)
        
        result = left = right = 0
        for key in keys:
            while keys[left] < key - k:
                left += 1
            while right != l and keys[right] <= key + k:
                right += 1
            result = max(result, min(
                vals[right] - vals[left],
                c[key] + numOperations
            ))
            
        left = right = 0
        for key in keys:
            key = key + k
            while keys[left] < key - k:
                left += 1
            while right != l and keys[right] <= key + k:
                right += 1
            result = max(result, min(
                vals[right] - vals[left],
                c[key] + numOperations
            ))

        return result",1447693473
user5431aJ,user5431aJ,176,3622,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        events = []
        for e in nums:
            events.append((e - k, 0))
            #events.append((e, 1, -0.5))
            events.append((e, 1))
            events.append((e, 2))
            #events.append((e, 1, -0.5))
            events.append((e + k, 3))

        events.sort()
        opened = 0
        hits = 0
        mx = 0 
        for e, t in events:
            if t == 0:
                opened += 1
            elif t == 1:
                hits += 1
            elif t == 2:
                hits -= 1
            elif t == 3:
                opened -= 1
            #if opened - hits <= numOperations:
            mx = max(mx, min(opened, numOperations + hits))
        return mx
                ",1447708252
user5431aJ,user5431aJ,176,3626,python3,"class Solution:
    def smallestNumber(self, n: int, t: int) -> int:
        i = n
        def prod(i):
            p = 1
            for c in str(i):
                p *= int(c)
            return p

        while prod(i) % t != 0:
            i += 1

        return i
            ",1447661459
user5431aJ,user5431aJ,176,3640,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        events = []
        for e in nums:
            events.append((e - k, 0))
            #events.append((e, 1, -0.5))
            events.append((e, 1))
            events.append((e, 2))
            #events.append((e, 1, -0.5))
            events.append((e + k, 3))

        events.sort()
        opened = 0
        hits = 0
        mx = 0 
        for e, t in events:
            if t == 0:
                opened += 1
            elif t == 1:
                hits += 1
            elif t == 2:
                hits -= 1
            elif t == 3:
                opened -= 1
            #if opened - hits <= numOperations:
            mx = max(mx, min(opened, numOperations + hits))
        return mx",1447711844
destroyer_vy,destroyer_vy,177,3622,cpp,"#define fo(i,o,n) for(int i=o;i<n;i++)
#define rfo(i,o,n) for(int i=n-1;i>=o;i--)
#define pb push_back
#define mp make_pair
#define ff first
#define sz(x) ((int)(x).size())
#define ss second
#define mset(d,x) memset(d , x , sizeof(d))
#define md 1000000007
#define all(x) x.begin(), x.end()
#define tr(it, a) for(auto it = a.begin(); it != a.end(); it++)
#define PI 3.1415926535897932384626
typedef long long ll;
typedef unsigned long long ull;
typedef long double lld;
typedef pair<int, int>  pii;
typedef pair<ll, ll> pl;
typedef vector<int>     vi;
typedef vector<ll>      vl;
typedef vector<pii>     vpii;
typedef vector<pl>      vpl;
typedef vector<vi>      vvi;

class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int no) {
        sort(all(nums));
        int ma = nums.back();
        int ans = 0;
        fo(i,0,ma+1){
            int cnt = upper_bound(all(nums), i) - lower_bound(all(nums), i);
            int x = cnt;
            int d = (upper_bound(all(nums), i+k) - lower_bound(all(nums), i-k));
            cnt += min(no, d-x);
            ans = max(ans,cnt);
        }
        return ans;
    }
};",1447683241
destroyer_vy,destroyer_vy,177,3626,cpp,"#define fo(i,o,n) for(int i=o;i<n;i++)
#define rfo(i,o,n) for(int i=n-1;i>=o;i--)
#define pb push_back
#define mp make_pair
#define ff first
#define sz(x) ((int)(x).size())
#define ss second
#define mset(d,x) memset(d , x , sizeof(d))
#define md 1000000007
#define all(x) x.begin(), x.end()
#define tr(it, a) for(auto it = a.begin(); it != a.end(); it++)
#define PI 3.1415926535897932384626
typedef long long ll;
typedef unsigned long long ull;
typedef long double lld;
typedef pair<int, int>  pii;
typedef pair<ll, ll> pl;
typedef vector<int>     vi;
typedef vector<ll>      vl;
typedef vector<pii>     vpii;
typedef vector<pl>      vpl;
typedef vector<vi>      vvi;

class Solution {
public:
    int smallestNumber(int n, int t) {
        while(1){
            int x = n;
            int p = 1;
            while(x>0){
                p*=(x%10);
                x/=10;
            }
            if(p%t == 0) return n;
            n++;
        }
        return -1;
    }
};",1447657169
destroyer_vy,destroyer_vy,177,3640,cpp,"#define fo(i,o,n) for(int i=o;i<n;i++)
#define rfo(i,o,n) for(int i=n-1;i>=o;i--)
#define pb push_back
#define mp make_pair
#define ff first
#define sz(x) ((int)(x).size())
#define ss second
#define mset(d,x) memset(d , x , sizeof(d))
#define md 1000000007
#define all(x) x.begin(), x.end()
#define tr(it, a) for(auto it = a.begin(); it != a.end(); it++)
#define PI 3.1415926535897932384626
typedef long long ll;
typedef unsigned long long ull;
typedef long double lld;
typedef pair<int, int>  pii;
typedef pair<ll, ll> pl;
typedef vector<int>     vi;
typedef vector<ll>      vl;
typedef vector<pii>     vpii;
typedef vector<pl>      vpl;
typedef vector<vi>      vvi;

class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int no) {
        sort(all(nums));
        set<ll> st;
        for(auto &i:nums) st.insert(i);
        int ma = nums.back();
        int ans = 0;
        for(auto &i:st){
            int cnt = upper_bound(all(nums), i) - lower_bound(all(nums), i);
            int x = cnt;
            int d = (upper_bound(all(nums), i+k) - lower_bound(all(nums), i-k));
            cnt += min(no, d-x);
            ans = max(ans,cnt);
        }
        for(auto &i:st){
            int cnt = 0;
            int d = (upper_bound(all(nums), i+k+k) - lower_bound(all(nums), i));
            cnt += min(no, d);
            ans = max(ans,cnt);
        }
        return ans;
    }
};",1447720322
aaa,maximus1489,178,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        sort(nums.begin(),nums.end());
        map<int,int>mp;
        for(int x:nums)mp[x]++;
        int n = nums.size();
        int max_ = 0;
        for(int i=0;i<n;++i){
            int l = nums[i]-k;
            int r = nums[i]+k;
            int freq = mp[nums[i]];
            int L = lower_bound(nums.begin(),nums.end(),l)-nums.begin();
            int R = upper_bound(nums.begin(),nums.end(),r)-nums.begin();
            int N = R-L - freq;
            max_= max(max_,min(numOperations,N)+freq);
            
        }
        for(auto [x,y]:mp){
            for(int i:{-1,1}){
                int v = x+k*i;
                if(mp.count(v)==0){
                    int l = v-k;
                    int r=v+k;
                    int L = lower_bound(nums.begin(),nums.end(),l)-nums.begin();
                    int R = upper_bound(nums.begin(),nums.end(),r)-nums.begin();
                  int N = R-L;
                  max_ = max(max_,min(N,numOperations));
                }
            }
        }
        return max_;
        
    }
};",1447702157
aaa,maximus1489,178,3626,cpp,"class Solution {
public:
    int prod(int n){
        int ans = 1;
        while(n>1){
            int r=n%10;
            ans*=r;
            n/=10;
        }return ans;
    }
    int smallestNumber(int n, int t) {
       while(prod(n)%t){++n;}return n;
        
    }
};",1447660001
aaa,maximus1489,178,3640,cpp,"class Solution {
public:
    using ll = long long;
    int maxFrequency(vector<int>& nums1, int K, int numOperations1) {ll numOperations=numOperations1;
          ll k=K;
         vector<ll>nums;
         for(int i:nums1)nums.push_back(i);
         sort(nums.begin(),nums.end());
        map<ll,int>mp;
        for(int x:nums)mp[x]++;
        ll n = nums.size();
        ll max_ = 0;
        for(int i=0;i<n;++i){
            ll l = nums[i]-k;
            ll r = nums[i]+k;
            ll freq = mp[nums[i]];
            ll L = lower_bound(nums.begin(),nums.end(),l)-nums.begin();
            ll R = upper_bound(nums.begin(),nums.end(),r)-nums.begin();
            ll N = R-L - freq;
            max_= max(max_,min(numOperations,N)+freq);
            
        }
        for(auto [x,y]:mp){
            for(int i:{-1,1}){
                ll v = x+k*i;
                if(mp.count(v)==0){
                    ll l = v-k;
                    ll r=v+k;
                    ll L = lower_bound(nums.begin(),nums.end(),l)-nums.begin();
                    ll R = upper_bound(nums.begin(),nums.end(),r)-nums.begin();
                  ll N = R-L;
                  max_ = max(max_,min(N,numOperations));
                }
            }
        }
        return max_;
    }
};",1447712271
Evan Tian,etian6795,179,3622,java,"class Solution {
    static class qwe implements Comparable<qwe> {
        int x;
        int type;

        qwe(int x, int type) {
            this.x = x;
            this.type = type;
        }

        public int compareTo(qwe other) {
            if (this.x != other.x)
                return Integer.compare(this.x, other.x);
            return Integer.compare(this.type, other.type);
        }
    }

    public int maxFrequency(int[] nums, int k, int numOperations) {
        Arrays.sort(nums);
        int n = nums.length;
        HashMap<Integer, Integer> f = new HashMap<>();
        for (int num : nums) {
            f.put(num, f.getOrDefault(num, 0) + 1);
        }

        List<qwe> qwes = new ArrayList<>();
        for (int x : nums) {
            qwes.add(new qwe(x - k, 1));
            qwes.add(new qwe(x + k + 1, -1));
        }

        // Step 4: Sort qwes
        Collections.sort(qwes);

        // Step 5: Collect all unique critical points
        TreeSet<Integer> asds = new TreeSet<>();
        for (qwe qwe : qwes) {
            asds.add(qwe.x);
        }
        for (int x : f.keySet()) {
            asds.add(x);
        }

        List<Integer> sortedasds = new ArrayList<>(asds);

        int curr = 0;
        int qweIdx = 0;
        int ans = 0;

        for (int x : sortedasds) {
            while (qweIdx < qwes.size() && qwes.get(qweIdx).x <= x) {
                curr += qwes.get(qweIdx).type;
                qweIdx++;
            }

            if (f.containsKey(x)) {
                int cnt = f.get(x);
                int temp = curr - cnt;
                temp = Math.max(temp, 0);
                int freq = cnt + Math.min(numOperations, temp);
                ans = Math.max(ans, freq);
            } else {
                int freq = Math.min(numOperations, curr);
                ans = Math.max(ans, freq);
            }
        }

        return ans;
    }
}",1447712609
Evan Tian,etian6795,179,3626,java,"class Solution {
    public int smallestNumber(int n, int t) {
        while(true) {
            int x = 1;
            int temp = n;
            while(temp > 0) {
                x *= (temp%10);
                temp /= 10;
            }
            if(x%t==0) return n;
            n++;
        }
    }
}",1447691688
Evan Tian,etian6795,179,3640,java,"class Solution {
    static class qwe implements Comparable<qwe> {
        int x;
        int type;

        qwe(int x, int type) {
            this.x = x;
            this.type = type;
        }

        public int compareTo(qwe other) {
            if (this.x != other.x)
                return Integer.compare(this.x, other.x);
            return Integer.compare(this.type, other.type);
        }
    }

    public int maxFrequency(int[] nums, int k, int numOperations) {
        Arrays.sort(nums);
        int n = nums.length;
        HashMap<Integer, Integer> f = new HashMap<>();
        for (int num : nums) {
            f.put(num, f.getOrDefault(num, 0) + 1);
        }

        List<qwe> qwes = new ArrayList<>();
        for (int x : nums) {
            qwes.add(new qwe(x - k, 1));
            qwes.add(new qwe(x + k + 1, -1));
        }

        // Step 4: Sort qwes
        Collections.sort(qwes);

        // Step 5: Collect all unique critical points
        TreeSet<Integer> asds = new TreeSet<>();
        for (qwe qwe : qwes) {
            asds.add(qwe.x);
        }
        for (int x : f.keySet()) {
            asds.add(x);
        }

        List<Integer> sortedasds = new ArrayList<>(asds);

        int curr = 0;
        int qweIdx = 0;
        int ans = 0;

        for (int x : sortedasds) {
            while (qweIdx < qwes.size() && qwes.get(qweIdx).x <= x) {
                curr += qwes.get(qweIdx).type;
                qweIdx++;
            }

            if (f.containsKey(x)) {
                int cnt = f.get(x);
                int temp = curr - cnt;
                temp = Math.max(temp, 0);
                int freq = cnt + Math.min(numOperations, temp);
                ans = Math.max(ans, freq);
            } else {
                int freq = Math.min(numOperations, curr);
                ans = Math.max(ans, freq);
            }
        }

        return ans;
    }
}",1447712426
Prabh,ResentfulPhantom,181,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        int max_ele = *max_element(nums.begin(), nums.end());
        vector<int> cnt(max_ele + 1), pref_cnt(max_ele + 1);
        for(int &i : nums) cnt[i]++;
        for(int i = 0; i <= max_ele; i++) {
            pref_cnt[i] = cnt[i] + (i ? pref_cnt[i - 1] : 0);
        }

        int answer = 0;
        for(int i = 0; i <= max_ele; i++) {
            int can_get = pref_cnt[min(i + k, max_ele)] - pref_cnt[max(0, i - k)] + cnt[max(0, i - k)] - cnt[i];
            int possible = min(numOperations, can_get) + cnt[i];
            answer = max(possible, answer);
        }

        return answer;
    } 
};",1447683707
Prabh,ResentfulPhantom,181,3626,cpp,"class Solution {
public:
    int smallestNumber(int n, int t) {

        for(int i = n; ; i++){
            int prod = 1;
            int temp = i;
            while(temp) {
                prod *= (temp % 10);
                temp /= 10;
            }

            if ((prod % t) == 0) return i;
        }
        
    }
};",1447654298
Prabh,ResentfulPhantom,181,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        sort(nums.begin(), nums.end());

        int answer = 0;
        for (int i = 0, j = 0; i < nums.size(); i++) {
            while (j < i and (nums[i] - nums[j]) > (2 * k)) j++;
            answer = max(answer, min(i - j + 1, numOperations));
        }

        for(int i = 0; i < nums.size();) {
            int j = i;
            while(j < nums.size() and nums[j] == nums[i]) j++;
            int l = lower_bound(nums.begin(), nums.end(), nums[i] - k) - nums.begin();
            int r = upper_bound(nums.begin(), nums.end(), nums[i] + k) - nums.begin();
            int possible = min(numOperations, i - l + r - j);
            answer = max(possible + j - i, answer);
            i = j;
        }

        return answer;
    }
};",1447720988
Saptarshi Bandyopadhyay,stellarsb7,183,3622,cpp,"int freq[100001];
class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOps) {
        int maxf=0,mine=nums[0],maxe=nums[0];
        memset(freq,0,sizeof freq);
        sort(nums.begin(),nums.end());
        for(int &x:nums){
            mine=min(mine,x);
            maxe=max(maxe,x);
            freq[x]++;
        }
        for(int j=mine;j<=maxe;j++){
            int i1=upper_bound(nums.begin(),nums.end(),j+k)-nums.begin();
            int i2=upper_bound(nums.begin(),nums.end(),j-k-1)-nums.begin();
            maxf=max(min(freq[j]+numOps,i1-i2),maxf);
        }
        return maxf;
        
    }
};",1447688212
Saptarshi Bandyopadhyay,stellarsb7,183,3626,cpp,"class Solution {
public:
    int smallestNumber(int n, int t) {
        for(int i=n;i<=100;i++){
            int m=i;
            int prod=1;
            while(m){
                prod*=m%10;
                m/=10;
            }
            if(prod%t==0){
                return i;
            }
        }
        return 100;
    }
};",1447655419
Saptarshi Bandyopadhyay,stellarsb7,183,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOps) {
        unordered_map<int,int>freq;
        int maxf=0,mine=nums[0],maxe=nums[0],n=nums.size();
        // memset(freq,0,sizeof freq);
        sort(nums.begin(),nums.end());
        for(int &x:nums){
            // mine=min(mine,x);
            // maxe=max(maxe,x);
            freq[x]++;
        }
        //if element not taken from nums
        int s=0,e=0;
        while(e<n){
            while(e<n && nums[e]-nums[s]<=k*2){
                e++;//include it
            }
            maxf=max(maxf,min(e-s,numOps));
            s++;
        }

        // taking element from nums as max
        for(int i=0;i<n;i++){
            int i1=upper_bound(nums.begin(),nums.end(),nums[i]+k)-nums.begin();
            int i2=upper_bound(nums.begin(),nums.end(),nums[i]-k-1)-nums.begin();
            // cout<<i<<"" ""<<i1-i2<<endl;
            maxf=max(min(freq[nums[i]]+numOps,i1-i2),maxf);
        }
        return maxf;
        
    }
};",1447721361
Fishron,Fishron,184,3622,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, no: int) -> int:
        m=max(nums)
        bl=[0]*(m+2+5*k)
        for e in nums:
            bl[e+1]+=1
        for i in range(1,len(bl)):
            bl[i]+=bl[i-1]
        c=Counter(nums)
        o=0
        #print(bl)
        for i in range(-k,m+k+1):
            cand=bl[i+k+1]-bl[max(0,i-k)]
            #print(i,cand)
            cand=c[i]+min(no,cand-c[i])
            #print(i,cand)
            o=max(o,cand)
        return o
            ",1447690649
Fishron,Fishron,184,3626,python3,"class Solution:
    def smallestNumber(self, n: int, t: int) -> int:
        for i in range(n,10**7):
            [cur:=1]+[cur:=cur*int(e)for e in str(i)]
            if cur%t==0:
                return i
        ",1447654400
Fishron,Fishron,184,3640,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, no: int) -> int:
        p1=[e-k for e in nums]
        p2=[e+k+1 for e in nums]
        sp1=Counter(p1)
        sp2=Counter(p2)
        
        c=Counter(nums)
        P=sorted(sp1|sp2|c)
        o=0
        best=0
        for e in P:
            o+=sp1[e]-sp2[e]

            cand=min(o,c[e]+no)
            #print(e,o,cand)
            best=max(best,cand)
        return best
        ",1447713054
kesshb,kesshb,185,3622,java,"class Solution {

  public int maxFrequency(int[] nums, int k, int numOperations) {
    Arrays.sort(nums);
    int max = 0;
    Map<Integer, Integer> freq = new HashMap<>();
    for (int num : nums) {
      freq.put(num, freq.getOrDefault(num, 0) + 1);
      max = Math.max(max, freq.get(num));
    }
    int n = nums.length;
    int[] sweep = new int[300003];
    for (int num : nums) {
      int index = 100000 + num;
      sweep[index - k]++;
      sweep[index + k + 1]--;
    }
    int sum = 0;
    for (int i = 0; i < 300003; i++) {
      int num = i - 100000;
      sum += sweep[i];
      int opsNeeded = sum - freq.getOrDefault(num, 0);
      int diff = Math.max(0, opsNeeded - numOperations);
      max = Math.max(max, sum - diff);
    }
    return max;
  }
}",1447688317
kesshb,kesshb,185,3626,java,"class Solution {
      public int smallestNumber(int n, int t) {
    for (int i = n; i <= 10000; i++) {
      if (digProduct(i) % t == 0) {
        return i;
      }
    }
    return -213123;
  }

  private int digProduct(int n) {
    int product = 1;
    while (n > 0) {
      product *= n % 10;
      n /= 10;
    }
    return product;
  }
}",1447653901
kesshb,kesshb,185,3640,java,"class Solution {

  
  public static void main(String... args) {
    Solution solution = new Solution();
    int[] nums = {1, 4, 5};
    int k = 1;
    int numOperations = 2;
    System.out.println(solution.maxFrequency(nums, k, numOperations));
  }

  public int maxFrequency(int[] nums, int k, int numOperations) {
    Arrays.sort(nums);
    int max = 0;
    Map<Integer, Integer> freq = new HashMap<>();
    for (int num : nums) {
      freq.put(num, freq.getOrDefault(num, 0) + 1);
      max = Math.max(max, freq.get(num));
    }
    int n = nums.length;
    Map<Integer, Integer> sweep = new HashMap<>();
    Queue<Integer> queue = new PriorityQueue<>((a, b) -> a - b);
    Set<Integer> visited = new HashSet<>();
    for (int num : nums) {
      if (!visited.contains(num - k)) {
        queue.add(num - k);
        visited.add(num - k);
      }
      if (!visited.contains(num + k + 1)) {
        queue.add(num + k + 1);
        visited.add(num + k + 1);
      }
      if (!visited.contains(num)) {
        queue.add(num);
        visited.add(num);
      }
      sweep.put(num - k, sweep.getOrDefault(num - k, 0) + 1);
      sweep.put(num + k + 1, sweep.getOrDefault(num + k + 1, 0) - 1);
    }
    int sum = 0;
    while (!queue.isEmpty()) {
      int next = queue.poll();
      sum += sweep.getOrDefault(next, 0);
      int opsNeeded = sum - freq.getOrDefault(next, 0);
      int diff = Math.max(0, opsNeeded - numOperations);
      max = Math.max(max, sum - diff);
    }
    return max;
  }
}",1447713076
Prateek Bahukhandi,prateeek123,188,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int op) {
        
        sort(nums.begin(),nums.end());
        int n=nums.size();
        long long int ans=1;
        map<long long int,long long int>mp;
        for(auto it:nums)
        {
            mp[it]++;
        }
        
        
        for(int i=0;i<n;i++)
        {
            long long int pre=nums[i]-k;
            long long int post=nums[i]+k;
            
           // cout<<pre<<"" ""<<post<<endl;
            long long int first=lower_bound(nums.begin(),nums.end(),pre)-nums.begin();
            long long int second=upper_bound(nums.begin(),nums.end(),post)-nums.begin();
           // cout<<first<<"" ""<<second<<endl;
             long long int done=mp[nums[i]]+op;
            ans=max(ans,min(done,second-first));
        }
        
        
        long long int K=k;
        for(int i=0;i<n;i++)
        {
            long long int pre=nums[i]-2*K;
            long long int first=lower_bound(nums.begin(),nums.end(),pre)-nums.begin();

            long long int done=mp[nums[i]-k]+op;
            ans=max(ans,min(done,(i-first)+1));
            
            
            
        }
        return ans;
        
        
    }
};



    
    
 ",1447694516
Prateek Bahukhandi,prateeek123,188,3626,cpp,"class Solution {
public:
    int smallestNumber(int n, int t) {
        
        int ans=0;
        for(int i=n;i<=1000;i++)
        {
            int num=i;
            int val=1;
            while(num)
            {
                int r=num%10;
                num/=10;
                val*=r;
            }
            
            if(val%t==0)
            {
                ans=i;
                break;
            }
        }
        return ans;
        
    }
};",1447654777
Prateek Bahukhandi,prateeek123,188,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int op) {
        
        sort(nums.begin(),nums.end());
        int n=nums.size();
        long long int ans=1;
        map<long long int,long long int>mp;
        for(auto it:nums)
        {
            mp[it]++;
        }
        
        
        for(int i=0;i<n;i++)
        {
            long long int pre=nums[i]-k;
            long long int post=nums[i]+k;
            
           // cout<<pre<<"" ""<<post<<endl;
            long long int first=lower_bound(nums.begin(),nums.end(),pre)-nums.begin();
            long long int second=upper_bound(nums.begin(),nums.end(),post)-nums.begin();
           // cout<<first<<"" ""<<second<<endl;
             long long int done=mp[nums[i]]+op;
            ans=max(ans,min(done,second-first));
        }
        
        
        long long int K=k;
        for(int i=0;i<n;i++)
        {
            long long int pre=nums[i]-2*K;
            long long int first=lower_bound(nums.begin(),nums.end(),pre)-nums.begin();

            long long int done=mp[nums[i]-k]+op;
            ans=max(ans,min(done,(i-first)+1));
            
            
            
        }
        return ans;
        
        
    }
};
",1447695737
İbrahim Hanif Çeker,ihceker,189,3622,cpp,"#define pb push_back
class Solution {
public:
    const int N=1e5;
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        vector<int>pre(3*N+5);
        vector<int>cnt(3*N+5);
        map<int,int>mp;
        for(int i=0;i<(int)nums.size();i++){
            cnt[nums[i]+N]++;
            pre[(nums[i]-k)+N]++;
            pre[nums[i]+k+1+N]--;
        }
        int sum=0,mx=0;
        for(int i=0;i<=3*N;i++){
            sum+=pre[i];
            mx=max(mx,min(sum,cnt[i]+numOperations));
        }
        return mx;
    }
};",1447682535
İbrahim Hanif Çeker,ihceker,189,3626,cpp,"class Solution {
public:
    int smallestNumber(int n, int t) {
        int x=n;
        while(true){
            int m=1,temp=x;
            while(temp>0){
                m*=temp%10;
                temp/=10;
            }
            if(m%t==0)return x;
            x++;
        }
    }
};",1447654703
İbrahim Hanif Çeker,ihceker,189,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        map<pair<int,int>,int>mp;
        for(int i=0;i<(int)nums.size();i++){
            mp[{nums[i]-k,0}]++;
            mp[{nums[i]+k+1,0}]--;
            mp[{nums[i],1}]++;
        }
        vector<pair<int,int>>v;
        int sum=0,mx=0;
        for(auto i:mp){
            if(i.first.second==1){
                mx=max(mx,min(sum,numOperations+i.second));
                continue;
            }
            sum+=i.second;
            mx=max(mx,min(sum,numOperations));
        }
        return mx;
    }
};",1447704764
lebron87,lebron87,190,3622,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOps: int) -> int:
        cc = collections.Counter(nums)
        t = [[key,cc[key]] for key in cc]
        t.sort()

        q = 0
        dp = [0 for _ in range(len(t))]
        i = 0

        print(t)
        for j in range(len(t)):
            
            while(t[j][0] - t[i][0] > k):
                q -= t[i][1]
                i+=1
            dp[j] = q
            q += t[j][1]

        j = len(t)-1
        q = 0
        for i in range(len(t))[::-1]:
            
            while(t[j][0] - t[i][0] > k):
                q -= t[j][1]
                j -=1
            dp[i] += q
            q += t[i][1]

        a = 0
        for j in range(len(dp)):
            a = max(a, min(numOps,dp[j]) + t[j][1])
        return max(self.g(t, numOps,2*k),a)

    def g(self,t,l,k):
        i = 0
        a = 0
        q = 0
        for j in range(len(t)):
            q += t[j][1]
            while(t[j][0] - t[i][0] > k):
                q-= t[i][1]
                i+=1
            a = max(a, q)

        
        return min(l, a)
        

        ",1447704429
lebron87,lebron87,190,3626,python3,"class Solution:
    def f(self, n , t):
        s = [int(e) for e in str(n)]
        a = 1
        for e in s:
            a *= e
            a %= t
            if a == 0:
                return True
        return False
    def smallestNumber(self, n: int, t: int) -> int:
        while(True):
            if self.f(n,t):
                return n
            n+=1",1447655040
lebron87,lebron87,190,3640,python3,"
class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOps: int) -> int:
        cc = collections.Counter(nums)
        t = [[key,cc[key]] for key in cc]
        t.sort()

        q = 0
        dp = [0 for _ in range(len(t))]
        i = 0

        print(t)
        for j in range(len(t)):
            
            while(t[j][0] - t[i][0] > k):
                q -= t[i][1]
                i+=1
            dp[j] = q
            q += t[j][1]

        j = len(t)-1
        q = 0
        for i in range(len(t))[::-1]:
            
            while(t[j][0] - t[i][0] > k):
                q -= t[j][1]
                j -=1
            dp[i] += q
            q += t[i][1]

        a = 0
        for j in range(len(dp)):
            a = max(a, min(numOps,dp[j]) + t[j][1])
        return max(self.g(t, numOps,2*k),a)

    def g(self,t,l,k):
        i = 0
        a = 0
        q = 0
        for j in range(len(t)):
            q += t[j][1]
            while(t[j][0] - t[i][0] > k):
                q-= t[i][1]
                i+=1
            a = max(a, q)

        
        return min(l, a)
        

        ",1447704829
powervic08,powervic08,193,3622,java,"class Solution {
    public int maxFrequency(int[] nums, int k, int numOperations) {
        int[] pref = new int[100001];
        for (int i = 0; i < nums.length; i++) {
            pref[nums[i]]++;
        }
        for (int i = 1; i < pref.length; i++) {
            pref[i] += pref[i - 1];
        }
        int ans = 1;
        for (int i = 1; i < pref.length; i++) {
            int ops = pref[Math.min(pref.length - 1, i + k)] - pref[Math.max(0, i - k - 1)] - pref[i] + pref[i - 1];
            ans = Math.max(ans, pref[i] - pref[i - 1] + Math.min(ops, numOperations));
        }
        return ans;
    }
}",1447675334
powervic08,powervic08,193,3626,java,"class Solution {
    public int smallestNumber(int n, int t) {
        int i = n;
        while (i < 1000) {
            String s = """" + i;
            int count = 1;
            for (int j = 0; j < s.length(); j++) {
                count *= s.charAt(j) - '0';
            }
            if (count % t == 0) {
                break;
            }
            i++;
        }
        return i;
    }
}",1447654013
powervic08,powervic08,193,3640,java,"class Solution {
    public int maxFrequency(int[] nums, int k, int numOperations) {
        HashMap<Integer, Integer> freq = new HashMap<>();
        for (int i = 0; i < nums.length; i++) {
            freq.put(nums[i], freq.getOrDefault(nums[i], 0) + 1);
        }
        int ans = 1;
        Arrays.sort(nums);
        for (int i = 0; i < nums.length; i++) {
            int no = freq.get(nums[i]);
            int l = 0;
            int r = nums.length - 1;
            while (l < r) {
                int mid = (l + r + 1) / 2;
                if (nums[mid] > nums[i] + k) {
                    r = mid - 1;
                }
                else {
                    l = mid;
                }
            }
            int l2 = 0;
            int r2 = nums.length - 1;
            while (l2 < r2) {
                int mid = (l2 + r2) / 2;
                if (nums[mid] < nums[i] - k) {
                    l2 = mid + 1;
                }
                else {
                    r2 = mid;
                }
            }
            int ops = l - l2 + 1 - freq.get(nums[i]);
            ans = Math.max(ans, freq.get(nums[i]) + Math.min(ops, numOperations));
        }
        int l = 0;
        int r = 0;
        while (r < nums.length) {
            if (nums[r] - nums[l] <= 2 * k) {
                r++;
            }
            else {
                ans = Math.max(ans, Math.min(r - l, numOperations));
                l++;
            }
        }
        ans = Math.max(ans, Math.min(r - l, numOperations));
        return ans;
    }
}",1447705376
Chethan J,Chet8n,194,3622,cpp,"/**
 *    author:  Chet8n
 *    created: 09.11.2024 20:08:17
 **/
#include <bits/stdc++.h>
using namespace std;

#define fastio ios::sync_with_stdio(0), cin.tie(0), cout.tie(0)
#define all(x) (x).begin(), (x).end()
#define ceill(x, y) ((x + y - 1) / y)
#define setbits(x) __builtin_popcountll(x)

const int mod = 1e9 + 7;
const int inf = 2e9 + 5;
const long long infl = 2e18 + 5;
double PI = 3.14159265358979323846;

#ifdef LOCAL
#include ""algo/debug.h""
#else
#define db(...) 20
#define sout(...) 20
#endif

class Solution {
  public:
    int maxFrequency(vector<int> &nums, int k, int numOperations) {

        int n = nums.size();
        sort(all(nums));
        map<int, int> freq;
        for (int i = 0; i < n; i++) {
            freq[nums[i]]++;
        }
        int ans = 0;
        for (int num = 1;num <= 1e5;num++) {
            int lb = num - k;
            int ub = num + k;
            int startIndex = lower_bound(all(nums), lb) - nums.begin();
            int endIndex = upper_bound(all(nums), ub) - nums.begin() - 1;
            if(endIndex < startIndex){
                continue;
            }
            int cnt = endIndex - startIndex + 1;
            int canChange = cnt - freq[num];
            ans = max(ans, min(canChange, numOperations) + freq[num]);
        }
        return ans;
    }
};

#ifdef LOCAL
int32_t main() {
    fastio;
    int testCases = 1;
    // cin >> testCases;
    for (int i = 1; i <= testCases; i++) {
        Solution s;
        vector<int> a = {88,53};
        auto ans = s.maxFrequency(a, 27, 2);
        sout(ans);
    }
}
#endif",1447687971
Chethan J,Chet8n,194,3626,cpp,"class Solution {
  public:
    int smallestNumber(int n, int t) {

        auto getProduct = [&](int num) {
            int product = 1;
            while (num) {
                int digit = num % 10;
                product *= digit;
                num /= 10;
            }
            return product;
        };

        while (true) {
            int x = getProduct(n);
            if (x % t == 0) {
                return n;
            }
            n++;
        }
        return -1;
    }
};",1447659744
Chethan J,Chet8n,194,3640,cpp,"/**
 *    author:  Chet8n
 *    created: 09.11.2024 20:23:35
 **/
#include <bits/stdc++.h>
using namespace std;

#define fastio ios::sync_with_stdio(0), cin.tie(0), cout.tie(0)
#define all(x) (x).begin(), (x).end()
#define ceill(x, y) ((x + y - 1) / y)
#define setbits(x) __builtin_popcountll(x)

const int mod = 1e9 + 7;
const int inf = 2e9 + 5;
const long long infl = 2e18 + 5;
double PI = 3.14159265358979323846;

#ifdef LOCAL
#include ""algo/debug.h""
#else
#define db(...) 20
#define sout(...) 20
#endif

class Solution {
  public:
    int maxFrequency(vector<int> &nums, int k, int numOperations) {

        map<long long, int> mp;
        int n = nums.size();
        map<long long, int> freq;
        for (int i = 0; i < n; i++) {
            mp[(long long)nums[i]] = 0;
        }
        for (int i = 0; i < n; i++) {
            freq[nums[i]]++;
            long long left = (long long)nums[i] - k;
            long long right = (long long)nums[i] + k;
            mp[left] += 1;
            mp[right + 1] -= 1;
        }

        long long soFar = 0;
        int ans = 0;
        for (auto x : mp) {
            long long num = x.first;
            int cnt = x.second + soFar;
            int canBecome = min(numOperations, cnt - freq[num]);
            ans = max(ans, canBecome + freq[num]);
            soFar += x.second;
        }
        return ans;
    }
};

#ifdef LOCAL
int32_t main() {
    fastio;
    int testCases = 1;
    // cin >> testCases;
    for (int i = 1; i <= testCases; i++) {
        Solution s;
        vector<int> a = {1, 4, 5};
        auto ans = s.maxFrequency(a, 1, 2);
        sout(ans);
    }
}
#endif",1447714143
李霁,4irmelt,197,3622,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        nums.sort()
        n = len(nums)
        c = Counter(nums)
        s = set(nums)
        for num in nums:
            s.add(num)
            s.add(num - k)
            s.add(num + k)
        r = 0
        # print(s)
        # print(c)
        for v in s:
            left = bisect_left(nums, v - k)
            right = bisect_right(nums, v + k) - 1
            # print(nums, left, right)
            if left > right:
                continue
            need = right - left + 1 - c.get(v, 0)
            # if need > numOperations:
            #     continue
            r = max(r, c.get(v, 0) + min(numOperations, need))
        r = max(r, max(c.values()))
        return r",1447697642
李霁,4irmelt,197,3626,python3,"class Solution:
    def smallestNumber(self, n: int, t: int) -> int:
        for i in range(n, 0x3f3f3f3f):
            if reduce(lambda x, y: x * y, (int(j) for j in str(i))) % t == 0:
                return i",1447654534
李霁,4irmelt,197,3640,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        nums.sort()
        n = len(nums)
        c = Counter(nums)
        s = set(nums)
        for num in nums:
            s.add(num)
            s.add(num - k)
            s.add(num + k)
        r = 0
        # print(s)
        # print(c)
        for v in s:
            left = bisect_left(nums, v - k)
            right = bisect_right(nums, v + k) - 1
            # print(nums, left, right)
            if left > right:
                continue
            need = right - left + 1 - c.get(v, 0)
            # if need > numOperations:
            #     continue
            r = max(r, c.get(v, 0) + min(numOperations, need))
        r = max(r, max(c.values()))
        return r",1447696960
Temur Khasanov,temur__khasanov,198,3622,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        nums.sort()
        counter = Counter(nums)
        ans =0
        for i in range(nums[0]-k, nums[-1]+k+1):
            res = counter[i]
            right = bisect.bisect_right(nums, i+k)
            left = bisect.bisect_left(nums, i-k)
            # print(i, left, right)
            ans= max(ans, res + min(right-left-res, numOperations))

        return ans",1447704522
Temur Khasanov,temur__khasanov,198,3626,python3,"class Solution:
    def smallestNumber(self, n: int, t: int) -> int:
        def pr(n):
            res = 1
            for ch in str(n):
                res*=int(ch)
            return res
        while pr(n)%t:
            n+=1
        return n",1447655014
Temur Khasanov,temur__khasanov,198,3640,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        nums.sort()
        counter = Counter(nums)
        ans =0

        def calc(num):
            res = counter[num]
            right = bisect.bisect_right(nums, num+k)
            left = bisect.bisect_left(nums, num-k)
            # print(i, left, right)
            return res + min(right-left-res, numOperations)
        
        for i in range(len(nums)):
            num = nums[i]
            val1 = calc(num)
            val2 = calc(num+k)
            val3 = calc(num-k)
            # print(i, left, right)
            ans= max(ans, max([val1, val2, val3]))
           

        return ans",1447723520
Stepan Danilov,StepDan23,199,3622,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        intervals = []
        for num in nums:
            intervals.extend([(num - k, 'l'), (num, 'mid'), (num + k, 'r')])
        intervals.sort()


        ans = 1
        accum = 0
        prev_mid = float('inf')
        n_mids = 0
        for val, acc in intervals:
            if acc == 'l':
                accum += 1
                n_mids = 0
            elif acc == 'r':
                accum -= 1
                n_mids = 0
            elif prev_mid == val:
                n_mids += 1
            else:
                n_mids = 1
                prev_mid = val
            ans = max(ans, min(accum, numOperations + n_mids))
        return ans
            
                
                ",1447686310
Stepan Danilov,StepDan23,199,3626,python3,"class Solution:
    def smallestNumber(self, n: int, t: int) -> int:
        while True:
            prod = 1
            for dig in str(n):
                prod *= int(dig)
            if prod % t == 0:
                return n
            n += 1
        return -1
        ",1447697710
Stepan Danilov,StepDan23,199,3640,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        intervals = []
        for num in nums:
            intervals.extend([(num - k, 'l'), (num, 'mid'), (num + k, 'r')])
        intervals.sort()


        ans = 1
        accum = 0
        prev_mid = float('inf')
        n_mids = 0
        for val, acc in intervals:
            if acc == 'l':
                accum += 1
                n_mids = 0
            elif acc == 'r':
                accum -= 1
                n_mids = 0
            elif prev_mid == val:
                n_mids += 1
            else:
                n_mids = 1
                prev_mid = val
            ans = max(ans, min(accum, numOperations + n_mids))
        return ans
            
                
                ",1447687277
Vidit Agrawal,kudovidit,200,3622,cpp,"class Solution {
public:
#define ll long long
    int maxFrequency(vector<int>& nums, int k, int no) {
        map<ll,ll> mp,mm;
        for(auto x:nums){
            mp[1ll*x-k]++;
            mp[1ll*x]--;
            mp[1ll*x+1]++;
            mp[1ll*x+k+1]--;
            mm[x]++;
        }
        ll ct=0,ans=0;
        for(auto x:mp){
            ct+=x.second;
            ans=max(ans,min(ct,1ll*no)+mm[1ll*x.first]);
            // cout<<x.first<<""-""<<x.second<<"" ""<<ct<<"" ""<<ans<<endl;
         }
        return ans;
    }
};",1447722539
Vidit Agrawal,kudovidit,200,3626,cpp,"class Solution {
public:
    int smallestNumber(int n, int t) {
        int f=0;
        while(1){
            int val=1,x=n;
            while(x){
                val*=x%10;
                x/=10;
            }
            if(val%t==0) return n;
            n++;
        }
        return 0;
    }
};",1447657579
Vidit Agrawal,kudovidit,200,3640,cpp,"class Solution {
public:
#define ll long long
    int maxFrequency(vector<int>& nums, int k, int no) {
        map<ll,ll> mp,mm;
        for(auto x:nums){
            mp[1ll*x-k]++;
            mp[1ll*x]--;
            mp[1ll*x+1]++;
            mp[1ll*x+k+1]--;
            mm[x]++;
        }
        ll ct=0,ans=0;
        for(auto x:mp){
            ct+=x.second;
            ans=max(ans,min(ct,1ll*no)+mm[1ll*x.first]);
            // cout<<x.first<<""-""<<x.second<<"" ""<<ct<<"" ""<<ans<<endl;
         }
        return ans;
    }
};",1447723996
hsdsh,hsdsh,201,3622,swift,"class Solution {
    func maxFrequency(_ nums: [Int], _ k: Int, _ numOperations: Int) -> Int {
        let n = nums.sorted()
        var l = 0
        var m = 0
        var me = 0
        var r = 0
        var ret = 0
        for m in 0..<n.count {
            while n[l] < n[m]-k { l += 1}
            while me < n.count && n[me] <= n[m] { me += 1}
            while r < n.count && n[r] <= n[m]+k { r += 1}
            ret = max(ret, me-m+min((r-l-me+m),numOperations))
            //print(l,m,me, r,me-m, r-l)
        }
        r = 0
        for m in 0..<n.count {
            while r < n.count && n[r] <= n[m]+2*k {
                r += 1
            }
            ret = max(ret, min(r-m, numOperations))
            //print(m, r)
        }
        return ret
    }
}",1447695397
hsdsh,hsdsh,201,3626,swift,"class Solution {
    func smallestNumber(_ n: Int, _ t: Int) -> Int {
        var ret = n
        while true {
            var r = ret
            var dp = 1
            while r > 0 {
                dp *= r%10
                r = r/10
            }
            if dp%t == 0 { break }
            ret += 1
        }
        return ret
    }
}",1447656199
hsdsh,hsdsh,201,3640,swift,"class Solution {
    func maxFrequency(_ nums: [Int], _ k: Int, _ numOperations: Int) -> Int {
        let n = nums.sorted()
        var l = 0
        var m = 0
        var me = 0
        var r = 0
        var ret = 0
        for m in 0..<n.count {
            while n[l] < n[m]-k { l += 1}
            while me < n.count && n[me] <= n[m] { me += 1}
            while r < n.count && n[r] <= n[m]+k { r += 1}
            ret = max(ret, me-m+min((r-l-me+m),numOperations))
            //print(l,m,me, r,me-m, r-l)
        }
        r = 0
        for m in 0..<n.count {
            while r < n.count && n[r] <= n[m]+2*k {
                r += 1
            }
            ret = max(ret, min(r-m, numOperations))
            //print(m, r)
        }
        return ret
    }
}",1447707666
Saiyan HarshD,HarshDagar8181,202,3622,cpp,"#pragma GCC optimize(""Ofast"")
#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
using namespace std;
typedef tree<int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update> ordered_set;
typedef long long ll;
typedef unsigned long long ull;
#define V vector
#define pb push_back
#define pf push_front
#define qb pop_back
#define qf pop_front
#define eb emplace_back
typedef pair<int, int> pii;
typedef pair<ll, int> pli;
#define fi first
#define se second
#define FR(i, a, b) for (int i = a; i <= b; i++)
#define FRR(i, a, b) for (int i = a; i >= b; i--)
#define _sort(x) sort((x).begin(),(x).end());
const int inf = 0x3f3f3f3f, mod = 1e9 + 7;
const ll infl = 0x3f3f3f3f3f3f3f3fll;



class Solution {
public:
    int maxFrequency(vector<int>& arr, int k, int op) {
        int n=arr.size();
        _sort(arr);
        map<int,int>mp;
        for(auto it:arr)mp[it]++;
        int res=1;
        int ind=0;
        for(int i=1;i<n;i++){
            int left=lower_bound(arr.begin(),arr.end(),arr[i]-k)-arr.begin();
            int right=upper_bound(arr.begin(),arr.end(),arr[i]+k)-arr.begin();
            right--;
            if(left<0)left++;
            int temp=right-left+1-mp[arr[i]];
            int curr=mp[arr[i]]+min(op,temp);
            res=max(res,curr);
            
            int j=lower_bound(arr.begin(),arr.end(),arr[i]-2*k)-arr.begin();
            if(j<0)j=0;
            temp=i-j+1;
            curr=min(temp,op);    
            res=max(res,curr);
        }
        return res;

    }
};",1447704605
Saiyan HarshD,HarshDagar8181,202,3626,cpp,"class Solution {
public:
    int hel(int x){
        int res=1;
        while(x){
            int r=x%10;
            res=res*r;
            x=x/10;
        }
        return res;
    }
    int smallestNumber(int n, int t) {
        int res=n;
        while(1){
            int temp=hel(res);
            if(temp%t==0)break;
            res++;
        }
        return res;
    }
};",1447655153
Saiyan HarshD,HarshDagar8181,202,3640,cpp,"#pragma GCC optimize(""Ofast"")
#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
using namespace std;
typedef tree<int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update> ordered_set;
typedef long long ll;
typedef unsigned long long ull;
#define V vector
#define pb push_back
#define pf push_front
#define qb pop_back
#define qf pop_front
#define eb emplace_back
typedef pair<int, int> pii;
typedef pair<ll, int> pli;
#define fi first
#define se second
#define FR(i, a, b) for (int i = a; i <= b; i++)
#define FRR(i, a, b) for (int i = a; i >= b; i--)
#define _sort(x) sort((x).begin(),(x).end());
const int inf = 0x3f3f3f3f, mod = 1e9 + 7;
const ll infl = 0x3f3f3f3f3f3f3f3fll;



class Solution {
public:
    int maxFrequency(vector<int>& A, int k, int op) {
        V<ll>arr;
        for(auto it:A)arr.push_back(it);
        ll n=arr.size();
        
        _sort(arr);
        map<ll,ll>mp;
        for(auto it:arr)mp[it]++;
        int res=1;
        ll ind=0;
        for(int i=1;i<n;i++){
            ll left=lower_bound(arr.begin(),arr.end(),arr[i]-k)-arr.begin();
            ll right=upper_bound(arr.begin(),arr.end(),arr[i]+k)-arr.begin();
            right--;
            if(left<0)left++;
            ll temp=right-left+1-mp[arr[i]];
            ll curr=mp[arr[i]]+min((ll)op,temp);
            res=max((ll)res,curr);
            
            ll j=lower_bound(arr.begin(),arr.end(),arr[i]-2*k)-arr.begin();
            if(j<0)j=0;
            temp=i-j+1;
            curr=min(temp,(ll)op);    
            res=max((ll)res,curr);
        }
        return res;

    }
};",1447707671
Shashank Reddy Pal Reddy,shashank_2209,203,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        int N = (1e5) + 7;
        vector<int> cnt(N, 0);
        vector<int> lse(N, 0);
        for(auto x : nums) cnt[x]++;
        for(int i = 1; i < N; i++) {
            lse[i] = lse[i - 1] + cnt[i];
        }

        int ans = 1;
        for(int i = 1; i < N; i++) {
            int upper = i + k;
            int low = i - k - 1;
            upper = min(upper, N - 1);
            low = max(0, low);

            int turn = lse[upper] - lse[low] - cnt[i];
            turn = min(turn, numOperations);

            ans = max(ans, turn + cnt[i]);
        }
        return ans;
    }
};",1447678965
Shashank Reddy Pal Reddy,shashank_2209,203,3626,cpp,"class Solution {
public:
    int smallestNumber(int n, int t) {
        for(int i = 0; i <= 10; i++) {
            int N = n + i;
            int pro = 1;
            while(N > 0) {
                pro *= (N % 10);
                N /= 10;
            }
            if((pro % t) == 0) return n + i;
        }
        return -1;
    }
};",1447655998
Shashank Reddy Pal Reddy,shashank_2209,203,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        int N = (1e9) + 7;
        //vector<int> cnt(N, 0);
        map<int, int> cnt, flag;
        //vector<int> lse(N, 0);
        vector<int> a;
        
        for(auto x : nums) cnt[x]++;
        flag[0] = 1;
        flag[N] = 1;
        for(auto x : nums) {
            if(flag[x] == 0) {
                a.push_back(x);
                flag[x] = 1;
            }
            int upp = min(x + k, N);
            if(flag[upp] == 0) a.push_back(upp);
            int low = max(0, x - k);
            if(flag[low] == 0) a.push_back(low);
            flag[upp] = 1;
            flag[low] = 1;
        }

        sort(nums.begin(), nums.end());
        sort(a.begin(), a.end());
        // for(int i = 1; i < N; i++) {
        //     lse[i] = lse[i - 1] + cnt[i];
        // }

        int ans = 1;
        for(auto x : a) {
            auto it_upper = upper_bound(nums.begin(), nums.end(), x + k);
            auto it_low = lower_bound(nums.begin(), nums.end(), x - k);
            int turn = (int) (it_upper - it_low);
            //cout << *it_low << "" &&& "";
            turn -= cnt[x];
            turn = min(turn, numOperations);

            ans = max(ans, turn + cnt[x]);
            //cout << x << ' ' << ans << "" ** "" << turn << ' ' << cnt[x] << '\n';
        }
        return ans;
    }
};",1447716332
Arturo,ArturoPerez,204,3622,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        d = defaultdict(int)

        for i in nums:
            d[i] += 1

        keys = sorted(d.keys())

        res = 0
        currentSum = 0
        l = 0
        r = 0

        while(r < len(keys)):
            center = keys[l] + k
            while(r < len(keys) and keys[r] <= center + k):
                currentSum += d[keys[r]]
                r+=1


            res = max(res, min(currentSum, d[center] + numOperations))
            # print(""center:"", center, ""currentSum:"", currentSum, ""l:"", l, ""r:"", r)
            currentSum -= d[keys[l]]
            l += 1

        currentSum = 0
        l = 0
        center = 0
        r = 0

        while(center < len(keys)):
            while(r < len(keys) and keys[r] <= keys[center] + k):
                currentSum += d[keys[r]]
                r+=1
            while(l<center and keys[l] < keys[center] -k):
                currentSum -= d[keys[l]]
                l+=1

            res = max(res, min(currentSum, d[keys[center]] + numOperations))
            # print(""center:"", center, ""currentSum:"", currentSum, ""l:"", l, ""r:"", r)
            center += 1
        return res",1447715805
Arturo,ArturoPerez,204,3626,python3,"class Solution:
    def smallestNumber(self, n: int, t: int) -> int:
        while(True):
            v = 1
            for i in str(n):
                v*=int(i)
            if v%t == 0:
                return n
            n+=1",1447658444
Arturo,ArturoPerez,204,3640,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        d = defaultdict(int)

        for i in nums:
            d[i] += 1

        keys = sorted(d.keys())

        res = 0
        currentSum = 0
        l = 0
        r = 0

        while(r < len(keys)):
            center = keys[l] + k
            while(r < len(keys) and keys[r] <= center + k):
                currentSum += d[keys[r]]
                r+=1


            res = max(res, min(currentSum, d[center] + numOperations))
            # print(""center:"", center, ""currentSum:"", currentSum, ""l:"", l, ""r:"", r)
            currentSum -= d[keys[l]]
            l += 1

        currentSum = 0
        l = 0
        center = 0
        r = 0

        while(center < len(keys)):
            while(r < len(keys) and keys[r] <= keys[center] + k):
                currentSum += d[keys[r]]
                r+=1
            while(l<center and keys[l] < keys[center] -k):
                currentSum -= d[keys[l]]
                l+=1

            res = max(res, min(currentSum, d[keys[center]] + numOperations))
            # print(""center:"", center, ""currentSum:"", currentSum, ""l:"", l, ""r:"", r)
            center += 1
        return res",1447716415
Kiu2024Fall_Eke-Bichi,Kiu2024Fall_Eke-Bichi,205,3622,cpp,"
#include <bits/stdc++.h>
using namespace std;

class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        map<long long, long long> fx;
        for(int i = 0; i < nums.size(); i++){
            fx[nums[i]]++;
        }
        int t = 0;
        vector<pair<long long, long long> > v(nums.size(), {0, 0});
        for(auto it: fx){
            v[t].first = it.first;
            v[t].second = it.second;
            if(t != 0){
                v[t].second += v[t - 1].second;
            }
            t++;
        }
        long long anss = 0;
        
        for(long long i = 0; i < t; i++){
            long long l1 = 0, r1 = i;
            long long ns = -1;
            long long ns2 = -1;

            while(l1 <= r1){
                long long mid = (l1 + r1)/2;

                if(v[mid].first + k >= v[i].first){
                    ns = mid;
                    r1 = mid - 1;
                }
                else{
                    l1 = mid + 1;
                }
            }

            l1 = i;
            r1 = t - 1;
            
            while(l1 <= r1){
                long long mid = (l1 + r1)/2;

                if(v[mid].first - k <= v[i].first){
                    ns2 = mid;
                    l1 = mid + 1;
                }
                else{
                    r1 = mid - 1;
                }
            }

            int cnt = 0;
            if(ns == 0){
                cnt = v[ns2].second;
            }
            else{
                cnt = v[ns2].second - v[ns - 1].second;
            }
            cnt -= fx[v[i].first];
            cnt = min(cnt, numOperations);
            anss = max(anss, cnt + fx[v[i].first]);
        }

        int l = 0, r = 0;
        int kk = 2*k;
        while(r != t){
            int dis = 0;
            dis = v[r].first - v[l].first;

            if(dis > kk){
                l++;
            }
            else{
                int wk = v[r].second;
                if(l != 0){
                    wk -= v[l - 1].second;
                }
                anss = max(anss, (long long)min(numOperations, wk));
                r++;
            }
        }
        return anss;
    }
};",1447724717
Kiu2024Fall_Eke-Bichi,Kiu2024Fall_Eke-Bichi,205,3626,cpp,"class Solution {
public:
    int getDigProd(int x){
        int k = 1;
        while(x != 0){
            k = k * (x%10);
            x/=10;
        }
        return k;
    }
    int smallestNumber(int n, int t) {
        for(int i = n; i <= 1000*n; i++){
            if(getDigProd(i)%t == 0){
                return i;
            }
        }
        return 0;
    }
};",1447656777
Kiu2024Fall_Eke-Bichi,Kiu2024Fall_Eke-Bichi,205,3640,cpp,"
#include <bits/stdc++.h>
using namespace std;

class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        map<long long, long long> fx;
        for(int i = 0; i < nums.size(); i++){
            fx[nums[i]]++;
        }
        int t = 0;
        vector<pair<long long, long long> > v(nums.size(), {0, 0});
        for(auto it: fx){
            v[t].first = it.first;
            v[t].second = it.second;
            if(t != 0){
                v[t].second += v[t - 1].second;
            }
            t++;
        }
        long long anss = 0;
        
        for(long long i = 0; i < t; i++){
            long long l1 = 0, r1 = i;
            long long ns = -1;
            long long ns2 = -1;

            while(l1 <= r1){
                long long mid = (l1 + r1)/2;

                if(v[mid].first + k >= v[i].first){
                    ns = mid;
                    r1 = mid - 1;
                }
                else{
                    l1 = mid + 1;
                }
            }

            l1 = i;
            r1 = t - 1;
            
            while(l1 <= r1){
                long long mid = (l1 + r1)/2;

                if(v[mid].first - k <= v[i].first){
                    ns2 = mid;
                    l1 = mid + 1;
                }
                else{
                    r1 = mid - 1;
                }
            }

            int cnt = 0;
            if(ns == 0){
                cnt = v[ns2].second;
            }
            else{
                cnt = v[ns2].second - v[ns - 1].second;
            }
            cnt -= fx[v[i].first];
            cnt = min(cnt, numOperations);
            anss = max(anss, cnt + fx[v[i].first]);
        }

        int l = 0, r = 0;
        int kk = 2*k;
        while(r != t){
            int dis = 0;
            dis = v[r].first - v[l].first;

            if(dis > kk){
                l++;
            }
            else{
                int wk = v[r].second;
                if(l != 0){
                    wk -= v[l - 1].second;
                }
                anss = max(anss, (long long)min(numOperations, wk));
                r++;
            }
        }
        return anss;
    }
};",1447724958
Rohan Bhardwaj,RohanBhardwaj08,206,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        int n = nums.size();
        map<int,int> mp;
        vector<pair<int,int>> v;
        for(int i=0;i<n;i++){
            mp[nums[i]]++;
            v.push_back({nums[i]-k,1});
            v.push_back({nums[i]+k+1,-1});
        }
        sort(v.begin(),v.end());
        int count = 0;
        int ans = 0;
        int j = 0;
        for(int i= v[0].first;i<=v.back().first;i++){
            
            while(j<v.size() && v[j].first==i ){
                if(v[j].second == 1){
                    count++;
                }else{
                    count--;
                }
                j++;
            }
            if(count>numOperations){
                int c = count - mp[i];
                ans = max(ans, mp[i] + min(c,numOperations));
            }else{
                ans = max(ans,count);
            }
        }
        
        return ans;
    }
};",1447690700
Rohan Bhardwaj,RohanBhardwaj08,206,3626,cpp,"class Solution {
public:
    int smallestNumber(int n, int t) {
        int i = n;
        while(1){
            string s = to_string(i);
            int val = 1;
            for(int j=0;j<s.size();j++){
                val *= (s[j]-'0');
            }
            cout<<val<<endl;
            if(val%t==0){
                return i;
                break;
            }
            i++;
        }
        return -1;
    }
};",1447660628
Rohan Bhardwaj,RohanBhardwaj08,206,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        int n = nums.size();
        map<int,int> mp;
        vector<pair<int,int>> v;
        for(int i=0;i<n;i++){
            mp[nums[i]]++;
            v.push_back({nums[i]-k,1});
            v.push_back({nums[i]+k+1,-1});
        }
        vector<pair<int,int>> save;
        for(auto [a,b]:mp){
            save.push_back({a,b});
        }
        sort(v.begin(),v.end());
        int count = 0;
        int ans = 0;
        
        for(int i = 0;i<v.size();i++){
            int j = i;
            while(j<v.size() && v[i].first==v[j].first){
                count += v[j].second;
                j++;
            }
            int st=0,end=0;
            if(j!= v.size()){
                st = v[i].first;
                end = v[j].first;
            }
            
            if(count<=numOperations){
                ans = max(ans, count);
            }else{
                int idx = lower_bound(save.begin(),save.end(),make_pair(st,INT_MIN)) - save.begin();
                
                while(idx<save.size() && save[idx].first<end){
                    int va = count - save[idx].second;
                    ans = max(ans, min(va,numOperations) + save[idx].second);
                    idx++;
                }
                
            }
            i = j-1;
        }
        
        return ans;
    }
};",1447725079
Dmitry,Dimed,207,3622,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        #[     ] 
        #   [.   ]
        #     [.    ]
        ans = 0

        d = defaultdict(int)
        for num in nums:
            d[num] += 1

        un = [a for a in d.keys()]
        un.sort()

        open, close = [], []
        for n in un:
            open.append(n-k)
            close.append(n+k)

        open.append(9999999)
        curr = 0
        pO, pC, pU = 0, 0, 0
        while pU < len(un):
            t = min(open[pO], close[pC], un[pU])
            if t == open[pO]:
                curr += d[un[pO]]
                pO += 1
                ans = max(ans, min(curr, numOperations))
            if t == un[pU]:
                ans = max(ans, d[un[pU]]+min(curr-d[un[pU]], numOperations))
                pU += 1
            if t == close[pC]:
                curr -= d[un[pC]]
                pC += 1
        
        return ans
        ",1447714425
Dmitry,Dimed,207,3626,python3,"class Solution:
    def smallestNumber(self, n: int, t: int) -> int:
        for i in range(n, 999999):
            str_i = str(i)
            p = 1
            for k in str_i:
                p *= int(k)
            if p%t == 0:
                return i",1447656160
Dmitry,Dimed,207,3640,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        ans = 0

        d = defaultdict(int)
        for num in nums:
            d[num] += 1

        un = [a for a in d.keys()]
        un.sort()

        open, close = [], []
        for n in un:
            open.append(n-k)
            close.append(n+k)

        open.append(9999999999)
        curr = 0
        pO, pC, pU = 0, 0, 0
        while pU < len(un):
            t = min(open[pO], close[pC], un[pU])
            if t == open[pO]:
                curr += d[un[pO]]
                pO += 1
                ans = max(ans, min(curr, numOperations))
            if t == un[pU]:
                ans = max(ans, d[un[pU]]+min(curr-d[un[pU]], numOperations))
                pU += 1
            if t == close[pC]:
                curr -= d[un[pC]]
                pC += 1
        
        return ans
        ",1447716631
kaizan,nagpalvarun2003,209,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        sort(nums.begin(), nums.end());
        map<int, int> mp;
        for(auto num : nums) {
            mp[num]++;
        }
        vector<pair<int, int>> events;
        for(auto num : nums) {
            events.emplace_back(make_pair(num - k, 1));
            events.emplace_back(make_pair(num + k + 1, -1));
        }
    
        sort(events.begin(), events.end());
        vector<int> uni;
        for(auto &[x, cnt] : mp) {
            uni.push_back(x);
        }
        sort(uni.begin(), uni.end());
        int curr = 0, ans = 0, i = 0, m = events.size();
        vector<int> rel;
        for(auto &[x, _] : events) {
            rel.push_back(x);
        }
        for(auto x : uni) {
            rel.push_back(x);
        }
        sort(rel.begin(), rel.end());
        rel.erase(unique(rel.begin(), rel.end()), rel.end());
        for(auto x : rel) {
            while(i < m && events[i].first <= x) {
                curr += events[i].second;
                i++;
            }
            if(mp.find(x) != mp.end()) {
                ans = max(ans, mp[x] + min(numOperations, max(0, curr - mp[x])));
            }
            if(mp.find(x) == mp.end()) {
                if(curr >0){
                    int freq = min(numOperations, curr);
                    ans = max(ans, freq);
                }
            }
        }
    
        return ans;
    }
};",1447715578
kaizan,nagpalvarun2003,209,3626,cpp,"class Solution {
public:
    int getDigitProduct(int n){
        int ans = 1;
        while(n){
            ans *= n%10;
            n/=10;
        }
        return ans;
    }
    int smallestNumber(int n, int t) {
        for(int i = n; i<= 100; i++){
            if(getDigitProduct(i)%t == 0) return i;
        }
        return -1;
    }
};",1447653930
kaizan,nagpalvarun2003,209,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        sort(nums.begin(), nums.end());
        map<int, int> mp;
        for(auto num : nums) {
            mp[num]++;
        }
        vector<pair<int, int>> events;
        for(auto num : nums) {
            events.emplace_back(make_pair(num - k, 1));
            events.emplace_back(make_pair(num + k + 1, -1));
        }
    
        sort(events.begin(), events.end());
        vector<int> uni;
        for(auto &[x, cnt] : mp) {
            uni.push_back(x);
        }
        sort(uni.begin(), uni.end());
        int curr = 0, ans = 0, i = 0, m = events.size();
        vector<int> rel;
        for(auto &[x, _] : events) {
            rel.push_back(x);
        }
        for(auto x : uni) {
            rel.push_back(x);
        }
        sort(rel.begin(), rel.end());
        rel.erase(unique(rel.begin(), rel.end()), rel.end());
        for(auto x : rel) {
            while(i < m && events[i].first <= x) {
                curr += events[i].second;
                i++;
            }
            if(mp.find(x) != mp.end()) {
                ans = max(ans, mp[x] + min(numOperations, max(0, curr - mp[x])));
            }
            if(mp.find(x) == mp.end()) {
                if(curr >0){
                    int freq = min(numOperations, curr);
                    ans = max(ans, freq);
                }
            }
        }
    
        return ans;
    }
};",1447717829
Nikita Ravcheev,Nikitiwe,210,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int n) {
        sort(nums.begin(), nums.end());
        unordered_map<int, int> m;
        vector<int> arr(100002, 0);
        int t=arr.size();
        for (int i=0; i!=nums.size(); i++)
            {
                arr[max(0, nums[i]-k)]++;
                arr[min(t-2, nums[i]+k)+1]--;
                m[nums[i]]++;
            }
        int ans=0;
        for (int i=1; i!=arr.size(); i++)
            {
                arr[i]+=arr[i-1];
                if (m.count(i)>0)
                {
                    ans=max(ans, m[i]+min(n, arr[i]-m[i]));
                }
                else
                {
                    ans=max(ans, min(n, arr[i]));
                }
            }
        return ans;
    }
};",1447682798
Nikita Ravcheev,Nikitiwe,210,3626,cpp,"class Solution {
public:
    int smallestNumber(int n, int t) {
        for (int i=n; i!=n*100; i++)
            {
                int a=i, p=1;
                while (a>0)
                    {
                        p*=a%10;
                        a/=10;
                    }
                if (p%t==0) return i;
            }
        return -1;
    }
};",1447655083
Nikita Ravcheev,Nikitiwe,210,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int n) {
        unordered_map<int, int> m;
        for (int i = 0; i != nums.size(); i++)
        {
            m[nums[i]]++;
        }
        vector<int> dop;
        sort(nums.begin(), nums.end());
        for (int i = 0; i !=nums.size(); i++)
        {
            if (m.count(nums[i]+k)==0) dop.push_back(nums[i]+k);
        }
        int ans=0, l=0, r=0;
        for (int i = 0; i != nums.size(); i++)
        {
            while (l+1<=i&&nums[l]+k<nums[i]) l++;
            while (r+1<nums.size()&&nums[r+1]-k<=nums[i]) r++;
            if (m.count(nums[i])>0)
            {
                ans=max(ans, m[nums[i]]+min(r-l+1-m[nums[i]], n));
            }
            else
            {
                ans=max(ans, min(r-l+1, n));
            }
        }
        l=0; r=0;
        for (int i = 0; i != dop.size(); i++)
            {
                while (l+1<nums.size()&&nums[l]+k<dop[i]) l++;
                while (r+1<nums.size()&&nums[r+1]-k<=dop[i]) r++;
                ans=max(ans, min(r-l+1, n));
            }
        return ans;
    }
};",1447718010
Andimeo,Andimeo,211,3622,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        cnt = Counter(nums)
        ks = sorted(cnt)
        vs = [cnt[k] for k in ks]
        for i in range(1, len(vs)):
            vs[i] += vs[i-1]
        ans = 0
        for i, v in enumerate(ks):
            l = bisect_left(ks, v - k)
            r = bisect_right(ks, v + k) - 1
            s = vs[r] - (vs[l - 1] if l > 0 else 0)
            cur = vs[i] - (vs[i-1] if i > 0 else 0)
            ans = max(ans, cur + min(numOperations, s - cur))

            idx = bisect_left(ks, v - 2 * k)
            s = vs[i] - (vs[idx-1] if idx > 0 else 0)
            ans = max(ans, min(numOperations, s))
        return ans",1447701044
Andimeo,Andimeo,211,3626,python3,"class Solution:
    def smallestNumber(self, n: int, t: int) -> int:
        while True:
            v = n
            s = 1
            while v:
                s *= v % 10
                v //= 10
            if s % t == 0:
                return n
            n+=1
        return -1",1447655733
Andimeo,Andimeo,211,3640,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        cnt = Counter(nums)
        ks = sorted(cnt)
        vs = [cnt[k] for k in ks]
        for i in range(1, len(vs)):
            vs[i] += vs[i-1]
        ans = 0
        for i, v in enumerate(ks):
            l = bisect_left(ks, v - k)
            r = bisect_right(ks, v + k) - 1
            s = vs[r] - (vs[l - 1] if l > 0 else 0)
            cur = vs[i] - (vs[i-1] if i > 0 else 0)
            ans = max(ans, cur + min(numOperations, s - cur))

            idx = bisect_left(ks, v - 2 * k)
            s = vs[i] - (vs[idx-1] if idx > 0 else 0)
            ans = max(ans, min(numOperations, s))
        return ans",1447700640
Sk Jishan,AlgoXJishan,212,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int ops) {
        vector<int> v(100001, 0);
        for(int i: nums) {
            v[i]++;
        }
        vector<int> pre(100001, 0);
        for(int i=1; i<=100000; i++) {
            pre[i] = pre[i-1] + v[i];
        }
        int ans=0;
        for(int i=1; i<=100000; i++){
            int l = i - k >=1 ? i -k : 1;
            int r = i +k <=100000 ? i +k : 100000;
            int rng = pre[r] - pre[l -1];
            int x = rng - v[i];
            ans = max(ans, v[i] + min(ops, x));
        }
        return ans;
    }
};",1447703088
Sk Jishan,AlgoXJishan,212,3626,cpp,"class Solution {
public:
bool help(int n , int t){
    int x = 1;
    while(n){
        x *= (n%10);
        n /= 10;
    }
    return x % t == 0;
}
    int smallestNumber(int n, int t) {
        for(int i = n ; i <= 100 ; i++){
            if(help(i,t)) return i;
        }
        return 0;
        
    }
};",1447656054
Sk Jishan,AlgoXJishan,212,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int ops) {
        int n = nums.size();
        map<int, int> mpp;
        int idx = 0;
        int curr = 0;
        int ans = 0;
        int cnt = 0;
        vector<pair<int, int>> v;
        for (int i : nums) {
            mpp[i]++;
            v.push_back({i - k, +1});
            v.push_back({i + k + 1, -1});
        }
        sort(v.begin(), v.end());
        set<int> st;
        for (auto it : v) st.insert(it.first);
        for (auto it : mpp) st.insert(it.first);
        for (int t : st) {
            while (idx < v.size() && v[idx].first <= t) {
                curr += v[idx].second;
                idx++;
            }
            cnt = mpp.count(t) ? mpp[t] : 0;
            int frq = cnt + min(ops, curr - cnt);
            ans = max(ans, frq);
        }

        return ans;
    }
};",1447718933
TJ Chiou,Chiouchiouok,213,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) 
    {
        int n = nums.size();

        sort(nums.begin(), nums.end());

        int ret = 0;

        unordered_map<int, int> count;

        for (int num : nums) {
            count[num]++;
        }
        
        for (int i = 0; i < n; i++) {
            int x = nums[i];
            int left = x - k;
            int right = x + k;
            auto l = lower_bound(nums.begin(), nums.end(), left);
            auto r = upper_bound(nums.begin(), nums.end(), right);
            r--;
            int overlap =  min(numOperations + count[x], (int)(r - l )+ 1);
            ret = max(ret , overlap);
        }

        for (int i = 0; i < n; i++) {
            int x = nums[i] + k;
            int left = x - k;
            int right = x + k;
            auto l = lower_bound(nums.begin(), nums.end(), left);
            auto r = upper_bound(nums.begin(), nums.end(), right);
            r--;
            int overlap =  min(numOperations + count[x], (int)(r - l )+ 1);
            ret = max(ret , overlap);
        }

        return ret;
    }
};



",1447711960
TJ Chiou,Chiouchiouok,213,3626,cpp,"class Solution {
    long long prod(int num)
    {
        string s = to_string(num);

        long long ret = 1;

        for (char c : s)
            {
                int d = c - '0';
                ret *= d;
            }
        return ret;
    }
public:
    int smallestNumber(int n, int t) {
        while (1)
            {
                long long p = prod(n);
                if (p % t == 0)
                {
                    return n;
                }
                n++;
            }
        return 10000;
    }
};",1447657833
TJ Chiou,Chiouchiouok,213,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {

        vector<long long> nums2;

        for (int num : nums) {
            nums2.push_back(num);
        }

        long long kl = k;
        
        int n = nums2.size();

        sort(nums2.begin(), nums2.end());

        int ret = 0;

        unordered_map<long long, int> count;

        for (long long num : nums2) {
            count[num]++;
        }
        
        for (int i = 0; i < n; i++) {
            long long x = nums2[i];
            long long left = x - k;
            long long right = x + k;
            auto l = lower_bound(nums2.begin(), nums2.end(), left);
            auto r = upper_bound(nums2.begin(), nums2.end(), right);
            r--;
            int overlap =  min(numOperations + count[x], (int)(r - l )+ 1);
            ret = max(ret , overlap);
        }

        for (int i = 0; i < n; i++) {
            long long  x = nums2[i] + k;
            long long left = x - k;
            long long  right = x + k;
            auto l = lower_bound(nums2.begin(), nums2.end(), left);
            auto r = upper_bound(nums2.begin(), nums2.end(), right);
            r--;
            int overlap =  min(numOperations + count[x], (int)(r - l )+ 1);
            ret = max(ret , overlap);
        }

        return ret;
    }
};",1447718979
Anshu Mishra,AKMi01,214,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        if(nums.size()==0) return 0;
        sort(nums.begin(), nums.end());
        map<int, int> mp;
        int sz = 0;
        for(int i=0; i<nums.size(); i++){
            mp[nums[i]]++;
            sz = max(sz, nums[i]);
        }
        int ans = 1;
        for(int i=0; i<=sz; i++){
            int x = lower_bound(nums.begin(), nums.end(), i-k) - nums.begin();
            int y = upper_bound(nums.begin(), nums.end(), i+k) - nums.begin();
            int z = y - x;
            int k = z - mp[i];
            if(k>numOperations){
                k = numOperations;
            }
            ans = max(ans, k+mp[i]);
        }
        return ans;
    }
};",1447690389
Anshu Mishra,AKMi01,214,3626,cpp,"class Solution {
public:
    int smallestNumber(int n, int t) {
        while(true){
            int x = n;
            int k = 1;
            while(x){
                k*=(x%10); x/=10;
            }
            if(k%t==0) return n;
            n++;
        }
        return -1;
    }
};",1447658174
Anshu Mishra,AKMi01,214,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        if(nums.size()==0) return 0;
        sort(nums.begin(), nums.end());
        map<int, int> mp;
        int sz = 0;
        for(int i=0; i<nums.size(); i++){
            mp[nums[i]]++;
            sz = max(sz, nums[i]);
        }
        int ans = 1;
        for(int i=0; i<nums.size(); i++){
            int x = lower_bound(nums.begin(), nums.end(), nums[i]-k) - nums.begin();
            int y = upper_bound(nums.begin(), nums.end(), nums[i]+k) - nums.begin();
            int z = y - x;
            int k = z - mp[nums[i]];
            if(k>numOperations){
                k = numOperations;
            }
            ans = max(ans, k+mp[nums[i]]);
        }

        for(int i=0; i<nums.size(); i++){
            int x = lower_bound(nums.begin(), nums.end(), nums[i]-2*k) - nums.begin();
            int y = i - x + 1;
            if(y>numOperations){
                y = numOperations;
            }
            ans = max(ans, y);
        }
        return ans;
    }
};",1447719012
Arpan Kumar,arpan030603,215,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        std::map<int, int> freq_map;  // Frequency of each original number
    std::vector<std::pair<int, int>> events;  // Events for interval starts and ends
    std::set<int> positions;  // All positions to process

    for (int num : nums) {
        freq_map[num]++;
        int start = num - k;
        int end = num + k + 1;  // +1 because end is exclusive
        events.emplace_back(start, 1);   // Interval starts
        events.emplace_back(end, -1);    // Interval ends
        positions.insert(start);
        positions.insert(end);
        positions.insert(num);
    }

    // Sort events based on position
    std::sort(events.begin(), events.end());

    // Map to hold cumulative events at each position
    std::map<int, int> cumulative_events;
    int current_coverage = 0;
    size_t event_index = 0;
    std::vector<int> positions_vec(positions.begin(), positions.end());
    std::sort(positions_vec.begin(), positions_vec.end());

    int max_freq = 0;

    for (int pos : positions_vec) {
        // Process all events at the current position
        while (event_index < events.size() && events[event_index].first <= pos) {
            current_coverage += events[event_index].second;
            event_index++;
        }

        int freq = freq_map[pos];  // Frequency of the original number at position pos
        int adjustments_needed = current_coverage - freq;

        if (adjustments_needed <= numOperations) {
            int total_freq = current_coverage;
            max_freq = std::max(max_freq, total_freq);
        } else {
            int total_freq = freq + numOperations;
            max_freq = std::max(max_freq, total_freq);
        }
    }

    return max_freq;
    }
};",1447716813
Arpan Kumar,arpan030603,215,3626,cpp,"class Solution {
public:
    int productnum(int num){
        int ans=1;
        while(num>0){
            ans*=num%10;
            num/=10;
        }
        return ans;
    }
    int smallestNumber(int n, int t) {
        int prod=1;
        for(int i=n;i<111;i++){
            int num=productnum(i);
            if(num%t==0) return i;
        }
        return -1;
    }
};",1447677950
Arpan Kumar,arpan030603,215,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        std::map<int, int> freq_map;  // Frequency of each original number
    std::vector<std::pair<int, int>> events;  // Events for interval starts and ends
    std::set<int> positions;  // All positions to process

    for (int num : nums) {
        freq_map[num]++;
        int start = num - k;
        int end = num + k + 1;  // +1 because end is exclusive
        events.emplace_back(start, 1);   // Interval starts
        events.emplace_back(end, -1);    // Interval ends
        positions.insert(start);
        positions.insert(end);
        positions.insert(num);
    }

    // Sort events based on position
    std::sort(events.begin(), events.end());

    // Map to hold cumulative events at each position
    std::map<int, int> cumulative_events;
    int current_coverage = 0;
    size_t event_index = 0;
    std::vector<int> positions_vec(positions.begin(), positions.end());
    std::sort(positions_vec.begin(), positions_vec.end());

    int max_freq = 0;

    for (int pos : positions_vec) {
        // Process all events at the current position
        while (event_index < events.size() && events[event_index].first <= pos) {
            current_coverage += events[event_index].second;
            event_index++;
        }

        int freq = freq_map[pos];  // Frequency of the original number at position pos
        int adjustments_needed = current_coverage - freq;

        if (adjustments_needed <= numOperations) {
            int total_freq = current_coverage;
            max_freq = std::max(max_freq, total_freq);
        } else {
            int total_freq = freq + numOperations;
            max_freq = std::max(max_freq, total_freq);
        }
    }

    return max_freq;
    }
};",1447719026
jainil_4801,jainil_4801,217,3622,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:

        max_element = max(nums)
        prefix_arr = [0 for _ in range(max_element + k + 2)]
        visited = [0 for _ in range(max_element + k + 2)]
        N = len(nums)
        
        for i in range(N):
            visited[nums[i]] += 1
            if nums[i] - k >= 0:
                prefix_arr[nums[i] - k] += 1
            else:
                prefix_arr[0] += 1
            prefix_arr[nums[i] + k + 1] -= 1

        max_frequency = 1

        cur_sum = 0
        for i in range(len(prefix_arr)):
            cur_sum += prefix_arr[i]

            possible_val = min(numOperations + visited[i], cur_sum)
            # print(i, prefix_arr[i], cur_sum, possible_val)
            
            if possible_val > max_frequency:
                max_frequency = possible_val

        return max_frequency
        ",1447698632
jainil_4801,jainil_4801,217,3626,python3,"class Solution:
    def smallestNumber(self, n: int, t: int) -> int:
        cur = n
        while True:
            s = str(cur)
            ans = 1
            for i in s:
                ans *= int(i)
            if ans % t == 0:
                return cur
            cur += 1",1447663067
jainil_4801,jainil_4801,217,3640,python3,"from collections import defaultdict

class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        prefix_arr = defaultdict(int)
        visited = defaultdict(int)
        N = len(nums)
        
        for i in range(N):
            visited[nums[i]] += 1
            prefix_arr[max(nums[i] - k, 0)] += 1
            prefix_arr[nums[i]] += 0
            prefix_arr[nums[i] + k + 1] -= 1

        max_frequency = 1

        cur_sum = 0

        for k in sorted(prefix_arr.keys()):
            v = prefix_arr[k]
            cur_sum += v

            possible_val = min(numOperations + visited[k], cur_sum)
            
            if possible_val > max_frequency:
                max_frequency = possible_val

        return max_frequency
        ",1447719194
huzy,user2349xl,218,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        
        unordered_map<int, int> line;
        unordered_map<int, int> cnt;
        int mx = *max_element(nums.begin(), nums.end());
        int mn = *min_element(nums.begin(), nums.end());
        
        for (auto x : nums) {
            line[x - k] += 1;
            line[x + k+ 1] -= 1;
            cnt[x] += 1;
        }
        
        int ans = 1;
        int curr = 0;
        
        for (int i = mn-k; i <= mx+k; i++) {
            curr += line[i];
            
            // cout << i << "" "" << curr << "" "" << op << endl;
            
            ans = max(ans, min(numOperations + cnt[i], curr));
        }
        
        return ans;
    }
};",1447697274
huzy,user2349xl,218,3626,cpp,"class Solution {
public:
    int smallestNumber(int n, int t) {
        
        for (int x = n; x <= INT_MAX; x++) {
            string y = to_string(x);
            int m = 1;
            for (auto c : y) {
                m *= c - '0';
                if ((m % t) == 0) {
                    return x;
                }
            }
        }
        
        return -1;
    }
};",1447659903
huzy,user2349xl,218,3640,cpp,"class Solution {
public:
    typedef long long ll;
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        
        map<ll, int> line;
        map<ll, int> cnt;
        
        for (auto x : nums) {
            line[(ll)x - k] += 1;
            line[(ll)x + k+ 1] -= 1;
            line[x] += 0; 
            cnt[x] += 1;
        }
        
        int ans = 1;
        int curr = 0;
        
        for (auto [k,v] : line) {
            curr += v;
            ans = max(ans, min(numOperations + cnt[k], curr));
        }
        
        return ans;
    }
};",1447711233
Vladislav,nvladgw,219,3622,kotlin,"class Solution {
    fun maxFrequency(nums: IntArray, k: Int, numOperations: Int): Int {
    nums.sort()
    var res = 1
    var min = 0
    var max = 0
    var equals = 1
    for (i in 0 until nums.size) {
        if (i == 0 || nums[i] != nums[i-1]) {
            var index = i + 1
            while (index < nums.size && nums[index] == nums[i]) index++
            equals = index - i
        }
        while (nums[i] - nums[min] > k) min++
        while (max < nums.size - 1 && nums[max+1] - nums[i] <= k) max++
        val distinct = max + 1 - min - equals
        res = Math.max(res, equals + Math.min(distinct, numOperations))
    }
    if (res >= numOperations) return res

    max = 0
    for (i in 0 until nums.size) {
        while (max < nums.size - 1 && nums[max+1] - nums[i] <= 2 * k) max++
       res = Math.max(res, Math.min(max - i + 1, numOperations))
    }

    return res
}

}",1447710841
Vladislav,nvladgw,219,3626,kotlin,"class Solution {
    fun smallestNumber(n: Int, t: Int): Int {
    var x = n
    while (digiProd(x) % t != 0){
        x++
    }
    return x
}

fun digiProd(n: Int): Int {
    var res = 1
    var x = n
    while (x >= 1) {
        res *= x % 10
        x /= 10
    }
    return res
}
}",1447655678
Vladislav,nvladgw,219,3640,kotlin,"class Solution {
    fun maxFrequency(nums: IntArray, k: Int, numOperations: Int): Int {
    nums.sort()
    var res = 1
    var min = 0
    var max = 0
    var equals = 1
    for (i in 0 until nums.size) {
        if (i == 0 || nums[i] != nums[i-1]) {
            var index = i + 1
            while (index < nums.size && nums[index] == nums[i]) index++
            equals = index - i
        }
        while (nums[i] - nums[min] > k) min++
        while (max < nums.size - 1 && nums[max+1] - nums[i] <= k) max++
        val distinct = max + 1 - min - equals
        res = Math.max(res, equals + Math.min(distinct, numOperations))
    }
    if (res >= numOperations) return res

    max = 0
    for (i in 0 until nums.size) {
        while (max < nums.size - 1 && nums[max+1] - nums[i] <= 2 * k) max++
        res = Math.max(res, Math.min(max - i + 1, numOperations))
    }

    return res
}
}",1447711557
Ankitkmm,Allucard69,220,3622,cpp,"class Solution {
public:
    typedef long long ll;
    int maxFrequency(vector<int>& nums, int k, int x) {
        int n = nums.size();
        map<ll, int> freq;
        vector<pair<ll, int>> f;
        set<ll> points;
        for (int num : nums) {
            freq[num]++;
            f.push_back({(ll)num - k, +1});
            f.push_back({(ll)num + k + 1, -1});
            points.insert(num);
        }
        for (auto& e : f) {
            points.insert(e.first);
        }
        vector<ll> t(points.begin(), points.end());
        sort(f.begin(), f.end());
        int idx = 0, m = f.size();
        ll c = 0, ans = 0;
        unordered_set<ll> nums_set(nums.begin(), nums.end());
        for (ll t : t) {
            while (idx < m && f[idx].first <= t) {
                c += f[idx].second;
                idx++;
            }
            int freq_t = freq.count(t) ? freq[t] : 0;
            ll a = freq_t + min((ll)x, c - freq_t);
            ans = max(ans, a);
        }
        return (int)ans;
    }
};
",1447720016
Ankitkmm,Allucard69,220,3626,cpp,"class Solution {
public:
    
    int prod(int i) {
        int ans = 1;
        while (i > 0) {
            int digit = i % 10;
            ans *= digit;
            i /= 10;
        }
        return ans;
    }
    
    int smallestNumber(int n, int t) {
        for (int i = n; i <= n * t; ++i) {
            int x = prod(i);
            if (x % t == 0) return i;
        }
        return -1;
    }
};
",1447663078
Ankitkmm,Allucard69,220,3640,cpp,"class Solution {
public:
    typedef long long ll;
    int maxFrequency(vector<int>& nums, int k, int x) {
        int n = nums.size();
        map<ll, int> freq;
        vector<pair<ll, int>> f;
        set<ll> points;
        for (int num : nums) {
            freq[num]++;
            f.push_back({(ll)num - k, +1});
            f.push_back({(ll)num + k + 1, -1});
            points.insert(num);
        }
        for (auto& e : f) {
            points.insert(e.first);
        }
        vector<ll> t(points.begin(), points.end());
        sort(f.begin(), f.end());
        int idx = 0, m = f.size();
        ll c = 0, ans = 0;
        unordered_set<ll> nums_set(nums.begin(), nums.end());
        for (ll t : t) {
            while (idx < m && f[idx].first <= t) {
                c += f[idx].second;
                idx++;
            }
            int freq_t = freq.count(t) ? freq[t] : 0;
            ll a = freq_t + min((ll)x, c - freq_t);
            ans = max(ans, a);
        }
        return (int)ans;
    }
};
",1447719635
kasi nathan,kasinathansj,222,3622,java,"class Solution {
    public int maxFrequency(int[] nums, int k, int numOperations) {
        Arrays.sort(nums);
        HashMap<Integer,Integer> hm = new HashMap<>();
        TreeMap<Integer,Integer> tm = new TreeMap<>();
        for(int i = 0 ; i < nums.length ; i++){
            tm.put(nums[i],i+1);
            hm.merge(nums[i],1,Integer::sum);
        }
        int ans = 0;
        int first = tm.firstKey();
        int last = tm.lastKey();
        for(int key = first ; key <= last ; key++){
            int fr = key-k;
            int to = key+k;
            Integer top = tm.floorKey(to);
            Integer bot = tm.floorKey(fr-1);
            int tot = 0;
            if(top==null)continue;
            if(bot==null){
                tot = tm.get(top) - hm.getOrDefault(key,0);
            }else{
                tot = tm.get(top) - tm.get(bot) - hm.getOrDefault(key,0);
            }
            int anss = Math.min(numOperations , tot);
            ans = Math.max(ans , anss + hm.getOrDefault(key,0));
        }
        return ans;
    }
}",1447698019
kasi nathan,kasinathansj,222,3626,java,"class Solution {
    public int smallestNumber(int n, int t) {
        while(true){
            int p = 1;
            int nn = n;
            while(nn>0){
                p *= nn%10;
                nn /= 10;
            }
            if(p%t==0)return n;
            n++;
        }
    }
}",1447656927
kasi nathan,kasinathansj,222,3640,java,"class Solution {
    public int maxFrequency(int[] nums, int k, int numOperations) {
        Arrays.sort(nums);
        HashMap<Integer,Integer> hm = new HashMap<>();
        TreeMap<Integer,Integer> tm = new TreeMap<>();
        for(int i = 0 ; i < nums.length ; i++){
            tm.put(nums[i],i+1);
            hm.merge(nums[i],1,Integer::sum);
        }
        int ans = 0;
        int first = tm.firstKey();
        int last = tm.lastKey();
        for(int key : hm.keySet()){
            int fr = key-k;
            int to = key+k;
            Integer top = tm.floorKey(to);
            Integer bot = tm.floorKey(fr-1);
            int tot = 0;
            if(top==null)continue;
            if(bot==null){
                tot = tm.get(top) - hm.getOrDefault(key,0);
            }else{
                tot = tm.get(top) - tm.get(bot) - hm.getOrDefault(key,0);
            }
            int anss = Math.min(numOperations , tot);
            ans = Math.max(ans , anss + hm.getOrDefault(key,0));
        }
        int sp = 0;
        int ep = 0;
        while(ep<nums.length){
            int fr = nums[ep]-k-k;
            while(nums[sp]<fr)sp++;
            int tot = ep-sp+1;
            ans = Math.max(ans , Math.min(tot,numOperations));
            ep++;
        }
        return ans;
    }
}",1447711787
Lambert,Lambert360,224,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& n, int k, int ops) {
        auto getFreq = [&]() {
            map<int, int> f;
            for (int x : n) f[x]++;
            return f;
        };

        auto getEvents = [&]() {
            vector<pair<int, int>> e;
            for (int x : n) {
                e.push_back({x - k, +1});
                e.push_back({x + k + 1, -1});
            }
            sort(e.begin(), e.end());
            return e;
        };

        auto collectPoints = [&](const map<int, int>& f, const vector<pair<int, int>>& e) {
            set<int> p;
            for (const auto& x : f) p.insert(x.first);
            for (const auto& x : e) p.insert(x.first);
            return p;
        };

        auto getMaxFreq = [&](const map<int, int>& f, const vector<pair<int, int>>& e, const set<int>& p) {
            int idx = 0, co = 0, mf = 0;
            for (int t : p) {
                while (idx < e.size() && e[idx].first <= t) co += e[idx++].second;
                int ac = f.count(t) ? f.at(t) : 0;
                int pf = ac + min(ops, co - ac);
                mf = max(mf, pf);
            }
            return mf;
        };

        auto f = getFreq();
        auto e = getEvents();
        auto p = collectPoints(f, e);
        return getMaxFreq(f, e, p);
    }
};
",1447711167
Lambert,Lambert360,224,3626,cpp,"class Solution {
public:
    int getDigitProduct(int num) {
        if (num == 0) return 0;
        
        int product = 1;
        while (num > 0) {
            product *= (num % 10);
            num /= 10;
        }
        return product;
    }
    
    int smallestNumber(int n, int t) {
        int current = n;
        
        while (true) {
            int product = getDigitProduct(current);
            if (product % t == 0) {
                return current;
            }
            current++;
        }
        
        return n;
    }
};",1447653445
Lambert,Lambert360,224,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& n, int k, int ops) {
        auto getFreq = [&]() {
            map<int, int> f;
            for (int x : n) f[x]++;
            return f;
        };

        auto getEvents = [&]() {
            vector<pair<int, int>> e;
            for (int x : n) {
                e.push_back({x - k, +1});
                e.push_back({x + k + 1, -1});
            }
            sort(e.begin(), e.end());
            return e;
        };

        auto collectPoints = [&](const map<int, int>& f, const vector<pair<int, int>>& e) {
            set<int> p;
            for (const auto& x : f) p.insert(x.first);
            for (const auto& x : e) p.insert(x.first);
            return p;
        };

        auto getMaxFreq = [&](const map<int, int>& f, const vector<pair<int, int>>& e, const set<int>& p) {
            int idx = 0, co = 0, mf = 0;
            for (int t : p) {
                while (idx < e.size() && e[idx].first <= t) co += e[idx++].second;
                int ac = f.count(t) ? f.at(t) : 0;
                int pf = ac + min(ops, co - ac);
                mf = max(mf, pf);
            }
            return mf;
        };

        auto f = getFreq();
        auto e = getEvents();
        auto p = collectPoints(f, e);
        return getMaxFreq(f, e, p);
    }
};",1447711889
Vivek Rajpurohit,vivk_razz,225,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& v, int k, int q) {
        sort(v.begin(),v.end());
        int n = v.size();
        int mx=0,t;
        unordered_map<int,int> mp;
        for(int &i: v)mp[i]++;
        for(auto x: mp){
            auto i = lower_bound(v.begin(),v.end(),x.first - k);
            auto j = upper_bound(v.begin(),v.end(),x.first + k);
            int y = j-i;
            t = y - x.second;
            if(t > q)t = q+x.second;
            else t = y;
            mx = max(t,mx);

            i = lower_bound(v.begin(),v.end(),x.first);
            j = upper_bound(v.begin(),v.end(),x.first + 2*k);
            y = j-i;
            if(y > q)y=q;
            mx = max(mx,y);
        }
        return mx;
    }
};",1447715282
Vivek Rajpurohit,vivk_razz,225,3626,cpp,"class Solution {
public:
    int smallestNumber(int n, int t) {
        while(1){
            int x = n,y=1;
            while(x){
                y *= (x%10);
                x/=10;
            }
            if(y%t == 0)return n;
            n++;
        }
        return n;
    }
};",1447657036
Vivek Rajpurohit,vivk_razz,225,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& arr, int k, int q) {
        vector<long long> v;
        for(int &i: arr)v.push_back(i);
        sort(v.begin(),v.end());
        int n = v.size();
        int mx=0, t;
        unordered_map<long long,int> mp;
        for(auto &i: v)mp[i]++;
        for(auto x: mp){
            auto i = lower_bound(v.begin(),v.end(),x.first - k);
            auto j = upper_bound(v.begin(),v.end(),x.first + k);
            int y = j-i;
            t = y - x.second;
            if(t > q)t = q+x.second;
            else t = y;
            mx = max(t,mx);

            i = lower_bound(v.begin(),v.end(),x.first);
            j = upper_bound(v.begin(),v.end(),x.first + 2*k);
            y = j-i;
            if(y > q)y=q;
            mx = max(mx,y);
        }
        return mx;
    }
};",1447720544
Adesh Attavar,ade5h,226,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        map<int, int> line;
        for(int num: nums) {
            line[num-k]++;
            line[num+k+1]--;
        }

        unordered_map<int, int> numsCount;
        for(int num: nums) {
            numsCount[num]++;
            line[num] += 0;
        }

        int count = 0;
        int ans = 0;
        for(auto& p: line) {
            count += p.second;

            int curAns = 0;
            int extraOverlaps = count;
            
            if(numsCount.count(p.first)) {
                curAns = numsCount[p.first];
                extraOverlaps -= numsCount[p.first];
            }

            curAns += min(extraOverlaps, numOperations);

            ans = max(ans, curAns);
        }

        return ans;
    }
};",1447729171
Adesh Attavar,ade5h,226,3626,cpp,"class Solution {
    int productOfDigits(int n) {
        int ans = 1;
        while(n) {
            ans *= n%10;
            n /= 10;
        }

        return ans;
    }
public:
    int smallestNumber(int n, int t) {
        int num = n;
        while(productOfDigits(num) % t != 0) {
            num++;
        }

        return num;
    }
};",1447667087
Adesh Attavar,ade5h,226,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        map<int, int> line;
        for(int num: nums) {
            line[num-k]++;
            line[num+k+1]--;
        }

        unordered_map<int, int> numsCount;
        for(int num: nums) {
            numsCount[num]++;
            line[num] += 0;
        }

        int count = 0;
        int ans = 0;
        for(auto& p: line) {
            count += p.second;

            int curAns = 0;
            int extraOverlaps = count;
            
            if(numsCount.count(p.first)) {
                curAns = numsCount[p.first];
                extraOverlaps -= numsCount[p.first];
            }

            curAns += min(extraOverlaps, numOperations);

            ans = max(ans, curAns);
        }

        return ans;
    }
};",1447728557
nimish7866,nimish7866,227,3622,cpp,"typedef pair<int, int> pii;
typedef vector<int> vi;
typedef vector<pii> vpii;
typedef map<int, int> mi;

class Solution {
public:
    int maxFrequency(vi& nums, int k, int ops) {
        mi frq = calcFrq(nums);
        vpii ev = makeEv(nums, k);
        set<int> pts = getPts(ev, frq);
        return getMaxFrq(ev, frq, pts, ops);
    }

private:
    mi calcFrq(const vi& nums) {
        mi frq;
        for (int n : nums) {
            frq[n]++;
        }
        return frq;
    }

    vpii makeEv(const vi& nums, int k) {
        vpii ev;
        for (int n : nums) {
            ev.push_back({n - k, 1});
            ev.push_back({n + k + 1, -1});
        }
        return ev;
    }

    set<int> getPts(const vpii& ev, const mi& frq) {
        set<int> pts;
        for (const auto& e : ev) {
            pts.insert(e.first);
        }
        for (const auto& f : frq) {
            pts.insert(f.first);
        }
        return pts;
    }

    int getMaxFrq(const vpii& ev, const mi& frq, const set<int>& pts, int ops) {
        vpii sv = ev;
        sort(sv.begin(), sv.end());

        int i = 0, mxFrq = 0, ol = 0;

        for (int p : pts) {
            while (i < sv.size() && sv[i].first <= p) {
                ol += sv[i].second;
                i++;
            }

            int cnt = frq.count(p) ? frq.at(p) : 0;
            int posFrq = cnt + min(ops, ol - cnt);
            mxFrq = max(mxFrq, posFrq);
        }

        return mxFrq;
    }
};",1447712405
nimish7866,nimish7866,227,3626,cpp,"class Solution {
public:
    int smallestNumber(int n, int t) {
        while (true) {
            int product = 1;
            int temp = n;

            while (temp > 0) {
                int digit = temp % 10;
                if (digit == 0) {
                    product = 0;
                    break;
                }
                product *= digit;
                temp /= 10;
            }
            if (product % t == 0) {
                return n;
            }
            n++;
        }
    }
};",1447652638
nimish7866,nimish7866,227,3640,cpp,"typedef pair<int, int> pii;
typedef vector<int> vi;
typedef vector<pii> vpii;
typedef map<int, int> mi;

class Solution {
public:
    int maxFrequency(vi& nums, int k, int ops) {
        mi frq = calcFrq(nums);
        vpii ev = makeEv(nums, k);
        set<int> pts = getPts(ev, frq);
        return getMaxFrq(ev, frq, pts, ops);
    }

private:
    mi calcFrq(const vi& nums) {
        mi frq;
        for (int n : nums) {
            frq[n]++;
        }
        return frq;
    }

    vpii makeEv(const vi& nums, int k) {
        vpii ev;
        for (int n : nums) {
            ev.push_back({n - k, 1});
            ev.push_back({n + k + 1, -1});
        }
        return ev;
    }

    set<int> getPts(const vpii& ev, const mi& frq) {
        set<int> pts;
        for (const auto& e : ev) {
            pts.insert(e.first);
        }
        for (const auto& f : frq) {
            pts.insert(f.first);
        }
        return pts;
    }

    int getMaxFrq(const vpii& ev, const mi& frq, const set<int>& pts, int ops) {
        vpii sv = ev;
        sort(sv.begin(), sv.end());

        int i = 0, mxFrq = 0, ol = 0;

        for (int p : pts) {
            while (i < sv.size() && sv[i].first <= p) {
                ol += sv[i].second;
                i++;
            }

            int cnt = frq.count(p) ? frq.at(p) : 0;
            int posFrq = cnt + min(ops, ol - cnt);
            mxFrq = max(mxFrq, posFrq);
        }

        return mxFrq;
    }
};",1447711349
hrithik_2468,hrithik_2468,228,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        map<int,pair<int,int>> mp;
        for(int i=0;i<nums.size();i++){
            mp[nums[i]-k].first++;
            mp[nums[i]+k+1].first--;
            mp[nums[i]-k].second++;
            mp[nums[i]].second--;
            mp[nums[i]+1].second++;
            mp[nums[i]+k+1].second--;
        }
        int cr=0,pts=0,ans=0;
        for(auto it:mp){
            cr+=it.second.first;
            pts+=it.second.second;
            ans=max(ans,cr-(max(0,pts-numOperations)));
        }
        return ans;
    }
};",1447727446
hrithik_2468,hrithik_2468,228,3626,cpp,"class Solution {
public:
    int pr(int cr){
        int ans=1;
        //cout<<cr<<"" "";
        while(cr>0){
            ans*=(cr%10);
            cr/=10;
        }
        //cout<<ans<<endl;
        return ans;
    }
    int smallestNumber(int n, int t) {
        int cr=n;
        //cout<<6%3<<endl;
        while((pr(cr)%t)!=0){
            //cout<<pr(cr)<<"" ""<<cr<<"" ""<<t<<"" ""<<(pr(cr)%t)<<endl;
            cr++;
        }
        return cr;
    }
};",1447670814
hrithik_2468,hrithik_2468,228,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        map<int,pair<int,int>> mp;
        for(int i=0;i<nums.size();i++){
            mp[nums[i]-k].first++;
            mp[nums[i]+k+1].first--;
            mp[nums[i]-k].second++;
            mp[nums[i]].second--;
            mp[nums[i]+1].second++;
            mp[nums[i]+k+1].second--;
        }
        int cr=0,pts=0,ans=0;
        for(auto it:mp){
            cr+=it.second.first;
            pts+=it.second.second;
            ans=max(ans,cr-(max(0,pts-numOperations)));
        }
        return ans;
    }
};",1447729496
wuaws,wuaws,229,3622,cpp,"// #pragma GCC optimize(""O3"")
// #include <atcoder/all>
#include <bits/stdc++.h>
using namespace std;
#define FOR(i, a, b) for(int i = a; i < b; i ++)
#define FORS(i, a, b, c) for(int i = a; i < b; i += c)
#define FORN(i, a, b) for(int i = a; i <= b; i ++)
#define FORD(i, a, b) for(int i = a-1; i >= b; i --)
#define FORE(i, b) for(auto &i:b)
#define REP(i, b) FOR(i, 0, b)
#define REPN(i, b) FORN(i, 0, b)
#define SQ(i) (i*i)
#define ALL(a) a.begin(), a.end()
#define ALLA(a,n) a, a+n
#define SORT(a) sort(ALL(a))
#define SORTA(a, n) sort(ALLA(a, n))
#define REV(a) reverse(ALL(a))
#define REVA(a, n) reverse(ALLA(a, n))
#define MIN(v) (*min_element((v).begin(), (v).end()))
#define MAX(v) (*max_element((v).begin(), (v).end()))
#define IN(a, b) (a.find(b) != a.end())
#define BACK(a) a.back(); a.RB()
#define QBACK(a) a.top(); a.pop()
#define PRINT(a) FORE(i, a) cout << i << "" ""; cout << endle 
#define MY_PI     3.14159265358979323846
#define MY_E      2.7182818284590452354
#define INF     (INT_MAX / 2)
#define LINF    (LLONG_MAX / 2)
#define RFOR(i, a, b) for(int i = (b) - 1; i >= (a); --i)
#define RREP(i, n) RFOR(i, 0, n)
#define EACH(e, v) for(auto &e : v)
#define ITR(it, v) for(auto it = (v).begin(); it != (v).end(); ++it)
#define RITR(it, v) for(auto it = (v).rbegin(); it != (v).rend(); ++it)
#define CASE break; case
#define DEFAULT break; default
#define RALL(v) (v).rbegin(), (v).rend()
#define SZ(v) int((v).size())
#define EXIST(s, e) ((s).find(e) != (s).end())
#define RSORT(v) sort((v).rbegin(), (v).rend())
#define SUM(v, type) accumulate((v).begin(), (v).end(), (type) 0)
#define ARGMIN(v) (min_element((v).begin(), (v).end()) - (v).begin())
#define ARGMAX(v) (max_element((v).begin(), (v).end()) - (v).begin())
#define REVERSE(v) reverse((v).begin(), (v).end())
#define ARANGE(v) iota((v).begin(), (v).end(), 0)
#define COUNT(v, e) count((v).begin(), (v).end(), e)
#define ROTATE_L(v) rotate((v).begin(), (v).begin()+1, (v).end())
#define ROTATE_R(v) rotate((v).rbegin(), (v).rbegin()+1, (v).rend())
#define FILTER(src, tgt, func) copy_if(begin(src), end(src), back_inserter(tgt), func)
#define CTOI(c) (c - '0')
#define HEADSTR(str, n) str.substr(0, (n))
#define TAILSTR(str, n) str.substr((str).length() - (n))
#define CONTAINS(str, c) ((str).find(c) != string::npos)
#define INSPOS(v, a) (lower_bound((v).begin(), (v).end(), a) - (v).begin())
// デバッグ用
#define dump(x)  cerr << #x << "" = "" << (x) << endl;
#define debug(x) cerr << #x << "" = "" << (x) << "" (L"" << __LINE__ << "")"" << "" "" << __FILE__ << endl;

#define PB  push_back
#define RB  pop_back
#define RF  pop_front
#define INS insert
#define F   first
#define S   second
#define UM  unordered_map
#define US  unordered_set
#define PQ  priority_queue
#define IO ios_base::sync_with_stdio(false); cin.tie(NULL)

typedef long long ll;
typedef unsigned long long ull;

template<class T> vector<size_t> argsort(const vector<T> &vec, bool asc=true){
    vector<size_t> index(vec.size()); iota(index.begin(), index.end(), 0);
    sort(index.begin(), index.end(), [&vec, &asc](size_t i, size_t j){return asc ? (vec[i] < vec[j]):(vec[i] > vec[j]);});
    return index;
}

// 表示系
template<class T1, class T2> ostream& operator<<(ostream& os, const pair<T1, T2>& p) {
    os << ""("" << p.first << "", "" << p.second << "")"";
    return os;
}
template<class... T> ostream& operator<<(ostream& os, const tuple<T...>& t) {
    os << ""(""; apply([&os](auto&&... args) {((os << args << "", ""), ...);}, t);
    os << "")""; return os;
}
template<class T, size_t N> ostream& operator<<(ostream& os, const array<T, N>& ary) {
    os << ""[ ""; for ( const T& item : ary ) os << item << "", "";
    os << ""]""; return os;
}
template<class T> ostream& operator<<(ostream& os, const vector<T>& vec) {
    os << ""[ ""; for ( const T& item : vec ) os << item << "", "";
    os << ""]""; return os;
}
template<class T> ostream& operator<<(ostream& os, const set<T>& s) {
    os << ""{ ""; for ( const T& item : s ) os << item << "", "";
    os << ""}""; return os;
}
template<class T> ostream& operator<<(ostream& os, const multiset<T>& s) {
    os << ""{ ""; for ( const T& item : s ) os << item << "", "";
    os << ""}""; return os;
}
template<class T1, class T2> ostream& operator<<(ostream& os, const map<T1, T2>& m) {
    os << ""{ ""; for ( const auto &[key, value] : m ) os << key << "":""<< value << "", "";
    os << ""}""; return os;
}
template <class Head> void OUT(Head&& head) {cout << head << endl;}
template <class Head, class... Tail> void OUT(Head&& head, Tail&&... tail) {cout << head << "" "";OUT(forward<Tail>(tail)...);}
// 入力系
template<class T1, class T2> istream& operator>>(istream& is, pair<T1, T2>& p) {
    is >> p.first >> p.second;
    return is;
}
template<class... T> istream& operator>>(istream& is, tuple<T...>& t) {
    apply([&is](auto&&... args) {((is >> args), ...);}, t);
    return is;
}
template<class T, size_t N> istream& operator>>(istream& is, array<T, N>& ary) {
    for ( T& item : ary ) is >> item;
    return is;
}
template<class T> istream& operator>>(istream& is, vector<T>& vec) {
    for ( T& item : vec ) is >> item;
    return is;
}
// 集合演算
template<class T> set<T> operator&(const set<T>& a, const set<T>& b) {// 共通集合
    set<T> ans; set_intersection(a.begin(), a.end(), b.begin(), b.end(), inserter(ans, ans.end()));
    return ans;
}
template<class T> set<T> operator|(const set<T>& a, const set<T>& b) {// 和集合
    set<T> ans; set_union(a.begin(), a.end(), b.begin(), b.end(), inserter(ans, ans.end()));
    return ans;
}
template<class T> set<T> operator-(const set<T>& a, const set<T>& b) {// 差集合
    set<T> ans; set_difference(a.begin(), a.end(), b.begin(), b.end(), inserter(ans, ans.end()));
    return ans;
}

typedef vector<int> vi;
typedef vector<double> vd;
typedef vector<string> vs;
typedef vector<ll> vll;
typedef pair<int,int> pi;
typedef pair<double,double> pd;
typedef pair<ll,ll> pll;
typedef queue<int> qi;
typedef queue<double> qd;
typedef queue<ll> qll;
typedef US<int> si;
typedef US<double> sd;
typedef US<ll> sll;
typedef vector<vi> mi;
typedef vector<vd> md;
typedef vector<vll> mll;
typedef vector<pi> vpi;
typedef vector<pd> vpd;
typedef vector<pll> vpll;
using MII = map<int,int>; using MLL = map<ll,ll>;
using SI = set<int>; using SL = set<ll>;
using MSI = multiset<int>; using MSL = multiset<ll>;
template<class T> using MAXPQ = priority_queue<T>;
template<class T> using MINPQ = priority_queue< T, vector<T>, greater<T> >;
// int -> str: to_string(i)
// str -> int: stoi(s)
// vec -> set: set<int> s(ALL(v));
// 1が立っている数: __builtin_popcount(i), __builtin_popcountll(i)
// 上位ビットの連続した0の数: __builtin_clz(i), __builtin_clzll(i) // i=0未定義
// 下位ビットの連続した0の数: __builtin_ctz(i), __builtin_ctzll(i) // i=0未定義

istringstream debug_iss(R""(
デバッグ時はここに入力を貼り付けて下記マクロのコメントアウトを外す
)"");
// #define cin debug_iss

class Solution{
public:
    int maxFrequency(vi& a,int k,int ops){
        const int ofs=100000,mx_sft=300000;
        vi freq(mx_sft+1,0),diff(mx_sft+1,0);
        
        FORE(n,a){
            int sft=n+ofs;
            freq[sft]++;
            int l=max(n-k+ofs,0),r=min(n+k+ofs,mx_sft);
            diff[l]++;
            if(r+1<=mx_sft)diff[r+1]--;
        }
        
        int res=0;
        ll sum=0;
        FOR(i,0,mx_sft+1){
            sum+=diff[i];
            int cnt=freq[i];
            ll mod=max(0LL,sum-cnt);
            res=max(res,(int)(cnt+min((ll)ops,mod)));
        }
        
        return res;
    }
};",1447709904
wuaws,wuaws,229,3626,cpp,"// #pragma GCC optimize(""O3"")
// #include <atcoder/all>
#include <bits/stdc++.h>
using namespace std;
#define FOR(i, a, b) for(int i = a; i < b; i ++)
#define FORS(i, a, b, c) for(int i = a; i < b; i += c)
#define FORN(i, a, b) for(int i = a; i <= b; i ++)
#define FORD(i, a, b) for(int i = a-1; i >= b; i --)
#define FORE(i, b) for(auto &i:b)
#define REP(i, b) FOR(i, 0, b)
#define REPN(i, b) FORN(i, 0, b)
#define SQ(i) (i*i)
#define ALL(a) a.begin(), a.end()
#define ALLA(a,n) a, a+n
#define SORT(a) sort(ALL(a))
#define SORTA(a, n) sort(ALLA(a, n))
#define REV(a) reverse(ALL(a))
#define REVA(a, n) reverse(ALLA(a, n))
#define MIN(v) (*min_element((v).begin(), (v).end()))
#define MAX(v) (*max_element((v).begin(), (v).end()))
#define IN(a, b) (a.find(b) != a.end())
#define BACK(a) a.back(); a.RB()
#define QBACK(a) a.top(); a.pop()
#define PRINT(a) FORE(i, a) cout << i << "" ""; cout << endle 
#define MY_PI     3.14159265358979323846
#define MY_E      2.7182818284590452354
#define INF     (INT_MAX / 2)
#define LINF    (LLONG_MAX / 2)
#define RFOR(i, a, b) for(int i = (b) - 1; i >= (a); --i)
#define RREP(i, n) RFOR(i, 0, n)
#define EACH(e, v) for(auto &e : v)
#define ITR(it, v) for(auto it = (v).begin(); it != (v).end(); ++it)
#define RITR(it, v) for(auto it = (v).rbegin(); it != (v).rend(); ++it)
#define CASE break; case
#define DEFAULT break; default
#define RALL(v) (v).rbegin(), (v).rend()
#define SZ(v) int((v).size())
#define EXIST(s, e) ((s).find(e) != (s).end())
#define RSORT(v) sort((v).rbegin(), (v).rend())
#define SUM(v, type) accumulate((v).begin(), (v).end(), (type) 0)
#define ARGMIN(v) (min_element((v).begin(), (v).end()) - (v).begin())
#define ARGMAX(v) (max_element((v).begin(), (v).end()) - (v).begin())
#define REVERSE(v) reverse((v).begin(), (v).end())
#define ARANGE(v) iota((v).begin(), (v).end(), 0)
#define COUNT(v, e) count((v).begin(), (v).end(), e)
#define ROTATE_L(v) rotate((v).begin(), (v).begin()+1, (v).end())
#define ROTATE_R(v) rotate((v).rbegin(), (v).rbegin()+1, (v).rend())
#define FILTER(src, tgt, func) copy_if(begin(src), end(src), back_inserter(tgt), func)
#define CTOI(c) (c - '0')
#define HEADSTR(str, n) str.substr(0, (n))
#define TAILSTR(str, n) str.substr((str).length() - (n))
#define CONTAINS(str, c) ((str).find(c) != string::npos)
#define INSPOS(v, a) (lower_bound((v).begin(), (v).end(), a) - (v).begin())
// デバッグ用
#define dump(x)  cerr << #x << "" = "" << (x) << endl;
#define debug(x) cerr << #x << "" = "" << (x) << "" (L"" << __LINE__ << "")"" << "" "" << __FILE__ << endl;

#define PB  push_back
#define RB  pop_back
#define RF  pop_front
#define INS insert
#define F   first
#define S   second
#define UM  unordered_map
#define US  unordered_set
#define PQ  priority_queue
#define IO ios_base::sync_with_stdio(false); cin.tie(NULL)

typedef long long ll;
typedef unsigned long long ull;

template<class T> vector<size_t> argsort(const vector<T> &vec, bool asc=true){
    vector<size_t> index(vec.size()); iota(index.begin(), index.end(), 0);
    sort(index.begin(), index.end(), [&vec, &asc](size_t i, size_t j){return asc ? (vec[i] < vec[j]):(vec[i] > vec[j]);});
    return index;
}

// 表示系
template<class T1, class T2> ostream& operator<<(ostream& os, const pair<T1, T2>& p) {
    os << ""("" << p.first << "", "" << p.second << "")"";
    return os;
}
template<class... T> ostream& operator<<(ostream& os, const tuple<T...>& t) {
    os << ""(""; apply([&os](auto&&... args) {((os << args << "", ""), ...);}, t);
    os << "")""; return os;
}
template<class T, size_t N> ostream& operator<<(ostream& os, const array<T, N>& ary) {
    os << ""[ ""; for ( const T& item : ary ) os << item << "", "";
    os << ""]""; return os;
}
template<class T> ostream& operator<<(ostream& os, const vector<T>& vec) {
    os << ""[ ""; for ( const T& item : vec ) os << item << "", "";
    os << ""]""; return os;
}
template<class T> ostream& operator<<(ostream& os, const set<T>& s) {
    os << ""{ ""; for ( const T& item : s ) os << item << "", "";
    os << ""}""; return os;
}
template<class T> ostream& operator<<(ostream& os, const multiset<T>& s) {
    os << ""{ ""; for ( const T& item : s ) os << item << "", "";
    os << ""}""; return os;
}
template<class T1, class T2> ostream& operator<<(ostream& os, const map<T1, T2>& m) {
    os << ""{ ""; for ( const auto &[key, value] : m ) os << key << "":""<< value << "", "";
    os << ""}""; return os;
}
template <class Head> void OUT(Head&& head) {cout << head << endl;}
template <class Head, class... Tail> void OUT(Head&& head, Tail&&... tail) {cout << head << "" "";OUT(forward<Tail>(tail)...);}
// 入力系
template<class T1, class T2> istream& operator>>(istream& is, pair<T1, T2>& p) {
    is >> p.first >> p.second;
    return is;
}
template<class... T> istream& operator>>(istream& is, tuple<T...>& t) {
    apply([&is](auto&&... args) {((is >> args), ...);}, t);
    return is;
}
template<class T, size_t N> istream& operator>>(istream& is, array<T, N>& ary) {
    for ( T& item : ary ) is >> item;
    return is;
}
template<class T> istream& operator>>(istream& is, vector<T>& vec) {
    for ( T& item : vec ) is >> item;
    return is;
}
// 集合演算
template<class T> set<T> operator&(const set<T>& a, const set<T>& b) {// 共通集合
    set<T> ans; set_intersection(a.begin(), a.end(), b.begin(), b.end(), inserter(ans, ans.end()));
    return ans;
}
template<class T> set<T> operator|(const set<T>& a, const set<T>& b) {// 和集合
    set<T> ans; set_union(a.begin(), a.end(), b.begin(), b.end(), inserter(ans, ans.end()));
    return ans;
}
template<class T> set<T> operator-(const set<T>& a, const set<T>& b) {// 差集合
    set<T> ans; set_difference(a.begin(), a.end(), b.begin(), b.end(), inserter(ans, ans.end()));
    return ans;
}

typedef vector<int> vi;
typedef vector<double> vd;
typedef vector<string> vs;
typedef vector<ll> vll;
typedef pair<int,int> pi;
typedef pair<double,double> pd;
typedef pair<ll,ll> pll;
typedef queue<int> qi;
typedef queue<double> qd;
typedef queue<ll> qll;
typedef US<int> si;
typedef US<double> sd;
typedef US<ll> sll;
typedef vector<vi> mi;
typedef vector<vd> md;
typedef vector<vll> mll;
typedef vector<pi> vpi;
typedef vector<pd> vpd;
typedef vector<pll> vpll;
using MII = map<int,int>; using MLL = map<ll,ll>;
using SI = set<int>; using SL = set<ll>;
using MSI = multiset<int>; using MSL = multiset<ll>;
template<class T> using MAXPQ = priority_queue<T>;
template<class T> using MINPQ = priority_queue< T, vector<T>, greater<T> >;
// int -> str: to_string(i)
// str -> int: stoi(s)
// vec -> set: set<int> s(ALL(v));
// 1が立っている数: __builtin_popcount(i), __builtin_popcountll(i)
// 上位ビットの連続した0の数: __builtin_clz(i), __builtin_clzll(i) // i=0未定義
// 下位ビットの連続した0の数: __builtin_ctz(i), __builtin_ctzll(i) // i=0未定義

istringstream debug_iss(R""(
デバッグ時はここに入力を貼り付けて下記マクロのコメントアウトを外す
)"");
// #define cin debug_iss

class Solution {
public:
    int solve(int num) {
        int prod=1;
        while(num>0){
            int d=num%10;
            if(d==0)return 0;
            prod*=d;
            num/=10;
        }
        return prod;
    }

    int smallestNumber(int n,int t) {
        while(true){
            if(solve(n)%t==0)return n;
            n++;
        }
    }
};",1447710207
wuaws,wuaws,229,3640,cpp,"// #pragma GCC optimize(""O3"")
// #include <atcoder/all>
#include <bits/stdc++.h>
using namespace std;
#define FOR(i, a, b) for(int i = a; i < b; i ++)
#define FORS(i, a, b, c) for(int i = a; i < b; i += c)
#define FORN(i, a, b) for(int i = a; i <= b; i ++)
#define FORD(i, a, b) for(int i = a-1; i >= b; i --)
#define FORE(i, b) for(auto &i:b)
#define REP(i, b) FOR(i, 0, b)
#define REPN(i, b) FORN(i, 0, b)
#define SQ(i) (i*i)
#define ALL(a) a.begin(), a.end()
#define ALLA(a,n) a, a+n
#define SORT(a) sort(ALL(a))
#define SORTA(a, n) sort(ALLA(a, n))
#define REV(a) reverse(ALL(a))
#define REVA(a, n) reverse(ALLA(a, n))
#define MIN(v) (*min_element((v).begin(), (v).end()))
#define MAX(v) (*max_element((v).begin(), (v).end()))
#define IN(a, b) (a.find(b) != a.end())
#define BACK(a) a.back(); a.RB()
#define QBACK(a) a.top(); a.pop()
#define PRINT(a) FORE(i, a) cout << i << "" ""; cout << endle 
#define MY_PI     3.14159265358979323846
#define MY_E      2.7182818284590452354
#define INF     (INT_MAX / 2)
#define LINF    (LLONG_MAX / 2)
#define RFOR(i, a, b) for(int i = (b) - 1; i >= (a); --i)
#define RREP(i, n) RFOR(i, 0, n)
#define EACH(e, v) for(auto &e : v)
#define ITR(it, v) for(auto it = (v).begin(); it != (v).end(); ++it)
#define RITR(it, v) for(auto it = (v).rbegin(); it != (v).rend(); ++it)
#define CASE break; case
#define DEFAULT break; default
#define RALL(v) (v).rbegin(), (v).rend()
#define SZ(v) int((v).size())
#define EXIST(s, e) ((s).find(e) != (s).end())
#define RSORT(v) sort((v).rbegin(), (v).rend())
#define SUM(v, type) accumulate((v).begin(), (v).end(), (type) 0)
#define ARGMIN(v) (min_element((v).begin(), (v).end()) - (v).begin())
#define ARGMAX(v) (max_element((v).begin(), (v).end()) - (v).begin())
#define REVERSE(v) reverse((v).begin(), (v).end())
#define ARANGE(v) iota((v).begin(), (v).end(), 0)
#define COUNT(v, e) count((v).begin(), (v).end(), e)
#define ROTATE_L(v) rotate((v).begin(), (v).begin()+1, (v).end())
#define ROTATE_R(v) rotate((v).rbegin(), (v).rbegin()+1, (v).rend())
#define FILTER(src, tgt, func) copy_if(begin(src), end(src), back_inserter(tgt), func)
#define CTOI(c) (c - '0')
#define HEADSTR(str, n) str.substr(0, (n))
#define TAILSTR(str, n) str.substr((str).length() - (n))
#define CONTAINS(str, c) ((str).find(c) != string::npos)
#define INSPOS(v, a) (lower_bound((v).begin(), (v).end(), a) - (v).begin())
// デバッグ用
#define dump(x)  cerr << #x << "" = "" << (x) << endl;
#define debug(x) cerr << #x << "" = "" << (x) << "" (L"" << __LINE__ << "")"" << "" "" << __FILE__ << endl;

#define PB  push_back
#define RB  pop_back
#define RF  pop_front
#define INS insert
#define F   first
#define S   second
#define UM  unordered_map
#define US  unordered_set
#define PQ  priority_queue
#define IO ios_base::sync_with_stdio(false); cin.tie(NULL)

typedef long long ll;
typedef unsigned long long ull;

template<class T> vector<size_t> argsort(const vector<T> &vec, bool asc=true){
    vector<size_t> index(vec.size()); iota(index.begin(), index.end(), 0);
    sort(index.begin(), index.end(), [&vec, &asc](size_t i, size_t j){return asc ? (vec[i] < vec[j]):(vec[i] > vec[j]);});
    return index;
}

// 表示系
template<class T1, class T2> ostream& operator<<(ostream& os, const pair<T1, T2>& p) {
    os << ""("" << p.first << "", "" << p.second << "")"";
    return os;
}
template<class... T> ostream& operator<<(ostream& os, const tuple<T...>& t) {
    os << ""(""; apply([&os](auto&&... args) {((os << args << "", ""), ...);}, t);
    os << "")""; return os;
}
template<class T, size_t N> ostream& operator<<(ostream& os, const array<T, N>& ary) {
    os << ""[ ""; for ( const T& item : ary ) os << item << "", "";
    os << ""]""; return os;
}
template<class T> ostream& operator<<(ostream& os, const vector<T>& vec) {
    os << ""[ ""; for ( const T& item : vec ) os << item << "", "";
    os << ""]""; return os;
}
template<class T> ostream& operator<<(ostream& os, const set<T>& s) {
    os << ""{ ""; for ( const T& item : s ) os << item << "", "";
    os << ""}""; return os;
}
template<class T> ostream& operator<<(ostream& os, const multiset<T>& s) {
    os << ""{ ""; for ( const T& item : s ) os << item << "", "";
    os << ""}""; return os;
}
template<class T1, class T2> ostream& operator<<(ostream& os, const map<T1, T2>& m) {
    os << ""{ ""; for ( const auto &[key, value] : m ) os << key << "":""<< value << "", "";
    os << ""}""; return os;
}
template <class Head> void OUT(Head&& head) {cout << head << endl;}
template <class Head, class... Tail> void OUT(Head&& head, Tail&&... tail) {cout << head << "" "";OUT(forward<Tail>(tail)...);}
// 入力系
template<class T1, class T2> istream& operator>>(istream& is, pair<T1, T2>& p) {
    is >> p.first >> p.second;
    return is;
}
template<class... T> istream& operator>>(istream& is, tuple<T...>& t) {
    apply([&is](auto&&... args) {((is >> args), ...);}, t);
    return is;
}
template<class T, size_t N> istream& operator>>(istream& is, array<T, N>& ary) {
    for ( T& item : ary ) is >> item;
    return is;
}
template<class T> istream& operator>>(istream& is, vector<T>& vec) {
    for ( T& item : vec ) is >> item;
    return is;
}
// 集合演算
template<class T> set<T> operator&(const set<T>& a, const set<T>& b) {// 共通集合
    set<T> ans; set_intersection(a.begin(), a.end(), b.begin(), b.end(), inserter(ans, ans.end()));
    return ans;
}
template<class T> set<T> operator|(const set<T>& a, const set<T>& b) {// 和集合
    set<T> ans; set_union(a.begin(), a.end(), b.begin(), b.end(), inserter(ans, ans.end()));
    return ans;
}
template<class T> set<T> operator-(const set<T>& a, const set<T>& b) {// 差集合
    set<T> ans; set_difference(a.begin(), a.end(), b.begin(), b.end(), inserter(ans, ans.end()));
    return ans;
}

typedef vector<int> vi;
typedef vector<double> vd;
typedef vector<string> vs;
typedef vector<ll> vll;
typedef pair<int,int> pi;
typedef pair<double,double> pd;
typedef pair<ll,ll> pll;
typedef queue<int> qi;
typedef queue<double> qd;
typedef queue<ll> qll;
typedef US<int> si;
typedef US<double> sd;
typedef US<ll> sll;
typedef vector<vi> mi;
typedef vector<vd> md;
typedef vector<vll> mll;
typedef vector<pi> vpi;
typedef vector<pd> vpd;
typedef vector<pll> vpll;
using MII = map<int,int>; using MLL = map<ll,ll>;
using SI = set<int>; using SL = set<ll>;
using MSI = multiset<int>; using MSL = multiset<ll>;
template<class T> using MAXPQ = priority_queue<T>;
template<class T> using MINPQ = priority_queue< T, vector<T>, greater<T> >;
// int -> str: to_string(i)
// str -> int: stoi(s)
// vec -> set: set<int> s(ALL(v));
// 1が立っている数: __builtin_popcount(i), __builtin_popcountll(i)
// 上位ビットの連続した0の数: __builtin_clz(i), __builtin_clzll(i) // i=0未定義
// 下位ビットの連続した0の数: __builtin_ctz(i), __builtin_ctzll(i) // i=0未定義

istringstream debug_iss(R""(
デバッグ時はここに入力を貼り付けて下記マクロのコメントアウトを外す
)"");
// #define cin debug_iss

class Solution {
public:
    int maxFrequency(vi& a, int k, int op) {
        int n=SZ(a);
        vll vals;
        REP(i,n) {
            vals.PB(a[i]);
            vals.PB((ll)a[i]-k);
            vals.PB((ll)a[i]+k);
        }
        SORT(vals);
        vals.erase(unique(ALL(vals)),vals.end());
        int m=SZ(vals);
        unordered_map<ll,int> x_idx;
        REP(i,m) x_idx[vals[i]]=i;

        vi cnt_range(m+2,0), cnt_same(m,0);
        REP(i,n) {
            ll l=(ll)a[i]-k, r=(ll)a[i]+k;
            int li=x_idx[l], ri=x_idx[r];
            cnt_range[li]++;
            if(ri+1<m) cnt_range[ri+1]--;
            cnt_same[x_idx[a[i]]]++;
        }

        vi cnt_adj(m,0);
        int pre=0, res=0;
        REP(i,m) {
            pre+=cnt_range[i];
            cnt_adj[i]=pre;
            int freq=cnt_same[i]+min(op,cnt_adj[i]-cnt_same[i]);
            res=max(res,freq);
        }
        return res;
    }
};",1447720976
udayleetcode,udaylletcode,230,3622,javascript,"var maxFrequency = function(nums, k, numOperations) {
    const maxNum = Math.max(...nums);
    const size = maxNum + k + 2;
    const freq = Array(size).fill(0);

    nums.forEach(num => freq[num]++);

    const pre = Array(size).fill(0);
    pre[0] = freq[0];
    for (let i = 1; i < size; i++) {
        pre[i] = pre[i - 1] + freq[i];
    }

    let result = 0;
    for (let x = 0; x < size; x++) {
        if (freq[x] === 0 && numOperations === 0) continue;

        const left = Math.max(0, x - k);
        const right = Math.min(size - 1, x + k);
        const totalInRange = pre[right] - (left > 0 ? pre[left - 1] : 0);
        const canAdjust = totalInRange - freq[x];
        const total = freq[x] + Math.min(numOperations, canAdjust);
        result = Math.max(result, total);
    }

    return result;
};
",1447698558
udayleetcode,udaylletcode,230,3626,javascript,"var smallestNumber = function(n, t) {
    let s = n;
    while (true) {
        if (productOfDigits(s) % t === 0) {
            return s;
        }
        s++;
    }
};

function productOfDigits(num) {
    let product = 1;
    while (num > 0) {
        let digit = num % 10;
        if (digit === 0) {
            return 0;
        }
        product *= digit;
        num = Math.floor(num / 10);
    }
    return product;
}
",1447660149
udayleetcode,udaylletcode,230,3640,kotlin,"class Solution {
    fun maxFrequency(nums: IntArray, k: Int, numOperations: Int): Int {
        val freq = HashMap<Int, Int>()
        val events = mutableListOf<Pair<Int, Int>>()

        nums.forEach { num ->
            freq[num] = freq.getOrDefault(num, 0) + 1
            events.add(Pair(num - k, 1))
            events.add(Pair(num + k + 1, -1))
        }

        val points = mutableSetOf<Int>().apply {
            events.forEach { add(it.first) }
            freq.keys.forEach { add(it) }
        }
        events.sortBy { it.first }

        var idx = 0
        var currentOverlap = 0
        var maxFreq = 0

        points.sorted().forEach { t ->
            while (idx < events.size && events[idx].first <= t) {
                currentOverlap += events[idx].second
                idx++
            }
            val actualCount = freq[t] ?: 0
            val possibleFreq = actualCount + min(numOperations, currentOverlap - actualCount)
            maxFreq = maxOf(maxFreq, possibleFreq)
        }

        return maxFreq
    }
}
",1447729864
Nihal,nsk_91,231,3622,cpp,"#include<bits/stdc++.h>
using namespace std;

class Solution {
public:
    int maxFrequency(vector<int>& var_200, int var_201, int var_202) {
        int var_203 = 0;
        int var_204 = 0;
        while (var_204 < var_200.size()) {
            var_203 = max(var_203, var_200[var_204]);
            var_204++;
        }
        int var_205 = var_203 + var_201 + 2;
        vector<long long> var_206(var_205, 0);
        
        var_204 = 0;
        while (var_204 < var_200.size()) {
            var_206[var_200[var_204]]++;
            var_204++;
        }

        vector<long long> var_207(var_205, 0);
        var_207[0] = var_206[0];
        for (int var_208 = 1; var_208 < var_205; var_208++) {
            var_207[var_208] = var_207[var_208 - 1] + var_206[var_208];
        }

        int var_209 = 0;
        int var_210 = 0;
        while (var_210 < var_205) {
            switch ((var_206[var_210] == 0 && var_202 == 0) ? 1 : 0) {
                case 1:
                    var_210++;
                    continue;
                default:
                    break;
            }

            int var_211 = max(0, var_210 - var_201);
            int var_212 = min(var_205 - 1, var_210 + var_201);
            long long var_213 = var_207[var_212] - (var_211 > 0 ? var_207[var_211 - 1] : 0);
            long long var_214 = var_213 - var_206[var_210];
            long long var_215 = var_206[var_210] + min((long long)var_202, var_214);
            var_209 = max(var_209, (int)var_215);

            var_210++;
        }

        return var_209;
    }
};
",1447678529
Nihal,nsk_91,231,3626,cpp,"#include <vector>
using namespace std;

class Solution {
public:
    int digitProduct(int var_200) {
        int var_201 = 1;
        for (; var_200 > 0;) {
            int var_202 = var_200 % 10;
            switch (var_202) {
                case 0: return 0;
                default: break;
            }
            var_201 *= var_202;
            var_200 /= 10;
        }
        return var_201;
    }

    int smallestNumber(int var_203, int var_204) {
        for (;;) {
            switch (digitProduct(var_203) % var_204) {
                case 0: return var_203;
                default: break;
            }
            var_203++;
        }
    }
};
",1447653346
Nihal,nsk_91,231,3640,cpp,"#include <vector>
#include <map>
#include <set>
#include <algorithm>
using namespace std;

class Solution {
public:
    int maxFrequency(vector<int>& var_200, int var_201, int var_202) {
        int var_203 = var_200.size();
        map<int, int> var_204;
        vector<pair<int, int>> var_205;

        int var_206 = 0;
        while (var_206 < var_203) {
            int var_207 = var_200[var_206];
            var_204[var_207]++;
            var_205.push_back({var_207 - var_201, +1});
            var_205.push_back({var_207 + var_201 + 1, -1});
            var_206++;
        }

        set<int> var_208;
        var_206 = 0;
        while (var_206 < var_205.size()) {
            var_208.insert(var_205[var_206].first);
            var_206++;
        }
        for (auto& var_209 : var_204) var_208.insert(var_209.first);

        sort(var_205.begin(), var_205.end());

        int var_210 = 0;
        int var_211 = 0;
        int var_212 = 0;
        int var_213 = 0;

        for (int var_214 : var_208) {
            for (; var_210 < var_205.size() && var_205[var_210].first <= var_214; var_210++) {
                switch (var_205[var_210].second) {
                    case +1:
                    case -1: 
                        var_211 += var_205[var_210].second;
                        break;
                }
            }
            var_213 = var_204.count(var_214) ? var_204[var_214] : 0;
            int var_215 = var_213 + min(var_202, var_211 - var_213);
            var_212 = max(var_212, var_215);
        }

        return var_212;
    }
};
",1447704343
xymabinogi,xymabinogi,232,3622,cpp,"using i64 = long long;
class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int ops) {
        int n = nums.size();
        sort(nums.begin(), nums.end());
        
        vector<array<i64,2>> a;
        for (auto v : nums){
            if (a.empty() or a.back()[0] != v){
                a.push_back({v, 1});
            }
            else a.back()[1]++;
        }
        int sz = a.size();
        int l = 0, r = 0;
        
        //[l, r)
        int cur = 0, res = 0;
        for (int i = 0; i < sz; i++){
            while(a[l][0] + k < a[i][0]){
                cur -= a[l][1];
                l++;
            }
            while (r < sz and a[r][0] <= a[i][0] + k) {
                cur += a[r][1];
                r++;
            }
            //use l
            //cout << l <<"" ""<< r << "" ""<< cur << ""---\n"";
            res = max(res, max(0, min(cur - (int) a[i][1], ops)) + (int) a[i][1]);
            //cout << res << ""---\n"";
        }
    
        r = 0;
        for (int i = 0; i < n; i++){
            while(r < n and (i64) nums[r] <= (i64) nums[i] + 2 * k){
                r++;
            }
            //cout << i <<"" ""<< r << ""--\n"";
            res = max(res, min(ops, r - i));
        }
        return res;
        
        
        
    }
};",1447713134
xymabinogi,xymabinogi,232,3626,cpp,"class Solution {
public:
    int smallestNumber(int n, int t) {
        while(true){
            int w = n;
            int prod = 1;
            while(w){
                prod *= w % 10;
                w /= 10;
            }
            if (prod % t == 0) return n;
            n++;
        }
        return -1;
    }
};",1447653918
xymabinogi,xymabinogi,232,3640,cpp,"using i64 = long long;
class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int ops) {
        int n = nums.size();
        sort(nums.begin(), nums.end());
        
        vector<array<i64,2>> a;
        for (auto v : nums){
            if (a.empty() or a.back()[0] != v){
                a.push_back({v, 1});
            }
            else a.back()[1]++;
        }
        int sz = a.size();
        int l = 0, r = 0;
        
        //[l, r)
        int cur = 0, res = 0;
        for (int i = 0; i < sz; i++){
            while(a[l][0] + k < a[i][0]){
                cur -= a[l][1];
                l++;
            }
            while (r < sz and a[r][0] <= a[i][0] + k) {
                cur += a[r][1];
                r++;
            }
            //use l
            //cout << l <<"" ""<< r << "" ""<< cur << ""---\n"";
            res = max(res, max(0, min(cur - (int) a[i][1], ops)) + (int) a[i][1]);
            //cout << res << ""---\n"";
        }
    
        r = 0;
        for (int i = 0; i < n; i++){
            while(r < n and (i64) nums[r] <= (i64) nums[i] + 2 * k){
                r++;
            }
            //cout << i <<"" ""<< r << ""--\n"";
            res = max(res, min(ops, r - i));
        }
        return res;
        
        
        
    }
};",1447712710
yu46656,yu46656,234,3622,cpp,"class Solution {
public:
    int maxFrequency(std::vector<int>& nums, int k, int num_ops) {
        int n{ static_cast<int>(nums.size()) };

        std::sort(nums.begin(), nums.end());

        std::map<int, int> dels;

        for (int num : nums) {
            ++dels.insert({ num - k, 0 }).first->second;
            --dels.insert({ num + k + 1, 0 }).first->second;
        }

        int ret{ 0 };
        int acc{ 0 };

        for (auto& del : dels) {
            acc += del.second;
            ret = std::max(ret, acc);
        }

        ret = std::min(ret, num_ops);

        for (int i{ 0 }, j_beg{ 0 }, j_end{ 0 }, k_beg{ 0 }, k_end{ 0 }; i < n;
             ++i) {
            while (nums[j_beg] + k < nums[i]) { ++j_beg; }
            while (j_end < n && nums[j_end] - k <= nums[i]) { ++j_end; }

            while (nums[k_beg] < nums[i]) { ++k_beg; }
            while (k_end < n && nums[k_end] <= nums[i]) { ++k_end; }

            ret = std::max(
                ret, (k_end - k_beg) +
                         std::min(num_ops, (j_end - j_beg) - (k_end - k_beg)));
        }

        return ret;
    }
};
",1447713541
yu46656,yu46656,234,3626,cpp,"class Solution {
public:
    bool Check(int n, int t) {
        int m{ 1 };

        for (; 0 < n; n /= 10) { m *= n % 10; }

        return m % t == 0;
    }

    int smallestNumber(int n, int t) {
        while (!Check(n, t)) { ++n; }
        return n;
    }
};
",1447674267
yu46656,yu46656,234,3640,cpp,"class Solution {
public:
    int maxFrequency(std::vector<int>& nums, int k, int num_ops) {
        int n{ static_cast<int>(nums.size()) };

        std::sort(nums.begin(), nums.end());

        std::map<int, int> dels;

        for (int num : nums) {
            ++dels.insert({ num - k, 0 }).first->second;
            --dels.insert({ num + k + 1, 0 }).first->second;
        }

        int ret{ 0 };
        int acc{ 0 };

        for (auto& del : dels) {
            acc += del.second;
            ret = std::max(ret, acc);
        }

        ret = std::min(ret, num_ops);

        for (int i{ 0 }, j_beg{ 0 }, j_end{ 0 }, k_beg{ 0 }, k_end{ 0 }; i < n;
             ++i) {
            while (nums[j_beg] + k < nums[i]) { ++j_beg; }
            while (j_end < n && nums[j_end] - k <= nums[i]) { ++j_end; }

            while (nums[k_beg] < nums[i]) { ++k_beg; }
            while (k_end < n && nums[k_end] <= nums[i]) { ++k_end; }

            ret = std::max(
                ret, (k_end - k_beg) +
                         std::min(num_ops, (j_end - j_beg) - (k_end - k_beg)));
        }

        return ret;
    }
};
",1447713237
stupid_panda,stupid_panda,235,3622,rust,"impl Solution {
    pub fn max_frequency(mut nums: Vec<i32>, k: i32, num_operations: i32) -> i32 {
        nums.sort_unstable();
        let num_operations = num_operations as usize;
        let mut ans = 1;
        let mut i = 0;
        while i < nums.len() {
            let next_i = nums.partition_point(|&x| x <= nums[i]);
            // [lowerbound, upperbound)
            let upperbound = nums.partition_point(|&x| x <= nums[i] + k);
            let lowerbound = nums.partition_point(|&x| x < nums[i] - k);
            let full_op = (upperbound - lowerbound) - (next_i - i);
            ans = ans.max(full_op.min(num_operations) + (next_i - i));

            let upperbound2 = nums.partition_point(|&x| x <= nums[i] + k * 2);
            ans = ans.max((upperbound2 - i).min(num_operations));
            i = next_i;
        }
        ans as _
    }
}
",1447722111
stupid_panda,stupid_panda,235,3626,rust,"impl Solution {
    pub fn smallest_number(mut n: i32, t: i32) -> i32 {
        while Self::digit_product(n) % t != 0 {
            n += 1;
        }
        n
    }

    fn digit_product(mut n: i32) -> i32 {
        let mut ans = 1;
        while n > 0 {
            ans *= n % 10;
            n /= 10;
        }
        ans
    }
}
",1447662643
stupid_panda,stupid_panda,235,3640,rust,"impl Solution {
    pub fn max_frequency(mut nums: Vec<i32>, k: i32, num_operations: i32) -> i32 {
        nums.sort_unstable();
        let num_operations = num_operations as usize;
        let mut ans = 1;
        let mut i = 0;
        while i < nums.len() {
            let next_i = nums.partition_point(|&x| x <= nums[i]);
            // [lowerbound, upperbound)
            let upperbound = nums.partition_point(|&x| x <= nums[i] + k);
            let lowerbound = nums.partition_point(|&x| x < nums[i] - k);
            let full_op = (upperbound - lowerbound) - (next_i - i);
            ans = ans.max(full_op.min(num_operations) + (next_i - i));

            let upperbound2 = nums.partition_point(|&x| x <= nums[i] + k * 2);
            ans = ans.max((upperbound2 - i).min(num_operations));
            i = next_i;
        }
        ans as _
    }
}
",1447721454
Harsh_kunwar,Harsh_kunwar,236,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
   const int mxn = 200001;
        vector<int> freq(mxn, 0);
        int tem = 0;

        for (auto num : nums)
        {
            freq[num]++;
            tem = max(tem, freq[num]);
        }

        vector<int> prefix(mxn, 0);
        prefix[0] = freq[0];
        for (int i = 1; i < mxn; i++)
        {
            prefix[i] = prefix[i - 1] + freq[i];
        }
        int ans = tem;

        for (int x = 0; x < mxn; x++)
        {
            int left = x - k;
            left = max(left, 0);
            int right = x + k;
            right = min(right, mxn - 1);

            int cnt = prefix[right] - (left > 0 ? prefix[left - 1] : 0);
            int pos = cnt - freq[x];
            pos = max(pos, 0);

            int uop = min(numOperations, pos);
            ans=max(ans, freq[x] + uop);
        }

        return ans;
    }
};",1447681467
Harsh_kunwar,Harsh_kunwar,236,3626,cpp,"class Solution {
public:
    int smallestNumber(int n, int t) {
        int p=n;
        while(true){
            string s=to_string(p);
            int val=1;
            for(auto &j:s){
                val*=(j-'0');
            }
            if(val%t==0){
                return p;
            }
            p++;
            
        }
        return 0;
        
    }
};",1447660917
Harsh_kunwar,Harsh_kunwar,236,3640,cpp,"class Solution
{
public:
    int maxFrequency(vector<int> &nums, int k, int numOperations)
    {
        sort(nums.begin(), nums.end());
    int n = nums.size();
    vector<pair<long long, int>> v;
    for (auto num : nums)
    {
        v.push_back({num - k, 1});
        v.push_back({num + k + 1, -1});
    }

    sort(v.begin(), v.end());
    long long cnt = 0;
    int maxi = 0;
    int i = 0;
    int j = 0;
    while (i < v.size() || j < n)
    {
        long long t;
        if (i < v.size() && (j >= n || v[i].first <= nums[j]))
        {
            t = v[i].first;
        }
        else
        {
            t = nums[j];
        }

        int check = 0;
        while (j < n && nums[j] == t)
        {
            check++;
            j++;
        }

        while (i < v.size() && v[i].first == t)
        {
            cnt += v[i].second;
            i++;
        }
        if (!check)
        {

            int freq = min((long long)numOperations, cnt);
            maxi = max(maxi, freq);
            continue;
        }

        int op = min((long long)numOperations, max(0ll, cnt - check));
        maxi = max(maxi, check + op);
    }

    return maxi;
    }
};",1447722130
Tim Lu,Casterkiller,237,3622,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        mx = max(nums)
        count = [0] * (mx + 1)

        for n in nums:
            count[n] += 1

        # print('count', count)
        ps = [0] * (mx + 1)
        for i in range(1, mx + 1):
            ps[i] = count[i] + ps[i - 1]

        # print('ps', ps)
        best = 0
        for i in range(1, mx + 1):
            total = ps[min(mx, i + k)] - ps[max(i - k - 1, 0)]
            # print(i, total, count[i] + numOperations)
            best = max(best, min(total, count[i] + numOperations))
        return best
            ",1447696649
Tim Lu,Casterkiller,237,3626,python3,"class Solution:
    def smallestNumber(self, n: int, t: int) -> int:
        cur = n
        while True:
            d = 1
            c = cur
            while c:
                d *= c % 10
                c //= 10

            if d % t == 0:
                return cur
            cur += 1
            
            ",1447655135
Tim Lu,Casterkiller,237,3640,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        f = Counter(nums)

        events = []
        for key, value in f.items():
            events.append((key - k, 0, value)) # (num, type, count)
            events.append((key, 1, value)) # (num, type, count)
            events.append((key + k, 2, value)) # (num, type, count)

        events.sort()
        best = 0

        count = 0
        for num, typ, cnt in events:
            if typ == 0:
                count += cnt
                total = min(count, f[num] + min(count - f[num], numOperations))
                best = max(best, total)
            elif typ == 1:
                total = min(count, cnt + min(count - cnt, numOperations))
                best = max(best, total)
            else:
                total = min(count, f[num] + min(count - f[num], numOperations))
                best = max(best, total)
                count -= cnt

        return best
                
        
            
        ",1447722148
Shaik Sameer,s1967,239,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int m) {
        int n=nums.size();
        map<int,int>m1,m2;
        for(int i=0;i<n;i++){
            m1[nums[i]]++;
            m2[nums[i]]--;
            m2[nums[i]-k]++;
            m2[nums[i]+1]++;
            m2[nums[i]+1+k]--;
        }
        int pre=0;
        int maxi=0;
        for(auto &val:m2){
            int v=val.first;
            int count=m1[v];
            pre+=m2[v];
            maxi=max(maxi,count+min(m,pre));
        }
        return maxi;
    }
};",1447730570
Shaik Sameer,s1967,239,3626,cpp,"class Solution {
public:
    int smallestNumber(int n, int t) {
        while(true){
            int x=n;
            int p=1;
            while(x){
                p*=(x%10);
                x/=10;
            }
            if(p%t==0)return n;
            n++;
        }
        return -1;
    }
};",1447654212
Shaik Sameer,s1967,239,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int m) {
         int n=nums.size();
        map<int,int>m1,m2;
        for(int i=0;i<n;i++){
            m1[nums[i]]++;
            m2[nums[i]]--;
            m2[nums[i]-k]++;
            m2[nums[i]+1]++;
            m2[nums[i]+1+k]--;
        }
        int pre=0;
        int maxi=0;
        for(auto &val:m2){
            int v=val.first;
            int count=m1[v];
            pre+=m2[v];
            maxi=max(maxi,count+min(m,pre));
        }
        return maxi;
    }
};",1447731196
GOVIND,govind70821,240,3622,cpp,"#define ll long long
class Solution {
public:
     int maxFrequency(vector<int>& nums, int k, int xx) {
        int n=nums.size();
        int ans=0;
        set<int> st;
        vector<pair<int,bool>> adj;
        map<int,int> fr;
        for(auto it:nums){
            adj.push_back({it-k,1});
            adj.push_back({it+k+1,0});
            st.insert(it);
            st.insert(it-k);
            st.insert(it+k+1);
            fr[it]++;
        }
        // cout<<fr[999]<<"" "";
        int m=adj.size();
        int i=0,c=0;
        sort(adj.begin(),adj.end());
        for(auto it:st){
            // cout<<it<<"" "";
            while(i<m && adj[i].first<=it){
                if(adj[i].second) c++;
                else c--;
                i++;
            }
            ans=max(ans,fr[it]+min(xx,c-fr[it]));
        }
        return ans;

    }
};",1447731208
GOVIND,govind70821,240,3626,cpp,"class Solution {
public:
    int solve(int n) {
        int ans = 1;
        while(n>0) {
            int rem=n%10;
            ans*=rem;
            n/=10;
        }
        return ans;
}
    int smallestNumber(int n, int t) {
        int ans=n;
        while(1){
            int temp=solve(ans);
            if(temp%t==0) return ans;
            ans++;
        }
        return ans;
        
    }
};",1447658167
GOVIND,govind70821,240,3640,cpp,"#define ll long long
class Solution {
public:
     int maxFrequency(vector<int>& nums, int k, int xx) {
        int n=nums.size();
        int ans=0;
        set<int> st;
        vector<pair<int,bool>> adj;
        map<int,int> fr;
        for(auto it:nums){
            adj.push_back({it-k,1});
            adj.push_back({it+k+1,0});
            st.insert(it);
            st.insert(it-k);
            st.insert(it+k+1);
            fr[it]++;
        }
        // cout<<fr[999]<<"" "";
        int m=adj.size();
        int i=0,c=0;
        sort(adj.begin(),adj.end());
        for(auto it:st){
            // cout<<it<<"" "";
            while(i<m && adj[i].first<=it){
                if(adj[i].second) c++;
                else c--;
                i++;
            }
            ans=max(ans,fr[it]+min(xx,c-fr[it]));
        }
        return ans;

    }
};",1447730745
Williamper,Williamper,242,3622,cpp,"class Solution {
public:
    #define maxk 100001
    
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        unordered_map<int, int> Freq;
        sort(nums.begin(), nums.end());        
        int n = nums.size();
        for (int i = 0; i < n; i++) {
            Freq[ nums[i] ]++;
        }
        
        int ans = 0;
        for (int target = -k; target <= nums[n-1]+k; target++) {
            int lo = 0, hi = n-1;
            while (lo <= hi) {
                int mid = lo + (hi-lo)/2;
                if (nums[mid]+k >= target)
                    hi = mid-1;
                else
                    lo = mid+1;
            }
            int Left = lo;
            
            lo = 0; hi = n-1;
            while (lo <= hi) {
                int mid = lo + (hi-lo)/2;
                if (nums[mid]-k <= target)
                    lo = mid+1;
                else
                    hi = mid-1;
            }
            int Right = hi;
            if (Left > Right)
                continue;

            int Res = Right-Left+1;
            int LimOp = numOperations + Freq[ target ];
            Res = min(Res, LimOp);
            ans = max(ans, Res);
            
            //cout << target << "" "" << Left << "" "" << Right << ""\n"";
        }
        
        return ans;
    }
};",1447702527
Williamper,Williamper,242,3626,cpp,"class Solution {
public:
    int smallestNumber(int n, int t) {
        for (int i = n;;i++) {
            int x = i;
            int prod = 1;
            while (x != 0) {
                prod *= (x%10);
                x /= 10;
            }
            
            if (prod % t == 0)
                return i;
        }
        return 1;
    }
};",1447656369
Williamper,Williamper,242,3640,cpp,"class Solution {
public:
#define i64 long long

    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        int n = nums.size();
        unordered_map<int, int> Freq;
        sort(nums.begin(), nums.end());        
        for (int i = 0; i < n; i++) {
            Freq[ nums[i] ]++;
        }
        
        int ans = 0;
        for (int target : nums) {
            int lo = 0, hi = n-1;
            while (lo <= hi) {
                int mid = lo + (hi-lo)/2;
                if (nums[mid]+k >= target)
                    hi = mid-1;
                else
                    lo = mid+1;
            }
            int Left = lo;
            
            lo = 0; hi = n-1;
            while (lo <= hi) {
                int mid = lo + (hi-lo)/2;
                if (nums[mid]-k <= target)
                    lo = mid+1;
                else
                    hi = mid-1;
            }
            int Right = hi;
            if (Left > Right)
                continue;

            int Res = Right-Left+1;
            int LimOp = numOperations + Freq[ target ];
            Res = min(Res, LimOp);
            ans = max(ans, Res);
        }

        int i = 0, j = 0;
        while (j < n) {
            while ( (i64)nums[i]+(i64)(2*k) < (i64)nums[j]) {
                i++;
            }
            int Len = j-i+1;
            int Res = min(Len, numOperations);
            ans = max(ans, Res);
            
            j++;
        }

        return ans;
    }
};",1447731473
P1Kaj1uu,P1Kaj1uu,243,3622,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        count = {}
        for num in nums:
            count[num] = count.get(num, 0) + 1
        nums1, nums2 = sorted(nums), set(nums)
        for num in nums:
            if num - k not in nums2:
                nums2.add(num - k)
            if num + k not in nums2:
                nums2.add(num + k)
        res = 0
        for num in sorted(nums2):
            i = bisect_left(nums1, num - k)
            j = bisect_right(nums1, num + k)
            res = max(res, min(j - i - count.get(num, 0), numOperations) + count.get(num, 0))
        return res
        ",1447730832
P1Kaj1uu,P1Kaj1uu,243,3626,javascript,"/**
 * @param {number} n
 * @param {number} t
 * @return {number}
 */
var smallestNumber = function(n, t) {
    const digitProduct = (num) => {
    return String(num)
      .split('')
      .reduce((product, digit) => product * Number(digit), 1);
  };

  while (true) {
    if (digitProduct(n) % t === 0) {
      return n;
    }
    n++;
  }
};",1447731530
P1Kaj1uu,P1Kaj1uu,243,3640,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        count = {}
        for num in nums:
            count[num] = count.get(num, 0) + 1
        nums1, nums2 = sorted(nums), set(nums)
        for num in nums:
            if num - k not in nums2:
                nums2.add(num - k)
            if num + k not in nums2:
                nums2.add(num + k)
        res = 0
        for num in sorted(nums2):
            i = bisect_left(nums1, num - k)
            j = bisect_right(nums1, num + k)
            res = max(res, min(j - i - count.get(num, 0), numOperations) + count.get(num, 0))
        return res
        ",1447729929
Ayush,as_313,244,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& n, int k, int m) {
        int s = n.size();
        map<int, int> f;
        vector<pair<int, int>> e;
        
        buildF(n, f, e, k);
        
        set<int> p = createP(f, e);

        sort(e.begin(), e.end());
        
        return calcF(f, e, p, k, m);
    }
    
private:
    void buildF(const vector<int>& n, map<int, int>& f, vector<pair<int, int>>& e, int k) {
        for (int x : n) {
            f[x]++;
            e.push_back({x - k, 1});
            e.push_back({x + k + 1, -1});
        }
    }

    set<int> createP(const map<int, int>& f, const vector<pair<int, int>>& e) {
        set<int> p;
        for (auto& i : e) p.insert(i.first);
        for (auto& i : f) p.insert(i.first);
        return p;
    }

    int calcF(const map<int, int>& f, const vector<pair<int, int>>& e, const set<int>& p, int k, int m) {
        int i = 0, o = 0, r = 0;
        
        for (int t : p) {
            while (i < e.size() && e[i].first <= t) {
                o += e[i++].second;
            }
            
            int a = f.count(t) ? f.at(t) : 0;
            r = max(r, a + min(m, o - a));
        }
        
        return r;
    }
};
",1447704644
Ayush,as_313,244,3626,python3,"class Solution:
    def smallestNumber(self, n: int, t: int) -> int:
        while True:
            p, x = 1, n
            while x > 0: p *= (x % 10); x //= 10
            if p % t == 0: return n
            n += 1",1447714898
Ayush,as_313,244,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& n, int k, int m) {
        int s = n.size();
        map<int, int> f;
        vector<pair<int, int>> e;
        
        buildF(n, f, e, k);
        
        set<int> p = createP(f, e);

        sort(e.begin(), e.end());
        
        return calcF(f, e, p, k, m);
    }
    
private:
    void buildF(const vector<int>& n, map<int, int>& f, vector<pair<int, int>>& e, int k) {
        for (int x : n) {
            f[x]++;
            e.push_back({x - k, 1});
            e.push_back({x + k + 1, -1});
        }
    }

    set<int> createP(const map<int, int>& f, const vector<pair<int, int>>& e) {
        set<int> p;
        for (auto& i : e) p.insert(i.first);
        for (auto& i : f) p.insert(i.first);
        return p;
    }

    int calcF(const map<int, int>& f, const vector<pair<int, int>>& e, const set<int>& p, int k, int m) {
        int i = 0, o = 0, r = 0;
        
        for (int t : p) {
            while (i < e.size() && e[i].first <= t) {
                o += e[i++].second;
            }
            
            int a = f.count(t) ? f.at(t) : 0;
            r = max(r, a + min(m, o - a));
        }
        
        return r;
    }
};
",1447702098
batak53,batak53,245,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        // vector<int> count(1e5+1, 0);
        map<int,int> count;
        
        map<int,int> mpp;
        for(auto& it: nums){
            mpp[it]++;
            
            // count[max(it-k, 0)] += 1;
            // int nxt = it+k+1;
            // nxt = min((int)1e5, nxt);
            // count[nxt] -= 1;
            count[it-k] += 1;
            count[it+k+1] -= 1;
            
            if(count.find(it) == count.end()){
                count[it] = 0;
            }
        }
        
        int prefSum = 0;
        for(auto& it: count){
            prefSum += it.second;
            it.second = prefSum;
        }
        
        int maxi = 0;
        for(auto& it: count){
            int freq = it.second;
            
            int pres = mpp[it.first];
            freq -= pres;
            
            int canMake = min(numOperations, freq);
            
            int maxFreq = pres + canMake;
            maxi = max(maxi, maxFreq);
        }
        
        return maxi;
    }
};",1447722239
batak53,batak53,245,3626,cpp,"class Solution {
public:
    int smallestNumber(int n, int t) {
        for(int i=n; i<n+t+1; i++){
            int prod = 1;
            
            string s = to_string(i);
            for(auto& it: s){
                prod *= (it - '0');
            }
            
            if(prod % t == 0){
                return i;
            }
        }
        return -1;
    }
};",1447654095
batak53,batak53,245,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        // vector<int> count(1e5+1, 0);
        map<int,int> count;
        
        map<int,int> mpp;
        for(auto& it: nums){
            mpp[it]++;
            
            // count[max(it-k, 0)] += 1;
            // int nxt = it+k+1;
            // nxt = min((int)1e5, nxt);
            // count[nxt] -= 1;
            count[it-k] += 1;
            count[it+k+1] -= 1;
            
            if(count.find(it) == count.end()){
                count[it] = 0;
            }
        }
        
        int prefSum = 0;
        for(auto& it: count){
            prefSum += it.second;
            it.second = prefSum;
        }
        
        int maxi = 0;
        for(auto& it: count){
            int freq = it.second;
            
            int pres = mpp[it.first];
            freq -= pres;
            
            int canMake = min(numOperations, freq);
            
            int maxFreq = pres + canMake;
            maxi = max(maxi, maxFreq);
        }
        
        return maxi;
    }
};",1447723802
Akshat Jain,tic_tac,246,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int n) {
        // sort(nums.begin(),nums.end());
        map<int,int> mp;
        for(int i = 0; i < nums.size(); i++)
            mp[nums[i]]++;
        vector<int> arr,cnt, pre;
        // for(int i = 0; i < nums.size(); i++)
        pre.push_back(0);
        for(auto &[v,c] : mp){
            arr.push_back(v);
            cnt.push_back(c);
            pre.push_back(pre.back()+c);
        }
            pre.push_back(pre.back());
        int mx = 0;
        // set<pair<int,int>,greater<pair<int,int>> s;
        for(int i = 0; i < arr.size(); i++){
            int l = lower_bound(arr.begin(),arr.end(),arr[i]-k)-arr.begin();
            int u = upper_bound(arr.begin(),arr.end(),arr[i]+k)-arr.begin();
            
            mx = max(mx,min(pre[u]-pre[l],cnt[i]+n));
            int u2 = upper_bound(arr.begin(),arr.end(),arr[i]+2*k)-arr.begin();
            // cout << u2 << "" "" << i << endl;
            mx = max(mx,min(pre[u2] - pre[i],n));
        }
        return mx;
    }
};",1447710234
Akshat Jain,tic_tac,246,3626,cpp,"class Solution {
public:
    int smallestNumber(int n, int t) {
        int i = n;
        while(1){
            int v = i;
            int p = 1;
            while(v){
                p*= v%10;
                v/=10;
            }
            if(p%t == 0)
                return i;
            i++;
        }
        return n;
    }
};",1447656808
Akshat Jain,tic_tac,246,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k1, int n1) {
        // sort(nums.begin(),nums.end());
        long long int k = k1, n = n1;
        map<int,int> mp;
        for(int i = 0; i < nums.size(); i++)
            mp[nums[i]]++;
        vector<long long int> arr,cnt, pre;
        // for(int i = 0; i < nums.size(); i++)
        pre.push_back(0);
        for(auto &[v,c] : mp){
            arr.push_back(v);
            cnt.push_back(c);
            pre.push_back(pre.back()+c);
        }
            pre.push_back(pre.back());
        long long int mx = 0;
        // set<pair<int,int>,greater<pair<int,int>> s;
        for(int i = 0; i < arr.size(); i++){
            int l = lower_bound(arr.begin(),arr.end(),arr[i]-k)-arr.begin();
            int u = upper_bound(arr.begin(),arr.end(),arr[i]+k)-arr.begin();
            
            mx = max(mx,min(pre[u]-pre[l],cnt[i]+n));
            int u2 = upper_bound(arr.begin(),arr.end(),arr[i]+2LL*k)-arr.begin();
            // cout << u2 << "" "" << i << endl;
            mx = max(mx,min(pre[u2] - pre[i],n));
        }
        return mx;
    }
};",1447715573
Hieu,hoanghonghieu,247,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        map<int, int> freqs;
        for (int num : nums) {
            freqs[num]++;
        }

        int ans = 1;
        queue<map<int, int>::iterator> q;
        int count = 0;
        map<int, int>::iterator r = freqs.begin();
        for (auto [num, freq] : freqs) {
            while (r != freqs.end() && r->first - num <= k) {
                q.push(r);
                count += r->second;
                r++;
            }
            while (!q.empty() && num - q.front()->first > k) {
                count -= q.front()->second;
                q.pop();
            }
            ans = max(ans, freq + min(count - freq, numOperations));
        }

        count = 0;
        q = queue<map<int, int>::iterator>();
        for (auto it = freqs.begin(); it != freqs.end(); it++) {
            q.push(it);
            count += it->second;
            while (!q.empty() && it->first - q.front()->first > k*2) {
                count -= q.front()->second;
                q.pop();
            }
            ans = max(ans, min(count, numOperations));
        }

        return ans;
    }
};",1447723646
Hieu,hoanghonghieu,247,3626,cpp,"class Solution {
public:
    int smallestNumber(int n, int t) {
        for (int i = n; ; i++) {
            int p = 1;
            for (int j = i; j > 0; j /= 10) {
                p *= j % 10;
            }
            if (p % t == 0) return i;
        }
        return -1;
    }
};",1447662783
Hieu,hoanghonghieu,247,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        map<int, int> freqs;
        for (int num : nums) {
            freqs[num]++;
        }

        int ans = 1;
        queue<map<int, int>::iterator> q;
        int count = 0;
        map<int, int>::iterator r = freqs.begin();
        for (auto [num, freq] : freqs) {
            while (r != freqs.end() && r->first - num <= k) {
                q.push(r);
                count += r->second;
                r++;
            }
            while (!q.empty() && num - q.front()->first > k) {
                count -= q.front()->second;
                q.pop();
            }
            ans = max(ans, freq + min(count - freq, numOperations));
        }

        count = 0;
        q = queue<map<int, int>::iterator>();
        for (auto it = freqs.begin(); it != freqs.end(); it++) {
            q.push(it);
            count += it->second;
            while (!q.empty() && it->first - q.front()->first > k*2) {
                count -= q.front()->second;
                q.pop();
            }
            ans = max(ans, min(count, numOperations));
        }

        return ans;
    }
};",1447724178
bigvision,bigvision,249,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        vector<int> frequency(100001, 0);
        for (auto num : nums) {
            frequency[num]++;
        }

        vector<int> prefixSum(100001, 0);
        int i = 1;
        while (i <= 100000) {
            prefixSum[i] = prefixSum[i - 1] + frequency[i];
            i++;
        }

        int maxFreq = 0;
        int value = 1;
        while (value <= 100000) {
            int left = value - k >= 1 ? value - k : 1;
            int right = value + k <= 100000 ? value + k : 100000;
            int totalInRange = prefixSum[right] - prefixSum[left - 1];
            int canModify = totalInRange - frequency[value];
            maxFreq = max(maxFreq, frequency[value] + min(numOperations, canModify));
            value++;
        }

        return maxFreq;
    }
};",1447699487
bigvision,bigvision,249,3626,cpp,"class Solution {
public:

    int productOfDigits(int num) {
        int product = 1;
        while (num > 0) {
            product *= num % 10;  
            num /= 10;             
        }
        return product;
    }

    

    int smallestNumber(int n, int t) {
        while (true) {
            int prod = productOfDigits(n);
            if (prod % t == 0) {
                return n;  
            }
            n++; 
        }
    }
};
",1447656314
bigvision,bigvision,249,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        int n = nums.size();
        map<int, int> numFrequency;
        vector<pair<int, int>> eventPoints;

        int i = 0;
        while (i < n) {
            numFrequency[nums[i]]++;
            eventPoints.push_back({nums[i] - k, +1});
            eventPoints.push_back({nums[i] + k + 1, -1});
            i++;
        }

        set<int> uniquePoints;
        auto it = eventPoints.begin();
        while (it != eventPoints.end()) {
            uniquePoints.insert(it->first);
            it++;
        }
        auto freqIt = numFrequency.begin();
        while (freqIt != numFrequency.end()) {
            uniquePoints.insert(freqIt->first);
            freqIt++;
        }

        sort(eventPoints.begin(), eventPoints.end());

        int idx = 0;
        int currentOverlap = 0;
        int maxFrequency = 0;
        int currentCount = 0;

        auto ptIt = uniquePoints.begin();
        while (ptIt != uniquePoints.end()) {
            int t = *ptIt;

            while (idx < eventPoints.size() && eventPoints[idx].first <= t) {
                currentOverlap += eventPoints[idx].second;
                idx++;
            }

            currentCount = numFrequency.count(t) ? numFrequency[t] : 0;
            int possibleFreq = currentCount + min(numOperations, currentOverlap - currentCount);
            maxFrequency = max(maxFrequency, possibleFreq);

            ptIt++;
        }

        return maxFrequency;
    }
};",1447707469
Aditya Singh Tomar,adtmr208,250,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        sort(nums.begin(), nums.end());
        map<int,int>freq;
        for(auto i: nums) freq[i]++;
        vector<pair<int,int>>v;

        int ans = 0;
        map<int,pair<int,int>>m;
        for(int i = 0; i <nums.size(); i++){
            if(!m.count(nums[i])) m[nums[i]] = {i,i};
            else m[nums[i]].second = i;
        }
        for(int i = 0; i < nums.size(); i++){
            // ans = max(ans,freq[nums[i]]);
            int s = m[nums[i]].first;
            int e = m[nums[i]].second;
            int start = lower_bound(nums.begin(), nums.begin() + s , nums[i] - k) - nums.begin();
            int end = upper_bound(nums.begin() + e + 1, nums.end(), nums[i] + k) - nums.begin() - 1;
            // cout<<s<<"" ""<<start<<"" ""<<e<<"" ""<<end<<""\n"";
            ans = max(ans, freq[nums[i]] + min(numOperations, s - start + end - e));
        }

        int j = 0;

        for(int i = 0;i <nums.size(); i++){
            while(nums[i] - nums[j] > 2*k) j++;
            ans = max(ans, min(numOperations, i - j + 1));
        }

        return ans;
    }
};",1447715399
Aditya Singh Tomar,adtmr208,250,3626,cpp,"class Solution {
public:
    int smallestNumber(int n, int t) {

        while(true){
            int N = n;
            n++;
            long long sum = 1;
            while(N){
                sum *= N % 10;
                N /= 10;
            }

            if(sum % t == 0) return n- 1;
        }
        return 0;
    }
};",1447655318
Aditya Singh Tomar,adtmr208,250,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        sort(nums.begin(), nums.end());
        map<int,int>freq;
        for(auto i: nums) freq[i]++;
        vector<pair<int,int>>v;

        int ans = 0;
        map<int,pair<int,int>>m;
        for(int i = 0; i <nums.size(); i++){
            if(!m.count(nums[i])) m[nums[i]] = {i,i};
            else m[nums[i]].second = i;
        }
        for(int i = 0; i < nums.size(); i++){
            // ans = max(ans,freq[nums[i]]);
            int s = m[nums[i]].first;
            int e = m[nums[i]].second;
            int start = lower_bound(nums.begin(), nums.begin() + s , nums[i] - k) - nums.begin();
            int end = upper_bound(nums.begin() + e + 1, nums.end(), nums[i] + k) - nums.begin() - 1;
            // cout<<s<<"" ""<<start<<"" ""<<e<<"" ""<<end<<""\n"";
            ans = max(ans, freq[nums[i]] + min(numOperations, s - start + end - e));
        }

        int j = 0;

        for(int i = 0;i <nums.size(); i++){
            while(nums[i] - nums[j] > 2*k) j++;
            ans = max(ans, min(numOperations, i - j + 1));
        }

        return ans;
    }
};",1447716229
Ashutosh,ashu_2211,251,3622,cpp,"class Solution {
public:
    int binarySearch(vector<pair<int,int>> &v, int key ){
        int n = v.size();
        int left =0;
        int right = n -1 ;
        int start = -1;
        // find start 
        while(left <= right ){
            int mid = (right - left)/2 + left;
            if(v[mid].first <= key and v[mid].second >= key ){
                start = mid;
                right = mid - 1;
            }else if(v[mid].second < key ){
                left = mid + 1;
            }else if(v[mid].first > key ){
                right = mid - 1;
            }
        }

        int end = -1;
         left = 0;  right = n - 1;
        // find end
        while(left <= right ){
            int mid = (right - left)/2 + left;
            if(v[mid].first <= key and v[mid].second >= key ){
                end = mid;
                left = mid + 1;
            }else if(v[mid].second < key ){
                left = mid + 1;
            }else if(v[mid].first > key ){
                right = mid - 1;
            }
        }
        // cout<<start << "" "" << end << endl;
        if(start == -1 or end == -1 ) return -1;
        return end - start + 1;
    }
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        int n = nums.size();
        vector<pair<int,int>> v;
        for(int i=0;i<n;i++){
            v.push_back({nums[i] - k , nums[i] + k });
        }
        sort(v.begin() , v.end());
        // for(auto i : v ) cout<<i.first << "" "" << i.second << endl;
        // cout<<binarySearch(v , 4 );
        map<int,int> mp;
        for(auto i : nums ) mp[i]++;
        if(k == 0 ) {
            int ans = 0 ; 
            for(auto i : mp ) ans = max(ans , i.second );
            return ans;
        }
        int ans = 0;
        for(int i=v[0].first;i<=v[n-1].second;i++){
            ans = max(ans , min(numOperations , binarySearch(v , i ) - mp[i]) + mp[i]);
        }
        return ans;
    }
};",1447705046
Ashutosh,ashu_2211,251,3626,cpp,"class Solution {
public:
    int prodDigit(int n){
        int p = 1;
        while(n){
            p = p *(n%10);
            n = n/10;
        }
        return p;
    }
    int smallestNumber(int n, int t) {
        int i=n;
        while(true){
            if(prodDigit(i) % t == 0 ) return i;
            i++;
        }
        return 0;
    }
};",1447655909
Ashutosh,ashu_2211,251,3640,cpp,"class Solution {
public:
    int binarySearch(vector<pair<int,int>> &v, int key ){
        int n = v.size();
        int left =0;
        int right = n -1 ;
        int start = -1;
        // find start 
        while(left <= right ){
            int mid = (right - left)/2 + left;
            if(v[mid].first <= key and v[mid].second >= key ){
                start = mid;
                right = mid - 1;
            }else if(v[mid].second < key ){
                left = mid + 1;
            }else if(v[mid].first > key ){
                right = mid - 1;
            }
        }

        int end = -1;
         left = 0;  right = n - 1;
        // find end
        while(left <= right ){
            int mid = (right - left)/2 + left;
            if(v[mid].first <= key and v[mid].second >= key ){
                end = mid;
                left = mid + 1;
            }else if(v[mid].second < key ){
                left = mid + 1;
            }else if(v[mid].first > key ){
                right = mid - 1;
            }
        }
        if(start == -1 or end == -1 ) return -1;
        return end - start + 1;
    }
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        int n = nums.size();
        vector<pair<int,int>> v;
        for(int i=0;i<n;i++){
            v.push_back({nums[i] - k , nums[i] + k });
        }
        sort(v.begin() , v.end());
        map<int,int> mp;
        for(auto i : nums ) mp[i]++;
        if(k == 0 ) {
            int ans = 0 ; 
            for(auto i : mp ) ans = max(ans , i.second );
            return ans;
        }
        int ans = 0;
        for(auto i : nums){
            ans = max(ans , min(numOperations , binarySearch(v , i ) - mp[i]) + mp[i]);
        }
        for(auto i : v ){
            ans = max(ans , min(numOperations , binarySearch(v , i.first)));
            ans = max(ans , min(numOperations , binarySearch(v , i.second)));
        }
        return ans;
    }
};",1447725130
leoyu0813,leoyu0813,252,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        map <int, int> count;
        unordered_map <int, int> mp;
        int ans = 1;
        for (int x : nums)
        {
            ans = max (ans, ++ mp[x]);
            ++count [x - k];
            --count [x];
            ++count [x + 1];
            --count [x + k + 1];
        }
        if (!numOperations)
            return ans;
        int freq = 0;
        for (auto [key, cnt] : count)
        {
            freq += cnt;
            //cout << key << "" : "" << cnt << "" => "" << freq  << "" : "" << mp [key] +  min (freq,numOperations) << ""\n"";
            ans = max (ans,  mp [key] + min (freq,numOperations ));
            
        }

        return ans;
    }
};",1447706886
leoyu0813,leoyu0813,252,3626,cpp,"class Solution {
public:
    int getProduct (int x)
    {
        int p = 1;
        while (x){
            p *= x % 10;
            x /= 10;
        }
        return p;
    }
    int smallestNumber(int n, int t) {
        while (getProduct (n) % t)
            ++n;
        return n;
    }
};",1447661166
leoyu0813,leoyu0813,252,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
         map <int, int> count;
        unordered_map <int, int> mp;
        int ans = 1;
        for (int x : nums)
        {
            ans = max (ans, ++ mp[x]);
            ++count [x - k];
            --count [x];
            ++count [x + 1];
            --count [x + k + 1];
        }
        if (!numOperations)
            return ans;
        int freq = 0;
        for (auto [key, cnt] : count)
        {
            freq += cnt;
            //cout << key << "" : "" << cnt << "" => "" << freq  << "" : "" << mp [key] +  min (freq,numOperations) << ""\n"";
            ans = max (ans,  mp [key] + min (freq,numOperations ));
            
        }

        return ans;
    }
};",1447708390
Chitraksh Kumar,chitraksh24,253,3622,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        ans = 1
        numscounter = Counter(nums)
        nums.sort()
        for i in range(len(nums)):
            ans = max(ans, numscounter[nums[i]])
            ind = bisect_right(nums, nums[i]+2*k)
            ans = max(ans, min(ind-i,numOperations))
            ind = bisect_left(nums, nums[i]-2*k)
            ans = max(ans, min(i-ind+1,numOperations))
            ind1 = bisect_right(nums, nums[i]+k)
            ind2 = bisect_left(nums, nums[i]-k)
            ans = max(ans, min(ind1-i+i-ind2,numOperations+numscounter[nums[i]]))
        return ans
            
        ",1447699167
Chitraksh Kumar,chitraksh24,253,3626,python3,"class Solution:
    def smallestNumber(self, n: int, t: int) -> int:
        for i in range(n,10**18):
            strn = str(i)
            curr = 1
            for j in range(len(strn)):
                curr *= int(strn[j])
            if curr%t==0:
                return i
        return -1
                
        ",1447656013
Chitraksh Kumar,chitraksh24,253,3640,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        ans = 1
        numscounter = Counter(nums)
        nums.sort()
        for i in range(len(nums)):
            ans = max(ans, numscounter[nums[i]])
            ind = bisect_right(nums, nums[i]+2*k)
            ans = max(ans, min(ind-i,numOperations))
            ind = bisect_left(nums, nums[i]-2*k)
            ans = max(ans, min(i-ind+1,numOperations))
            ind1 = bisect_right(nums, nums[i]+k)
            ind2 = bisect_left(nums, nums[i]-k)
            ans = max(ans, min(ind1-i+i-ind2,numOperations+numscounter[nums[i]]))
        return ans
        ",1447699722
Thanh Bui Minh,thabumi,254,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        sort(nums.begin(), nums.end());
        int n = nums.size();
        int res = 1;
        vector<int> cnt(200005, 0);
        for (auto t : nums) {
            cnt[t]++;
        }
        for (int i = 0; i <= nums.back() + 100000; i++) {
            auto it1 = lower_bound(nums.begin(), nums.end(), i - k);
            auto it2 = upper_bound(nums.begin(), nums.end(), i + k);
            // cout << it2 - nums.begin() << "" "" << it1 - nums.begin() << '\n';
            res = max(res, min(numOperations + cnt[i], (int)(it2 - it1)));
        }
        return res;
    }
};",1447684986
Thanh Bui Minh,thabumi,254,3626,cpp,"class Solution {
public:
    int smallestNumber(int n, int t) {
        int res = n;
        while (true) {
            long long prod = 1;
            int tmp = res;
            while (tmp) {
                prod *= tmp % 10;
                tmp /= 10;
            }
            if (prod % t == 0) {
                return res;
            }
            res++;
        }
        return 0;
    }
};",1447660070
Thanh Bui Minh,thabumi,254,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        sort(nums.begin(), nums.end());
        int n = nums.size();
        int res = 1;
        unordered_map<int, int> cnt;
        for (int t : nums) {
            cnt[t]++;
        }
        for (int i = 0; i < n; i++) {
            auto it1 = lower_bound(nums.begin(), nums.end(), nums[i] - k);
            auto it2 = upper_bound(nums.begin(), nums.end(), nums[i] + k);
            res = max(res, min(numOperations + cnt[nums[i]], (int)(it2 - it1)));
        }
        int inf = 2e9 + 5;
        for (int i = 0; i < n; i++) {
            int it = upper_bound(nums.begin(), nums.end(), nums[i] + min(2 * k, inf - nums[i])) - nums.begin();
            res = max(res, min(numOperations, it - i));
        }
        return res;
    }
};",1447699903
Janming,Janming,256,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int x) {
        int maxi = 0;
        for(int i=0;i<nums.size();++i)maxi=max(maxi,nums[i]);
        vector<int>val(maxi+k+2);
        map<int,int>count;
        for(int i=0;i<nums.size();++i){
            val[max(0,nums[i]-k)]++;
            val[nums[i]+k+1]--;
            count[nums[i]]++;
        }
        int ans = min(x,val[0]);
        for(int i=1;i<val.size();++i){
            val[i]+=val[i-1];
            // cout<<val[i]<<' ';
            ans = max(ans,min(val[i]-count[i],x)+count[i]);
        }
        return ans;
    }
};",1447680141
Janming,Janming,256,3626,cpp,"class Solution {
public:
    int smallestNumber(int n, int t) {
        int x = n;
        while(true){
            int num = x;
            int prod = 1;
            while(num>0){
                prod*=num%10;
                num/=10;
            }
            if(prod%t==0)return x;
            x++;
        }
        return n;
    }
};",1447658149
Janming,Janming,256,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int x) {
        sort(nums.begin(), nums.end());
        vector<vector<int>>val;
        map<int,int>count;
        for(int i=0;i<nums.size();++i){
            val.push_back({max(nums[i]-k,0),1});
            val.push_back({nums[i]+k+1,-1});
            count[nums[i]]++;
        }
        sort(val.begin(), val.end());
        vector<vector<int>>given;
        // given.push_back({0,0}};
        for(int i=0;i<val.size();++i){
            if(i==0 || val[i][0]!=given[given.size()-1][0])given.push_back(val[i]);
            else{
                given[given.size()-1][1]+=val[i][1];
            }
        }
        int ans = INT_MIN;
        for(int i=0;i<nums.size();++i){
            int idx1 = lower_bound(nums.begin(), nums.end(), nums[i]-k) - nums.begin();
            int idx2 = lower_bound(nums.begin(), nums.end(), nums[i]+k) - nums.begin();
            if(idx2==nums.size() || nums[idx2]>nums[i]+k)idx2--;
            ans = max(ans, min(idx2-idx1+1-count[nums[i]],x) + count[nums[i]]);
            // cout<<min(idx2-idx1+1-count[nums[i]],x) + count[nums[i]]<<"" "";
        }
        int c = 0;
        for(int i=0;i<given.size()-1;++i){
            c+=given[i][1];
            ans = max(ans, min(c-count[given[i][0]],x) + count[given[i][0]]);
            // cout<<c<<"" "";
        }
        return ans;
    }
};",1447734173
jam,jam930725,257,3622,java,"class Solution {
    public int maxFrequency(int[] nums, int k, int numOperations) {
        Arrays.sort(nums);
        int len = nums.length, res = 0, sz = 0;
        int[] arr = new int[len];
        int[] cnt = new int[len];
        arr[0] = nums[0];
        for(int n: nums)
            if(arr[sz] != n) {
                cnt[++sz] = 1;
                arr[sz] = n;
            }
            else
                cnt[sz]++;
        sz++;
        int[] prefix = new int[sz];
        prefix[0] = cnt[0];
        for(int i = 1; i < sz; i++)
            prefix[i] = prefix[i-1] + cnt[i];
        // for(int n: prefix)
        //     System.out.println(n);
        for(int i = 0; i < sz; i++) {
            int leftRange = findLeft(sz, arr[i]-k, arr)-1;
            int rightRange = findRight(sz, arr[i]+k, arr);
            int total = prefix[rightRange] - (leftRange == -1 ? 0 : prefix[leftRange]);
            total -= cnt[i];
            res = Math.max(res, cnt[i] + Math.min(total, numOperations));
        }
        int l = 0, r = 0;
        int sum = 0;
        while(r < sz) {
            sum += cnt[r];
            while(arr[r] - arr[l] > (k << 1))
                sum -= cnt[l++];
            res = Math.max(res, Math.min(numOperations, sum));
            r++;
        }
        return res;
    }

    public int findLeft(int sz, int target, int[] arr) {
        // find the index of the first element greater than or equal to target
        int l = 0, r = sz;
        while(l < r) {
             int m = l+r >> 1;
            if(arr[m] >= target)
                r = m;
            else
                l = m+1;
        }
        return l;
    }
    
    public int findRight(int sz, int target, int[] arr) {
        // find the index of the first element greater than target
        int l = 0, r = sz;
        while(l < r) {
             int m = l+r >> 1;
            if(arr[m] > target)
                r = m;
            else
                l = m+1;
        }
        return l-1;
    }
}",1447717306
jam,jam930725,257,3626,java,"class Solution {
    public int smallestNumber(int n, int t) {
        int cnt = 0;
        while(true) {
            int m = n, p = 1;
            while(m > 0) {
                p *= m % 10;
                m /= 10;
            }
            if(p % t == 0)
                return n;
            n++;
        }
    }
}",1447654844
jam,jam930725,257,3640,java,"class Solution {
    public int maxFrequency(int[] nums, int k, int numOperations) {
        Arrays.sort(nums);
        int len = nums.length, res = 0, sz = 0;
        int[] arr = new int[len];
        int[] cnt = new int[len];
        arr[0] = nums[0];
        for(int n: nums)
            if(arr[sz] != n) {
                cnt[++sz] = 1;
                arr[sz] = n;
            }
            else
                cnt[sz]++;
        sz++;
        int[] prefix = new int[sz];
        prefix[0] = cnt[0];
        for(int i = 1; i < sz; i++)
            prefix[i] = prefix[i-1] + cnt[i];
        // for(int n: prefix)
        //     System.out.println(n);
        for(int i = 0; i < sz; i++) {
            int leftRange = findLeft(sz, arr[i]-k, arr)-1;
            int rightRange = findRight(sz, arr[i]+k, arr);
            int total = prefix[rightRange] - (leftRange == -1 ? 0 : prefix[leftRange]);
            total -= cnt[i];
            res = Math.max(res, cnt[i] + Math.min(total, numOperations));
        }
        int l = 0, r = 0;
        int sum = 0;
        while(r < sz) {
            sum += cnt[r];
            while(arr[r] - arr[l] > (k << 1))
                sum -= cnt[l++];
            res = Math.max(res, Math.min(numOperations, sum));
            r++;
        }
        return res;
    }

    public int findLeft(int sz, int target, int[] arr) {
        // find the index of the first element greater than or equal to target
        int l = 0, r = sz;
        while(l < r) {
             int m = l+r >> 1;
            if(arr[m] >= target)
                r = m;
            else
                l = m+1;
        }
        return l;
    }
    
    public int findRight(int sz, int target, int[] arr) {
        // find the index of the first element greater than target
        int l = 0, r = sz;
        while(l < r) {
             int m = l+r >> 1;
            if(arr[m] > target)
                r = m;
            else
                l = m+1;
        }
        return l-1;
    }
}",1447716868
Yashasvi Kapil,y_k2209,260,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        std::map<int, int> delta;
        std::map<int, int> count_fixed;

        for (int num : nums) {
            int l = num - k;
            int r = num + k;
            delta[l] += 1;
            delta[r + 1] -= 1;
            count_fixed[num] += 1;
        }

        std::set<int> x_set;
        for (const auto& p : delta) x_set.insert(p.first);
        for (const auto& p : count_fixed) x_set.insert(p.first);
        std::vector<int> x_list(x_set.begin(), x_set.end());

        int curr_cover = 0;
        int max_freq = 0;

        for (int x : x_list) {
            curr_cover += delta[x];
            int count_fixed_x = count_fixed[x];
            int count_adjusted_x = curr_cover - count_fixed_x;
            int freq_x = count_fixed_x + std::min(count_adjusted_x, numOperations);
            max_freq = std::max(max_freq, freq_x);
        }

        return max_freq;
    }
};
",1447733813
Yashasvi Kapil,y_k2209,260,3626,cpp,"class Solution {
public:
    int product(int n){
        int pro=1;
        while (n>0){
            int digit=n%10;
            pro=pro*digit;
            n=n/10;
            
        }
        return pro;
    }
    int smallestNumber(int n, int t) {
       
        while (product(n)%t!=0 ){
            n++;
        }
        return n;
            
        
        
        
        
    }
};",1447666625
Yashasvi Kapil,y_k2209,260,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        std::map<int, int> delta;
        std::map<int, int> count_fixed;

        for (int num : nums) {
            int l = num - k;
            int r = num + k;
            delta[l] += 1;
            delta[r + 1] -= 1;
            count_fixed[num] += 1;
        }

        std::set<int> x_set;
        for (const auto& p : delta) x_set.insert(p.first);
        for (const auto& p : count_fixed) x_set.insert(p.first);
        std::vector<int> x_list(x_set.begin(), x_set.end());

        int curr_cover = 0;
        int max_freq = 0;

        for (int x : x_list) {
            curr_cover += delta[x];
            int count_fixed_x = count_fixed[x];
            int count_adjusted_x = curr_cover - count_fixed_x;
            int freq_x = count_fixed_x + std::min(count_adjusted_x, numOperations);
            max_freq = std::max(max_freq, freq_x);
        }

        return max_freq;
    }
};
",1447734870
Madireddy Jagadeeswarreddy,jagadeeswarreddymadireddy,261,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int> &a , int k, int o) {
        int n = a.size();
        sort(a.begin() , a.end());
        int ans{0};
        map<int , int> mp;
        for(int &i : a) {
            mp[i] ++;
            ans = max(mp[i] , ans);
        }
        for(int i = 0, j = 0 ; i < n ; i ++) {
            while(j < n && a[j] - a[i] <= 2 * k) {
                j ++;
            }
            int v = a[i] + k;
            ans = max(ans , mp[v] + min(max(0 , j - i - mp[v]) , o));
        }
        reverse(a.begin() , a.end());
        for(int i = 0, j = 0 ; i < n ; i ++) {
            while(j < n && a[i] - a[j] <= 2 * k) {
                j ++;
            }
            int v = a[i] - k;
            ans = max(ans , mp[v] + min(max(0 , j - i - mp[v]) , o));
        } 
        vector<vector<int>> v;
        for(auto &[i , j] : mp) {
            v.push_back({i , j});
        }
        int m = v.size();
        vector<int> s(m) , p(m);
        for(int i = 0, j = 0, pr = 0 ; i < m ; i ++) {
            while(v[i][0] - v[j][0] > k) {
                pr -= v[j ++][1];
            }
            p[i] = pr, pr += v[i][1];
        }
        for(int i = m - 1, j = m - 1, sf = 0 ; i > -1 ; i --) {
            while(v[j][0] - v[i][0] > k) {
                sf -= v[j --][1];
            }
            s[i] = sf, sf += v[i][1];
        }
        for(int i = 0 ; i < m ; i ++) {
            ans = max(ans , v[i][1] + min(p[i] + s[i] , o));
        }
        return ans;
    }
};",1447714132
Madireddy Jagadeeswarreddy,jagadeeswarreddymadireddy,261,3626,cpp,"class Solution {
public:
    int smallestNumber(int n, int t) {
        while(true) {
            int p = 1, v = n;
            while(v) {
                p *= v % 10;
                v /= 10;
            }
            if(p % t == 0) {
                return n;
            }
            n ++;
        }
    }
};",1447717975
Madireddy Jagadeeswarreddy,jagadeeswarreddymadireddy,261,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int> &a , int k, int o) {
        int n = a.size();
        sort(a.begin() , a.end());
        int ans{0};
        map<int , int> mp;
        for(int &i : a) {
            mp[i] ++;
            ans = max(mp[i] , ans);
        }
        for(int i = 0, j = 0 ; i < n ; i ++) {
            while(j < n && a[j] - a[i] <= 2 * k) {
                j ++;
            }
            int v = a[i] + k;
            ans = max(ans , mp[v] + min(max(0 , j - i - mp[v]) , o));
        }
        reverse(a.begin() , a.end());
        for(int i = 0, j = 0 ; i < n ; i ++) {
            while(j < n && a[i] - a[j] <= 2 * k) {
                j ++;
            }
            int v = a[i] - k;
            ans = max(ans , mp[v] + min(max(0 , j - i - mp[v]) , o));
        } 
        vector<vector<int>> v;
        for(auto &[i , j] : mp) {
            v.push_back({i , j});
        }
        int m = v.size();
        vector<int> s(m) , p(m);
        for(int i = 0, j = 0, pr = 0 ; i < m ; i ++) {
            while(v[i][0] - v[j][0] > k) {
                pr -= v[j ++][1];
            }
            p[i] = pr, pr += v[i][1];
        }
        for(int i = m - 1, j = m - 1, sf = 0 ; i > -1 ; i --) {
            while(v[j][0] - v[i][0] > k) {
                sf -= v[j --][1];
            }
            s[i] = sf, sf += v[i][1];
        }
        for(int i = 0 ; i < m ; i ++) {
            ans = max(ans , v[i][1] + min(p[i] + s[i] , o));
        }
        return ans;
    }
};",1447712192
saurav,codercpp00,262,3622,typescript,"function maxFrequency(nums: number[], k: number, numOperations: number): number {
    const maxNum = Math.max(...nums);
    const size = maxNum + k + 2;
    const freq = new Array(size).fill(0);

    nums.forEach(num => {
        freq[num]++;
    });

    const prefixSum = new Array(size).fill(0);
    prefixSum[0] = freq[0];
    for (let i = 1; i < size; i++) {
        prefixSum[i] = prefixSum[i - 1] + freq[i];
    }

    let result = 0;
    for (let x = 0; x < size; x++) {
        if (freq[x] === 0 && numOperations === 0) continue;

        const left = Math.max(0, x - k);
        const right = Math.min(size - 1, x + k);
        const totalInRange = prefixSum[right] - (left > 0 ? prefixSum[left - 1] : 0);
        const canAdjust = totalInRange - freq[x];
        const total = freq[x] + Math.min(numOperations, canAdjust);
        result = Math.max(result, total);
    }

    return result;
}
",1447698181
saurav,codercpp00,262,3626,typescript,"function smallestNumber(n: number, t: number): number {
    let s = n;
    while (true) {
        if (productOfDigits(s) % t === 0) {
            return s;
        }
        s++;
    }

    function productOfDigits(num: number): number {
        let product = 1;
        while (num > 0) {
            const digit = num % 10;
            if (digit === 0) {
                product = 0;
                break;
            }
            product *= digit;
            num = Math.floor(num / 10);
        }
        return product;
    }
}
",1447659165
saurav,codercpp00,262,3640,typescript,"function maxFrequency(nums: number[], k: number, numOperations: number): number {
    const freq: Map<number, number> = new Map();
    const events: [number, number][] = [];
    
    nums.forEach(num => {
        freq.set(num, (freq.get(num) || 0) + 1);
        events.push([num - k, 1]);
        events.push([num + k + 1, -1]);
    });
    
    const points: Set<number> = new Set();
    events.forEach(event => points.add(event[0]));
    freq.forEach((_, num) => points.add(num));
    
    events.sort((a, b) => a[0] - b[0]);
    
    let idx = 0;
    let currentOverlap = 0;
    let maxFreq = 0;
    let actualCount = 0;
    
    Array.from(points).sort((a, b) => a - b).forEach(t => {
        while (idx < events.length && events[idx][0] <= t) {
            currentOverlap += events[idx][1];
            idx++;
        }
        
        actualCount = freq.get(t) || 0;
        const possibleFreq = actualCount + Math.min(numOperations, currentOverlap - actualCount);
        maxFreq = Math.max(maxFreq, possibleFreq);
    });
    
    return maxFreq;
}
",1447726468
jerry5841314,jerry5841314,263,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        auto cmp = [](const vector<int> &v1, const vector<int> &v2){
            return v1[0] < v2[0] || (v1[0] == v2[0] && v1[1] > v2[1]) || (v1[0] == v2[0] && v1[1] == v2[1] && v1[2] > v2[2]);  
        };
        // multiset<vector<int>, decltype(cmp)> diff;
        vector<vector<int>> diff;
        for (int num : nums){
            diff.push_back({num - k, +1, 1});
            diff.push_back({num - 1, -1, -1});
            
            diff.push_back({num, +1, 0});
            diff.push_back({num, -1, 0});
            
            diff.push_back({num + 1, +1, 1});   
            diff.push_back({num + k, -1, -1});
        }
        sort(diff.begin(), diff.end(), cmp);
        // cout << diff.size();
        int cnt = 0;
        int num = 0;
        // int tmp = 0;
        int maxV = 0;
        for (auto v : diff){
            // cnt += d;
            if (v[2] == 0){
                cnt += v[1];
            }
            else if (v[2] == 1){
                if (num < numOperations)
                    cnt++;
                num += 1;
            }
            else if (v[2] == -1){
                if (num <= numOperations)
                    cnt--;
                num -= 1;
            }
            maxV = max(maxV, cnt);
        }
        return maxV;
    }
};",1447726565
jerry5841314,jerry5841314,263,3626,cpp,"class Solution {
public:
    int check(int num, int t){
        int product = 1;
        while (num){
            product *= (num % 10);
            num /= 10;
        }
        return product % t == 0;
    }
    int smallestNumber(int n, int t) {
        if (t == 1)
            return n;
        
        while (!check(n, t))
            n++;
        return n;
    }
};",1447665795
jerry5841314,jerry5841314,263,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        auto cmp = [](const vector<int> &v1, const vector<int> &v2){
            return v1[0] < v2[0] || (v1[0] == v2[0] && v1[1] > v2[1]) || (v1[0] == v2[0] && v1[1] == v2[1] && v1[2] > v2[2]);  
        };
        // multiset<vector<int>, decltype(cmp)> diff;
        vector<vector<int>> diff;
        for (int num : nums){
            diff.push_back({num - k, +1, 1});
            diff.push_back({num - 1, -1, -1});
            
            diff.push_back({num, +1, 0});
            diff.push_back({num, -1, 0});
            
            diff.push_back({num + 1, +1, 1});   
            diff.push_back({num + k, -1, -1});
        }
        sort(diff.begin(), diff.end(), cmp);
        // cout << diff.size();
        int cnt = 0;
        int num = 0;
        // int tmp = 0;
        int maxV = 0;
        for (auto v : diff){
            // cnt += d;
            if (v[2] == 0){
                cnt += v[1];
            }
            else if (v[2] == 1){
                if (num < numOperations)
                    cnt++;
                num += 1;
            }
            else if (v[2] == -1){
                if (num <= numOperations)
                    cnt--;
                num -= 1;
            }
            maxV = max(maxV, cnt);
        }
        return maxV;
    }
};",1447726136
Aniket Saini,Ani_S,265,3622,java,"class Solution {
    public int maxFrequency(int[] nums, int k, int numOperations) {
        Arrays.sort(nums);
        Map<Integer, Integer> freqMap = new HashMap<>();
        
        for(int num : nums)
            freqMap.put(num, freqMap.getOrDefault(num, 0) + 1);
        
        int ans = 0;
        
        for(int i = 0; i < nums.length; i++) {
            // System.out.println(i + "" "" + nums[i]);
            
            int l = binarySearchSmaller(nums, 0, i - 1, nums[i] - k);
            int r = binarySearchGreater(nums, i + 1, nums.length - 1, nums[i] + k);
            int countChangeSome = freqMap.get(nums[i]) + Math.min(r - l + 1 - freqMap.get(nums[i]), numOperations);
            
            int lCh = binarySearchSmaller(nums, 0, i - 1, nums[i] - (2 * k));
            int countChangeAll = Math.min(i - lCh + 1, numOperations);
        
            
            ans = Math.max(ans, Math.max(countChangeSome, countChangeAll));
        }
        
        return ans;
    }
    
    private int binarySearchGreater(int nums[], int low, int high, int max) {
        while(low <= high) {
            int mid = low + (high - low) / 2;
            
            if(nums[mid] > max) {
                high = mid - 1;
            } else {
                low = mid + 1;
            }
        }
        
        return high;
    }
    
    private int binarySearchSmaller(int nums[], int low, int high, int min) {
        while(low <= high) {
            int mid = low + (high - low) / 2;
            
            if(nums[mid] < min) {
                low = mid + 1;
            } else {
                high = mid - 1;
            }
        }
        
        return low;
    }
}",1447724822
Aniket Saini,Ani_S,265,3626,java,"class Solution {
    public int smallestNumber(int n, int t) {
        for(int i = n; i < n + 10; i++) {
            int num = i;
            int prod = 1;
            
            while(num > 0) {
                prod = prod * (num % 10);
                num = num / 10;
            }
            
            if(prod % t == 0)
                return i;
        }
        
        return -1;
    }
}",1447678912
Aniket Saini,Ani_S,265,3640,java,"class Solution {
    public int maxFrequency(int[] nums, int k, int numOperations) {
        Arrays.sort(nums);
        Map<Integer, Integer> freqMap = new HashMap<>();
        
        for(int num : nums)
            freqMap.put(num, freqMap.getOrDefault(num, 0) + 1);
        
        int ans = 0;
        
        for(int i = 0; i < nums.length; i++) {
            // System.out.println(i + "" "" + nums[i]);
            
            int l = binarySearchSmaller(nums, 0, i - 1, nums[i] - k);
            int r = binarySearchGreater(nums, i + 1, nums.length - 1, nums[i] + k);
            int countChangeSome = freqMap.get(nums[i]) + Math.min(r - l + 1 - freqMap.get(nums[i]), numOperations);
            
            int lCh = binarySearchSmaller(nums, 0, i - 1, nums[i] - (2 * k));
            int countChangeAll = Math.min(i - lCh + 1, numOperations);
        
            
            ans = Math.max(ans, Math.max(countChangeSome, countChangeAll));
        }
        
        return ans;
    }
    
    private int binarySearchGreater(int nums[], int low, int high, int max) {
        while(low <= high) {
            int mid = low + (high - low) / 2;
            
            if(nums[mid] > max) {
                high = mid - 1;
            } else {
                low = mid + 1;
            }
        }
        
        return high;
    }
    
    private int binarySearchSmaller(int nums[], int low, int high, int min) {
        while(low <= high) {
            int mid = low + (high - low) / 2;
            
            if(nums[mid] < min) {
                low = mid + 1;
            } else {
                high = mid - 1;
            }
        }
        
        return low;
    }
}",1447726719
a7174812,a7174812,266,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        int ans = 0;
        sort(nums.begin(), nums.end());
        for(int l = 0, r = 0; r < nums.size(); ++r){
            while(nums[r] - nums[l] > k * 2)
                ++l;
            ans = max(ans, min(r-l+1, numOperations));
        }
        for(int l = 0, r = 0, i = 0; i < nums.size(); ){
            int j = i;
            while(j < nums.size() && nums[i] == nums[j])
                ++j;
            while(r < nums.size() && nums[r] - nums[i] <= k)
                ++r;
            while(nums[i] - nums[l] > k)
                ++l;
            // printf(""%d %d %d %d\n"",l,i,j,r);
            // printf(""%d %d\n"", r-l, j-i+numOperations);
            ans = max(ans, min(r-l, j-i+numOperations));
            i = j;
        }
        return ans;
    }
};",1447709687
a7174812,a7174812,266,3626,cpp,"class Solution {
public:
    int smallestNumber(int n, int t) {
        for(int i = n; ; ++i){
            if(check(i, t))
                return i;
        }
        return -1;
    }
    bool check(int x, int t){
        int p = 1;
        while(x){
            p = (p * (x % 10));
            x /= 10;
        }
        return p % t == 0;
    }
};",1447657551
a7174812,a7174812,266,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        int ans = 0;
        sort(nums.begin(), nums.end());
        for(int l = 0, r = 0; r < nums.size(); ++r){
            while(nums[r] - nums[l] > k * 2)
                ++l;
            ans = max(ans, min(r-l+1, numOperations));
        }
        for(int l = 0, r = 0, i = 0; i < nums.size(); ){
            int j = i;
            while(j < nums.size() && nums[i] == nums[j])
                ++j;
            while(r < nums.size() && nums[r] - nums[i] <= k)
                ++r;
            while(nums[i] - nums[l] > k)
                ++l;
            // printf(""%d %d %d %d\n"",l,i,j,r);
            // printf(""%d %d\n"", r-l, j-i+numOperations);
            ans = max(ans, min(r-l, j-i+numOperations));
            i = j;
        }
        return ans;
    }
};",1447710014
iamcodebug,iamcodebug,268,3622,java,"class Solution {
	
	public int maxFrequency(int[] nums, int k, int numOperations) {
        
		int n = nums.length;
		
		return getPossibleMax(n, nums, numOperations, k);

    }
	
    public  int getPossibleMax(int N, int[] arr, int K, int X) {
    	
        HashSet<Integer> set = new HashSet<>();
        HashSet<Integer> newRangebe = new HashSet<>();
        
        HashMap<Integer, Integer> frq = new HashMap<>();
        
        for (int a : arr) {
        	frq.put(a, frq.getOrDefault(a, 0) + 1);
        }



        for (int ele : arr) {
        	set.add(ele);
        	newRangebe.add(ele + X);
        }

        set.addAll(newRangebe); 

        int[] sortedArr = Arrays.copyOf(arr, arr.length);
        
        Arrays.sort(sortedArr); 

        int ans = 1;
        for (int num : set) {
        	
            int upper = upperBound(sortedArr, num + X);
            int lower = lowerBound(sortedArr, num - X);
            
            int operations = Math.min(upper - lower - frq.getOrDefault(num, 0), K);
            
            ans = Math.max(ans, operations + frq.getOrDefault(num, 0));
        }

        return ans;
    }

    private  int upperBound(int[] arr, int target) {
        int low = 0, high = arr.length;

        while (low < high) {
            int mid = low + (high - low) / 2;
            if (arr[mid] <= target) {
                low = mid + 1;
            } else {
                high = mid;
            }
        }

        return low;
    }

    private  int lowerBound(int[] arr, int target) {
        int low = 0, high = arr.length;

        while (low < high) {
            int mid = low + (high - low) / 2;
            if (arr[mid] < target) {
                low = mid + 1;
            } else {
                high = mid;
            }
        }

        return low;
    }
}",1447723854
iamcodebug,iamcodebug,268,3626,java,"class Solution {
	public int smallestNumber(int n, int t) {
        
		while(true){
			
			int x = n;
			int prod = 1;
			
			while(x!=0){
				prod = prod * (x%10);
				x/=10;
			}
			
			if(prod%t == 0)
				return n;
			
			n++;
			
		}

    }	
}",1447706852
iamcodebug,iamcodebug,268,3640,java,"class Solution {
	
	public int maxFrequency(int[] nums, int k, int numOperations) {
        
		int n = nums.length;
		
		return getPossibleMax(n, nums, numOperations, k);

    }
	
    public  int getPossibleMax(int N, int[] arr, int K, int X) {
    	
        HashSet<Integer> set = new HashSet<>();
        HashSet<Integer> newRangebe = new HashSet<>();
        
        HashMap<Integer, Integer> frq = new HashMap<>();
        
        for (int a : arr) {
        	frq.put(a, frq.getOrDefault(a, 0) + 1);
        }



        for (int ele : arr) {
        	set.add(ele);
        	newRangebe.add(ele + X);
        }

        set.addAll(newRangebe); 

        int[] sortedArr = Arrays.copyOf(arr, arr.length);
        
        Arrays.sort(sortedArr); 

        int ans = 1;
        for (int num : set) {
        	
            int upper = upperBound(sortedArr, num + X);
            int lower = lowerBound(sortedArr, num - X);
            
            int operations = Math.min(upper - lower - frq.getOrDefault(num, 0), K);
            
            ans = Math.max(ans, operations + frq.getOrDefault(num, 0));
        }

        return ans;
    }

    private  int upperBound(int[] arr, int target) {
        int low = 0, high = arr.length;

        while (low < high) {
            int mid = low + (high - low) / 2;
            if (arr[mid] <= target) {
                low = mid + 1;
            } else {
                high = mid;
            }
        }

        return low;
    }

    private  int lowerBound(int[] arr, int target) {
        int low = 0, high = arr.length;

        while (low < high) {
            int mid = low + (high - low) / 2;
            if (arr[mid] < target) {
                low = mid + 1;
            } else {
                high = mid;
            }
        }

        return low;
    }
}",1447727137
seryp,seryp,269,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int c) {
        sort(nums.begin(),nums.end());
        vector<int> next(nums.size(),0);
        vector<int> pre(nums.size(),0);        
        int f = INT_MIN;
        int px = 0, p = 0;
        int i = 0;
        int eq = 0;
        int ans = 0;
        while(i < nums.size()){
            while(p < nums.size() && nums[p] - nums[i] <= k){
                p++;
            }
            while(px < nums.size() && nums[px] - nums[i] <= 2*k){
                px++;
            }
            next[i] = p - 1;
            ans = max(ans,min(c,px - i));
            i++;
        }
        p = i = (int)nums.size() - 1;
        while(i >=0){
            while(p >=0 && nums[i] - nums[p] <= k){
                p--;
            }
            pre[i] = p + 1;
            i--;
        }
        i = 0;
        while(i < nums.size()){
            int j = i;
            while(j < nums.size() && nums[j] == nums[i]){
                j++;
            }
            j--;
            int t = i - pre[i];
            t += next[j] - j;
            ans = max(ans, min(t,c) + (j - i + 1));
            i = j + 1;
        }
        return ans;
    }
};",1447726780
seryp,seryp,269,3626,cpp,"class Solution {
public:
    bool ok(int x,int t){
        long long res = 1;
        while(x){
            res *= x % 10;
            x/=10;
        }
        return res % t == 0;
    }
    int smallestNumber(int n, int t) {
        int i = n;
        while(!ok(i,t)){
            i++;
        }
        return i;
    }
};",1447655680
seryp,seryp,269,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int c) {
        sort(nums.begin(),nums.end());
        vector<int> next(nums.size(),0);
        vector<int> pre(nums.size(),0);        
        int f = INT_MIN;
        int px = 0, p = 0;
        int i = 0;
        int eq = 0;
        int ans = 0;
        while(i < nums.size()){
            while(p < nums.size() && nums[p] - nums[i] <= k){
                p++;
            }
            while(px < nums.size() && nums[px] - nums[i] <= 2*k){
                px++;
            }
            next[i] = p - 1;
            ans = max(ans,min(c,px - i));
            i++;
        }
        p = i = (int)nums.size() - 1;
        while(i >=0){
            while(p >=0 && nums[i] - nums[p] <= k){
                p--;
            }
            pre[i] = p + 1;
            i--;
        }
        i = 0;
        while(i < nums.size()){
            int j = i;
            while(j < nums.size() && nums[j] == nums[i]){
                j++;
            }
            j--;
            int t = i - pre[i];
            t += next[j] - j;
            ans = max(ans, min(t,c) + (j - i + 1));
            i = j + 1;
        }
        return ans;
    }
};",1447727249
Adhithya sena reddy,Adhithyasenareddy,271,3622,java,"class Solution {
    public int maxFrequency(int[] nums, int k, int numOperations) {
        int max = Arrays.stream(nums).max().orElse(0);
        int s = max + k + 2;
        
        int[] freq = new int[s];
        
        for (int num : nums) {
            freq[num]++;
        }
        
        int[] pre = new int[s];
        pre[0] = freq[0];
        for (int i = 1; i < s; i++) {
            pre[i] = pre[i - 1] + freq[i];
        }
        
        int result = 0;
        
        for (int i = 0; i < s; i++) {
            if (freq[i] == 0 && numOperations == 0) {
                continue;
            }
            
            int l = Math.max(0, i - k);
            int r = Math.min(s - 1, i + k);
            
            int total = pre[r] - (l > 0 ? pre[l - 1] : 0);
            int canA = total - freq[i];
            int t = freq[i] + Math.min(numOperations, canA);
            result = Math.max(result, t);
        }
        
        return result;
    }
}",1447719234
Adhithya sena reddy,Adhithyasenareddy,271,3626,java,"class Solution {
    
    private int digitProduct(int num) {
        int product = 1;
        while (num > 0) {
            int digit = num % 10;
            product *= digit;
            num /= 10;
        }
        return product;
    }
    
    public int smallestNumber(int n, int t) {
        int current = n;
        
        while (true) {
            int product = digitProduct(current);
            
            if (product % t == 0) {
                return current;
            }
            
            current++; 
        }
    

    }
}",1447663940
Adhithya sena reddy,Adhithyasenareddy,271,3640,java,"import java.util.*;

class Solution {
    public int maxFrequency(int[] nums, int k, int ops) {
        int n = nums.length;
        Map<Integer, Integer> freq = new HashMap<>();
        List<int[]> evnt = new ArrayList<>();
        
        for (int num : nums) {
            freq.put(num, freq.getOrDefault(num, 0) + 1);
            evnt.add(new int[]{num - k, 1});
            evnt.add(new int[]{num + k + 1, -1});
        }
        
        Set<Integer> pnts = new HashSet<>(freq.keySet());
        for (int[] e : evnt) {
            pnts.add(e[0]);
        }

        evnt.sort(Comparator.comparingInt(a -> a[0]));
        
        int idx = 0, ovlp = 0, maxF = 0, cntT = 0;
        
        for (int t : new TreeSet<>(pnts)) {
            while (idx < evnt.size() && evnt.get(idx)[0] <= t) {
                ovlp += evnt.get(idx)[1];
                idx++;
            }
            
            cntT = freq.getOrDefault(t, 0);
            int posF = cntT + Math.min(ops, ovlp - cntT);
            maxF = Math.max(maxF, posF);
        }
        
        return maxF;
    }
}
",1447735942
kiu2024fallTevdorNadareishvili,kiu2024fallTevdorNadareishvili,272,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        vector<int> f(2e5 + 10);
        for (int x : nums){
            f[x]++;
        }
        int ans = 0;
        vector<int> preff(2e5 + 10), suff(2e5 + 10);
        for (int i = 1e5; i >= 1; i--) suff[i] = suff[i + 1] + f[i]; 
        for (int i = 1; i <= 1e5; i++) preff[i] = preff[i - 1] + f[i];
        for (int i = -k + 1; i <= 2e5; i++){
            int res = 0;
            if (i >= 1 && i <= 1e5) res = f[i];
            int addbottom = 0, addtop = 0;
            if (i >= 1) addbottom = preff[i - 1] - preff[max(0, i - k - 1)];
            if (i + 1 >= 1) addtop = suff[i + 1] - suff[min((int)2e5, i + k + 1)];
            int add = min(addbottom + addtop, numOperations);
            ans = max(ans, add + res);
        }
        return ans;
    }
};",1447685516
kiu2024fallTevdorNadareishvili,kiu2024fallTevdorNadareishvili,272,3626,cpp,"class Solution {
public:
    int smallestNumber(int n, int t) {
        while (true)
        {
            int n1 = n, prod = 1;
            while (n1 != 0){
                prod *= n1 % 10;
                n1 /= 10;
            }
            if (prod % t == 0) return n;
            n++;
        }
    }
};",1447657615
kiu2024fallTevdorNadareishvili,kiu2024fallTevdorNadareishvili,272,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        sort (nums.begin(), nums.end());
        int n = (int)nums.size();
        map<int, int> f;
        for (int x : nums) f[x]++;
        int ans = 0;
        auto find_right = [&] (int i, int diff) -> int
        {
            int l = i, r = n - 1, res = i;
            while (l <= r){
                int mid = (l + r) >> 1;
                if ((nums[mid] - nums[i]) <= diff){
                    res = mid;
                    l = mid + 1;
                }
                else r = mid - 1;
            }
            return res;
        };
        auto find_left = [&] (int i, int diff) -> int
        {
            int l = 0, r = i, res = i;
            while (l <= r){
                int mid = (l + r) >> 1;
                if ((nums[i] - nums[mid]) <= diff){
                    res = mid;
                    r = mid - 1;
                }
                else l = mid + 1;
            }
            return res;
        };
        for (int i = 0; i < n; i++){
            int res = find_right(i, k * 2);
            int can = min(numOperations, res - i + 1);
            ans = max(ans, can);
        }
        for (int i = 0; i < n; i++){
            int cur = f[nums[i]];
            int resright = find_right(i, k);
            int addright = resright - i + 1;
            int resleft = find_left(i, k);
            int addleft = i - resleft + 1;
            int op_needed = resright - resleft + 1 - f[nums[i]];
            int add = min(numOperations, op_needed);
            ans = max(ans, cur + add);
        }
        return ans;
    }
};",1447736579
Eduard Marin,m-eduard,273,3622,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        nums.sort()
        
        # try for each possible number
        left = min(nums) - k
        right = max(nums) + k
        cnt = Counter(nums)

        res = 0

        for i in range(left, right + 1):
            l = i - k
            r = i + k

            rr = bisect.bisect_right(nums, r)
            ll = bisect.bisect_left(nums, l)

            res = max(res, min(rr - ll - cnt[i], numOperations) + cnt[i])

        return res
            ",1447676821
Eduard Marin,m-eduard,273,3626,python3,"class Solution:
    def smallestNumber(self, n: int, t: int) -> int:
        while True:
            digits = [int(x) for x in str(n)]
            prod = 1

            for d in digits:
                prod = prod * d

            if prod % t == 0:
                return n
            n += 1
        return -1",1447653699
Eduard Marin,m-eduard,273,3640,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        nums.sort()

        right = 0
        res, n = 0, len(nums)
        cnt = Counter()

        # find the longest window respecting the criteria
        for i in range(n):            
            while right < n and nums[i] + k >= nums[right] - k:
                cnt[nums[right]] += 1                
                right += 1

            res = max(res, min(right - i, numOperations))
            cnt[nums[i]] -= 1

        right = 0
        mid = 0
        cnt = Counter()

        # find the longest window respecting the criteria
        for i in range(n):         
            while mid < n and nums[mid] - nums[i] <= k:
                while right < n and nums[right] - nums[mid] <= k:
                    cnt[nums[right]] += 1
                    right += 1

                res = max(res, min(right - i - cnt[nums[mid]], numOperations) + cnt[nums[mid]])
                mid += 1

            cnt[nums[i]] -= 1

        return res",1447719801
Ander Liu,NDR0216,274,3622,cpp,"#include <bits/stdc++.h>
using namespace std;

const int MOD = 1e9 + 7;

template <typename T> void CLOG(T x) { // CLOG(): clog wrapper
    clog << x;
}
template <typename T> void CLOG(vector<T> v);
template <typename T1, typename T2> void CLOG(map<T1, T2> m);
template <typename T1, typename T2> void CLOG(unordered_map<T1, T2> m);
template <typename T1, typename T2> void CLOG(pair<T1, T2> p);
void CLOG_MAP(auto m);
template <typename T1, typename T2> void CLOG(map<T1, T2> m) { CLOG_MAP(m); }
template <typename T1, typename T2> void CLOG(unordered_map<T1, T2> m) {
    CLOG_MAP(m);
}
template <typename T1, typename T2> void CLOG(pair<T1, T2> p) {
    clog << '(';
    CLOG(p.first);
    clog << "", "";
    CLOG(p.second);
    clog << ')';
}
template <typename T> void CLOG(vector<T> v) {
    clog << '[';
    for (int i = 0; i < v.size(); i++) {
        if (i != 0) {
            clog << "", "";
        }
        CLOG(v[i]);
    }
    clog << ']';
}
void CLOG_MAP(auto m) { // CLOG() for map & unordered_map
    clog << '{';
    for (auto it = m.begin(); it != m.end(); ++it) {
        if (it != m.begin()) {
            clog << "", "";
        }
        CLOG(it->first);
        clog << "": "";
        CLOG(it->second);
    }
    clog << '}';
}
void PRINT(auto x) {
#ifndef ONLINE_JUDGE
    clog.rdbuf(cout.rdbuf());
#endif
    CLOG(x);
    clog << endl;
}
void PRINT(auto x, auto... args) { // python-like print
#ifndef ONLINE_JUDGE
    clog.rdbuf(cout.rdbuf());
#endif
    CLOG(x);
    clog << "", "";
    PRINT(args...);
}
void PRINT_ARR(auto* arr, size_t n) { // python-like print for array
#ifndef ONLINE_JUDGE
    clog.rdbuf(cout.rdbuf());
#endif
    clog << '[';
    for (int i = 0; i < n; i++) {
        if (i != 0) {
            clog << "", "";
        }
        CLOG(arr[i]);
    }
    clog << ']' << endl;
}

template <> struct std::hash<pair<int, int>> {
    size_t operator()(const pair<int, int>& p) const {
        // copy from boost::hash_combine
        size_t x = hash<int>{}(p.first) + 0x9e3779b9 + hash<int>{}(p.second);
        const size_t m = 0xe9846af9b1a615d;
        x ^= x >> 32;
        x *= m;
        x ^= x >> 32;
        x *= m;
        x ^= x >> 28;
        return x;
    }
};

struct TrieNode {
    unordered_map<char, TrieNode*> children;
    bool isWord = false;
};

class Trie {
private:
    TrieNode* root;

public:
    Trie() { root = new TrieNode(); }

    void insert(string word) {
        TrieNode* p = root;

        for (int i = 0; i < word.size(); i++) {
            unordered_map<char, TrieNode*>::iterator iter =
                p->children.find(word[i]);

            if (iter == p->children.end()) {
                p->children[word[i]] = new TrieNode();
            }

            p = p->children[word[i]];
        }

        p->isWord = true;
    }

    bool search(string word) {
        TrieNode* p = root;

        for (int i = 0; i < word.size(); i++) {
            if (p->children.find(word[i]) == p->children.end()) {
                return false;
            }

            p = p->children[word[i]];
        }

        return p->isWord;
    }

    bool startsWith(string prefix) {
        TrieNode* p = root;

        for (int i = 0; i < prefix.size(); i++) {
            if (p->children.find(prefix[i]) == p->children.end()) {
                return false;
            }

            p = p->children[prefix[i]];
        }

        return true;
    }
};

class UnionFind {
private:
    int *root, *rank;

public:
    int num_root;

    UnionFind(int n) {
        root = new int[n]; // root array
        rank = new int[n]();
        num_root = n;

        for (int i = 0; i < n; i++) {
            root[i] = i;
        }
    }

    int find(int x) {
        if (x != root[x]) { // x is not the root node
            root[x] = find(root[x]);
        }

        return root[x];
    }

    void unionSet(int x, int y) {
        int rootX = find(x);
        int rootY = find(y);

        if (rootX != rootY) {
            num_root--;

            if (rank[rootX] > rank[rootY]) {
                root[rootY] = rootX;
            } else if (rank[rootX] < rank[rootY]) {
                root[rootX] = rootY;
            } else {
                root[rootY] = rootX;
                rank[rootX] += 1;
            }
        }
    }
};

bool topo_DFS(int v, vector<bool>* visited, vector<bool>* curr_visited,
              vector<int>* order, vector<int>* graph) {
    (*visited)[v] = true;
    (*curr_visited)[v] = true;

    for (int i = 0; i < graph[v].size(); i++) {
        int u = graph[v][i];

        if ((*curr_visited)[u]) {
            return false;
        }

        if (!(*visited)[u]) {
            if (!topo_DFS(u, visited, curr_visited, order, graph)) {
                return false;
            }
        }
    }

    (*curr_visited)[v] = false;

    order->push_back(v);

    return true;
}

vector<int> topo(int n, vector<int>* graph) {
    vector<bool> visited(n);
    vector<bool> curr_visited(n);
    vector<int> order;

    for (int i = 0; i < n; i++) {
        if (!visited[i]) {
            if (!topo_DFS(i, &visited, &curr_visited, &order, graph)) {
                return {};
            }
        }
    }

    return order;
}

// the two children of idx are heaps, idx isn't
template <typename Iter> void heapify(Iter begin, Iter end, int idx) {
    int len = end - begin;
    int left = 2 * idx + 1;
    int right = 2 * idx + 2;

    int max_idx = idx;
    if ((left < len) && *(begin + left) > *(begin + max_idx)) {
        max_idx = left;
    }
    if ((right < len) && *(begin + right) > *(begin + max_idx)) {
        max_idx = right;
    }

    if (max_idx != idx) {
        swap(*(begin + max_idx), *(begin + idx));
        heapify(begin, end, max_idx);
    }
}

template <typename Iter> void heapsort(Iter begin, Iter end) {
    int len = end - begin;
    for (int i = len / 2 - 1; i >= 0; i--) {
        heapify(begin, end, i);
    }

    while (begin != end) {
        --end;
        swap(*begin, *end);
        heapify(begin, end, 0);
    }
}

template <typename Iter> void mergesort(Iter begin, Iter end) {
    int len = end - begin;
    if (len <= 1) { // 1 element
        return;
    }

    Iter mid = begin + len / 2;
    mergesort(begin, mid); // [begin, mid-1]
    mergesort(mid, end);   // [mid, end)

    // merge
    Iter it1 = begin;
    Iter it2 = mid;
    typename Iter::value_type* copy = new Iter::value_type[len];
    for (int i = 0; i < len; i++) {
        if (it1 != mid && (it2 == end || *it1 < *it2)) {
            copy[i] = *it1;
            ++it1;
        } else {
            copy[i] = *it2;
            ++it2;
        }
    }
    swap_ranges(begin, end, copy);
}

template <typename Iter> void quicksort(Iter begin, Iter end) {
    int len = end - begin;
    if (len <= 1) { // 1 element
        return;
    }

    // partition
    Iter pivot = begin; // the idx which pivot will be
    for (Iter it = begin; it != end - 1; ++it) {
        if (*it < *(end - 1)) {
            swap(*pivot, *it);
            ++pivot;
        }
    }
    swap(*pivot, *(end - 1));

    quicksort(begin, pivot);   // [begin, pivot-1]
    quicksort(pivot + 1, end); // [mid, end)
}

bool* SieveOfEratosthenes(int n) { // find prime[2:n-1]
    bool* prime = new bool[n];
    fill_n(prime, n, true);

    for (int i = 2; i < sqrt(n); i++) {
        if (prime[i]) {
            for (int j = i * i; j < n; j += i) {
                prime[j] = false;
            }
        }
    }
    return prime;
}

// int main() { return 0; }

class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        map<int, int> interval;
        map<int, int> freq;

        for (int i = 0; i < nums.size(); i++) {
            interval[nums[i] - k]++;
            freq[nums[i]]++;
            interval[nums[i]] = interval[nums[i]];
            interval[nums[i] + k + 1]--;
        }

        // vector<pair<int, int> v)(map.size());

        // int idx = 0;
        // for (auto it = freq.begin(); it != freq.end(); ++it) {
        //     v[idx] = {it->first, it->second};
        //     idx++;
        // }

        // int max_f = 0;

        // int

        //     int left = 0;
        // for (int right = 0; right < v.size(); right++) {
        //     while () {
        //     }
        // }

        int last_v = interval.begin()->second;
        int max_f = freq[interval.begin()->first] + min(last_v - freq[interval.begin()->first], numOperations);
        
        for (auto it = ++interval.begin(); it != interval.end(); ++it) {
            it->second += last_v;
            last_v = it->second;



            int temp =
                freq[it->first] + min(last_v - freq[it->first], numOperations);

            max_f = max(max_f, temp);

            // PRINT(it->first, last_v, temp);
        }

        // PRINT(interval);

        // for (auto it = freq.begin(); it != freq.end(); ++it) {

        // }

        return max_f;
    }
};",1447719807
Ander Liu,NDR0216,274,3626,cpp,"class Solution {
public:
    int smallestNumber(int n, int t) {
        while (true) {
            if (n < 10) {
                if (n % t == 0) {
                    return n;
                }
            } else if (n < 100) {
                if (((n / 10) * (n % 10)) % t == 0) {
                    return n;
                }
            } else {
                if (((n / 100) * (n % 100 / 10)* (n % 10)) % t == 0) {
                    return n;
                }
            }

            n++;
        }
    }
};",1447656841
Ander Liu,NDR0216,274,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        map<int, int> interval;
        map<int, int> freq;

        for (int i = 0; i < nums.size(); i++) {
            interval[nums[i] - k]++;
            freq[nums[i]]++;
            interval[nums[i]] = interval[nums[i]];
            interval[nums[i] + k + 1]--;
        }

        // vector<pair<int, int> v)(map.size());

        // int idx = 0;
        // for (auto it = freq.begin(); it != freq.end(); ++it) {
        //     v[idx] = {it->first, it->second};
        //     idx++;
        // }

        // int max_f = 0;

        // int

        //     int left = 0;
        // for (int right = 0; right < v.size(); right++) {
        //     while () {
        //     }
        // }

        int last_v = interval.begin()->second;
        int max_f = freq[interval.begin()->first] + min(last_v - freq[interval.begin()->first], numOperations);
        
        for (auto it = ++interval.begin(); it != interval.end(); ++it) {
            it->second += last_v;
            last_v = it->second;

            // if (last_v - freq[it->first] <= numOperations) {
            //     max_f = max(max_f, last_v);
            // }

            int temp =
                freq[it->first] + min(last_v - freq[it->first], numOperations);

            max_f = max(max_f, temp);

            // PRINT(it->first, last_v, temp);
        }

        // PRINT(interval);

        // for (auto it = freq.begin(); it != freq.end(); ++it) {

        // }

        return max_f;
    }
};",1447719239
tranphuc8a,tranphuc8a,275,3622,cpp,"
class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        int n = nums.size();
        sort(nums.begin(), nums.end());

        int res = 1;

        int lft = 0, rgt = 0;
        for (int i = 0; i < n; i++){
        	int j = i + 1;
        	while (j < n && nums[j] == nums[i]) j++;
        	while (nums[i] - nums[lft] > k) lft++;
        	rgt = max(rgt, j);
        	while (rgt < n && nums[rgt] - nums[i] <= k) rgt++;
        	// cout << i << "","" << lft << "","" << rgt << endl;
        	res = max(res, min(rgt - lft, j - i + numOperations));
        }

        for (int i = 0, e = 0; i < n; i++){
        	while (e < n && nums[e] - nums[i] <= 2*k) e++;
        	res = max(res, min(numOperations, e - i));
        }

        return res;
    }
};",1447711311
tranphuc8a,tranphuc8a,275,3626,cpp,"class Solution {
public:

	bool check(int n, int t){
		long long res = 1;
		while (n){
			res *= (n % 10);
			n /= 10;
		}
		return res % t == 0;
	}

    int smallestNumber(int n, int t) {
        while (1){
        	if (check(n, t)) return n;
        	n++;
        }
    }
};
",1447657895
tranphuc8a,tranphuc8a,275,3640,cpp,"
class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        int n = nums.size();
        sort(nums.begin(), nums.end());

        int res = 1;

        int lft = 0, rgt = 0;
        for (int i = 0; i < n; i++){
        	int j = i + 1;
        	while (j < n && nums[j] == nums[i]) j++;
        	while (nums[i] - nums[lft] > k) lft++;
        	rgt = max(rgt, j);
        	while (rgt < n && nums[rgt] - nums[i] <= k) rgt++;
        	// cout << i << "","" << lft << "","" << rgt << endl;
        	res = max(res, min(rgt - lft, j - i + numOperations));
        }

        for (int i = 0, e = 0; i < n; i++){
        	while (e < n && nums[e] - nums[i] <= 2*k) e++;
        	res = max(res, min(numOperations, e - i));
        }

        return res;
    }
};",1447711567
RAJ ROY,RkRoy,276,3622,java,"class Solution {
    
    static Debug dbg = new Debug();
    static class Debug {
        public static boolean LOCAL = true;
        public static boolean getLocal() {
            try {
                return System.getProperty(""LOCAL"") == null;
            }catch(SecurityException e) {
                return false;
            }
        }
        public static <T> String ts(T t) {
            if(t==null) {
                return ""null"";
            }
            if(t instanceof Iterable) {
                return ts((Iterable<?>) t);
            }else if(t instanceof int[]) {
                String s = Arrays.toString((int[]) t);
                return ""{""+s.substring(1, s.length()-1)+""}"";
            }else if(t instanceof long[]) {
                String s = Arrays.toString((long[]) t);
                return ""{""+s.substring(1, s.length()-1)+""}"";
            }else if(t instanceof char[]) {
                String s = Arrays.toString((char[]) t);
                return ""{""+s.substring(1, s.length()-1)+""}"";
            }else if(t instanceof double[]) {
                String s = Arrays.toString((double[]) t);
                return ""{""+s.substring(1, s.length()-1)+""}"";
            }else if(t instanceof boolean[]) {
                String s = Arrays.toString((boolean[]) t);
                return ""{""+s.substring(1, s.length()-1)+""}"";
            }else if(t instanceof Object[]) {
                return ts((Object[]) t);
            }
            return t.toString();
        }
        private static <T> String ts(T[] arr) {
            StringBuilder ret = new StringBuilder();
            ret.append(""{"");
            boolean first = true;
            for(T t: arr) {
                if(!first) ret.append("", "");
                first = false;
                ret.append(ts(t));
            }
            ret.append(""}"");
            return ret.toString();
        }
        private static <T> String ts(Iterable<T> iter) {
            StringBuilder ret = new StringBuilder();
            ret.append(""{"");
            boolean first = true;
            for(T t: iter) {
                if(!first) ret.append("", "");
                first = false;
                ret.append(ts(t));
            }
            ret.append(""}"");
            return ret.toString();
        }
        public static void print(Object... o) {
            if(LOCAL) {
                System.out.print(""Line #""+Thread.currentThread().getStackTrace()[2].getLineNumber()+"": ["");
                for(int i = 0; i<o.length; i++) {
                    if(i!=0) System.out.print("", "");
                    System.out.print(ts(o[i]));
                }
                System.out.println(""]"");
            }
        }
    }
    static class Pair {
        int first, second;
        public Pair(int first, int second) {
            this.first = first;
            this.second = second;
        }
        @Override
        public String toString() {
            return ""("" + first + "" "" + second + "")"";
        }
    }
    static class custom_sort implements Comparator<Pair> {
        @Override
        public int compare(Pair first, Pair second) {
            return Integer.compare(first.first, second.first);
        }
    }

    public int maxFrequency(int[] nums, int k, int numOperations) {
        int n = nums.length;
        HashMap<Integer, Integer> freq = new HashMap<>();
        ArrayList<Pair> res = new ArrayList<>();
        for (int num : nums) {
            freq.put(num, freq.getOrDefault(num, 0) + 1);
            res.add(new Pair(num - k, 1)); res.add(new Pair(num + 1 + k , -1));
        }
        TreeSet<Integer> set = new TreeSet<>();
        for (Pair x : res) set.add(x.first);
        for (int num : freq.keySet()) set.add(num);
        Collections.sort(res, new custom_sort());
        int idx = 0, temp = 0, maxi = 0;
        for (int ele : set) {
            while (idx < res.size() && res.get(idx).first <= ele) {
                temp += res.get(idx).second;
                idx++;
            }
            int cnt = freq.getOrDefault(ele, 0);
            int curr = cnt + Math.min(numOperations, temp - cnt);
            maxi = Math.max(maxi, curr);
        }
        return maxi;
    }
}",1447720005
RAJ ROY,RkRoy,276,3626,java,"class Solution {
    public static int smallestNumber(int n, int t) {
        while (true) {
            if (check(n, t)) return n;
            n++;
        }
    }

    private static boolean check(int n, int t) {
        int prod = 1;
        while (n > 0) {
            int digit = n % 10;
            prod *= digit;
            n /= 10;
            if (prod == 0) break; 
        }
        return prod % t == 0;
    }
}",1447656497
RAJ ROY,RkRoy,276,3640,java,"class Solution {
    
    static Debug dbg = new Debug();
    static class Debug {
        public static boolean LOCAL = true;
        public static boolean getLocal() {
            try {
                return System.getProperty(""LOCAL"") == null;
            }catch(SecurityException e) {
                return false;
            }
        }
        public static <T> String ts(T t) {
            if(t==null) {
                return ""null"";
            }
            if(t instanceof Iterable) {
                return ts((Iterable<?>) t);
            }else if(t instanceof int[]) {
                String s = Arrays.toString((int[]) t);
                return ""{""+s.substring(1, s.length()-1)+""}"";
            }else if(t instanceof long[]) {
                String s = Arrays.toString((long[]) t);
                return ""{""+s.substring(1, s.length()-1)+""}"";
            }else if(t instanceof char[]) {
                String s = Arrays.toString((char[]) t);
                return ""{""+s.substring(1, s.length()-1)+""}"";
            }else if(t instanceof double[]) {
                String s = Arrays.toString((double[]) t);
                return ""{""+s.substring(1, s.length()-1)+""}"";
            }else if(t instanceof boolean[]) {
                String s = Arrays.toString((boolean[]) t);
                return ""{""+s.substring(1, s.length()-1)+""}"";
            }else if(t instanceof Object[]) {
                return ts((Object[]) t);
            }
            return t.toString();
        }
        private static <T> String ts(T[] arr) {
            StringBuilder ret = new StringBuilder();
            ret.append(""{"");
            boolean first = true;
            for(T t: arr) {
                if(!first) ret.append("", "");
                first = false;
                ret.append(ts(t));
            }
            ret.append(""}"");
            return ret.toString();
        }
        private static <T> String ts(Iterable<T> iter) {
            StringBuilder ret = new StringBuilder();
            ret.append(""{"");
            boolean first = true;
            for(T t: iter) {
                if(!first) ret.append("", "");
                first = false;
                ret.append(ts(t));
            }
            ret.append(""}"");
            return ret.toString();
        }
        public static void print(Object... o) {
            if(LOCAL) {
                System.out.print(""Line #""+Thread.currentThread().getStackTrace()[2].getLineNumber()+"": ["");
                for(int i = 0; i<o.length; i++) {
                    if(i!=0) System.out.print("", "");
                    System.out.print(ts(o[i]));
                }
                System.out.println(""]"");
            }
        }
    }
    static class Pair {
        int first, second;
        public Pair(int first, int second) {
            this.first = first;
            this.second = second;
        }
        @Override
        public String toString() {
            return ""("" + first + "" "" + second + "")"";
        }
    }
    static class custom_sort implements Comparator<Pair> {
        @Override
        public int compare(Pair first, Pair second) {
            return Integer.compare(first.first, second.first);
        }
    }

    public int maxFrequency(int[] nums, int k, int numOperations) {
        int n = nums.length;
        HashMap<Integer, Integer> freq = new HashMap<>();
        ArrayList<Pair> res = new ArrayList<>();
        for (int num : nums) {
            freq.put(num, freq.getOrDefault(num, 0) + 1);
            res.add(new Pair(num - k, 1)); res.add(new Pair(num + 1 + k , -1));
        }
        TreeSet<Integer> set = new TreeSet<>();
        for (Pair x : res) set.add(x.first);
        for (int num : freq.keySet()) set.add(num);
        Collections.sort(res, new custom_sort());
        int idx = 0, temp = 0, maxi = 0;
        for (int ele : set) {
            while (idx < res.size() && res.get(idx).first <= ele) {
                temp += res.get(idx).second;
                idx++;
            }
            int cnt = freq.getOrDefault(ele, 0);
            int curr = cnt + Math.min(numOperations, temp - cnt);
            maxi = Math.max(maxi, curr);
        }
        return maxi;
    }
}",1447718798
Ritesh baindara,RITESH_25,277,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        map<int,int> freq;
        map<int,int> m;
        for(auto b:nums){
            int l = max(0,b-k);
            int r = min(100000,b+k);
            freq[l]++;
            if(freq.find(b)==freq.end()){
                freq[b]=0;
            }
            freq[r+1]--;
            m[b]++;
        }
        vector<pair<int,int>> temp;
        int last = 0;
        int ans = 0;
        for(auto b:freq){
            ans = max(ans,m[b.first] + min(numOperations,b.second+last-m[b.first]));
            last+=b.second;
        }

        
        
        return ans;  
    }
};",1447706708
Ritesh baindara,RITESH_25,277,3626,cpp,"class Solution {
public:

    int product(int a){
        int cnt =1;
        while(a){
            cnt*=a%10;
            a/=10;
        }
        return cnt;
    }
    int smallestNumber(int n, int t) {
        for(int i=n;;i++){
            if(product(i)%t==0){
                return i;
            }
        }
    }
};",1447659247
Ritesh baindara,RITESH_25,277,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        map<long long,long long> freq;
        map<long long,long long> m;
        for(auto b:nums){
            long long l = max(0,b-k);
            long long r = b+k;
            freq[l]++;
            if(freq.find(b)==freq.end()){
                freq[b]=0;
            }
            freq[r+1]--;
            m[b]++;
        }
        vector<pair<long long,long long>> temp;
        long long last = 0;
        long long ans = 0;
        for(auto b:freq){
            ans = max(ans,m[b.first] + min(1ll*numOperations,b.second+last-m[b.first]));
            last+=b.second;
        }
        
        return ans;  
    }
};",1447711632
Simon Ganter,simon-0006,278,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numo) {
        sort(nums.begin(), nums.end());

        map<int, int> freq;
        for (int i : nums) freq[i] ++;

        int l = 0;
        int r = 0;
        int maxi = 0;
        for (int i = nums[0]; i <= nums[nums.size() - 1]; i++) {
            while (r < nums.size() && abs(nums[r] - i) <= k) r++;
            while (i - nums[l] > k) l++;
            // cout << i << "" "" << l << "" "" << r << endl;

            maxi = max(maxi, min(numo + freq[i], r - l));
        } 
        return maxi;
    }
};",1447700612
Simon Ganter,simon-0006,278,3626,cpp,"class Solution {
public:
    int smallestNumber(int n, int t) {
        while (true) {
            int prod = 1;
            int tmp = n;
            while (tmp > 0) {
                prod *= tmp % 10;
                tmp /= 10;
            }
            if (prod % t == 0) return n;
            n++;
        }
        return -1;
    }
};",1447661702
Simon Ganter,simon-0006,278,3640,cpp,"typedef vector<int> vi;
typedef vector<vi> vvi;

class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numo) {
        sort(nums.begin(), nums.end());

        map<int, int> freq;
        for (int i : nums) freq[i] ++;

        int l = 0;
        int r = 0;
        int maxi = 0;
        vvi mem(nums.size());
        for (int idx = 0; idx < nums.size(); idx++) {
            int i = nums[idx];
            while (r < nums.size() && abs(nums[r] - i) <= k) r++;
            while (i - nums[l] > k) l++;
            // cout << i << "" "" << l << "" "" << r << endl;
            mem[idx] = {l, r}; 

            maxi = max(maxi, min(numo + freq[i], r - l));
        } 

        for (int i = 0; i < nums.size()-1; i++) {
            int ri = mem[i][1];
            for (int le = mem[i][0]; le < mem[i+1][0]; le++) {
               while (ri < nums.size() && nums[ri] - nums[le] <= 2*k) ri++;
                // if (ri < nums.size()) cout << i << "" : "" << le << "" - "" << ri << "" "" << (nums[ri] - nums[le]) << endl;
                // else cout << i << "" : "" << le << "" - "" << ri << endl;
                maxi = max(maxi, min(numo, ri - le));
            }
        }
        return maxi;
    }
};",1447737024
contestslayer23,contestslayer23,280,3622,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        MAX = max(nums) + 100
        freq = [0] * MAX
        for num in nums:
            freq[num] +=1
        prefix = [0] * MAX
        prefix[0] = freq[0]
        for i in range(1, MAX):
            prefix[i] = prefix[i-1] + freq[i]
        max_freq = 0
        for x in range(MAX):
            left = x - k
            if left < 0:
                left = 0
            right = x + k
            if right >= MAX:
                right = MAX -1
            total_in_range = prefix[right]
            if left >0:
                total_in_range -= prefix[left -1]
            count_can_set = total_in_range - freq[x]
            current_freq = freq[x] + min(count_can_set, numOperations)
            if current_freq > max_freq:
                max_freq = current_freq
        return max_freq",1447673437
contestslayer23,contestslayer23,280,3626,python3,"class Solution:
    def smallestNumber(self, n: int, t: int) -> int:
        while True:
            num = n
            if num == 0:
                product = 0
            else:
                product = 1
                while num > 0:
                    product *= num % 10
                    num = num // 10
            if product % t == 0:
                return n
            n += 1
",1447656891
contestslayer23,contestslayer23,280,3640,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        nums.sort()
        freq = Counter(nums)
        candidate_x = set(nums)
        for num in nums:
            candidate_x.add(num - k)
            candidate_x.add(num + k)
        candidate_x = sorted(candidate_x)
        max_freq = 0
        for x in candidate_x:
            left = bisect_left(nums, x - k)
            right = bisect_right(nums, x + k)
            count_modifiable = right - left
            freq_x = freq.get(x, 0)
            frequency_x = freq_x + min(count_modifiable - freq_x, numOperations)
            if frequency_x > max_freq:
                max_freq = frequency_x
        return max_freq",1447693976
Nasim sheikh,pele_3010,281,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int op) {
       
        sort(nums.begin(), nums.end());

       
        map<int, int> frequencyMap;
        for (const auto& num : nums) {
            frequencyMap[num]++;
        }

       
        auto calculateSegmentLength = [&](int ele) -> int {
            auto upper = upper_bound(nums.begin(), nums.end(), ele + k);
            auto lower = lower_bound(nums.begin(), nums.end(), ele - k);
            
            int right = nums.size();
            int left = 0;
            
            if (upper == nums.end()) {
                right = nums.size() - 1;
            } else {
                upper--;
                right = upper - nums.begin();
            }
            
            left = lower - nums.begin();
            
            int seglen = right - left + 1;
            seglen -= frequencyMap[ele];
            seglen = min(seglen, op);
            
            return seglen + frequencyMap.at(ele);
        };

        int maxFreq = 0;
        int n = nums.size();

       
        for (int i = 0; i < n; ++i) {
            int element = nums[i];

           
            int val = calculateSegmentLength(element);
            val = max(val, calculateSegmentLength(element - k));
            val = max(val, calculateSegmentLength(element + k));
            maxFreq = max(maxFreq, val);
        }

        return maxFreq;
    }
};
",1447734859
Nasim sheikh,pele_3010,281,3626,cpp,"class Solution {
public:
    int smallestNumber(int n, int t) {
        // Nested function getp
        auto getp = [](int num) -> int {
            int cv = 1;
            while (num > 0) {
                cv *= (num % 10);
                num /= 10;
            }
            return cv;
        };

        bool a = 0;
        while (!a) {
            int k = getp(n);
            if (k % t == 0) {
                return n;
            }
            n++;
        }
        return n;
    }
};
",1447731479
Nasim sheikh,pele_3010,281,3640,cpp,"#define ll long long
class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int op) {
       
        sort(nums.begin(), nums.end());

       
        map<ll, ll> frequencyMap;
        for (const auto& num : nums) {
            frequencyMap[num]++;
        }

       
        auto calculateSegmentLength = [&](ll ele) -> ll {
            auto upper = upper_bound(nums.begin(), nums.end(), ele + k);
            auto lower = lower_bound(nums.begin(), nums.end(), ele - k);
            
            ll right = nums.size();
            ll left = 0;
            
            if (upper == nums.end()) {
                right = nums.size() - 1;
            } else {
                upper--;
                right = upper - nums.begin();
            }
            
            left = lower - nums.begin();
            
            ll seglen = right - left + 1;
            seglen -= frequencyMap[ele];
            seglen = min(seglen, (ll)op);
            
            return seglen + frequencyMap.at(ele);
        };

        ll maxFreq = 0;
        ll n = nums.size();

       
        for (ll i = 0; i < n; ++i) {
            ll element = nums[i];

           
            ll val = calculateSegmentLength(element);
            val = max(val, calculateSegmentLength(element - k));
            val = max(val, calculateSegmentLength(element + k));
            maxFreq = max(maxFreq, val);
        }

        return maxFreq;
    }
};
",1447737559
Eleven 11,hg0NeiDeVE,282,3622,cpp,"
class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {

        int n = nums.size();
        vector<pair<long long, int>> events; // (position, delta)

        unordered_map<long long, int> freqMap; // Frequency of original nums[i]
        set<long long> points; // All unique points to consider

        // Step 1: Collect events and frequencies
        for(int num : nums) {
            freqMap[num]++;
            long long L = (long long)num - k;
            long long R = (long long)num + k;

            events.emplace_back(L, +1);
            events.emplace_back(R + 1, -1);

            points.insert(L);
            points.insert(R + 1);
            points.insert(num); // Include nums[i] in points
        }

        // Step 2: Sort events
        sort(events.begin(), events.end(), [](const pair<long long, int>& a, const pair<long long, int>& b) {
            if (a.first != b.first)
                return a.first < b.first;
            return a.second > b.second; // Start events before end events
        });

        // Step 3: Process events to compute coverage and potential frequencies
        int idx = 0;
        int coverage = 0;
        int maxFreq = 0;

        // Collect all points where we need to update coverage or check frequencies
        vector<long long> sortedPoints(points.begin(), points.end());
        unordered_set<long long> numsSet(nums.begin(), nums.end());

        for (long long v : sortedPoints) {
            // Update coverage up to current point
            while (idx < events.size() && events[idx].first <= v) {
                coverage += events[idx].second;
                idx++;
            }

            int freq_v = freqMap.count(v) ? freqMap[v] : 0;
            int adjustable_v = coverage - freq_v;

            // Only proceed if we can adjust elements to v
            if (adjustable_v >= 0) {
                int totalAdjustments = min(adjustable_v, numOperations);
                int totalFreq_v = freq_v + totalAdjustments;
                maxFreq = max(maxFreq, totalFreq_v);
            }
        }

        return maxFreq;
    }
};
",1447692986
Eleven 11,hg0NeiDeVE,282,3626,cpp,"class Solution {
public:
    int smallestNumber(int n, int t) {
        for (int num = n; num < 1000; ++num) {  // Upper limit can be adjusted if necessary
            int temp = num;
            int product = 1;
            bool has_zero = false;

            while (temp > 0) {
                int digit = temp % 10;
                if (digit == 0) {
                    product = 0;
                    has_zero = true;
                } else {
                    product *= digit;
                }
                temp /= 10;
            }

            if (product % t == 0) {
                return num;
            }
        }

        return -1;
    }
};
",1447703860
Eleven 11,hg0NeiDeVE,282,3640,cpp,"
class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {

        int n = nums.size();
        vector<pair<long long, int>> events; // (position, delta)

        unordered_map<long long, int> freqMap; // Frequency of original nums[i]
        set<long long> points; // All unique points to consider

        // Step 1: Collect events and frequencies
        for(int num : nums) {
            freqMap[num]++;
            long long L = (long long)num - k;
            long long R = (long long)num + k;

            events.emplace_back(L, +1);
            events.emplace_back(R + 1, -1);

            points.insert(L);
            points.insert(R + 1);
            points.insert(num); // Include nums[i] in points
        }

        // Step 2: Sort events
        sort(events.begin(), events.end(), [](const pair<long long, int>& a, const pair<long long, int>& b) {
            if (a.first != b.first)
                return a.first < b.first;
            return a.second > b.second; // Start events before end events
        });

        // Step 3: Process events to compute coverage and potential frequencies
        int idx = 0;
        int coverage = 0;
        int maxFreq = 0;

        // Collect all points where we need to update coverage or check frequencies
        vector<long long> sortedPoints(points.begin(), points.end());
        unordered_set<long long> numsSet(nums.begin(), nums.end());

        for (long long v : sortedPoints) {
            // Update coverage up to current point
            while (idx < events.size() && events[idx].first <= v) {
                coverage += events[idx].second;
                idx++;
            }

            int freq_v = freqMap.count(v) ? freqMap[v] : 0;
            int adjustable_v = coverage - freq_v;

            // Only proceed if we can adjust elements to v
            if (adjustable_v >= 0) {
                int totalAdjustments = min(adjustable_v, numOperations);
                int totalFreq_v = freq_v + totalAdjustments;
                maxFreq = max(maxFreq, totalFreq_v);
            }
        }

        return maxFreq;
    }
};
",1447691859
syx1994,syx1994,284,3622,python,"class Solution(object):
    def maxFrequency(self, nums, k, numOperations):
        """"""
        :type nums: List[int]
        :type k: int
        :type numOperations: int
        :rtype: int
        """"""
        dic = defaultdict(int)
        n = len(nums)
        for x in nums:
            dic[x]+=1
        nums.sort()
        ans = 0
        for i in range(n):
            l,r = 0,i-1
            while l<=r:
                mid = (l+r)//2
                if nums[mid]>=nums[i]-k:
                    r=mid-1
                else:
                    l=mid+1
            p1 = l
            l,r = i+1,n-1
            while l<=r:
                mid = (l+r)//2
                if nums[mid]<=nums[i]+k:
                    l=mid+1
                else:
                    r=mid-1
            p2 = r
            #print(i,p1,p2)
            if p2-p1+1-dic[nums[i]]<=numOperations:
                ans=max(ans,p2-p1+1)
            else:
                ans=max(ans,dic[nums[i]]+numOperations)
        
        l=0
        for r in range(n):
            while nums[r]-nums[l]>2*k:
                l+=1
            if r-l+1<=numOperations:
                ans=max(ans,r-l+1)
            else:
                ans=max(ans,numOperations)
        return ans
        ",1447729565
syx1994,syx1994,284,3626,python,"class Solution(object):
    def smallestNumber(self, n, t):
        """"""
        :type n: int
        :type t: int
        :rtype: int
        """"""
        while True:
            m = n
            tmp = 1
            while m:
                tmp*=m%10
                m//=10
            if tmp%t==0:
                return n
            n+=1
            ",1447654518
syx1994,syx1994,284,3640,python,"from collections import defaultdict
class Solution(object):
    def maxFrequency(self, nums, k, numOperations):
        """"""
        :type nums: List[int]
        :type k: int
        :type numOperations: int
        :rtype: int
        """"""
        dic = defaultdict(int)
        n = len(nums)
        for x in nums:
            dic[x]+=1
        nums.sort()
        ans = 0
        for i in range(n):
            l,r = 0,i-1
            while l<=r:
                mid = (l+r)//2
                if nums[mid]>=nums[i]-k:
                    r=mid-1
                else:
                    l=mid+1
            p1 = l
            l,r = i+1,n-1
            while l<=r:
                mid = (l+r)//2
                if nums[mid]<=nums[i]+k:
                    l=mid+1
                else:
                    r=mid-1
            p2 = r
            #print(i,p1,p2)
            if p2-p1+1-dic[nums[i]]<=numOperations:
                ans=max(ans,p2-p1+1)
            else:
                ans=max(ans,dic[nums[i]]+numOperations)
        
        l=0
        for r in range(n):
            while nums[r]-nums[l]>2*k:
                l+=1
            if r-l+1<=numOperations:
                ans=max(ans,r-l+1)
            else:
                ans=max(ans,numOperations)
        return ans
        
                ",1447728668
stevenhgs,stevenhgs,285,3622,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, num_operations: int) -> int:
        nums.sort()
        size = 2 * k
        n = len(nums)

        
        l, m, r = 0, 0, 0
        result = 0
        count = defaultdict(int)
        for num in nums:
            count[num] += 1
        
        while m < n:
            while nums[l] < nums[m] - k:
                l += 1
            while r < n and nums[r] <= nums[m] + k:
                r += 1
            already_there = count[nums[m]]
            nb_included = r - l
            nb_to_change = max(0, nb_included - already_there)
            can_change = min(nb_to_change, num_operations)
            result = max(result, can_change + already_there)
            m += 1
            r = max(r, m)

        l, r = 0, 0
        while r < n:
            if nums[r] - nums[l] <= 2 * k:
                r += 1
            else:
                l += 1
            included = r - l
            real = min(included, num_operations)
            result = max(result, real)

        return result
",1447709555
stevenhgs,stevenhgs,285,3626,python3,"class Solution:
    def smallestNumber(self, n: int, t: int) -> int:
        def get_prod(num):
            prod = 1
            while num:
                prod *= (num % 10)
                num //= 10
            return prod
        
        current = n
        while True:
            if get_prod(current) % t == 0:
                return current
            current += 1",1447721063
stevenhgs,stevenhgs,285,3640,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, num_operations: int) -> int:
        nums.sort()
        size = 2 * k
        n = len(nums)

        
        l, m, r = 0, 0, 0
        result = 0
        count = defaultdict(int)
        for num in nums:
            count[num] += 1
        
        while m < n:
            while nums[l] < nums[m] - k:
                l += 1
            while r < n and nums[r] <= nums[m] + k:
                r += 1
            already_there = count[nums[m]]
            nb_included = r - l
            nb_to_change = max(0, nb_included - already_there)
            can_change = min(nb_to_change, num_operations)
            result = max(result, can_change + already_there)
            m += 1
            r = max(r, m)

        l, r = 0, 0
        while r < n:
            if nums[r] - nums[l] <= 2 * k:
                r += 1
            else:
                l += 1
            included = r - l
            real = min(included, num_operations)
            result = max(result, real)

        return result
",1447709798
SVS Surya Prakash,mugiwara2711,286,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        
        map<int,int>mp;
        unordered_map<int,int>original;
        
        for(int i:nums)
        {
            int left = max(i-k,0);
            int right = i+k+1;
            
            mp[left]++;
            mp[i] += 0;
            mp[right]--;
            
            original[i]++;
        }
        
        int sol = 0;
        int curr = 0;
        int val;
        for(auto it = mp.begin();it!=mp.end();it++)
        {
            int c = it->second;
            curr+=c;
            it->second = curr;
            
            int key = it->first;
            int val = it->second;
            
            if(original.find(key)!=original.end())
                sol = max(sol,min(val,original[key]+numOperations));
            else
                sol = max(sol,min(curr,numOperations));
        }
        
        return sol;
    }
};",1447728938
SVS Surya Prakash,mugiwara2711,286,3626,python3,"class Solution:
    def smallestNumber(self, n: int, t: int) -> int:
        sol = n
        while 1:
            pro = 1
            for c in str(sol):
                pro = pro * int(c)
            if (pro%t) == 0:
                return sol
            sol+=1
        return 100000",1447658832
SVS Surya Prakash,mugiwara2711,286,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        
        map<int,int>mp;
        unordered_map<int,int>original;
        
        for(int i:nums)
        {
            int left = max(i-k,0);
            int right = i+k+1;
            
            mp[left]++;
            mp[i] += 0;
            mp[right]--;
            
            original[i]++;
        }
        
        int sol = 0;
        int curr = 0;
        int val;
        for(auto it = mp.begin();it!=mp.end();it++)
        {
            int c = it->second;
            curr+=c;
            it->second = curr;
            
            int key = it->first;
            int val = it->second;
            
            if(original.find(key)!=original.end())
                sol = max(sol,min(val,original[key]+numOperations));
            else
                sol = max(sol,min(curr,numOperations));
        }
        
        return sol;
    }
};",1447729667
zakha,zakha,287,3622,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        events = []
        counts = collections.Counter(nums)
        for i in range(len(nums)):
            events.append((nums[i], 1))
            events.append((nums[i] - k, 0))
            events.append((nums[i] + k, 2))

        events.sort(key=lambda x: (x[0], x[1]))
        best = 0
        curr = 0
        for event in events:
            if event[1] == 1:
                targ = counts[event[0]]
                best = max(best, targ + min(max(curr - targ, 0), numOperations))
            elif event[1] == 0:
                curr += 1
                best = max(best, min(curr, numOperations))
            else:
                curr -= 1
        return max(best, 1)",1447737387
zakha,zakha,287,3626,python3,"class Solution:
    def smallestNumber(self, n: int, t: int) -> int:
        while True:
            p = 1
            for c in str(n):
                p *= int(c)
            if p % t == 0:
                return n
            n += 1
        ",1447655705
zakha,zakha,287,3640,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        events = []
        counts = collections.Counter(nums)
        for i in range(len(nums)):
            events.append((nums[i], 1))
            events.append((nums[i] - k, 0))
            events.append((nums[i] + k, 2))

        events.sort(key=lambda x: (x[0], x[1]))
        best = 0
        curr = 0
        for event in events:
            if event[1] == 1:
                targ = counts[event[0]]
                best = max(best, targ + min(max(curr - targ, 0), numOperations))
            elif event[1] == 0:
                curr += 1
                best = max(best, min(curr, numOperations))
            else:
                curr -= 1
        return max(best, 1)",1447738156
Sumit,the_69,288,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        int minPos = 0;
        int maxPos = 0;
        int len = nums.size();
        int fans = 1;
        sort(nums.begin(),nums.end());
        map<int,int>m1;
        for(auto e: nums){
            m1[e]++;
        }
        for(int i = 0;i<len;i++){
            while(maxPos+1<len&&nums[maxPos+1]-nums[i]<=k){
                maxPos++;
            }
            while(minPos+1<len&&nums[i]-nums[minPos]>k){
                minPos++;
            }
            int totCount = maxPos-minPos+1;
            int difCount = totCount - m1[nums[i]];
            difCount = min(difCount,numOperations);
            fans = max(fans,m1[nums[i]]+difCount);
        }
        maxPos = 0;
        for(int i = 0;i<len;i++){
            while(maxPos+1<len&&nums[maxPos+1]-nums[i]<=k*2&&maxPos-i+2<=numOperations){
                maxPos++;
            }
            int totCount = maxPos-i+1;
            int difCount = totCount - m1[nums[i]];
            difCount = min(difCount,numOperations);
            fans = max(fans,m1[nums[i]]+difCount);
            m1[nums[i]]--;
        }
        return fans;
    }
    
};",1447720885
Sumit,the_69,288,3626,cpp,"class Solution {
public:
    int smallestNumber(int n, int t) {
        while(true){
            int num = n;
            int prod = 1;
            while(num!=0){
                prod *= num%10;
                num /= 10;
            }
            if(prod%t==0){
                return n;
            }
            else{
                n++;
            }
        }
        return 0;
    }
};",1447661014
Sumit,the_69,288,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        int minPos = 0;
        int maxPos = 0;
        int len = nums.size();
        int fans = 1;
        sort(nums.begin(),nums.end());
        map<int,int>m1;
        for(auto e: nums){
            m1[e]++;
        }
        for(int i = 0;i<len;i++){
            while(maxPos+1<len&&nums[maxPos+1]-nums[i]<=k){
                maxPos++;
            }
            while(minPos+1<len&&nums[i]-nums[minPos]>k){
                minPos++;
            }
            int totCount = maxPos-minPos+1;
            int difCount = totCount - m1[nums[i]];
            difCount = min(difCount,numOperations);
            fans = max(fans,m1[nums[i]]+difCount);
        }
        maxPos = 0;
        for(int i = 0;i<len;i++){
            while(maxPos+1<len&&nums[maxPos+1]-nums[i]<=k*2&&maxPos-i+2<=numOperations){
                maxPos++;
            }
            int totCount = maxPos-i+1;
            int difCount = totCount - m1[nums[i]];
            difCount = min(difCount,numOperations);
            fans = max(fans,m1[nums[i]]+difCount);
            m1[nums[i]]--;
        }
        return fans;
    }
    
};",1447721285
Maxim Smyatkin,Smyatkin-Maxim,289,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        map<int, int> intervals;
        map<int, int> hist;
        for (int num : nums) {
            hist[num]++;
            intervals[num - k]++;
            intervals[num + k + 1]--;
        }
        int max_freq = 0;
        int cnt = 0;
        for (auto it = intervals.begin(); it != intervals.end(); ++it) {
            cnt += it->second;
            if (cnt < max_freq) {
                continue;
            }
            if (cnt <= numOperations) {
                max_freq = cnt;
                continue;
            }
            auto nxt = next(it);
            for (auto jit = hist.lower_bound(it->first);
                jit != hist.end() && jit->first < nxt->first;
                jit++)
            {
                int freq = min(cnt, numOperations + jit->second);
                max_freq = max(max_freq, freq);
            }
        }
        return max_freq;
    }
};",1447729187
Maxim Smyatkin,Smyatkin-Maxim,289,3626,cpp,"class Solution {
public:
    int smallestNumber(int n, int t) {
        for (int v = n;; v++) {
            int digsum = 1;
            string dig = to_string(v);
            for (char c : dig) {
                digsum *= c - '0';
            }
            if (digsum % t == 0) {
                return v;
            }
        }
    }
};",1447657992
Maxim Smyatkin,Smyatkin-Maxim,289,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        map<int, int> intervals;
        map<int, int> hist;
        for (int num : nums) {
            hist[num]++;
            intervals[num - k]++;
            intervals[num + k + 1]--;
        }
        int max_freq = 0;
        int cnt = 0;
        for (auto it = intervals.begin(); it != intervals.end(); ++it) {
            cnt += it->second;
            if (cnt < max_freq) {
                continue;
            }
            if (cnt <= numOperations) {
                max_freq = cnt;
                continue;
            }
            auto nxt = next(it);
            for (auto jit = hist.lower_bound(it->first);
                jit != hist.end() && jit->first < nxt->first;
                jit++)
            {
                int freq = min(cnt, numOperations + jit->second);
                max_freq = max(max_freq, freq);
            }
        }
        return max_freq;
    }
};",1447729838
JedLam,JedLam,290,3622,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        ctr = Counter(nums)
        ks = sorted(ctr.keys())
        ans = ctr[ks[0]]
        prefix = []
        tmp = 0
        for n in ks:
            tmp += ctr[n]
            prefix.append(tmp)
        q, s = deque(), 0
        for i, n in enumerate(ks):
            a, b, c = bisect_left(ks, n - k * 2) - 1, bisect_left(ks, n - k) - 1, bisect_right(ks, n + k) - 1
            if (n - k) in ctr:
                ans = max(ans, min(ctr[n - k] + numOperations, prefix[i] - prefix[a] if a >= 0 else prefix[i]))
            else:
                ans = max(ans, min(numOperations, prefix[i] - prefix[a] if a >= 0 else prefix[i]))
            ans = max(ans, min(ctr[n] + numOperations, prefix[c] - prefix[b] if b >= 0 else prefix[c]))
        return ans",1447737854
JedLam,JedLam,290,3626,python3,"class Solution:
    def smallestNumber(self, n: int, t: int) -> int:
        i = n
        while True:
            tmp = 1
            for d in str(i):
                tmp *= int(d)
            if tmp % t == 0:
                return i
            i += 1",1447656533
JedLam,JedLam,290,3640,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        ctr = Counter(nums)
        ks = sorted(ctr.keys())
        ans = ctr[ks[0]]
        prefix = []
        tmp = 0
        for n in ks:
            tmp += ctr[n]
            prefix.append(tmp)
        q, s = deque(), 0
        for i, n in enumerate(ks):
            a, b, c = bisect_left(ks, n - k * 2) - 1, bisect_left(ks, n - k) - 1, bisect_right(ks, n + k) - 1
            if (n - k) in ctr:
                ans = max(ans, min(ctr[n - k] + numOperations, prefix[i] - prefix[a] if a >= 0 else prefix[i]))
            else:
                ans = max(ans, min(numOperations, prefix[i] - prefix[a] if a >= 0 else prefix[i]))
            ans = max(ans, min(ctr[n] + numOperations, prefix[c] - prefix[b] if b >= 0 else prefix[c]))
        return ans",1447738270
Mridul Pandey,mridul_cr7,291,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& a, int k, int numOperations) {
        int ans=0;
        map<int,int> mp;
        map<int,int> rng;
        for(auto x:a)
        {
            mp[x]++;
            rng[x]+=ans;
            rng[x-k]++;
            rng[x+k+1]--;
        }
        int sum=0;
        for(auto x:rng)
        {
            sum=sum+x.second;
            int cont=mp[x.first];
            int cng=sum-mp[x.first];
           // cout<<x.first<<"" ""<<x.second<<"" ""<<cont<<"" ""<<cng<<"" ""<<sum<<""\n"";
            ans=max(ans,cont+min(numOperations,cng));
        }
//         vector<int> nums;
//         for(auto x:mp)
//         {
//             nums.push_back(x.first);
//         }
//         int sz=nums.size();
//         vector<int> lft(sz),rt(sz);
//         for(int i=0;i<sz;i++)
//         {
//             int l=0,h=i-1,idx=-1;
            
//             while(l<=h)
//             {
//                 int mid=(l+h)/2;
//                 if(nums[mid]>=nums[i]-k)
//                 {
//                     idx=mid;
//                     h=mid-1;
//                 }
//                 else
//                 {
//                     l=mid+1;
//                 }
//             }
//             if(idx!=-1)
//             {
//                 lft[i]=i-idx;
//             }
            
//             l=i+1,h=sz-1,idx=-1;
//             while(l<=h)
//             {
//                 int mid=(l+h)/2;
//                 if(nums[mid]<=nums[i]+k)
//                 {
//                     idx=mid;
//                     l=mid+1;
//                 }
//                 else
//                 {
//                     h=mid-1;
//                 }
//             }
//             if(idx!=-1)
//             {
//                 rt[i]=idx-i;
//             }
//         }
//         int ans=1;
//         for(int i=0;i<sz;i++)
//         {
//             ans=max(ans,mp[nums[i]]+min(numOperations,lft[i]+rt[i]));
//         }
        return ans;
    }
};",1447730209
Mridul Pandey,mridul_cr7,291,3626,cpp,"class Solution {
public:
    int smallestNumber(int n, int t) {
        int ans=n;
        while(1)
        {
            int sum=1;
            int x=n;
            while(x)
            {
                sum=sum*(x%10);
                x=x/10;
            }
            if(sum%t==0)
                return n;
            n++;
        }
        return -1;
    }
};",1447654084
Mridul Pandey,mridul_cr7,291,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& a, int k, int numOperations) {
        int ans=0;
        map<int,int> mp;
        map<int,int> rng;
        for(auto x:a)
        {
            mp[x]++;
            rng[x]+=ans;
            rng[x-k]++;
            rng[x+k+1]--;
        }
        int sum=0;
        for(auto x:rng)
        {
            sum=sum+x.second;
            int cont=mp[x.first];
            int cng=sum-mp[x.first];
           // cout<<x.first<<"" ""<<x.second<<"" ""<<cont<<"" ""<<cng<<"" ""<<sum<<""\n"";
            ans=max(ans,cont+min(numOperations,cng));
        }
//         vector<int> nums;
//         for(auto x:mp)
//         {
//             nums.push_back(x.first);
//         }
//         int sz=nums.size();
//         vector<int> lft(sz),rt(sz);
//         for(int i=0;i<sz;i++)
//         {
//             int l=0,h=i-1,idx=-1;
            
//             while(l<=h)
//             {
//                 int mid=(l+h)/2;
//                 if(nums[mid]>=nums[i]-k)
//                 {
//                     idx=mid;
//                     h=mid-1;
//                 }
//                 else
//                 {
//                     l=mid+1;
//                 }
//             }
//             if(idx!=-1)
//             {
//                 lft[i]=i-idx;
//             }
            
//             l=i+1,h=sz-1,idx=-1;
//             while(l<=h)
//             {
//                 int mid=(l+h)/2;
//                 if(nums[mid]<=nums[i]+k)
//                 {
//                     idx=mid;
//                     l=mid+1;
//                 }
//                 else
//                 {
//                     h=mid-1;
//                 }
//             }
//             if(idx!=-1)
//             {
//                 rt[i]=idx-i;
//             }
//         }
//         int ans=1;
//         for(int i=0;i<sz;i++)
//         {
//             ans=max(ans,mp[nums[i]]+min(numOperations,lft[i]+rt[i]));
//         }
        return ans;
    }
};",1447729744
Tirumal,rooptirumalasai,292,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        // sort(nums.begin(),nums.end());
        int maxi=0;
        unordered_map<int,int> ma1;
        for(auto &it:nums) ma1[it]++;
        map<int,int> ma;
        for(auto it:nums){
            ma[it-k]++;
            ma[it+k+1]--;
            ma[it]++;
            ma[it]--;
        }
        int freq=0;
        for(auto it:ma){
            freq+=it.second;
            int val=it.first;
            // cout<<val<<""  ""<<freq<<endl;
            int availFreq=freq;
            if(ma1.find(val)!=ma1.end()){
                availFreq-=ma1[val];
            }
            int wanted =min(availFreq,numOperations);
            int final=ma1[val]+wanted;
            maxi=max(maxi,final);
        }
        return maxi;        
    }
};",1447735098
Tirumal,rooptirumalasai,292,3626,cpp,"class Solution {
public:
    int smallestNumber(int n, int t) {
        while(true){
            int val=n, curr=1;
            while(val>0){
                int dd=val%10;
                val/=10;
                curr*=dd;
            }
            if(curr%t==0) return n;
            n++;
        }
        return n+1;
    }
};",1447658669
Tirumal,rooptirumalasai,292,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int op) {
        long long int numOperations=op;
        long long int maxi=0;
        unordered_map<long long int,long long int> ma1;
        for(auto &it:nums) ma1[it]++;
        map<long long int,long long int> ma;
        for(auto it:nums){
            ma[it-k]++;
            ma[it+k+1]--;
            ma[it]++;
            ma[it]--;
        }
        long long int freq=0;
        for(auto it:ma){
            freq+=it.second;
            long long int val=it.first;
            // cout<<val<<""  ""<<freq<<endl;
            long long int availFreq=freq;
            if(ma1.find(val)!=ma1.end()){
                availFreq-=ma1[val];
            }
            long long int wanted =min(availFreq,numOperations);
            long long int final=ma1[val]+wanted;
            maxi=max(maxi,final);
        }
        return maxi;
    }
};",1447738794
Yucheng Dai,Rainingcity,295,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        int n = nums.size();
        sort(nums.begin(), nums.end());
        int ans = 0;
        int i = 0, j = 0;
        for(i = 0; i < n && j < n; i++) {
            while(j < n && nums[j] - nums[i] <= 2 * k) j++;
            ans = max(ans, j - i);
        }
        ans = min(ans, numOperations);
        vector<pair<int,int>> v{};
        for(i = 0; i < n; i++) {
            if (i == 0 || nums[i] != nums[i - 1]) {
                v.push_back(make_pair(nums[i], 1));
            } else {
                v.back().second++;
            }
        }
        int m = v.size();
        vector<int> rl(m, 0), rr(m, 0);
        i = 0, j = 0;
        int cnt = 0;
        for(i = 0; i < m; i++) {
            while(j < m && v[j].first - v[i].first <= k) {
                cnt += v[j].second;
                j++;
            }
            cnt -= v[i].second;
            rr[i] = cnt;
        }
        i = m - 1, j = m - 1;
        cnt = 0;
        for(i = m - 1; i >= 0; i--) {
            while(j >= 0 && v[i].first - v[j].first <= k) {
                cnt += v[j].second;
                j--;
            }
            cnt -= v[i].second;
            rl[i] = cnt;
        }
        for(int i = 0; i < m; i++) {
            int ops = rl[i] + rr[i];
            ans = max(ans, min(ops, numOperations) + v[i].second);
        }
        return ans;
    }
};",1447711468
Yucheng Dai,Rainingcity,295,3626,cpp,"class Solution {
private:
    int dprod(int x) {
        int res = 1;
        while(x != 0) {
            res *= (x % 10);
            x /= 10;
        }
        return res;
    }
public:
    int smallestNumber(int n, int t) {
        while(true) {
            if (dprod(n) % t == 0) return n;
            n++;
        }
    }
};",1447713933
Yucheng Dai,Rainingcity,295,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        int n = nums.size();
        sort(nums.begin(), nums.end());
        int ans = 0;
        int i = 0, j = 0;
        for(i = 0; i < n && j < n; i++) {
            while(j < n && nums[j] - nums[i] <= 2 * k) j++;
            ans = max(ans, j - i);
        }
        ans = min(ans, numOperations);
        vector<pair<int,int>> v{};
        for(i = 0; i < n; i++) {
            if (i == 0 || nums[i] != nums[i - 1]) {
                v.push_back(make_pair(nums[i], 1));
            } else {
                v.back().second++;
            }
        }
        int m = v.size();
        vector<int> rl(m, 0), rr(m, 0);
        i = 0, j = 0;
        int cnt = 0;
        for(i = 0; i < m; i++) {
            while(j < m && v[j].first - v[i].first <= k) {
                cnt += v[j].second;
                j++;
            }
            cnt -= v[i].second;
            rr[i] = cnt;
        }
        i = m - 1, j = m - 1;
        cnt = 0;
        for(i = m - 1; i >= 0; i--) {
            while(j >= 0 && v[i].first - v[j].first <= k) {
                cnt += v[j].second;
                j--;
            }
            cnt -= v[i].second;
            rl[i] = cnt;
        }
        for(int i = 0; i < m; i++) {
            int ops = rl[i] + rr[i];
            ans = max(ans, min(ops, numOperations) + v[i].second);
        }
        return ans;
    }
};",1447705886
AVIJIT_BISWAS,AVIJIT_BISWAS,298,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& a, int k, int op) {
        int n = a.size();
        sort(a.begin(), a.end());
        int ans = 1;
        
        int mn = *min_element(a.begin(), a.end());
        int mx = *max_element(a.begin(), a.end());
        
        for(int i = mn; i <= mx; i++){
          int cnt = upper_bound(a.begin(), a.end(), i) - lower_bound(a.begin(), a.end(), i);
          int x = upper_bound(a.begin(), a.end(), i - 1) - lower_bound(a.begin(), a.end(), i - k);
          int y = upper_bound(a.begin(), a.end(), i + k) - lower_bound(a.begin(), a.end(), i + 1);
          ans = max(ans, cnt + min(op, (x + y)));

          // cout << i << ' ' << x << ' ' << y << '\n';
        }
        return ans;
        
    }
};
",1447695647
AVIJIT_BISWAS,AVIJIT_BISWAS,298,3626,cpp,"class Solution {
public:
    int smallestNumber(int n, int t) {
        while(true) {
            int x = n;
            int num = 1;
            while(x) {
                num *= x % 10;
                x /= 10;
            }
            if(num % t == 0) return n;
            n++;
        }
    }
};",1447658061
AVIJIT_BISWAS,AVIJIT_BISWAS,298,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& a, int k, int op) {
        int n = a.size();
        sort(a.begin(), a.end());
        int ans = 1, i = 0, cnt = 0;

        map<int, int> mp;
        vector<pair<int, int>> b;

        for (int num : a) {
          mp[num]++;
          b.push_back({num - k, + 1});
          b.push_back({num + k + 1, -1});
        }

        set<int> cd;
        for (auto& [x, f] : mp) {
          cd.insert(x);
        }
        for (auto& [x, f] : b) {
          cd.insert(x);
        }

        sort(b.begin(), b.end());

        for (int t : cd) {
          while (i < b.size() and b[i].first <= t) {
            i++;
            cnt += b[i - 1].second;
          }
          ans = max(ans, mp[t] + min(op, cnt - mp[t]));
        }

        return ans;
    }
};",1447722568
AnujMishra2005,AnujMishra2005,299,3622,cpp,"#include <bits/stdc++.h>
using namespace std;

class Solution {
public:
    int maxFrequency(vector<int>& a, int b, int c) {
        
        
        
        int d = *max_element(a.begin(), a.end());
        
        
        
        int e = d + b + 2;

        
        vector<int> f(e, 0);

        
        
        
        int g = 0;
        
        
        while (g < a.size()) {
            
            
            
            
            
            f[a[g]]++;



            
            
            
            
            g++;
        }


        
        
        
        
        vector<int> h(e, 0);
        
        
        
        
        
        
        
        h[0] = f[0];
        
        
        
        
        
        g = 1;
        
        
        
        
        while (g < e) {
        
            
            
            
            h[g] = h[g - 1] + f[g];
            
            
            
            
            
            
            g++;
        }



        



        
        
        
        
        int i = 0;
        
        
        
        
        g = 0;
        
        
        
        while (g < e) {
        
            
            
            
            int x = g;
            
            
            
            
            
            if (f[x] == 0 && c == 0) {
            
                
                
                
                
                g++;
                
                
                
                
                
                continue;
            }


            



            
            
            
            
            int y = max(0, x - b);
            
            
            
            
            int z = min(e - 1, x + b);
            
            
            
            
            int aa = h[z] - (y > 0 ? h[y - 1] : 0);
            
            
            
            
            
            int ab = aa - f[x];
            
            
            
            
            int ac = f[x] + min(c, ab);



            
            
            
            
            i = max(i, ac);
            
            
            
            
            g++;
        }


        



        
        
        
        
        return i;
    }






};


",1447701532
AnujMishra2005,AnujMishra2005,299,3626,cpp,"class Solution {
public:
    int digitProduct(int x) {
        int product = 1;
        while (x > 0) {
            int digit = x % 10;
            if (digit == 0) return 0;
            product *= digit;
            x /= 10;
        }
        return product;
    }
    
    int smallestNumber(int n, int t) {
        int x = n;
        while (true) {
            int product = digitProduct(x);
            if (product % t == 0) return x;
            x++;
        }
    }
};
",1447654140
AnujMishra2005,AnujMishra2005,299,3640,cpp,"#include <bits/stdc++.h>





using namespace std;








class Solution {




public:
    int maxFrequency(vector<int>& a, int b, int c) {
        
        
        
        
        int d = a.size();

        
        
        
        
        unordered_map<int, int> e;
        
        
        
        
        
        vector<pair<int, int>> f;



        
        
        
        
        int g = 0;
        
        
        
        
        
        
        while (g < d) {
        
            
            
            
            
            
            
            
            e[a[g]]++;
            
            
            
            
            
            
            f.push_back({a[g] - b, +1});
            
            
            
            
            
            
            
            
            
            f.push_back({a[g] + b + 1, -1});
            
            
            
            
            
            
            
            
            g++;
        }




        




        
        
        
        
        
        set<int> h;
        
        
        
        
        
        
        
        
        auto i = f.begin();
        
        
        
        
        
        
        
        
        while (i != f.end()) {
        
            
            
            
            
            
            
            
            h.insert(i->first);
            
            
            
            
            
            
            
            i++;
        }



        





        
        
        
        
        
        auto j = e.begin();
        
        
        
        
        
        
        
        while (j != e.end()) {
        
            
            
            
            
            
            
            h.insert(j->first);
            
            
            
            
            
            
            j++;
        }




        



        
        
        
        
        
        vector<pair<int, int>> k(f.begin(), f.end());
        
        
        
        
        
        
        sort(k.begin(), k.end());

        
        
        
        
        int l = 0;
        
        
        
        
        
        int m = 0;
        
        
        
        
        
        int n = 0;
        
        
        
        
        
        int o = 0;
        
        
        
        
        
        
        auto p = h.begin();





        
        
        
        
        while (p != h.end()) {
        
            
            
            
            
            int q = *p;
            
            
            
            
            
            
            while (l < k.size() && k[l].first <= q) {
            
                
                
                
                
                
                m += k[l].second;
                
                
                
                
                
                
                
                l++;
            }



            



            
            
            
            
            
            
            
            o = e.count(q) ? e[q] : 0;
            
            
            
            
            
            
            int r = o + min(c, m - o);
            
            
            
            
            
            
            n = max(n, r);




            
            
            
            
            
            p++;
        }



        



        
        
        
        
        return n;
    }





};



",1447731160
eulusoy,eulusoy,300,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        int p1=0;
        int p2=0;
        int p3=0;
        int p4=0;
        int n=nums.size();
        sort(nums.begin(), nums.end());
        int ans = 0;
        while(p2<n){
            while((p2<n)&&nums[p2]<=(2*k+nums[p1])){
                ++p2;
            }
            ans = max(ans, min(p2-p1,numOperations));
            // cout << p1 << "" "" << p2 << endl;
            ++p1;
        }
        p1 = 0;
        p2 = 0;
        while(p2<n){
            p3=p2;
            while((p3<n)&&(nums[p3]==nums[p2])){
                ++p3;
            }
            while(nums[p1]<max(1,nums[p2]-k)){
                ++p1;
            }
            while((p4<n)&&(nums[p4]<=nums[p2]+k)){
                ++p4;
            }
            ans = max(ans, p3-p2+min(numOperations,p4-p3+p2-p1));
            p2=p3;
        }
        return ans;
    }
};",1447701870
eulusoy,eulusoy,300,3626,cpp,"class Solution {
public:
    int pr(int n){
        int ans=1;
        while(n>0){
            ans *= (n%10);
            n /= 10;
                
        }
        return ans;
    }
    int smallestNumber(int n, int t) {
        for(int i=n; ;++i){
            if((pr(i)%t)==0){
                return i;
            }
        }
    }
};",1447660569
eulusoy,eulusoy,300,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        int p1=0;
        int p2=0;
        int p3=0;
        int p4=0;
        long long kl = k;
        int n=nums.size();
        sort(nums.begin(), nums.end());
        int ans = 0;
        while(p2<n){
            while((p2<n)&&((long long)nums[p2]<=(2*kl+(long long)nums[p1]))){
                ++p2;
            }
            ans = max(ans, min(p2-p1,numOperations));
            // cout << p1 << "" "" << p2 << endl;
            ++p1;
        }
        p1 = 0;
        p2 = 0;
        while(p2<n){
            p3=p2;
            while((p3<n)&&(nums[p3]==nums[p2])){
                ++p3;
            }
            while(nums[p1]<max(1,nums[p2]-k)){
                ++p1;
            }
            while((p4<n)&&((long long)nums[p4]<=((long long)nums[p2]+(long long)k))){
                ++p4;
            }
            ans = max(ans, p3-p2+min(numOperations,p4-p3+p2-p1));
            p2=p3;
        }
        return ans;
    }
};",1447705709
Do Duy Loi,LuOsIer,302,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& a, int k, int oper) {
        vector<int> pre(200001, 0);
        for(int u : a) pre[u]++;
        for(int i = 1; i <= 2e5; i++) pre[i] += pre[i - 1];
        int ans = 0;
        for(int u = 1; u <= 1e5; u++) {
            int up = pre[u + k] - pre[u];
            int down = pre[u - 1] - pre[max(0, u - k - 1)];
            ans = max(ans, pre[u] - pre[u - 1] + min(oper, up + down));
        }
        return ans;
    }
};",1447688925
Do Duy Loi,LuOsIer,302,3626,cpp,"class Solution {
public:
    bool check(int x, int t) {
        int res = 1;
        while(x) {
            res *= x % 10;
            x /= 10;
        }
        return res % t == 0;
    }

    int smallestNumber(int n, int t) {
        int ans = n;
        while(!check(ans, t)) ans++;
        return ans;
    }
};",1447654524
Do Duy Loi,LuOsIer,302,3640,cpp,"class Solution {
public:
    unordered_map<int, int> mp;

    int solve(int val, vector<int>& a, int& k) {
        if (val > 1e9) return INT_MIN;
        auto r = upper_bound(a.begin(), a.end(), val + k) - a.begin() - 1;
        auto l = lower_bound(a.begin(), a.end(), val - k) - a.begin();
        return r - l + 1 - mp[val];
    }

    int maxFrequency(vector<int>& a, int k, int oper) {
        int n = a.size(), ans = 0;
        sort(a.begin(), a.end());
        for(int u : a) mp[u]++;
        for(int i = 0; i < n; i++) {
            ans = max(ans, mp[a[i]] + min(oper, solve(a[i], a, k)));
            ans = max(ans, mp[a[i] + k] + min(oper, solve(a[i] + k, a, k)));
            ans = max(ans, mp[a[i] - k] + min(oper, solve(a[i] - k, a, k)));
        }
        return ans;
    }
};",1447714435
Terry Su ,terrysu64,303,3622,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        
        #x-k, x+k
        #run da but then cap it at numOperations?
        
        ans = 1
        
        ranges = []
        for x in nums:
            ranges += [(x-k,x+k)]
        ranges.sort(key=lambda x:(x[0],x[1]))
        
        #(0,2) how many start with at least 2
        # print(ranges)

        for i,j in enumerate(ranges):
            op,ed = j
            I = bisect.bisect_right(ranges,(ed+1, float('-inf')))
            canDo = I-i
            ans = max(ans, min(canDo, numOperations))
        
            same = bisect.bisect_right(ranges,(op,ed)) - i
            I = bisect.bisect_right(ranges,((op+ed)//2 + 1, float('-inf')))
            canDo = I-i
            canDoWithOpRight = canDo - same
            
            
            sameLeft = i-bisect.bisect_left(ranges,(op,ed))+1
            curr = (op+ed)//2
            #op has to be at least curr - 2k
            canDoLeft = i-bisect.bisect_left(ranges,(curr-2*k,float('-inf')))+1
            canDoLeftWithOp = canDoLeft - sameLeft
            
            canDoWithOp = min(canDoWithOpRight + canDoLeftWithOp, numOperations)
            
            ans = max(ans, canDoWithOp+same)
            
      
        
        
        return ans
            

# [23,54]
# 77
# 1
#         da = 
        
#         0-2, 3-5, 4-6
        
#         nums = [1,4,5], k = 1, numOperations = 2

# [37,30,37]
# 26
# 1",1447712768
Terry Su ,terrysu64,303,3626,python3,"class Solution:
    def smallestNumber(self, n: int, t: int) -> int:
        
        def getProd(n):
            ans = 1
            for x in str(n):
                ans *= int(x)
            return ans
    
        while True:
            if not getProd(n)%t: return n
            n += 1",1447653840
Terry Su ,terrysu64,303,3640,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        #x-k, x+k
        #run da but then cap it at numOperations?
        
        ans = 1
        
        ranges = []
        for x in nums:
            ranges += [(x-k,x+k)]
        ranges.sort(key=lambda x:(x[0],x[1]))
        
        #(0,2) how many start with at least 2
        # print(ranges)

        for i,j in enumerate(ranges):
            op,ed = j
            I = bisect.bisect_right(ranges,(ed+1, float('-inf')))
            canDo = I-i
            ans = max(ans, min(canDo, numOperations))
        
            same = bisect.bisect_right(ranges,(op,ed)) - i
            I = bisect.bisect_right(ranges,((op+ed)//2 + 1, float('-inf')))
            canDo = I-i
            canDoWithOpRight = canDo - same
            
            
            sameLeft = i-bisect.bisect_left(ranges,(op,ed))+1
            curr = (op+ed)//2
            #op has to be at least curr - 2k
            canDoLeft = i-bisect.bisect_left(ranges,(curr-2*k,float('-inf')))+1
            canDoLeftWithOp = canDoLeft - sameLeft
            
            canDoWithOp = min(canDoWithOpRight + canDoLeftWithOp, numOperations)
            
            ans = max(ans, canDoWithOp+same)
            
      
        
        
        return ans",1447714497
Arnav Gupta,arnavgupta6508,304,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        sort(nums.begin(), nums.end());
        int n = nums.size();
        int res = 0;
        
        unordered_map<int,int> um;
        for(int i = 0; i<n; i++) um[nums[i]]++;
        
        
        for(int i = 0; i<n; i++){
            int freq = um[nums[i]];
            
            int a = lower_bound(nums.begin(), nums.end(), nums[i]-k) - nums.begin();
            int b = upper_bound(nums.begin(), nums.end(), nums[i]+k) - nums.begin();
            int terms = freq + min(numOperations,b-a-freq);
            res = max(res, terms);
            
            if(um[nums[i]+k] == 0){
                a = lower_bound(nums.begin(), nums.end(), nums[i]) - nums.begin();
                b = upper_bound(nums.begin(), nums.end(), nums[i]+2*k) - nums.begin();
                terms = min(numOperations,b-a);
                res = max(res, terms);
            }
            
            if(um[nums[i]-k] == 0){
                a = lower_bound(nums.begin(), nums.end(), nums[i]-2*k) - nums.begin();
                b = upper_bound(nums.begin(), nums.end(), nums[i]) - nums.begin();
                terms = min(numOperations,b-a);
                res = max(res, terms);
            }
        }
    
        
        return res;
    }
};",1447720691
Arnav Gupta,arnavgupta6508,304,3626,cpp,"class Solution {
public:
    int smallestNumber(int n, int t) {
        int i = n;
        while(true){
            int p = i;
            int pro = 1;
            while(p > 0){
                int ele = p%10;
                pro *= ele;
                p = p/10;
            }
            if(pro%t == 0) return i;
            i++;
        }
        return -1;
    }
};",1447658185
Arnav Gupta,arnavgupta6508,304,3640,cpp,"#define ll long long
class Solution {
public:
    int maxFrequency(vector<int>& nums2, int kk, int numOperations) {
        sort(nums2.begin(), nums2.end());
        int n = nums2.size();
        int res = 0;
        ll k = kk;
        vector<ll> nums(n);
        unordered_map<ll,int> um;
        
        for(int i = 0; i<n; i++) {
            nums[i] = (ll)nums2[i];
            um[nums[i]]++;
        }
        
        for(int i = 0; i<n; i++){
            int freq = um[nums[i]];
            
            int a = lower_bound(nums.begin(), nums.end(), nums[i]-k) - nums.begin();
            int b = upper_bound(nums.begin(), nums.end(), nums[i]+k) - nums.begin();
            int terms = freq + min(numOperations,b-a-freq);
            res = max(res, terms);
            
            if(um[nums[i]+k] == 0){
                a = lower_bound(nums.begin(), nums.end(), nums[i]) - nums.begin();
                b = upper_bound(nums.begin(), nums.end(), nums[i]+2*k) - nums.begin();
                terms = min(numOperations,b-a);
                res = max(res, terms);
            }
            
            if(um[nums[i]-k] == 0){
                a = lower_bound(nums.begin(), nums.end(), nums[i]-2*k) - nums.begin();
                b = upper_bound(nums.begin(), nums.end(), nums[i]) - nums.begin();
                terms = min(numOperations,b-a);
                res = max(res, terms);
            }
        }
    
        
        return res;
    }
};",1447731486
Vasyl Boliukh,vskesha,307,3622,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        nums.sort()
        ln = len(nums)
        sti, eni = 0, 1
        ans = 1

        for v, gr in groupby(nums):
            while nums[sti] < v - k:
                sti += 1
            while eni < ln and nums[eni] <= v + k:
                eni += 1
            lgr = len(list(gr))
            op = min(eni - sti - lgr, numOperations)
            ans = max(ans, op + lgr)

        eni = 1
        for sti in range(ln):
            while eni < ln and nums[eni] <= nums[sti] + 2 * k:
                eni += 1
            op = min(eni - sti, numOperations)
            ans = max(ans, op)

        return ans",1447721091
Vasyl Boliukh,vskesha,307,3626,python3,"class Solution:
    def smallestNumber(self, n: int, t: int) -> int:
        for k in range(n, n + 10):
            pr = 1
            for d in str(k):
                pr *= int(d)
            if pr % t == 0:
                return k",1447670073
Vasyl Boliukh,vskesha,307,3640,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        nums.sort()
        ln = len(nums)
        sti, eni = 0, 1
        ans = 1

        for v, gr in groupby(nums):
            while nums[sti] < v - k:
                sti += 1
            while eni < ln and nums[eni] <= v + k:
                eni += 1
            lgr = len(list(gr))
            op = min(eni - sti - lgr, numOperations)
            ans = max(ans, op + lgr)

        eni = 1
        for sti in range(ln):
            while eni < ln and nums[eni] <= nums[sti] + 2 * k:
                eni += 1
            op = min(eni - sti, numOperations)
            ans = max(ans, op)

        return ans",1447723150
Diwanshu Kumar,d2s2,308,3622,java,"import java.util.Arrays;
import java.util.HashMap;

class Solution {
    public int maxFrequency(int[] a, int k, int numOperations) {
        int max = Arrays.stream(a).max().getAsInt();
        int [] freq = new int[max+2*k+5];
        HashMap<Integer,Integer> map = new HashMap<>();
        for(int e : a){
            freq[e+2*k+1]--;
            freq[e]++;
            map.put(e+k,map.getOrDefault(e+k,0)+1);
        }
        for(int i = 1;i<freq.length;i++){
            freq[i]+=freq[i-1];
        }
//        LeetCodeTesting.pl(freq);
        int ans=0;
        for (int i = 0; i < freq.length; i++) {
            int poss = Math.min(freq[i]-map.getOrDefault(i,0),numOperations)+map.getOrDefault(i,0);
            ans = Math.max(ans,poss);
        }
        return ans;
    }

}",1447704687
Diwanshu Kumar,d2s2,308,3626,java,"class Solution {
    public int smallestNumber(int n, int t) {
        while(!isDiv(n,t)){
            n++;
        }
        return n;
    }
    boolean isDiv(int n,int t){
        long pro = 1;
        while(n>0){
            pro*=(n%10);
            n/=10;
        }
        return pro%t==0;
    }
}",1447654725
Diwanshu Kumar,d2s2,308,3640,java,"import java.util.Arrays;
import java.util.HashMap;
import java.util.TreeMap;

class Solution {
    public int maxFrequency(int[] a, int k, int numOperations) {
        int max = Arrays.stream(a).max().getAsInt();
        TreeMap<Long,Integer> h = new TreeMap<>();
        TreeMap<Long,Integer> map = new TreeMap<>();
        for(long e : a){
            long right = e+k+1;
            h.put(right,h.getOrDefault(right,0)-1);
            h.put(e-k,h.getOrDefault(e-k,0)+1);
            h.put(e,h.getOrDefault(e,0));
            map.put(e,map.getOrDefault(e,0)+1);
        }
        int prev = 0;
        for(long key : h.keySet()){
            h.put(key,h.get(key)+prev);
            prev = h.get(key);
        }
//        LeetCodeTesting.pl(map);
//        LeetCodeTesting.pl(h);
        int ans=1;
        for(long key : h.keySet()){
            Long lower = map.floorKey(key);
            int equal = map.getOrDefault(key,0);
//            if(lower!=null){
//                equal= map.get(lower);
//            }
//            LeetCodeTesting.pl(lower+"" ""+equal);
            int poss = Math.min(h.get(key)-equal,numOperations)+equal;
            ans =Math.max(ans,poss);
        }

        return ans;
    }

}",1447740570
Akshit Tyagi,aksh--_it,311,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        int n=nums.size();
        map<int,int> m;
        int maxi=0,mini=1e9;
        for(auto i:nums){
            maxi=max(maxi,i);
           mini=min(mini,i);}
        for(auto i:nums)
            m[i]++;
        int ans=0;
        sort(nums.begin(),nums.end());
        for(int i=mini;i<=maxi;i++)
            {
                int gap=upper_bound(nums.begin(),nums.end(),i+k)-lower_bound(nums.begin(),nums.end(),i-k)-m[i];
                ans=max(ans,m[i]+min(gap,numOperations));
            
                
            }
        return ans;
    }
};",1447695546
Akshit Tyagi,aksh--_it,311,3626,cpp,"class Solution {
public:
int prod(int n)
{
    int ans=1;
    while(n!=0)
        {
            ans*=(n%10);
            n/=10;
        }
    return ans;
}
    int smallestNumber(int n, int t) {
        for(int j=n;j<=n+1000;j++)
            {
                if(prod(j)%t==0)
                    return j;
            }
        return -1;
    }
};",1447655771
Akshit Tyagi,aksh--_it,311,3640,cpp,"class Solution {
public:
bool isp(vector<int> &nums,int op,int k,int mid,int n)
{
    
    for(int i=mid-1;i<n;i++)
        {
            if(nums[i]-nums[i-mid+1]<=2*k)
                return true;
        }
    return false;
}
    int maxFrequency(vector<int>& nums, int k, int op) {
        sort(nums.begin(),nums.end());
        int n=nums.size();

  map<int,int> m;
        for(auto i:nums)
            m[i]++;
        int ans2=0;
        for(auto i:nums)
            {
                int gap=upper_bound(nums.begin(),nums.end(),i+k)-lower_bound(nums.begin(),nums.end(),i-k)-m[i];
                ans2=max(ans2,m[i]+min(gap,op));
            
                
            }
        int low=1,high=op;
        int ans=1;
        while(low<=high)
            {
                int mid=(low+high)/2;
                if(isp(nums,op,k,mid,n))
                {
                    ans=mid;
                    low=mid+1;
                }
                else high=mid-1;
            }
        
        return max(ans,ans2);
    }
};",1447732329
Zamfirescu George-Iulian,SkinnySnakeLimb,314,3622,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        nums.sort()
        n = len(nums)
        lp = 0
        rp = 0
        lpp = 0
        rpp = 0
        c = Counter(nums)
        ret = max(list(c.values()))
        
        for i, num in enumerate(nums):
            newTar = num
            while newTar - nums[lp] > k:
                lp += 1
            while rp + 1 < n and nums[rp + 1] - newTar <= k:
                rp += 1
            ret = max(ret, min(numOperations + (c[newTar] if newTar in c else 0), rp - lp + 1))
            
            newTar = num + k
            while newTar - nums[lpp] > k:
                lpp += 1
            while rpp + 1 < n and nums[rpp + 1] - newTar <= k:
                rpp += 1
            ret = max(ret, min(numOperations + (c[newTar] if newTar in c else 0), rpp - lpp + 1))
                

        return ret",1447697672
Zamfirescu George-Iulian,SkinnySnakeLimb,314,3626,python3,"class Solution:
    def smallestNumber(self, n: int, t: int) -> int:
        st = n
        while True:
            aux = st
            tot = 1
            while aux > 0:
                tot *= aux % 10
                aux //= 10
            if tot % t == 0:
                return st
            st += 1
                ",1447653232
Zamfirescu George-Iulian,SkinnySnakeLimb,314,3640,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        nums.sort()
        n = len(nums)
        lp = 0
        rp = 0
        lpp = 0
        rpp = 0
        c = Counter(nums)
        ret = max(list(c.values()))
        
        for i, num in enumerate(nums):
            newTar = num
            while newTar - nums[lp] > k:
                lp += 1
            while rp + 1 < n and nums[rp + 1] - newTar <= k:
                rp += 1
            ret = max(ret, min(numOperations + (c[newTar] if newTar in c else 0), rp - lp + 1))
            
            newTar = num + k
            while newTar - nums[lpp] > k:
                lpp += 1
            while rpp + 1 < n and nums[rpp + 1] - newTar <= k:
                rpp += 1
            ret = max(ret, min(numOperations + (c[newTar] if newTar in c else 0), rpp - lpp + 1))
                

        return ret",1447698278
Gaurav Banik,wanderergaurav,315,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        int max_num = *max_element(nums.begin(), nums.end());
        int max_value = max_num + k + 1; 

        
        vector<int> cnt(max_value + 1, 0);
        vector<int> coverage(max_value + 2, 0); 

        
        for (int num : nums) {
            cnt[num]++;
            int start = max(0, num - k);
            int end = num + k + 1; 
            coverage[start]++;
            coverage[end]--;
        }

        
        for (int i = 1; i <= max_value; ++i) {
            coverage[i] += coverage[i - 1];
        }

        
        int max_frequency = 0;
        for (int t = 0; t <= max_value; ++t) {
            if (coverage[t] > 0) {
                int freq_at_t = cnt[t]; 
                int adjustments_needed = coverage[t] - freq_at_t; 
                int possible_adjustments = min(numOperations, adjustments_needed);
                int total_freq = freq_at_t + possible_adjustments;
                max_frequency = max(max_frequency, total_freq);
            }
        }
        return max_frequency;
    }
};",1447692188
Gaurav Banik,wanderergaurav,315,3626,cpp,"class Solution {
public:
int digitProduct(int num) {
    int product = 1;
    while (num > 0) {
        int digit = num % 10;
        product *= digit;
        num /= 10;
    }
    return product;
}
    int smallestNumber(int n, int t) {
        while (true) {
        int product = digitProduct(n);
        if (product % t == 0) {
            return n;
        }
        n++;
    }
    }
};",1447660110
Gaurav Banik,wanderergaurav,315,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        int n = nums.size();
        sort(nums.begin(), nums.end());

        
        set<long long> candidates;
        for (int num : nums) {
            candidates.insert((long long)num);
            candidates.insert((long long)num - k);
            candidates.insert((long long)num + k);
        }

        vector<long long> candidate_x(candidates.begin(), candidates.end());

        int max_freq = 0;

        
        vector<int> prefix(n + 1, 0);
        for (int i = 0; i < n; ++i) {
            prefix[i + 1] = prefix[i] + 1; 
        }

        
        for (long long x : candidate_x) {
            
            auto range = equal_range(nums.begin(), nums.end(), x);
            int freq_x = range.second - range.first;

            
            long long lower = x - k;
            long long upper = x + k;

            auto left = lower_bound(nums.begin(), nums.end(), lower);
            auto right = upper_bound(nums.begin(), nums.end(), upper);

            int count_x = right - left;
            int adjustable = count_x - freq_x;

            
            int total_freq = freq_x + min(adjustable, numOperations);

            
            if (total_freq > max_freq)
                max_freq = total_freq;
        }

        return max_freq;
    }
};",1447724193
Svetoslav Dimitrov,svetstuff,317,3622,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        N = len(nums)
        counts = Counter(nums)
        MIN, MAX = max(1 - 10 ** 5, min(nums)), min(2 * 10 ** 5, max(nums))
        left = right = 0
        res = 1
        nums.sort()
        for i in range(MIN, MAX + 1):
            while left < N and nums[left] < i - k:
                left += 1
            while right < N and nums[right] <= i + k:
                right += 1
            ksimilar = right - left
            res = max(res, counts[i] + min(numOperations, ksimilar - counts[i]))
        return res",1447713363
Svetoslav Dimitrov,svetstuff,317,3626,python3,"class Solution:
    def smallestNumber(self, n: int, t: int) -> int:
        while True:
            m = 1
            for d in str(n):
                m *= int(d)
            if m % t == 0:
                return n
            n += 1",1447656495
Svetoslav Dimitrov,svetstuff,317,3640,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        N = len(nums)
        nums.sort()
        counts = Counter(nums)
        MIN, MAX = nums[0], nums[-1]
        left = right = 0
        points = []
        for num in nums:
            points.append(num - k)
            points.append(num + k)
            points.append(num)
        points.sort()
        res = 1
        for i in points:
            while left < N and nums[left] < i - k:
                left += 1
            while right < N and nums[right] <= i + k:
                right += 1
            ksimilar = right - left
            count = counts[i]
            res = max(res, count + min(numOperations, ksimilar - count))
        return res",1447733007
Divyansh Jain,DivyanshJain2003,318,3622,cpp,"#define ll long long int
#define pi pair<ll,ll>
class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        vector<int> val(100001,0),freq(100001,0);
        for(int i=0;i<nums.size();i++)
        {
            freq[nums[i]]++;
            int lo=max(0,nums[i]-k),hi=min(100000,nums[i]+k);
            val[lo]++;
            if(hi+1<=100000)
                val[hi+1]--;
        }
        for(int i=1;i<100001;i++)
            val[i]+=val[i-1];
        int ans=0;
        for(int i=0;i<100001;i++)
        {
            ans=max(ans,min(numOperations+freq[i],val[i]));
        }
        return ans;
    }
};",1447691358
Divyansh Jain,DivyanshJain2003,318,3626,cpp,"class Solution {
public:
    int smallestNumber(int n, int t) {
        while(true)
        {
           int f=n,p=1;
            while(f!=0)
                {
                    p*=f%10;
                    f/=10;
                }
            if(p%t==0)
                break;
            n++;
        }
        return n;
    }
};",1447654897
Divyansh Jain,DivyanshJain2003,318,3640,cpp,"#include <vector>
#include <map>
#include <set>
#include <algorithm>

#define ll long long int

class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        map<ll, ll> mp,mp1, freq;
        set<ll> hs;
        for (ll i = 0; i < nums.size(); i++) {
            freq[nums[i]]++;
            ll lo = max(0, nums[i] - k), hi = min(1000000000, nums[i] + k);
            hs.insert(lo);
            hs.insert(hi);
            hs.insert(nums[i]);
            mp1[lo]++;
            if (hi + 1 <= 1000000000LL)
                mp1[(hi + 1)]--;
        }
        for (auto it = mp1.begin(); it != mp1.end(); ++it) {
            auto prev = it == mp1.begin() ? it : std::prev(it);
            if(prev!=it)
            mp1[it->first] += prev->second;
        }
        for(auto x:mp1)
            mp[-x.first]=x.second;
        ll ans = 0;
        for (auto x : hs) {
            auto val = mp.lower_bound(-x); 
            // cout<<val->second<<"" ""<<freq[x]<<endl;
            ans =max(ans,min(numOperations + freq[x], val->second));
        }
        
        return ans;
    }
};
",1447741471
Swarnendu Mondal,swarnendu2002,319,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        sort(nums.begin(),nums.end());
        int n = nums.size();
        int ans = 0;
        map<int,int> mp;
        for(int i = 0;i<n;i++){
            mp[nums[i]]++;
        }
        for(int i = nums[0]-k-1;i<=nums[n-1]+k+1;i++){
            int lindex = lower_bound(nums.begin(),nums.end(),i-k)-nums.begin();
            int rindex = upper_bound(nums.begin(),nums.end(),i+k)-nums.begin();
            // if(i==20){
            //     cout<<lindex<<"" ""<<rindex<<endl;
            // }     
            rindex--;
            int d = 0;
            if(mp.count(i)){
                d = mp[i];
            }
            ans = max(ans,min(rindex-lindex+1,numOperations+d));
        }
        return ans;
    }
};",1447690311
Swarnendu Mondal,swarnendu2002,319,3626,cpp,"class Solution {
public:
    int smallestNumber(int n, int t) {
        int ans;
        int num = n;
        while(true){
            int temp = num;
            int p = 1;
            while(temp>0){
                p*=(temp%10);
                temp/=10;
            }
            if(p%t==0){
                ans = num;
                break;
            }
            num++;
        }
        return ans;
    }
};",1447657101
Swarnendu Mondal,swarnendu2002,319,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        map<int,int> mp;
        map<int,int> m;
        int n = nums.size();
        for(int i = 0;i<n;i++){
            mp[nums[i]]++;
            m[nums[i]-k]++;
            m[nums[i]+k+1]--;
        }
        int ans = 0;
        int cnt = 0;
        for(auto it : m){
            cnt+=it.second;
            ans = max(ans,min(cnt,numOperations));
        }
        sort(nums.begin(),nums.end());
        for(int j = 0;j<n;j++){
            int i = nums[j];
            int lindex = lower_bound(nums.begin(),nums.end(),i-k)-nums.begin();
            int rindex = upper_bound(nums.begin(),nums.end(),i+k)-nums.begin();  
            rindex--;
            int d = 0;
            if(mp.count(i)){
                d = mp[i];
            }
            ans = max(ans,min(rindex-lindex+1,numOperations+d));
        }
        return ans;
    }
};",1447733051
Yash Savera,y_a_s,323,3622,java,"class Solution 
{
    public int maxFrequency(int[] nums, int k, int op) 
    {
        int[] freq = new int[100001];
        int [] ps=new int [100001];
        int n = nums.length;
        
        for (int i = 0; i < n; i++) {
            ps[nums[i]]++;
            freq[nums[i]]++;
        }

        for (int i = 1; i <= 100000; i++) {
            ps[i] += ps[i - 1];
        }
        
        int ans = 0;
        
        for (int i = 1; i <= 100000; i++) {
            int start = Math.max(1, i - k);
            int end = Math.min(100000, i + k);
                ans = Math.max(ans, Math.min(ps[end] - ps[start-1]-freq[i], op)+freq[i]);
        }
        
        return ans;
    }
}
",1447677667
Yash Savera,y_a_s,323,3626,java,"class Solution 
{
    public int smallestNumber(int n, int t)
    {
        int ans=n;
        for(;;ans++)
            {
                if(check(ans,t))
                    return ans;
            }
        
    }
    boolean check(int ans,int t)
    {
        long val=1L;
        while(ans>0)
            {
            val=val*(ans%10);
                ans=ans/10;
            }
        return val%t==0L;
    }
}",1447654366
Yash Savera,y_a_s,323,3640,java,"class Solution 
{
    public int maxFrequency(int[] nums, int k, int op) 
    {
         Arrays.sort(nums);
         int i=0,n=nums.length,ans=0,j=0;
        Map<Integer,Integer> mp=new HashMap<>();
        for(i=0;i<n;i++)
            mp.put(nums[i],mp.getOrDefault(nums[i],0)+1);
         for(i=0;i<n;i++)
             {
                 ans=Math.max(ans,solve(i,nums,k,op,mp));
             }
            for(i=0;i<n;)
                {
                    while(i<n && nums[i]-nums[j]<=2*k)
                    {
                        ans=Math.max(ans,Math.min(i-j+1,op));
                        i++;
                    }
                    while(i<n && j<i && nums[i]-nums[j]>=2*k)
                        {
                            j++;
                        }
                }
        return ans;
    }
int solve(int idx,int nums[],int k,int op,Map<Integer,Integer> mp)
    {
        int n=nums.length;
        int s=0,e=n-1,m1=0,m2=0,ans1=-1,ans2=-1;
        while(s<=e)
            {
                m1=s+(e-s)/2;
                if(nums[m1]+k>=nums[idx])
                {
                    ans1=m1;
                    e=m1-1;
                }
                else
                {
                     s=m1+1;
                }
            }
        s=0;
        e=n-1;
         while(s<=e)
            {
                m2=s+(e-s)/2;
                if(nums[m2]<=nums[idx]+k)
                {
                    ans2=m2;
                    s=m2+1;
                }
                else
                {
                     e=m2-1;
                }
            }
        return mp.get(nums[idx])+Math.min(ans2-ans1+1-mp.get(nums[idx]),op); 
    }
}",1447724973
Vaibhav Gaur,ciphercraft,324,3622,cpp,"function<vector<pair<int,int>>(vector<int>&, int)> buildRangeEvents = [](vector<int>& nums, int distance) {
   vector<pair<int,int>> rangeEvents;
   for (int value : nums) {
       rangeEvents.emplace_back(value - distance, +1);
       rangeEvents.emplace_back(value + distance + 1, -1);
   }
   sort(rangeEvents.begin(), rangeEvents.end());
   return rangeEvents;
};

function<map<int,int>(vector<int>&)> buildValueCount = [](vector<int>& nums) {
   map<int,int> valueCount;
   for (int value : nums) {
       valueCount[value]++;
   }
   return valueCount;
};

function<set<int>(vector<pair<int,int>>&, map<int,int>&)> gatherCheckPoints = 
   [](vector<pair<int,int>>& rangeEvents, map<int,int>& valueCount) {
       set<int> checkPoints;
       for (auto& event : rangeEvents) {
           checkPoints.insert(event.first);
       }
       for (auto& entry : valueCount) {
           checkPoints.insert(entry.first);
       }
       return checkPoints;
};

function<int(vector<pair<int,int>>&, map<int,int>&, set<int>&, int)> calculateMaxFrequency = 
   [](vector<pair<int,int>>& rangeEvents, map<int,int>& valueCount, 
      set<int>& checkPoints, int maxMoves) {
       int eventIndex = 0, rangeOverlap = 0, maxResult = 0;
       
       for (int point : checkPoints) {
           while (eventIndex < rangeEvents.size() && rangeEvents[eventIndex].first <= point) {
               rangeOverlap += rangeEvents[eventIndex].second;
               eventIndex++;
           }
           
           int baseCount = 0;
           if (valueCount.count(point)) {
               baseCount = valueCount.at(point);
           }
           int achievableCount = baseCount + min(maxMoves, rangeOverlap - baseCount);
           maxResult = max(maxResult, achievableCount);
       }
       return maxResult;
};

class Solution {
public:
   int maxFrequency(vector<int>& nums, int distance, int maxMoves) {
       auto rangeEvents = buildRangeEvents(nums, distance);
       auto valueCount = buildValueCount(nums);
       auto checkPoints = gatherCheckPoints(rangeEvents, valueCount);
       
       return calculateMaxFrequency(rangeEvents, valueCount, checkPoints, maxMoves);
   }
};",1447741725
Vaibhav Gaur,ciphercraft,324,3626,cpp,"class Solution {
private:
    int calculateDigitProduct(int number) {
        int digitProduct = 1;
        while(number) {
            digitProduct *= number % 10;
            number /= 10;
        }
        return digitProduct;
    }
    
    bool isDigitProductDivisible(int number, int target) {
        int digitProduct = calculateDigitProduct(number);
        return digitProduct % target == 0;
    }

public:
    int smallestNumber(int startNum, int target) {
        while(startNum) {
            if(isDigitProductDivisible(startNum, target)) {
                return startNum;
            }
            startNum++;
        }
        return 0;
    }
};",1447742065
Vaibhav Gaur,ciphercraft,324,3640,cpp,"function<vector<pair<int,int>>(vector<int>&, int)> buildRangeEvents = [](vector<int>& nums, int distance) {
   vector<pair<int,int>> rangeEvents;
   for (int value : nums) {
       rangeEvents.emplace_back(value - distance, +1);
       rangeEvents.emplace_back(value + distance + 1, -1);
   }
   sort(rangeEvents.begin(), rangeEvents.end());
   return rangeEvents;
};

function<map<int,int>(vector<int>&)> buildValueCount = [](vector<int>& nums) {
   map<int,int> valueCount;
   for (int value : nums) {
       valueCount[value]++;
   }
   return valueCount;
};

function<set<int>(vector<pair<int,int>>&, map<int,int>&)> gatherCheckPoints = 
   [](vector<pair<int,int>>& rangeEvents, map<int,int>& valueCount) {
       set<int> checkPoints;
       for (auto& event : rangeEvents) {
           checkPoints.insert(event.first);
       }
       for (auto& entry : valueCount) {
           checkPoints.insert(entry.first);
       }
       return checkPoints;
};

function<int(vector<pair<int,int>>&, map<int,int>&, set<int>&, int)> calculateMaxFrequency = 
   [](vector<pair<int,int>>& rangeEvents, map<int,int>& valueCount, 
      set<int>& checkPoints, int maxMoves) {
       int eventIndex = 0, rangeOverlap = 0, maxResult = 0;
       
       for (int point : checkPoints) {
           while (eventIndex < rangeEvents.size() && rangeEvents[eventIndex].first <= point) {
               rangeOverlap += rangeEvents[eventIndex].second;
               eventIndex++;
           }
           
           int baseCount = 0;
           if (valueCount.count(point)) {
               baseCount = valueCount.at(point);
           }
           int achievableCount = baseCount + min(maxMoves, rangeOverlap - baseCount);
           maxResult = max(maxResult, achievableCount);
       }
       return maxResult;
};

class Solution {
public:
   int maxFrequency(vector<int>& nums, int distance, int maxMoves) {
       auto rangeEvents = buildRangeEvents(nums, distance);
       auto valueCount = buildValueCount(nums);
       auto checkPoints = gatherCheckPoints(rangeEvents, valueCount);
       
       return calculateMaxFrequency(rangeEvents, valueCount, checkPoints, maxMoves);
   }
};",1447741213
Manish,purohitMn,325,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        sort(nums.begin(), nums.end());
        int low = nums[0] - k;
        int high = nums.back() + k;

        int n = nums.size();
        int ans = 0;
        unordered_map<int,int> mp;
        for(int num : nums) mp[num]++;
        for(int i = low; i <= high; i++) {
            int small = lower_bound(nums.begin(), nums.end(), i - k) - nums.begin();
            int big = n - (upper_bound(nums.begin(), nums.end(), i + k) - nums.begin());

            int K = (n - (small + big));
            int same = mp[i];

            ans = max(ans, same + min(numOperations, K - same));
        }

        return ans;
    }
};",1447683531
Manish,purohitMn,325,3626,cpp,"class Solution {
int product(int n) {
    int p = 1;
    while(n) {
        p *= (n % 10);
        n /= 10;
    }

    return p;
}
public:
    int smallestNumber(int n, int t) {
        for(int i = n; i < 1000; i++) {
            int p = product(i);
            if(p % t == 0) return i;
        }

        return -1;
    }
};",1447659779
Manish,purohitMn,325,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        map<int,int> mp;
        map<int,int> cnt;
        sort(nums.begin(),nums.end());
        int n = nums.size();
        for(int num : nums) {
            cnt[num]++;
            mp[num-k]++;
            mp[num+k+1]--;
        }

        int ans = 0;
        int f = 0;
        for(auto it : mp) {
            int num = it.first;
            f = f + it.second;
            int c = cnt[num];

            ans = max(ans, c + min(numOperations, f - c));
        }

       for(int i : nums) {
            int small = lower_bound(nums.begin(), nums.end(), i - k) - nums.begin();
            int big = n - (upper_bound(nums.begin(), nums.end(), i + k) - nums.begin());

            int K = (n - (small + big));
            int same = cnt[i];

            ans = max(ans, same + min(numOperations, K - same));
        }
        
        return ans;
    }
};",1447742151
Mohit Kanodia,yoda_codiyapa,327,3622,java,"class Solution {
    public int maxFrequency(int[] nums, int k, int numOperations) {
        int n = nums.length;
        Arrays.sort(nums);
        
        int max = 0;
        HashMap<Integer, Integer> map = new HashMap<>();
        
        for(int i : nums) {
            map.put(i, map.getOrDefault(i, 0) + 1);
        }

        for(int i = 0; i <= 100000; i++) {
            int v = map.getOrDefault(i, 0);
            
            int c1 = bs(i + k, n, nums);
            int c2 = bs(i - k - 1, n, nums);
            
            int t = c1 - c2;
            int ops = t - v;
            int fr = v + Math.min(ops, numOperations);
            max = Math.max(max, fr);
        }
        
        return max;
    }

    // count number <= t
    int bs(int t, int n, int[] nums) {
        int low = 0;
        int high = n-1;

        while(low < high) {
            int mid = low + (high - low + 1)/2;
            int v = nums[mid];
            if(v <= t) {
                low = mid;
            } else {
                high = mid-1;
            }
        }

        if(nums[low] > t) {
            return 0;
        } else {
            return low + 1;
        }
    }
}",1447707353
Mohit Kanodia,yoda_codiyapa,327,3626,java,"class Solution {
    public int smallestNumber(int n, int t) {
        int ans = n;
        while(true) {
            int curr = ans;
            int x = 1;
            while(curr > 0) {
                x *= curr%10;
                curr = curr/10;
            }
            if(x%t == 0) {
                break;
            }
            ans++;
        }
        return ans;
    }
}",1447659920
Mohit Kanodia,yoda_codiyapa,327,3640,java,"class Solution {
    public int maxFrequency(int[] nums, int k, int numOperations) {
        int n = nums.length;
        Arrays.sort(nums);
        
        int max = 0;
        HashMap<Integer, Integer> map = new HashMap<>();
        
        for(int i : nums) {
            map.put(i, map.getOrDefault(i, 0) + 1);
        }

        for(int i : map.keySet()) {
            int v = map.getOrDefault(i, 0);
            
            int c1 = bs(i + k, n, nums);
            int c2 = bs(i - k - 1, n, nums);
            
            int t = c1 - c2;
            int ops = t - v;
            int fr = v + Math.min(ops, numOperations);
            max = Math.max(max, fr);
        }

        int i = 0;
        int j = 0;

        while(j < n) {
            while(i < n && nums[j] - nums[i] > 2*k) {
                i++;
            }
            int curr = Math.min(j-i+1, numOperations);
            max = Math.max(curr, max);
            j++;
        }
        
        return max;
    }

    // count number <= t
    int bs(int t, int n, int[] nums) {
        int low = 0;
        int high = n-1;

        while(low < high) {
            int mid = low + (high - low + 1)/2;
            int v = nums[mid];
            if(v <= t) {
                low = mid;
            } else {
                high = mid-1;
            }
        }

        if(nums[low] > t) {
            return 0;
        } else {
            return low + 1;
        }
    }
}",1447733962
Phan Huy Hoang,phhoang98a,328,3622,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        freq = collections.Counter(nums)
        max_value = max(nums)
        prefix = [0] * (max_value+1)
        for i in range(1, max_value+1):
            count = freq[i] if i in freq else 0
            prefix[i] = prefix[i-1]+count
        res = 0
        for key, value in freq.items():
            total_nums = prefix[min(key+k,max_value)] - prefix[max(0,key-k-1)]-value
            total_nums = min(numOperations, total_nums)
            res = max(res, total_nums+value)
        for i in range(1, max_value+1):
            if i not in freq:
                total_nums = prefix[min(i+k,max_value)] - prefix[max(0,i-k-1)]
                total_nums = min(numOperations, total_nums)
                res = max(res, total_nums)
        return res",1447694687
Phan Huy Hoang,phhoang98a,328,3626,python3,"class Solution:
    def smallestNumber(self, n: int, t: int) -> int:
        curr = n
        while True:
            str_number = str(curr)
            product = 1
            for char in str_number:
                product *= int(char)
            if product % t ==0:
                return curr
            curr +=1",1447655802
Phan Huy Hoang,phhoang98a,328,3640,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:

        def find_left(value):
            first, last = 0, len(nums)-1
            pos = 0
            while first <= last:
                mid = (first + last)//2
                if nums[mid]>=value:
                    pos = mid
                    last = mid -1
                else:
                    first = mid +1
            return pos

        def find_right(value):
            first, last = 0, len(nums)-1
            pos = 0
            while first <= last:
                mid = (first + last)//2
                if nums[mid]<=value:
                    pos = mid
                    first = mid +1
                else:
                    last = mid  - 1
            return pos
        
        nums.sort()
        freq = collections.Counter(nums)
        max_value = max(nums)
        res = 0
        for key, value in freq.items():
            l = find_left(max(1,key-k))
            r = find_right(min(max_value,key+k))
            total_nums = r-l+1-value
            total_nums = min(numOperations, total_nums)
            res = max(res, total_nums+value)

        for i in range(len(nums)):
            l = find_left(max(1,nums[i]-2*k))
            total_nums = i-l+1
            total_nums = min(numOperations, total_nums)
            res = max(res, total_nums)
            
        return res",1447734209
Programmer,programmer_kz,329,3622,kotlin,"class Solution {
    
fun maxFrequency(nums: IntArray, k: Int, numOperations: Int): Int {

        
    nums.sort()
    val prefix = TreeMap<Int, Int>()
    val freq = hashMapOf<Int, Int>()
    for (n in nums) {
        freq[n] = (freq[n] ?: 0) + 1
        val left = n - k
        val right = n + k + 1
        prefix[left] = (prefix[left] ?: 0) + 1
        prefix[right] = (prefix[right] ?: 0) - 1
        if (!prefix.containsKey(n)) {
            prefix[n] = 0
        }
    }
    var max = 0
    var sum = 0
    for ((n, fr) in prefix) {
        sum += fr
        val actual = freq[n] ?: 0
        val min = Math.min(sum - actual, numOperations) + actual
        max = Math.max(max, min)
    }

    return max
}
    
}",1447723840
Programmer,programmer_kz,329,3626,kotlin,"class Solution {
    fun smallestNumber(n: Int, t: Int): Int {
        
    var n = n
    while (true) {
        val digits = ""$n""
        var mul = 1
        for (d in digits) {
            mul *= (d - '0')
        }
        if(mul%t==0)
            return n
         n++
    }

    return 0
    }
}",1447661689
Programmer,programmer_kz,329,3640,kotlin,"class Solution {
    fun maxFrequency(nums: IntArray, k: Int, numOperations: Int): Int {
        
    nums.sort()
    val prefix = TreeMap<Int, Int>()
    val freq = hashMapOf<Int, Int>()
    for (n in nums) {
        freq[n] = (freq[n] ?: 0) + 1
        val left = n - k
        val right = n + k + 1
        prefix[left] = (prefix[left] ?: 0) + 1
        prefix[right] = (prefix[right] ?: 0) - 1
        if (!prefix.containsKey(n)) {
            prefix[n] = 0
        }
    }
    var max = 0
    var sum = 0
    for ((n, fr) in prefix) {
        sum += fr
        val actual = freq[n] ?: 0
        val min = Math.min(sum - actual, numOperations) + actual
        max = Math.max(max, min)
    }

    return max
    }
    
}",1447725891
Atul,coderchamp07,330,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        int n = nums.size();
        sort(nums.begin(), nums.end());

        map<int, int> f;
        for(int i = 0; i < n; i++)
            f[nums[i]]++;

        vector<int> poss(nums.back() + 2, 0);
        for(int i : nums) {
            poss[max(0, i - k)]++;
            if(i + k + 1 < poss.size())
                poss[i + k + 1]--;
        }

        for(int i = 1; i < poss.size(); i++)
            poss[i] += poss[i - 1];


        int mxFreq = 0;
        for(int i = 0; i < poss.size(); i++) {
            int curPoss = f[i];
            curPoss += min(numOperations, poss[i] - f[i]);
            mxFreq = max(mxFreq, curPoss);
        }
        return mxFreq;
    }
};",1447681059
Atul,coderchamp07,330,3626,cpp,"class Solution {
    long long prodDig(int n) {
        long long ans = 1;
        while(n > 0) {
            ans *= (n % 10);
            n /= 10;
        }
        return ans;
    }
public:
    int smallestNumber(int n, int t) {
        while(prodDig(n) % t != 0)
            n++;
        return n;
    }
};",1447654506
Atul,coderchamp07,330,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        int n = nums.size();

        int mxFreq = 0;
        unordered_map<int, int> f;
        for(int i : nums)
            mxFreq = max(mxFreq, ++f[i]);

        map<int, int> poss;
        for(int i : nums) {
            poss[max(0, i - k)]++;
            poss[i + k + 1]--;
        }

        int prev = 0;
        for(auto& [k, v] : poss) {
            v += prev;
            prev = v;
            // cout << k << "" "" << v << ""\n"";
        }

        for(int ans : nums) {
            auto it = poss.upper_bound(ans);
            it--;

            mxFreq = max(mxFreq, f[ans] + min(numOperations, it->second - f[ans]));
        }
        for(auto& [k, v] : poss) {
            mxFreq = max(mxFreq, f[v] + min(numOperations, v - f[v]));
        }
        return mxFreq;
    }
};",1447700499
Dinesh Sharma,dineshgroach,331,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int opr) {
        map<int,int> mp;
        for(auto& num:nums) mp[num]++;
        vector<pair<int,int>> v;
        vector<int>pf;
        for(auto& [ele,freq]:mp) {
            v.push_back({ele,freq});
            if(pf.empty()) pf.push_back(freq);
            else pf.push_back(freq + pf.back());
        }
        sort(v.begin(),v.end());
        int ans = 0,n = v.size();
        for(int i = 0; i < v.size(); i++)
        {
            int curr = v[i].second;
            int left = 0,right = 0;
            int low = i + 1,high = n - 1,idx = -1;
            while(low <= high)
            {
                int mid = (low + high) >> 1;
                if((v[mid].first - k) <= v[i].first)
                {
                    idx = mid;
                    low = mid + 1;
                }
                else high = mid - 1;
            }
            if(idx != -1)
            {
                right = pf[idx];
                right -= pf[i];
            }
            low = 0,high = i - 1,idx = -1;
            while(low <= high)
            {
                int mid = (low + high) >> 1;
                if((v[mid].first + k) >= v[i].first)
                {
                    idx = mid;
                    high = mid - 1;
                }
                else low = mid + 1;
            }
            if(idx != -1)
            {
                left = pf[i - 1];
                if(idx) left -= pf[idx - 1];
            }
            ans = max(ans,curr + min(left + right,opr));
        }
        map<int,int> m;
        for(auto& num:nums)
        {
            m[num - k] += 1;
            m[num + k + 1] -= 1;
        }
        int pref = 0;
        for(auto& [num,val]:m)
        {
            pref += val;
            ans = max(ans,min(pref,opr));
        }
        return ans;
    }
};",1447725621
Dinesh Sharma,dineshgroach,331,3626,cpp,"class Solution {
public:
    int smallestNumber(int n, int t) {
        for(int i = n; i <= 500; i++)
        {
            int res = 1,tp = i;
            while(tp) {
                res *= (tp % 10); tp/= 10;
            }
            if((res % t) == 0) return i;
        }
        return 0;
    }
};",1447655447
Dinesh Sharma,dineshgroach,331,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int opr) {
        map<int,int> mp;
        for(auto& num:nums) mp[num]++;
        vector<pair<int,int>> v;
        vector<int>pf;
        for(auto& [ele,freq]:mp) {
            v.push_back({ele,freq});
            if(pf.empty()) pf.push_back(freq);
            else pf.push_back(freq + pf.back());
        }
        sort(v.begin(),v.end());
        int ans = 0,n = v.size();
        for(int i = 0; i < v.size(); i++)
        {
            int curr = v[i].second;
            int left = 0,right = 0;
            int low = i + 1,high = n - 1,idx = -1;
            while(low <= high)
            {
                int mid = (low + high) >> 1;
                if((v[mid].first - k) <= v[i].first)
                {
                    idx = mid;
                    low = mid + 1;
                }
                else high = mid - 1;
            }
            if(idx != -1)
            {
                right = pf[idx];
                right -= pf[i];
            }
            low = 0,high = i - 1,idx = -1;
            while(low <= high)
            {
                int mid = (low + high) >> 1;
                if((v[mid].first + k) >= v[i].first)
                {
                    idx = mid;
                    high = mid - 1;
                }
                else low = mid + 1;
            }
            if(idx != -1)
            {
                left = pf[i - 1];
                if(idx) left -= pf[idx - 1];
            }
            ans = max(ans,curr + min(left + right,opr));
        }
        map<int,int> m;
        for(auto& num:nums)
        {
            m[num - k] += 1;
            m[num + k + 1] -= 1;
        }
        int pref = 0;
        for(auto& [num,val]:m)
        {
            pref += val;
            ans = max(ans,min(pref,opr));
        }
        return ans;
    }
};",1447726107
Whytho,nothingtoseeheree,332,3622,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        from collections import Counter
        cnt = Counter(nums)
        xs = set()
        for num in nums:
            xs.update([num - k, num, num + k + 1])
        xs = sorted(xs)
        idx = {x: i for i, x in enumerate(xs)}
        diff = [0] * (len(xs) + 1)
        for num in nums:
            diff[idx[num - k]] += 1
            diff[idx[num + k + 1]] -= 1
        cov = [0] * len(xs)
        c = 0
        for i in range(len(xs)):
            c += diff[i]
            cov[i] = c
        res = 0
        for i, x in enumerate(xs):
            c = cnt.get(x, 0)
            need = cov[i] - c
            total = c + min(numOperations, need)
            res = max(res, total)
        return res
",1447670699
Whytho,nothingtoseeheree,332,3626,python3,"class Solution:
    def smallestNumber(self, n: int, t: int) -> int:
        for i in range(n, 101):
            if '0' in str(i):
                return i
            p=1
            for d in str(i):
                p*=int(d)
            if p%t==0:
                return i
",1447652933
Whytho,nothingtoseeheree,332,3640,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        from collections import Counter, defaultdict

        # Build intervals and counts
        events = defaultdict(int)
        cnt_x = Counter(nums)
        for num in nums:
            events[num - k] += 1
            events[num + k + 1] -= 1

        # Collect all unique points
        points = set(events.keys()).union(cnt_x.keys())
        sorted_points = sorted(points)

        current_overlap = 0
        max_freq = 0

        for x in sorted_points:
            if x in events:
                current_overlap += events[x]
            cnt = cnt_x.get(x, 0)
            total_overlap = current_overlap
            # Calculate possible frequency at x
            freq = min(total_overlap, cnt + numOperations)
            max_freq = max(max_freq, freq)

        return max_freq
",1447691300
kamal Nath,Kamal__nath,333,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int op) {
        int eq = 100001;
        int n = nums.size();
        int ma = *max_element(nums.begin(), nums.end());
        vector<int> diff(300000, 0), noop(300000, 0);
        for(int i = 0; i < n; i++){
            noop[nums[i] + eq]++;
            diff[nums[i] + k + 1 + eq]--;
            diff[nums[i] - k + eq]++;
        }
        for(int i = 1; i < diff.size(); i++){
            diff[i] += diff[i - 1];
        }
        int res = 1;
        for(int i = 0; i < diff.size(); i++){
            int p = (diff[i] - noop[i]);
            p = min(p, op);
            res = max(res, p + noop[i]);
        }
        return res;
    }
};",1447697339
kamal Nath,Kamal__nath,333,3626,cpp,"class Solution {
public:
    int digprod(int n){
        int res = 1;
        while(n){
            res *= n % 10;
            n /= 10;
        }
        return res;
    }
    int smallestNumber(int n, int t) {
        while(true){
            if(digprod(n) % t == 0){
                return n;
            }
            n++;
        }
        return -1;
    }
};",1447655147
kamal Nath,Kamal__nath,333,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int op) {
        map<int, int> mp, n;
        for(int x : nums){
            mp[x - k]++;
            mp[x + k + 1]--;
            mp[x] += 0;
            n[x]++;
        }
        int res = 1, line = 0;
        for(auto& [x, y] : mp){
            line += y;
            int p = line - n[x];
            p = min(p, op);
            res = max(res, p + n[x]);
            
        }
        return res;
    }
};",1447735267
Ivan Kuznetsov,iivankon,334,3622,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        from sortedcontainers import SortedList
        nums.sort()
        l = 0
        cnt = Counter(nums)
        su_nums = sorted(set(nums))
        # print(su_nums)
        # print(cnt)
        l, r = 0, 1
        max_num = 0
        total = cnt[su_nums[0]]
        for c in su_nums:
            # print('Iter', c,)
            while r < len(su_nums) and su_nums[r] - c <= k:
                total += cnt[su_nums[r]]
                r += 1
            while c - su_nums[l] > k:
                total -= cnt[su_nums[l]]
                l += 1
            max_num = max(max_num, cnt[c] + min(total - cnt[c], numOperations))

        l = 0
        max_range = 0
        for i, num in enumerate(nums):
            while num - nums[l] > 2 * k:
                # print('removing', nums[l])
                l += 1
            other = i - l + 1
            max_range = max(max_range, min(other, numOperations))
        return max(max_num, max_range)",1447726697
Ivan Kuznetsov,iivankon,334,3626,python3,"class Solution:
    def smallestNumber(self, n: int, t: int) -> int:
        def is_div(num):
            digits = [int(ch) for ch in str(num)]
            result = 1
            for dig in digits:
                result *= dig
            return result % t == 0

        while not is_div(n):
            n += 1

        return n",1447658785
Ivan Kuznetsov,iivankon,334,3640,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        from sortedcontainers import SortedList
        nums.sort()
        l = 0
        cnt = Counter(nums)
        su_nums = sorted(set(nums))
        # print(su_nums)
        # print(cnt)
        l, r = 0, 1
        max_num = 0
        total = cnt[su_nums[0]]
        for c in su_nums:
            # print('Iter', c,)
            while r < len(su_nums) and su_nums[r] - c <= k:
                total += cnt[su_nums[r]]
                r += 1
            while c - su_nums[l] > k:
                total -= cnt[su_nums[l]]
                l += 1
            max_num = max(max_num, cnt[c] + min(total - cnt[c], numOperations))

        l = 0
        max_range = 0
        for i, num in enumerate(nums):
            while num - nums[l] > 2 * k:
                # print('removing', nums[l])
                l += 1
            other = i - l + 1
            max_range = max(max_range, min(other, numOperations))
        return max(max_num, max_range)",1447726980
leetgoat_dot_dev,leetgoat_dot_dev,335,3622,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        c = Counter(nums)
        nums = sorted(nums)
        # print(f'nums={nums}')
        res = 0
        
        big = max(nums)
        
        
        def findCount(gX, lteY, nums):
            leftIndex = bisect_right(nums, gX)
            rightIndex = bisect_right(nums, lteY) - 1
            return max(0, rightIndex - leftIndex + 1)

        def findCountInclusive(gteX, lY, nums):
            leftIndex = bisect_left(nums, gteX)
            rightIndex = bisect_left(nums, lY) - 1
            return max(0, rightIndex - leftIndex + 1)
        
        
        
        # change all to the ith number
        for num in range(1, big + 1):
            
            # find numbers < num that we can change into range
            lessThanChangeable = findCountInclusive(num - k, num, nums)
            moreThanChangeable = findCount(num, num + k, nums)
            
            allowedChange = min(numOperations, lessThanChangeable + moreThanChangeable)
            res = max(res, allowedChange + c[num])
            continue
        
        return res
            
            
            
#             print(f'num={num}')
#             # fin the leftmost number, < num, where that number is >= num-k
#             # left = 0
#             # right = len(nums) - 1
#             changeable = 0
            
#             insertIdx = bisect.bisect_left(nums, num)
#             print(f'insert idx: {insertIdx}')
            
#             leftmostIdx = findLeftmost(nums, num, num - k)
# #             # print(f'init changeable: {changeable}')
# #             resHere = None
# #             while left <= right:
# #                 m = (left + right) // 2
# #                 leftNum = nums[m]
# #                 if leftNum >= num - k:
# #                     resHere = m
# #                     right = m - 1
# #                 else:
# #                     left = m + 1
            
# #             changeable += i - resHere # dont include current

#             rightmostIdx = findRightmost(nums, num, num + k)
    
#             print(f'leftmostIdx: {leftmostIdx}, rightmostIdx: {rightmostIdx}')
        
#             leftReach = (insertIdx - leftmostIdx) if leftmostIdx != -1 else 0
#             rightReach = (rightmostIdx - insertIdx) if rightmostIdx != -1 else 0
            
#             print(f'left reach: {leftReach}')
#             print(f'right reach: {rightReach}')
            
            
#             # find rightmost >= i where that number is <= num+k
# #             left = i
# #             right = len(nums) - 1
# #             resHere = None
# #             while left <= right:
# #                 m = (left+right)//2
# #                 rightNum = nums[m]
# #                 if rightNum <= num + k:
# #                     resHere = m
# #                     left = m + 1
# #                 else:
# #                     right = m - 1
            
# #             changeable += resHere - i
# #             changeable = min(changeable, numOperations)
# #             changeable += c[num]
            
#             res = max(res, changeable)
        
        # return res
                
                
                    
            
        ",1447713801
leetgoat_dot_dev,leetgoat_dot_dev,335,3626,python3,"class Solution:
    def smallestNumber(self, n: int, t: int) -> int:
        start = n
        while True:
            string = str(start)
            product = 1
            for c in string:
                product *= int(c)
            if product % t == 0:
                return start
            start += 1
        
        ",1447653030
leetgoat_dot_dev,leetgoat_dot_dev,335,3640,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        
        c = Counter(nums)
        nums = sorted(nums)
        
        cands = []
        
        for num in nums:
            cands.append(num + k)
        for num in nums:
            cands.append(num - k)
        for num in nums:
            cands.append(num)
            
        res = 0
            
        
        
#         0 100 101 102 180 range=90
        
#         we must pick 90 to get all


        def findCount(gX, lteY, nums):
            leftIndex = bisect_right(nums, gX)
            rightIndex = bisect_right(nums, lteY) - 1
            return max(0, rightIndex - leftIndex + 1)

        def findCountInclusive(gteX, lY, nums):
            leftIndex = bisect_left(nums, gteX)
            rightIndex = bisect_left(nums, lY) - 1
            return max(0, rightIndex - leftIndex + 1)
        
        
        
        for num in cands:
            
            # find numbers < num that we can change into range
            lessThanChangeable = findCountInclusive(num - k, num, nums)
            moreThanChangeable = findCount(num, num + k, nums)
            
            allowedChange = min(numOperations, lessThanChangeable + moreThanChangeable)
            res = max(res, allowedChange + c[num])
            continue
        
        return res",1447727411
Adarsh Raj Shrivastava,k3x9_,336,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        multiset<int> s;
        set<int> s1;
        for(auto i : nums){
            s.insert(i);
            s1.insert(i);
        }

        vector<int> e;
        for(auto i : s1){
            e.push_back(i);
        }

        int ans = 1;
        vector<int> count(1e5+1, 0), pref;
        pref.push_back(0);
        int val = 0;
        for(int i=0;i<e.size();i++){
            count[e[i]] = s.count(e[i]);
            val += count[e[i]];
            pref.push_back(val);
        }
        int min_val = e[0], max_val = e[e.size() - 1];
        for(int i=min_val;i<=max_val;i++){
            int h1 = upper_bound(e.begin(), e.end(), i + k) - e.begin() - 1;
            int h2 = lower_bound(e.begin(), e.end(), i - k) - e.begin();
            ans = max(ans, min(pref[h1+1] - pref[h2], count[i] + numOperations));
        }
        return ans;
    }
};",1447700810
Adarsh Raj Shrivastava,k3x9_,336,3626,cpp,"class Solution {
public:
    bool check(int n, int x){
        int val = 1;
        while(n){
            val *= n%10;
            n /= 10;
        }
        return val%x == 0;
    }
    int smallestNumber(int n, int t) {
        while(check(n,t) == false){
            n++;
        }
        return n;
    }
};",1447656101
Adarsh Raj Shrivastava,k3x9_,336,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        map<int,int> m;
        set<int> s;
        int n = nums.size();
        for(int i=0;i<n;i++){
            m[nums[i]]++;
            s.insert(nums[i] - k);
            s.insert(nums[i] + k + 1);
        }

        vector<int> e;
        for(auto i : m){
            e.push_back(i.first);
        }

        vector<pair<int,int>> v(s.size(), pair<int,int>{0,0});
        map<int,int> m1;
        int idx = 0;
        for(auto i : s){
            v[idx] = {i, 0};
            m1[i] = idx;
            idx++;
        }

        for(auto i : m){
            v[m1[i.first - k]].second += i.second;
            v[m1[i.first + k + 1]].second -= i.second;
        }

        for(int i=1;i<v.size();i++){
            v[i].second += v[i-1].second;
        }

        int ans = 1;
        for(auto i : m){
            int l = 0, h = v.size()-1;
            int mid;
            int index = l;
            while(h >= l){
                mid = l + (h - l)/2;
                if(v[mid].first <= i.first){
                    index = max(index, mid);
                    l = mid+1;
                }
                else h = mid-1;
            }

            int operations = v[index].second - i.second;
            if(operations <= numOperations) ans = max(ans, v[index].second);
            else ans = max(ans, i.second + numOperations);
        }

        for(auto i : v){
            ans = max(ans, min(numOperations, i.second));
        }

        return ans;
    }
};",1447735870
LAKSHYA CHOUHAN,Lakshya_Chouhan,337,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {

        vector<int> diff(2*1e5 + 5,0);
        unordered_map<int,int> freq ;
        int maxFreq = -1 ;
        int maxEle = -1 ;

        for(auto ele:nums){

            int mini = ele-k ;
            int maxi = ele+k ;

            if(mini < 0 ) diff[0]++;
            else  diff[mini]++;

            
            diff[maxi+1]--;
            freq[ele]++;
            maxFreq = max(maxFreq,freq[ele]);
            maxEle = max(maxEle,ele);
        }

        int maxiAns = 0 ;
        for(int i=1; i<=maxEle+numOperations; i++){
            diff[i] += diff[i-1];
            maxiAns = max(maxiAns,min(diff[i],freq[i]+numOperations));
            
        }

        int ans = min(maxiAns,maxFreq+numOperations);
        // cout << maxiAns << ""  "" << maxFreq + numOperations << endl ;
        return ans ;        
    }
};",1447716112
LAKSHYA CHOUHAN,Lakshya_Chouhan,337,3626,cpp,"class Solution {
public:
    bool check(int n,int t){

        int prod = 1 ;
        while(n){

            prod *= (n%10) ;
            n /= 10 ;
        }

        return prod%t == 0 ;
    }

    int smallestNumber(int n, int t) {

        while(check(n,t) == 0){

            n++;
        }

        return n ;
        
    }
};",1447659297
LAKSHYA CHOUHAN,Lakshya_Chouhan,337,3640,cpp,"#define ll long long 
class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        map<ll, int> diff;
        map<ll, int> freq;
        int maxFreq = 0;
        
        for(int ele : nums) {
            ll mini = max(0LL, (ll)ele - k);
            ll maxi = (ll)ele + k;
            
            diff[mini]++;
            diff[maxi + 1]--;
            freq[ele]++;
            maxFreq = max(maxFreq, freq[ele]);
        }
        
        int maxiAns = 0;
        int curr_sum = 0;
        
        set<ll> p;
        for(auto &[ele, f] : diff) p.insert(ele);
        for(auto &[ele, f] : freq) p.insert(ele);
        
        for(ll ele : p) {
            
            curr_sum += diff[ele];
            if(curr_sum > 0) {
                maxiAns = max(maxiAns, min(curr_sum, freq[ele] + numOperations));
            }
        }
        
        return min(maxiAns, maxFreq + numOperations);
    }
};
",1447736084
tinku_vishnu17,tinku_vishnu17,338,3622,java,"class Solution {
    public int maxFrequency(int[] nums, int k, int numOperations) {
        int maxi=0;
        for(int num:nums)maxi=Math.max(num,maxi);
        int freq[]=new int[maxi+1];
        for(int num:nums)freq[num]++;
        Arrays.sort(nums); int n=nums.length; int max=0;
        for(int i=0;i<=maxi;i++){
            int left=solveL(nums,i-k);
            int right=solveR(nums,i+k);
            //System.out.println(i+"" ""+left+"" ""+right);
            if((left!=-1)&&(right!=-1)){
                max=Math.max(max,Math.min((right-left+1),freq[i]+numOperations));
            }
        }
        //System.out.println();
        return max;
    }
    public int solveR(int nums[],int k){
        int high=nums.length-1; int ans=-1; int low=0;
        while(low<=high){
            int mid=low+(high-low)/2;
            if(nums[mid]<=k){
                ans=mid;
                low=mid+1;
            }
            else high=mid-1;
        }
        return ans;
    }
     public int solveL(int nums[],int k){
        int low=0; int ans=-1; int high=nums.length-1;
        while(low<=high){
            int mid=low+(high-low)/2;
            if(nums[mid]>=k){
                ans=mid;
                high=mid-1;
            }
            else low=mid+1;
        }
        return ans;
    }
}",1447702136
tinku_vishnu17,tinku_vishnu17,338,3626,java,"class Solution {
    public int smallestNumber(int n, int t) {
        while(true){
            int temp=n; int pro=1;
            while(temp>0){
                pro*=temp%10;
                temp/=10;
            }
            if(pro%t==0)return n;
            n++;
        }
        
    }
}",1447654282
tinku_vishnu17,tinku_vishnu17,338,3640,java,"class Solution {
    public int maxFrequency(int[] nums, int k, int numOperations) {
        HashMap<Long,Integer>hs=new HashMap<>();
        for(int num:nums){
            hs.put(num*1l,0);
            hs.put(1l*num+k,0);
            hs.put(1l*num-k,0);
        }
        for(int num:nums){
            hs.put(num*1l,hs.get(num*1l)+1);
        }
        Arrays.sort(nums); int n=nums.length; int max=0;
        for(int j=0;j<n;j++){
            long i=nums[j]*1l;
            int left=solveL(nums,i-k);
            int right=solveR(nums,i+k);
            //System.out.println(i+"" ""+left+"" ""+right);
            if((left!=-1)&&(right!=-1)){
                max=Math.max(max,Math.min((right-left+1),(hs.get(i))+numOperations));
            }
            
            i=1l*nums[j]+k;
            left=solveL(nums,i-k);
            right=solveR(nums,i+k);
            //System.out.println(i+"" ""+left+"" ""+right);
            if((left!=-1)&&(right!=-1)){
                max=Math.max(max,Math.min((right-left+1),(hs.get(i))+numOperations));
            }
            
            i=1l*nums[j]-k;
            left=solveL(nums,i-k);
            right=solveR(nums,i+k);
            //System.out.println(i+"" ""+left+"" ""+right);
            if((left!=-1)&&(right!=-1)){
                max=Math.max(max,Math.min((right-left+1),(hs.get(i))+numOperations));
            }
        }
        //System.out.println();
        return max;
    }
    public int solveR(int nums[],long k){
        int high=nums.length-1; int ans=-1; int low=0;
        while(low<=high){
            int mid=low+(high-low)/2;
            if(nums[mid]<=k){
                ans=mid;
                low=mid+1;
            }
            else high=mid-1;
        }
        return ans;
    }
     public int solveL(int nums[],long k){
        int low=0; int ans=-1; int high=nums.length-1;
        while(low<=high){
            int mid=low+(high-low)/2;
            if(nums[mid]>=k){
                ans=mid;
                high=mid-1;
            }
            else low=mid+1;
        }
        return ans;
    }
}",1447736180
Владлен Карауш,vladlenkaraush,340,3622,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        centers = []
        for el in nums:
            centers.append(el)
            centers.append(el-k)
            centers.append(el+k)
          

        counter = Counter(nums)
        nums.sort()
        centers.sort()
        
        m_cent = 0
        for c in centers:
            left = bisect.bisect_left(nums, c-k)
            right= bisect.bisect_right(nums, c+k)
            
            diff = min(right - left, counter[c] + numOperations)
            # print(f'c = {c}, left = {left}, right = {right}, diff = {diff}')
            m_cent = max(m_cent, diff)
            
        return m_cent                       ",1447743778
Владлен Карауш,vladlenkaraush,340,3626,python3,"class Solution:
    def smallestNumber(self, n: int, t: int) -> int:

        num = n-1
        while True:
            num += 1
            digs = [int(c) for c in str(num)]
            mul = 1
            for el in digs:
                mul *= el

            if mul % t == 0:
                return num",1447663309
Владлен Карауш,vladlenkaraush,340,3640,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        centers = []
        for el in nums:
            centers.append(el)
            centers.append(el-k)
            centers.append(el+k)
          

        counter = Counter(nums)
        nums.sort()
        centers.sort()
        
        m_cent = 0
        for c in centers:
            left = bisect.bisect_left(nums, c-k)
            right= bisect.bisect_right(nums, c+k)
            
            diff = min(right - left, counter[c] + numOperations)
            # print(f'c = {c}, left = {left}, right = {right}, diff = {diff}')
            m_cent = max(m_cent, diff)
            
        return m_cent         ",1447745262
Aamir Kharodawala,aamirkharoda,342,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int ops) {
        sort(nums.begin(),nums.end());
        vector<pair<int,int>> vp;
        map <int,int> mp;
        for(auto it : nums)
            ++mp[it];
        for(auto it : mp)
            vp.push_back(it);
        int total = 0, j = 0, sz = mp.size(), n = nums.size(), l = 0, ans = 0;
        for(int i=0; i<mp.size(); ++i)
        {
            while(j < sz && vp[j].first - vp[i].first <= k)
            {
                total += vp[j].second;
                ++j;
            }
            while(vp[i].first - vp[l].first > k)
            {
                total -= vp[l].second;
                ++l;
            }
            ans = max(ans,max(min(total,ops),vp[i].second + max(0,min(total-vp[i].second,ops))));
        }
        int i=0;
        j=0, total = 0;
        while(i<sz)
        {
            while(i < sz && vp[i].first-vp[j].first <= 2*k)
            {
                total += vp[i].second;
                ++i;
            }
            ans = max(ans,min(total,ops));
            total -= vp[j].second;
            ++j;
        }
        return ans;
    }
};",1447718491
Aamir Kharodawala,aamirkharoda,342,3626,python3,"class Solution:
    def smallestNumber(self, n: int, t: int) -> int:
        for i in range(n,1000) :
            s = str(i)
            prod = 1
            for elem in s :
                prod *= int(elem)
            if prod%t == 0 :
                return i",1447664060
Aamir Kharodawala,aamirkharoda,342,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int ops) {
        sort(nums.begin(),nums.end());
        vector<pair<int,int>> vp;
        map <int,int> mp;
        for(auto it : nums)
            ++mp[it];
        for(auto it : mp)
            vp.push_back(it);
        int total = 0, j = 0, sz = mp.size(), n = nums.size(), l = 0, ans = 0;
        for(int i=0; i<mp.size(); ++i)
        {
            while(j < sz && vp[j].first - vp[i].first <= k)
            {
                total += vp[j].second;
                ++j;
            }
            while(vp[i].first - vp[l].first > k)
            {
                total -= vp[l].second;
                ++l;
            }
            ans = max(ans,max(min(total,ops),vp[i].second + max(0,min(total-vp[i].second,ops))));
        }
        int i=0;
        j=0, total = 0;
        while(i<sz)
        {
            while(i < sz && vp[i].first-vp[j].first <= 2*k)
            {
                total += vp[i].second;
                ++i;
            }
            ans = max(ans,min(total,ops));
            total -= vp[j].second;
            ++j;
        }
        return ans;
    }
};",1447720152
sansaryadav777,sansaryadav777,343,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int nop) {
        int n = nums.size();
        sort(nums.begin(), nums.end());
        unordered_map<int, int> mp;
        
        int j = 0, res = 1;
        for(int i = 0; i < n; i++) {
            mp[nums[i]]++;
            while(j < n && nums[j] - nums[i] <= 2*k) {
                j++;
            }
            if(j - i <= nop) {
                res = max(res, j - i);
            } else {
                res = max(res, nop);
            }
        }
        
        for(int i = 0; i < n; i++) {
            int ll = lower_bound(nums.begin(), nums.end(), nums[i] - k) - nums.begin();
            int ul = upper_bound(nums.begin(), nums.end(), nums[i] + k) - nums.begin() - 1;
            res = max(res, ul - ll + 1 - mp[nums[i]] <= nop ? ul - ll + 1 : mp[nums[i]] + nop);
        }
        
        return res;
    }
};",1447745852
sansaryadav777,sansaryadav777,343,3626,cpp,"class Solution {
public:
    
    int find(int n) {
        int res = 1;
        while(n != 0) {
            res *= n % 10;
            n /= 10;
        }
        return res;
    }
    
    int smallestNumber(int n, int t) {
        for(int i = n; i <= n + 10; i++) {
            int prod = find(i);
            if(prod % t == 0) {
                return i;
            }
        }
        return -1;
    }
};",1447663484
sansaryadav777,sansaryadav777,343,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int nop) {
        int n = nums.size();
        sort(nums.begin(), nums.end());
        unordered_map<int, int> mp;
        
        int j = 0, res = 1;
        for(int i = 0; i < n; i++) {
            mp[nums[i]]++;
            while(j < n && nums[j] - nums[i] <= 2*k) {
                j++;
            }
            if(j - i <= nop) {
                res = max(res, j - i);
            } else {
                res = max(res, nop);
            }
        }
        
        for(int i = 0; i < n; i++) {
            int ll = lower_bound(nums.begin(), nums.end(), nums[i] - k) - nums.begin();
            int ul = upper_bound(nums.begin(), nums.end(), nums[i] + k) - nums.begin() - 1;
            res = max(res, ul - ll + 1 - mp[nums[i]] <= nop ? ul - ll + 1 : mp[nums[i]] + nop);
        }
        
        return res;
    }
};",1447745590
Nitish_200,B21CS030,344,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int op) {
        int mx = *max_element(nums.begin(), nums.end());
        int sz = mx + k + 2;
        
        vector<int> f(sz, 0);
        for (int n : nums) f[n]++;
        
        vector<int> p(sz, 0);
        preSum(f, p);
        
        int ans = 0;
        for (int x = 0; x < sz; ++x) {
            if (f[x] == 0 && op == 0) continue;
            
            int l = max(0, x - k);
            int r = min(sz - 1, x + k);
            int s = sumRange(p, l, r);
            
            int adj = s - f[x];
            int tot = f[x] + min(op, adj);
            ans = max(ans, tot);
        }
        
        return ans;
    }

private:
    void preSum(vector<int>& f, vector<int>& p) {
        p[0] = f[0];
        for (int i = 1; i < f.size(); ++i) {
            p[i] = p[i - 1] + f[i];
        }
    }

    int sumRange(vector<int>& p, int l, int r) {
        return p[r] - (l > 0 ? p[l - 1] : 0);
    }
};",1447707059
Nitish_200,B21CS030,344,3626,cpp,"class Solution {
public:
    int smallestNumber(int n, int t) {
        while (true) {
            int x = n, p = 1, z = 0;
            while (x > 0) {
                int d = x % 10;
                if (d == 0) {
                    z = 1;
                    break;
                }
                p *= d;
                x /= 10;
            }
            if (z || p % t == 0) return n;
            n++;
        }
    }
};
",1447653197
Nitish_200,B21CS030,344,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int ops) {
        unordered_map<int, int> f;
        vector<pair<int, int>> e;
        
        for (int n : nums) {
            f[n]++;
            e.push_back({n - k, 1});
            e.push_back({n + k + 1, -1});
        }

        set<int> p = getPoints(e, f);
        sort(e.begin(), e.end());

        return calcMaxFreq(p, e, f, ops);
    }

private:
    set<int> getPoints(const vector<pair<int, int>>& e, const unordered_map<int, int>& f) {
        set<int> points;
        for (auto& ev : e) points.insert(ev.first);
        for (auto& ff : f) points.insert(ff.first);
        return points;
    }

    int calcMaxFreq(const set<int>& p, const vector<pair<int, int>>& e, const unordered_map<int, int>& f, int ops) {
        int idx = 0, curr = 0, res = 0;
        for (int t : p) {
            while (idx < e.size() && e[idx].first <= t) {
                curr += e[idx].second;
                idx++;
            }

            int act = f.count(t) ? f.at(t) : 0;
            int maxF = act + min(ops, curr - act);
            res = max(res, maxF);
        }
        return res;
    }
};",1447729073
German Andosov,randle999,345,3622,kotlin,"class Solution {
    fun maxFrequency(nums: IntArray, k: Int, numOperations: Int): Int {
        var ans = 1

        val cntOpen = HashMap<Int, Int>()
        val cntMid = HashMap<Int, Int>()
        val cntClosed = HashMap<Int, Int>()

        for (x in nums) {
            cntOpen[x - k] = (cntOpen[x - k] ?: 0) + 1
            cntMid[x] = (cntMid[x] ?: 0) + 1
            cntClosed[x + k + 1] = (cntClosed[x + k + 1] ?: 0) + 1
        }

        val events = (cntOpen.keys + cntMid.keys + cntClosed.keys).sorted()

        var poss = 0
        for (e in events) {
            poss += cntOpen[e] ?: 0
            poss -= cntClosed[e] ?: 0
            val allowed = numOperations + (cntMid[e] ?: 0)

            ans = maxOf(ans, minOf(allowed, poss))
        }

        return ans
    }
}",1447704082
German Andosov,randle999,345,3626,kotlin,"class Solution {
    fun smallestNumber(n: Int, t: Int): Int {
        for (i in n..1000000) {
            var pr = 1
            var tmp = i
            while (tmp > 0) {
                pr *= tmp % 10
                tmp /= 10
            }
            if (pr % t == 0) {
                return i
            }
        }
        return -1
    }
}",1447653879
German Andosov,randle999,345,3640,kotlin,"class Solution {
    fun maxFrequency(nums: IntArray, k: Int, numOperations: Int): Int {
        var ans = 1

        val cntOpen = HashMap<Int, Int>()
        val cntMid = HashMap<Int, Int>()
        val cntClosed = HashMap<Int, Int>()

        for (x in nums) {
            cntOpen[x - k] = (cntOpen[x - k] ?: 0) + 1
            cntMid[x] = (cntMid[x] ?: 0) + 1
            cntClosed[x + k + 1] = (cntClosed[x + k + 1] ?: 0) + 1
        }

        val events = (cntOpen.keys + cntMid.keys + cntClosed.keys).sorted()

        var poss = 0
        for (e in events) {
            poss += cntOpen[e] ?: 0
            poss -= cntClosed[e] ?: 0
            val allowed = numOperations + (cntMid[e] ?: 0)

            ans = maxOf(ans, minOf(allowed, poss))
        }

        return ans
    }
}",1447703743
Badal Prasad Singh,thecloud,346,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int num) {
        int l = 0; int r = 0; int ll = 0; int rr = 0;
        int n = nums.size();
        sort(nums.begin(), nums.end());
        unordered_map<int,int>m;
        for(int i: nums){
            m[i]++;
        }
        int ans = INT_MIN;
        for(int i=0;i<n;i++){
            while(r+1<n and nums[r+1]<=nums[i]+k) r++;
            while(l<r and nums[l]<nums[i]-k) l++;
            ans = max(ans, min(m[nums[i]]+num, r-l+1));
        }
        while(rr<n-1){
            while(rr+1<n and nums[rr+1]-nums[ll]<=2*k) rr++;
            ans = max(ans, min(rr-ll+1, num));
            ll++;
        }
        return ans;
    }
};",1447729120
Badal Prasad Singh,thecloud,346,3626,cpp,"class Solution {
public:
    int f(int n){
        int p = 1;
        while(n>0){
            p*=n%10;
            n/=10;
        }
        return p;
    }
    int smallestNumber(int n, int t) {
        while(n){
            if(f(n)%t==0){
                return n;
            }
            n++;
        }
        return 0;
    }
};",1447659086
Badal Prasad Singh,thecloud,346,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int num) {
        int l = 0; int r = 0; int ll = 0; int rr = 0;
        int n = nums.size();
        sort(nums.begin(), nums.end());
        unordered_map<int,int>m;
        for(int i: nums){
            m[i]++;
        }
        int ans = INT_MIN;
        for(int i=0;i<n;i++){
            while(r+1<n and nums[r+1]<=nums[i]+k) r++;
            while(l<r and nums[l]<nums[i]-k) l++;
            ans = max(ans, min(m[nums[i]]+num, r-l+1));
        }
        while(rr<n-1){
            while(rr+1<n and nums[rr+1]-nums[ll]<=2*k) rr++;
            ans = max(ans, min(rr-ll+1, num));
            ll++;
        }
        return ans;
    }
};",1447738089
parthDOOM,parthDOOM,347,3622,cpp,"#define ll long long
#define modulo (1000000000+7)
#define rep(i,a,b) for(ll i=a;i<b;i++)
#define per(i,a,b) for(ll i=a;i>b;i--)
#define loop(x,a) for(auto &x:a)
#define vll(v,n) vector<ll> v(n);
#define vll0(v,n) vector<ll> v(n,0);
#define vllk(v,n,k) vector<ll> v(n,k);
#define vlll vector<vector<ll>>
#define vl vector<ll>
#define vlll0(v,n,m) vector<vector<ll>> v(n,vector<ll>(m,0));
#define qll queue<ll>
#define dqll deque<ll>
#define stll set<ll>
#define mpll map<ll,ll>
#define pqll priority_queue<ll>
#define pqvll priority_queue<ll,vector<ll>,greater<ll>>
#define pll pair<ll,ll>
#define vb vector<bool>
#define ump unordered_map
#define ust unordered_set
#define mst(x,a) memset(x,a,sizeof(x)) 
#define rd(x) ll x;cin>>x;
#define rds(x) cin>>x;
#define pt(x) cout<<x;
#define nl cout<<endl;
#define yes pt(""YES"") nl
#define no pt(""NO"") nl
#define rdvec(v,n) rep(i,0,n){rds(v[i])}
#define rdmat(a,n,m) for(int i=0;i<n;i++){for(int j=0;j<m;j++){rds(a[i][j])}}
#define INF LLONG_MAX
#define NINF LLONG_MIN
#define pb push_back
#define pob pop_back
#define pof pop_front
#define emp emplace
#define emb emplace_back
#define emf emplace_front
#define lb lower_bound
#define ub upper_bound
#define bk back()
#define beg begin()
#define ed end()
#define sz(x) (ll)x.size()
#define ist insert
#define mkp(x, y) make_pair(x, y)
#define mkt(x, y, z) make_tuple(x, y, z)
#define all(v) v.begin(),v.end()
#define allr(v) v.rbegin(),v.rend()
#define fst first
#define sec second
#define acc(a) accumulate(all(a),0ll)
#define maxi(a) *max_element(all(a))
#define mini(a) *min_element(all(a))
#define sortr(a) sort(allr(a))
#define bitcnt(x) __builtin_popcountll(x)
#define ispow2(x) (!(x & (x-1)) && x)
#define lsb(x) (x & -x)
#define msb(x) (63 - __builtin_clzll(x))
#define clz(x) __builtin_clzll(x)
#define ctz(x) __builtin_ctzll(x)
#define dis(x1,y1,x2,y2) sqrt(sq(x1-x2) + sq(y1-y2))
#define ptvec(a) for(auto &x:a) {cout<<x<<"" "";} nl;
#define ptmat(a,n,m) for(int i=0;i<n;i++){for(int j=0;j<m;j++){cout<<a[i][j]<<"" "";}nl}
#define cnt continue;
#define brk break;
#define rt return
class Solution {
public:
    int maxFrequency(vector<int>& n,int k,int nO){
        vll(v,1e5 + 1);
        loop(x,n) v[x]++;
        vll(prf,1e5 + 1);
        rep(x,1,1e5 + 1) prf[x] = prf[x-1]+v[x];
        ll ans=0;
        rep(x,1,1e5 + 1){
            ll lt,rgt;
            if(x-k >= 1) lt = x-k;
            else lt = 1;
            if(x+k <= 1e5) rgt = x+k;
            else rgt = 1e5;
            ll toR = prf[rgt]-prf[lt -1],cM = toR-v[x];
            ans = ans > v[x]+min((ll)nO,cM) ? ans : v[x]+min((ll)nO,cM);
        }
        rt ans;      
    }
};",1447696042
parthDOOM,parthDOOM,347,3626,cpp,"#define ll long long
#define modulo (1000000000+7)
#define rep(i,a,b) for(ll i=a;i<b;i++)
#define per(i,a,b) for(ll i=a;i>b;i--)
#define loop(x,a) for(auto &x:a)
#define vll(v,n) vector<ll> v(n);
#define vll0(v,n) vector<ll> v(n,0);
#define vllk(v,n,k) vector<ll> v(n,k);
#define vlll vector<vector<ll>>
#define vl vector<ll>
#define vlll0(v,n,m) vector<vector<ll>> v(n,vector<ll>(m,0));
#define qll queue<ll>
#define dqll deque<ll>
#define stll set<ll>
#define mpll map<ll,ll>
#define pqll priority_queue<ll>
#define pqvll priority_queue<ll,vector<ll>,greater<ll>>
#define pll pair<ll,ll>
#define vb vector<bool>
#define ump unordered_map
#define ust unordered_set
#define mst(x,a) memset(x,a,sizeof(x)) 
#define rd(x) ll x;cin>>x;
#define rds(x) cin>>x;
#define pt(x) cout<<x;
#define nl cout<<endl;
#define yes pt(""YES"") nl
#define no pt(""NO"") nl
#define rdvec(v,n) rep(i,0,n){rds(v[i])}
#define rdmat(a,n,m) for(int i=0;i<n;i++){for(int j=0;j<m;j++){rds(a[i][j])}}
#define INF LLONG_MAX
#define NINF LLONG_MIN
#define pb push_back
#define pob pop_back
#define pof pop_front
#define emp emplace
#define emb emplace_back
#define emf emplace_front
#define lb lower_bound
#define ub upper_bound
#define bk back()
#define beg begin()
#define ed end()
#define sz(x) (ll)x.size()
#define ist insert
#define mkp(x, y) make_pair(x, y)
#define mkt(x, y, z) make_tuple(x, y, z)
#define all(v) v.begin(),v.end()
#define allr(v) v.rbegin(),v.rend()
#define fst first
#define sec second
#define acc(a) accumulate(all(a),0ll)
#define maxi(a) *max_element(all(a))
#define mini(a) *min_element(all(a))
#define sortr(a) sort(allr(a))
#define bitcnt(x) __builtin_popcountll(x)
#define ispow2(x) (!(x & (x-1)) && x)
#define lsb(x) (x & -x)
#define msb(x) (63 - __builtin_clzll(x))
#define clz(x) __builtin_clzll(x)
#define ctz(x) __builtin_ctzll(x)
#define dis(x1,y1,x2,y2) sqrt(sq(x1-x2) + sq(y1-y2))
#define ptvec(a) for(auto &x:a) {cout<<x<<"" "";} nl;
#define ptmat(a,n,m) for(int i=0;i<n;i++){for(int j=0;j<m;j++){cout<<a[i][j]<<"" "";}nl}
#define cnt continue;
#define brk break;
#define rt return
class Solution {
public:
    ll help(ll num) {
        ll pr = 1;
        while(num){
            pr *= (num%10);
            num /= 10;
        }
        rt pr;
    }
    int smallestNumber(int n, int t){
        ll curr = n;
        while(1){
            if(help(curr) % t == 0) rt curr;
            curr++;
        }
        rt -1;
    }
};",1447654886
parthDOOM,parthDOOM,347,3640,cpp,"#define ll long long
#define modulo (1000000000+7)
#define rep(i,a,b) for(ll i=a;i<b;i++)
#define per(i,a,b) for(ll i=a;i>b;i--)
#define loop(x,a) for(auto &x:a)
#define vll(v,n) vector<ll> v(n);
#define vll0(v,n) vector<ll> v(n,0);
#define vllk(v,n,k) vector<ll> v(n,k);
#define vlll vector<vector<ll>>
#define vl vector<ll>
#define vlll0(v,n,m) vector<vector<ll>> v(n,vector<ll>(m,0));
#define qll queue<ll>
#define dqll deque<ll>
#define stll set<ll>
#define mpll map<ll,ll>
#define pqll priority_queue<ll>
#define pqvll priority_queue<ll,vector<ll>,greater<ll>>
#define pll pair<ll,ll>
#define vb vector<bool>
#define ump unordered_map
#define ust unordered_set
#define mst(x,a) memset(x,a,sizeof(x)) 
#define rd(x) ll x;cin>>x;
#define rds(x) cin>>x;
#define pt(x) cout<<x;
#define nl cout<<endl;
#define yes pt(""YES"") nl
#define no pt(""NO"") nl
#define rdvec(v,n) rep(i,0,n){rds(v[i])}
#define rdmat(a,n,m) for(int i=0;i<n;i++){for(int j=0;j<m;j++){rds(a[i][j])}}
#define INF LLONG_MAX
#define NINF LLONG_MIN
#define pb push_back
#define pob pop_back
#define pof pop_front
#define emp emplace
#define emb emplace_back
#define emf emplace_front
#define lb lower_bound
#define ub upper_bound
#define bk back()
#define beg begin()
#define ed end()
#define sz(x) (ll)x.size()
#define ist insert
#define mkp(x, y) make_pair(x, y)
#define mkt(x, y, z) make_tuple(x, y, z)
#define all(v) v.begin(),v.end()
#define allr(v) v.rbegin(),v.rend()
#define fst first
#define sec second
#define acc(a) accumulate(all(a),0ll)
#define maxi(a) *max_element(all(a))
#define mini(a) *min_element(all(a))
#define sortr(a) sort(allr(a))
#define bitcnt(x) __builtin_popcountll(x)
#define ispow2(x) (!(x & (x-1)) && x)
#define lsb(x) (x & -x)
#define msb(x) (63 - __builtin_clzll(x))
#define clz(x) __builtin_clzll(x)
#define ctz(x) __builtin_ctzll(x)
#define dis(x1,y1,x2,y2) sqrt(sq(x1-x2) + sq(y1-y2))
#define ptvec(a) for(auto &x:a) {cout<<x<<"" "";} nl;
#define ptmat(a,n,m) for(int i=0;i<n;i++){for(int j=0;j<m;j++){cout<<a[i][j]<<"" "";}nl}
#define cnt continue;
#define brk break;
#define rt return
#define vpll vector<pair<ll,ll>>
class Solution {
public:
    int maxFrequency(vector<int>& nu,int k,int nO){
        ll n = sz(nu);
        mpll v;vpll e;
        loop(x,nu){
            v[x]++;
            e.pb({x-k,+1});
            e.pb({x+k+1,-1});
        }
        stll pt;
        loop(ee,e)pt.ist(ee.fst);
        loop(p,v) pt.ist(p.fst);
        sort(all(e));
        ll idx = 0,curO = 0,ans = 0,aCt = 0;
        loop(t,pt){
            while(!(idx >= sz(e)) && !(e[idx].fst > t)){
                curO += e[idx].sec;
                idx++;
            }
            aCt = v.count(t) ? v[t] : 0;
            ll pse = aCt + (nO < curO-aCt ? nO : curO-aCt);
            ans = ans > pse ? ans : pse;
        }
        rt ans;    
    }
};",1447721393
Joo-Won Jung,sanori,348,3622,javascript,"/**
 * @param {number[]} nums
 * @param {number} k
 * @param {number} numOperations
 * @return {number}
 */
var maxFrequency = function(nums, k, numOperations) {
  const freq = nums.reduce((cnt, x) => {
    cnt[x] = (cnt[x] ?? 0) + 1;
    return cnt;
  }, {});
  const keys = Object.keys(freq).map(Number).sort((a, b) => a - b);
  const n = keys.length;
  let lo = 0, hi = 0, cnt = 0, res = 0;
  let hi2 = 0, cnt2 = 0;
  for (let i = 0; i < n; i++) {
    const a = keys[i];
    while (lo < i && keys[lo] < a - k) {
      cnt -= freq[keys[lo]];
      lo++;
    }
    while (hi < n && keys[hi] <= a + k) {
      cnt += freq[keys[hi]];
      hi++;
    }
    
    while (hi2 < n && keys[hi2] <= a + 2 * k) {
      cnt2 += freq[keys[hi2]];
      hi2++;
    }
    res = Math.max(res, Math.min(cnt - freq[a], numOperations) + freq[a]);
    res = Math.max(res, Math.min(cnt2, numOperations));
    cnt2 -= freq[a];
  }
  return res;
};",1447737205
Joo-Won Jung,sanori,348,3626,javascript,"/**
 * @param {number} n
 * @param {number} t
 * @return {number}
 */
var smallestNumber = function(n, t) {
  let i = n - 1, prod = 1;
  do {
    i++;
    let j = i;
    prod = 1;
    while (j > 0) {
      prod *= j % 10;
      j = Math.floor(j / 10);
    }
  } while (prod % t !== 0);
  return i;
};",1447669009
Joo-Won Jung,sanori,348,3640,javascript,"/**
 * @param {number[]} nums
 * @param {number} k
 * @param {number} numOperations
 * @return {number}
 */
var maxFrequency = function(nums, k, numOperations) {
  const freq = nums.reduce((cnt, x) => {
    cnt[x] = (cnt[x] ?? 0) + 1;
    return cnt;
  }, {});
  const keys = Object.keys(freq).map(Number).sort((a, b) => a - b);
  const n = keys.length;
  let lo = 0, hi = 0, cnt = 0, res = 0;
  let hi2 = 0, cnt2 = 0;
  for (let i = 0; i < n; i++) {
    const a = keys[i];
    while (lo < i && keys[lo] < a - k) {
      cnt -= freq[keys[lo]];
      lo++;
    }
    while (hi < n && keys[hi] <= a + k) {
      cnt += freq[keys[hi]];
      hi++;
    }
    
    while (hi2 < n && keys[hi2] <= a + 2 * k) {
      cnt2 += freq[keys[hi2]];
      hi2++;
    }
    res = Math.max(res, Math.min(cnt - freq[a], numOperations) + freq[a]);
    res = Math.max(res, Math.min(cnt2, numOperations));
    cnt2 -= freq[a];
  }
  return res;
};",1447738675
shining_star,velocity_mass,351,3622,cpp,"// C++ Code
// Start Of ShiningStar's Template...
#pragma GCC optimize(""O2"")
#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace std;
using namespace __gnu_pbds;
typedef long long LL;
using truth = bool;
using english = char;
using akt = int;
using decimal = float;
using ddecimal = double;
typedef vector<int> vi;
typedef vector<bool> vb;
typedef vector<char> vc;
typedef vector<double> vd;
typedef vector<string> vs;
typedef pair<LL, LL> pll;
typedef pair<int, int> pii;
typedef pair<int, bool> pib;
typedef pair<char, bool> pcb;
typedef pair<string, int> psi;
typedef pair<char, int> pci;
typedef pair<int, char> pic;
typedef pair<string, string> pss;
typedef pair<char, char> pcc;
typedef pair<int, vi> pivi;
typedef vector<vi> vvi;
typedef vector<vb> vvb;
typedef vector<vc> vvc;
typedef vector<vd> vvd;
typedef vector<vs> vvs;
typedef vector<pii> vpii;
typedef vector<pib> vpib;
typedef vector<pcb> vpcb;
typedef vector<psi> vpsi;
typedef vector<pci> vpci;
typedef vector<pss> vpss;
typedef vector<LL> vll;
typedef vector<vll> vvll;
typedef vector<vvi> vvvi;
double EPS = 1e-9;
int INF = 1000000005;
long long INFF = 1000000000000000005LL;
double PI = acos(-1);

#define FOR(a, b, c) for (int a = b; a < c; a++)
#define FOR1(a, b, c) for (int a = b; a <= c; ++a)
#define Rep(i, n) FOR(i, 0, n)
#define Rep1(i, n) FOR1(i, 1, n)
#define RepA(ele, nums) for (auto& ele : nums)
#define WHL(i, n) while (i < n)
#define fi first
#define se second
#define mp make_pair
#define pb push_back
#define ALL(v) v.begin(), v.end()
#define SORT(v) sort(ALL(v))
#define REVERSE(v) reverse(ALL(v))
#define mxe(v) max_element(ALL(v))
#define mie(v) min_element(ALL(v))
#define bitsDedo(n) __builtin_popcount(n)
#define umii unordered_map<int, int>
#define umci unordered_map<char, int>
#define umcc unordered_map<char, char>
#define umsi unordered_map<string, int>
#define umcs unordered_map<char, string>
#define umsc unordered_map<string, char>
#define umipii unordered_map<int, pii>
#define umpiii unordered_map<pii, int>
#define umivi unordered_map<int, vi>
#define umili unordered_map<int, list<int>>
#define umss unordered)map<string, string>
#define usi unordered_set<int>
#define usc unordered_set<char>
#define uss unordered_set<string>
#define sti stack<int>
#define stc stack<char>
#define sts stack<string>
#define stvi stack<vi>
#define stpii stack<pii>
#define qi queue<int>
#define qc queue<char>
#define qs queue<string>
#define qvi queue<vi>
#define qpii queue<pii>
#define qnode queue<TreeNode*>
#define mii map<int, int>
#define mpiii map<pii, int>
#define mipii map<int, pii>
#define mivi map<int, vi>
#define mllll map<LL, LL>
#define mci map<char, int>
#define mcc map<char, char>
#define msi map<string, int>
#define mss map<string, string>
#define vumii vector<umii>
template <class Y> void swap(Y& x, Y& y) {
    x = x + y;
    y = x - y;
    x = x - y;
}
template <typename X, typename Y> void add(X& x, Y& y) { return x + y; }
template <class T> class Stack {
public:
    int top;
    int size;
    T* arr;
    int capacity;
    Stack(int capacity) {
        this->capacity = capacity;
        this->top = -1;
        this->size = 0;
        this->arr = (T*)calloc(sizeof(T), capacity);
    }
    bool isEmpty() { return this->top == -1; }
    bool isFull() { return this->size == this->capacity; }
    void push(T val) {
        if (isEmpty())
            return;
        this->size++;
        this->top++;
        this->arr[this->top] = val;
    }
    T pop() {
        if (isFull())
            return NULL;
        T val = this->arr[this->top];
        this->size--;
        this->top--;
        return val;
    }
};
// End of Edwards310 Template

class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {

        akt max_num = *mxe(nums);
        akt size = max_num + k + 2;

        vi freq(size, 0);
        RepA(num, nums) freq[num]++;

        vi pre(size, 0);
        pre[0] = freq[0];
        FOR(i, 1, size)
        pre[i] = pre[i - 1] + freq[i];

        akt res = 0;

        Rep(x, size) {

            akt l = fmax(0, x - k);
            akt r = fmin(size - 1, x + k);

            int tlr = pre[r] - (l > 0 ? pre[l - 1] : 0);
            int ca = tlr - freq[x];

            int tl = freq[x] + min(numOperations, ca);

            res = fmax(res, tl);
        }

        return res;
    }
};",1447710405
shining_star,velocity_mass,351,3626,golang,"func productOfDigits(num int) int {
	product := 1
	for num > 0 {
		digit := num % 10
		product *= digit
		num /= 10
	}
	return product
}

func smallestNumber(n int, t int) int {
    for {
		if productOfDigits(n) % t == 0 {
			return n
		}
		n++
	}
}",1447653716
shining_star,velocity_mass,351,3640,cpp,"// C++ Code
// Start Of ShiningStar's Template...
#pragma GCC optimize(""O2"")
#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace std;
using namespace __gnu_pbds;
typedef long long LL;
using truth = bool;
using english = char;
using akt = int;
using decimal = float;
using ddecimal = double;
typedef vector<int> vi;
typedef vector<bool> vb;
typedef vector<char> vc;
typedef vector<double> vd;
typedef vector<string> vs;
typedef pair<LL, LL> pll;
typedef pair<int, int> pii;
typedef pair<int, bool> pib;
typedef pair<char, bool> pcb;
typedef pair<string, int> psi;
typedef pair<char, int> pci;
typedef pair<int, char> pic;
typedef pair<string, string> pss;
typedef pair<char, char> pcc;
typedef pair<int, vi> pivi;
typedef vector<vi> vvi;
typedef vector<vb> vvb;
typedef vector<vc> vvc;
typedef vector<vd> vvd;
typedef vector<vs> vvs;
typedef vector<pii> vpii;
typedef vector<pib> vpib;
typedef vector<pcb> vpcb;
typedef vector<psi> vpsi;
typedef vector<pci> vpci;
typedef vector<pss> vpss;
typedef vector<LL> vll;
typedef vector<vll> vvll;
typedef vector<vvi> vvvi;
double EPS = 1e-9;
int INF = 1000000005;
long long INFF = 1000000000000000005LL;
double PI = acos(-1);

#define FOR(a, b, c) for (int a = b; a < c; a++)
#define FOR1(a, b, c) for (int a = b; a <= c; ++a)
#define Rep(i, n) FOR(i, 0, n)
#define Rep1(i, n) FOR1(i, 1, n)
#define RepA(ele, nums) for (auto& ele : nums)
#define WHL(i, n) while (i < n)
#define fi first
#define se second
#define mp make_pair
#define pb push_back
#define ALL(v) v.begin(), v.end()
#define SORT(v) sort(ALL(v))
#define REVERSE(v) reverse(ALL(v))
#define mxe(v) max_element(ALL(v))
#define mie(v) min_element(ALL(v))
#define bitsDedo(n) __builtin_popcount(n)
#define umii unordered_map<int, int>
#define umci unordered_map<char, int>
#define umcc unordered_map<char, char>
#define umsi unordered_map<string, int>
#define umcs unordered_map<char, string>
#define umsc unordered_map<string, char>
#define umipii unordered_map<int, pii>
#define umpiii unordered_map<pii, int>
#define umivi unordered_map<int, vi>
#define umili unordered_map<int, list<int>>
#define umss unordered)map<string, string>
#define usi unordered_set<int>
#define usc unordered_set<char>
#define uss unordered_set<string>
#define sti stack<int>
#define stc stack<char>
#define sts stack<string>
#define stvi stack<vi>
#define stpii stack<pii>
#define si set<int>
#define qi queue<int>
#define qc queue<char>
#define qs queue<string>
#define qvi queue<vi>
#define qpii queue<pii>
#define qnode queue<TreeNode*>
#define mii map<int, int>
#define mpiii map<pii, int>
#define mipii map<int, pii>
#define mivi map<int, vi>
#define mllll map<LL, LL>
#define mci map<char, int>
#define mcc map<char, char>
#define msi map<string, int>
#define mss map<string, string>
#define vumii vector<umii>
template <class Y> void swap(Y& x, Y& y) {
    x = x + y;
    y = x - y;
    x = x - y;
}
template <typename X, typename Y> void add(X& x, Y& y) { return x + y; }
template <class T> class Stack {
public:
    int top;
    int size;
    T* arr;
    int capacity;
    Stack(int capacity) {
        this->capacity = capacity;
        this->top = -1;
        this->size = 0;
        this->arr = (T*)calloc(sizeof(T), capacity);
    }
    bool isEmpty() { return this->top == -1; }
    bool isFull() { return this->size == this->capacity; }
    void push(T val) {
        if (isEmpty())
            return;
        this->size++;
        this->top++;
        this->arr[this->top] = val;
    }
    T pop() {
        if (isFull())
            return NULL;
        T val = this->arr[this->top];
        this->size--;
        this->top--;
        return val;
    }
};
// End of Edwards310 Template
class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        akt idx = 0, cp = 0, mf = 0;
        umii fre;
        vpii help;

        RepA (num, nums) {
            fre[num]++;
            help.pb({num - k, +1});     
            help.pb({num + k + 1, -1});
        }

        si points;
        for (auto& p : help) {
            points.insert(p.fi);
        }
        for (auto& p : fre) {
            points.insert(p.fi);
        }

        SORT(help);


        RepA (t, points) {
            while (idx < help.size() and help[idx].fi <= t) {
                cp += help[idx].se;
                idx++;
            }

            akt ac = (fre.count(t) > 0) ? fre[t] : 0;
            akt pf = ac + fmin(numOperations, cp - ac);
            mf = fmax(mf, pf);
        }

        return mf;
    }
};",1447738964
SoulAdor,SoulAdor,352,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        ranges::sort(nums);
        map<int, int> counts;
        for(auto& n : nums) counts[n]++;
        
        int result = 0;
        for(int i = 0, j = 0, value = nums.front(); value <= nums.back(); value++) {
            while(i < nums.size() and nums[i] <= value and abs(value - nums[i]) > k) i++;
            if(i == nums.size()) break;
            if(nums[i] > value) {
                value = nums[i];
                value--;
                continue;
            }
            
            while(j < nums.size() and abs(value - nums[j]) <= k) j++;
            int found = j - i;
            int free = counts[value];
            int remaining = found - free;
            result = max(result, free + min(remaining, numOperations));
        }
        return result;
    }
};",1447706225
SoulAdor,SoulAdor,352,3626,cpp,"class Solution {
    int product(int n) {
        int result = 1;
        while(n > 0) {
            result *= n % 10;
            n /= 10;
        }
        return result;
    }
public:
    int smallestNumber(int n, int t) {
        while(product(n) % t != 0) n++;
        return n;
    }
};",1447656253
SoulAdor,SoulAdor,352,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        map<int, int> delta;
        ranges::sort(nums);
        for(auto&n : nums) {
            int start = max(0, n - k);
            delta[start]++;
            int end = min(nums.back() + 1, n + k + 1);
            delta[end]--;
        }
        int result = 0;
        int curr = 0;
        for(auto& [pos, d] : delta) {
            curr += d;
            result = max(result, min(curr, numOperations));
        }

        map<int, int> counts;
        for(auto& n : nums) counts[n]++;
        
        for(int i = 0, j = 0, v = 0; v < nums.size(); v++) {
            while(nums[v] - nums[i] > k) i++;
            while(j < v or (j < nums.size() and nums[j] - nums[v] <= k)) j++;
            int found = j - i;
            int free = counts[nums[v]];
            int remaining = found - free;
            result = max(result, free + min(remaining, numOperations));
        }

        return result;
    }
};",1447747459
Dhyanendra Tripathi,Gminor,353,3622,cpp,"#define ll long long
class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        int mx = *max_element(nums.begin(), nums.end());
        vector<int> mp(mx + 1, 0);
        for (auto &i: nums) {
            mp[i]++;
        }
        int ans = 0;
        vector<int> pref(mx + 1, 0);
        // int sm = 0;
        for (int x = 1; x <= mx; x++) {
            pref[x] = pref[x - 1] + mp[x];
            // pref[i] = sm;
            // sm += mp[i];
        }

        for (int x = 1; x <= mx; x++) {
            int l = max(1, x - k), r = min(mx, x + k);
            ans = max(ans, mp[x] + min(numOperations, pref[r] - pref[l - 1] - mp[x]));
        }

        return ans;
    }
};",1447697726
Dhyanendra Tripathi,Gminor,353,3626,cpp,"class Solution {
public:
    int solve(int num) {
        int ans = 1;
        while (num > 0) {
            ans *= num % 10;
            num /= 10;
        }
        return ans;
    }
    int smallestNumber(int n, int t) {
        int ans = n;
        while (true) {
            int prod = solve(ans);
            if (prod % t == 0) {
                return ans;
            }
            ans++;
        }
        return ans;
    }
};",1447654514
Dhyanendra Tripathi,Gminor,353,3640,cpp,"#include <bits/stdc++.h>
using namespace std;

// #define int long long

class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        int n = nums.size();
        map<int, int> mp;
        vector<array<int, 2>> bounds;
        set<int> st;
        
        for (int i = 0; i < n; i++) {
            mp[nums[i]]++;
            int l = nums[i] - k, r = nums[i] + k + 1;
            st.insert(nums[i]);
            st.insert(l);
            st.insert(r);
            bounds.push_back({l, 1});
            bounds.push_back({r, -1});
            // cout << l << "" "" << r << endl;
        }
        sort(bounds.begin(), bounds.end());
        int ptr = 0, curr = 0, ans = 0;
        // for (auto &i: st) cout << i << "" "";
        // cout << endl;
        for (auto &ele: st) {
            while (ptr < bounds.size()) {
                if (bounds[ptr][0] > ele) {
                    break;
                }
                curr += bounds[ptr][1];
                ptr++;
            }
            int cnt = 0;
            if (mp.find(ele) != mp.end()) {
                cnt = mp[ele];
            }
            // cout << cnt << "" "" << curr << endl;
            ans = max(ans, cnt + min(numOperations, curr - cnt));
        }
        return ans;
    }
};

// signed main() {
//     ios::sync_with_stdio(false);
//     cin.tie(0), cout.tie(0);

//     int tt; cin >> tt;
//     while (tt--) {
        
//     }
// }
",1447739430
Gautam Ankoji,gautamankoji,354,3622,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, ops: int) -> int:
        n, mx = max(nums) + k + 2, max(nums)
        freq = [0] * n
        for num in nums:
            freq[num] += 1

        cum_freq = [0] * n
        for i in range(1, n):
            cum_freq[i] = cum_freq[i - 1] + freq[i]

        max_freq = 0
        for x in range(n):
            if freq[x] == 0 and ops == 0:
                continue
            left, right = max(0, x - k), min(n - 1, x + k)
            range_sum = cum_freq[right] - cum_freq[left - 1] if left > 0 else cum_freq[right]
            max_freq = max(max_freq, freq[x] + min(ops, range_sum - freq[x]))

        return max_freq
",1447724186
Gautam Ankoji,gautamankoji,354,3626,python3,"class Solution:
    def smallestNumber(self, n: int, t: int) -> int:
        while True:
            m = 1
            for d in str(n):
                m = m * int(d)
            if m % t == 0:
                return n
            n += 1
",1447656623
Gautam Ankoji,gautamankoji,354,3640,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, ops: int) -> int:
        f = defaultdict(int)
        e = []
        for n in nums:
            f[n] += 1
            e.append((n - k, 1))
            e.append((n + k + 1, -1))
        p = {ev[0] for ev in e}
        for n in f:
            p.add(n)
        sp = sorted(p)
        e.sort()
        i = 0
        o = 0
        m = 0
        for t in sp:
            while i < len(e) and e[i][0] <= t:
                o += e[i][1]
                i += 1
            ac = f.get(t, 0)
            pf = ac + min(ops, o - ac)
            m = max(m, pf)
        return m
",1447739547
Chistik Fedor,DzumDzum,357,3622,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        nums = sorted(nums)
        c = Counter(nums)
        op_arr = set()
        for n in nums:
            op_arr.add(n-k)
            op_arr.add(n)
            op_arr.add(n+k)
        
        op_arr = sorted(list(op_arr))
        res = -float('inf')
        for cent in op_arr:
            left = bisect.bisect_left(nums, cent-k)
            right = bisect.bisect_right(nums, cent+k)
            res = max(min((right - left - c[cent]), numOperations) + c[cent], res)
        
        return res
            
            


        ",1447747991
Chistik Fedor,DzumDzum,357,3626,python3,"class Solution:
    def smallestNumber(self, n: int, t: int) -> int:
        while True:
            s = str(n)
            r = 1
            for i in s:
                r *= int(i)
            if r % t == 0:
                return n
            n += 1",1447657345
Chistik Fedor,DzumDzum,357,3640,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        nums = sorted(nums)
        c = Counter(nums)
        op_arr = set()
        for n in nums:
            op_arr.add(n-k)
            op_arr.add(n)
            op_arr.add(n+k)
        
        op_arr = sorted(list(op_arr))
        res = -float('inf')
        # print(nums)
        for cent in op_arr:
            left = bisect.bisect_left(nums, cent-k)
            right = bisect.bisect_right(nums, cent+k)
            # print(f'cent = {cent}, left = {left}, right = {right}')
            # print(f'max(min(({right - left - c[cent]}), {numOperations}) + {c[cent]}, res)')
            res = max(min((right - left - c[cent]), numOperations) + c[cent], res)
            # print(f'res = {res}')
        
        return res
            
            


        ",1447747290
sidgureja,sidgureja,358,3622,java,"class Solution {
   public int maxFrequency(int[] nums, int k, int numOperations) {
       int m = findMax(nums);
       int s = m + k + 2;
       long[] f = buildFreq(nums, s);
       long[] p = buildPrefix(f, s);
       return findMaxFreq(f, p, k, numOperations, s);
   }
   
   private int findMax(int[] n) {
       int m = n[0];
       int i = 1;
       while (i < n.length) {
           m = Math.max(m, n[i]);
           i++;
       }
       return m;
   }
   
   private long[] buildFreq(int[] n, int s) {
       long[] f = new long[s];
       int i = 0;
       while (i < n.length) {
           f[n[i]]++;
           i++;
       }
       return f;
   }
   
   private long[] buildPrefix(long[] f, int s) {
       long[] p = new long[s];
       p[0] = f[0];
       int i = 1;
       while (i < s) {
           p[i] = p[i - 1] + f[i];
           i++;
       }
       return p;
   }
   
   private int findMaxFreq(long[] f, long[] p, int k, int ops, int s) {
       int r = 0;
       int i = 0;
       
       while (i < s) {
           if (f[i] == 0 && ops == 0) {
               i++;
               continue;
           }
           
           int l = Math.max(0, i - k);
           int h = Math.min(s - 1, i + k);
           
           long e = p[h];
           if (l > 0) {
               e -= p[l - 1];
           }
           
           long a = e - f[i];
           long t = f[i] + Math.min(ops, a);
           r = Math.max(r, (int)t);
           i++;
       }
       
       return r;
   }
}",1447723525
sidgureja,sidgureja,358,3626,java,"class Solution {
    public int smallestNumber(int n, int t) 
    {
        while (true) {
            int product = 1;
            int current = n;

            // Calculate the product of digits of the current number
            while (current > 0) {
                int digit = current % 10;
                product *= digit;
                current /= 10;
            }

            // Check if the product is divisible by t
            if (product % t == 0) {
                return n;
            }
            n++;
        }
    }
}",1447666133
sidgureja,sidgureja,358,3640,java,"class Solution {
   private static class Event {
       int time, count;
       Event(int t, int c) {
           time = t;
           count = c;
       }
   }

   public int maxFrequency(int[] nums, int k, int numOperations) {
       HashMap<Integer, Integer> f = new HashMap<>();
       ArrayList<Event> e = new ArrayList<>();
       TreeSet<Integer> t = new TreeSet<>();
       
       int i = 0;
       while(i < nums.length) {
           f.put(nums[i], f.getOrDefault(nums[i], 0) + 1);
           e.add(new Event(nums[i] - k, 1));
           e.add(new Event(nums[i] + k + 1, -1));
           i++;
       }

       for(Event evt : e) {
           t.add(evt.time);
       }
       for(int key : f.keySet()) {
           t.add(key);
       }

       e.sort((a,b) -> a.time - b.time);
       
       int cur = 0;
       int m = 0;
       i = 0;
       
       Iterator<Integer> it = t.iterator();
       while(it.hasNext()) {
           int p = it.next();
           
           while(i < e.size() && e.get(i).time <= p) {
               cur += e.get(i).count;
               i++;
           }
           
           int base = f.getOrDefault(p, 0);
           int pos = base + Math.min(numOperations, cur - base);
           m = Math.max(m, pos);
       }
       
       return m;
   }
}",1447739720
DYR90,DYR90,359,3622,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        counter = Counter(nums)
        nums.sort()
        i, j, n = 0, 0, len(nums)
        left, right = nums[0], nums[-1]
        res = 0
        
        for t in range(left, right+1):
            while j < n and nums[j] - t <= k:
                j += 1
            while i < n and t - nums[i] > k:
                i += 1
            res = max(res, counter[t]+min(numOperations, j-i-counter[t]))
        
        return res",1447706201
DYR90,DYR90,359,3626,python3,"class Solution:
    def smallestNumber(self, n: int, t: int) -> int:
        i = n
        while True:
            s = list(map(int, list(str(i))))
            r = 1
            for d in s:
                r *= d
            if r % t == 0:
                return i
            i += 1
            
        return -1",1447655708
DYR90,DYR90,359,3640,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        counter = Counter(nums)
        nums.sort()
        j, n = 0, len(nums)
        res = 0
        
        for i in range(n):
            mid = nums[i] + k
            right = nums[i] + 2 * k
            while j < n and nums[j] <= right:
                j += 1
            res = max(res, counter[mid]+min(numOperations, j-i-counter[mid]))
        
        i, j, n = 0, 0, len(nums)
        for mid in range(n):
            left = nums[mid] - k
            right = nums[mid] + k
            while j < n and nums[j] <= right:
                j += 1
            while i < n and nums[i] < left:
                i += 1
            res = max(res, counter[nums[mid]]+min(numOperations, j-i-counter[nums[mid]]))
        
        return res",1447739743
Brian,brian880807,360,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        sort(nums.begin(), nums.end());
        map<int, int> times;
        int l = 0, r = 0;
        int ans = 1;
        for(int i = 0; i < nums.size(); i++){
            times[nums[i] - k]++;
            times[nums[i] + k + 1]--;
            while(r < nums.size() && nums[r] - nums[i] <= k) r++;
            while(l < nums.size() && nums[i] - nums[l] > k) l++;
            int freq = 1;
            while(i < nums.size() - 1 && nums[i + 1] == nums[i]){
                freq++;
                times[nums[i] - k]++;
                times[nums[i] + k + 1]--;
                i++;
            }
            ans = max(ans, min(r - l - freq, numOperations) + freq);
        }

        int count = 0;
        for(auto& it : times){
            count += it.second;
            ans = max(ans, min(count, numOperations));
        }
        
        return ans;
    }
};",1447731311
Brian,brian880807,360,3626,cpp,"class Solution {
public:
    int smallestNumber(int n, int t) {
        while(true){
            int prod = 1;
            int temp = n;
            while(temp){
                prod *= (temp % 10);
                temp /= 10;
            }
            if(prod % t == 0) return n;
            n++;
        }
        return 0;
    }
};",1447656509
Brian,brian880807,360,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        sort(nums.begin(), nums.end());
        map<int, int> times;
        int l = 0, r = 0;
        int ans = 1;
        for(int i = 0; i < nums.size(); i++){
            times[nums[i] - k]++;
            times[nums[i] + k + 1]--;
            while(r < nums.size() && nums[r] - nums[i] <= k) r++;
            while(l < nums.size() && nums[i] - nums[l] > k) l++;
            int freq = 1;
            while(i < nums.size() - 1 && nums[i + 1] == nums[i]){
                freq++;
                times[nums[i] - k]++;
                times[nums[i] + k + 1]--;
                i++;
            }
            ans = max(ans, min(r - l - freq, numOperations) + freq);
        }

        int count = 0;
        for(auto& it : times){
            count += it.second;
            ans = max(ans, min(count, numOperations));
        }
        
        return ans;
    }
};",1447730404
qRo6x9i8NV,qRo6x9i8NV,362,3622,cpp,"class Solution {
public:
    int solve(int a,int b){
return a*b;}
    
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
         int n=solve(3,6);
             
             
             n = nums.size();
    unordered_map<int, int> frequencyMap;
    vector<pair<int, int>> eventList;
    
    // Build the frequency map and the events for each number
    for (int num : nums) {
        frequencyMap[num]++;
        eventList.push_back({num - k, 1});  // Start of the range
        eventList.push_back({num + k + 1, -1}); // End of the range
    }
    
    // Create a set of all relevant points (events and actual numbers)
    set<int> allPoints;
    for (const auto& event : eventList) {
        allPoints.insert(event.first);
    }
    for (const auto& pair : frequencyMap) {
        allPoints.insert(pair.first);
    }

    // Sort the event points
    vector<int> points(allPoints.begin(), allPoints.end());
    sort(eventList.begin(), eventList.end());

    int maxFrequency = 0;
    int currentOperations = 0;
    int index = 0;
    
    // Iterate through the sorted points
    for (int point : points) {
        // Process events up to the current point
        while (index < eventList.size() && eventList[index].first <= point) {
            currentOperations += eventList[index].second;
            index++;
        }
        
        // Get the actual frequency of the current number `point`
        int currentCount = frequencyMap.count(point) > 0 ? frequencyMap[point] : 0;
        
        // Calculate the possible frequency for this number
        int possibleFrequency = currentCount + min(numOperations, currentOperations - currentCount);
        
        // Track the maximum possible frequency
        maxFrequency = max(maxFrequency, possibleFrequency);
    }

    return maxFrequency;
}


};",1447739946
qRo6x9i8NV,qRo6x9i8NV,362,3626,cpp,"class Solution {
public:
      int productOfDigits(int num) {
    int product = 1;
    while (num > 0) {
        int digit = num % 10;
        product *= digit;
        num /= 10;
    }
    return product;
}
    int smallestNumber(int n, int t) {
     

// Function to find the smallest number >= n whose digit product is divisible by t

    while (true) {
        int product = productOfDigits(n);
        if (product % t == 0) {
            return n;
        }
        n++;
    }
}
    
};",1447665867
qRo6x9i8NV,qRo6x9i8NV,362,3640,cpp,"class Solution {
public:
    int add(int a,int b){
return a+b;}
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        int n=add(2,2);
             n = nums.size();
    unordered_map<int, int> frequencyMap;
    vector<pair<int, int>> eventList;
    
    // Build the frequency map and the events for each number
    for (int num : nums) {
        frequencyMap[num]++;
        eventList.push_back({num - k, 1});  // Start of the range
        eventList.push_back({num + k + 1, -1}); // End of the range
    }
    
    // Create a set of all relevant points (events and actual numbers)
    set<int> allPoints;
    for (const auto& event : eventList) {
        allPoints.insert(event.first);
    }
    for (const auto& pair : frequencyMap) {
        allPoints.insert(pair.first);
    }

    // Sort the event points
    vector<int> points(allPoints.begin(), allPoints.end());
    sort(eventList.begin(), eventList.end());

    int maxFrequency = 0;
    int currentOperations = 0;
    int index = 0;
    
    // Iterate through the sorted points
    for (int point : points) {
        // Process events up to the current point
        while (index < eventList.size() && eventList[index].first <= point) {
            currentOperations += eventList[index].second;
            index++;
        }
        
        // Get the actual frequency of the current number `point`
        int currentCount = frequencyMap.count(point) > 0 ? frequencyMap[point] : 0;
        
        // Calculate the possible frequency for this number
        int possibleFrequency = currentCount + min(numOperations, currentOperations - currentCount);
        
        // Track the maximum possible frequency
        maxFrequency = max(maxFrequency, possibleFrequency);
    }

    return maxFrequency;
        
      
       
    }
};
    ",1447736990
Aditya Gandhi,adis176,363,3622,cpp,"class Solution {
public:
    int lower_bound(vector<int>& arr, int start, int end, int req){
        int mid, ans=end;
        if(req <= arr[start]) return start;
        while(start<=end){
            mid = start + (end-start)/2;
            if(arr[mid]<req){
                start = mid+1;
            }
            else{
                ans = min(ans, mid);
                end = mid-1;
            }
        }
        return ans;
    }

    int upper_bound(vector<int>& arr, int start, int end, int req){
        int mid, ans=start;
        if(req>arr[end]) return end;
        while(start<=end){
            mid = start + (end-start)/2;
            if(arr[mid]<=req){
                ans = max(ans, mid);
                start = mid+1;
            }
            else{
                end = mid-1;
            }
        }
        return ans;
    }
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        int ans = 0;
        unordered_map<int, int> m;
        sort(nums.begin(), nums.end());
        for(auto y: nums){
            m[y]++;
            ans = max(ans, m[y]);
        }
        
        int n = nums.size() ;
        for(int i=0; i<nums.size(); i++) {
            if (i>0 && nums[i] == nums[i-1]) {
                
            } else {
                int lb = lower_bound(nums, 0, n-1, nums[i]-k);
                int ub = upper_bound(nums, 0, n-1, nums[i]+k);
                // cout<<lb<<"" ""<<ub<<endl;
                int pres = ub-lb;
                pres++;
                pres -= m[nums[i]];
                pres = min(pres, numOperations);
                ans = max(ans, pres+m[nums[i]]);
                
                // increase curr
                int nw1 = nums[i] + k;
                int lb1 = lower_bound(nums, 0, n-1, nw1-k);
                int ub1 = upper_bound(nums, 0, n-1, nw1+k);
                // cout<<""1-""<<lb1<<"" ""<<ub1<<endl;
                int pres1 = ub1-lb1;
                pres1++;
                pres1 -= m[nums[i]];
                pres1 = min(pres1, numOperations-m[nums[i]]);
                ans = max(ans, pres1+m[nums[i]]);
                
                // decrease curr
                int nw2 = nums[i] - k;
                int lb2 = lower_bound(nums, 0, n-1, nw2-k);
                int ub2 = upper_bound(nums, 0, n-1, nw2+k);
                // cout<<""2-""<<lb2<<"" ""<<ub2<<endl;
                int pres2 = ub2-lb2;
                pres2++;
                pres2 -= m[nums[i]];
                pres2 = min(pres2, numOperations-m[nums[i]]);
                ans = max(ans, pres2+m[nums[i]]);
            }
        }
        return ans;
    }
};",1447728361
Aditya Gandhi,adis176,363,3626,cpp,"class Solution {
public:
    bool chk(int n, int t){
        int mul = 1;
        string s = to_string(n);
        for(auto y: s){
            int d = int(y-'0');
            mul *= d;
        }
        if(mul%t==0) return true;
        return false;
    }
    int smallestNumber(int n, int t) {
        int ans = n;
        while(true) {
            bool chker = chk(n, t);
            if(chker) {
                return n;
            } else{
                n++;
            }
        }
        return 0;
    }
};",1447674331
Aditya Gandhi,adis176,363,3640,cpp,"class Solution {
public:
    int lower_bound(vector<int>& arr, int start, int end, long long req){
        int mid, ans=end;
        if(req > INT_MAX) req = INT_MAX;
        if(req <= arr[start]) return start;
        while(start<=end){
            mid = start + (end-start)/2;
            if(arr[mid]<req){
                start = mid+1;
            }
            else{
                ans = min(ans, mid);
                end = mid-1;
            }
        }
        return ans;
    }

    int upper_bound(vector<int>& arr, int start, int end, long long req){
        int mid, ans=start;
        if(req > INT_MAX) req = INT_MAX;
        if(req>arr[end]) return end;
        while(start<=end){
            mid = start + (end-start)/2;
            if(arr[mid]<=req){
                ans = max(ans, mid);
                start = mid+1;
            }
            else{
                end = mid-1;
            }
        }
        return ans;
    }
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
                int ans = 0;
        unordered_map<int, int> m;
        sort(nums.begin(), nums.end());
        for(auto y: nums){
            m[y]++;
            ans = max(ans, m[y]);
        }
        
        int n = nums.size() ;
        for(int i=0; i<nums.size(); i++) {
            if (i>0 && nums[i] == nums[i-1]) {
                
            } else {
                int lb = lower_bound(nums, 0, n-1, nums[i]-k);
                int ub = upper_bound(nums, 0, n-1, nums[i]+k);
                // cout<<lb<<"" ""<<ub<<endl;
                int pres = ub-lb;
                pres++;
                pres -= m[nums[i]];
                pres = min(pres, numOperations);
                ans = max(ans, pres+m[nums[i]]);
                
                // increase curr
                long long nw1 = nums[i] + k;
                int lb1 = lower_bound(nums, 0, n-1, nw1-k);
                int ub1 = upper_bound(nums, 0, n-1, nw1+k);
                // cout<<""1-""<<lb1<<"" ""<<ub1<<endl;
                int pres1 = ub1-lb1;
                pres1++;
                pres1 -= m[nums[i]];
                pres1 = min(pres1, numOperations-m[nums[i]]);
                ans = max(ans, pres1+m[nums[i]]);
                
                // decrease curr
                long long nw2 = nums[i] - k;
                int lb2 = lower_bound(nums, 0, n-1, nw2-k);
                int ub2 = upper_bound(nums, 0, n-1, nw2+k);
                // cout<<""2-""<<lb2<<"" ""<<ub2<<endl;
                int pres2 = ub2-lb2;
                pres2++;
                pres2 -= m[nums[i]];
                pres2 = min(pres2, numOperations-m[nums[i]]);
                ans = max(ans, pres2+m[nums[i]]);
            }
        }
        return ans;
    }
};",1447731586
jeff27726,jeff27726,364,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        int n=nums.size();
        sort(nums.begin(), nums.end());
        
        int res=0;
        int L=0, R=0; //[L, R]
        int mid = 0;
        int ctr = nums[0];
        int low = ctr - k;
        int top = ctr + k;
        
        map<int, int> count;
        count[ctr] = 1;
        
        while(mid<n){
            while(R<n-1 && nums[R+1]<=top){
                ++R;
                ++count[nums[R]];
            }
            res = max(res, min(R-L+1, numOperations+count[ctr]));
            //cout << ""["" << L << "", "" << R << ""]: "" << min(R-L+1, numOperations+count[ctr]) << ""\n"";
            
            while(mid<n && nums[mid]==ctr){
                ++mid;
            }
            if(mid==n)
                break;
            ctr = nums[mid];
            low = ctr-k, top = ctr+k;
            
            while(L<n && nums[L]<low){
                ++L;
            }
        }
        
        L=0, R=1; //[L, R)
        low = nums[0];
        top = nums[0];
        while(res < numOperations && R<n){
            while(R<n && nums[R]<=low+2*k){
                top = nums[R++];
            }
            
            res = max(res, min(R-L, numOperations));
            //cout << ""["" << L << "", "" << R << ""]: "" << R-L << ""\n"";
            
            while(L<n && nums[L]==low){
                ++L;
            }
            if(L<n)
                low=nums[L];
        }
        
        return res;
    }
};",1447719324
jeff27726,jeff27726,364,3626,cpp,"class Solution {
private:
    int eval(int x, int p){
        int res = 1;
        while(x>0&&res>0){
            res *= x%10;
            res %= p;
            x/=10;
        }
        return res;
    }
public:
    int smallestNumber(int n, int t) {
        int res = n;
        while(eval(res, t)){
            ++res;
        }
        return res;
    }
};",1447656020
jeff27726,jeff27726,364,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        int n=nums.size();
        sort(nums.begin(), nums.end());
        
        int res=0;
        int L=0, R=0; //[L, R]
        int mid = 0;
        int ctr = nums[0];
        int low = ctr - k;
        int top = ctr + k;
        
        map<int, int> count;
        count[ctr] = 1;
        
        while(mid<n){
            while(R<n-1 && nums[R+1]<=top){
                ++R;
                ++count[nums[R]];
            }
            res = max(res, min(R-L+1, numOperations+count[ctr]));
            //cout << ""["" << L << "", "" << R << ""]: "" << min(R-L+1, numOperations+count[ctr]) << ""\n"";
            
            while(mid<n && nums[mid]==ctr){
                ++mid;
            }
            if(mid==n)
                break;
            ctr = nums[mid];
            low = ctr-k, top = ctr+k;
            
            while(L<n && nums[L]<low){
                ++L;
            }
        }
        
        L=0, R=1; //[L, R)
        low = nums[0];
        top = nums[0];
        while(res < numOperations && R<n){
            while(R<n && nums[R]<=low+2*k){
                top = nums[R++];
            }
            
            res = max(res, min(R-L, numOperations));
            //cout << ""["" << L << "", "" << R << ""]: "" << R-L << ""\n"";
            
            while(L<n && nums[L]==low){
                ++L;
            }
            if(L<n)
                low=nums[L];
        }
        
        return res;
    }
};",1447723281
devashish59,devashish59,365,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int m)
    {
        int n = nums.size(), i;
        vector<long long> a(n);
        sort(nums.begin(), nums.end());
        for(i=0;i<n;i++) a[i] = (long long)(nums[i]);
        int ans = 1;
        for(i=0;i<n;i++)
        {
            auto it = upper_bound(a.begin(), a.end(), a[i]+2*k);
            int id = (int)(it-a.begin());
            int v = id-i;
            ans = max(ans, min(v, m));
        }
        
        map<long long, int> st, ed, cn;
        for(i=0;i<n;i++)
        {
            if(st.find(a[i])==st.end()) st[a[i]] = i;
            ed[a[i]] = i;
            cn[a[i]]++;
        }
        
        for(i=0;i<n;i++)
        {
            auto it1 = lower_bound(a.begin(), a.end(), a[i]-k);
            auto it2 = upper_bound(a.begin(), a.end(), a[i]+k);
            
            int id1 = (int)(it1-a.begin()), id2 = (int)(it2-a.begin());
            int x = st[a[i]]-id1, y = id2-ed[a[i]]-1;
            ans = max(ans, cn[a[i]]+min(m, x+y));
        }
        return ans;
    }
};",1447748643
devashish59,devashish59,365,3626,cpp,"int find(int n) {
    int prod = 1;
    while(n>0) {
        prod *= (n%10);
        n/=10;
    }
    return prod;
}

class Solution {
public:
    int smallestNumber(int n, int t) {

        int i = n, ans;
        int prod = 1;
        while(2>0) {
            prod = find(i);
            if(prod%t==0) {
                ans = i;
                break;
            }
            i++;
        }
        return ans;
    }
};",1447658481
devashish59,devashish59,365,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int m)
    {
        int n = nums.size(), i;
        vector<long long> a(n);
        sort(nums.begin(), nums.end());
        for(i=0;i<n;i++) a[i] = (long long)(nums[i]);
        int ans = 1;
        for(i=0;i<n;i++)
        {
            auto it = upper_bound(a.begin(), a.end(), a[i]+2*k);
            int id = (int)(it-a.begin());
            int v = id-i;
            ans = max(ans, min(v, m));
        }
        
        map<long long, int> st, ed, cn;
        for(i=0;i<n;i++)
        {
            if(st.find(a[i])==st.end()) st[a[i]] = i;
            ed[a[i]] = i;
            cn[a[i]]++;
        }
        
        for(i=0;i<n;i++)
        {
            auto it1 = lower_bound(a.begin(), a.end(), a[i]-k);
            auto it2 = upper_bound(a.begin(), a.end(), a[i]+k);
            
            int id1 = (int)(it1-a.begin()), id2 = (int)(it2-a.begin());
            int x = st[a[i]]-id1, y = id2-ed[a[i]]-1;
            ans = max(ans, cn[a[i]]+min(m, x+y));
        }
        return ans;
    }
};",1447748427
LeGusto,LeGusto,366,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {

        sort(nums.begin(), nums.end());
        int ans = 0;

        for (int i = 0; i<nums.size(); i++) {
            int l = i;
            while (i < nums.size() && nums[i] == nums[l]) i++;
            i--;
            int r = i;

            auto lb = lower_bound(nums.begin(), nums.end(), nums[l]-k);
            auto ub = upper_bound(nums.begin(), nums.end(), nums[l]+k);
            ub--;
            int d1 = l - (lb-nums.begin());
            int d2 = ub - nums.begin() - r;


            int rem_ops = numOperations;
            rem_ops -=  min(d1+d2, numOperations);
            int calc = r-l+1 + min(d1+d2, numOperations);

            ans = max(ans, calc);
/////////////////////////////////////
            
            int c_num = nums[i]-k;
            lb = lower_bound(nums.begin(), nums.end(), c_num-k);
            ub = upper_bound(nums.begin(), nums.end(), c_num+k);
            ub--;
            int tot = min(numOperations-1, (int)(ub-lb)) + 1;
            
            ans = max(ans, tot);
/////////////////
            c_num = nums[i]+k;
            lb = lower_bound(nums.begin(), nums.end(), c_num-k);
            ub = upper_bound(nums.begin(), nums.end(), c_num+k);
            ub--;
            tot = min(numOperations-1, (int)(ub-lb)) + 1;
            
            ans = max(ans, tot);
            
        }

        return ans;
    }
};",1447725216
LeGusto,LeGusto,366,3626,cpp,"class Solution {
public:
    int smallestNumber(int n, int t) {
        int ans = n;
        while (true) {
            int tmp = ans;
            int clc = 1;
            int tot = to_string(tmp).size();
            for(int i = 0; i<tot; i++) {
                clc *= tmp%10;
                tmp /= 10;
            }

            if (clc%t == 0) return ans;
            ans++;
        }

        return ans;
    }
};",1447659830
LeGusto,LeGusto,366,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums2, int k, int ops) {

        vector<long long> nums;
        long long numOperations = ops;
        for (int i = 0; i<nums2.size(); i++) nums.push_back(nums2[i]);
        
        sort(nums.begin(), nums.end());
        long long ans = 0;

        for (long long i = 0; i<nums.size(); i++) {
            long long l = i;
            while (i < nums.size() && nums[i] == nums[l]) i++;
            i--;
            long long r = i;

            auto lb = lower_bound(nums.begin(), nums.end(), (long long)nums[l]-k);
            auto ub = upper_bound(nums.begin(), nums.end(), (long long)nums[l]+k);
            ub--;
            long long d1 = l - (lb-nums.begin());
            long long d2 = ub - nums.begin() - r;

            long long calc = r-l+1 + min(d1+d2, numOperations);

            ans = max(ans, calc);
/////////////////////////////////////
            
            long long c_num = nums[i]-k;
            lb = lower_bound(nums.begin(), nums.end(), c_num-k);
            ub = upper_bound(nums.begin(), nums.end(), c_num+k);
            ub--;
            long long tot = min(numOperations-1, (long long)(ub-lb)) + 1;
            
            ans = max(ans, tot);
/////////////////
            c_num = nums[i]+k;
            lb = lower_bound(nums.begin(), nums.end(), c_num-k);
            ub = upper_bound(nums.begin(), nums.end(), c_num+k);
            ub--;
            tot = min(numOperations-1, (long long)(ub-lb)) + 1;
            
            ans = max(ans, tot);
            
        }

        return ans;
    }
};",1447731913
Prans,tenzin0514,367,3622,cpp,"class Solution {
private:
    void calculateFrequency(const vector<int>& nums, vector<int>& freq) {
        for (int num : nums) {
            freq[num]++;
        }
    }

    void computePrefixSums(const vector<int>& freq, vector<int>& prefix) {
        int i = 1;
        while (i <= 100000) {
            prefix[i] = prefix[i - 1] + freq[i];
            i++;
        }
    }

    pair<int, int> getRangeBounds(int x, int k) {
        return {max(1, x - k), min(100000, x + k)};
    }

    int getCountInRange(const vector<int>& prefix, int left, int right) {
        return prefix[right] - prefix[left - 1];
    }

    int getModifiableCount(int totalInRange, int freqX) {
        return totalInRange - freqX;
    }

    int getMaxFrequencyForX(int x, const vector<int>& freq, const vector<int>& prefix, int k, int numOperations) {
        auto [left, right] = getRangeBounds(x, k);
        int totalInRange = getCountInRange(prefix, left, right);
        int canModifyCount = getModifiableCount(totalInRange, freq[x]);
        return freq[x] + min(numOperations, canModifyCount);
    }

    void updateMaxFrequency(int& maxFreq, int newFreq) {
        maxFreq = maxFreq ^ (max(maxFreq, newFreq) ^ maxFreq);
    }

    vector<int> generateRange(int start, int end) {
        vector<int> range;
        int i = start;
        while (i <= end) {
            range.push_back(i);
            i++;
        }
        return range;
    }

public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        vector<int> freq(100001, 0);
        vector<int> prefix(100001, 0);

        calculateFrequency(nums, freq);
        computePrefixSums(freq, prefix);

        int maxFreq = 0;
        
        vector<int> range = generateRange(1, 100000);
        for (int x : range) {
            int maxFreqForX = getMaxFrequencyForX(x, freq, prefix, k, numOperations);
            updateMaxFrequency(maxFreq, maxFreqForX);
        }

        return maxFreq;
    }
};",1447694676
Prans,tenzin0514,367,3626,cpp,"class Solution {
public:
    int digitProduct(int x) {
        int product = 1;
        while (x > 0) {
            product *= (x % 10);
            x /= 10;
        }
        return product;
    }
    
    int smallestNumber(int n, int t) {
        while (true) {
            if (digitProduct(n) % t == 0) {
                return n;
            }
            n++;
        }
    }
};
",1447658944
Prans,tenzin0514,367,3640,cpp,"bool isEven(int num) {
    return (num & 1) == 0;
}

int countSetBits(int num) {
    return __builtin_popcount(num);
}

void updateFrequency(map<int, int>& freq, int num) {
    freq[num]++;
}

vector<pair<int, int>> generateEvents(const vector<int>& nums, int k) {
    vector<pair<int, int>> events;
    for (int num : nums) {
        events.push_back({num - k, +1});
        events.push_back({num + k + 1, -1});
    }
    return events;
}

int calculateMaxFrequency(map<int, int>& freq, vector<pair<int, int>>& events, set<int>& points, int numOperations) {
    int maxFreq = 0;
    int currentOverlap = 0;
    int idx = 0;
    int actualCount = 0;

    for (int t : points) {
        while (idx < events.size() && events[idx].first <= t) {
            currentOverlap += events[idx].second;
            idx++;
        }

        actualCount = freq.count(t) ? freq[t] : 0;
        int possibleFreq = actualCount + min(numOperations, currentOverlap - actualCount);
        maxFreq = max(maxFreq, possibleFreq);
    }

    return maxFreq;
}

class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        map<int, int> freq;
        vector<pair<int, int>> events;
        set<int> points;

        for (int num : nums) {
            updateFrequency(freq, num);
        }

        events = generateEvents(nums, k);

        for (auto& event : events) {
            points.insert(event.first);
        }
        for (auto& p : freq) {
            points.insert(p.first);
        }

        sort(events.begin(), events.end());

        return calculateMaxFrequency(freq, events, points, numOperations);
    }
};
",1447723515
Farouk Faiz,catalypso,369,3622,python3,"from collections import defaultdict, Counter
from bisect import bisect_left
from math import inf


class Solution:
    def maxFrequency(self, nums: list[int], k: int, numOperations: int) -> int:
        nums.sort()
        n = len(nums)
        counter = Counter(nums)
        ans = 0
        for num, cnt in counter.most_common():
            if cnt + numOperations <= ans:
                break
            l = bisect_left(nums, num - k)
            r = bisect_left(nums, num + k + 1) - 1
            ans = max(ans, min(numOperations, r - l + 1 - cnt) + cnt)
            # print(num, l, r, cnt, ans)
        if ans >= numOperations:
            return ans

        for i in range(n):
            if i + ans >= n:
                break
            if nums[i + ans] - nums[i] > 2 * k:
                continue
            r = bisect_left(nums, nums[i] + 2 * k + 1) - 1
            # print(ans, min(numOperations, r - i + 1))
            ans = min(numOperations, r - i + 1)

        return ans",1447731693
Farouk Faiz,catalypso,369,3626,python3,"class Solution:
    def smallestNumber(self, n: int, t: int) -> int:
        while True:
            res = 1
            l = map(int, list(str(n)))
            for v in l:
                res = res * v
            if res % t == 0:
                return n
            n += 1
",1447655968
Farouk Faiz,catalypso,369,3640,python3,"from collections import defaultdict, Counter
from bisect import bisect_left
from math import inf


class Solution:
    def maxFrequency(self, nums: list[int], k: int, numOperations: int) -> int:
        nums.sort()
        n = len(nums)
        counter = Counter(nums)
        ans = 0
        for num, cnt in counter.most_common():
            if cnt + numOperations <= ans:
                break
            l = bisect_left(nums, num - k)
            r = bisect_left(nums, num + k + 1) - 1
            ans = max(ans, min(numOperations, r - l + 1 - cnt) + cnt)
            # print(num, l, r, cnt, ans)
        if ans >= numOperations:
            return ans

        for i in range(n):
            if i + ans >= n:
                break
            if nums[i + ans] - nums[i] > 2 * k:
                continue
            r = bisect_left(nums, nums[i] + 2 * k + 1) - 1
            # print(ans, min(numOperations, r - i + 1))
            ans = min(numOperations, r - i + 1)

        return ans",1447732188
EigenVector0,EigenVector0,370,3622,java,"class Solution {
    public int maxFrequency(int[] nums, int k, int nOp) {
        final int n = nums.length;
		Arrays.sort(nums);
		final int MN = nums[0], MX = nums[n-1];
		int[] cntr = new int[MX+1];
		for (int x : nums) ++cntr[x];
		int ans = 0;
		int i = 0, j = 0;
		for (int d = MN; d <= MX; ++d) {
			while (j<n && nums[j]-k <= d) ++j;
			ans = Math.max(ans, Math.min(j-i - cntr[d], nOp) + cntr[d]);
			while (i<n&& nums[i]+k==d) ++i;
		}
		return ans;
    }
}
",1447720410
EigenVector0,EigenVector0,370,3626,java,"class Solution {
    public int smallestNumber(int n, int t) {
        for (int i = n; ; ++i) {
			int prod = 1;
			for (int j = i; j != 0; j /= 10) {
				prod *= j%10;
			}
			if (prod%t==0) return i;
		}
    }
}
",1447660673
EigenVector0,EigenVector0,370,3640,java,"class Solution {
    public int maxFrequency(int[] nums, int k, int nOp) {
        final int n = nums.length;
		Arrays.sort(nums);
		final int MN = nums[0], MX = nums[n-1];
		var cntr = new HashMap<Integer,Integer>();
		for (int x : nums) {
			cntr.merge(x,1,Integer::sum);
		}
		int ans = 0;
		int j = 0;
		if (k>0) {
			for (int i = 0; i < n; ++i) {
				int d = nums[i]+k;
				while (j<n && nums[j]-k <= d) ++j;
				ans = Math.max(ans, Math.min(j-i, nOp));
			}
		}
		var keys = new ArrayList<Integer>(cntr.keySet());
		Collections.sort(keys);
		j = 0;
		int i = 0;
		for (int d : keys) {
			final int cnt = cntr.get(d);
			while (i<n&& nums[i]+k < d) ++i;
			while (j<n && nums[j]-k <= d) ++j;
			ans = Math.max(ans, Math.min(j-i - cnt, nOp) + cnt);
		}
		return ans;
    }
}
",1447748978
Pranshu Jain,pranshujain0111,371,3622,cpp,"#include <bits/stdc++.h>
using namespace std;

/* clang-format off */

/* TYPES  */
#define ll long long
#define pii pair<int, int>
#define pll pair<long long, long long>
#define vi vector<int>
#define vll vector<long long>
#define mii map<int, int>
#define si set<int>
#define sc set<char>

/* FUNCTIONS */
#define f(i,s,e) for(long long int i=s;i<e;i++)
#define cf(i,s,e) for(long long int i=s;i<=e;i++)
#define rf(i,e,s) for(long long int i=e-1;i>=s;i--)
#define pb push_back
#define eb emplace_back

/* PRINTS */
template <class T>
void print_v(vector<T> &v) { cout << ""{""; for (auto x : v) cout << x << "",""; cout << ""\b}""; }

/* UTILS */
#define MOD 1000000007
#define PI 3.1415926535897932384626433832795
#define read(type) readInt<type>()
ll min(ll a,int b) { if (a<b) return a; return b; }
ll min(int a,ll b) { if (a<b) return a; return b; }
ll max(ll a,int b) { if (a>b) return a; return b; }
ll max(int a,ll b) { if (a>b) return a; return b; }
ll gcd(ll a,ll b) { if (b==0) return a; return gcd(b, a%b); }
ll lcm(ll a,ll b) { return a/gcd(a,b)*b; }
string to_upper(string a) { for (int i=0;i<(int)a.size();++i) if (a[i]>='a' && a[i]<='z') a[i]-='a'-'A'; return a; }
string to_lower(string a) { for (int i=0;i<(int)a.size();++i) if (a[i]>='A' && a[i]<='Z') a[i]+='a'-'A'; return a; }
bool prime(ll a) { if (a==1) return 0; for (int i=2;i<=round(sqrt(a));++i) if (a%i==0) return 0; return 1; }
void yes() { cout<<""YES\n""; }
void no() { cout<<""NO\n""; }

/*  All Required define Pre-Processors and typedef Constants */
typedef long int int32;
typedef unsigned long int uint32;
typedef long long int int64;
typedef unsigned long long int  uint64;

class Solution {
public:
    vi getFreq(const vi& arr, int range) {
        vi freq(range, 0);
        for (int v : arr) {
            freq[v]++;
        }
        return freq;
    }

    vi getPrefixSum(const vi& freq) {
        vi pSum(freq.size(), 0);
        pSum[0] = freq[0];
        for (int i = 1; i < freq.size(); i++) {
            pSum[i] = pSum[i - 1] + freq[i];
        }
        return pSum;
    }

    int getMaxFreq(const vi& freq, const vi& pSum, int ops, int range, int adjRange) {
        int maxFreq = 0;
        for (int x = 0; x < range; x++) {
            if (freq[x] == 0 && ops == 0) continue;
            int l = max(0, x - adjRange);
            int r = min(range - 1, x + adjRange);

            int rangeSum = pSum[r] - (l > 0 ? pSum[l - 1] : 0);
            int adjCount = rangeSum - freq[x];
            int total = freq[x] + min(ops, adjCount);

            maxFreq = max(maxFreq, total);
        }
        return maxFreq;
    }

    int maxFrequency(vi& nums, int adjRange, int ops) {
        int maxVal = *max_element(nums.begin(), nums.end());
        int range = maxVal + adjRange + 2;
        vi freq = getFreq(nums, range);
        vi pSum = getPrefixSum(freq);
        return getMaxFreq(freq, pSum, ops, range, adjRange);
    }
};",1447710758
Pranshu Jain,pranshujain0111,371,3626,cpp,"class Solution {
public:
    int smallestNumber(int n, int t) {
        while (true) {
            int product = 1, num = n;
            while (num > 0) {
                product *= (num % 10);
                num /= 10;
            }
            if (product % t == 0) return n;
            n++;
        }
    }
};
",1447668925
Pranshu Jain,pranshujain0111,371,3640,cpp,"#include <bits/stdc++.h>
using namespace std;

/* clang-format off */

/* TYPES  */
#define ll long long
#define pii pair<int, int>
#define pll pair<long long, long long>
#define vi vector<int>
#define vll vector<long long>
#define mii map<int, int>
#define si set<int>
#define sc set<char>

/* FUNCTIONS */
#define f(i,s,e) for(long long int i=s;i<e;i++)
#define cf(i,s,e) for(long long int i=s;i<=e;i++)
#define rf(i,e,s) for(long long int i=e-1;i>=s;i--)
#define pb push_back
#define eb emplace_back

/* PRINTS */
template <class T>
void print_v(vector<T> &v) { cout << ""{""; for (auto x : v) cout << x << "",""; cout << ""\b}""; }

/* UTILS */
#define MOD 1000000007
#define PI 3.1415926535897932384626433832795
#define read(type) readInt<type>()
ll min(ll a,int b) { if (a<b) return a; return b; }
ll min(int a,ll b) { if (a<b) return a; return b; }
ll max(ll a,int b) { if (a>b) return a; return b; }
ll max(int a,ll b) { if (a>b) return a; return b; }
ll gcd(ll a,ll b) { if (b==0) return a; return gcd(b, a%b); }
ll lcm(ll a,ll b) { return a/gcd(a,b)*b; }
string to_upper(string a) { for (int i=0;i<(int)a.size();++i) if (a[i]>='a' && a[i]<='z') a[i]-='a'-'A'; return a; }
string to_lower(string a) { for (int i=0;i<(int)a.size();++i) if (a[i]>='A' && a[i]<='Z') a[i]+='a'-'A'; return a; }
bool prime(ll a) { if (a==1) return 0; for (int i=2;i<=round(sqrt(a));++i) if (a%i==0) return 0; return 1; }
void yes() { cout<<""YES\n""; }
void no() { cout<<""NO\n""; }

/*  All Required define Pre-Processors and typedef Constants */
typedef long int int32;
typedef unsigned long int uint32;
typedef long long int int64;
typedef unsigned long long int  uint64;

class Solution {
public:
    int maxFrequency(vi& nums, int maxDiff, int maxOps) {
        mii freqMap;
        vector<pii> events;
        
        populateFrequencyMap(nums, freqMap, events, maxDiff);
        
        si uniquePoints = collectUniquePoints(events, freqMap);
        
        vector<int> sortedPoints(uniquePoints.begin(), uniquePoints.end());
        sort(events.begin(), events.end());
        
        return computeMaxPossibleFrequency(events, sortedPoints, freqMap, maxOps);
    }

private:
    void populateFrequencyMap(vi& nums, mii& freqMap, vector<pii>& events, int maxDiff) {
        for (int num : nums) {
            freqMap[num]++;
            events.pb({num - maxDiff, +1});
            events.pb({num + maxDiff + 1, -1});
        }
    }
    
    si collectUniquePoints(const vector<pii>& events, const mii& freqMap) {
        si uniquePoints;
        for (const auto& event : events) {
            uniquePoints.insert(event.first);
        }
        for (const auto& entry : freqMap) {
            uniquePoints.insert(entry.first);
        }
        return uniquePoints;
    }

    int computeMaxPossibleFrequency(const vector<pii>& events, const vector<int>& sortedPoints, 
                                    const mii& freqMap, int maxOps) {
        int eventIdx = 0;
        int currentOverlap = 0;
        int result = 0;
        
        for (int point : sortedPoints) {
            while (eventIdx < events.size() && events[eventIdx].first <= point) {
                currentOverlap += events[eventIdx].second;
                eventIdx++;
            }

            int currentCount = freqMap.count(point) ? freqMap.at(point) : 0;
            int possibleFreq = currentCount + min(maxOps, currentOverlap - currentCount);
            result = max(result, possibleFreq);
        }
        
        return result;
    }
};
",1447732206
Nishith G. Behera,zenolus,372,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& a, int k, int numOperations) {
        sort(a.begin(), a.end());
        int mx = a.back();
        int ans = -1;
        for(int i = 0; i <= 2 * mx; i++){
            int lo = (int)(lower_bound(a.begin(), a.end(), i-k) - a.begin());
            int hi = (int)(upper_bound(a.begin(), a.end(), i+k) - a.begin());
            int elo = (int)(lower_bound(a.begin(), a.end(), i) - a.begin());
            int ehi = (int)(upper_bound(a.begin(), a.end(), i) - a.begin());
            int ec = ehi - elo, rng = hi - lo;
            int reqOps = rng - ec;
            // cout<<i<<' '<<lo<<' '<<hi<<' '<<elo<<' '<<ehi<<' '<<reqOps<<endl;
            ans = max(ans, ec + min(reqOps, numOperations));
        }
        return ans;
    }
};",1447680982
Nishith G. Behera,zenolus,372,3626,cpp,"class Solution {
public:
    int smallestNumber(int n, int t) {
        for(int num = n; num <= n + 1000; num++) {
            int pr = 1, x = num;
            while(x) {
                pr *= (x % 10);
                x /= 10;
            }
            if(pr % t == 0) return num;
        }
        return -1;
    }
};",1447654155
Nishith G. Behera,zenolus,372,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& a, int k, int ops) {
        map<int, vector<int>> m; // {actual num count, can reach count}
        for(auto x : a) {
            if(!m.count(x)) m[x] = {0, 0};
            if(!m.count(x + k + 1)) m[x + k + 1] = {0, 0};
            if(!m.count(x - k)) m[x - k] = {0, 0};
            m[x] = {m[x][0]+1, m[x][1]};
            m[x+k+1] = {m[x+k+1][0], m[x+k+1][1]-1};
            m[x-k] = {m[x-k][0], m[x-k][1]+1};
        }
        int ans = 1, crc = 0;
        for(auto it = m.begin(); it != m.end(); it = next(it)) {
            auto v = (*it).second;
            int anc = v[0];
            crc += v[1];
            ans = max(ans, anc + min(crc - anc, ops));
        }
        return ans;
    }
};",1447723800
Sagar Goel,Sagar_Goel,373,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        sort(nums.begin(),nums.end());
        unordered_map<long long,long long> u;
        for(int i=0;i<nums.size();i++){
            u[nums[i]]++;
        }
        
        long long ans=0;
        
        for(long long i=0;i<nums.size();i++){
            long long s1=0,e1=i,s2=i,e2=nums.size()-1,res1,res2;
            
            while(s1<=e1){
                int mid=s1+(e1-s1)/2;
                if(nums[mid]+k>=nums[i]){
                    res1=mid;
                    e1=mid-1;
                }
                else{
                    s1=mid+1;
                }
            }
            
            while(s2<=e2){
                int mid=s2+(e2-s2)/2;
                if(nums[mid]-k<=nums[i]){
                    res2=mid;
                    s2=mid+1;
                }
                else{
                    e2=mid-1;
                }
            }
            
            long long cur = min((long long)numOperations,res2-res1+1-u[nums[i]])+u[nums[i]];
            
            ans=max(ans,cur);
            
        }
        
        long long i=0,j=0;
        while(j<nums.size()){
            if(nums[j]-k<=nums[i]+k){
                ans=max(ans,(long long)min(j-i+1,(long long)numOperations));
                j++;
            }
            else{
                i++;
            }
        }
        return ans;
    }
};",1447749217
Sagar Goel,Sagar_Goel,373,3626,cpp,"class Solution {
public:
    int smallestNumber(int n, int t) {
        for(int i=n;i<=n+10;i++){
            int num=1;
            int cur=i;
            while(cur){
                num=(num*(cur%10));
                cur/=10;
            }
            if((num%t)==0) return i;
        }
        return -1;
    }
};",1447659166
Sagar Goel,Sagar_Goel,373,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        sort(nums.begin(),nums.end());
        unordered_map<long long,long long> u;
        for(int i=0;i<nums.size();i++){
            u[nums[i]]++;
        }
        
        long long ans=0;
        
        for(long long i=0;i<nums.size();i++){
            long long s1=0,e1=i,s2=i,e2=nums.size()-1,res1,res2;
            
            while(s1<=e1){
                int mid=s1+(e1-s1)/2;
                if(nums[mid]+k>=nums[i]){
                    res1=mid;
                    e1=mid-1;
                }
                else{
                    s1=mid+1;
                }
            }
            
            while(s2<=e2){
                int mid=s2+(e2-s2)/2;
                if(nums[mid]-k<=nums[i]){
                    res2=mid;
                    s2=mid+1;
                }
                else{
                    e2=mid-1;
                }
            }
            
            long long cur = min((long long)numOperations,res2-res1+1-u[nums[i]])+u[nums[i]];
            
            ans=max(ans,cur);
            
        }
        
        long long i=0,j=0;
        while(j<nums.size()){
            if(nums[j]-k<=nums[i]+k){
                ans=max(ans,(long long)min(j-i+1,(long long)numOperations));
                j++;
            }
            else{
                i++;
            }
        }
        return ans;
    }
};",1447748585
Suyash Mishra,mishrasuyash713,375,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& a, int k, int o) {
        int n = a.size(),ans = 0;
        int maxi = *max_element(a.begin(),a.end()),nn = maxi+k+2;
        vector<int> f(nn,0);
        vector<int> p(nn,0);
        for(int i = 0;i<a.size();i++){
            f[a[i]] += 1;
        }
        p[0] = f[0];
        for(int i = 1;i<f.size();i++){
            p[i] = p[i-1]+f[i];
        }
        for(int j = 0;j<nn;j++){
            if(f[j] == 0 && o == 0) continue;
            int l = max(0,j-k),r=min(nn-1,j+k);
            int x=p[r];
            if(l>0){
                x -= p[l-1];
            }
            // int y = x - f[j];
            // int total = f[j]+min(o,x-f[j]);
            ans = max(ans,f[j]+min(o,x-f[j]));
        }
        return ans;
    }
};",1447722265
Suyash Mishra,mishrasuyash713,375,3626,cpp,"class Solution {
public:
    int smallestNumber(int n, int t) {
        for(int i = n;i<=n+9;i++){
            int x = i;
            int ans = 1;
            bool ok = 1;
            while(x != 0){
                ok = 0;
                ans *= (x%10);
                x/=10;
            }
            if( ok== 1) return 0;
            if(ans%t == 0) return i;
        }
        return 0;
    }
};",1447671706
Suyash Mishra,mishrasuyash713,375,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        long long n = nums.size();
        unordered_map<long long, long long> freq;
        vector<pair<long long, long long>> events;

        for (long long num : nums) {
            freq[num]++;
            events.emplace_back(num - k, +1);
            events.emplace_back(num + k + 1, -1);
        }

        set<long long> points;
        for (const auto& event : events) {
            points.insert(event.first);
        }
        for (const auto& p : freq) {
            points.insert(p.first);
        }

        sort(events.begin(), events.end());

        long long idx = 0;
        long long current_overlap = 0;
        long long max_freq = 0;
        long long actual_count = 0;

        for (long long t : points) {
            while (idx < events.size() && events[idx].first <= t) {
                current_overlap += events[idx].second;
                idx++;
            }

            actual_count = freq.count(t) ? freq[t] : 0;
            long long possible_freq = actual_count + min((long long)numOperations, current_overlap - actual_count);
            max_freq = max(max_freq, possible_freq);
        }
        return static_cast<int>(max_freq);
    }
};",1447732670
Nikhil Dixit IIITM Gwalior,nikhil_dixit_abv_iiitm_20,376,3622,cpp,"#define ll long long int
class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        sort(nums.begin(),nums.end());
        map<ll,ll> freq;
        ll ans=0;
        for(ll i=0;i<nums.size();i++){
            freq[nums[i]]++;
            ans=max(ans,freq[nums[i]]);
        }
        for(ll i=0;i<nums.size();i++){
            ll ind=upper_bound(nums.begin(),nums.end(),nums[i]+k)-nums.begin();
            ind--;
            ll ind2=lower_bound(nums.begin(),nums.end(),nums[i]-k)-nums.begin();
            ll x=numOperations;
            ll use=ind-ind2+1-freq[nums[i]];
            ll xy=min(use,x);
            ans=max(ans,freq[nums[i]]+xy);
        }
        map<ll,ll> m;
        for(ll i=0;i<nums.size();i++){
            m[nums[i]-k]++;
            m[nums[i]+k+1]--;
        }
        
        vector<pair<ll,ll>> v;
        ll sum=0;
        for(auto i:m){
            sum=sum+i.second;
            v.push_back({i.first,sum});
        }
        for(ll i=0;i<v.size();i++){
            ll x=numOperations;
            if(!freq.count(v[i].first)){
                ll see=min(v[i].second,x);
                ans=max(ans,see);    
            }
            
        }
        return ans;
    }
};",1447706390
Nikhil Dixit IIITM Gwalior,nikhil_dixit_abv_iiitm_20,376,3626,cpp,"class Solution {
public:
    int smallestNumber(int n, int t) {
        int cur=n;
        while(1){
            string str=to_string(cur);
            int see=1;
            for(int i=0;i<str.length();i++){
                int x=str[i]-'0';
                see=see*x;
            }
            if(see%t==0){
                return cur;
            }
            cur++;
        }
        return -1;
    }
};",1447673024
Nikhil Dixit IIITM Gwalior,nikhil_dixit_abv_iiitm_20,376,3640,cpp,"#define ll long long int
class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        sort(nums.begin(),nums.end());
        map<ll,ll> freq;
        ll ans=0;
        for(ll i=0;i<nums.size();i++){
            freq[nums[i]]++;
            ans=max(ans,freq[nums[i]]);
        }
        for(ll i=0;i<nums.size();i++){
            ll ind=upper_bound(nums.begin(),nums.end(),nums[i]+k)-nums.begin();
            ind--;
            ll ind2=lower_bound(nums.begin(),nums.end(),nums[i]-k)-nums.begin();
            ll x=numOperations;
            ll use=ind-ind2+1-freq[nums[i]];
            ll xy=min(use,x);
            ans=max(ans,freq[nums[i]]+xy);
        }
        map<ll,ll> m;
        for(ll i=0;i<nums.size();i++){
            m[nums[i]-k]++;
            m[nums[i]+k+1]--;
        }
        
        vector<pair<ll,ll>> v;
        ll sum=0;
        for(auto i:m){
            sum=sum+i.second;
            v.push_back({i.first,sum});
        }
        for(ll i=0;i<v.size();i++){
            ll x=numOperations;
            if(!freq.count(v[i].first)){
                ll see=min(v[i].second,x);
                ans=max(ans,see);    
            }
            
        }
        return ans;
    }
};",1447707245
Kush,kush_1917,378,3622,java,"class Solution {
    public int maxFrequency(int[] nums, int k, int numOperations) {
        int maxNum = 0;
        for (int num : nums) {
            maxNum = Math.max(maxNum, num);
        }

        int size = maxNum + k + 2;
        int[] freq = new int[size];
        for (int num : nums) {
            freq[num]++;
        }
        int[] pre = new int[size];
        pre[0] = freq[0];
        for (int i = 1; i < size; i++) {
            pre[i] = pre[i - 1] + freq[i];
        }
        int result = 0;
        for (int x = 0; x < size; x++) {
            if (freq[x] == 0 && numOperations == 0) {
                continue;
            }
            int left = Math.max(0, x - k);
            int right = Math.min(size - 1, x + k);
            int totalInRange = pre[right] - (left > 0 ? pre[left - 1] : 0);
            int canAdjust = totalInRange - freq[x];
            int total = freq[x] + Math.min(numOperations, canAdjust);
            result = Math.max(result, total);
        }
        return result;
    }
}",1447703328
Kush,kush_1917,378,3626,java,"class Solution {
    private int digitProduct(int num) {
        if (num == 0) return 0;
        int product = 1;
        while (num > 0) {
            product *= (num % 10);
            num /= 10;
        }
        return product;
    }
    public int smallestNumber(int n, int t) {
        int current = n;
        while (true) {
            int product = digitProduct(current);
            if (product % t == 0) {
                return current;
            }
            current++;
        }
    }
}",1447654176
Kush,kush_1917,378,3640,java,"class Solution {
    public int maxFrequency(int[] nums, int rangeLimit, int operations) {
        int n = nums.length;
        Map<Integer, Integer> frequencyMap = new HashMap<>();
        List<int[]> eventPoints = new ArrayList<>();
        for (int num : nums) {
            frequencyMap.put(num, frequencyMap.getOrDefault(num, 0) + 1);
            eventPoints.add(new int[]{num - rangeLimit, 1});
            eventPoints.add(new int[]{num + rangeLimit + 1, -1});
        }
        Set<Integer> uniquePoints = new HashSet<>(frequencyMap.keySet());
        for (int[] event : eventPoints) {
            uniquePoints.add(event[0]);
        }
        Collections.sort(eventPoints, Comparator.comparingInt(a -> a[0]));
        int eventIndex = 0;
        int currentRangeOverlap = 0;
        int maxFrequencyAchieved = 0;
        for (int point : new TreeSet<>(uniquePoints)) {
            while (eventIndex < eventPoints.size() && eventPoints.get(eventIndex)[0] <= point) {
                currentRangeOverlap += eventPoints.get(eventIndex)[1];
                eventIndex++;
            }
            int baseFrequency = frequencyMap.getOrDefault(point, 0);
            int achievableFrequency = baseFrequency + Math.min(operations, currentRangeOverlap - baseFrequency);
            maxFrequencyAchieved = Math.max(maxFrequencyAchieved, achievableFrequency);
        }
        return maxFrequencyAchieved;
    }
}
",1447732886
MakarenkoStepan,MakarenkoStepan,379,3622,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        buckets = [0] * (max(nums) + k + 2)

        for num in nums:
            buckets[max(0, num - k)] += 1
            buckets[num + k + 1] -= 1

        cnt = Counter(nums)
        curr_f = 0
        max_f = 1
        # print(buckets)
        for i, el in enumerate(buckets):
            curr_f += el
            # num_op
            num_op = curr_f - cnt.get(i, 0)
            # print(i, el, num_op, curr_f)
            # if num_op <= numOperations:
            
            max_f = max(max_f, min(cnt.get(i, 0) +numOperations, curr_f))


        return max_f
            ",1447708607
MakarenkoStepan,MakarenkoStepan,379,3626,python3,"class Solution:
    def smallestNumber(self, n: int, t: int) -> int:
        

        for i in range(10):
            _prod = 1
            curr_n = n + i
            while curr_n:
                _prod *= curr_n % 10
                curr_n //= 10
            if _prod % t == 0:
                return n + i

        return -1
                ",1447658634
MakarenkoStepan,MakarenkoStepan,379,3640,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        buckets = []

        for num in nums:
            heapq.heappush(buckets, (max(0, num - k), 1))
            heapq.heappush(buckets, (num + k + 1, -1))
            heapq.heappush(buckets, (num, 0))
            # buckets[max(0, num - k)] += 1
            # buckets[num + k + 1] -= 1

        cnt = Counter(nums)
        curr_f = 0
        max_f = 1
        # print(buckets)
        # for i, el in enumerate(buckets):
        while buckets:
            i, el = heapq.heappop(buckets)
            curr_f += el
            while buckets and buckets[0][0] == i:
                i, el = heapq.heappop(buckets)
                curr_f += el

            # num_op
            num_op = curr_f - cnt.get(i, 0)
            # print(i, el, num_op, curr_f)
            # if num_op <= numOperations:
            
            max_f = max(max_f, min(cnt.get(i, 0) +numOperations, curr_f))


        return max_f",1447716097
anonymous,sumitdrak,380,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        int max_freq=0;
        vector<int> freq(100001, 0),prefix(100001, 0);
        
        int n=size(nums);
        for(int i=0; i<n; i++){
            freq[nums[i]]++;
        }
        
        for(int x=1; x<=100000; x++) 
        prefix[x] = prefix[x-1] + freq[x];
        
        for(int x=1; x<=100000; x++){
            
            int left,right;
            if(x - k >=1) left=x-k;
            else left=1;
            
            if(x +k<=100000) right=x+k;
            else right=100000;
            
            int tir = prefix[right] - prefix[left -1];
            
            int can_modify = tir - freq[x];
            
            max_freq = max(max_freq, freq[x] + min(numOperations, can_modify));
        }
        
        return max_freq;
    }
};",1447705604
anonymous,sumitdrak,380,3626,cpp,"class Solution {
public:
    int digitProduct(int num) {
    int product = 1;
    while (num > 0) {
        int digit = num % 10;
        if (digit == 0) return 0;  // If there's a zero digit, the product is zero.
        product *= digit;
        num /= 10;
    }
    return product;
}
    
    int smallestNumber(int n, int t) {
            while (true) {
        int product = digitProduct(n);
        if (product % t == 0) {  // Check if product is divisible by t
            return n;
        }
        n++;
    }
    }
};",1447655735
anonymous,sumitdrak,380,3640,cpp,"class Solution {
public:
    void populateFrequency(const vector<int>& nums, map<int, int>& countMap, vector<pair<int, int>>& eventList, int k) {
        for (int num : nums) {
            countMap[num]++;
            eventList.push_back({num - k, 1});
            eventList.push_back({num + k + 1, -1});
        }
    }

    void gatherUniquePoints(const map<int, int>& countMap, const vector<pair<int, int>>& eventList, set<int>& uniquePoints) {
        for (const auto& event : eventList) {
            uniquePoints.insert(event.first);
        }
        for (const auto& entry : countMap) {
            uniquePoints.insert(entry.first);
        }
    }

    int findMaxFrequency(const map<int, int>& countMap, const vector<pair<int, int>>& eventList, const set<int>& uniquePoints, int numOperations) {
        int eventIdx = 0;
        int activeOverlap = 0;
        int highestFrequency = 0;
        int currentCount = 0;

        for (int point : uniquePoints) {
            while (eventIdx < eventList.size() && eventList[eventIdx].first <= point) {
                activeOverlap += eventList[eventIdx].second;
                eventIdx++;
            }

            currentCount = countMap.count(point) ? countMap.at(point) : 0;
            int potentialFreq = currentCount + min(numOperations, activeOverlap - currentCount);
            highestFrequency = max(highestFrequency, potentialFreq);
        }

        return highestFrequency;
    }
    
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        int size = nums.size();
        map<int, int> countMap;
        vector<pair<int, int>> eventList;
        
        populateFrequency(nums, countMap, eventList, k);
        
        set<int> uniquePoints;
        gatherUniquePoints(countMap, eventList, uniquePoints);
        
        sort(eventList.begin(), eventList.end());
        
        return findMaxFrequency(countMap, eventList, uniquePoints, numOperations);
    }
};",1447741670
xul2022,xul2022,381,3622,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        d = collections.Counter(nums)
        arr = [(i,d[i]) for i in d.keys()]
        arr.sort()
        vals = [i[0] for i in arr]
        feqs = [i[1] for i in arr]
        
        n = len(vals)
        left = 0 
        right = 0
        ans = 0
        cum = 0
        for i in range(max(vals)+1):
            while vals[left] < i - k:
                cum -= feqs[left]
                left += 1
                
            while right < n and vals[right] <= i + k:
                cum += feqs[right]
                right += 1
            if i in d:
                ans = max(ans,min(cum-d[i],numOperations) + d[i])
            else:
                ans = max(ans,min(cum,numOperations))
        return ans",1447695079
xul2022,xul2022,381,3626,python3,"class Solution:
    def smallestNumber(self, n: int, t: int) -> int:
        for i in range(n, n*10+1):
            a = [int(j) for j in str(i)]
            f = lambda x,y:x*y
            b = functools.reduce(f,a)
            if b%t== 0:
                return i
                
        ",1447657327
xul2022,xul2022,381,3640,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        d = collections.Counter(nums)
        arr = [(i,d[i]) for i in d.keys()]
        arr.sort()
        vals = [i[0] for i in arr]
        feqs = [i[1] for i in arr]

        valss = list(set([i for i in d]) | set([i+k for i in d]) | set([i-k for i in d]))
        valss.sort()
        n = len(vals)
        left = 0 
        right = 0
        ans = 0
        cum = 0
        for i in valss:
            while vals[left] < i - k:
                cum -= feqs[left]
                left += 1
                
            while right < n and vals[right] <= i + k:
                cum += feqs[right]
                right += 1
            if i in d:
                ans = max(ans,min(cum-d[i],numOperations) + d[i])
            else:
                ans = max(ans,min(cum,numOperations))
        return ans",1447707962
goutham4126,goutham4126,382,3622,cpp,"#define ll long long
class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int n) {
        int mx = *max_element(nums.begin(), nums.end());
        int sz = mx + k + 2;
        vector<int> f(sz, 0);
        
        for (int num : nums) {
            f[num]++;
        }

        vector<int> p(sz, 0);
        p[0] = f[0];
        for (int i = 1; i < sz; ++i) {
            p[i] = p[i - 1] + f[i];
        }

        int res = 0;
        for (int x = 0; x < sz; ++x) {
            if (f[x] == 0 && n == 0) continue;
            
            int l = max(0, x - k);
            int r = min(sz - 1, x + k);
            ll totalInRange = p[r] - (l > 0 ? p[l - 1] : 0);
            ll canAdjust = totalInRange - f[x];
            ll total = f[x] + min((ll)n, canAdjust);
            res = max(res, (int)total);
        }

        return res;
    }
};

",1447728092
goutham4126,goutham4126,382,3626,cpp,"class Solution {
public:
    int prod(int n) 
    {
        int product = 1;
        while(n > 0)
        {
            int d=n%10;
            product *=d;
            n=n/10;         
        }
        return product;
    }
    int smallestNumber(int n, int t) {
        int ans;
        while(1)
        {
            ans= prod(n); 
            if(ans%t == 0)      
                return n;  
            n++;
        }
    }
};
",1447662578
goutham4126,goutham4126,382,3640,cpp,"
class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        int n = nums.size();
        unordered_map<int, int> f;
        vector<pair<int, int>> ev;
        
        for (int num : nums) {
            f[num]++;
            ev.push_back({num - k, +1});
            ev.push_back({num + k + 1, -1});
        }
        
        set<int> pt;
        for (auto& e : ev) 
            pt.insert(e.first);
        for (auto& p : f) 
            pt.insert(p.first);
        
        vector<int> pts(pt.begin(), pt.end());
        sort(ev.begin(), ev.end());
        
        int idx = 0, co = 0, mx = 0, ac = 0;
        
        for(int t : pts) 
        {
            while(idx < ev.size() && ev[idx].first <= t) {
                co += ev[idx].second;
                idx++;
            }
            ac = f.count(t) ? f[t] : 0;
            mx = max(mx, ac + min(numOperations, co - ac));
        }
        
        return mx;
    }
};

",1447741860
Dewansh Mishra,dewanshmishra777,383,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        int max_num = *std::max_element(nums.begin(), nums.end());
        int size = max_num + k + 2;
        std::vector<int> freq(size, 0);

        for (int num : nums) {
            freq[num]++;
        }

        std::vector<int> pre(size, 0);
        pre[0] = freq[0];
        for (int i = 1; i < size; ++i) {
            pre[i] = pre[i - 1] + freq[i];
        }

        int result = 0;
        for (int x = 0; x < size; ++x) {
            if (freq[x] == 0 && numOperations == 0) {
                continue;
            }

            int left = std::max(0, x - k);
            int right = std::min(size - 1, x + k);
            int totalInRange = pre[right] - (left > 0 ? pre[left - 1] : 0);
            int canAdjust = totalInRange - freq[x];
            int total = freq[x] + std::min(numOperations, canAdjust);
            result = std::max(result, total);
        }

        return result;
    }
};",1447699778
Dewansh Mishra,dewanshmishra777,383,3626,cpp,"class Solution {
public:
    int pr(int n){
        int product=1;
        while(n){
            int digit=n%10;
            if(digit==0){
                product=0;
                break;
            }
            product*=digit;
            n/=10;
           
        }
        return product;
    }
    int smallestNumber(int n, int t) {
        int i=n;
        while(true){
            if(pr(i)%t==0)
                return i;
            i++;
        }
        return 0;
    }
};",1447664278
Dewansh Mishra,dewanshmishra777,383,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        int n = nums.size();
        unordered_map<int, int> freq;
        vector<pair<int, int>> events;

        // Step 1: Populate frequency map and events
        for (int num : nums) {
            freq[num]++;
            events.push_back({num - k, +1});  // Range start event
            events.push_back({num + k + 1, -1});  // Range end event
        }

        // Step 2: Collect all unique points (from events and nums)
        set<int> points;
        for (const auto& event : events) {
            points.insert(event.first);
        }
        for (const auto& p : freq) {
            points.insert(p.first);
        }

        // Step 3: Sort the events based on the points
        vector<int> sorted_points(points.begin(), points.end());
        vector<pair<int, int>> sorted_events(events.begin(), events.end());
        sort(sorted_events.begin(), sorted_events.end());

        int idx = 0;
        int current_overlap = 0;
        int max_freq = 0;
        int actual_count = 0;

        // Step 4: Process each point in sorted order
        for (int t : sorted_points) {
            // Process events up to the current point t
            while (idx < sorted_events.size() && sorted_events[idx].first <= t) {
                current_overlap += sorted_events[idx].second;
                idx++;
            }

            // Get actual count of current point
            actual_count = freq.count(t) ? freq[t] : 0;

            // Calculate possible frequency with adjustments
            int possible_freq = actual_count + min(numOperations, current_overlap - actual_count);
            max_freq = max(max_freq, possible_freq);
        }

        return max_freq;
    }
};",1447733583
Ricky,ricky_99,384,3622,cpp,"class Solution
{
public:
    int maxFrequency(vector<int> &nums, int k, int numOperations)
    {
        unordered_map<int, int> cnt;
        vector<pair<long long, int>> changes;
        long long left;
        long long right;
        for (auto i : nums)
        {
            cnt[i] += 1;
            left = 1LL * i - k;
            right = 1LL * i + k + 1;
            changes.emplace_back(left, 1);
            changes.emplace_back(right, -1);
        }

        int ans = 0;
        for (auto i : cnt)
        {
            ans = max(ans, i.second);
            changes.emplace_back(1LL * i.first, 0);
        }
        sort(begin(changes), end(changes));
        int n = changes.size();
        int idx = 0;
        int totalUpdated = 0;
        while (idx < n)
        {
            long long value = changes[idx].first;
            int updated = 0;
            while (idx < n && changes[idx].first == value)
            {
                updated += changes[idx].second;
                idx += 1;
            }
            totalUpdated += updated;
            int freq = cnt[value] + max(min(totalUpdated - cnt[value], numOperations), 0);
            ans = max(ans, freq);
        }

        return ans;
    }
};",1447716353
Ricky,ricky_99,384,3626,cpp,"class Solution
{
public:
    int digitProduct(int n)
    {
        int ans = 1;
        while (n)
        {
            ans *= (n % 10);
            n /= 10;
        }

        return ans;
    }
    int smallestNumber(int n, int t)
    {
        while (1)
        {
            if (digitProduct(n) % t == 0)
            {
                return n;
            }
            n += 1;
        }

        return 0;
    }
};",1447706707
Ricky,ricky_99,384,3640,cpp,"class Solution
{
public:
    int maxFrequency(vector<int> &nums, int k, int numOperations)
    {
        unordered_map<int, int> cnt;
        vector<pair<long long, int>> changes;
        long long left;
        long long right;
        for (auto i : nums)
        {
            cnt[i] += 1;
            left = 1LL * i - k;
            right = 1LL * i + k + 1;
            changes.emplace_back(left, 1);
            changes.emplace_back(right, -1);
        }

        int ans = 0;
        for (auto i : cnt)
        {
            ans = max(ans, i.second);
            changes.emplace_back(1LL * i.first, 0);
        }
        sort(begin(changes), end(changes));
        int n = changes.size();
        int idx = 0;
        int totalUpdated = 0;
        while (idx < n)
        {
            long long value = changes[idx].first;
            int updated = 0;
            while (idx < n && changes[idx].first == value)
            {
                updated += changes[idx].second;
                idx += 1;
            }
            totalUpdated += updated;
            int freq = cnt[value] + max(min(totalUpdated - cnt[value], numOperations), 0);
            ans = max(ans, freq);
        }

        return ans;
    }
};",1447716693
vishal_dequan,vishaldequan,386,3622,cpp,"class FrequencyException : public std::exception {
private:
    std::string message;
public:
    FrequencyException(const std::string& msg) : message(msg) {}
    const char* what() const noexcept override { return message.c_str(); }
};

class Solution {
private:
    void validateInputs(const vector<int>& inputArray, int rangeK, int maxOperations) {
        if (inputArray.empty()) {
            throw FrequencyException(""Input array is empty"");
        }
        if (rangeK < 0) {
            throw FrequencyException(""Range K cannot be negative"");
        }
        if (maxOperations < 0) {
            throw FrequencyException(""Max operations cannot be negative"");
        }
    }

public:
    int maxFrequency(vector<int>& inputArray, int rangeK, int maxOperations) {
        try {
            validateInputs(inputArray, rangeK, maxOperations);
            
            int arraySize = inputArray.size();
            map<int, int> elementCount;
            vector<pair<int, int>> rangeEvents;
            
            try {
                // Build frequency map and events
                for (int element : inputArray) {
                    elementCount[element]++;
                    rangeEvents.push_back({element - rangeK, +1});  // Start of range
                    rangeEvents.push_back({element + rangeK + 1, -1});  // End of range
                }
            } catch (const std::exception& e) {
                throw FrequencyException(""Error creating frequency map: "" + std::string(e.what()));
            }
            
            // Collect unique points for processing
            set<int> checkPoints;
            try {
                for (const auto& event : rangeEvents) {
                    checkPoints.insert(event.first);
                }
                for (const auto& entry : elementCount) {
                    checkPoints.insert(entry.first);
                }
            } catch (const std::exception& e) {
                throw FrequencyException(""Error collecting points: "" + std::string(e.what()));
            }
            
            // Sort events by position
            try {
                sort(rangeEvents.begin(), rangeEvents.end());
            } catch (const std::exception& e) {
                throw FrequencyException(""Error sorting events: "" + std::string(e.what()));
            }
            
            int eventIndex = 0;
            int rangeOverlap = 0;
            int maxResult = 0;
            int currentCount = 0;
            
            try {
                for (int point : checkPoints) {
                    // Process all events up to current point
                    while (eventIndex < rangeEvents.size() && 
                           rangeEvents[eventIndex].first <= point) {
                        rangeOverlap += rangeEvents[eventIndex].second;
                        eventIndex++;
                    }
                    
                    currentCount = elementCount.count(point) ? elementCount[point] : 0;
                    int achievableFreq = currentCount + 
                        min(maxOperations, rangeOverlap - currentCount);
                    maxResult = max(maxResult, achievableFreq);
                }
            } catch (const std::exception& e) {
                throw FrequencyException(""Error processing events: "" + std::string(e.what()));
            }
            
            return maxResult;
            
        } catch (const FrequencyException& e) {
            cerr << ""FrequencyException: "" << e.what() << endl;
            return 0;
        } catch (const std::exception& e) {
            cerr << ""Standard exception: "" << e.what() << endl;
            return 0;
        } catch (...) {
            cerr << ""Unknown error occurred"" << endl;
            return 0;
        }
    }
};",1447716223
vishal_dequan,vishaldequan,386,3626,python3,"class Solution:
    def smallestNumber(self, n: int, t: int) -> int:
        i=n
        while i>=n:
            x=1
            a=str(i)
            for j in a:
                x*=int(j)
            if x%t==0:
                return i
            i+=1
        return -1
                ",1447656915
vishal_dequan,vishaldequan,386,3640,cpp,"class FrequencyException : public std::exception {
private:
    std::string message;
public:
    FrequencyException(const std::string& msg) : message(msg) {}
    const char* what() const noexcept override { return message.c_str(); }
};

class Solution {
private:
    void validateInputs(const vector<int>& inputArray, int rangeK, int maxOperations) {
        if (inputArray.empty()) {
            throw FrequencyException(""Input array is empty"");
        }
        if (rangeK < 0) {
            throw FrequencyException(""Range K cannot be negative"");
        }
        if (maxOperations < 0) {
            throw FrequencyException(""Max operations cannot be negative"");
        }
    }

public:
    int maxFrequency(vector<int>& inputArray, int rangeK, int maxOperations) {
        try {
            validateInputs(inputArray, rangeK, maxOperations);
            
            int arraySize = inputArray.size();
            map<int, int> elementCount;
            vector<pair<int, int>> rangeEvents;
            
            try {
                // Build frequency map and events
                for (int element : inputArray) {
                    elementCount[element]++;
                    rangeEvents.push_back({element - rangeK, +1});  // Start of range
                    rangeEvents.push_back({element + rangeK + 1, -1});  // End of range
                }
            } catch (const std::exception& e) {
                throw FrequencyException(""Error creating frequency map: "" + std::string(e.what()));
            }
            
            // Collect unique points for processing
            set<int> checkPoints;
            try {
                for (const auto& event : rangeEvents) {
                    checkPoints.insert(event.first);
                }
                for (const auto& entry : elementCount) {
                    checkPoints.insert(entry.first);
                }
            } catch (const std::exception& e) {
                throw FrequencyException(""Error collecting points: "" + std::string(e.what()));
            }
            
            // Sort events by position
            try {
                sort(rangeEvents.begin(), rangeEvents.end());
            } catch (const std::exception& e) {
                throw FrequencyException(""Error sorting events: "" + std::string(e.what()));
            }
            
            int eventIndex = 0;
            int rangeOverlap = 0;
            int maxResult = 0;
            int currentCount = 0;
            
            try {
                for (int point : checkPoints) {
                    // Process all events up to current point
                    while (eventIndex < rangeEvents.size() && 
                           rangeEvents[eventIndex].first <= point) {
                        rangeOverlap += rangeEvents[eventIndex].second;
                        eventIndex++;
                    }
                    
                    currentCount = elementCount.count(point) ? elementCount[point] : 0;
                    int achievableFreq = currentCount + 
                        min(maxOperations, rangeOverlap - currentCount);
                    maxResult = max(maxResult, achievableFreq);
                }
            } catch (const std::exception& e) {
                throw FrequencyException(""Error processing events: "" + std::string(e.what()));
            }
            
            return maxResult;
            
        } catch (const FrequencyException& e) {
            cerr << ""FrequencyException: "" << e.what() << endl;
            return 0;
        } catch (const std::exception& e) {
            cerr << ""Standard exception: "" << e.what() << endl;
            return 0;
        } catch (...) {
            cerr << ""Unknown error occurred"" << endl;
            return 0;
        }
    }
};",1447716859
nemokwy,nemokwy,388,3622,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        cnt = Counter(nums)
        data = []
        for u,v in cnt.items():
            data.append((u, v))
        data.sort()
        acc = [0]
        n = len(data)
        for i,c in enumerate(data):
            acc.append(acc[-1]+c[1])
        l,r = 0, 0
        result = 1
        for i in range(n):
            r = max(i, r)
            while r < n-1 and data[r+1][0] - data[i][0] <= k:
                r += 1
            while data[i][0] - data[l][0] > k:
                l += 1
            result = max(result, min(acc[r+1] - acc[l] - data[i][1], numOperations) + data[i][1])
            if i == n-1:
                break
            while data[l][0] + k < data[i+1][0]:
                while r < n-1 and data[r+1][0] - k <= data[l][0] + k:
                    r += 1
                result = max(result, min(acc[r+1] - acc[l], numOperations))
                l += 1
        return result",1447750403
nemokwy,nemokwy,388,3626,python3,"class Solution:
    def smallestNumber(self, i: int, t: int) -> int:
        while i:
            c = 1
            for j in [int(j) for j in str(i)]:
                c *= j
            if c % t == 0:
                return i
            i += 1
                ",1447741726
nemokwy,nemokwy,388,3640,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        cnt = Counter(nums)
        data = []
        for u,v in cnt.items():
            data.append((u, v))
        data.sort()
        acc = [0]
        n = len(data)
        for i,c in enumerate(data):
            acc.append(acc[-1]+c[1])
        l,r = 0, 0
        result = 1
        for i in range(n):
            r = max(i, r)
            while r < n-1 and data[r+1][0] - data[i][0] <= k:
                r += 1
            while data[i][0] - data[l][0] > k:
                l += 1
            result = max(result, min(acc[r+1] - acc[l] - data[i][1], numOperations) + data[i][1])
            if i == n-1:
                break
            while data[l][0] + k < data[i+1][0]:
                while r < n-1 and data[r+1][0] - k <= data[l][0] + k:
                    r += 1
                result = max(result, min(acc[r+1] - acc[l], numOperations))
                l += 1
        return result",1447750615
Tanishka Sharma,Tanishhka,390,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) 
{
    unordered_map<int,int>mp;
    int n=nums.size();
    vector<pair<int,int>>vec;
    for(auto it:nums) 
        {
            mp[it]++;
            vec.push_back({it-k,1});
            vec.push_back({it+k+1,-1});
        }
    set<int>st;
    for(auto it:vec)
        {
            st.insert(it.first);
        }
    for(auto it:mp)
        {
            st.insert(it.first);
        }
    sort(vec.begin(),vec.end());
    int ind=0,freq=0,cnt=0,lapping=0;
    for(auto it:st)
        {
            while(ind<vec.size()&&vec[ind].first<=it)
                {
                    lapping+=vec[ind].second;
                    ind++;
                }
            cnt=mp.count(it)?mp[it]:0;
            int poss_freq=cnt+min(numOperations,lapping-cnt);
            freq=max(freq,poss_freq);
            
        }
    return freq;
    
    }
};",1447750183
Tanishka Sharma,Tanishhka,390,3626,cpp,"class Solution {
public:
    int smallestNumber(int n, int t) 
{
    if(t==0)return -1;
    while(1)
        {
            int prod=1;
            int temp=n;
            while(temp>0)
                {
                    int digit=temp%10;
                    prod*=digit;
                    temp/=10;
                }
            if(prod%t==0)return n;
            else{
                n++;
            }
        }
    return -1;
        
    }
};",1447672078
Tanishka Sharma,Tanishhka,390,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) 
{
    unordered_map<int,int>mp;
    int n=nums.size();
    vector<pair<int,int>>vec;
    for(auto it:nums) 
        {
            mp[it]++;
            vec.push_back({it-k,1});
            vec.push_back({it+k+1,-1});
        }
    set<int>st;
    for(auto it:vec)
        {
            st.insert(it.first);
        }
    for(auto it:mp)
        {
            st.insert(it.first);
        }
    sort(vec.begin(),vec.end());
    int ind=0,freq=0,cnt=0,lapping=0;
    for(auto it:st)
        {
            while(ind<vec.size()&&vec[ind].first<=it)
                {
                    lapping+=vec[ind].second;
                    ind++;
                }
            cnt=mp.count(it)?mp[it]:0;
            int poss_freq=cnt+min(numOperations,lapping-cnt);
            freq=max(freq,poss_freq);
            
        }
    return freq;
    
    }
};",1447750761
Mestu_Paul,Mestu_Paul,391,3622,cpp,"class Solution {
public:
    const int inf=2e5;
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        vector<int>v(inf+2);
        vector<int>c1(inf+1);
        for(int i=0; i<nums.size(); i++){
            v[max(0,nums[i]-k)]++;
            v[min(inf,nums[i]+k+1)]--;
            c1[nums[i]]++;
        }
        for(int i=1; i<=inf; i++)v[i]+=v[i-1];
        for(auto x:nums)v[x]--;
        int mx=*max_element(c1.begin(),c1.end());
        for(int i=1; i<=inf; i++){
            mx=max(c1[i]+min(numOperations,v[i]),mx);
        }
        return mx;
        
    }
};",1447673890
Mestu_Paul,Mestu_Paul,391,3626,cpp,"class Solution {
public:
    int smallestNumber(int n, int t) {
        while(true){
            int m=n;
            int sum=1;
            while(m){
                sum*=(m%10);
                m/=10;
            }
            if(sum%t==0)return n;
            n++;
        }
        return n;
    }
};",1447657547
Mestu_Paul,Mestu_Paul,391,3640,cpp,"#define ll long long
class Solution {
public:
    const ll inf=1e10;
    int maxFrequency(vector<int>& nums, int k, int no) {
        map<ll,int>v,c1;
        for(int i=0;i<nums.size(); i++){
            v[max(0,nums[i]-k)]++;
            v[min(inf,(ll)nums[i]+k+1)]--;
            c1[nums[i]]++;
            v[nums[i]]+=0;
        }
        ll pre=0;
        for(auto &x:v){
            x.second += pre;
            pre=x.second;
        }
        for(auto x:nums)v[x]--;
        int mx=0;

        for(auto x:v){
            mx  = max(mx,c1[x.first]+min(no,x.second));
        }
        return mx;
        
    }
};",1447734172
naresh50,naresh50,393,3622,java,"class Solution {
    public int maxFrequency(int[] nums, int k, int numOperations) {
        HashMap<Integer, Integer> map = new HashMap<>();
        
        // Populate frequency map
        for (int num : nums) {
            map.put(num, map.getOrDefault(num, 0) + 1);
        }
        
        // Convert map entries to array
        int[][] arr = new int[map.size()][3];
        int index = 0;
        for (Map.Entry<Integer, Integer> e : map.entrySet()) {
            arr[index][0] = e.getKey();  // unique number
            arr[index][1] = e.getValue(); // frequency
            index++;
        }

        // Sort based on the unique numbers
        Arrays.sort(arr, (a, b) -> a[0] - b[0]);

        // Build prefix sum for frequency
        for (int i = 0; i < arr.length; i++) {
            arr[i][2] = arr[i][1];
            if (i > 0) arr[i][2] += arr[i - 1][2];
        }

        int max = Integer.MIN_VALUE;

        // Iterate over possible values for `curr`
        for (int i = arr[0][0] - k; i <= arr[arr.length - 1][0]+k; i++) {
            long curr = i;
            long next = curr + k;
            long prev = curr - k;

            int prevIdx = bs2(arr, prev);
            int nextIdx = bs1(arr, next);

            int currFre = map.getOrDefault((int) curr, 0);

            // System.out.println(currFre);

            int req = arr[nextIdx][2] - arr[prevIdx][2] + arr[prevIdx][1] - currFre;

            int currAns = Math.min(req, numOperations) + currFre;

            // System.out.println(""num = "" + i + "" , "" + currAns);

            max = Math.max(max, currAns);
        }
        return max;
    }

    public int bs1(int[][] arr, long num) {
        int ans = -1;
        int start = 0;
        int end = arr.length - 1;
        while (start <= end) {
            int mid = start + (end - start) / 2;
            if ((long) arr[mid][0] <= num) {
                ans = mid;
                start = mid + 1;
            } else {
                end = mid - 1;
            }
        }
        return ans;
    }

    public int bs2(int[][] arr, long num) {
        int ans = -1;
        int start = 0;
        int end = arr.length - 1;
        while (start <= end) {
            int mid = start + (end - start) / 2;
            if ((long) arr[mid][0] >= num) {
                ans = mid;
                end = mid - 1;
            } else {
                start = mid + 1;
            }
        }
        return ans;
    }
}
",1447724650
naresh50,naresh50,393,3626,java,"class Solution {
    public int smallestNumber(int n, int t) {

        int ans=-1;
        for(int i=n;i<=n+100;i++){
            if(check(i,t)){
                ans=i;
                break;
            }
        }
        return ans;
    }
    public boolean check(int n , int t){
        int pro=1;
        while(n>0){
            pro*=(n%10);
            n/=10;
        }
        if(pro%t==0) return true;
        else return false;
    }
}",1447659689
naresh50,naresh50,393,3640,java,"class Solution {
    public int maxFrequency(int[] nums, int k, int numOperations) {
        HashMap<Integer, Integer> map = new HashMap<>();
        
        for (int num : nums) {
            map.put(num, map.getOrDefault(num, 0) + 1);
        }
        
        int[][] arr = new int[map.size()][3];
        int index = 0;
        for (Map.Entry<Integer, Integer> e : map.entrySet()) {
            arr[index][0] = e.getKey();  
            arr[index][1] = e.getValue();
            index++;
        }

        Arrays.sort(arr, (a, b) -> a[0] - b[0]);

        for (int i = 0; i < arr.length; i++) {
            arr[i][2] = arr[i][1];
            if (i > 0) arr[i][2] += arr[i - 1][2];
        }

        int max = Integer.MIN_VALUE;

        for (int i = 0; i < arr.length; i++) {
            long curr = arr[i][0];
            long next = curr + k;
            long prev = curr - k;

            int prevIdx = bs2(arr, prev);
            int nextIdx = bs1(arr, next);

            int currFre = map.getOrDefault((int) curr, 0);


            int req = arr[nextIdx][2] - arr[prevIdx][2] + arr[prevIdx][1] - currFre;

            int currAns = Math.min(req, numOperations) + currFre;


            max = Math.max(max, currAns);
        }
        for(int i=0;i<arr.length;i++){
            long next = arr[i][0] + 2*(long)k;
            int nextIdx = bs1(arr,next);

            int currAns = arr[nextIdx][2] - arr[i][2] + arr[i][1];
            currAns = Math.min(currAns , numOperations);
            // System.out.println(""num = ""+arr[i][0]+"" , ""+currAns);
            max = Math.max(max , currAns);
        }
        return max;
    }

    public int bs1(int[][] arr, long num) {
        int ans = -1;
        int start = 0;
        int end = arr.length - 1;
        while (start <= end) {
            int mid = start + (end - start) / 2;
            if ((long) arr[mid][0] <= num) {
                ans = mid;
                start = mid + 1;
            } else {
                end = mid - 1;
            }
        }
        return ans;
    }

    public int bs2(int[][] arr, long num) {
        int ans = -1;
        int start = 0;
        int end = arr.length - 1;
        while (start <= end) {
            int mid = start + (end - start) / 2;
            if ((long) arr[mid][0] >= num) {
                ans = mid;
                end = mid - 1;
            } else {
                start = mid + 1;
            }
        }
        return ans;
    }
}
",1447751114
Banothu Harshith,The_Redeemer,395,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& arr, int range, int ops) {
        int maxElem = *max_element(arr.begin(), arr.end());
        int sz = maxElem + range + 2;
        
        vector<int> count(sz, 0);
        int i = 0;
        while (i < arr.size()) {
            count[arr[i]]++;
            i++;
        }

        vector<int> prefix(sz, 0);
        prefix[0] = count[0];
        int j = 1;
        while (j < sz) {
            prefix[j] = prefix[j - 1] + count[j];
            j++;
        }

        int maxFreq = 0, x = 0;
        while (x < sz) {
            if (count[x] == 0 && ops == 0) {
                x++;
                continue;
            }

            int l = max(0, x - range);
            int r = min(sz - 1, x + range);
            int sumInRange = prefix[r] - (l > 0 ? prefix[l - 1] : 0);
            int adj = sumInRange - count[x];
            int total = count[x] + min(ops, adj);
            maxFreq = max(maxFreq, total);
            x++;
        }

        return maxFreq;
    }
};",1447699792
Banothu Harshith,The_Redeemer,395,3626,cpp,"class Solution {
public:
    int smallestNumber(int n, int t) {
        int number = n;
        
        while (true) {
            int x = number;
            int product = 1;
            
            while (x > 0) {
                int digit = x % 10;
                product *= digit;
                x /= 10;
            }
            
            if (product % t == 0) {
                return number;
            }
            
            number++;
        }
    }
};
",1447659009
Banothu Harshith,The_Redeemer,395,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        int n = nums.size();
        unordered_map<int, int> freq;
        vector<pair<int, int>> evts;

        int i = 0;
        while (i < n) {
            freq[nums[i]]++;
            evts.push_back({nums[i] - k, 1});
            evts.push_back({nums[i] + k + 1, -1});
            i++;
        }

        set<int> pts;
        i = 0;
        while (i < evts.size()) {
            pts.insert(evts[i].first);
            i++;
        }

        auto it = freq.begin();
        while (it != freq.end()) {
            pts.insert(it->first);
            it++;
        }

        sort(evts.begin(), evts.end());

        int idx = 0, cur_overlap = 0, max_freq = 0, act_count = 0;
        auto it_pts = pts.begin();
        while (it_pts != pts.end()) {
            int t = *it_pts;
            while (idx < evts.size() && evts[idx].first <= t) {
                cur_overlap += evts[idx].second;
                idx++;
            }

            act_count = freq.count(t) ? freq[t] : 0;
            int possible_freq = act_count + min(numOperations, cur_overlap - act_count);
            max_freq = max(max_freq, possible_freq);
            
            it_pts++;
        }

        return max_freq;
    }
};
",1447743035
Jyoti Vaibhaw,Vaibhawjyoti17,396,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        int maxNum = *std::max_element(nums.begin(), nums.end());
        int size = maxNum + k + 2;
        std::unordered_map<int, int> freq;
        for (int num : nums) {
            freq[num]++;
        }
        std::vector<int> pre(size, 0);
        if (freq.find(0) != freq.end()) {
            pre[0] = freq[0];
        }
        for (int i = 1; i < size; ++i) {
            pre[i] = pre[i - 1] + (freq.find(i) != freq.end() ? freq[i] : 0);
        }
        int result = 0;
        for (int x = 0; x < size; ++x) {
            if (freq.find(x) == freq.end() && numOperations == 0) {
                continue;
            }
            int left = std::max(0, x - k);
            int right = std::min(size - 1, x + k);
            int totalInRange = pre[right] - (left > 0 ? pre[left - 1] : 0);
            int canAdjust = totalInRange - (freq.find(x) != freq.end() ? freq[x] : 0);
            int total = (freq.find(x) != freq.end() ? freq[x] : 0) + std::min(numOperations, canAdjust);
            result = std::max(result, total);
        }
        return result;
    }
};",1447704333
Jyoti Vaibhaw,Vaibhawjyoti17,396,3626,cpp,"class Solution {
public:
 long long calculateProduct(long long num) {
        std::vector<int> digits;
        while (num > 0) {
            digits.push_back(num % 10);
            num /= 10;
        }

        long long product = 1;
        for (int digit : digits) {
            product *= digit;
        }
        return product;
    }

    int smallestNumber(int n, int t) {
         while (true) {
            long long product = calculateProduct(n);
            if (product % t == 0) {
                return n;
            }
            ++n;
        }
    }
};",1447708038
Jyoti Vaibhaw,Vaibhawjyoti17,396,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        int n = nums.size();
        map<int, int> mp;
         set<int> pts;
        deque<pair<int, int>> dq;
        for (int num : nums) {
            mp[num]++;
            dq.emplace_back(num - k, 1);
            dq.emplace_back(num + k + 1, -1);
        }
        for (auto i : mp) {
            pts.insert(i.first);
        }
        for (auto i : dq) {
            pts.insert(i.first);
        }
        sort(dq.begin(), dq.end());
        int idx = 0,lol=0,ans=0;
        for (int t : pts) {
            while (idx < dq.size() and dq[idx].first <= t) {
                lol += dq[idx].second;
                idx++;
            }
            int tol = mp.count(t) ? mp[t] : 0;
            int poss = tol + min(numOperations, lol - tol);
            ans = max(ans, poss);
        }
        return ans;
    }
};",1447743206
davindx88,davindx88,397,3622,golang,"import (
    ""sort""
)

type Pair struct {
    Num int
    Freq int
    Flag int
}

func maxFrequency(nums []int, k int, numOperations int) int {
    mem := make(map[int]int)
    for _, num := range nums {
        mem[num]++
    }
    
    pairs := []Pair{}
    for num, freq := range mem {
        pairs = append(pairs, Pair{Num:num-k, Freq: freq, Flag:1})
        pairs = append(pairs, Pair{Num:num, Freq: freq, Flag:2})
        pairs = append(pairs, Pair{Num:num+k, Freq: freq, Flag:3})
    }
    
    sort.Slice(pairs, func(i,j int) bool {
        if pairs[i].Num == pairs[j].Num {
            return pairs[i].Flag <= pairs[j].Flag
        }
        return pairs[i].Num < pairs[j].Num
    })

    maxNum := 0
    weight := 0
    // fmt.Println(pairs)
    for _, pair := range pairs {
        // fmt.Println(maxNum, weight, pair)
		if pair.Flag == 1 {
            weight += pair.Freq
            maxNum = max(maxNum, min(numOperations, weight))
		} else if pair.Flag == 2 {
            maxNum = max(maxNum, pair.Freq + min(numOperations, weight-pair.Freq))
		} else if pair.Flag == 3 {
            weight -= pair.Freq
		}
	}

    return maxNum    
}",1447743453
davindx88,davindx88,397,3626,golang,"func smallestNumber(n int, t int) int {
    for i:=n;i<1_000*t;i++{
        prod := 1
        temp := i
        for temp > 0 {
            prod *= temp%10
            temp/=10
        }
        if prod % t == 0 { return i }        
    }
    return -1
}",1447658252
davindx88,davindx88,397,3640,golang,"import (
    ""sort""
)

type Pair struct {
    Num int
    Freq int
    Flag int
}

func maxFrequency(nums []int, k int, numOperations int) int {
    mem := make(map[int]int)
    for _, num := range nums {
        mem[num]++
    }
    
    pairs := []Pair{}
    for num, freq := range mem {
        pairs = append(pairs, Pair{Num:num-k, Freq: freq, Flag:1})
        pairs = append(pairs, Pair{Num:num, Freq: freq, Flag:2})
        pairs = append(pairs, Pair{Num:num+k, Freq: freq, Flag:3})
    }
    
    sort.Slice(pairs, func(i,j int) bool {
        if pairs[i].Num == pairs[j].Num {
            return pairs[i].Flag <= pairs[j].Flag
        }
        return pairs[i].Num < pairs[j].Num
    })

    maxNum := 0
    weight := 0
    // fmt.Println(pairs)
    for _, pair := range pairs {
        // fmt.Println(maxNum, weight, pair)
		if pair.Flag == 1 {
            weight += pair.Freq
            maxNum = max(maxNum, min(numOperations, weight))
		} else if pair.Flag == 2 {
            maxNum = max(maxNum, pair.Freq + min(numOperations, weight-pair.Freq))
		} else if pair.Flag == 3 {
            weight -= pair.Freq
		}
	}

    return maxNum    
}",1447742903
DanilovAndy,DanilovAndy,398,3622,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        nums.sort()
        hm = Counter(nums)
        hm = dict(sorted(hm.items(), key=lambda x:-x[1]))
        ans = 1
        
        for key, v in hm.items():
            if ans > v+numOperations:
                break
                
            index_l = bisect_left(nums, key-k)
            index_r = bisect_right(nums, key+k)
            almost_ready = index_r - index_l

            if numOperations > v:
                index_start_right = bisect_right(nums, key)
                index_start_left = bisect_left(nums, key)
                index_l_big = bisect_left(nums, key-(2*k))
                index_r_big = bisect_right(nums, key+(2*k))

                to_left = min(index_start_right - index_l_big, numOperations)
                to_right = min(index_r_big - index_start_left, numOperations)
                ans = max(ans, to_left, to_right)

            res = min(v+numOperations, almost_ready)
            ans = max(ans, res)
            
        #[7, 19, 20, 23, 26] 3

            
        return ans
        ",1447742771
DanilovAndy,DanilovAndy,398,3626,python3,"class Solution:
    def smallestNumber(self, n: int, t: int) -> int:
        for i in range(n, 101):
            temp = 1
            s = str(i)
            for e in s:
                temp *= int(e)

            if temp % t == 0:
                return i
        ",1447654214
DanilovAndy,DanilovAndy,398,3640,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        nums.sort()
        hm = Counter(nums)
        hm = dict(sorted(hm.items(), key=lambda x:-x[1]))
        ans = 1
        
        for key, v in hm.items():
            if ans > v+numOperations:
                break
                
            index_l = bisect_left(nums, key-k)
            index_r = bisect_right(nums, key+k)
            almost_ready = index_r - index_l

            if numOperations > v:
                index_start_right = bisect_right(nums, key)
                index_start_left = bisect_left(nums, key)
                index_l_big = bisect_left(nums, key-(2*k))
                index_r_big = bisect_right(nums, key+(2*k))

                to_left = min(index_start_right - index_l_big, numOperations)
                to_right = min(index_r_big - index_start_left, numOperations)
                ans = max(ans, to_left, to_right)

            res = min(v+numOperations, almost_ready)
            ans = max(ans, res)
            
        #[7, 19, 20, 23, 26] 3

            
        return ans",1447743576
VARDHAN,vishnuvardhanpvs,399,3622,java,"class Solution {
    public static final int MAX = (int) 1e5;

    public int maxFrequency(int[] nums, int k, int numOperations) {
        var map = new HashMap<Integer, Integer>();
        var psum = new int[MAX + 1];

        for (var n : nums) {
            map.compute(n, (key, val) -> val == null ? 1 : (val + 1));
            if (n + k + 1 < MAX) psum[n + k + 1]--;

            if (n - k < 0) psum[0]++;
            else psum[n - k]++;
        }

        int ans = 0;
        for (int i = 1; i < psum.length; i++) {
            psum[i] = psum[i - 1] + psum[i];
            ans = Math.max(Math.min(psum[i] - map.getOrDefault(i, 0), numOperations) + map.getOrDefault(i, 0), ans);
        }

        return ans;
    }
}",1447720771
VARDHAN,vishnuvardhanpvs,399,3626,java,"class Solution {
    public int smallestNumber(int n, int t) {
        for (int i = n; ; i++) {
            if (product(i) % t == 0) return i;
        }
    }

    private int product(int n) {
        int prod = 1;
        while (n != 0) {
            prod *= n % 10;
            n /= 10;
        }

        return prod;
    }
}",1447664657
VARDHAN,vishnuvardhanpvs,399,3640,java,"class Solution {
    public static final int MAX = (int) 1e9;

    public int maxFrequency(int[] nums, int k, int numOperations) {
        var map = new HashMap<Long, Long>();
        var pMap = new TreeMap<Long, Long>();

        for (var n : nums) {
            map.compute((long) n, (key, val) -> val == null ? 1L : (val + 1));

            pMap.computeIfAbsent((long) n, key -> 0L);
            if (n + k + 1 < MAX) pMap.compute(n + k + 1L, (key, val) -> val == null ? -1 : (val - 1));

            if (n - k < 0) pMap.compute(0L, (key, val) -> val == null ? 1 : (val + 1));
            else pMap.compute((long) (n - k), (key, val) -> val == null ? 1 : (val + 1));
        }

        long ans = 0, psum = 0L;
        for (var entry : pMap.entrySet()) {
            psum += entry.getValue();
            var fq = map.getOrDefault(entry.getKey(), 0L);
            ans = Math.max(Math.min(psum - fq, numOperations) + fq, ans);
        }

        return (int) ans;
    }
}",1447751844
Thiru,pabloescobar69,400,3622,java,"class Solution {
    public int maxFrequency(int[] nums, int k, int numOperations) {
        int maxNum = findMax(nums);
        int size = maxNum + k + 2;
        int[] freq = new int[size];
        
        fillFrequency(nums, freq);
        
        int[] pre = new int[size];
        buildPrefixSum(freq, pre);
        
        return calculateMaxFrequency(freq, pre, size, k, numOperations);
    }
    
    private int findMax(int[] nums) {
        int maxNum = Integer.MIN_VALUE;
        for (int num : nums) {
            maxNum = Math.max(maxNum, num);
        }
        return maxNum;
    }
    
    private void fillFrequency(int[] nums, int[] freq) {
        for (int num : nums) {
            freq[num]++;
        }
    }
    
    private void buildPrefixSum(int[] freq, int[] pre) {
        pre[0] = freq[0];
        for (int i = 1; i < freq.length; i++) {
            pre[i] = pre[i - 1] + freq[i];
        }
    }
    
    private int calculateMaxFrequency(int[] freq, int[] pre, int size, int k, int numOperations) {
        int result = 0;
        for (int x = 0; x < size; x++) {
            if (freq[x] == 0 && numOperations == 0) {
                continue;
            }
            
            int left = Math.max(0, x - k);
            int right = Math.min(size - 1, x + k);
            int totalInRange = pre[right] - (left > 0 ? pre[left - 1] : 0);
            int canAdjust = totalInRange - freq[x];
            int total = freq[x] + Math.min(numOperations, canAdjust);
            result = Math.max(result, total);
        }
        return result;
    }
}
",1447701783
Thiru,pabloescobar69,400,3626,java,"class Solution {
    public int smallestNumber(int n, int t) {
        while (true) {
            int product = 1;
            int num = n;
            while (num > 0) {
                product *= num % 10;
                num /= 10;
            }
            if (product % t == 0) {
                return n;
            }
            n++;
        }
    }
}
",1447656477
Thiru,pabloescobar69,400,3640,java,"import java.util.*;

class Solution {
    
    public int maxFrequency(int[] nums, int k, int ops) {
        Map<Integer, Integer> f = new HashMap<>();
        List<int[]> e = genEvents(nums, k, f);
        
        Set<Integer> p = collectPoints(e, f);
        
        List<Integer> sp = sortPoints(p);
        e.sort(Comparator.comparingInt(a -> a[0]));
        
        return calcMaxFreq(e, sp, f, ops);
    }
    
    private List<int[]> genEvents(int[] nums, int k, Map<Integer, Integer> f) {
        List<int[]> e = new ArrayList<>();
        for (int n : nums) {
            f.put(n, f.getOrDefault(n, 0) + 1);
            e.add(new int[] { n - k, 1 });
            e.add(new int[] { n + k + 1, -1 });
        }
        return e;
    }
    
    private Set<Integer> collectPoints(List<int[]> e, Map<Integer, Integer> f) {
        Set<Integer> p = new HashSet<>();
        for (int[] ev : e) {
            p.add(ev[0]);
        }
        for (int n : f.keySet()) {
            p.add(n);
        }
        return p;
    }
    
    private List<Integer> sortPoints(Set<Integer> p) {
        List<Integer> sp = new ArrayList<>(p);
        Collections.sort(sp);
        return sp;
    }
    
    private int calcMaxFreq(List<int[]> e, List<Integer> sp, Map<Integer, Integer> f, int ops) {
        int idx = 0, overlap = 0, max = 0;
        for (int t : sp) {
            while (idx < e.size() && e.get(idx)[0] <= t) {
                overlap += e.get(idx)[1];
                idx++;
            }
            int ac = f.getOrDefault(t, 0);
            int pf = ac + Math.min(ops, overlap - ac);
            max = Math.max(max, pf);
        }
        return max;
    }
  
}
",1447751857
Suraj Ajay Dwivedi,surajajaydwivedi,401,3622,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, no: int) -> int:
        all=[]
        push=heapq.heappush
        pop=heapq.heappop
        v={}
        for i in nums:
            push(all,(i-k,1))
            push(all,(i,0))
            push(all,(i+k,0))
            push(all,(i+k+1,-1))
            if i not in v:
                v[i]=no
            v[i]+=1
        c=0
        ans=0
        while all:
            a,op=pop(all)
            c+=op
            mm=no
            if a in v:
                mm=v[a]
            ans=max(min(c,mm),ans)
            # print(c)
            # print(a,op,mm,ans)
        return ans",1447725954
Suraj Ajay Dwivedi,surajajaydwivedi,401,3626,python3,"class Solution:
    def smallestNumber(self, n: int, t: int) -> int:
        def find(s):
            ans=1
            s=str(s)
            for i in s:
                ans*=int(i)
            return ans
        while True:
            if find(n)%t==0:
                return n
            n+=1",1447661003
Suraj Ajay Dwivedi,surajajaydwivedi,401,3640,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, no: int) -> int:
        all=[]
        push=heapq.heappush
        pop=heapq.heappop
        v={}
        for i in nums:
            push(all,(i-k,1))
            push(all,(i,0))
            push(all,(i+k,0))
            push(all,(i+k+1,-1))
            if i not in v:
                v[i]=no
            v[i]+=1
        c=0
        ans=0
        while all:
            a,op=pop(all)
            c+=op
            mm=no
            if a in v:
                mm=v[a]
            ans=max(min(c,mm),ans)
            # print(c)
            # print(a,op,mm,ans)
        return ans",1447726891
quynhit,quynhit,403,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int op) {
        int max_num = *max_element(nums.begin(), nums.end());
        int size = max_num + k + 2;
        vector<int> freq(size, 0);
        for (int num : nums)
            freq[num]++;
        vector<int> pre(size, 0);
        for (int i = 1; i < size; ++i)
            pre[i] = pre[i - 1] + freq[i];
        int res = 0;
        for (int x = 0; x < size; ++x) {
            if (freq[x] == 0 && op == 0)
                continue;
            int left = max(0, x - k);
            int right = min(size - 1, x + k);
            int total = pre[right] - (left > 0 ? pre[left - 1] : 0);
            total = freq[x] + std::min(op, total - freq[x]);
            res = max(res, total);
        }
        return res;
    }
};",1447744225
quynhit,quynhit,403,3626,cpp,"class Solution {
public:
    int sum(int n){
        int s = 1;
        while(n > 0){
            s *= n % 10;
            n /= 10;
        }
        return s;
    }
    int smallestNumber(int n, int t) {
        int res = n;
        while(sum(res) % t != 0)
            res++;
        return res;
    }
};",1447653397
quynhit,quynhit,403,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int op) {
        map<int, int> count;
        vector<pair<int, int>> events;
        for(auto num: nums){
            count[num]++;
            events.push_back({num - k, 1});
            events.push_back({num + k + 1, -1});
        }
        set<int> unique;
        for(const auto& e: events)
            unique.insert(e.first);
        for(const auto& e: count)
            unique.insert(e.first);
        sort(begin(events), end(events));
        int i = 0, cur = 0, res = 0;
        for(const auto& pt: unique){
            while(i < size(events) && events[i].first <= pt)
                cur += events[i++].second;
            int base = count[pt];
            res = max(res, base + min(op, cur - base));
        }
        return res;
    }
};",1447752275
ajkrays,ajkrays,404,3622,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        sweep = defaultdict(int)
        t = Counter(nums)

        for num in nums:
            sweep[num - k] += 1
            sweep[num + k + 1] -= 1
        
        cnt = 0
        res = 0

        for val in sorted(t.keys() | sweep.keys()):
            cnt += sweep[val]
            total_ops = cnt - t[val]
            res = max(t[val] + min(numOperations, total_ops), res)

        return res
        ",1447750254
ajkrays,ajkrays,404,3626,python3,"class Solution:
    def smallestNumber(self, n: int, t: int) -> int:

        def find_product(n):
            res = 1
            
            while n:
                res *= n % 10
                n //= 10

            return res
            
        while True:
            if find_product(n) % t == 0:
                return n
            n += 1",1447684256
ajkrays,ajkrays,404,3640,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        sweep = defaultdict(int)
        t = Counter(nums)

        for num in nums:
            sweep[num - k] += 1
            sweep[num + k + 1] -= 1
        
        cnt = 0
        res = 0

        for val in sorted(t.keys() | sweep.keys()):
            cnt += sweep[val]
            total_ops = cnt - t[val]
            res = max(t[val] + min(numOperations, total_ops), res)

        return res
        ",1447752390
kryptonite007,kryptonite007,406,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int m) {
        sort(begin(nums), end(nums));
        int n = nums.size();
        int ans = 0;
        map<int, int> mp;
        for(auto i: nums) mp[i]++;
        for(int i = 1;i<=nums.back(); i++){
            int lb = -1;
            int rb = -1;
            int l = 0, h = n-1;
            while(l<=h){
                int md = (l+h)/2;
                if(nums[md]>=i-k){
                    lb = md;
                    h = md-1;
                }else l = md+1;
            }
            l = 0;
            h = n-1;
            while(l<=h){
                int md = (l+h)/2;
                if(nums[md]<=i+k){
                    rb = md;
                    l = md+1;
                }else h = md-1;
            }
            if(lb == -1 && rb == -1)continue;
            int sz = rb-lb+1;
            ans = max(ans, min(sz, m+mp[i]));
        }
        return ans;
    }
};",1447714000
kryptonite007,kryptonite007,406,3626,cpp,"class Solution {
public:
    int s(int n){
        int p = 1;
        while(n>0){
            p = p*(n%10);
            n/=10;
        }
        return p;
    }
    int smallestNumber(int n, int t) {
        int i = n;
        while(s(i)%t != 0){
            i++;
        }
        return i;
    }
};",1447654817
kryptonite007,kryptonite007,406,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int m) {
        sort(begin(nums), end(nums));
        int n = nums.size();
        int ans = 0;
        map<int, int> mp;
        for(auto i: nums) mp[i]++;
        for(int i = 0;i<n; i++){
            int lb = -1;
            int rb = -1;
            int l = 0, h = n-1;
            while(l<=h){
                int md = (l+h)/2;
                if(nums[md]>=nums[i]-k){
                    lb = md;
                    h = md-1;
                }else l = md+1;
            }
            l = 0;
            h = n-1;
            while(l<=h){
                int md = (l+h)/2;
                if(nums[md]<=nums[i]+k){
                    rb = md;
                    l = md+1;
                }else h = md-1;
            }
            if(lb == -1 && rb == -1)continue;
            int sz = rb-lb+1;
            ans = max(ans, min(sz, m+mp[nums[i]]));
        }
        int j = 0;
        for(int i = 0; i<n; i++){
            while(nums[i]-nums[j]>2*k)j++;
            ans = max(ans, min(i-j+1, m));
        }
        return ans;
    }
};",1447727530
Himanshu,_Hi_man_shu_1458,407,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        sort(nums.begin(),nums.end());
        int n=nums.size();
        set<int> st;
        unordered_map<int,int> mpp;
        vector<pair<int,int>> v;
        for(int i{};i<n;i++){
            mpp[nums[i]]++;
            v.push_back({nums[i]-k,1});
            v.push_back({nums[i]+k+1,-1});
        }
        sort(v.begin(),v.end());
        for(auto &it:v) st.insert(it.first);
        for(auto &it:mpp) st.insert(it.first);
        int i=0,c=0,mx=0;
        for(auto &it:st){
            while(i<2*n && v[i].first<=it) c+=v[i].second,i++;
            mx=max(mx,mpp[it]+min(c-mpp[it],numOperations));
        }
        return mx;
    }
};",1447752362
Himanshu,_Hi_man_shu_1458,407,3626,cpp,"class Solution {
int fun(int n){
    int x=1;
    while(n){
        x*=(n%10);
        n/=10;
    }
    return x;
}
public:
    int smallestNumber(int n, int t) {
        while(fun(n)%t) n++;
        return n;
    }
};",1447653741
Himanshu,_Hi_man_shu_1458,407,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        sort(nums.begin(),nums.end());
        int n=nums.size();
        set<int> st;
        unordered_map<int,int> mpp;
        vector<pair<int,int>> v;
        for(int i{};i<n;i++){
            mpp[nums[i]]++;
            v.push_back({nums[i]-k,1});
            v.push_back({nums[i]+k+1,-1});
        }
        sort(v.begin(),v.end());
        for(auto &it:v) st.insert(it.first);
        for(auto &it:mpp) st.insert(it.first);
        int i=0,c=0,mx=0;
        for(auto &it:st){
            while(i<2*n && v[i].first<=it) c+=v[i].second,i++;
            mx=max(mx,mpp[it]+min(c-mpp[it],numOperations));
        }
        return mx;
    }
};",1447752778
_lemonjuice_,_lemonjuice_,408,3622,cpp,"class Solution {
public:

    struct Seg {
        vector <int> t;
        Seg (int n,vector <int> &a){
            t.resize (4 * n + 5);
            build(a,1,0,n - 1);
        }
     
        void update (int v,int tl,int tr,int ind,int val){
            if(tl > ind or tr < ind){
                return;
            }
            if(tl == ind && tr == ind){
                t[v] = val;
                return;
            }
         
            int tm = (tl + tr) / 2;
            update(2*v,tl,tm,ind,val);
            update(2*v + 1,tm + 1,tr,ind,val);
         
            t[v] = max(t[2*v] , t[2*v + 1]);
        }
     
        int query (int v,int tl,int tr,int l,int r){
            if(tl > r or tr < l){
                return 0;
            }
            if(l <= tl && tr <= r){
                return t[v];
            }
         
            int tm = (tl + tr) / 2;
            return max(query(2*v,tl,tm,l,r),query(2*v + 1,tm + 1,tr,l,r));
        }
     
     
        void build(vector <int> &a, int v, int tl, int tr) {
            if (tl == tr) {
                t[v] = a[tl];
                return;
            }
            int tm = (tl + tr) / 2;
            build(a, 2*v, tl, tm);
            build(a, 2*v + 1, tm + 1, tr);
            t[v] = max(t[2*v],t[2*v + 1]);
        }
    };

    bool possible (vector <int> &v,int n,int mid,int k,int op,Seg &get,int m,vector <int> &b){
        for(int i = 0 ; i < n - mid + 1 ; i++){
            int diff = v[i + mid - 1] - v[i];
            if(diff > 2 * k){
                continue;
            }
            if(op >= mid){
                return true;
            }
            int r = v[i] + k,l = v[i + mid - 1] - k;
            int x = lower_bound(b.begin(),b.end(),l) - b.begin();
            int y = upper_bound(b.begin(),b.end(),r) - b.begin();
            y --;
            if(x <= y){
                int z = get.query(1,0,m - 1,x,y);
                if(mid - z <= op){
                    return true;
                }
            }
        }
        return false;
    }

    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        sort(nums.begin(),nums.end());
        int n = nums.size();
        vector <int> a,b;
        map <int,int> mp;
        for(auto x : nums){
            mp[x] ++;
        }
        for(auto x : mp){
            b.push_back(x.first);
            a.push_back(x.second);
        }
        int m = a.size();
        Seg get (m,a);
        int lo = 1,hi = n;
        int res = get.query(1,0,m - 1,0,m - 1);
        while(lo <= hi){
            int mid = (hi + lo) / 2;
            if(possible(nums,n,mid,k,numOperations,get,m,b)){
                res = mid;
                lo = mid + 1;
            }
            else{
                hi = mid - 1;
            }
        }
        
        return res;
    }
};",1447710723
_lemonjuice_,_lemonjuice_,408,3626,cpp,"class Solution {
public:
    int smallestNumber(int n, int t) {
        for(int i = n ; ; i++){
            int curr = 1;
            string s = to_string(i);
            for(int j = 0 ; j < (int)s.size() ; j++){
                curr *= (s[j] - '0');
            }
            if(curr % t == 0){
                return i;
            }
        }
        return -1;
    }
};",1447653869
_lemonjuice_,_lemonjuice_,408,3640,cpp,"class Solution {
public:

    struct Seg {
        vector <int> t;
        Seg (int n,vector <int> &a){
            t.resize (4 * n + 5);
            build(a,1,0,n - 1);
        }
     
        void update (int v,int tl,int tr,int ind,int val){
            if(tl > ind or tr < ind){
                return;
            }
            if(tl == ind && tr == ind){
                t[v] = val;
                return;
            }
         
            int tm = (tl + tr) / 2;
            update(2*v,tl,tm,ind,val);
            update(2*v + 1,tm + 1,tr,ind,val);
         
            t[v] = max(t[2*v] , t[2*v + 1]);
        }
     
        int query (int v,int tl,int tr,int l,int r){
            if(tl > r or tr < l){
                return 0;
            }
            if(l <= tl && tr <= r){
                return t[v];
            }
         
            int tm = (tl + tr) / 2;
            return max(query(2*v,tl,tm,l,r),query(2*v + 1,tm + 1,tr,l,r));
        }
     
     
        void build(vector <int> &a, int v, int tl, int tr) {
            if (tl == tr) {
                t[v] = a[tl];
                return;
            }
            int tm = (tl + tr) / 2;
            build(a, 2*v, tl, tm);
            build(a, 2*v + 1, tm + 1, tr);
            t[v] = max(t[2*v],t[2*v + 1]);
        }
    };

    bool possible (vector <int> &v,int n,int mid,int k,int op,Seg &get,int m,vector <int> &b){
        for(int i = 0 ; i < n - mid + 1 ; i++){
            int diff = v[i + mid - 1] - v[i];
            if(diff > 2 * k){
                continue;
            }
            if(op >= mid){
                return true;
            }
            int r = v[i] + k,l = v[i + mid - 1] - k;
            int x = lower_bound(b.begin(),b.end(),l) - b.begin();
            int y = upper_bound(b.begin(),b.end(),r) - b.begin();
            y --;
            if(x <= y){
                int z = get.query(1,0,m - 1,x,y);
                if(mid - z <= op){
                    return true;
                }
            }
        }
        return false;
    }

    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        sort(nums.begin(),nums.end());
        int n = nums.size();
        vector <int> a,b;
        map <int,int> mp;
        for(auto x : nums){
            mp[x] ++;
        }
        for(auto x : mp){
            b.push_back(x.first);
            a.push_back(x.second);
        }
        int m = a.size();
        Seg get (m,a);
        int lo = 1,hi = n;
        int res = get.query(1,0,m - 1,0,m - 1);
        while(lo <= hi){
            int mid = (hi + lo) / 2;
            if(possible(nums,n,mid,k,numOperations,get,m,b)){
                res = mid;
                lo = mid + 1;
            }
            else{
                hi = mid - 1;
            }
        }
        
        return res;
    }
};",1447711021
Ajay Singh Deopa,singh_deopa,410,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        int mx = *max_element(nums.begin(), nums.end()) + k;
        int mn = *min_element(nums.begin(), nums.end());
        mn -= k;
        mx += abs(mn) + 2;
        int N = mx;
        int mid = abs(mn);
        // cout << N << "" "" << mid << endl;
        // return 0;
        vector<int> cnt(N, 0), op(N, 0);

        for (int& i: nums) {
            int l = mid + (i - k);
            int r = mid + i + k + 1;
            // cout << i << "" "" << l << "" "" << r << endl;
            // continue;
            cnt[l] += 1;
            cnt[r] -= 1;
            op[l] += 1;
            op[mid + i] -= 1;
            op[mid + i + 1] += 1;
            op[r] -= 1;
        }

        int res = 0;

        for (int i = 0; i < N; i++) {
            if (i != 0) {
                op[i] += op[i - 1];
                cnt[i] += cnt[i - 1];
            }

            int val = cnt[i] - max(0, op[i] - numOperations);
            res = max(res, val);
            // cout << i << "" "" << val << "" "" << op[i] << "" "" << cnt[i] << endl;
        }

        return res;
    }
};",1447695830
Ajay Singh Deopa,singh_deopa,410,3626,cpp,"class Solution {
public:
    int smallestNumber(int n, int t) {
        while (true) {
            int tmp = n;
            int rem = t;

            while (tmp > 0 && rem != 1) {
                int d = tmp % 10;
                tmp /= 10;
                // cout << rem << "" "" << d << endl;
                rem /= __gcd(rem, d);
            }

            // cout << n << "" "" << rem << endl;
            
            if (rem == 1) {
                break;
            }

            n++;
        }

        return n;
    }
};",1447708426
Ajay Singh Deopa,singh_deopa,410,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        vector<int> aux;

        for (int& i:nums) {
            aux.push_back(i);
            aux.push_back(i + k);
            aux.push_back(i - k);
        }

        sort(aux.begin(), aux.end());
        aux.resize(unique(aux.begin(), aux.end()) - aux.begin());
        int len = (int) aux.size();
        unordered_map<int, int> mp;

        for (int i = 0; i < len; i++) {
            mp[aux[i]] = i;
            // cout << i << "" ""  << aux[i] << endl;
        }

        vector<int> cnt(len + 1, 0), op(len + 1, 0);

        // for (int& i: aux) cout << i << "" "";
        
        for (int& i: nums) {
            int l = mp[i - k];
            int r = mp[i + k] + 1;
            // cout << i << "" "" << l << "" "" << r << endl;
            // continue;
            cnt[l] += 1;
            cnt[r] -= 1;
            op[l] += 1;
            op[mp[i]] -= 1;
            op[mp[i] + 1] += 1;
            op[r] -= 1;
        }

        int res = 0;

        for (int i = 0; i <= len; i++) {
            if (i != 0) {
                op[i] += op[i - 1];
                cnt[i] += cnt[i - 1];
            }

            // cout << i << "" "" << op[i] << "" "" << cnt[i] << ""\n"";
            res = max(res, cnt[i] - max(0, op[i] - numOperations));
        }

        return res;
    }
};",1447736689
i_will_beat_my_iq,i_will_beat_my_iq,411,3622,cpp,"class Solution {
public:
int find_max(vector<int>& a) {
        int m = 0;
        for(auto x : a) {
            if(x > m) m = x;
        }
        return m;
    }
    
    vector<int> create_freq(vector<int>& a, int s) {
        vector<int> f(s, 0);
        for(auto x : a) {
            f[x]++;
        }
        return f;
    }
    
    vector<int> compute_prefix_sum(vector<int>& f, int s) {
        vector<int> p(s, 0);
        p[0] = f[0];
        for(int i = 1; i < s; ++i) {
            p[i] = p[i - 1] + f[i];
        }
        return p;
    }
    
    int calculate_max_freq(vector<int>& f, vector<int>& p, int s, int b, int c) {
        int mx_f = 0;
        
        for(int x = 0; x < s; ++x) {
            if(f[x] == 0 && c == 0) continue;
            
            int l = max(0, x - b);
            int r = min(s - 1, x + b);
            
            int cnt_w = p[r] - (l > 0 ? p[l - 1] : 0);
            int cnt_x = f[x];
            
            int pos_add = cnt_w - cnt_x;
            int add = min(c, pos_add);
            int f_a = cnt_x + add;
            
            if(f_a > mx_f) {
                mx_f = f_a;
            }
        }
        return mx_f;
    }
    int maxFrequency(vector<int>& a, int b, int c) {
        int m = find_max(a);
        int s = m + b + 1;
        
        vector<int> f = create_freq(a, s);
        vector<int> p = compute_prefix_sum(f, s);
        
        return calculate_max_freq(f, p, s, b, c);
    }
};",1447656849
i_will_beat_my_iq,i_will_beat_my_iq,411,3626,cpp,"class Solution {
public:
int prod(int num){
    int p=1;
    while(num){
        p*=num%10;
        num/=10;
    }
    return p;
}
    int smallestNumber(int n, int t) {
        while(true){
            if(prod(n)%t == 0){
                return n;
            }
            n++;
        }
        return -1;
    }
};",1447661283
i_will_beat_my_iq,i_will_beat_my_iq,411,3640,cpp,"class Solution {
public:
map<int, int> f2(vector<int>& a) {
        map<int, int> f;
        for (int x : a) {
            f[x]++;
        }
        return f;
    }
    
    vector<pair<int, int>> f3(vector<int>& a, int b) {
        vector<pair<int, int>> e;
        for (int x : a) {
            e.push_back({x - b, +1});
            e.push_back({x + b + 1, -1});
        }
        return e;
    }
    
    set<int> f4(vector<pair<int, int>>& e, map<int, int>& f) {
        set<int> pts;
        for (auto& ev : e) {
            pts.insert(ev.first);
        }
        for (auto& p : f) {
            pts.insert(p.first);
        }
        return pts;
    }

    int f5(map<int, int>& f, vector<pair<int, int>>& e, set<int>& pts, int c) {
        int i = 0, cur_ovlp = 0, mx_f = 0;

        for (int t : pts) {
            while (i < e.size() && e[i].first <= t) {
                cur_ovlp += e[i].second;
                i++;
            }

            int act_cnt = f.count(t) ? f[t] : 0;
            int pos_freq = act_cnt + min(c, cur_ovlp - act_cnt);
            mx_f = max(mx_f, pos_freq);
        }
        
        return mx_f;
    }
    int maxFrequency(vector<int>& a, int b, int c) {
        map<int, int> f = f2(a);
        vector<pair<int, int>> e = f3(a, b);
        
        set<int> pts = f4(e, f);
        sort(e.begin(), e.end());
        
        return f5(f, e, pts, c);
    }
};",1447736706
Agnibha Chakraborty,zanj0,413,3622,cpp,"/*
	JAI JAGANNATH!
*/
//@Author : zanj0

#include<bits/stdc++.h>
using namespace std;

#define ff              first
#define ss              second
#define pb              push_back
#define MOD             1000000007
#define inf             1e18

typedef long long int lli;
const int N = 2e5 + 5;
const lli OFF_SET = 5;
class Fenwick {
public:
	int* arr;
	int n;
	Fenwick(int n) {
		n += OFF_SET;
		arr = new int[n]();
		this->n = n;
	}
	void add(int idx, int val) {
		idx += OFF_SET;
		while (idx < n) {
			arr[idx] += val;
			idx += idx & -idx;
		}
	}
	int query(int idx) {
		idx += OFF_SET;
		int ret  = 0;
		while (idx > 0) {
			ret += arr[idx];
			idx -= idx & (-idx);
		}
		return ret;
	}
	int rangeQuery(int l, int r) {
		return query(r) - (l == 0 ? 0 : query(l - 1));
	}
};
Fenwick f = Fenwick(N);

class Solution {
public:
	int maxFrequency(vector<int>& nums, int k, int numOperations) {

		map<lli, lli> cnt, cost;
		lli ret = 0;
		for (auto& it : nums) {
			cnt[it - k]++;
			cnt[it + k + 1]--;

			cost[it - k]++;
			cost[it]--;

			cost[it + 1]++;
			cost[it + k + 1]--;
		}

		vector<pair<lli, lli>> cnt_arr(cnt.begin(), cnt.end());
		vector<pair<lli, lli>> cost_arr(cost.begin(), cost.end());
		lli i = 0, j = 0;
		lli has_cnt = 0, has_cost = 0;
		while (i < cnt_arr.size() ) {
			assert(j < cost.size());
			lli min_val = min(cnt_arr[i].ff, cost_arr[j].ff);
			if (min_val == cnt_arr[i].ff) {
				has_cnt += cnt_arr[i].ss;
				i++;
			}

			if (min_val == cost_arr[j].ff) {
				has_cost += cost_arr[j].ss;
				j++;
			}
			lli take = max((lli)0, has_cost - numOperations);
			ret = max(ret, has_cnt - take);
		}
		return ret;
	}
};


#ifdef LOCAL
int main() {
	freopen(""output.txt"", ""w"", stdout);
	cout << ""Compiled!"" << endl;
}
#endif",1447736712
Agnibha Chakraborty,zanj0,413,3626,cpp,"/*
	JAI JAGANNATH!
*/
//@Author : zanj0

#include<bits/stdc++.h>
using namespace std;

#define ff              first
#define ss              second
#define pb              push_back
#define MOD             1000000007
#define inf             1e18

typedef long long int lli;


class Solution {
public:
	lli GetProd(lli x) {
		lli ret = 1;
		while (x) {
			ret *= x % 10;
			x /= 10;
		}
		return ret;
	}
	int smallestNumber(int n, int t) {
		lli now = n;
		while (GetProd(now) % t)now++;
		return now;
	}
};


#ifdef LOCAL
int main() {
	freopen(""output.txt"", ""w"", stdout);
	cout << ""Compiled!"" << endl;
}
#endif",1447653141
Agnibha Chakraborty,zanj0,413,3640,cpp,"/*
	JAI JAGANNATH!
*/
//@Author : zanj0

#include<bits/stdc++.h>
using namespace std;

#define ff              first
#define ss              second
#define pb              push_back
#define MOD             1000000007
#define inf             1e18

typedef long long int lli;
const int N = 2e5 + 5;
const lli OFF_SET = 5;
class Fenwick {
public:
	int* arr;
	int n;
	Fenwick(int n) {
		n += OFF_SET;
		arr = new int[n]();
		this->n = n;
	}
	void add(int idx, int val) {
		idx += OFF_SET;
		while (idx < n) {
			arr[idx] += val;
			idx += idx & -idx;
		}
	}
	int query(int idx) {
		idx += OFF_SET;
		int ret  = 0;
		while (idx > 0) {
			ret += arr[idx];
			idx -= idx & (-idx);
		}
		return ret;
	}
	int rangeQuery(int l, int r) {
		return query(r) - (l == 0 ? 0 : query(l - 1));
	}
};
Fenwick f = Fenwick(N);

class Solution {
public:
	int maxFrequency(vector<int>& nums, int k, int numOperations) {

		map<lli, lli> cnt, cost;
		lli ret = 0;
		for (auto& it : nums) {
			cnt[it - k]++;
			cnt[it + k + 1]--;

			cost[it - k]++;
			cost[it]--;

			cost[it + 1]++;
			cost[it + k + 1]--;
		}

		vector<pair<lli, lli>> cnt_arr(cnt.begin(), cnt.end());
		vector<pair<lli, lli>> cost_arr(cost.begin(), cost.end());
		lli i = 0, j = 0;
		lli has_cnt = 0, has_cost = 0;
		while (i < cnt_arr.size() ) {
			assert(j < cost.size());
			lli min_val = min(cnt_arr[i].ff, cost_arr[j].ff);
			if (min_val == cnt_arr[i].ff) {
				has_cnt += cnt_arr[i].ss;
				i++;
			}

			if (min_val == cost_arr[j].ff) {
				has_cost += cost_arr[j].ss;
				j++;
			}
			lli take = max((lli)0, has_cost - numOperations);
			ret = max(ret, has_cnt - take);
		}
		return ret;
	}
};


#ifdef LOCAL
int main() {
	freopen(""output.txt"", ""w"", stdout);
	cout << ""Compiled!"" << endl;
}
#endif",1447737185
kagotpush,kagotpush,415,3622,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, ops: int) -> int:
        nums.sort()
        n=len(nums)
        ans=0
        i=0
        while i<n:
            x=nums[i]
            start=i
            while i<n-1 and nums[i+1]==x:
                i+=1
            xfreq=i-start+1
            nextk=bisect_right(nums,x+k,lo=i)-1
            prevk=bisect_left(nums,x-k,hi=start)
            ans=max(ans,xfreq+min(ops,(start-prevk)+(nextk-i)))
            next2k=bisect_right(nums,x+2*k)-1
            # print(f'{x=} {prevk=} {nextk=} {next2k=}')
            ans=max(ans,min(ops,next2k-start+1))
            i+=1
        return ans",1447743910
kagotpush,kagotpush,415,3626,python3,"class Solution:
    def smallestNumber(self, n: int, t: int) -> int:
        def getp(x):
            p=1
            for c in str(x):
                p*=int(c)
            return p
        for i in range(n,101):
            if getp(i)%t==0:
                return i",1447681067
kagotpush,kagotpush,415,3640,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, ops: int) -> int:
        nums.sort()
        n=len(nums)
        ans=0
        i=0
        while i<n:
            x=nums[i]
            start=i
            while i<n-1 and nums[i+1]==x:
                i+=1
            xfreq=i-start+1
            nextk=bisect_right(nums,x+k,lo=i)-1
            prevk=bisect_left(nums,x-k,hi=start)
            ans=max(ans,xfreq+min(ops,(start-prevk)+(nextk-i)))
            next2k=bisect_right(nums,x+2*k)-1
            # print(f'{x=} {prevk=} {nextk=} {next2k=}')
            ans=max(ans,min(ops,next2k-start+1))
            i+=1
        return ans",1447745798
f20212215,f20212215,416,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& v1, int v2, int v3) {
        int v4 = *max_element(v1.begin(), v1.end());
        int v5 = v4 + v2 + 2;
        vector<int> v6(v5, 0);

        // Populate frequency array
        for (int v7 : v1) {
            v6[v7]++;
        }

        vector<int> v8(v5, 0);
        v8[0] = v6[0];
        for (int v9 = 1; v9 < v5; ++v9) {
            v8[v9] = v8[v9 - 1] + v6[v9];
        }

        int v10 = 0;
        for (int v11 = 0; v11 < v5; ++v11) {
            if (!(v6[v11] != 0 || v3 != 0)) continue;

            int v12 = max(0, v11 - v2);
            int v13 = min(v5 - 1, v11 + v2);
            int v14 = v8[v13] - (v12 <= 0 ? 0:v8[v12 - 1]);
            int v15 = v14 - v6[v11];
            int v16 = v6[v11] + min(v3, v15);
            v10 = max(v10, v16);
        }

        return v10;
    }
};",1447706801
f20212215,f20212215,416,3626,cpp,"class Solution {
public:
    int dd(int x, int d) {
        int product = 1;
        while (!(x <= 0)) {
            int digit = x % 10;
            product *= digit;
            x /= 10;
        }
        return product;
    }

    int smallestNumber(int n, int t) {
        while (1) {
            if (dd(n, 10) % t == 0) {
                return n;
            }
            n++;
        }
    }
};",1447658688
f20212215,f20212215,416,3640,cpp,"#include <vector>
#include <map>
#include <algorithm>
#include <unordered_map>
#include <set>
using namespace std;

class Solution {
public:
    int maxFrequency(vector<int>& v1, int v2, int v3) {
        int v4 = v1.size();
        vector<pair<int, int>> v6;
        unordered_map<int, int> v5;
        

        int v7 = 0;
        while (!(v7 >= v4)) {
            v5[v1[v7]]++;
            v6.push_back({v1[v7] - v2, 1});
            v6.push_back({v1[v7] + v2 + 1, -1});
            v7++;
        }
        
        set<int> v8;
        int v9 = 0;
        while (!(v9 >= v6.size())) {
            v8.insert(v6[v9].first);
            v9++;
        }

        auto v10 = v5.begin();
        while (v10 != v5.end()) {
            v8.insert(v10->first);
            v10++;
        }
        
        sort(v6.begin(), v6.end());

        int v11 = 0, v12 = 0, v13 = 0, v14 = 0;
        auto v15 = v8.begin();
        while (!(v15 == v8.end())) {
            int t = *v15;
            
            while (!(v11 >= v6.size() || v6[v11].first > t)) {
                v12 += v6[v11].second;
                v11++;
            }
            
            v14 = !v5.count(t) ? 0:v5[t];
            int v16 = v14 + min(v3, v12 - v14);
            v13 = max(v13, v16);

            v15++;
        }
        
        return v13;
    }
};
",1447745966
seeker53,seeker53,417,3622,cpp,"class Solution {
public:
    int findMaxValue(const std::vector<int>& arr) {
        return *std::max_element(arr.begin(), arr.end());
    }

    void fillFrequency(const std::vector<int>& arr, std::vector<int>& f) {
        for (int n : arr) f[n]++;
    }

    void buildPrefixSum(const std::vector<int>& f, std::vector<int>& p, int sz) {
        p[0] = f[0];
        for (int i = 1; i < sz; i++) p[i] = p[i - 1] + f[i];
    }

    int findMaxFrequency(const std::vector<int>& f, const std::vector<int>& p, int sz, int k, int ops) {
        int res = 0;
        for (int x = 0; x < sz; x++) {
            if (f[x] == 0 && ops == 0) continue;
            int l = std::max(0, x - k), r = std::min(sz - 1, x + k);
            int inRange = p[r] - (l > 0 ? p[l - 1] : 0);
            int adj = inRange - f[x];
            int total = f[x] + std::min(ops, adj);
            res = std::max(res, total);
        }
        return res;
    }
    int maxFrequency(vector<int>& arr, int k, int ops) {
        int maxVal = findMaxValue(arr);
        int sz = maxVal + k + 2;
        std::vector<int> f(sz, 0), p(sz, 0);

        fillFrequency(arr, f);
        buildPrefixSum(f, p, sz);

        return findMaxFrequency(f, p, sz, k, ops);
    }
};",1447721216
seeker53,seeker53,417,3626,cpp,"class Solution {
public:
    int wompRat(int x) {
        int y = 1;
        while (x > 0) {
            y *= x % 10;
            x /= 10;
        }
        return y;
    }
    int smallestNumber(int d, int t) {
        while (true) {
            int w = wompRat(d);
            if (w % t == 0) {
                return d;
            }
            d++;
        }
    }
};",1447728288
seeker53,seeker53,417,3640,cpp,"class Solution {
public:
    void checkRan(const vector<int>& nums, int k, unordered_map<int, int>& cntr, vector<pair<int, int>>& ranges) {
        for (int num : nums) {
            cntr[num]++;
            ranges.push_back({num - k, +1});
            ranges.push_back({num + k + 1, -1});
        }
    }

    set<int> findPos(const vector<pair<int, int>>& ranges, const unordered_map<int, int>& cntr) {
        set<int> pos;
        for (const auto& range : ranges) pos.insert(range.first);
        for (const auto& p : cntr) pos.insert(p.first);
        return pos;
    }

    void findRan(int& idx, int& sim, const vector<pair<int, int>>& ranges, int t) {
        while (idx < ranges.size() && ranges[idx].first <= t) {
            sim += ranges[idx].second;
            idx++;
        }
    }

    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        int n = nums.size();
        unordered_map<int, int> cntr;
        vector<pair<int, int>> ranges;

        checkRan(nums, k, cntr, ranges);

        set<int> pos = findPos(ranges, cntr);

        sort(ranges.begin(), ranges.end());

        int idx = 0;
        int sim = 0;
        int mx = 0;

        for (int t : pos) {
            findRan(idx, sim, ranges, t);

            int res = cntr.count(t) ? cntr[t] : 0;
            int possible_freq = res + min(numOperations, sim - res);
            mx = max(mx, possible_freq);
        }

        return mx;
    }
};
",1447754043
Haowei Chi,Andy-Chi,418,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        int res = 0;
        map<int, pair<int ,int>> memo;
        for (auto &n: nums) {
            memo[n - k].first++;
            memo[n - k].second++;
            memo[n].first--;
            memo[n + 1].first++;
            memo[n + k + 1].first--;
            memo[n + 1 + k].second--;
        }
        int cn = 0, cr = 0;
        for (auto &it : memo) {
            cn += it.second.first;
            cr += it.second.second;
            if (cn <= numOperations) {
                res = max(res, cr);
            } else {
                res = max(res, cr - cn + numOperations);
            }
        }
        return res;
    }
};",1447736238
Haowei Chi,Andy-Chi,418,3626,cpp,"class Solution {
public:
    int smallestNumber(int n, int t) {
        int res = n;
        while (1) {
            int product = 1, tmp = res;
            while (tmp) {
                product *= tmp % 10;
                tmp /= 10;
            }
            if (product == 0 || product % t == 0)
                return res;
            res++;
        }
        return -1;
    }
};",1447658461
Haowei Chi,Andy-Chi,418,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        int res = 0;
        map<int, pair<int ,int>> memo;
        for (auto &n: nums) {
            memo[n - k].first++;
            memo[n - k].second++;
            memo[n].first--;
            memo[n + 1].first++;
            memo[n + k + 1].first--;
            memo[n + 1 + k].second--;
        }
        int cn = 0, cr = 0;
        for (auto &it : memo) {
            cn += it.second.first;
            cr += it.second.second;
            if (cn <= numOperations) {
                res = max(res, cr);
            } else {
                res = max(res, cr - cn + numOperations);
            }
        }
        return res;
    }
};",1447737643
Akshay Kanugula,Akshay07_,419,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        sort(nums.begin(),nums.end());
        int n=nums.size(),maxx=0;
        unordered_map<int,int> mp;
        for(int i:nums)mp[i]++;
        vector<int> left(n,-1),right(n,-1),right2(n,-1);
        for(int i=0;i<n;i++){
            auto it=lower_bound(nums.begin(),nums.end(),nums[i]-k);
            left[i]=it-nums.begin();
            it=upper_bound(nums.begin(),nums.end(),nums[i]+k);
            if(it!=nums.begin()){
                it--;
                right[i]=it-nums.begin();
            }
            it=upper_bound(nums.begin(),nums.end(),nums[i]+2*k);
            if(it!=nums.begin()){
                it--;
                right2[i]=it-nums.begin();
            }
                       
        }
        // for(int i:left)cout<<i<<"" "";
        // cout<<endl;
        // for(int i:right)cout<<i<<"" "";
        // cout<<endl;
        for(int i=0;i<n;i++){
            int len=i-left[i]+1+right[i]-i+1-1;
            // cout<<len<<"" "";
            int reqOp=len-mp[nums[i]];
            if(reqOp>numOperations)
                maxx=max(maxx,mp[nums[i]]+numOperations);
            else
                maxx=max(maxx,len);
        }
        for(int i=0;i<n;i++){
            int len=right2[i]-i+1;
            int reqOp=len;
            if(reqOp>numOperations)
                maxx=max(maxx,numOperations);
            else
                maxx=max(maxx,len);
        }
        
        return maxx;
    }
};
/*
int ans=0,l=0,maxx=0,n=nums.size(),cnt=0;
        long long sum=0;
        unordered_map<int,int> mp;
        for(int i=0;i<n;i++){
            mp[nums[i]]++;
            while(l<=i && ((nums[l]+2*k)<nums[i] || (numOperations<(i-l+1-mp[nums[i]])))){
                mp[nums[l]]--;
                if(mp[nums[l]]==0)
                        mp.erase(nums[l]);
                l++;
            }
            maxx=max(maxx,i-l+1);            
        }
        return maxx;*/",1447726754
Akshay Kanugula,Akshay07_,419,3626,cpp,"class Solution {
public:
    int smallestNumber(int n, int t) {
        for(int i=n;i>=0;i++){
            string s=to_string(i);
            int prdt=1;
            for(char c:s){
                prdt*=(c-'0');
            }
            if(prdt%t==0)
                return i;
        }
        return -1;
        
    }
};",1447658498
Akshay Kanugula,Akshay07_,419,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        sort(nums.begin(),nums.end());
        int n=nums.size(),maxx=0;
        unordered_map<int,int> mp;
        for(int i:nums)mp[i]++;
        vector<int> left(n,-1),right(n,-1),right2(n,-1);
        for(int i=0;i<n;i++){
            auto it=lower_bound(nums.begin(),nums.end(),nums[i]-k);
            left[i]=it-nums.begin();
            it=upper_bound(nums.begin(),nums.end(),nums[i]+k);
            if(it!=nums.begin()){
                it--;
                right[i]=it-nums.begin();
            }
            it=upper_bound(nums.begin(),nums.end(),nums[i]+2*1ll*k);
            if(it!=nums.begin()){
                it--;
                right2[i]=it-nums.begin();
            }
                       
        }
        for(int i=0;i<n;i++){
            int len=i-left[i]+1+right[i]-i+1-1;
            // cout<<len<<"" "";
            int reqOp=len-mp[nums[i]];
            if(reqOp>numOperations)
                maxx=max(maxx,mp[nums[i]]+numOperations);
            else
                maxx=max(maxx,len);
        }
        for(int i=0;i<n;i++){
            int len=right2[i]-i+1;
            int reqOp=len;
            if(reqOp>numOperations)
                maxx=max(maxx,numOperations);
            else
                maxx=max(maxx,len);
        }
        
        return maxx;
    }
};",1447729311
Omprakash Patel,yagami__,422,3622,cpp,"#define ll long long
class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        ll n = nums.size();
        vector<ll> v, mi(n), mx(n);
        for(ll i = 0;i<n;i++){
            v.push_back(nums[i]);
        }
        sort(v.begin(),v.end());
        for(ll i = 0;i<v.size();i++){
            mi[i] = v[i] - k;
            mx[i] = v[i] + k;
        }
        ll ans = 0;
        ll mxx = v[n-1] + k;
        for(ll i = 0;i<=mxx;i++){
            ll lower = lower_bound(v.begin(),v.end(), i) - v.begin();
            ll upper = upper_bound(v.begin(),v.end(),i) - v.begin(); upper--;
            
            ll rem = numOperations;
            
            // left 
            ll left = lower;
            ll l = 0, h = lower - 1;
            while(l <= h){
                ll m = (l + h) / 2;
                ll res = lower - m;
                if(mx[m] >= i && res <= rem){
                    left = min(left, m);
                    h = m - 1;
                }
                else{
                    l = m + 1;
                }
            }
            
            rem -= lower - left;
            
            // right
            ll right = upper;
            l = upper + 1; h = v.size() - 1;
            while(l <= h){
                ll m = (l + h) / 2;
                ll res = m - upper;
                if(mi[m] <= i && res <= rem){
                    right = max(right, m);
                    l = m + 1;
                }
                else{
                    h = m - 1;
                }
            }
            ll freq = right - left + 1;
            ans = max(ans, freq);
        }
        return ans;
    }
};",1447698377
Omprakash Patel,yagami__,422,3626,cpp,"class Solution {
public:
    int smallestNumber(int n, int t) {
        for(int i = n;;i++){
            int p = 1;
            int x = i;
            while(x){
                p *= x % 10;
                x /= 10;
            }
            if(p % t == 0){
                return i;
            }
        }
        return -1;
    }
};",1447653211
Omprakash Patel,yagami__,422,3640,cpp,"#define ll long long
class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        ll n = nums.size();
        vector<ll> v, v1, mi(n), mx(n);
        for(ll i = 0;i<n;i++){
            v.push_back(nums[i]);
        }
        sort(v.begin(),v.end());
        for(ll i = 0;i<v.size();i++){
            mi[i] = v[i] - k;
            mx[i] = v[i] + k;
        }
        ll ans = 0;
        for(ll i = 0;i<v.size();i++){
            ll lower = lower_bound(v.begin(),v.end(), v[i]) - v.begin();
            ll upper = upper_bound(v.begin(),v.end(),v[i]) - v.begin(); upper--;
            
            if(numOperations == 0 || k == 0){
                ans = max(ans,upper - lower + 1);
                continue;
            }
            
            ll rem = numOperations;
            
            // left 
            ll left = lower;
            ll l = 0, h = lower - 1;
            while(l <= h){
                ll m = (l + h) / 2;
                ll res = lower - m;
                if(mx[m] >= v[i] && res <= rem){
                    left = min(left, m);
                    h = m - 1;
                }
                else{
                    l = m + 1;
                }
            }
            
            rem -= lower - left;
            
            // right
            ll right = upper;
            l = upper + 1; h = v.size() - 1;
            while(l <= h){
                ll m = (l + h) / 2;
                ll res = m - upper;
                if(mi[m] <= v[i] && res <= rem){
                    right = max(right, m);
                    l = m + 1;
                }
                else{
                    h = m - 1;
                }
            }
            ll freq = right - left + 1;
            ans = max(ans, freq);
            
            
            ll original = v[i];
            
            v[i] = v[i] - k;
            
            lower = i;
            upper = i;
            
            rem = numOperations - 1;
            
            // left 
            left = lower;
            l = 0, h = lower - 1;
            while(l <= h){
                ll m = (l + h) / 2;
                ll res = lower - m;
                if(mx[m] >= v[i] && res <= rem){
                    left = min(left, m);
                    h = m - 1;
                }
                else{
                    l = m + 1;
                }
            }
            
            rem -= lower - left;
            
            // right
            right = upper;
            l = upper + 1; h = v.size() - 1;
            while(l <= h){
                ll m = (l + h) / 2;
                ll res = m - upper;
                if(mi[m] <= v[i] && res <= rem){
                    right = max(right, m);
                    l = m + 1;
                }
                else{
                    h = m - 1;
                }
            }
            
            freq = right - left + 1;
            ans = max(ans, freq);
            
            v[i] = original;
            
            v[i] = v[i] + k;
            
            lower = i;
            upper = i;
            
            rem = numOperations - 1;
            
            // left 
            left = lower;
            l = 0, h = lower - 1;
            while(l <= h){
                ll m = (l + h) / 2;
                ll res = lower - m;
                if(mx[m] >= v[i] && res <= rem){
                    left = min(left, m);
                    h = m - 1;
                }
                else{
                    l = m + 1;
                }
            }
            
            rem -= lower - left;
            
            // right
            right = upper;
            l = upper + 1; h = v.size() - 1;
            while(l <= h){
                ll m = (l + h) / 2;
                ll res = m - upper;
                if(mi[m] <= v[i] && res <= rem){
                    right = max(right, m);
                    l = m + 1;
                }
                else{
                    h = m - 1;
                }
            }
            
            freq = right - left + 1;
            ans = max(ans, freq);
            
            v[i] = original;
        }
        return ans;
    }
};",1447721055
Yash Kumar,hSay5,424,3622,cpp,"class Solution {
public:
    bool solve(vector<int>& nums, int k, int numOperations, int targetFreq, int n) {
        for (int i = 0; i < n; ++i) {
            int target = nums[i], cnt = 0;
            int opsNeeded = 0;

            for (int j = 0; j < n; ++j) {
                if (abs(nums[j] - target) <= k) {
                    opsNeeded = opsNeeded + abs(nums[j] - target);
                    cnt++;
                }
                if (cnt >= targetFreq && opsNeeded <= numOperations) {
                    return true;
                }
            }
        }
        return false;
    }

    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        int maxi = *max_element(nums.begin(), nums.end());
        int size = maxi + k + 2;

        vector<int> freq(size, 0);
        for (int& num : nums) {
            freq[num]++;
        }

        vector<int> pref(size, 0);
        pref[0] = freq[0];
        for (int i = 1; i < size; i++) {
            pref[i] =  freq[i] + pref[i - 1];
        }

        int res = 0;
        for (int i = 0; i < size; i++) {
            if (freq[i] == 0 && numOperations == 0) {
                continue;
            }
            int left = max(0, i - k), right = min(size - 1, i + k);
            int t_range = pref[right] - (left > 0 ? pref[left - 1] : 0);
            int temp = t_range - freq[i];
            int total = freq[i] + min(temp, numOperations);

            res = max(res, total);
        }
        return res;
    }
};",1447707900
Yash Kumar,hSay5,424,3626,cpp,"class Solution {
public:
    int digitsProduct(int num) {
        int product = 1;
        while (num > 0) {
            int digit = num % 10;
            product *= digit;
            num /= 10;
        }
        return product;
    }

    int smallestNumber(int n, int t) {
        while (true) {
            int product = digitsProduct(n);
            if (product % t == 0) {
                return n;
            }
            n++;
        }
    }
};",1447655552
Yash Kumar,hSay5,424,3640,cpp,"class Solution {
public:
    bool solve(vector<int>& nums, int k, int numOperations, int targetFreq, int n) {
        for (int i = 0; i < n; ++i) {
            int target = nums[i], cnt = 0;
            int opsNeeded = 0;

            for (int j = 0; j < n; ++j) {
                if (abs(nums[j] - target) <= k) {
                    opsNeeded = opsNeeded + abs(nums[j] - target);
                    cnt++;
                }
                if (cnt >= targetFreq) {
                    if(numOperations >= opsNeeded) {
                        return true;
                    }
                }
            }
        }
        return false;
    }

    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        int n = nums.size();
        vector<pair<int, int>> events;
        unordered_map<int, int> freq;
        for (int num : nums) {
            freq[num]++;
            events.push_back({num - k, 1});
            events.push_back({num + k + 1, -1});
        }
        set<int> p;
        for (auto& event : events) {
            p.insert(event.first);
        }
        for (auto& it : freq) {
            p.insert(it.first);
        }
        sort(begin(events), end(events));

        int idx = 0;
        int curr = 0;
        int maxi = 0, currCnt = 0;

        for (int it : p) {
            while (idx < events.size() && events[idx].first <= it) {
                curr += events[idx].second;
                idx++;
            }

            currCnt = freq.count(it) ? freq[it] : 0;
            int temp = currCnt + min(numOperations, curr - currCnt);
            maxi = max(temp, maxi);
        }

        return maxi;
    }
};",1447746558
Cecilia Chan,cecilia5,425,3622,python3,"from collections import Counter

class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        # print(nums)
        hist = Counter(nums)
        forward = []
        for v in nums:
            forward.append((v - k, -1))
            forward.append((v, 0))
            forward.append((v + k, 1))
        forward.sort()
        # print(forward)
        count = 0
        best = 0
        for (v, d) in forward:
            if d == -1:
                count += 1
            elif d == 1:
                count -= 1
            # d = ""enter"" if d == -1 else (""stay"" if d == 0 else ""leave"")
            local = (hist[v] if v in hist else 0)
            freq =  min(numOperations, count - local) + local
            # print(""\t"".join([str(x) for x in (v, d, count, freq)]))
            if freq > best:
                best = freq
        return best",1447744874
Cecilia Chan,cecilia5,425,3626,python3,"from collections import Counter

class Solution:
    def smallestNumber(self, n: int, t: int) -> int:
        while True:
            product = 1
            cur = n
            while cur > 0:
                product *= cur % 10
                cur //= 10
            if product % t == 0:
                return n
            n += 1
",1447666923
Cecilia Chan,cecilia5,425,3640,python3,"from collections import Counter

class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        # print(nums)
        hist = Counter(nums)
        forward = []
        for v in nums:
            forward.append((v - k, -1))
            forward.append((v, 0))
            forward.append((v + k, 1))
        forward.sort()
        # print(forward)
        count = 0
        best = 0
        for (v, d) in forward:
            if d == -1:
                count += 1
            elif d == 1:
                count -= 1
            # d = ""enter"" if d == -1 else (""stay"" if d == 0 else ""leave"")
            local = (hist[v] if v in hist else 0)
            freq =  min(numOperations, count - local) + local
            # print(""\t"".join([str(x) for x in (v, d, count, freq)]))
            if freq > best:
                best = freq
        return best",1447746710
uday0506,udayk2977,426,3622,cpp,"class Solution {
public:
typedef long long ll;
    int maxFrequency(vector<int>& a, int k, int ops) {
    sort(a.begin(), a.end());
    int n = a.size();
    
    unordered_map<int, int> f;
    for(auto x : a) {
        f[x]++;
    }
    
    int minY = a[0] - k, maxY = a[n - 1] + k;
    int l = 0, r = 0, maxF = 0;
    
    for(int y = minY; y <= maxY; y++) {
        while(l < n && a[l] < y - k) l++;
        while(r < n && a[r] <= y + k) r++;
        
        int cntRng = r - l;
        int cntY = f.count(y) ? f[y] : 0;
        int cntMod = cntRng - cntY;
        int mods = min(cntMod, ops);
        
        int curF = cntY + mods;
        maxF = max(maxF, curF);
    }
    
    return maxF;
    }
};",1447692502
uday0506,udayk2977,426,3626,cpp,"class Solution {
public:
    bool check(int num, int t){
        long long prod=1;
        while(num){
            prod=prod*(num%10);
            num=num/10;
        }
        if(prod%t==0)
            return true;
        return false;
    }
    int smallestNumber(int n, int t) {
        int x=n;
        for(int i=n;i<1e9;i++){
            if(check(i,t)){
                return i;
            }
            // return -1;
        }
        return -1;
    }
};",1447657488
uday0506,udayk2977,426,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int ops) {
   sort(nums.begin(), nums.end());
    
    unordered_map<int, int> freq;
    for(auto num : nums) freq[num]++;
    
    vector<pair<int, int>> events;
    for(auto num : nums) {
        events.emplace_back(num - k, 1);
        events.emplace_back(num + k + 1, -1);
    }
    
    sort(events.begin(), events.end(), [&](const pair<int,int> &a, const pair<int,int> &b) -> bool {
        return a.first == b.first ? a.second > b.second : a.first < b.first;
    });
    
    vector<int> uniqNums;
    for(auto num : nums) {
        if(uniqNums.empty() || uniqNums.back() != num) uniqNums.push_back(num);
    }
    
    vector<int> procYs;
    for(auto &event : events) procYs.push_back(event.first);
    for(auto &y : uniqNums) procYs.push_back(y);
    
    sort(procYs.begin(), procYs.end());
    procYs.erase(unique(procYs.begin(), procYs.end()), procYs.end());
    
    int maxF = 0, overlap = 0, evIdx = 0, evSize = events.size();
    
    for(auto y : procYs) {
        while(evIdx < evSize && events[evIdx].first <= y) {
            overlap += events[evIdx].second;
            evIdx++;
        }
        
        if(freq.find(y) != freq.end()) {
            int cntY = freq[y];
            int mods = min(overlap - cntY, ops);
            mods = max(mods, 0);
            int freqY = cntY + mods;
            maxF = max(maxF, freqY);
        } else {
            int freqY = min(overlap, ops);
            maxF = max(maxF, freqY);
        }
    }
    
    return maxF;

    }
};",1447713164
Ashis Mishra,ASHIS_MISHRA,427,3622,java,"class Solution {
    HashMap<Integer, Integer> map = new HashMap<>();
    ArrayList<ArrayList<Integer>> arr = new ArrayList<>();
    TreeSet<Integer> set = new TreeSet<>();

    int currOverlap = 0;
    int maxFreq = 0;
    int left = 0;
    public int maxFrequency(int[] nums, int k, int ops) {
        
        for (int i=0;i<nums.length;i++) {
            int num=nums[i];
            ArrayList<Integer> temp1 = new ArrayList<>(Arrays.asList(num - k, 1));
            ArrayList<Integer> temp2 = new ArrayList<>(Arrays.asList(num + k + 1, -1));
            arr.add(temp1);
            arr.add(temp2);
            map.put(num, map.getOrDefault(num, 0) + 1);
        }

        
        for (ArrayList<Integer> event : arr) {
            set.add(event.get(0));
        }
        for (Integer key : map.keySet()) {
            set.add(key);
        }

        Collections.sort(arr,Comparator.comparingInt(a -> a.get(0)));

        for (Integer s : set) {
            while (left < arr.size() && arr.get(left).get(0) <= s) {
                currOverlap += arr.get(left).get(1);
                left++;
            }

            int count = map.getOrDefault(s, 0);
            
            int freq = count + Math.min(ops, currOverlap - count);
            
            maxFreq = Math.max(maxFreq, freq);
        }

        return maxFreq;
    }
}
",1447746756
Ashis Mishra,ASHIS_MISHRA,427,3626,java,"class Solution {
    public int prod(int num) {
        int res = 1;
        while (num > 0) {
            int digit = num % 10;
            res *= digit;
            num = num/ 10;
        }
        return res;
    }
    public int smallestNumber(int n, int t) {
        int ele = n;
        while (true) {
            if (prod(ele) % t != 0) {
                ele++;
                
            }
            else{
                return ele;
            }
        }
    }
}",1447661705
Ashis Mishra,ASHIS_MISHRA,427,3640,java,"class Solution {
    HashMap<Integer, Integer> map = new HashMap<>();
    ArrayList<ArrayList<Integer>> arr = new ArrayList<>();
    TreeSet<Integer> set = new TreeSet<>();

    int currOverlap = 0;
    int maxFreq = 0;
    int left = 0;
    public int maxFrequency(int[] nums, int k, int ops) {
        
        for (int i=0;i<nums.length;i++) {
            int num=nums[i];
            ArrayList<Integer> temp1 = new ArrayList<>(Arrays.asList(num - k, 1));
            ArrayList<Integer> temp2 = new ArrayList<>(Arrays.asList(num + k + 1, -1));
            arr.add(temp1);
            arr.add(temp2);
            map.put(num, map.getOrDefault(num, 0) + 1);
        }

        
        for (ArrayList<Integer> event : arr) {
            set.add(event.get(0));
        }
        for (Integer key : map.keySet()) {
            set.add(key);
        }

        Collections.sort(arr,Comparator.comparingInt(a -> a.get(0)));

        for (Integer s : set) {
            while (left < arr.size() && arr.get(left).get(0) <= s) {
                currOverlap += arr.get(left).get(1);
                left++;
            }

            int count = map.getOrDefault(s, 0);
            
            int freq = count + Math.min(ops, currOverlap - count);
            
            maxFreq = Math.max(maxFreq, freq);
        }

        return maxFreq;
    }
}
",1447747077
adityajaiswal9818,adityajaiswal9818,428,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& fghjjg, int gfvfc, int fvguft) {
        int fgvuygf = fghjjg.size();
        unordered_map<int, int> gfvhyg;
        map<int, int> fvftde;

        for (int ygvhjfd : fghjjg) {
            int fghjjg_start = ygvhjfd - gfvfc;
            int fghjjg_end = ygvhjfd + gfvfc + 1;
            fvftde[fghjjg_start] += 1;
            fvftde[fghjjg_end] -= 1;
            gfvhyg[ygvhjfd] += 1;
        }

        int fghjjg_maxFreq = 0;
        int gfvfc_coverage = 0;
        set<int> fvguft_x_values;

        for (const auto& fghjjg_event : fvftde) {
            fvguft_x_values.insert(fghjjg_event.first);
        }
        for (const int& fghjjg_num : fghjjg) {
            fvguft_x_values.insert(fghjjg_num);
        }

        for (const int fghjjg_x : fvguft_x_values) {
            if (fvftde.count(fghjjg_x)) {
                gfvfc_coverage += fvftde[fghjjg_x];
            }
            int gfvhyg_count0x = gfvhyg[fghjjg_x];
            int gfvhyg_count1x = gfvfc_coverage - gfvhyg_count0x;
            int fghjjg_totalFreq = gfvhyg_count0x + min(gfvhyg_count1x, fvguft);
            fghjjg_maxFreq = max(fghjjg_maxFreq, fghjjg_totalFreq);
        }

        return fghjjg_maxFreq;
    }
};
",1447696195
adityajaiswal9818,adityajaiswal9818,428,3626,java,"class Solution {
    private int fvguft(int fghjjg) {
        int fgvuygf = 1;
        for (char gfvhyg : String.valueOf(fghjjg).toCharArray()) {
            fgvuygf *= Character.getNumericValue(gfvhyg);
        }
        return fgvuygf;
    }

    public int smallestNumber(int n, int t) {
        while (true) {
            if (fvguft(n) % t == 0) {
                return n;
            }
            n++;
        }
    }
}
",1447659762
adityajaiswal9818,adityajaiswal9818,428,3640,scala,"object Solution {
    def maxFrequency(fghjjg: Array[Int], gfvfc: Int, fvguft: Int): Int = {
        val fgvuygf = fghjjg.length
        val gfvhyg = scala.collection.mutable.Map[Int, Int]()
        val fvftde = scala.collection.mutable.ArrayBuffer[(Int, Int)]()

        for (ygvhjfd <- fghjjg) {
            gfvhyg(ygvhjfd) = gfvhyg.getOrElse(ygvhjfd, 0) + 1
            fvftde += ((ygvhjfd - gfvfc, 1))
            fvftde += ((ygvhjfd + gfvfc + 1, -1))
        }

        val points = scala.collection.mutable.TreeSet[Int]()
        for ((point, _) <- fvftde) {
            points += point
        }
        for ((ygvhjfd, _) <- gfvhyg) {
            points += ygvhjfd
        }

        fvftde.sortInPlace()

        var idx = 0
        var currentOverlap = 0
        var maxFreq = 0

        for (fghjjg_x <- points) {
            while (idx < fvftde.length && fvftde(idx)._1 <= fghjjg_x) {
                currentOverlap += fvftde(idx)._2
                idx += 1
            }

            val actualCount = gfvhyg.getOrElse(fghjjg_x, 0)
            val possibleFreq = actualCount + math.min(fvguft, currentOverlap - actualCount)
            maxFreq = math.max(maxFreq, possibleFreq)
        }

        maxFreq
    }
}
",1447738821
Macharla Venkata Ravi Teja,striver1217010,429,3622,java,"import java.util.*;
class Solution {
    public int maxFrequency(int[] nums, int k, int numOperations) {
        TreeMap<Long, Integer> tm = new TreeMap<>();
        Map<Long, Integer> hm = new HashMap<>();
        int n = nums.length;

        for (int i = 0; i < n; i++) {
            long left = ((long)nums[i]) - ((long)k);
            long right = ((long)nums[i]) + ((long)k) + 1;
            tm.put(left, tm.getOrDefault(left, 0) + 1);
            tm.put(right, tm.getOrDefault(right, 0) - 1);
            hm.put((long)nums[i], hm.getOrDefault((long)nums[i], 0) + 1);
        }

        int result = 0, total = 0;

        for (long val : tm.keySet()) {
            total = total + tm.get(val);
            tm.put(val, total);
        }

        for (long val : hm.keySet()) {
            long floorKey = tm.floorKey(val);
            int newFreq = tm.get(floorKey);
            int initFreq = hm.get(val);
            result = Math.max(result, Math.min(initFreq + numOperations, newFreq));
        }

        for (long val : tm.keySet()) {
            if (hm.containsKey(val)) {
                continue;
            }

            result = Math.max(result, Math.min(numOperations, tm.get(val)));

        }

        return result;

        
    }
}",1447733908
Macharla Venkata Ravi Teja,striver1217010,429,3626,java,"import java.util.*;
class Solution {
    public int smallestNumber(int n, int t) {

        for (int i = n; i < Integer.MAX_VALUE; i++) {
            String str = Integer.toString(i);
            int prod = 1;

            for (int j = 0; j < str.length(); j++) {
                int val = ((int)str.charAt(j)) - ((int)'0');
                prod = prod*val;

                if (prod%t == 0) {
                    return i;
                }
            }
        }

        return -1;
    }
}",1447755268
Macharla Venkata Ravi Teja,striver1217010,429,3640,java,"import java.util.*;
class Solution {
    public int maxFrequency(int[] nums, int k, int numOperations) {
         TreeMap<Long, Integer> tm = new TreeMap<>();
        Map<Long, Integer> hm = new HashMap<>();
        int n = nums.length;

        for (int i = 0; i < n; i++) {
            long left = ((long)nums[i]) - ((long)k);
            long right = ((long)nums[i]) + ((long)k) + 1;
            tm.put(left, tm.getOrDefault(left, 0) + 1);
            tm.put(right, tm.getOrDefault(right, 0) - 1);
            hm.put((long)nums[i], hm.getOrDefault((long)nums[i], 0) + 1);
        }

        int result = 0, total = 0;

        for (long val : tm.keySet()) {
            total = total + tm.get(val);
            tm.put(val, total);
        }

        for (long val : hm.keySet()) {
            long floorKey = tm.floorKey(val);
            int newFreq = tm.get(floorKey);
            int initFreq = hm.get(val);
            result = Math.max(result, Math.min(initFreq + numOperations, newFreq));
        }

        for (long val : tm.keySet()) {
            if (hm.containsKey(val)) {
                continue;
            }

            result = Math.max(result, Math.min(numOperations, tm.get(val)));

        }

        return result;
        
    }
}",1447734868
Loki29,Loki29,430,3622,cpp,"
#define ll long long
class Solution {
public:
    int maxFrequency(vector<int>& nums, int range, int ops) {
        
        int maxNum = *max_element(nums.begin(), nums.end());
        int size = maxNum + range + 1;
        size++;
        deque<int>freq(size, 0);

        int result=0;
        for(int num:nums) freq[num]++;
        deque<int>prefixSum(size, 0);
        prefixSum[0] = freq[0];
        for(int i=1; i<size; i++) prefixSum[i] = freq[i]+prefixSum[i-1] ;
        
        for(int x=0; x<size; x++) {
           
            if(!(freq[x]==0 && ops==0)){
               
                int right = min({INT_MAX,size-1, x+range});
                int left = max({INT_MIN,0, x-range});
                int totalInRange = prefixSum[right] - (left>0 ? prefixSum[left-1] : 0);
                int canAdjust = totalInRange - freq[x];
                int total = freq[x] + min(ops, canAdjust);
                result = max(result, total);
            }
        }

        return result;
    }
};
",1447713183
Loki29,Loki29,430,3626,cpp,"
class Solution {
public:
    
int solve(int xt) {
int ans = 1;
while (xt > 0) {
   int digit = xt % 10;
   ans *= digit;
   xt /= 10;
}
return ans;
}

int smallestNumber(int n, int t) {
 for(int i=0;;i++){
     int ans = solve(n);
     if (ans % t == 0) {
         return n;
         break;
     }
     n++;
   }
}
};",1447656546
Loki29,Loki29,430,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        int len = nums.size();
        unordered_map<int, int> freq;
        set<int> points;
        deque<pair<int, int>> events;
        
        for (int num : nums) {
            events.push_back({num + k + 1, -1});
            events.push_back({num - k, 1});
            freq[num]++;
        }
        
        for (const auto& p : freq)  points.insert(p.first);
        for (const auto& event : events) points.insert(event.first);
        deque<pair<int, int>> sorted_events(events.begin(), events.end());
        sort(sorted_events.begin(), sorted_events.end());
        
        
        int idx = 0;
        int current_overlap = idx;
        int max_freq = idx;
        int actual_count = max_freq;
        
        for (int t : points) {
            while (t >= sorted_events[idx].first && sorted_events.size() > idx ) 
            {
                current_overlap += sorted_events[idx].second;
                idx++;
            }
            int temp = 0;
            if(freq.find(t) != freq.end()) temp =  freq[t];
            actual_count =temp;
            int possible_freq = actual_count + min({INT_MAX, current_overlap - actual_count,numOperations});
            max_freq = max({INT_MIN,max_freq, possible_freq});
        }
        
        return max_freq;
    }
};",1447738911
SeriouSam,SeriousSam2622,432,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
    int n = nums.size();
    map<int, int> cnt_same;
    vector<pair<int, int>> events;
    vector<int> positions;

    // Count frequencies and create events
    for (int num : nums) {
        cnt_same[num]++;
        int L = num - k;
        int R = num + k;
        events.push_back({L, +1});
        events.push_back({R + 1, -1});
        positions.push_back(L);
        positions.push_back(R + 1);
    }

    // Collect positions from nums
    for (auto& kv : cnt_same) {
        positions.push_back(kv.first);
    }

    // Remove duplicates and sort positions
    sort(positions.begin(), positions.end());
    positions.erase(unique(positions.begin(), positions.end()), positions.end());

    // Sort events
    sort(events.begin(), events.end());

    // Process events
    int idx = 0;
    int coverage = 0;
    int max_total = 0;
    // int best_x = 0; // If you need to find the x value achieving max_total
    for (int x : positions) {
        // Process all events at position x
        while (idx < events.size() && events[idx].first <= x) {
            coverage += events[idx].second;
            idx++;
        }
        int cnt_same_x = cnt_same.count(x) ? cnt_same[x] : 0;
        int total = cnt_same_x + min(coverage - cnt_same_x, numOperations);
        if (total > max_total) {
            max_total = total;
            // best_x = x;
        }
    }

    return max_total;
}
};",1447724819
SeriouSam,SeriousSam2622,432,3626,cpp,"// #include <iostream>
// #include <string>
// #include <vector>
// #include <unordered_set>
// #include <unordered_map>

// using namespace std;

// void generateWords(int pos, int n,
//                    const vector<unordered_set<char>>& allowed_letters,
//                    const unordered_set<char>& must_include,
//                    unordered_set<char>& used_letters,
//                    string& current_word,
//                    unordered_set<string>& generated_words) {
//     if (pos == n) {
//         for (char c : must_include) {
//             if (current_word.find(c) == string::npos) {
//                 return; 
//             }
//         }
//         generated_words.insert(current_word);
//         return;
//     }

//     for (char c : allowed_letters[pos]) {
//         if (used_letters.count(c)) continue; 
//         used_letters.insert(c);
//         current_word[pos] = c;
//         generateWords(pos + 1, n, allowed_letters, must_include, used_letters, current_word, generated_words);
//         used_letters.erase(c);
//     }
// }
class Solution {
public:
    int smallestNumber(int n, int t) {
        int mpiyu = n;
        while (true) {
            int temp_piyu = mpiyu;
            int productpiyu = 1;
            if (temp_piyu == 0) productpiyu = 0; 
            while (temp_piyu > 0) {
                int digitpiyu = temp_piyu % 10;
                productpiyu *= digitpiyu;
                temp_piyu /= 10;
            }
            if (productpiyu % t == 0) {
                return mpiyu;
            }
            mpiyu++;
        }
    }
};
// int main() {
//     string feedback = ""BYBG"";
//     string guess = ""WORD""; 
//     int n = guess.length();
//     unordered_set<string> dictionary = {
//         ""WOOD"", ""WARD"", ""BIRD"", ""WORD"", ""CORD"", ""DOME"", ""MODE"", ""DOME"", ""DOVE"", ""DOPE"", ""NODE"", ""DONE"", ""DOLE"", ""BOND"", ""BOLD"", ""COLD"", ""GOLD"", ""FOLD"", ""MOLD"", ""TOLD"", ""HOLD"", ""BOND""
//     };

//     vector<unordered_set<char>> allowed_letters(n);
//     unordered_set<char> must_include;
//     unordered_set<char> excluded_letters;

//     unordered_set<char> all_letters;
//     for (char c = 'A'; c <= 'Z'; ++c) {
//         all_letters.insert(c);
//     }

//     for (int i = 0; i < n; ++i) {
//         char guess_char = guess[i];
//         char fb = feedback[i];

//         if (fb == 'B') {
//             excluded_letters.insert(guess_char);
//         }
//     }

//     for (int i = 0; i < n; ++i) {
//         char guess_char = guess[i];
//         char fb = feedback[i];

//         if (fb == 'G') {
//             allowed_letters[i].insert(guess_char);
//         } else if (fb == 'Y') {
//             must_include.insert(guess_char);
//             allowed_letters[i] = all_letters;
//             allowed_letters[i].erase(guess_char);
//             for (char c : excluded_letters) {
//                 allowed_letters[i].erase(c);
//             }
//         } else if (fb == 'B') {
//             allowed_letters[i] = all_letters;
//             for (char c : excluded_letters) {
//                 allowed_letters[i].erase(c);
//             }
//         }
//     }

//     unordered_set<char> used_letters;
//     string current_word(n, ' '); 
//     unordered_set<string> generated_words;

//     generateWords(0, n, allowed_letters, must_include, used_letters, current_word, generated_words);

//     vector<string> possible_words;
//     for (const string& word : generated_words) {
//         if (dictionary.count(word)) {
//             possible_words.push_back(word);
//         }
//     }

//     cout << ""Possible target words matching the feedback:"" << endl;
//     for (const string& word : possible_words) {
//         cout << word << endl;
//     }

//     return 0;
// }
",1447672315
SeriouSam,SeriousSam2622,432,3640,cpp,"// #include <iostream>
// #include <string>
// #include <vector>
// #include <unordered_set>
// #include <unordered_map>

// using namespace std;

// void generateWords(int pos, int n,
//                    const vector<unordered_set<char>>& allowed_letters,
//                    const unordered_set<char>& must_include,
//                    unordered_set<char>& used_letters,
//                    string& current_word,
//                    unordered_set<string>& generated_words) {
//     if (pos == n) {
//         for (char c : must_include) {
//             if (current_word.find(c) == string::npos) {
//                 return; 
//             }
//         }
//         generated_words.insert(current_word);
//         return;
//     }

//     for (char c : allowed_letters[pos]) {
//         if (used_letters.count(c)) continue; 
//         used_letters.insert(c);
//         current_word[pos] = c;
//         generateWords(pos + 1, n, allowed_letters, must_include, used_letters, current_word, generated_words);
//         used_letters.erase(c);
//     }
// }
class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        int n = nums.size();
        unordered_map<int, int> piyu_cnt_same;
        vector<pair<int, int>> piyu_piyu_intervals;
        vector<int> piyu_positions;

        for (int num : nums) {
            piyu_cnt_same[num]++;
            int L = num - k;
            int R = num + k;
            piyu_piyu_intervals.push_back({L, R});
            piyu_positions.push_back(L);
            piyu_positions.push_back(R + 1); 
            piyu_positions.push_back(num);
        }

        sort(piyu_positions.begin(), piyu_positions.end());
        piyu_positions.erase(unique(piyu_positions.begin(), piyu_positions.end()), piyu_positions.end());

        unordered_map<int, int> piyu_position_to_index;
        int m = piyu_positions.size();
        for (int i = 0; i < m; ++i) {
            piyu_position_to_index[piyu_positions[i]] = i;
        }

        vector<int> diff(m + 1, 0);
        for (auto& piyu_interval : piyu_piyu_intervals) {
            int L = piyu_interval.first;
            int R = piyu_interval.second;
            int idx_L = piyu_position_to_index[L];
            int idx_R_plus1 = piyu_position_to_index[R + 1];
            diff[idx_L] += 1;
            diff[idx_R_plus1] -= 1;
        }

        vector<int> piyu_coverage(m, 0);
        piyu_coverage[0] = diff[0];
        for (int i = 1; i < m; ++i) {
            piyu_coverage[i] = piyu_coverage[i - 1] + diff[i];
        }

        int piyu_max_total = 0;
        for (int i = 0; i < m; ++i) {
            int x = piyu_positions[i];
            int piyu_coverage_x = piyu_coverage[i];
            int piyu_cnt_same_x = piyu_cnt_same.count(x) ? piyu_cnt_same[x] : 0;
            int total = piyu_cnt_same_x + min(numOperations, piyu_coverage_x - piyu_cnt_same_x);
            piyu_max_total = max(piyu_max_total, total);
        }

        return piyu_max_total;
    }
};
// int main() {
//     string feedback = ""BYBG"";
//     string guess = ""WORD""; 
//     int n = guess.length();
//     unordered_set<string> dictionary = {
//         ""WOOD"", ""WARD"", ""BIRD"", ""WORD"", ""CORD"", ""DOME"", ""MODE"", ""DOME"", ""DOVE"", ""DOPE"", ""NODE"", ""DONE"", ""DOLE"", ""BOND"", ""BOLD"", ""COLD"", ""GOLD"", ""FOLD"", ""MOLD"", ""TOLD"", ""HOLD"", ""BOND""
//     };

//     vector<unordered_set<char>> allowed_letters(n);
//     unordered_set<char> must_include;
//     unordered_set<char> excluded_letters;

//     unordered_set<char> all_letters;
//     for (char c = 'A'; c <= 'Z'; ++c) {
//         all_letters.insert(c);
//     }

//     for (int i = 0; i < n; ++i) {
//         char guess_char = guess[i];
//         char fb = feedback[i];

//         if (fb == 'B') {
//             excluded_letters.insert(guess_char);
//         }
//     }

//     for (int i = 0; i < n; ++i) {
//         char guess_char = guess[i];
//         char fb = feedback[i];

//         if (fb == 'G') {
//             allowed_letters[i].insert(guess_char);
//         } else if (fb == 'Y') {
//             must_include.insert(guess_char);
//             allowed_letters[i] = all_letters;
//             allowed_letters[i].erase(guess_char);
//             for (char c : excluded_letters) {
//                 allowed_letters[i].erase(c);
//             }
//         } else if (fb == 'B') {
//             allowed_letters[i] = all_letters;
//             for (char c : excluded_letters) {
//                 allowed_letters[i].erase(c);
//             }
//         }
//     }

//     unordered_set<char> used_letters;
//     string current_word(n, ' '); 
//     unordered_set<string> generated_words;

//     generateWords(0, n, allowed_letters, must_include, used_letters, current_word, generated_words);

//     vector<string> possible_words;
//     for (const string& word : generated_words) {
//         if (dictionary.count(word)) {
//             possible_words.push_back(word);
//         }
//     }

//     cout << ""Possible target words matching the feedback:"" << endl;
//     for (const string& word : possible_words) {
//         cout << word << endl;
//     }

//     return 0;
// }
",1447739296
Haipei Liu,lhp_ch,433,3622,python3,"from typing import List
from collections import defaultdict

class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        nums.sort()
        freq =defaultdict(int)
        for num in nums:
            freq[num]+=1

        min_t = nums[0]-k
        max_t = nums[-1]+k
        res=0
        l=0
        r=0
        n=len(nums)
        
        for t in range(min_t,max_t +1):
            while l <n and nums[l] < t-k:
                l+=1
            while r<n and nums[r]<= t+k:
                r+=1

            cnt = r-l
            freq_t = freq[t] if t in freq else 0
            can_mod = cnt - freq_t
            freq_new = freq_t + min (can_mod,numOperations)
            res = max(res,freq_new)
        return res
        ",1447718423
Haipei Liu,lhp_ch,433,3626,python3,"from typing import List
class Solution:
    def smallestNumber(self, n: int, t: int) -> int:
        def prodd(x:int) -> int:
            p=1
            while x>0:
                digit = x%10
                p *= digit
                x//= 10
            return p

        m = n
        while True:
            p = prodd(m)
            if p%t ==0:
                return m
            m+=1
        ",1447657477
Haipei Liu,lhp_ch,433,3640,python3,"from typing import List
from collections import defaultdict

class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        nums.sort()
        freq =defaultdict(int)
        for num in nums:
            freq[num]+=1

        candidates = set()
        for num in nums:
            candidates.add(num)    
            candidates.add(num-k)    
            candidates.add(num+k)    

        min_num = nums[0]-k
        max_num = nums[-1]+k
        candidates=[t for t in candidates if min_num <=t<=max_num]

        candidates.sort()
        
        res=0
        l=0
        r=0
        n=len(nums)
        
        for t in candidates:
            while l <n and nums[l] < t-k:
                l+=1
            while r<n and nums[r]<= t+k:
                r+=1

            cnt = r-l
            freq_t = freq[t] if t in freq else 0
            can_mod = cnt - freq_t
            freq_new = freq_t + min (can_mod,numOperations)
            res = max(res,freq_new)
        return res
        ",1447739530
Yashwardhan,YashwardhanSh,434,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        map<int,int>mp;
        set<int>st;
        vector<pair<int,int>>v;
        for(auto it:nums){
            mp[it]++;
            v.push_back({it-k,2});
            v.push_back({it+k+1,0});
        }
        for(auto it:v){
            st.insert(it.first);
        }
        for(auto it:mp){
            st.insert(it.first);
        }
        sort(v.begin(),v.end());
        int ind=0,curr=0,maxi=0,ans=0;
        for(auto it:st){
            while(ind<v.size()&&v[ind].first<=it){
                curr+=v[ind].second-1;
                ind++;
            }
            ans=0;
            if(mp.contains(it)){
                ans=mp[it];
            }
            int p=ans+min(numOperations,curr-ans);
            maxi=max(maxi,p);
        }
        return maxi;
    }
};",1447747915
Yashwardhan,YashwardhanSh,434,3626,cpp,"class Solution {
public:
    int product(int x){
        int pro=1;
        while(x>0){
            int digit=x%10;
            if(digit==0){
                return 0;
            }
            pro=pro*digit;
            x=x/10;
        }
        return pro;
    }
    int smallestNumber(int n, int t) {
        int p=n;
        while(true){
            if(product(p)%t==0)return p;
            p++;
        }
        return p;
    }
};",1447666672
Yashwardhan,YashwardhanSh,434,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        map<int,int>mp;
        set<int>st;
        vector<pair<int,int>>v;
        for(auto it:nums){
            mp[it]++;
            v.push_back({it-k,2});
            v.push_back({it+k+1,0});
        }
        for(auto it:v){
            st.insert(it.first);
        }
        for(auto it:mp){
            st.insert(it.first);
        }
        sort(v.begin(),v.end());
        int ind=0,curr=0,maxi=0,ans=0;
        for(auto it:st){
            while(ind<v.size()&&v[ind].first<=it){
                curr+=v[ind].second-1;
                ind++;
            }
            ans=0;
            if(mp.contains(it)){
                ans=mp[it];
            }
            int p=ans+min(numOperations,curr-ans);
            maxi=max(maxi,p);
        }
        return maxi;
    }
};",1447747413
ykamo,ykamo,435,3622,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        a = []
        for v in nums:
            a.append((v-k, 1))
            a.append((v+k+1, -1))
            a.append((v, 2))
            a.append((v+1, 4))
        a.sort()
        #print(a)
        ans = 0
        w = 0
        n = 0
        for i in range(len(a)):
            v, d = a[i]
            if d < 2:
                w += d
                n += d
            else:
                n += d - 3
            #print(v, d, w, n)
            if (i == len(a) - 1) or (a[i+1][0] != v):
                ans = max(ans, w - max(0, n - numOperations))
        return ans
            
            
        ",1447731202
ykamo,ykamo,435,3626,python3,"class Solution:
    def smallestNumber(self, n: int, t: int) -> int:
        while True:
            p = reduce(lambda x,y: x*y, map(int, str(n)))
            if p % t == 0:
                return n
            n += 1
        
        ",1447657613
ykamo,ykamo,435,3640,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        a = []
        for v in nums:
            a.append((v-k, 1))
            a.append((v+k+1, -1))
            a.append((v, 2))
            a.append((v+1, 4))
        a.sort()
        #print(a)
        ans = 0
        w = 0
        n = 0
        for i in range(len(a)):
            v, d = a[i]
            if d < 2:
                w += d
                n += d
            else:
                n += d - 3
            #print(v, d, w, n)
            if (i == len(a) - 1) or (a[i+1][0] != v):
                ans = max(ans, w - max(0, n - numOperations))
        return ans
            
            
        ",1447730768
Hasnain Ahmed,Hassu083,436,3622,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        
        nums.sort()
        count = Counter(nums)
        n = len(nums)

        left_ans = [0]*n
        right_ans = [0]*n
        q = deque()
        for i, num in enumerate(nums):
            while q and abs(nums[q[0]]-num) > k:
                q.popleft()
            left_ans[i] = len(q)
            q.append(i)
            
        q = deque()
        for i, num in enumerate(nums[::-1]):
            while q and abs(nums[q[0]]-num) > k:
                q.popleft()
                
            right_ans[i] = len(q)
            q.append(n-i-1)
        
        right_ans = right_ans[::-1]
        
        left_ans_2 = [0]*n
        q = deque()
        for i, num in enumerate(nums):
            while q and abs(nums[q[0]]-num) > 2*k:
                q.popleft()
            left_ans_2[i] = len(q)
            q.append(i)
            
        q = deque()
        right_ans_2 = [0]*n
        for i, num in enumerate(nums[::-1]):
            while q and abs(nums[q[0]]-num) > 2*k:
                q.popleft()
            right_ans_2[i] = len(q)
            q.append(n-i-1)
        
        right_ans_2 = right_ans_2[::-1]
        
        
        
                
        
        ans = 0
        for i in range(n):
            val = min(numOperations, left_ans[i]+right_ans[i]-count[nums[i]]+1) + count[nums[i]]
            val2 = min(numOperations, max(left_ans_2[i],right_ans_2[i]) + 1)
            if max(val, val2) > ans:
                ans = max(val, val2)
        return ans
        
        
        
        ",1447722190
Hasnain Ahmed,Hassu083,436,3626,python3,"class Solution:
    def smallestNumber(self, n: int, t: int) -> int:
        def digit_product(x):
            product = 1
            while x > 0:
                product *= x % 10
                x //= 10
            return product

        while True:
            if digit_product(n) % t == 0:
                return n
            n += 1
        
        return -1",1447653934
Hasnain Ahmed,Hassu083,436,3640,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        
        nums.sort()
        count = Counter(nums)
        n = len(nums)

        left_ans = [0]*n
        right_ans = [0]*n
        q = deque()
        for i, num in enumerate(nums):
            while q and abs(nums[q[0]]-num) > k:
                q.popleft()
            left_ans[i] = len(q)
            q.append(i)
            
        q = deque()
        for i, num in enumerate(nums[::-1]):
            while q and abs(nums[q[0]]-num) > k:
                q.popleft()
                
            right_ans[i] = len(q)
            q.append(n-i-1)
        
        right_ans = right_ans[::-1]
        
        left_ans_2 = [0]*n
        q = deque()
        for i, num in enumerate(nums):
            while q and abs(nums[q[0]]-num) > 2*k:
                q.popleft()
            left_ans_2[i] = len(q)
            q.append(i)
            
        q = deque()
        right_ans_2 = [0]*n
        for i, num in enumerate(nums[::-1]):
            while q and abs(nums[q[0]]-num) > 2*k:
                q.popleft()
            right_ans_2[i] = len(q)
            q.append(n-i-1)
        
        right_ans_2 = right_ans_2[::-1]
        
        
        
                
        
        ans = 0
        for i in range(n):
            val = min(numOperations, left_ans[i]+right_ans[i]-count[nums[i]]+1) + count[nums[i]]
            val2 = min(numOperations, max(left_ans_2[i],right_ans_2[i]) + 1)
            if max(val, val2) > ans:
                ans = max(val, val2)
        return ans
        
        
        
        ",1447722719
yennam koushikreddy,yennamkoushikreddy1234,437,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& a, int b, int c) {
        int d = *max_element(a.begin(), a.end());
        int e = d + b + 2;
        vector<int> f(e, 0);

        for (int g : a) {
            f[g] += 1;
        }

        vector<int> h(e, 0);
        h[0] = f[0];
        for (int i = 1; i < e; ++i) {
            h[i] = h[i - 1] + f[i];
        }

        int j = 0;
        for (int k = 0; k < e; ++k) {
            if (f[k] == 0 && c == 0) {
                continue;
            }

            int l = max(0, k - b);
            int m = min(e - 1, k + b);
            int n = h[m] - (l > 0 ? h[l - 1] : 0);
            int o = n - f[k];
            int p = f[k] + min(c, o);
            j = max(j, p);
        }

        return j;
    }
};
",1447718406
yennam koushikreddy,yennamkoushikreddy1234,437,3626,cpp,"class Solution {
public:
    int solve(int n, int t) {
        int temp = 1;
        int num = n;
        while (num != 0) {
            temp *= num % 10;
            num /= 10;
        }
        if (temp % t == 0) {
            return n;
        }
        return 0;
    }

    int smallestNumber(int n, int t) {
        for (int i = n;; i++) {
            int ans = solve(i, t);
            if (ans != 0) {
                return ans;
            }
        }
    }
};
",1447659347
yennam koushikreddy,yennamkoushikreddy1234,437,3640,cpp,"class Solution
{
public:
    #define f(i, k, n) for (int i = k; i < n; i++)
    #define pb push_back
    #define F first
    #define S second
    #define all(x) x.begin(), x.end()
    #define go(a, x) for (auto &a : x)
    #define yn(a) cout << ((a) ? ""yes\n"" : ""no\n"")
    #define ll long long
    #define ld long double
    #define pii pair<int, int>
    #define pll pair<ll, ll>
    #define mii map<int, int>
    #define umii unordered_map<int, int>
    #define si set<int>
    #define usi unordered_set<int>
    #define msi multiset<int>
    #define mod 1000000007

    int maxFrequency(vector<int> &nums, int k, int ops)
    {
        umii a;
        vector<pair<int,int>> b;

        int c = 0;
        while (c < nums.size())
        {
            a[nums[c]]++;
            b.push_back({nums[c] - k, 1});
            b.push_back({nums[c] + k + 1, -1});
            c++;
        }

        si d;
        auto it = b.begin();
        while (it != b.end())
        {
            d.insert(it->F);
            it++;
        }

        auto f = a.begin();
        while (f != a.end())
        {
            d.insert(f->F);
            f++;
        }

        sort(all(b));
        int g = 0;
        int h = 0;
        int i = 0;
        auto j = d.begin();
        int ans = 0;
        while (j != d.end())
        {
            ans+=1;
            while (g < b.size() && b[g].F <= *j)
            {
                h += b[g].S;
                g++;
            }
            ans-=1;
            int l = a.count(*j) ? a[*j] : 0;
            int m = l + min(ops, h - l);
            i = max(i, m);
            j++;
        }
        // cout <<  ans << ""\n"";
        return i;
    }
};",1447756272
Lokesh Rajput,lokeshrajput5473,439,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        map<int, int> mp;
        // for(auto i:nums) mp[i] ++;

        // sort()
        vector<int> vp (100001, 0), exact(100001, 0);
        
        for(auto i:nums) {vp[i] ++;exact[i]++;}

        for(int i=1;i<=100000;i++) vp[i] += vp[i-1];

        int ans = 0;
        for(int i=1;i<=100000;i++) {
            int high = vp[min(i+k, 100000)];
            int low = vp[max(i-k-1, 0)];

            int total = high - low;
            ans = max(ans, exact[i] + min(total - exact[i], numOperations));

            // cout << ans << "" "";
        }
        
        return ans;
    }
};",1447677776
Lokesh Rajput,lokeshrajput5473,439,3626,cpp,"class Solution {
public:
    int smallestNumber(int n, int t) {
        for (int candidate = n; ; ++candidate) {
            int product = 1, x = candidate;
            while (x > 0) {
                int digit = x % 10;
                product *= digit;
                x /= 10;
            }
            if (product % t == 0) {
                return candidate;
            }
        }
    }
};
",1447653245
Lokesh Rajput,lokeshrajput5473,439,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        unordered_map<int, int> freq;
        for (int num : nums) freq[num]++;
        sort(nums.begin(), nums.end());
        
        int n = nums.size();
        int ans = 0;
        map<int, int> mp;
        for(auto i:nums) {
            mp[i-k] ++;
            mp[i+k+1]--;
        }
        int prev = 0;

        for(auto i:mp) {
            int here = freq.count(i.first);
            prev += i.second;
            ans = max(ans, here + max(0, min(prev - here, numOperations)));
            // cout << i.first << "" "" <<i.second << "" "" << here << endl;
        }

        for (int i = 0; i < n; ++i) {
            int curr = nums[i];
            auto lower_bound_it = upper_bound(nums.begin(), nums.end(), curr - k - 1) - nums.begin();
            auto upper_bound_it = upper_bound(nums.begin(), nums.end(), curr + k) - nums.begin();
            int total_in_range = upper_bound_it - lower_bound_it;
            int current_frequency = freq[curr] + min(total_in_range - freq[curr], numOperations);
            ans = max(ans, current_frequency);
        }
        
        return ans;
    }
};
",1447723124
i86032,i86032,440,3622,cpp,"#include <vector>
#include <algorithm>

class Solution {
public:
    int maxFrequency(std::vector<int>& nums, int k, int numOperations) {
        int max_num = *std::max_element(nums.begin(), nums.end());
        int size = max_num + k + 2;

        std::vector<int> freq = calculateFrequency(nums, size);
        std::vector<int> pre = calculatePrefixSum(freq, size);

        return calculateMaxFrequency(freq, pre, k, numOperations, size);
    }

private:
    std::vector<int> calculateFrequency(const std::vector<int>& nums, int size) {
        std::vector<int> freq(size, 0);
        int i = 0;
        while (i < nums.size()) {
            freq[nums[i]]++;
            i++;
        }
        return freq;
    }

    std::vector<int> calculatePrefixSum(const std::vector<int>& freq, int size) {
        std::vector<int> pre(size, 0);
        pre[0] = freq[0];
        int i = 1;
        while (i < size) {
            pre[i] = pre[i - 1] + freq[i];
            i++;
        }
        return pre;
    }

    int calculateMaxFrequency(const std::vector<int>& freq, const std::vector<int>& pre, int k, int numOperations, int size) {
        int result = 0;
        int x = 0;
        while (x < size) {
            if (freq[x] == 0 && numOperations == 0) {
                x++;
                continue;
            }

            int left = std::max(0, x - k);
            int right = std::min(size - 1, x + k);
            int totalInRange = calculateRangeSum(pre, left, right);
            int canAdjust = totalInRange - freq[x];
            int total = freq[x] + std::min(numOperations, canAdjust);
            result = std::max(result, total);
            x++;
        }
        return result;
    }

    int calculateRangeSum(const std::vector<int>& pre, int left, int right) {
        return pre[right] - (left > 0 ? pre[left - 1] : 0);
    }
};
",1447702543
i86032,i86032,440,3626,cpp,"class Solution {
public:
    int smallestNumber(int n, int t) {
         while (true) {
            int num = n, product = 1;
            bool hasZero = false;

            while (num > 0) {
                int digit = num % 10;
                if (digit == 0) {
                    hasZero = true;
                    break; 
                }
                product *= digit;
                num /= 10;
            }
            
            if (hasZero || product % t == 0) {
                return n;
            }
            n++;
        }
    }
};",1447660984
i86032,i86032,440,3640,cpp,"
class Solution {
public:
    int maxFrequency(std::vector<int>& nums, int k, int numOperations) {
        std::map<int, int> freq = calculateFrequency(nums);
        std::vector<std::pair<int, int>> events = createEvents(nums, k);
        std::set<int> points = collectUniquePoints(events, freq);

        return calculateMaxFrequency(freq, events, points, numOperations);
    }

private:
    std::map<int, int> calculateFrequency(const std::vector<int>& nums) {
        std::map<int, int> freq;
        int i = 0;
        while (i < nums.size()) {
            freq[nums[i]]++;
            i++;
        }
        return freq;
    }

    std::vector<std::pair<int, int>> createEvents(const std::vector<int>& nums, int k) {
        std::vector<std::pair<int, int>> events;
        int i = 0;
        while (i < nums.size()) {
            events.emplace_back(nums[i] - k, +1);
            events.emplace_back(nums[i] + k + 1, -1);
            i++;
        }
        std::sort(events.begin(), events.end());
        return events;
    }

    std::set<int> collectUniquePoints(const std::vector<std::pair<int, int>>& events, const std::map<int, int>& freq) {
        std::set<int> points;
        for (const auto& event : events) {
            points.insert(event.first);
        }
        for (const auto& entry : freq) {
            points.insert(entry.first);
        }
        return points;
    }

    int calculateMaxFrequency(const std::map<int, int>& freq, const std::vector<std::pair<int, int>>& events, 
                              const std::set<int>& points, int numOperations) {
        int maxFrequency = 0;
        int currentOverlap = 0;
        int eventIndex = 0;

        for (int point : points) {
            while (eventIndex < events.size() && events[eventIndex].first <= point) {
                currentOverlap += events[eventIndex].second;
                eventIndex++;
            }

            int elementCount = freq.count(point) ? freq.at(point) : 0;
            int possibleFrequency = elementCount + std::min(numOperations, currentOverlap - elementCount);
            maxFrequency = std::max(maxFrequency, possibleFrequency);
        }

        return maxFrequency;
    }
};
",1447731696
lIlIlIIIIIllI,lIlIlIIIIIllI,441,3622,python3,"class Solution:
    def maxFrequency(self, nums: List[int], x: int, numOperations: int) -> int:
        res = 0
        nums.sort()
        max_num = max(nums)
        min_num = min(nums)
        front = 0
        ops = {}
        for k in range(min_num, max_num + 1):
            lowest = bisect_left(nums, k - x)
            highest = bisect_right(nums, k + x)
            ledge = bisect_left(nums, k)
            redge = bisect_right(nums, k)
            # l = (ledge - lowest)
            # r = (highest - redge)
            # print(k, lowest, highest, ledge, redge)
            res = max(res, min(numOperations + redge - ledge, highest - lowest))

        return res
        ",1447734741
lIlIlIIIIIllI,lIlIlIIIIIllI,441,3626,python3,"class Solution:
    def smallestNumber(self, n: int, t: int) -> int:
        def prod_digits(num):
            res = 1
            while num:
                res *= num % 10
                num = num // 10
            return res
            
        while True:
            if prod_digits(n) % t == 0:
                return n
            n += 1
        ",1447698164
lIlIlIIIIIllI,lIlIlIIIIIllI,441,3640,python3,"class Solution:
    def maxFrequency(self, nums: List[int], x: int, numOperations: int) -> int:
        res = 0
        nums.sort()
        max_num = max(nums)
        min_num = min(nums)
        ops = {}
        candidates = []

        front = 0
        candidates = nums[:]
        for k in nums:
            candidates.append(k + x)
            candidates.append(k - x)
        
        for k in candidates:
            lowest = bisect_left(nums, k - x)
            highest = bisect_right(nums, k + x)
            ledge = bisect_left(nums, k)
            redge = bisect_right(nums, k)
            res = max(res, min(numOperations + redge - ledge, highest - lowest))

        return res
        ",1447756520
Wei Liu,nevergiveup,442,3622,java,"class Solution {

    
    private int queryTotal(int l, int r) {
        if (l > r) {
            return 0;
        }
        int ans = totalAcc[r];
        if (l - 1 >= 0) {
            ans -= totalAcc[l - 1];
        }
        return ans;
    }

    private int[] totalAcc = new int[100010];
    private int[] count = new int[100010];

    public int maxFrequency(int[] nums, int k, int numOperations) {
        for (int number : nums) {
            count[number] ++;
        }
        // acc
        for (int i = 0;i <= 100000;i ++) {
            totalAcc[i] = count[i];
            if (i > 0) {
                totalAcc[i] += totalAcc[i - 1];
            }
        }
        // choose base
        int ans = 0;
        for (int i = 0;i <= 100000;i ++) {
            // check total
            int l = Math.max(i - k, 0);
            int r = Math.min(i + k, 100000);
            int candidates = queryTotal(l, i - 1) + queryTotal(i + 1, r);
            int result = Math.min(candidates, numOperations) + count[i];
            ans = Math.max(ans, result);
        }
        return ans;
    }

}",1447702675
Wei Liu,nevergiveup,442,3626,java,"
    class Solution {
        private boolean check(int n, int t) {
            long ans = 1;
            while (n > 0) {
                int digit = n % 10;
                n /= 10;
                ans *= digit;
            }
            return ans % t == 0;
        }

        public int smallestNumber(int n, int t) {
            while (!check(n, t)) {
                n ++;
            }
            return n;
        }
    }

",1447654064
Wei Liu,nevergiveup,442,3640,java,"class Solution {

    
    public int maxFrequency(int[] nums, int k, int numOperations) {
        Map<Integer , Integer> freqMap = new HashMap<>();
        for (int number : nums) {
            freqMap.put(number, freqMap.getOrDefault(number, 0) + 1);
        }
        Map<Integer, Integer> map = new TreeMap<>();
        for (int number : nums) {
            int l = number - k, r = number - 1;
            if (l <= r) {
                map.put(l, map.getOrDefault(l, 0) + 1);
                map.put(r + 1, map.getOrDefault(r + 1, 0) - 1);
            }
            l = number + 1;
            r = number + k;
            if (l <= r) {
                map.put(l, map.getOrDefault(l, 0) + 1);
                map.put(r + 1, map.getOrDefault(r + 1, 0) - 1);
            }
        }
        int total = 0, ans = 0;
        for (Map.Entry<Integer , Integer> entry : map.entrySet()) {
            total += entry.getValue();
            int result = Math.min(total, numOperations) + freqMap.getOrDefault(entry.getKey(), 0);
            ans = Math.max(ans, result);
        }
        for (Map.Entry<Integer , Integer> entry : freqMap.entrySet()) {
            ans = Math.max(ans, entry.getValue());
        }
        return ans;
    }

    
}",1447723284
5saken,5saken,443,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        int max_num = *max_element(nums.begin(), nums.end());
        int n = max_num + k + 2, res = 0;

        vector<int> f(n, 0);
        for (int i : nums) f[i]++;

        vector<int> pre(n, 0);
        pre[0] = f[0];
        for (int i = 1; i < n; ++i) pre[i] = pre[i-1] + f[i];

        for (int x = 0; x < n; ++x) {
            if (f[x] == 0 && numOperations == 0) continue;

            int l = max(0, x - k),r = min(n - 1, x + k);
            int t = pre[r];
            if(l) t -= pre[l-1];
            int total = f[x] + min(numOperations, t - f[x]);
            res = max(res, total);
        }

        return res;
    }
};",1447718692
5saken,5saken,443,3626,cpp,"class Solution {
public:
    int smallestNumber(int n, int t) {
        auto p = [](int x){
            int res = 1;
            while(x){
                res *= x % 10;
                x/= 10;
            }
            return res;
        };
        for(int i=0;i<20000;i++){
            int x = p(n+i);
            if(x % t ==0) return n+i;
        }
        return -1;
    }
};",1447670797
5saken,5saken,443,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        int n = nums.size();
        map<int, int> f;
        vector<pair<int, int>> v;

        for (int i : nums) {
            f[i]++;
            v.push_back({i - k, +1});
            v.push_back({i + k + 1, -1});
        }

        set<int> s;
        for (auto& i : v) s.insert(i.first);
        
        for (auto& p : f) s.insert(p.first);

        sort(v.begin(), v.end());

        int ind = 0,current_overlap = 0;
        int res = 0,cnt = 0;

        for (int i : s) {
            while (ind < v.size() && v[ind].first <= i) {
                current_overlap += v[ind].second;
                ind++;
            }

            if(f.find(i) != f.end()) cnt = f[i];
            else cnt = 0;
            int x = cnt + min(numOperations, current_overlap - cnt);
            res = max(res, x);
        }

        return res;
    }
};",1447740240
Paul Foster,PaulFoster,444,3622,python3,"import collections

class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        if k == 0 or numOperations == 0:
            return max(collections.Counter(nums).values())
        intervals = []
        for num in nums:
            intervals.append((num, 'b exact start'))
            intervals.append((num + 1, 'a exact stop'))
            intervals.append((num - k, 'c start'))
            intervals.append((num + k, 'd stop'))
        intervals.sort()
        # print(intervals)

        overlap = 0
        max_overlap = 0
        free = 0
        for num, event in intervals:
            if event == 'b exact start':
                free += 1
            if event == 'a exact stop':
                free -= 1
            if event == 'c start':
                overlap += 1

            valid_overlap = free + min(overlap - free, numOperations)
            max_overlap = max(max_overlap, valid_overlap)
            # print(f'{num=} {event=} {free=} {overlap=} {valid_overlap=}')
            
            if event == 'd stop':
                overlap -= 1
        return max_overlap",1447719615
Paul Foster,PaulFoster,444,3626,python3,"class Solution:
    def smallestNumber(self, n: int, t: int) -> int:
        while True:
            if math.prod(int(i) for i in str(n)) % t == 0:
                return n
            n += 1",1447653208
Paul Foster,PaulFoster,444,3640,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        if k == 0 or numOperations == 0:
            return max(collections.Counter(nums).values())
        intervals = []
        for num in nums:
            intervals.append((num, 'b exact start'))
            intervals.append((num + 1, 'a exact stop'))
            intervals.append((num - k, 'c start'))
            intervals.append((num + k, 'd stop'))
        intervals.sort()
        # print(intervals)

        overlap = 0
        max_overlap = 0
        free = 0
        for num, event in intervals:
            if event == 'b exact start':
                free += 1
            if event == 'a exact stop':
                free -= 1
            if event == 'c start':
                overlap += 1

            valid_overlap = free + min(overlap - free, numOperations)
            max_overlap = max(max_overlap, valid_overlap)
            # print(f'{num=} {event=} {free=} {overlap=} {valid_overlap=}')
            
            if event == 'd stop':
                overlap -= 1
        return max_overlap",1447723752
Nisarg Patel,Nisarg_Pat,445,3622,java,"class Solution {
    public int maxFrequency(int[] nums, int k, int numOperations) {
        Arrays.sort(nums);
        int n = nums.length;
        int l = 0;
        int r = 0;
        int max = 0;
        Map<Integer, Integer> freq = new HashMap<>();
        int maxEle = 0;
        for(int num: nums) {
            freq.put(num, freq.getOrDefault(num, 0)+1);
            maxEle = Math.max(maxEle, num);
        }
        // Loop and update the window
        for(int i=0;i<=maxEle;i++) {
            while(nums[l]< i-k) {
                l++;
            }
            while(r<n && nums[r]<=i+k) {
                r++;
            }
            
            int f = freq.getOrDefault(i, 0);
            max = Math.max(max, f + Math.min(r-l-f, numOperations));
            // System.out.println(i+"" ""+l+"" ""+r+"" ""+max);
        }
        return max;
    }
}",1447716933
Nisarg Patel,Nisarg_Pat,445,3626,java,"class Solution {
    public int smallestNumber(int n, int t) {
        while(true) {
            if(digProd(n)%t == 0) {
                return n;
            }
            n++;
        }
    }

    private int digProd(int n) {
        int prod = 1;
        while(n>0) {
            prod *= n%10;
            n = n/10;
        }
        return prod;
    }
}",1447662396
Nisarg Patel,Nisarg_Pat,445,3640,java,"class Solution {
    public int maxFrequency(int[] nums, int k, int numOperations) {
        Arrays.sort(nums);
        int n = nums.length;
        int l = 0;
        int r = 0;
        int max = 0;
        Map<Integer, Integer> freq = new HashMap<>();
        for(int num: nums) {
            freq.put(num, freq.getOrDefault(num, 0)+1);
        }
        // Case when freq has to be taken care of. Thus looping though the array
        for(int i=0;i<n;i++) {
            while(nums[l]< nums[i]-k) {
                l++;
            }
            while(r<n && nums[r]<=nums[i]+k) {
                r++;
            }
            
            int f = freq.get(nums[i]);
            max = Math.max(max, f + Math.min(r-l-f, numOperations));
            // System.out.println(i+"" ""+l+"" ""+r+"" ""+max);
        }
        r = 0;
        // Case in which nums[i] is the first element in the group
        for(int i=0;i<n;i++) {
            while(r<n && nums[r]<=nums[i]+(2*k)) {
                r++;
            }
            int mid = nums[i] + k;
            
            int f = freq.getOrDefault(mid, 0);
            if(f == 0) {
                max = Math.max(max, Math.min(r-i, numOperations));
            }
        }
        return max;
    }
}",1447732352
Ankit Das,Ank717,446,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        map<int,int> freq;
        map<int,int> ops;
        for(int& num: nums){
            freq[num-k]++;
            freq[num+k+1]--;
            ops[num-k]++;
            ops[num]--;
            ops[num+1]++;
            ops[num+k+1]--;
        }
        int maxFreq=1,sumFreq=0,sumOps=0;
        for(auto it=ops.begin();it!=ops.end();it++){
            if(freq.count(it->first)){
                sumFreq+=freq[it->first];
            }
            sumOps+=it->second;
            if(sumOps<=numOperations){
                maxFreq=max(maxFreq,sumFreq);   
            }else{
                maxFreq=max(maxFreq,sumFreq+numOperations-sumOps); 
            }
        }
        return maxFreq;
    }
};",1447738289
Ankit Das,Ank717,446,3626,cpp,"class Solution {
public:
    int digitProduct(int a){
        int ans=1;
        while(a){
            ans*=(a%10);
            a/=10;
        }
        return ans;
    }

    int smallestNumber(int n, int t) {
        for(int i=n;;i++){
            if(digitProduct(i)%t==0){
                return i;
            }
        }
        return 0;
    }
};",1447659111
Ankit Das,Ank717,446,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        map<int,int> freq;
        map<int,int> ops;
        for(int& num: nums){
            freq[num-k]++;
            freq[num+k+1]--;
            ops[num-k]++;
            ops[num]--;
            ops[num+1]++;
            ops[num+k+1]--;
        }
        int maxFreq=1,sumFreq=0,sumOps=0;
        for(auto it=ops.begin();it!=ops.end();it++){
            if(freq.count(it->first)){
                sumFreq+=freq[it->first];
            }
            sumOps+=it->second;
            if(sumOps<=numOperations){
                maxFreq=max(maxFreq,sumFreq);   
            }else{
                maxFreq=max(maxFreq,sumFreq+numOperations-sumOps); 
            }
        }
        return maxFreq;
    }
};",1447740974
tr1nity,tr1nity,447,3622,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        n = len(nums)
        sn = sorted(nums)
        cnt = Counter(sn)
        v = []
        for x in sn:
            v.append((x - k, 1))
            v.append((x + k + 1, -1))
        v.sort()
        mx, cur = 0, 0
        for x in v: 
            _, t = x
            cur += t
            mx = max(mx, cur)
        res = 0
        l = 0
        for x in sorted(cnt.keys()):
            l, r = bisect.bisect_left(sn, x - k), bisect.bisect_right(sn, x + k) - 1
            res = max(res, cnt[x] + min(numOperations, r - l + 1 - cnt[x]))
        res = max(res, min(mx, numOperations))
        return res",1447747983
tr1nity,tr1nity,447,3626,python3,"class Solution:
    def smallestNumber(self, n: int, t: int) -> int:
        cur = n
        while True:
            p = 1
            for d in str(cur): p *= int(d)
            if p % t == 0: return cur
            cur += 1
        return cur",1447749353
tr1nity,tr1nity,447,3640,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        n = len(nums)
        sn = sorted(nums)
        cnt = Counter(sn)
        v = []
        for x in sn:
            v.append((x - k, 1))
            v.append((x + k + 1, -1))
        v.sort()
        mx, cur = 0, 0
        for x in v: 
            _, t = x
            cur += t
            mx = max(mx, cur)
        res = 0
        l = 0
        for x in sorted(cnt.keys()):
            l, r = bisect.bisect_left(sn, x - k), bisect.bisect_right(sn, x + k) - 1
            res = max(res, cnt[x] + min(numOperations, r - l + 1 - cnt[x]))
        res = max(res, min(mx, numOperations))
        return res",1447747604
Nishant Singh,nishant_7366,448,3622,cpp,"class Solution {
public:
    int binary(vector<pair<int,int>>&arr,int num)
{
    int lo=0;
    int hi=arr.size()-1;
    int ans=-1;

    while(lo<=hi)
        {
            int mid=(lo+hi)/2;
            if(arr[mid].first<num)
            {
                //ans=mid;
                lo=mid+1;
            }
            else if(arr[mid].first==num)
            {
                return mid;
            }
            else
            {
                ans=mid;
                hi=mid-1;
            }
        }
    return ans;
}
    int binarys(vector<pair<int,int>>&arr,int num)
{
    int lo=0;
    int hi=arr.size()-1;
    int ans=-1;
        //cout<<lo<<"" ""<<hi<<""\n"";
    while(lo<=hi)
        {
            int mid=(lo+hi)/2;
            //cout<<mid<<"" "";
            if(arr[mid].first<num)
            {
                ans=mid;
                lo=mid+1;
            }
            else if(arr[mid].first==num)
            {
                return mid;
            }
            else
            {
                hi=mid-1;
            }
        }
    //cout<<""\n"";
    
    return ans;
}
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        int n=nums.size();
        map<int,int> m,m1;
        multiset<int> s(nums.begin(),nums.end());
        for(int i=0;i<n;i++)
            {
                m[nums[i]-k]+=1;
                m[nums[i]+k+1]-=1;
                m1[nums[i]]++;
            }
        vector<pair<int,int>> arr;
        int sol=0;
        int curr=0;
        for(auto i:m)
            {
                curr+=i.second;
                sol=max(sol,min(curr,numOperations));
            }
        for(auto i:m1)
            arr.push_back({i.first,i.second});

        
        vector<int> freq(arr.size(),0);
        
        freq[0]=arr[0].second;
        
        for(int i=1;i<arr.size();i++)
            {
                freq[i]=freq[i-1]+arr[i].second;
            }
        // cout<<""this is arr"";
        // for(auto i:arr)
        //     {
        //         cout<<i.first<<"" ""<<i.second<<""\n"";
            // }
        for(auto i:m1)
            {
                int val=0;
                int pos=binarys(arr,i.first+k);
                //cout<<i.first+k<<"" "";
                //cout<<pos<<"" "";
                if(pos!=-1)
                {
                    val+=freq[pos];
                }
                //cout<<val<<"" "";
                pos=binary(arr,i.first-k);
                //cout<<pos<<"" "";
                if(pos!=0)
                {
                    val-=freq[pos-1];
                }
                //cout<<val<<""\n"";
                sol=max(sol,i.second+min(numOperations,val-i.second));
            }
        return sol;
    }
};",1447739570
Nishant Singh,nishant_7366,448,3626,cpp,"class Solution {
public:
    int p(int num)
{
    int sol=1;
    while(num)
        {
            sol=sol*(num%10);
            num=num/10;
        }
    return sol;
}
    int smallestNumber(int n, int t) {
        int val=n;
        while(true)
            {
                if(p(val)%t==0)
                    return val;
                val++;
            }
        return -1;
        
    }
};",1447655092
Nishant Singh,nishant_7366,448,3640,cpp,"class Solution {
public:
    int binary(vector<pair<int,int>>&arr,int num)
{
    int lo=0;
    int hi=arr.size()-1;
    int ans=-1;

    while(lo<=hi)
        {
            int mid=(lo+hi)/2;
            if(arr[mid].first<num)
            {
                //ans=mid;
                lo=mid+1;
            }
            else if(arr[mid].first==num)
            {
                return mid;
            }
            else
            {
                ans=mid;
                hi=mid-1;
            }
        }
    return ans;
}
    int binarys(vector<pair<int,int>>&arr,int num)
{
    int lo=0;
    int hi=arr.size()-1;
    int ans=-1;
        //cout<<lo<<"" ""<<hi<<""\n"";
    while(lo<=hi)
        {
            int mid=(lo+hi)/2;
            //cout<<mid<<"" "";
            if(arr[mid].first<num)
            {
                ans=mid;
                lo=mid+1;
            }
            else if(arr[mid].first==num)
            {
                return mid;
            }
            else
            {
                hi=mid-1;
            }
        }
    //cout<<""\n"";
    
    return ans;
}
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        int n=nums.size();
        map<int,int> m,m1;
        multiset<int> s(nums.begin(),nums.end());
        for(int i=0;i<n;i++)
            {
                m[nums[i]-k]+=1;
                m[nums[i]+k+1]-=1;
                m1[nums[i]]++;
            }
        vector<pair<int,int>> arr;
        int sol=0;
        int curr=0;
        for(auto i:m)
            {
                curr+=i.second;
                sol=max(sol,min(curr,numOperations));
            }
        for(auto i:m1)
            arr.push_back({i.first,i.second});

        
        vector<int> freq(arr.size(),0);
        
        freq[0]=arr[0].second;
        
        for(int i=1;i<arr.size();i++)
            {
                freq[i]=freq[i-1]+arr[i].second;
            }
        // cout<<""this is arr"";
        // for(auto i:arr)
        //     {
        //         cout<<i.first<<"" ""<<i.second<<""\n"";
            // }
        for(auto i:m1)
            {
                int val=0;
                int pos=binarys(arr,i.first+k);
                //cout<<i.first+k<<"" "";
                //cout<<pos<<"" "";
                if(pos!=-1)
                {
                    val+=freq[pos];
                }
                //cout<<val<<"" "";
                pos=binary(arr,i.first-k);
                //cout<<pos<<"" "";
                if(pos!=0)
                {
                    val-=freq[pos-1];
                }
                //cout<<val<<""\n"";
                sol=max(sol,i.second+min(numOperations,val-i.second));
            }
        return sol;
    }
};",1447741435
Zebra,dinar,449,3622,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        
        min_val = min(nums)
        max_val = max(nums)
        nums = [n + k - min_val for n in nums]
        c = Counter(nums)
        d = [0] * (max_val + 2*k - min_val + 2)
        for n in nums:
            d[n - k] += 1
            d[n + k + 1] -= 1
        cur_sum = 0
        ans = 0
        for i, val in enumerate(d):
            cur_sum += val
            x = min(cur_sum - c[i], numOperations) + c[i]
            ans = max(ans, x)
        return ans",1447719841
Zebra,dinar,449,3626,python3,"class Solution:
    def smallestNumber(self, n: int, t: int) -> int:
        def f(n):
            ans = 1
            while n:
                n, r = divmod(n, 10)
                ans *= r
            return ans
                
        
        while f(n) % t != 0:
            n += 1
        return n
            ",1447666678
Zebra,dinar,449,3640,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        
        min_val = min(nums)
        max_val = max(nums)
        nums = [n + k - min_val for n in nums]
        c = Counter(nums)

        d = dict()
        for n in nums:
            d[n - k] = d.get(n - k, 0) + 1
            d[n + k + 1] = d.get(n + k + 1, 0) - 1
        cur_sum = 0
        ans = 0
        prev = float('-inf')
        nums.sort(reverse=True)
        for key in sorted(d.keys()):
            val = d[key]
            while nums and nums[-1] < key:
                z = nums.pop()
                x = min(cur_sum - c[z], numOperations) + c[z]
                ans = max(ans, x)
            cur_sum += val
            ans = max(ans, min(cur_sum, numOperations))
        return ans",1447749824
sellie50759,sellie50759,450,3622,cpp,"class Solution {
public:
    typedef long long ll;
    int maxFrequency(vector<int>& nums, int k, int ops) {
        sort(nums.begin(), nums.end());
        map<int, int> mp;
        for(auto &num : nums)
            mp[num]++;
        
        int maxi = -1, maxx = -1;
        int cur = nums[0] + k;
        int n = nums.size();
        for(int i=0, j=0;i < n;i++){
            j = max(i, j);
            while(j<n && nums[j] - k <= cur)
                j++;
            
            if(maxx < j-i){
                maxx = j-i;
                maxi = i;
            }
            if(i != n-1)
                cur = nums[i+1] + k;
        }
        
        cur = nums[maxi] + k;
        int cnt = 0;
        for(int i = 0;i < n;i++){
            if(abs(cur - nums[i]) <= k)
                cnt++;
        }
        if(cnt <= ops)
            return maxx;
        
        nums.insert(nums.begin(), INT_MIN);
        nums.push_back(INT_MAX);
        n = nums.size();
        int ans = ops;
        for(int i=1, j=1, r = 1;r < n-1;r++){
            while(i < r && nums[i] + k < nums[r])
                i++;
            while(i>=0 && nums[i] + k >= nums[r])
                i--;
            while(j<n && nums[j] - k <= nums[r])
                j++;
            
            int l = j - i - 1 - mp[nums[r]];
            
            l = min(l, ops);
            ans = max(ans, mp[nums[r]] + l);
        }
        return ans;
    }
};",1447741761
sellie50759,sellie50759,450,3626,cpp,"class Solution {
public:
    int smallestNumber(int n, int t) {
        for(int i=n;;i++){
            int p = 1, val = i;
            while(val){
                p *= val%10;
                val /= 10;
            }
            if(p % t == 0)
                return i;
        }
    }
};",1447654678
sellie50759,sellie50759,450,3640,cpp,"class Solution {
public:
    typedef long long ll;
    int maxFrequency(vector<int>& nums, int k, int ops) {
        sort(nums.begin(), nums.end());
        map<int, int> mp;
        for(auto &num : nums)
            mp[num]++;
        
        int maxi = -1, maxx = -1;
        int cur = nums[0] + k;
        int n = nums.size();
        for(int i=0, j=0;i < n;i++){
            j = max(i, j);
            while(j<n && nums[j] - k <= cur)
                j++;
            
            if(maxx < j-i){
                maxx = j-i;
                maxi = i;
            }
            if(i != n-1)
                cur = nums[i+1] + k;
        }
        
        cur = nums[maxi] + k;
        int cnt = 0;
        for(int i = 0;i < n;i++){
            if(abs(cur - nums[i]) <= k)
                cnt++;
        }
        if(cnt <= ops)
            return maxx;
        
        nums.insert(nums.begin(), INT_MIN);
        nums.push_back(INT_MAX);
        n = nums.size();
        int ans = ops;
        for(int i=1, j=1, r = 1;r < n-1;r++){
            while(i < r && nums[i] + k < nums[r])
                i++;
            while(i>=0 && nums[i] + k >= nums[r])
                i--;
            while(j<n && nums[j] - k <= nums[r])
                j++;
            
            int l = j - i - 1 - mp[nums[r]];
            
            l = min(l, ops);
            ans = max(ans, mp[nums[r]] + l);
        }
        return ans;
    }
};",1447741315
Srinjoy Sengupta,srinjoy003,451,3622,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, ops: int) -> int:
        n = len(nums)
        count = defaultdict(int)
        eventList = []
        diffs = set()
        
        for num in nums:
            count[num] += 1
            eventList.append((num - k, 1))
            eventList.append((num + k + 1, -1))
        
        for e in eventList:
            diffs.add(e[0])
        for p in count:
            diffs.add(p)
        
        eventList.sort()
        
        i = 0
        overlap = 0
        res = 0
        uniqueDiffs = sorted(diffs)
        
        for t in uniqueDiffs:
            while i < len(eventList) and eventList[i][0] <= t:
                overlap += eventList[i][1]
                i += 1

            currCount = 0
            if t in count:
                currCount = count[t] 

            
            freq = currCount + min(ops, overlap - currCount)
            res = max(res, freq)
        
        return res
",1447741262
Srinjoy Sengupta,srinjoy003,451,3626,python3,"class Solution:
    def smallestNumber(self, n: int, t: int) -> int:

        curr = n
        
        while True:
            prod = 1
            for digit in str(curr):
                prod *= int(digit)

            if prod % t == 0:
                return curr

            curr += 1
        ",1447654350
Srinjoy Sengupta,srinjoy003,451,3640,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, ops: int) -> int:
        n = len(nums)
        count = defaultdict(int)
        eventList = []
        diffs = set()
        
        for num in nums:
            count[num] += 1
            eventList.append((num - k, 1))
            eventList.append((num + k + 1, -1))
        
        for e in eventList:
            diffs.add(e[0])
        for p in count:
            diffs.add(p)
        
        eventList.sort()
        
        i = 0
        overlap = 0
        res = 0
        uniqueDiffs = sorted(diffs)
        
        for t in uniqueDiffs:
            while i < len(eventList) and eventList[i][0] <= t:
                overlap += eventList[i][1]
                i += 1

            currCount = 0
            if t in count:
                currCount = count[t] 

            
            freq = currCount + min(ops, overlap - currCount)
            res = max(res, freq)
        
        return res
",1447741763
Hridyansh,Ridh123,452,3622,cpp,"class Solution {  
public:  
    int maxFrequency(vector<int>& a, int b, int c) {  
        int d = *max_element(a.begin(), a.end());  
        int e = d + b + 2;  
        vector<int> f(e, 0);  

        for (int g : a) {  
            f[g]++;  
        }  

        vector<int> h(e, 0);  
        h[0] = f[0];  
        for (int i = 1; i < e; i++) {  
            h[i] = h[i - 1] + f[i];  
        }  

        int j = 0;  
        for (int x = 0; x < e; x++) {  
            if (f[x] == 0 && c == 0) {  
                continue;  
            }  

            int l = max(0, x - b);  
            int r = min(e - 1, x + b);  
            int t = h[r] - (l > 0 ? h[l - 1] : 0);  
            int u = t - f[x];  
            int v = f[x] + min(c, u);  
            j = max(j, v);  
        }  

        return j;  
    }  
};",1447726372
Hridyansh,Ridh123,452,3626,cpp,"class Solution {  
public:  
    int helper(int n) {  
        int initiprod = 1;  
        while (n != 0) {  
            int r = n % 10;  
            initiprod = initiprod * r;  
            n = n / 10;  
        }  
        return initiprod;  
    }  
    
    int smallestNumber(int n, int t) {  
        while (true) {  
            int initiprod = helper(n);  
            if (initiprod % t == 0) {  
                return n;  
            }  
            n = n + 1;  
        }  
    }  
};",1447667637
Hridyansh,Ridh123,452,3640,csharp,"using System;
using System.Collections.Generic;
using System.Linq;

public class Solution {
    public int MaxFrequency(int[] n, int k, int o) {
        var c = new Dictionary<int, int>();
        var e = new List<(int, int)>();

        foreach (int x in n) {
            if (!c.ContainsKey(x)) {
                c[x] = 0;
            }
            c[x]++;
            e.Add((x - k, 1));
            e.Add((x + k + 1, -1));
        }

        var u = new SortedSet<int>();
        foreach (var t in e) {
            u.Add(t.Item1);
        }
        foreach (var p in c) {
            u.Add(p.Key);
        }

        e.Sort((a, b) => a.Item1.CompareTo(b.Item1));

        int i = 0, co = 0, mf = 0;

        foreach (int pt in u) {
            while (i < e.Count && e[i].Item1 <= pt) {
                co += e[i].Item2;
                i++;
            }

            int bc = c.ContainsKey(pt) ? c[pt] : 0;
            int f = bc + Math.Min(o, co - bc);
            mf = Math.Max(mf, f);
        }

        return mf;
    }
}
",1447741791
KumarHarsh1211,KumarHarsh1211,453,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        int maxVal = *max_element(nums.begin(), nums.end());
        int size = maxVal + k + 2;

        vector<int> count(size, 0);
        for (int num : nums) {
            count[num]++;
        }

        vector<int> cumulative(size, 0);
        cumulative[0] = count[0];
        for (int i = 1; i < size; ++i) {
            cumulative[i] = cumulative[i - 1] + count[i];
        }

        int maxFreq = 0;

        for (int val = 0; val < size; ++val) {
            if (count[val] == 0 && numOperations == 0) {
                continue;
            }

            int right = min(size - 1, val + k);
            int left = max(0, val - k);

            int totalInRange =
                cumulative[right] - (left > 0 ? cumulative[left - 1] : 0);
            int adjustmentPossible = totalInRange - count[val];

            int possibleFreq =
                count[val] + min(numOperations, adjustmentPossible);

            maxFreq = max(maxFreq, possibleFreq);
        }

        return maxFreq;
    }
};",1447725614
KumarHarsh1211,KumarHarsh1211,453,3626,cpp,"class Solution {
public:
    int digitProduct(int x) {
    int product = 1;
    while (x > 0) {
        int digit = x % 10;
        product *= digit;
        x /= 10;
    }
    return product;
}
    int smallestNumber(int n, int t) {
    while (true) {
        if (t == 0 || digitProduct(n) % t == 0) {
            return n;
        }
        n++;
    }
}
};",1447668262
KumarHarsh1211,KumarHarsh1211,453,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        unordered_map<int, int> frequency;
        vector<pair<int, int>> updates;

        for (int i = 0; i < nums.size(); ++i) {
            frequency[nums[i]]++;
            updates.push_back({nums[i] - k, 1});
            updates.push_back({nums[i] + k + 1, -1});
        }

        set<int> positions;
        for (const auto& update : updates) {
            positions.insert(update.first);
        }
        for (const auto& entry : frequency) {
            positions.insert(entry.first);
        }

        sort(updates.begin(), updates.end());

        int idx = 0, overlap = 0, result = 0, count = 0;

        for (int position : positions) {
            while (idx < updates.size() && updates[idx].first <= position) {
                overlap += updates[idx].second;
                idx++;
            }

            count = frequency.count(position) > 0 ? frequency[position] : 0;
            int freq = count + min(numOperations, overlap - count);
            result = max(result, freq);
        }

        return result;
    }
};",1447741814
Soumyadip Saha,decoder2025,454,3622,java,"class Solution {
    public int maxFrequency(int[] nums, int k, int numOperations) {
       return calculateAns(nums,k,numOperations);
    }

    private int calculateAns(int[] nums, int k, int numOperations) {
        long ans = 1;

        long[] cnt = new long[100001];
        long[] dp = new long[100001];

        for(int val : nums){
            dp[val] ++;
        }

        for(int i = 1; i < 100001; i++){
            cnt[i] = cnt[i - 1] + dp[i];
        }

        return calculateAns2(cnt,dp,k,numOperations,ans);
    }

    private int calculateAns2(long[] cnt, long[] dp, int k, int numOperations, long ans) {
        for(int i = 1; i < 100001; i++){
            long total = (cnt[Math.min(i + k , 100000)] - cnt[Math.max(1, i - k) - 1]) - dp[i];
            ans = Math.max(ans, dp[i] + Math.min(total, numOperations));
        }
        return (int) ans;
    }
}",1447701752
Soumyadip Saha,decoder2025,454,3626,java,"class Solution {
    public int smallestNumber(int n, int t) {
        for (int i = n; i>=0; i++) {
            if (isDiv(i,t)){
                return i;
            }
        }
        return -1;
    }
    static boolean isDiv(int n,int t){
        int prod=1;
        while (n>0){
            prod*=(n%10);
            n/=10;
        }
        return prod%t==0;
    }
}",1447660905
Soumyadip Saha,decoder2025,454,3640,java,"class Solution {
    public int maxFrequency(int[] nums, int k, int numOperations) {
        Map<Integer, Integer> freq = new HashMap<>();
        List<int[]> list = getEvents(nums, k, freq);
        Set<Integer> curr = collectPoints(list, freq);
        list.sort(Comparator.comparingInt(a -> a[0]));

        return calculateAns(list, curr, freq, numOperations);
    }

    private List<int[]> getEvents(int[] nums, int k, Map<Integer, Integer> freq) {
        List<int[]> list = new ArrayList<>();
        for (int num : nums) {
            freq.put(num, freq.getOrDefault(num, 0) + 1);
            list.add(new int[]{num - k, +1});
            list.add(new int[]{num + k + 1, -1});
        }
        return list;
    }

    private Set<Integer> collectPoints(List<int[]> list, Map<Integer, Integer> map) {
        Set<Integer> curr = new HashSet<>();
        for (int[] event : list) {
            curr.add(event[0]);
        }
        curr.addAll(map.keySet());
        return curr;
    }

    private int calculateAns(List<int[]> list, Set<Integer> curr, Map<Integer, Integer> map, int numOperations) {
        int i = 0;
        int sum = 0;
        int maxi = 0;
        for (int it : new TreeSet<>(curr)) {
            while (i < list.size() && list.get(i)[0] <= it) {
                sum += list.get(i)[1];
                i++;
            }
            maxi = Math.max(maxi, map.getOrDefault(it, 0) + Math.min(numOperations, sum - map.getOrDefault(it, 0)));
        }

        return maxi;
    }
}",1447750100
Ravi kumar jha,JMDcoder1,455,3622,cpp,"class Solution {
public:
    // Finding the last index where nums[index] <= val
    int index(long long val, vector<long long>& nums) {
        int n = nums.size();
        if (nums[n - 1] <= val) return n - 1;
        if (nums[0] > val) return -1;
        
        int start = 0, end = n - 1;
        while (start <= end) {
            int mid = (start + end) / 2;
            if (nums[mid] == val) {
                if (mid + 1 < n && nums[mid + 1] > val) return mid;
                start = mid + 1;
            } else if (nums[mid] > val) {
                if (mid - 1 >= 0 && nums[mid - 1] <= val) return mid - 1;
                end = mid - 1;
            } else {
                start = mid + 1;
            }
        }
        return start;
    }

    // Finding the first index where nums[index] >= val
    int index2(long long val, vector<long long>& nums) {
        int n = nums.size();
        int start = 0, end = n - 1;
        int result = -1;
        while (start <= end) {
            int mid = (start + end) / 2;
            if (nums[mid] >= val) {
                result = mid;
                end = mid - 1;
            } else {
                start = mid + 1;
            }
        }
        return result;
    }

    // Function to find the maximum frequency within the given conditions
    int maxFrequency(vector<int>& nums, int k, int nn) {
        int ans = 1;
        sort(nums.begin(), nums.end());
        
        // Converting vector<int> to vector<long long> for safe calculations
        vector<long long> numsLL(nums.begin(), nums.end());
        unordered_map<long long, int> count;
        
        long long maxx = 0;
        for (auto a : numsLL) {
            maxx = max(maxx, a);
            count[a]++;
        }
        
        for (long long i = 0; i <= maxx; i++) {
            int ind1 = index(i + k, numsLL);
            int ind2 = index2(i - k, numsLL);
            
            if (ind1 != -1 && ind2 != -1) {
                int res = ind1 - ind2 + 1;
                res -= count[i];
                ans = max(min(res, nn) + count[i], ans);
            }
        }
        return ans;
    }
};
",1447736934
Ravi kumar jha,JMDcoder1,455,3626,cpp,"class Solution {
private:
    int check(int num) {
        int ans = 1;
        while(num) {
            int rem = num % 10;
            ans *= (rem);
            num /= 10;
        }
        return ans;
    }
public:
    int smallestNumber(int n, int t) {
        int ans = 1, num = n;;
        while(true) {
            if(check(num)%t==0) {
                return num;
            }
            num++;
        }
        return -1;
    }
};",1447689988
Ravi kumar jha,JMDcoder1,455,3640,cpp,"class Solution {
public:
    int index(long long val, vector<long long>& nums) {
        int n = nums.size();
        if (nums[n - 1] <= val) return n - 1;
        if (nums[0] > val) return -1;

        int start = 0, end = n - 1;
        while (start <= end) {
            int mid = (start + end) / 2;
            if (nums[mid] == val) {
                if (mid + 1 < n && nums[mid + 1] > val) return mid;
                start = mid + 1;
            } else if (nums[mid] > val) {
                if (mid - 1 >= 0 && nums[mid - 1] <= val) return mid - 1;
                end = mid - 1;
            } else {
                start = mid + 1;
            }
        }
        return start;
    }

    int index2(long long val, vector<long long>& nums) {
        int n = nums.size();
        int start = 0, end = n - 1;
        int result = -1;
        while (start <= end) {
            int mid = (start + end) / 2;
            if (nums[mid] >= val) {
                result = mid;
                end = mid - 1;
            } else {
                start = mid + 1;
            }
        }
        return result;
    }

    int maxFrequency(vector<int>& nums, int k, int nn) {
        int ans = 1;
        sort(nums.begin(), nums.end());

        vector<long long> numsLL(nums.begin(), nums.end());
        unordered_map<long long, int> count;
        int n = numsLL.size();

        for (auto a : numsLL) count[a]++;

        for (int i = 0; i < n; i++) {
            long long num = numsLL[i];
            int ind1 = index(num + k, numsLL);
            int ind2 = index2(num - k, numsLL);
            int ind3 = index2(num - 2 * k, numsLL);

            ans = max(ans, min(i - ind3 + 1, nn));

            if (ind1 != -1 && ind2 != -1) {
                int res = ind1 - ind2 + 1;
                res -= count[num];
                ans = max(min(res, nn) + count[num], ans);
            }
        }
        return ans;
    }
};
",1447758208
Karan Chhillar,karan2310c,456,3622,cpp,"class Solution {
public:
    int upLimit(int num, int &k , vector<int> &arr){
        int left = 0 , right = arr.size() - 1;
        int mid = (left + right)/2;

        int ans = arr.size()-1;

        while(left <= right){
            mid = (left + right)/2;
            // if(arr[mid] <= num  || (arr[mid] - k) <= num){
            if((arr[mid] - k) <= num){
                ans = mid;
                left = mid+1;
            }
            else right = mid - 1;
        }

        return ans;
    }
    int downLimit(int num, int &k , vector<int> &arr){
        int left = 0 , right = arr.size() - 1;
        int mid = (left + right)/2;

        int ans = 0;

        while(left <= right){
            mid = (left + right)/2;

            if((arr[mid] + k) >= num){
                ans = mid;
                right = mid - 1;
            }
            else left = mid + 1;
        }

        return ans;
    }
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        sort(nums.begin() , nums.end());

        map<int , int> m;

        int n = nums.size();
        for(int i = 0 ; i < n ; i++) m[nums[i]]++;

        // return downLimit(20 , k , nums);

        int ans = 1;

        for(auto i : m){
            int num = i.first;
            int freq = i.second;

            int up = upLimit(num , k , nums);
            int down = downLimit(num , k , nums);

            int allNum = up - down + 1 - freq;

            ans = max(ans , freq + min(allNum , numOperations));
        }

        for(auto i : nums){
            int num = i + k;

            int up = upLimit(num , k , nums);
            int down = downLimit(num , k , nums);

            int allNum = up - down + 1;

            ans = max(ans , min(allNum , numOperations));
        }

        return ans;
    }
};",1447743484
Karan Chhillar,karan2310c,456,3626,cpp,"class Solution {
public:
    int smallestNumber(int n, int t) {
        for(int i = n ; i < 1e5 ; i++) {
            int num = i;
            int prod = 1;
            while(num){
                prod *= (num%10);
                num /= 10;
            }

            if((prod % t) == 0) return i;
        }

        return -1;
    }
};",1447658759
Karan Chhillar,karan2310c,456,3640,cpp,"class Solution {
public:
    int upLimit(int num, int &k , vector<int> &arr){
        int left = 0 , right = arr.size() - 1;
        int mid = (left + right)/2;

        int ans = arr.size()-1;

        while(left <= right){
            mid = (left + right)/2;
            // if(arr[mid] <= num  || (arr[mid] - k) <= num){
            if((arr[mid] - k) <= num){
                ans = mid;
                left = mid+1;
            }
            else right = mid - 1;
        }

        return ans;
    }
    int downLimit(int num, int &k , vector<int> &arr){
        int left = 0 , right = arr.size() - 1;
        int mid = (left + right)/2;

        int ans = 0;

        while(left <= right){
            mid = (left + right)/2;

            if((arr[mid] + k) >= num){
                ans = mid;
                right = mid - 1;
            }
            else left = mid + 1;
        }

        return ans;
    }
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        sort(nums.begin() , nums.end());

        map<int , int> m;

        int n = nums.size();
        for(int i = 0 ; i < n ; i++) m[nums[i]]++;

        // return downLimit(20 , k , nums);

        int ans = 1;

        for(auto i : m){
            int num = i.first;
            int freq = i.second;

            int up = upLimit(num , k , nums);
            int down = downLimit(num , k , nums);

            int allNum = up - down + 1 - freq;

            ans = max(ans , freq + min(allNum , numOperations));
        }

        for(auto i : nums){
            int num = i + k;

            int up = upLimit(num , k , nums);
            int down = downLimit(num , k , nums);

            int allNum = up - down + 1;

            ans = max(ans , min(allNum , numOperations));
        }

        return ans;
    }
};",1447750275
Shivam Verma,verma_shivam,457,3622,java,"class Solution {
   

    private int getMaxElementValue(int[] nums) {
        int maxElementValue = 0;
        for (int num : nums) {
            maxElementValue = Math.max(maxElementValue, num);
        }
        return maxElementValue;
    }
 public int maxFrequency(int[] nums, int k, int numOperations) {
        int maxElementValue = getMaxElementValue(nums);
        int arraySize = maxElementValue + k + 2;
        int[] elementFrequency = getElementFrequency(nums, arraySize);
        int[] prefixSumArray = getPrefixSumArray(elementFrequency, arraySize);
        return getMaximumFrequency(elementFrequency, prefixSumArray, k, numOperations, arraySize);
    }
    private int[] getElementFrequency(int[] nums, int arraySize) {
        int[] elementFrequency = new int[arraySize];
        for (int num : nums) {
            elementFrequency[num]++;
        }
        return elementFrequency;
    }

    private int[] getPrefixSumArray(int[] elementFrequency, int arraySize) {
        int[] prefixSumArray = new int[arraySize];
        prefixSumArray[0] = elementFrequency[0];
        for (int i = 1; i < arraySize; i++) {
            prefixSumArray[i] = prefixSumArray[i - 1] + elementFrequency[i];
        }
        return prefixSumArray;
    }

    private int getMaximumFrequency(int[] elementFrequency, int[] prefixSumArray, int k, int numOperations, int arraySize) {
        int maximumFrequency = 0;
        for (int targetElement = 0; targetElement < arraySize; targetElement++) {
            if (elementFrequency[targetElement] == 0 && numOperations == 0) {
                continue;
            }

            int lowerBound = Math.max(0, targetElement - k);
            int upperBound = Math.min(arraySize - 1, targetElement + k);
            int rangeElementCount = prefixSumArray[upperBound] - (lowerBound > 0 ? prefixSumArray[lowerBound - 1] : 0);
            int requiredAdjustments = rangeElementCount - elementFrequency[targetElement];
            int achievableFrequency = elementFrequency[targetElement] + Math.min(numOperations, requiredAdjustments);
            maximumFrequency = Math.max(maximumFrequency, achievableFrequency);
        }
        return maximumFrequency;
    }
}
",1447711741
Shivam Verma,verma_shivam,457,3626,java,"class Solution {
    private boolean isProductDivisibleByFactor(int product, int factor) {
        return product % factor == 0;
    }

    public int smallestNumber(int initialValue, int factor) {
        while (true) {
            if (isDivisibleByFactor(initialValue, factor)) {
                return initialValue;
            }
            initialValue++;
        }
    }

    private int calculateDigitProduct(int number) {
        int product = 1;
        while (number > 0) {
            product *= number % 10;
            number /= 10;
        }
        return product;
    }

    private boolean isDivisibleByFactor(int number, int factor) {
        int product = calculateDigitProduct(number);
        return isProductDivisibleByFactor(product, factor);
    }
}
",1447659024
Shivam Verma,verma_shivam,457,3640,java,"import java.util.*;

class Solution {
    public int maxFrequency(int[] numbers, int delta, int maxOperations) {
        Map<Integer, Integer> occurrenceMap = new HashMap<>();
        List<int[]> changePoints = createChangePoints(numbers, delta, occurrenceMap);
        Set<Integer> uniquePoints = collectUniquePoints(changePoints, occurrenceMap);
        
        List<Integer> sortedUniquePoints = new ArrayList<>(uniquePoints);
        Collections.sort(sortedUniquePoints);
        
        return calculateMaxFrequency(changePoints, sortedUniquePoints, occurrenceMap, maxOperations);
    }
    
    private int calculateMaxFrequency(List<int[]> changePoints, List<Integer> sortedPoints, Map<Integer, Integer> occurrenceMap, int maxOperations) {
        Collections.sort(changePoints, Comparator.comparingInt(c -> c[0]));
        
        int changePointer = 0;
        int overlapCount = 0;
        int maxFrequency = 0;
        
        for (int point : sortedPoints) {
            while (changePointer < changePoints.size() && changePoints.get(changePointer)[0] <= point) {
                overlapCount += changePoints.get(changePointer)[1];
                changePointer++;
            }
            
int currentCount = occurrenceMap.getOrDefault(point, 0);
            int possibleMaxFreq = currentCount + Math.min(maxOperations, overlapCount - currentCount);
            maxFrequency = Math.max(maxFrequency, possibleMaxFreq);
        }
        
return maxFrequency;
    }

    private Set<Integer> collectUniquePoints(List<int[]> changePoints, Map<Integer, Integer> occurrenceMap) {
        Set<Integer> points = new HashSet<>();
        for (int[] change : changePoints) {
            points.add(change[0]);
        }
        points.addAll(occurrenceMap.keySet());
        return points;
    }

    private List<int[]> createChangePoints(int[] numbers, int delta, Map<Integer, Integer> occurrenceMap) {
        List<int[]> changePoints = new ArrayList<>();
        for (int number : numbers) {
            occurrenceMap.put(number, occurrenceMap.getOrDefault(number, 0) + 1);
            changePoints.add(new int[]{number - delta, 1});
            changePoints.add(new int[]{number + delta + 1, -1});
        }
        return changePoints;
    }
}
",1447750391
IsaacHuang,IsaacHuang,458,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        sort(nums.begin(), nums.end());
        unordered_map<int, int> freqs;
        for(int num: nums) freqs[num] ++;
        int ans = 0;
        int l = 0, r = 0;
        for(int l = 0, m = 0, r = 0; m < nums.size(); m++){
            int val = nums[m];
            if(m > 0 && nums[m-1] == val) continue;
            int freqM = freqs[val];
            while(l < m && nums[l] + k < val) l++;
            while(l + numOperations < m) l++;
            r = max(r, m);
            while(r < nums.size() && nums[r] - k <= val && r < l + numOperations + freqM) r++;
            printf(""%d %d %d\n"", l, m, r);
            ans = max(ans, r - l);
        }
        for(int l = 0, r = 0; l < nums.size() && r < nums.size(); l++){
            while(r < nums.size() && r - l < numOperations && nums[r] - nums[l] <= 2 * k){
                r++;
            }
            ans = max(ans, r - l);
        }
        return ans;
        
    }
};",1447748986
IsaacHuang,IsaacHuang,458,3626,cpp,"class Solution {
public:
    int getProductOfDigits(int n){
        int product = 1;
        while(n){
            product *= n % 10;
            n /= 10;
        }
        return product;
    }
    int smallestNumber(int n, int t) {
        for(int i = n; i < 10000; i++){
            if(getProductOfDigits(i) % t == 0) return i;
        }
        return -1;
    }
};",1447654398
IsaacHuang,IsaacHuang,458,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        sort(nums.begin(), nums.end());
        unordered_map<int, int> freqs;
        for(int num: nums) freqs[num] ++;
        int ans = 0;
        int l = 0, r = 0;
        for(int l = 0, m = 0, r = 0; m < nums.size(); m++){
            int val = nums[m];
            if(m > 0 && nums[m-1] == val) continue;
            int freqM = freqs[val];
            while(l < m && nums[l] + k < val) l++;
            while(l + numOperations < m) l++;
            r = max(r, m);
            while(r < nums.size() && nums[r] - k <= val && r < l + numOperations + freqM) r++;
            ans = max(ans, r - l);
        }
        for(int l = 0, r = 0; l < nums.size() && r < nums.size(); l++){
            while(r < nums.size() && r - l < numOperations && nums[r] - nums[l] <= 2 * k){
                r++;
            }
            ans = max(ans, r - l);
        }
        return ans;
    }
};",1447750425
Abhimanyu,abhimanyuparmar111,459,3622,java,"class Solution {
    public int maxFrequency(int[] nums, int k, int numOperations) {
        int n = nums.length;
        HashMap<Integer, Integer> h = new HashMap<>();
        for(int d: nums) {
            h.put(d, h.getOrDefault(d, 0) +1);
        }
        //HashSet<Integer> vis = new HashSet<>();
        int max = 0;
        Arrays.sort(nums);
        for(int x = nums[0];x<=nums[n-1];x++) {
            //int x = nums[i];
            //if(vis.contains(x)) continue;
            int left = ceil(nums,n, x - k);
            int right = floor(nums, n, x+k);
            //if(x == 53) System.out.println(left + "" "" + right);
            int total = right - left+1;
            int contender = total - h.getOrDefault(x, 0);
            //if(x == 1) System.out.println(contender + "" "" + numOperations);
            int val = Math.min(contender,numOperations) + h.getOrDefault(x, 0);
            //System.out.println(val + ""  sdsd"" + x);
            if(max < val) {
                max = val;
            }
            //vis.add(x);
        }
        return max;
    }

    public int ceil(int[] nums, int n, int target) {
        if(nums[0] >=target) return 0;
        int l = 0;
        int r = n-1;
        int ans = r;
        while(l<=r) {
            int m =l + (r-l)/2;
            if(nums[m] >=target) {
                ans = m;
                r = m-1;
            } else {
                l = m+1;
            }
        }
        return ans;
    }

    public int floor(int[] nums, int n, int target) {
        int l = 0;
        int r = n-1;
        if(nums[r] <=target) return r;
        
        int ans = l;
        while(l<=r) {
            int m =l + (r-l)/2;
            if(nums[m] <=target) {
                ans = m;
                l = m+1;
            } else {
                r = m-1;
            }
        }
        return ans;
    }
}",1447704553
Abhimanyu,abhimanyuparmar111,459,3626,java,"class Solution {
    public int smallestNumber(int n, int t) {
        while(n<1000) {
            int prod = product(n);
            if(prod%t ==0) return n;
            n++;
        }
        return -1;
    }

    public int product(int i) {
        int res  =1;
        while(i>0) {
            res = res*(i%10);
            i = i/10;
        }
        return res;
    }
}",1447657390
Abhimanyu,abhimanyuparmar111,459,3640,java,"class Solution {
    public int maxFrequency(int[] nums, int k, int numOperations) {
        int n = nums.length;
        HashMap<Integer, Integer> h = new HashMap<>();
        for(int d: nums) {
            h.put(d, h.getOrDefault(d, 0) +1);
        }
        Arrays.sort(nums);
        //HashSet<Integer> vis = new HashSet<>();
        int max = straightForward(nums, k ,numOperations);
        //Window Sizes of 2k bana lo 
        int i = 0;
        int j = 0;
        while(j < n && nums[j] - nums[i]<= (long)2*k) {
            long diff = nums[j] - nums[i];
            int middle = nums[i] + (int)(diff/2);

            int total = j-i+1;
            int contender = total - h.getOrDefault(middle, 0);

            int val = Math.min(contender,numOperations) + h.getOrDefault(middle, 0);
            if(max < val) {
                max = val;
            }
            j++;
            if(j == n) break;
        }
        i++;
        while(j<n) {
            while(j < n && nums[j] - nums[i]<= (long)2*k) {
                long diff = nums[j] - nums[i];
                int middle = nums[i] + (int)(diff/2);
    
                int total = j-i+1;
                int contender = total - h.getOrDefault(middle, 0);
    
                int val = Math.min(contender,numOperations) + h.getOrDefault(middle, 0);
                if(max < val) {
                    max = val;
                }
                j++;
                if(j == n) break;
            }
            i++;
        }
        
        // for(int x = nums[0];x<=nums[n-1];x++) {
        //     //int x = nums[i];
        //     //if(vis.contains(x)) continue;
        //     int left = ceil(nums,n, x - k);
        //     int right = floor(nums, n, x+k);
        //     //if(x == 53) System.out.println(left + "" "" + right);
        //     int total = right - left+1;
        //     int contender = total - h.getOrDefault(x, 0);
        //     //if(x == 1) System.out.println(contender + "" "" + numOperations);
        //     int val = Math.min(contender,numOperations) + h.getOrDefault(x, 0);
        //     //System.out.println(val + ""  sdsd"" + x);
        //     if(max < val) {
        //         max = val;
        //     }
        //     //vis.add(x);
        // }
        return max;
    }

    // public int ceil(int[] nums, int n, int target) {
    //     if(nums[0] >=target) return 0;
    //     int l = 0;
    //     int r = n-1;
    //     int ans = r;
    //     while(l<=r) {
    //         int m =l + (r-l)/2;
    //         if(nums[m] >=target) {
    //             ans = m;
    //             r = m-1;
    //         } else {
    //             l = m+1;
    //         }
    //     }
    //     return ans;
    // }

    // public int floor(int[] nums, int n, int target) {
    //     int l = 0;
    //     int r = n-1;
    //     if(nums[r] <=target) return r;
        
    //     int ans = l;
    //     while(l<=r) {
    //         int m =l + (r-l)/2;
    //         if(nums[m] <=target) {
    //             ans = m;
    //             l = m+1;
    //         } else {
    //             r = m-1;
    //         }
    //     }
    //     return ans;
    // }

    public int straightForward(int[] nums, int k, int numOperations) {
        int n = nums.length;
        HashMap<Integer, Integer> h = new HashMap<>();
        for(int d: nums) {
            h.put(d, h.getOrDefault(d, 0) +1);
        }
        HashSet<Integer> vis = new HashSet<>();
        int max = 0;
        for(int i = 0;i<n;i++) {
            int x = nums[i];
            if(vis.contains(x)) continue;
            int left = ceil(nums,0, i, x - k);
            int right = floor(nums, i,n-1, x+k);
            //if(x == 1) System.out.println(left + "" "" + right);
            int total = right - left+1;
            int contender = total - h.get(x);
            //if(x == 1) System.out.println(contender + "" "" + numOperations);
            int val = Math.min(contender,numOperations) + h.get(x);
            //System.out.println(val + ""  sdsd"" + x);
            if(max < val) {
                max = val;
            }
            vis.add(x);
        }
        return max;
    }

    public int ceil(int[] nums, int l, int r, int target) {
        if(nums[0] >=target) return 0;
        int ans = r;
        while(l<=r) {
            int m =l + (r-l)/2;
            if(nums[m] >=target) {
                ans = m;
                r = m-1;
            } else {
                l = m+1;
            }
        }
        return ans;
    }

    public int floor(int[] nums, int l, int r, int target) {
        if(nums[r] <=target) return r;
        int ans = l;
        while(l<=r) {
            int m =l + (r-l)/2;
            if(nums[m] <=target) {
                ans = m;
                l = m+1;
            } else {
                r = m-1;
            }
        }
        return ans;
    }
}",1447742309
Vedanta Mohapatra,swo0sh,460,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        const int aconst = 1e5, sz = 3e5 + 10;
        int cum[sz], freq[sz];
        memset(cum, 0, sizeof(cum));
        memset(freq, 0, sizeof(freq));
        for (int i = 0; i < nums.size(); i++) {
            cum[nums[i] - k + aconst]++;
            cum[nums[i] + k + 1 + aconst]--;
            freq[nums[i] + aconst]++;
        }
        for (int i = 1; i < sz; i++) {
            cum[i] = cum[i] + cum[i - 1];
        }
        int mx = 0;
        for (int i = 0; i < sz; i++) {
            mx = max(mx, min(cum[i] - freq[i], numOperations) + freq[i]);
        }
        return mx;
    }
};",1447709143
Vedanta Mohapatra,swo0sh,460,3626,cpp,"class Solution {
public:
    int smallestNumber(int n, int t) {
        for (int i = n; i < 1e5; i++) {
            int x = i;
            int prod = 1;
            while (x > 0) {
                prod *= (x % 10);
                x /= 10;
            }
            if (prod % t == 0) return i;
        }
        return 1e5;
    }
};",1447656887
Vedanta Mohapatra,swo0sh,460,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        const int n = nums.size();
        map<int, int> mpp, freq;
        for (int i = 0; i < n; i++) {
            mpp[nums[i] - k]++;
            mpp[nums[i] + k + 1]--;
            freq[nums[i]]++;
        }
        int lb = -2e9, curr = 0, mx = 0;
        for (auto &[k, v]: mpp) {
            int ub = k - 1;
            auto start = freq.lower_bound(lb);
            auto end = freq.upper_bound(ub);
            int mx_freq = 0;
            for (auto it = start; it != end; ++it) {
                mx_freq = max(mx_freq, it->second);
            }
            mx = max(mx, min(curr - mx_freq, numOperations) + mx_freq);
            curr += v;
            lb = k;
        }
        return mx;
    }
};",1447742459
Chris Ho,Chris_ho,461,3622,python3,"from collections import Counter
from bisect import bisect_left, bisect_right

class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        nums.sort()
        freq = Counter(nums)
        possible_x_values = set()

        for num in nums:
            possible_x_values.add(num)
            possible_x_values.add(num - k)
            possible_x_values.add(num + k)

        max_freq = 0

        for x in possible_x_values:
            c1 = freq[x] if x in freq else 0

            left = bisect_left(nums, x - k)
            right = bisect_right(nums, x + k)
            total_in_range = right - left

            c2 = total_in_range - c1  

            freq_x = c1 + min(c2, numOperations)
            max_freq = max(max_freq, freq_x)

        return max_freq",1447720124
Chris Ho,Chris_ho,461,3626,python3,"class Solution:
    def smallestNumber(self, n: int, t: int) -> int:

        while True:
            p = prod(int(x) for x in str(n))
            if p%t==0:
                return n
            else:
                n+=1
        return None
        
        ",1447654098
Chris Ho,Chris_ho,461,3640,python3,"from collections import Counter
from bisect import bisect_left, bisect_right

class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        nums.sort()
        freq = Counter(nums)
        possible_x_values = set()

        for num in nums:
            possible_x_values.add(num)
            possible_x_values.add(num - k)
            possible_x_values.add(num + k)

        max_freq = 0

        for x in possible_x_values:
            c1 = freq[x] if x in freq else 0

            left = bisect_left(nums, x - k)
            right = bisect_right(nums, x + k)
            total_in_range = right - left

            c2 = total_in_range - c1  

            freq_x = c1 + min(c2, numOperations)
            max_freq = max(max_freq, freq_x)

        return max_freq",1447725517
Saksham Kankani,Saksham10009,462,3622,cpp,"class Solution {
public:
    int maxFrequency(std::vector<int>& numbers, int maxRange,
                         int maxOperations) {
        int length = numbers.size();
        unordered_map<int, int> frequencyCount;
        vector<int> starts, ends;

        for (int num : numbers) {
            frequencyCount[num]++;
            starts.push_back(num - maxRange);
            ends.push_back(num + maxRange);
        }

        set<int> uniquePositions;
        for (int val : starts)
            uniquePositions.insert(val);
        for (int val : ends)
            uniquePositions.insert(val);
        for (const auto& item : frequencyCount)
            uniquePositions.insert(item.first);

        sort(starts.begin(), starts.end());
        sort(ends.begin(), ends.end());

        int maxFrequencyAchieved = 0;
        int activeOverlap = 0;
        int startIdx = 0, endIdx = 0;

        for (int position : uniquePositions) {

            while (startIdx < starts.size() && starts[startIdx] <= position) {
                activeOverlap++;
                startIdx++;
            }

            while (endIdx < ends.size() && ends[endIdx] < position) {
                activeOverlap--;
                endIdx++;
            }

            int currentFrequency =
                frequencyCount.count(position) ? frequencyCount[position] : 0;

            int achievableFrequency =
                currentFrequency +
                std::min(maxOperations, activeOverlap - currentFrequency);
            maxFrequencyAchieved =
                std::max(maxFrequencyAchieved, achievableFrequency);
        }

        return maxFrequencyAchieved;
    }
};",1447734191
Saksham Kankani,Saksham10009,462,3626,cpp,"class Solution {
public:


    int func(int x,int t){
        int d=x;
        int prod=1;
        while(d!=0)
            {
               prod=prod*(d%10);
                d=d/10;
            }
        if(prod%t==0)
            return true;
        return false;
    }
    int smallestNumber(int n, int t) {   

        bool ans=false;
        int res=1;
        while(true)
            {
                bool ans=func(n,t);
                if(ans==true)
                {
                    res=n;
                    break;
                }
                n+=1;
            }
        return res;
}
};",1447661481
Saksham Kankani,Saksham10009,462,3640,cpp,"class Solution {
public:
    int maxFrequency(std::vector<int>& numbers, int maxRange,
                         int maxOperations) {
        int length = numbers.size();
        unordered_map<int, int> frequencyCount;
        vector<int> starts, ends;

        for (int num : numbers) {
            frequencyCount[num]++;
            starts.push_back(num - maxRange);
            ends.push_back(num + maxRange);
        }

        set<int> uniquePositions;
        for (int val : starts)
            uniquePositions.insert(val);
        for (int val : ends)
            uniquePositions.insert(val);
        for (const auto& item : frequencyCount)
            uniquePositions.insert(item.first);

        sort(starts.begin(), starts.end());
        sort(ends.begin(), ends.end());

        int maxFrequencyAchieved = 0;
        int activeOverlap = 0;
        int startIdx = 0, endIdx = 0;

        for (int position : uniquePositions) {

            while (startIdx < starts.size() && starts[startIdx] <= position) {
                activeOverlap++;
                startIdx++;
            }

            while (endIdx < ends.size() && ends[endIdx] < position) {
                activeOverlap--;
                endIdx++;
            }

            int currentFrequency =
                frequencyCount.count(position) ? frequencyCount[position] : 0;

            int achievableFrequency =
                currentFrequency +
                std::min(maxOperations, activeOverlap - currentFrequency);
            maxFrequencyAchieved =
                std::max(maxFrequencyAchieved, achievableFrequency);
        }

        return maxFrequencyAchieved;
    }
};",1447733580
e7F9OC79Eg,e7F9OC79Eg,463,3622,cpp,"#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
namespace __gnu_pbds{
typedef tree<int,
null_type,
less_equal<int>,
rb_tree_tag,
tree_order_statistics_node_update> ordered_set;
}
using namespace __gnu_pbds;

/*
 
 This is ORDERED_MULTISET
 Functions :-
 s.insert(x)
 s.order_of_key(x) // #v s/t v < x
 s.find_by_order(x) // iterator to the kth element
 
 */

class Solution {
public:
    int maxFrequency(vector<int>& v, int k, int op) 
    {
        
        int n = v.size();
        map<int,int> mp; 
        sort(v.begin(),v.end());
        
        ordered_set os;
        
        for(auto &x:v) 
        {
            mp[x]++;
            os.insert(x);
        }
        
        int l = (v[0] - k), r = v[n-1] + k;
        
        auto f = [&](int md) -> int {
          

//             int cnt = 0;
//             int xtra = mp[ md ];
//             for(auto &x:v) {
//                 if( md >= x-k && md <= x+k && md!=x) cnt++;
//                 xtra += (x == md);
//             }
            
            int cnt = os.order_of_key( md+k +1) - os.order_of_key(md-k) - mp[md];
            
            return min(op,cnt) + mp[md];
        };
        
        int ans = 0;
        for(int i=l;i<=r;i++)
        {
            ans= max(ans, f(i) ); //  << "" "";
        }
        
        // cout << ""\n"";
//         return 0;
        
        // while(l+1<r)
        // {
        //     int md = (r-l)/2 + l;
        //     if( f(md+1) > f(md) ) l = md;
        //     else r = md;
        //     cout << l << "" "" << r << ""| \n"";
        // }
        
        // int ans = max( f(l) , f(r) );
        return ans;
    }
};",1447692025
e7F9OC79Eg,e7F9OC79Eg,463,3626,cpp,"class Solution {
public:
    int smallestNumber(int n, int t) {
        
        while(1)
        {
            
            int k = n;
            int p = 1;
            while(k)
            {
                int b = k%10;
                p *= b;
                k/=10;
            }
            
            if(p % t == 0) return n;
            n++;
        }
        return -1;
    }
};",1447653487
e7F9OC79Eg,e7F9OC79Eg,463,3640,cpp,"#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
namespace __gnu_pbds{
typedef tree<int,
null_type,
less_equal<int>,
rb_tree_tag,
tree_order_statistics_node_update> ordered_set;
}
using namespace __gnu_pbds;

/*
 
 This is ORDERED_MULTISET
 Functions :-
 s.insert(x)
 s.order_of_key(x) // #v s/t v < x
 s.find_by_order(x) // iterator to the kth element
 
 */



class Solution {
public:
    int maxFrequency(vector<int>& v, int k, int op) 
    {
        map<int,int> mp;
        map<int,int> og;
        for(auto &x:v) {
            mp[x-k]++;
            mp[x+k+1]--;
            og[x]++;
        }
        
        map<int,int> pre;
        int sm = 0;
        
        for(auto &[f,s]:mp)
        {
            sm += s;
            pre[f] = sm;
        }
        
        int ans = 0;
        for(auto &[f,s]:pre) 
        {
            int peopleReached = s - og[f];
            peopleReached = min( peopleReached , op);
            
            ans = max(ans, peopleReached + og[f]);
        }
        
        
        int n = v.size();
        ordered_set os;
        
        for(auto &x:v) os.insert(x);
        auto f = [&](int md) -> int {
            int cnt = os.order_of_key( md+k +1) - os.order_of_key(md-k) - og[md];   
            return min(op,cnt) + og[md];
        };
        
        for(auto &i:v) ans= max( ans, f(i) );
        
        return ans;
    }
};",1447742711
Harsh Porwal,harshporwal033,464,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int n) {
        sort(nums.begin(),nums.end());
        map <int,int> mp;
        for(auto it : nums){
            mp[it]++;
        }
        int ans = 0;
        int maxi = *max_element(nums.begin(),nums.end());
        for(int i = 1; i<=maxi; i++){
            int l = lower_bound(nums.begin(),nums.end(),i-k)-nums.begin();
            int r = upper_bound(nums.begin(),nums.end(),i+k)-nums.begin();
            int cnt = r-l-mp[i];
            //cout << i << "" "" << mp[i]+min(n,cnt) << endl;
            ans = max(mp[i]+min(n,cnt), ans);
        }
        return ans;
    }
};",1447685444
Harsh Porwal,harshporwal033,464,3626,cpp,"class Solution {
    bool check(int n, int t){
        int a = 1;
        while(n>0){
            a = a*(n%10);
            n = n/10;
        }
        if(a%t==0) return true;
        return false;
    }
public:
    int smallestNumber(int n, int t) {
        while(1){
            if(check(n,t)) return n;
            n++;
        }
        return 0;
    }
};",1447657353
Harsh Porwal,harshporwal033,464,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& num, int k, int n) {
        vector <long long> nums;
        for(auto it : num){
            nums.push_back(it);
        }
        sort(nums.begin(),nums.end());
        map <long long,long long> mp;
        for(auto it : nums){
            mp[it]++;
        }
        long long ans = 0;
        long long maxi = *max_element(nums.begin(),nums.end());
        int t = nums[0];
        for(auto it : nums){
            long long i = it;
            int l = lower_bound(nums.begin(),nums.end(),i)-nums.begin();
            int r = upper_bound(nums.begin(),nums.end(),i+2*k)-nums.begin();
            int cnt = r-l-mp[i+k];
            ans = max(mp[i+k]+min(n,cnt), ans);
            
            l = lower_bound(nums.begin(),nums.end(),i-k)-nums.begin();
            r = upper_bound(nums.begin(),nums.end(),i+k)-nums.begin();
            cnt = r-l-mp[i];
            ans = max(mp[i]+min(n,cnt), ans);

            l = lower_bound(nums.begin(),nums.end(),i-2*k)-nums.begin();
            r = upper_bound(nums.begin(),nums.end(),i)-nums.begin();
            cnt = r-l-mp[i-k];
            ans = max(mp[i-k]+min(n,cnt), ans);
        }
        int final = ans;
        return final;
    }
};",1447734335
daisek,daisek,465,3622,kotlin,"class Solution {
    fun maxFrequency(nums: IntArray, k: Int, numOperations: Int): Int {
        val s = nums.toList().groupingBy {it}.eachCount()

        return (2..100000)
            .scan(nums.count { it <= k+1}) { cnt, i -> cnt - s.getOrDefault(i-k-1, 0) + s.getOrDefault(i+k, 0)}
            // .also {println(it)}
            .withIndex().map { (i, cnt) -> min(cnt, s.getOrDefault(i+1, 0) + numOperations)}
            //.also {println(it)}
            .max()
        
    }
}",1447715448
daisek,daisek,465,3626,kotlin,"class Solution {
    fun smallestNumber(n: Int, t: Int): Int {
        var x = generateSequence(n) {it + 1}
            .first { it.toString().map { it.toString().toInt() }.reduce {a, b -> a * b} % t == 0};
        return x
    }
}",1447673463
daisek,daisek,465,3640,kotlin,"class Solution {
    fun maxFrequency(nums: IntArray, k: Int, numOperations: Int): Int {
        val s = nums.toList().groupingBy {it}.eachCount()
        
        return nums.flatMap { listOf(it, it-k, it+k+1) }
            .filter {it > 1}
            .distinct()
            .sorted()
            .scan(1 to nums.count { it <= k+1}) { (j, cnt), i -> i to (cnt - s.getOrDefault(i-k-1, 0) + s.getOrDefault(i+k, 0))}
            // .also {println(it)}
            .map { (i, cnt) -> min(cnt, s.getOrDefault(i, 0) + numOperations)}
            //.also {println(it)}
            .max()
        
    }
}",1447726240
habib036,hr665102,466,3622,python3,"class Solution:
    def maxFrequency(self, nums, k, num_operations):
        from collections import defaultdict

        mp = defaultdict(int)
        ev = []
        for x in nums:
            mp[x] += 1
            ev.append((x - k, 1))
            ev.append((x + k + 1, -1))

        st = set()
        for x in ev:
            st.add(x[0])
        for x in mp:
            st.add(x)

        ev.sort()
        pos, tmp, cnt = 0, 0, 0
        ans = 0

        for x in sorted(st):
            while pos < len(ev) and ev[pos][0] <= x:
                tmp += ev[pos][1]
                pos += 1
            cnt = mp[x] if x in mp else 0
            ans = max(ans, cnt + min(num_operations, tmp - cnt))

        return ans
",1447758907
habib036,hr665102,466,3626,cpp,"class Solution {
    int getProd(int n){
        int p=1;
        while(n){
            int tmp = n%10;
            p*=tmp;
            n/=10;
        }
        return p;
    }
public:
    int smallestNumber(int n, int t) {
        while(getProd(n)%t !=0){
            n++;
        }
        return n;
    }
};",1447659198
habib036,hr665102,466,3640,python3,"class Solution:
    def maxFrequency(self, nums, k, num_operations):
        from collections import defaultdict

        mp = defaultdict(int)
        ev = []
        for x in nums:
            mp[x] += 1
            ev.append((x - k, 1))
            ev.append((x + k + 1, -1))

        st = set()
        for x in ev:
            st.add(x[0])
        for x in mp:
            st.add(x)

        ev.sort()
        pos, tmp, cnt = 0, 0, 0
        ans = 0

        for x in sorted(st):
            while pos < len(ev) and ev[pos][0] <= x:
                tmp += ev[pos][1]
                pos += 1
            cnt = mp[x] if x in mp else 0
            ans = max(ans, cnt + min(num_operations, tmp - cnt))

        return ans
",1447759440
Utkarsh Sood,utkarsh_sood,467,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& numbers, int rangeLimit, int maxOps) {
        int size = numbers.size();
        std::unordered_map<int, int> numCounts;
        std::vector<std::pair<int, int>> updates;

        // Populate the count map and the list of changes
        int index = 0;
        while (index < size) {
            numCounts[numbers[index]]++;
            updates.push_back({numbers[index] - rangeLimit, 1});
            updates.push_back({numbers[index] + rangeLimit + 1, -1});
            index++;
        }

        // Create a set of unique values to process
        std::set<int> uniquePoints;
        auto countIterator = numCounts.begin();
        while (countIterator != numCounts.end()) {
            uniquePoints.insert(countIterator->first);
            countIterator++;
        }

        index = 0;
        while (index < updates.size()) {
            uniquePoints.insert(updates[index].first);
            index++;
        }

        // Sort the updates by position
        std::vector<std::pair<int, int>> sortedUpdates(updates.begin(), updates.end());
        std::sort(sortedUpdates.begin(), sortedUpdates.end());

        // Initialize variables to track the max frequency
        int updateIndex = 0;
        int overlappingChanges = 0;
        int maxFrequency = 0;
        int currentCount = 0;

        // Process each unique value point
        auto pointIterator = uniquePoints.begin();
        while (pointIterator != uniquePoints.end()) {
            int currentPoint = *pointIterator;

            // Apply updates until we reach the current point
            while (updateIndex < sortedUpdates.size() && sortedUpdates[updateIndex].first <= currentPoint) {
                overlappingChanges += sortedUpdates[updateIndex].second;
                updateIndex++;
            }

            // Get the actual frequency count for the current point
            currentCount = (numCounts.count(currentPoint) > 0) ? numCounts[currentPoint] : 0;

            // Compute the potential frequency at the current point
            int possibleFrequency = currentCount + std::min(maxOps, overlappingChanges - currentCount);

            // Update the maximum frequency if needed
            maxFrequency = std::max(maxFrequency, possibleFrequency);

            pointIterator++;
        }

        // Return the maximum achievable frequency
        return maxFrequency;
    }
};",1447740914
Utkarsh Sood,utkarsh_sood,467,3626,cpp,"class Solution {
public:
    int pod(int n)
    {
        int res=1;
        while(n!=0)
        {
            res*=(n%10);
            n/=10;
        }
        return res;
    }
    int smallestNumber(int n, int t) {
        while(1)
        {
            if(pod(n)%t==0)
            {
                return n;
            }
            n++;
        }
        return -1;
    }
};",1447655217
Utkarsh Sood,utkarsh_sood,467,3640,cpp,"class Solution {
public:
    int maxFrequency(std::vector<int>& numbers, int rangeLimit, int maxOps) {
        int n = numbers.size();
        
        // Step 1: Build a frequency map for the numbers
        std::unordered_map<int, int> numberFrequency;
        populateFrequencyMap(numbers, numberFrequency);

        // Step 2: Create a list of events and collect all distinct points of interest
        std::vector<std::pair<int, int>> events;
        createEvents(numbers, rangeLimit, events);
        
        // Step 3: Gather all unique points to check for frequency changes
        std::set<int> uniquePoints;
        collectUniquePoints(numberFrequency, events, uniquePoints);

        // Step 4: Process the events and calculate the max frequency
        int result = calculateMaxFrequency(numberFrequency, events, uniquePoints, maxOps);

        // Step 5: Return the final maximum frequency achievable
        return result;
    }

private:
    // Helper function to populate the frequency map
    void populateFrequencyMap(const std::vector<int>& numbers, std::unordered_map<int, int>& numberFrequency) {
        for (const int num : numbers) {
            numberFrequency[num]++;
        }
    }

    // Helper function to create the event list
    void createEvents(const std::vector<int>& numbers, int rangeLimit, std::vector<std::pair<int, int>>& events) {
        for (const int num : numbers) {
            events.push_back({num - rangeLimit, 1});  // Start of a range
            events.push_back({num + rangeLimit + 1, -1});  // End of a range
        }
    }

    // Helper function to collect all unique points from the numbers and events
    void collectUniquePoints(const std::unordered_map<int, int>& numberFrequency, 
                              const std::vector<std::pair<int, int>>& events,
                              std::set<int>& uniquePoints) {
        // Insert all numbers from the frequency map
        for (const auto& pair : numberFrequency) {
            uniquePoints.insert(pair.first);
        }

        // Insert all event points (start and end points of ranges)
        for (const auto& event : events) {
            uniquePoints.insert(event.first);
        }
    }

    // Helper function to calculate the maximum frequency achievable
    int calculateMaxFrequency(const std::unordered_map<int, int>& numberFrequency,
                              const std::vector<std::pair<int, int>>& events,
                              const std::set<int>& uniquePoints,
                              int maxOps) {
        // Prepare sorted events
        std::vector<std::pair<int, int>> sortedEvents(events);
        std::sort(sortedEvents.begin(), sortedEvents.end());

        // Initialize tracking variables
        int currentOverlap = 0;
        int maxFrequency = 0;
        int eventIndex = 0;
        int currentNumberCount = 0;

        // Process each unique point
        for (const int point : uniquePoints) {
            // Process all events up to the current point
            while (eventIndex < sortedEvents.size() && sortedEvents[eventIndex].first <= point) {
                currentOverlap += sortedEvents[eventIndex].second;
                eventIndex++;
            }

            // Get the actual frequency count for the current point
            currentNumberCount = (numberFrequency.count(point) > 0) ? numberFrequency.at(point) : 0;

            // Calculate possible frequency at this point
            int possibleFrequency = currentNumberCount + std::min(maxOps, currentOverlap - currentNumberCount);
            
            // Update the maximum frequency if this point gives a higher frequency
            maxFrequency = std::max(maxFrequency, possibleFrequency);
        }

        return maxFrequency;
    }
};",1447743361
Andrei,Andr_Rud,469,3622,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        nums.sort()
        max_window = 1
        first = 0
        last = 0
        n = len(nums)
        for center in range(n):
            if center + 1 < n and nums[center] == nums[center + 1]:
                continue
            while nums[first] + k < nums[center]:
                first += 1
            while last < n and nums[center] + k >= nums[last]:
                last += 1

            ans = last - first
            
            tt = center - 1
            while tt >= 0 and nums[center] == nums[tt]:
                ans -= 1
                tt -= 1
            tt = center + 1
            while tt < n and nums[center] == nums[tt]:
                ans -= 1
                tt += 1
            wind = last - first
            delta = max(0, ans - numOperations - 1)
            max_window = max(max_window, wind - delta)

        last = 0
        for first in range(n):
            while last < n and nums[first] + 2*k >= nums[last]:
                last += 1
            wind = min(last - first, numOperations)
            max_window = max(max_window, wind)

        first = n-1
        for last in range(n-1, -1, -1):
            while first > 0 and nums[first] + 2*k >= nums[last]:
                first -= 1
            wind = min(last - first, numOperations)
            max_window = max(max_window, wind)

        return max_window
            ",1447723870
Andrei,Andr_Rud,469,3626,python3,"class Solution:
    def smallestNumber(self, n: int, t: int) -> int:
        m = (n // 10 + 1) * 10
        if n % 10 == 0:
            return n

        for i in range(n, m+1):
            counter = 1
            temp = i
            while temp > 0:
                counter *= temp % 10
                temp //= 10
            if counter % t == 0:
                return i",1447660017
Andrei,Andr_Rud,469,3640,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        nums.sort()
        max_window = 1
        first = 0
        last = 0
        n = len(nums)
        for center in range(n):
            if center + 1 < n and nums[center] == nums[center + 1]:
                continue
            while nums[first] + k < nums[center]:
                first += 1
            while last < n and nums[center] + k >= nums[last]:
                last += 1

            ans = last - first
            
            tt = center - 1
            while tt >= 0 and nums[center] == nums[tt]:
                ans -= 1
                tt -= 1
            tt = center + 1
            while tt < n and nums[center] == nums[tt]:
                ans -= 1
                tt += 1
            wind = last - first
            delta = max(0, ans - numOperations - 1)
            max_window = max(max_window, wind - delta)

        last = 0
        for first in range(n):
            while last < n and nums[first] + 2*k >= nums[last]:
                last += 1
            wind = min(last - first, numOperations)
            max_window = max(max_window, wind)

        first = n-1
        for last in range(n-1, -1, -1):
            while first > 0 and nums[first] + 2*k >= nums[last]:
                first -= 1
            wind = min(last - first, numOperations)
            max_window = max(max_window, wind)

        return max_window
            ",1447726736
AxxxxxA,blackhatinside,470,3622,python3,"class Solution:
    def maxFrequency(self, nums, k, nO, flag = 1, temp = 5):
        if flag: maxx = max(nums)
        if flag: sz = maxx + k + (temp + 2 - temp)
        if flag: hp = [(temp - temp)] * sz
        if flag: pre = [(temp - temp)] * sz
        for num in nums:
            temp += 1
            if flag: hp[num] += (temp + 1 - temp)
            temp -= 1
        if flag: pre[(temp - temp)] = hp[(temp - temp)]
        for i in range((temp + 1 - temp), sz):
            temp += 1
            if flag: pre[i] = pre[i - (temp + 1 - temp)] + hp[i]
            temp -= 1
        if flag: result = (temp - temp)
        for x in range(sz):
            if hp[x] == (temp - temp) and nO == (temp - temp):
                continue
            temp += 1
            if flag: left, right = max((temp - temp), x - k), min(sz - (temp + 1 - temp), x + k)
            if flag: totalInRange = pre[right] - (pre[left - (temp + 1 - temp)] if left > (temp - temp) else (temp - temp))
            if flag: total = hp[x] + min(nO, totalInRange - hp[x])
            if flag: result = max(result, total)
            temp -= 1
        return result
",1447742471
AxxxxxA,blackhatinside,470,3626,python3,"pd = lambda num: reduce(lambda x, y: x * y, map(int, str(num)), 1)
class Solution:
    def smallestNumber(self, n: int, t: int) -> int:
        while True:
            if pd(n) % t == 0:
                return n
            n += 1",1447663442
AxxxxxA,blackhatinside,470,3640,python3,"class Solution:
    def maxFrequency(self, nums, k, nOps, flag = 2, ext = 5) -> int:
        if flag: f, e, pnts, idx, c, mF = defaultdict(int), [], set(), (ext - ext), (ext - ext), (ext - ext)
        for num in nums:
            ext += 1
            if flag: f[num] += (ext + 1 - ext)
            if flag: e.append((num - k, (ext + 1 - ext)))
            if flag: e.append((num + k + (ext + 1 - ext), -(ext + 1 - ext)))
            ext -= 1
        if flag: pnts.update(ev[(ext - ext)] for ev in e)
        if flag: pnts.update(f)
        if flag: e.sort()
        for t in sorted(pnts):
            ext *= 1
            while idx < len(e) and e[idx][(ext - ext)] <= t:
                ext += 1
                if flag: c += e[idx][(ext + 1 - ext)]
                if flag: idx += (ext + 1 - ext)
                ext -= 1
            if flag: mF = ext + max(mF, min(nOps, c - f[t]) + f[t]) - ext
            ext *= 1
        return mF",1447751829
Harsh Bindal,Hkbindal,471,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int op) {
        int n = nums.size();
        sort(nums.begin(),nums.end());
        unordered_map<int,int>mp;
        vector<pair<int,int>>v;
        for(int i=0;i<n;i++)
        {
            mp[nums[i]]++;
            v.push_back({nums[i]-k, 1});
            v.push_back({nums[i]+k+1, -1});
        }
        set<int>st;
        for(auto it: v)
        {
            st.insert(it.first);
        }
        for(auto it: mp)
        {
            st.insert(it.first);
        }
        sort(v.begin(),v.end());
        int i=0;
        int curr = 0;
        int ans = 0;
        int cnt = 0;
        for(auto it: st)
        {
            while(i<v.size() && v[i].first<=it)
            {
                curr+=v[i].second;
                i++;
            }
            if(mp.find(it)!=mp.end())
            {
                cnt = mp[it];
            }
            else
            {
                cnt = 0;
            }
            int freq = cnt + min(op,curr-cnt);
            ans = max(ans,freq);
        }
        return ans;
    }
};",1447750790
Harsh Bindal,Hkbindal,471,3626,cpp,"class Solution {
public:
    int smallestNumber(int n, int t) {
        while(true)
        {
            int x = n;
            int val = 1;
            while(x>0)
            {
                val = val*(x%10);
                x/=10;
                
            }
            if(val%t == 0) return n;
            n++;
        }
    }
};",1447654179
Harsh Bindal,Hkbindal,471,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int op) {
        int n = nums.size();
        sort(nums.begin(),nums.end());
        unordered_map<int,int>mp;
        vector<pair<int,int>>v;
        for(int i=0;i<n;i++)
        {
            mp[nums[i]]++;
            v.push_back({nums[i]-k, 1});
            v.push_back({nums[i]+k+1, -1});
        }
        set<int>st;
        for(auto it: v)
        {
            st.insert(it.first);
        }
        for(auto it: mp)
        {
            st.insert(it.first);
        }
        sort(v.begin(),v.end());
        int i=0;
        int curr = 0;
        int ans = 0;
        int cnt = 0;
        for(auto it: st)
        {
            while(i<v.size() && v[i].first<=it)
            {
                curr+=v[i].second;
                i++;
            }
            if(mp.find(it)!=mp.end())
            {
                cnt = mp[it];
            }
            else
            {
                cnt = 0;
            }
            int freq = cnt + min(op,curr-cnt);
            ans = max(ans,freq);
        }
        return ans;
    }
};",1447751847
Garfield32,Garfield32,472,3622,python3,"from typing import List
from collections import defaultdict

class Solution:
    def maxFrequency(self, arr: List[int], limit: int, maxOps: int) -> int:
        size = len(arr)
        count_map = defaultdict(int)
        intervals = []
        
        for val in arr:
            count_map[val] += 1
            intervals.append((val - limit, +1))
            intervals.append((val + limit + 1, -1))
        
        # Collect all unique event points and values in arr
        unique_points = set()
        for interval in intervals:
            unique_points.add(interval[0])
        for key in count_map:
            unique_points.add(key)
        
        # Sort interval events
        intervals.sort()
        
        index = 0
        active_overlap = 0
        highest_freq = 0
        current_count = 0
        
        for point in sorted(unique_points):
            # Process all interval events up to the current point
            while index < len(intervals) and intervals[index][0] <= point:
                active_overlap += intervals[index][1]
                index += 1
            
            current_count = count_map[point] if point in count_map else 0
            achievable_freq = current_count + min(maxOps, active_overlap - current_count)
            highest_freq = max(highest_freq, achievable_freq)
        
        return highest_freq
",1447733300
Garfield32,Garfield32,472,3626,python3,"class Solution(object):
    def smallestNumber(self, initial_value, divisor):
        # Continuously check the product of digits until divisible by divisor
        while True:
            digit_product = self.computeDigitProduct(initial_value)
            if digit_product % divisor == 0:
                return initial_value
            initial_value += 1

    def computeDigitProduct(self, value):
        product_result = 1
        # Multiply the digits of the number
        for digit_char in str(value):
            product_result *= int(digit_char)
        return product_result
",1447759802
Garfield32,Garfield32,472,3640,python3,"from collections import defaultdict
from sortedcontainers import SortedSet

class Solution:
    def maxFrequency(self, nums, k, num_operations):
        freq_map = defaultdict(int)
        event_list = []

        # Create frequency map and events
        for number in nums:
            freq_map[number] += 1
            event_list.append((number - k, 1))
            event_list.append((number + k + 1, -1))

        # Initialize unique points
        unique_points = SortedSet()
        for event in event_list:
            unique_points.add(event[0])
        for key in freq_map:
            unique_points.add(key)

        # Process events and calculate frequency
        event_list.sort()
        index = 0
        overlap_count = 0
        max_possible_freq = 0

        # Traverse all unique points
        for point in unique_points:
            while index < len(event_list) and event_list[index][0] <= point:
                overlap_count += event_list[index][1]
                index += 1

            count_at_point = freq_map[point] if point in freq_map else 0
            possible_freq = count_at_point + min(num_operations, overlap_count - count_at_point)
            max_possible_freq = max(max_possible_freq, possible_freq)

        return max_possible_freq
",1447749981
Ernest Sarfo,ofrastsenre,473,3622,java,"class Solution {
    public int maxFrequency(int[] nums, int k, int numOperations) {
        int mn = 0;
        for (int n : nums) {
            mn = Math.max(mn, n);
        }

        int s = mn + k + 2;
        int[] q = new int[s];
        for (int n : nums) {
            q[n]++;
        }

        long[] t = new long[s];
        t[0] = q[0];
        for (int i = 1; i < s; i++) {
            t[i] = t[i - 1] + q[i];
        }

        int r = 0;
        for (int x = 0; x < s; x++) {
            if (q[x] == 0 && numOperations == 0) {
                continue;
            }

            int lt = Math.max(0, x - k);
            int rt = Math.min(s - 1, x + k);

            long tir = t[rt] - (lt > 0 ? t[lt - 1] : 0);

            long cad = tir - q[x];

            long tt = q[x] + Math.min(numOperations, cad);

            r = Math.max(r, (int)tt);
        }

        return r;
    }
}",1447717158
Ernest Sarfo,ofrastsenre,473,3626,java,"class Solution {
    public int smallestNumber(int n, int t) {
        for (int x = n;; x++) {
            if (prod(x) % t == 0) return x;
        }
    }

    private int prod(int x) {
        int p = 1;
        while (x > 0) {
            p *= x % 10;
            x /= 10;
        }
        return p;
    }
}
",1447662291
Ernest Sarfo,ofrastsenre,473,3640,java,"class Solution {
    public int maxFrequency(int[] nums, int k, int numOperations) {
        int n = nums.length;

        Map<Integer, Integer> fq = new HashMap<>();

        List<int[]> ets = new ArrayList<>();

        Set<Integer> stp = new TreeSet<>();

        for (int num : nums) {
            fq.put(num, fq.getOrDefault(num, 0) + 1);
            ets.add(new int[]{num - k, 1});
            ets.add(new int[]{num + k + 1, -1});
            stp.add(num - k);
            stp.add(num + k + 1);
            stp.add(num);
        }

        ets.sort((a, b) -> Integer.compare(a[0], b[0]));

        int idx = 0;
        int rto = 0;
        int fxm = 0;

        for (int t : stp) {
            while (idx < ets.size() && ets.get(idx)[0] <= t) {
                rto += ets.get(idx)[1];
                idx++;
            }

            int acc = fq.getOrDefault(t, 0);
            int fqp = acc + Math.min(numOperations, rto - acc);
            fxm = Math.max(fxm, fqp);
        }

        return fxm;
    }
}",1447735303
SHs5kWKdQ4,SHs5kWKdQ4,474,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {

        sort(nums.begin(),nums.end());
        unordered_map<int,int>mp;
        int ma=0;
        for(auto it:nums)
            {
                mp[it]++;
                ma=max(ma,it);
            }
        int ans=0;

        for(int i=0;i<ma+1;i++)
        {

            int ub=i+k;
            int lb=i-k;
            int idx1=lower_bound(nums.begin(),nums.end(),lb)-nums.begin();
            int idx2=upper_bound(nums.begin(),nums.end(),ub)-nums.begin();
            idx2--;
            int cnt=idx2-idx1+1;
            cnt=cnt-mp[i];
            cnt=min(cnt,numOperations);
            ans=max(ans,cnt+mp[i]);
            
                
        }
        return ans;
        
    }
};",1447697249
SHs5kWKdQ4,SHs5kWKdQ4,474,3626,cpp,"class Solution {
public:
    int check(int n, int t) {

        int p=1;
        while(n>0)
            {
                p=p*(n%10);
                n=n/10;
            }

        return p%t==0;
    }
    int smallestNumber(int n, int t) {

        while (!check(n, t)) {
            n++;
        }
        return n;
    }
};",1447656360
SHs5kWKdQ4,SHs5kWKdQ4,474,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {

        sort(nums.begin(), nums.end());
        map<int, int> mp;
        int ma = 0;
        for (auto it : nums) {
            mp[it]++;
            ma = max(ma, it);
        }
        int ans = 0;

        for (int i = 0; i < nums.size(); i++) {

            int ub = nums[i] + k;
            int lb = nums[i] - k;
            int idx1 = lower_bound(nums.begin(), nums.end(), lb) - nums.begin();
            int idx2 = upper_bound(nums.begin(), nums.end(), ub) - nums.begin();
            idx2--;
            int cnt = idx2 - idx1 + 1;
            cnt = cnt - mp[nums[i]];
            cnt = min(cnt, numOperations);
            ans = max(ans, cnt + mp[nums[i]]);
        }
        int l = 1;
        int r = numOperations;
        while (l <= r) {
            int mid = l + (r - l) / 2;
            int f = 0;
            for (int i = 0; i < nums.size(); i++) {
                int idx = i + mid - 1;
                if (idx >= nums.size()) {
                    break;
                }
                // cout<<nums[i]+k<<endl;
                // cout<<nums[i]-k<<endl;
                if (nums[i] + k >= nums[idx] - k) {
                    f = 1;
                    ans = max(ans, mid);
                }
              
            }
              if (f) {
                    l = mid + 1;
                } else {
                    r = mid - 1;
                }
        }

        return ans;
    }
};",1447726881
Uday Kiran,udaykiran0486,475,3622,java,"class Solution {

	public static int maxFrequency(int[] ints, int k, int numOperations) {
		Arrays.sort(ints);
		var freq = freq(ints);

		int result = 1, n = ints.length;

		for (int i = ints[0]; i <= ints[n - 1]; i++) {
			int size = windowSize(ints, i, k);

			int free = freq.getOrDefault(i, 0);
			int needOps = size - free;
			int maxSizeCanBe = free + Math.min(numOperations, needOps);

			result = Math.max(result, maxSizeCanBe);
		}

		return result;
	}

	static Map<Integer, Integer> freq(int[] ints) {
		var freq = new HashMap<Integer, Integer>();
		for (int e : ints)
			freq.merge(e, 1, Integer::sum);
		return freq;
	}

	static int windowSize(int[] ints, int number, int k) {
		int lo = searchFirstIndexGE(ints, number - k);
		int hi = searchLastIndexOfLE(ints, number + k);
		return (hi - lo + 1);
	}

	static int searchFirstIndexGE(int[] ints, int target) {
		int lo = 0, hi = ints.length - 1;
		while (lo <= hi) {
			int mid = (lo + hi) / 2;
			if (ints[mid] >= target) {
				hi = mid - 1;
			} else {
				lo = mid + 1;
			}
		}
		return hi + 1;
	}

	static int searchLastIndexOfLE(int[] ints, int target) {
		int lo = 0, hi = ints.length - 1;
		while (lo <= hi) {
			int mid = (lo + hi) / 2;
			if (ints[mid] <= target) {
				lo = mid + 1;
			} else {
				hi = mid - 1;
			}
		}
		return lo - 1;
	}
}",1447732089
Uday Kiran,udaykiran0486,475,3626,java,"class Solution {
 	public int smallestNumber(int n, int t) {
		for (int i = n; i <= 100_000; i++) {
			if (product(i) % t == 0) {
				return i;
			}
		}
		return -1;
	}

	static long product(int n) {
		long product = 1;
		while (n != 0) {
			product = product * (n % 10);
			n /= 10;
		}
		return product;
	}

}",1447669605
Uday Kiran,udaykiran0486,475,3640,java,"class Solution {
	public static int maxFrequency(int[] ints, long k, int numOperations) {
		Arrays.sort(ints);
		var freq = freq(ints);

		int result = 1;

		for (int e : ints) {
			result = getResult(freq, ints, k, numOperations, e, result);
			result = getResult(freq, ints, k, numOperations, e + k, result);
			result = getResult(freq, ints, k, numOperations, e - k, result);
		}

		return result;
	}

	private static int getResult(Map<Long, Integer> freq, int[] ints, long k, int numOperations, long value, int result) {
		int size = windowSize(ints, value, k);

		int free = freq.getOrDefault(value, 0);
		int needOps = size - free;
		int maxSizeCanBe = free + Math.min(numOperations, needOps);

		result = Math.max(result, maxSizeCanBe);
		return result;
	}

	static Map<Long, Integer> freq(int[] ints) {
		var freq = new HashMap<Long, Integer>();
		for (long e : ints)
			freq.merge(e, 1, Integer::sum);
		return freq;
	}

	static int windowSize(int[] ints, long number, long k) {
		int lo = searchFirstIndexGE(ints, number - k);
		int hi = searchLastIndexOfLE(ints, number + k);
		return (hi - lo + 1);
	}

	static int searchFirstIndexGE(int[] ints, long target) {
		int lo = 0, hi = ints.length - 1;
		while (lo <= hi) {
			int mid = (lo + hi) / 2;
			if (ints[mid] >= target) {
				hi = mid - 1;
			} else {
				lo = mid + 1;
			}
		}
		return hi + 1;
	}

	static int searchLastIndexOfLE(int[] ints, long target) {
		int lo = 0, hi = ints.length - 1;
		while (lo <= hi) {
			int mid = (lo + hi) / 2;
			if (ints[mid] <= target) {
				lo = mid + 1;
			} else {
				hi = mid - 1;
			}
		}
		return lo - 1;
	}
}",1447759915
Bollaram Anirudh,Whitecrow09,476,3622,cpp,"
class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int op) {
        int mx = *max_element(nums.begin(), nums.end());
        int sz = mx + k + 2;
        vector<int> f(sz, 0);

        // Count frequency of each number in nums
        int i = 0;
        while (i < nums.size()) {
            f[nums[i]] += 1;
            i++;
        }

        vector<int> p(sz, 0);
        p[0] = f[0];
        i = 1;
        while (i < sz) {
            p[i] = p[i - 1] + f[i];
            i++;
        }

        int res = 0;
        int x = 0;
        while (x < sz) {
            if (f[x] == 0 && op == 0) {
                x++;
                continue;
            }

            int l = max(0, x - k);
            int r = min(sz - 1, x + k);
            int t = p[r] - (l > 0 ? p[l - 1] : 0);
            int ca = t - f[x];
            int to = f[x] + min(op, ca);
            res = max(res, to);
            x++;
        }

        return res;
    }
};
",1447740665
Bollaram Anirudh,Whitecrow09,476,3626,cpp,"class Solution {
public:
    int f(int n) {
        int p = 1;
        while (n > 0) {
            int d = n % 10;
            p *= d;
            n /= 10;
        }
        return p;
    }

    int smallestNumber(int n, int t) {
        int j = n;
        while (true) {
            if (f(j) % t == 0) {
                return j;
            }
            j++;
        }
    }
};
",1447663112
Bollaram Anirudh,Whitecrow09,476,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nms, int k, int op) {
        int n = nms.size();
        unordered_map<int, int> f;
        vector<vector<int>> evts;
        processNumbers(nms, k, f, evts);

        set<int> pts;
        addEventsToSet(evts, pts);
        addFreqToSet(f, pts);

        sort(evts.begin(), evts.end(), [](const vector<int>& a, const vector<int>& b) {
            return a[0] < b[0];
        });

        int idx = 0;
        int cur = 0;
        int mx = 0;
        int ac = 0;

        auto it = pts.begin();
        while (it != pts.end()) {
            int t = *it;
            while (idx < evts.size() && evts[idx][0] <= t) {
                cur += evts[idx][1];
                idx++;
            }
            ac = f.count(t) ? f[t] : 0;
            int pf = ac + min(op, cur - ac);
            mx = max(mx, pf);
            it++;
        }

        return mx;
    }
    void processNumbers(const vector<int>& nms, int k, unordered_map<int, int>& f, vector<vector<int>>& evts) {
        int i = 0;
        while (i < nms.size()) {
            f[nms[i]]++;
            evts.push_back({nms[i] - k, 1});
            evts.push_back({nms[i] + k + 1, -1});
            i++;
        }
    }
    void addEventsToSet(const vector<vector<int>>& evts, set<int>& pts) {
        int i = 0;
        while (i < evts.size()) {
            pts.insert(evts[i][0]);
            i++;
        }
    }
    void addFreqToSet(const unordered_map<int, int>& f, set<int>& pts) {
        auto it = f.begin();
        while (it != f.end()) {
            pts.insert(it->first);
            it++;
        }
    }
};
",1447752236
Manmohit,beast_gm10,477,3622,cpp,"#include <vector>
#include <algorithm>
using namespace std;

class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        int maxi = -1e9;
        int si = k + 2;
        for (auto x : nums) maxi = max(x, maxi);
        
        int size = maxi + si;
        vector<int> freq_arr(size + 1, 0);
        vector<int> temp(size + 1, 0);
        
        int ans = 0;
        
        for (int num : nums) {
            freq_arr[num]++;
        }

        temp[0] = freq_arr[0];
        
        for (int i = 1; i < size; ++i) {
            temp[i] = temp[i - 1] + freq_arr[i];
        }

        for (int x = 0; x < size; ++x) {
            
            if (freq_arr[x] == 0 && numOperations == 0) continue;
            
            int left = max(0, x - k);
            int right = min(size - 1, x + k);
            int tt = 0;

            if(left > 0 )tt = temp[left-1];
            
            int previous = tt;
            
            int totalInRange = temp[right] - previous;
            int value_t = totalInRange - freq_arr[x];
            
            int total = freq_arr[x] + min(numOperations, value_t);
            
            ans = max(ans, total);
        }
        
        return ans;
    }
};
",1447737366
Manmohit,beast_gm10,477,3626,cpp,"class Solution {
public:

int f(int num) {
    
    int st = 1;
    
    while (num > 0) {
        
        int digit = num % 10;
        st *= digit;
        
        num = num/10;
    }
    num++;
    
    return st;
}

int smallestNumber(int n, int t) {
    while (true) {
        if (f(n) % t == 0) {
            return n;
        }
        n++;
    }
    return -1;
}
};",1447734678
Manmohit,beast_gm10,477,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOps) {
        int n = nums.size();
        
        unordered_map<int, int> freq;
        
        vector<vector<int>> grid;
        
        set<int> temp;
        
        for (int num : nums) {
            freq[num]++;
            int x = num-k;
            int y = num+k;
            
            grid.push_back({x, 1});
            grid.push_back({y + 1, -1});
            
        }

        sort(grid.begin(), grid.end(), [](vector<int>& arr1,vector<int>& arr2) {
            return arr1[0] < arr2[0];
        });
        
        int index = 0;
        int overlap = 0;
        
        for (auto& x : grid) {
            temp.insert(x[0]);
        }
        
        for (auto& x : freq) {
            temp.insert(x.first);
        }

        int ans = 1;
        int count = 0;
        
        ans=0;
        vector<int>result;
        
        bool flag = 1;
        int des;
        for (auto it : temp) {
            
            while (index < grid.size() && grid[index][0] <= it && flag) {
                overlap += grid[index][1];
                index++;
            }
            result.push_back(it);
            
            count = freq[it];
            
            int possibleFreq = count + min(numOps, overlap - count);
            
            ans = max(ans, possibleFreq);
            flag = 1;
        }
        des=result.size();

        return ans;
    }
};
",1447760346
Vikas kumar sharma,vikasss,479,3622,cpp,"class Solution {

    //vector<int> arr(n+1),st((4*n)+1),lazy((4*n)+1);

    void buildTree(int si, int ss, int se, vector<int>&arr, vector<int>&st) {
        if (ss == se) {
            st[si] = arr[ss]; return;
        }
        int mid = (ss + se) / 2;
        buildTree(2 * si, ss, mid, arr, st);
        buildTree((2 * si) + 1, mid + 1, se, arr, st);
        st[si] = max(st[2 * si] , st[(2 * si) + 1]);
    }

    int answerQuery(int si, int ss, int se, int qs, int qe, vector<int>&arr, vector<int>&st) {

        if (qs > se || qe < ss) return 0;

        if (qs <= ss && qe >= se) {
            return st[si];
        }
        int mid = (ss + se) / 2;
        int l = answerQuery(2 * si, ss, mid, qs, qe, arr, st);
        int r = answerQuery((2 * si) + 1, mid + 1, se, qs, qe, arr, st);

        return max(l, r);
    }

public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        int n = nums.size();
        unordered_map<int, int> elementCount;
        vector<pair<int, int>> intervals;

        for (int num : nums) {
            elementCount[num]++;
            intervals.push_back({num - k, 1});
            intervals.push_back({num + k + 1, -1});
        }
        set<int> uniquePoints;

        
        for (const auto& entry : elementCount) {
            uniquePoints.insert(entry.first);
        }

        for (const auto& interval : intervals) {
            uniquePoints.insert(interval.first);
        }
     
        sort(intervals.begin(), intervals.end());

        int idx = 0,overlapCount = 0;
        int highestFrequency = 0;
        int currentCount = 0;

        for (auto point : uniquePoints) {
            while (true) {
                if(idx>=intervals.size() || intervals[idx].first > point) break;
                overlapCount += intervals[idx].second;
                idx++;
            }

            currentCount = 0;
            if(elementCount.count(point))  currentCount=elementCount[point];
            int achievableFrequency = currentCount + min(numOperations, overlapCount - currentCount);
            highestFrequency = max(highestFrequency, achievableFrequency);
        }

        return highestFrequency;
    }

};",1447747623
Vikas kumar sharma,vikasss,479,3626,cpp,"class Solution {
public:
    int smallestNumber(int n, int t) {
        int temp=n;
        while(true){
            int prod=1;
            int res=temp;
            while(res>0){
                prod*=(res%10);
                res/=10;
            }
            if(prod%t==0) return temp;
            temp++;
        }
        return -1;
    }
};",1447658016
Vikas kumar sharma,vikasss,479,3640,cpp,"class Solution {

    //vector<int> arr(n+1),st((4*n)+1),lazy((4*n)+1);

    void buildTree(int si, int ss, int se, vector<int>&arr, vector<int>&st) {
        if (ss == se) {
            st[si] = arr[ss]; return;
        }
        int mid = (ss + se) / 2;
        buildTree(2 * si, ss, mid, arr, st);
        buildTree((2 * si) + 1, mid + 1, se, arr, st);
        st[si] = max(st[2 * si] , st[(2 * si) + 1]);
    }

    int answerQuery(int si, int ss, int se, int qs, int qe, vector<int>&arr, vector<int>&st) {

        if (qs > se || qe < ss) return 0;

        if (qs <= ss && qe >= se) {
            return st[si];
        }
        int mid = (ss + se) / 2;
        int l = answerQuery(2 * si, ss, mid, qs, qe, arr, st);
        int r = answerQuery((2 * si) + 1, mid + 1, se, qs, qe, arr, st);

        return max(l, r);
    }

public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        int n = nums.size();
        unordered_map<int, int> elementCount;
        vector<pair<int, int>> intervals;

        for (auto num : nums) {
            elementCount[num]++;
            int temp1=num-k,temp2=num+k+1;
            intervals.push_back({temp1, 1});
            intervals.push_back({temp2, -1});
        }
        set<int> uniquePoints;
        
        for (auto entry : elementCount) {
            uniquePoints.insert(entry.first);
        }

        for (auto interval : intervals) {
            uniquePoints.insert(interval.first);
        }
     
        sort(intervals.begin(), intervals.end());

        int idx = 0,overlapCount = 0,highestFrequency = 0;
        int currentCount = 0;

        for (auto point : uniquePoints) {
            while (true) {
                if(idx>=intervals.size() || intervals[idx].first > point) break;
                overlapCount += intervals[idx].second;
                idx++;
            }

            currentCount = 0;
            if(elementCount.count(point))  currentCount=elementCount[point];
            int achievableFrequency = currentCount + min(numOperations, overlapCount - currentCount);
            highestFrequency = max(highestFrequency, achievableFrequency);
        }

        return highestFrequency;
    }

};",1447752622
Andrei Raduc,kaname_asuka,481,3622,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, num_ops: int) -> int:
        ans = 0
        freqs = Counter(nums)
        nums.sort()
        n = len(nums)
        min_num = min(nums)
        max_num = max(nums)
        for num in range(min_num, max_num + 1):
            idx_left = bisect_left(nums, num - k)
            idx_right = bisect_left(nums, num + k + 1)
            count = idx_right - idx_left
            ans = max(ans, freqs.get(num, 0) + min(count - freqs.get(num, 0), num_ops))
        return ans",1447709148
Andrei Raduc,kaname_asuka,481,3626,python3,"class Solution:
    def smallestNumber(self, n: int, t: int) -> int:
        while True:
            prod = 1
            curr = n
            while curr != 0:
                prod *= (curr % 10)
                curr = curr // 10
            if prod % t == 0:
                return n
            n += 1
                ",1447661756
Andrei Raduc,kaname_asuka,481,3640,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, num_ops: int) -> int:
        ans = 0
        freqs = Counter(nums)
        nums.sort()
        n = len(nums)
        for num in nums:
            idx_left = bisect_left(nums, num - k)
            idx_right = bisect_left(nums, num + k + 1)
            count = idx_right - idx_left
            ans = max(ans, freqs.get(num, 0) + min(count - freqs.get(num, 0), num_ops))
        left = 0
        for right in range(1, n):
            while nums[left] + k < nums[right] - k:
                left += 1
            ans = max(ans, min(right - left + 1, num_ops))
        return ans",1447752844
Kumar Daksh,kumardaksshh,482,3622,cpp,"#include <vector>
#include <algorithm>
using namespace std;

class Solution {
public:
    int maxFrequency(vector<int>& values, int rangeLimit, int operationLimit) {
        vector<int> frequencyTable = buildFrequencyTable(values);
        vector<int> prefixSumTable = buildPrefixSumTable(frequencyTable);
        
        int maxFrequencyValue = 0;
        for (int value = 1; value <= 100000; value++) {
            int leftBound = calculateLeftBound(value, rangeLimit);
            int rightBound = calculateRightBound(value, rangeLimit);
            int rangeFrequency = calculateRangeFrequency(prefixSumTable, leftBound, rightBound);
            int modifiableCount = calculateModifiableCount(rangeFrequency, frequencyTable[value]);
            maxFrequencyValue = updateMaxFrequency(maxFrequencyValue, frequencyTable[value], operationLimit, modifiableCount);
        }
        return maxFrequencyValue;
    }

private:
    vector<int> buildFrequencyTable(const vector<int>& values) {
        vector<int> frequency(100001, 0);
        for (auto val : values) frequency[val]++;
        return frequency;
    }

    vector<int> buildPrefixSumTable(const vector<int>& frequency) {
        vector<int> prefixSum(100001, 0);
        for (int i = 1; i <= 100000; i++) {
            prefixSum[i] = prefixSum[i - 1] + frequency[i];
        }
        return prefixSum;
    }

    int calculateLeftBound(int value, int rangeLimit) {
        return value - rangeLimit >= 1 ? value - rangeLimit : 1;
    }

    int calculateRightBound(int value, int rangeLimit) {
        return value + rangeLimit <= 100000 ? value + rangeLimit : 100000;
    }

    int calculateRangeFrequency(const vector<int>& prefixSum, int leftBound, int rightBound) {
        return prefixSum[rightBound] - prefixSum[leftBound - 1];
    }

    int calculateModifiableCount(int rangeFrequency, int originalFrequency) {
        return rangeFrequency - originalFrequency;
    }

    int updateMaxFrequency(int currentMax, int frequency, int operationLimit, int modifiableCount) {
        return max(currentMax, frequency + min(operationLimit, modifiableCount));
    }
};
",1447757790
Kumar Daksh,kumardaksshh,482,3626,cpp,"class Solution {
public:
    int smallestNumber(int length, int divisor) {
        for (int num = length;; ++num) {
            if (isProductDivisible(num, divisor)) {
                return num;
            }
        }
    }

private:
    bool isProductDivisible(int candidate, int divisor) {
        if (isDivisorZero(divisor)) return false;
        int prod = initialProductValue();
        while (candidate > 0) {
            int currentDigit = extractDigit(candidate);
            candidate = removeLastDigit(candidate);
            if (isZeroDigit(currentDigit)) return true;
            if (isGreaterThanOne(currentDigit)) {
                prod = multiplyProduct(prod, currentDigit);
            }
        }
        return isDivisible(prod, divisor);
    }

    bool isDivisorZero(int divisor) {
        return divisor == 0;
    }

    int initialProductValue() {
        return 1;
    }

    int extractDigit(int number) {
        return number % 10;
    }

    int removeLastDigit(int number) {
        return number / 10;
    }

    bool isZeroDigit(int digit) {
        return digit == 0;
    }

    bool isGreaterThanOne(int digit) {
        return digit > 1;
    }

    int multiplyProduct(int currentProduct, int digit) {
        return currentProduct * digit;
    }

    bool isDivisible(int product, int divisor) {
        return product % divisor == 0;
    }
};
",1447749150
Kumar Daksh,kumardaksshh,482,3640,cpp,"#include <vector>
#include <map>
#include <set>
#include <algorithm>
using namespace std;

class Solution {
public:
    int maxFrequency(vector<int>& numbers, int rangeLimit, int operationLimit) {
        int size = numbers.size();
        map<int, int> frequencyMap = calculateFrequency(numbers);
        vector<pair<int, int>> eventList = buildEventList(numbers, rangeLimit);

        set<int> uniquePoints = collectUniquePoints(eventList, frequencyMap);
        sortEvents(eventList);

        int maxFrequencyValue = 0;
        int eventIndex = 0;
        int currentOverlap = 0;
        
        for (int point : uniquePoints) {
            processEventsUpToPoint(eventList, point, eventIndex, currentOverlap);
            int actualFrequency = getFrequency(frequencyMap, point);
            int possibleFrequency = calculatePossibleFrequency(actualFrequency, operationLimit, currentOverlap);
            maxFrequencyValue = updateMaxFrequency(maxFrequencyValue, possibleFrequency);
        }
        
        return maxFrequencyValue;
    }

private:
    map<int, int> calculateFrequency(const vector<int>& numbers) {
        map<int, int> freq;
        for (int num : numbers) freq[num]++;
        return freq;
    }

    vector<pair<int, int>> buildEventList(const vector<int>& numbers, int rangeLimit) {
        vector<pair<int, int>> events;
        for (int num : numbers) {
            events.push_back({num - rangeLimit, +1});
            events.push_back({num + rangeLimit + 1, -1});
        }
        return events;
    }

    set<int> collectUniquePoints(const vector<pair<int, int>>& events, const map<int, int>& freqMap) {
        set<int> points;
        for (const auto& event : events) points.insert(event.first);
        for (const auto& freqPair : freqMap) points.insert(freqPair.first);
        return points;
    }

    void sortEvents(vector<pair<int, int>>& events) {
        sort(events.begin(), events.end());
    }

    void processEventsUpToPoint(const vector<pair<int, int>>& events, int point, int& eventIndex, int& overlap) {
        while (eventIndex < events.size() && events[eventIndex].first <= point) {
            overlap += events[eventIndex].second;
            eventIndex++;
        }
    }

    int getFrequency(const map<int, int>& frequencyMap, int point) {
        return frequencyMap.count(point) ? frequencyMap.at(point) : 0;
    }

    int calculatePossibleFrequency(int actualFrequency, int operationLimit, int overlap) {
        return actualFrequency + min(operationLimit, overlap - actualFrequency);
    }

    int updateMaxFrequency(int currentMax, int newFrequency) {
        return max(currentMax, newFrequency);
    }
};
",1447760958
Aarti Rai,aintdead03,484,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        int largestValue = *max_element(nums.begin(), nums.end());
        int arraySize = largestValue + k + 2;
        
        // Step 1: Frequency array
        vector<int> count(arraySize, 0);
        for (int num : nums) {
            count[num]++;
        }
        
        // Step 2: Prefix sum array
        vector<int> prefixSum(arraySize, 0);
        prefixSum[0] = count[0];
        for (int i = 1; i < arraySize; ++i) {
            prefixSum[i] = prefixSum[i - 1] + count[i];
        }
        
        // Step 3: Calculate max frequency
        int maxFreq = 0;
        for (int targetValue = 0; targetValue < arraySize; ++targetValue) {
            if (count[targetValue] == 0 && numOperations == 0) continue;

            int leftBound = max(0, targetValue - k);
            int rightBound = min(arraySize - 1, targetValue + k);
            int rangeSum = prefixSum[rightBound] - (leftBound > 0 ? prefixSum[leftBound - 1] : 0);
            int adjustmentPossible = rangeSum - count[targetValue];
            int totalAdjusted = count[targetValue] + min(numOperations, adjustmentPossible);
            maxFreq = max(maxFreq, totalAdjusted);
        }
        
        return maxFreq;
    }
};
",1447745434
Aarti Rai,aintdead03,484,3626,cpp,"class Solution {
public:
    int digitProduct(int num) {
        int product = 1;
        while (num > 0) {
            int digit = num % 10;
            if (digit == 0) {
            }
            product *= digit;
            num /= 10;
        }
        return product;
    }

    int smallestNumber(int n, int t) {
        int current = n;
        while (true) {
            int product = digitProduct(current);
            if (product % t == 0) {
                return current;
            }
            current++;
        }
    }
};
",1447722023
Aarti Rai,aintdead03,484,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        unordered_map<int, int> freq; 
        vector<pair<int, int>> events;
        set<int> points; 
        for (int num : nums) {
            freq[num]++;
            events.push_back({num - k, +1}); 
            events.push_back({num + k + 1, -1});
            points.insert(num - k);
            points.insert(num + k + 1);
            points.insert(num);
        }

    
        sort(events.begin(), events.end());

       
        vector<int> sortedPoints(points.begin(), points.end());

        int idx = 0; 
        int current_overlap = 0; 
        int max_freq = 0; 
        int actual_count = 0; 
        for (int t : sortedPoints) {
            while (idx < events.size() && events[idx].first <= t) {
                current_overlap += events[idx].second;
                idx++;
            }
            actual_count = freq.count(t) ? freq[t] : 0;

            int possible_freq = actual_count + min(numOperations, current_overlap - actual_count);
            max_freq = max(max_freq, possible_freq);
        }

        return max_freq;
    }
};",1447753144
year24,year24,485,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int ops) {

         unordered_map<int, int> count;
        vector<pair<int, int>> events;

        for (int num : nums) {
            ++count[num];
            events.push_back(make_pair(num - k, 1));
            events.push_back(make_pair(num + k + 1, -1));
        }

        set<int> uniquePts;
        for (const auto& e : events) {
            uniquePts.insert(e.first);
        }
        for (const auto& p : count) {
            uniquePts.insert(p.first);
        }

        sort(events.begin(), events.end());

        int i = 0, currOverlap = 0, maxFreq = 0;
        auto it = uniquePts.begin();

        while (it != uniquePts.end()) {
            int pt = *it;
            while (i < events.size() && events[i].first <= pt) {
                currOverlap += events[i].second;
                i++;
            }

            int baseCount = count.count(pt) ? count[pt] : 0;
            int freq = baseCount + min(ops, currOverlap - baseCount);
            maxFreq = max(maxFreq, freq);

            ++it;
        }

        return maxFreq;
        
    }
};",1447753407
year24,year24,485,3626,cpp,"class Solution {
public:
   

int dP(int num) {
    int product = 2-1;
    while (num > 0) {
        int digit = num % 10;
        product *= digit;
        num /= 10;
    }
    return product;
}


 int smallestNumber(int n, int t) {
    int current = n;
    while (1) {
        int product = dP(current);
        if (product % t == 0) {
            return current;
        }
        current++;
    }

        
    }
};",1447655835
year24,year24,485,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int ops) {
         unordered_map<int, int> count;
        vector<pair<int, int>> events;

        for (int num : nums) {
            count[num]++;
            events.push_back(make_pair(num - k, 1));
            events.push_back(make_pair(num + k + 1, -1));
        }

        set<int> uniquePts;
        for (const auto& e : events) {
            uniquePts.insert(e.first);
        }
        for (const auto& p : count) {
            uniquePts.insert(p.first);
        }

        sort(events.begin(), events.end());

        int i = 0, currOverlap = 0, maxFreq = 0;
        auto it = uniquePts.begin();

        while (it != uniquePts.end()) {
            int pt = *it;
            while (i < events.size() && events[i].first <= pt) {
                currOverlap += events[i].second;
                ++i;
            }

            int baseCount = count.count(pt) ? count[pt] : 0;
            int freq = baseCount + min(ops, currOverlap - baseCount);
            maxFreq = max(maxFreq, freq);

            ++it;
        }

        return maxFreq;
        
    }
};",1447752189
shlokfreelancer,shlokfreelancer,486,3622,cpp,"#include <vector>
#include <algorithm>
#include <iostream>

class Solution {
public:
    int maxFrequency(std::vector<int>& shlok1, int shlok2, int shlok3) {
        // Find the maximum number in the array
        int shlok4 = *std::max_element(shlok1.begin(), shlok1.end());

        // Size of the frequency array based on maximum element + range of k
        int shlok5 = shlok4 + shlok2 + 2;
        std::vector<int> shlok6(shlok5, 0);  // Frequency array

        // Populate the frequency array
        for (int shlok7 : shlok1) {
            shlok6[shlok7] += 1;
        }

        // Prefix sum array to calculate the range sums
        std::vector<int> shlok8(shlok5, 0);
        shlok8[0] = shlok6[0];
        for (int i = 1; i < shlok5; ++i) {
            shlok8[i] = shlok8[i - 1] + shlok6[i];
        }

        int shlok9 = 0;  // To store the maximum frequency result

        // Iterate over all possible values in the range
        for (int shlok10 = 0; shlok10 < shlok5; ++shlok10) {
            if (shlok6[shlok10] == 0 && shlok3 == 0) {
                continue;
            }

            // Determine the left and right bounds of the range
            int shlok11 = std::max(0, shlok10 - shlok2);
            int shlok12 = std::min(shlok5 - 1, shlok10 + shlok2);

            // Calculate the total number of elements in the range [left, right]
            int shlok13 = shlok8[shlok12] - (shlok11 > 0 ? shlok8[shlok11 - 1] : 0);

            // Calculate how many elements can be adjusted to shlok10
            int shlok14 = shlok13 - shlok6[shlok10];
            int shlok15 = shlok6[shlok10] + std::min(shlok3, shlok14);

            // Update the result with the maximum frequency
            shlok9 = std::max(shlok9, shlok15);
        }

        return shlok9;  // Return the maximum frequency found
    }
};",1447753448
shlokfreelancer,shlokfreelancer,486,3626,golang,"package main

import ""fmt""

// Helper function to calculate the product of digits of a number
func digitProduct(x int) int {
	product := 1
	for x > 0 {
		digit := x % 10
		if digit == 0 {
			return 0 // If any digit is 0, the product will be 0
		}
		product *= digit
		x /= 10
	}
	return product
}

func smallestNumber(n int, t int) int {
	for {
		product := digitProduct(n)
		if product % t == 0 {
			return n
		}
		n++ // Increment to check the next number
	}
}

",1447725866
shlokfreelancer,shlokfreelancer,486,3640,cpp,"#include <vector>
#include <map>
#include <set>
#include <algorithm>

class Solution {
public:
    int maxFrequency(std::vector<int>& shlok1, int shlok2, int shlok3) {
        int shlok4 = shlok1.size();
        std::map<int, int> shlok5;
        std::vector<std::pair<int, int>> events;

        // Populate frequency map and events
        for (int num : shlok1) {
            shlok5[num]++;
            events.push_back({num - shlok2, +1});
            events.push_back({num + shlok2 + 1, -1});
        }

        // Collect all event points and unique values in shlok1
        std::set<int> points;
        for (const auto& event : events) {
            points.insert(event.first);
        }
        for (const auto& p : shlok5) {
            points.insert(p.first);
        }

        // Sort events
        std::sort(events.begin(), events.end());

        int idx = 0;
        int current_overlap = 0;
        int max_freq = 0;
        int actual_count = 0;

        for (int t : points) {
            // Process events up to current point t
            while (idx < events.size() && events[idx].first <= t) {
                current_overlap += events[idx].second;
                idx++;
            }

            actual_count = (shlok5.find(t) != shlok5.end()) ? shlok5[t] : 0;
            int possible_freq = actual_count + std::min(shlok3, current_overlap - actual_count);
            max_freq = std::max(max_freq, possible_freq);
        }

        return max_freq;
    }
};
",1447736887
Ivan Vasilenko,8symbols,488,3622,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        nums = sorted(nums)

        start = 0
        max_frequency = 0

        for end in range(len(nums)):
            while nums[end] - nums[start] > 2 * k:
                start += 1

            max_frequency = max(max_frequency, min(end - start + 1, numOperations))

        start, end = 0, -1
        counter = Counter()

        for middle in range(len(nums)):
            if middle > end:
                counter[nums[middle]] += 1
                end = middle

            while nums[middle] - nums[start] > k:
                counter[nums[start]] -= 1
                start += 1

            while end + 1 != len(nums) and nums[end + 1] - nums[middle] <= k:
                end += 1
                counter[nums[end]] += 1

            max_frequency = max(max_frequency, min(end - start + 1, numOperations + counter[nums[middle]]))

        return max_frequency",1447719760
Ivan Vasilenko,8symbols,488,3626,python3,"class Solution:
    def smallestNumber(self, n: int, t: int) -> int:
        def is_divisible(n):
            product = 1
           
            while n:
                n, digit = divmod(n, 10)
                product *= digit
            
            return product % t == 0
        
        while not is_divisible(n):
            n += 1
            
        return n",1447655866
Ivan Vasilenko,8symbols,488,3640,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        nums = sorted(nums)

        start = 0
        max_frequency = 0

        for end in range(len(nums)):
            while nums[end] - nums[start] > 2 * k:
                start += 1

            max_frequency = max(max_frequency, min(end - start + 1, numOperations))

        start, end = 0, -1
        counter = Counter()

        for middle in range(len(nums)):
            if middle > end:
                counter[nums[middle]] += 1
                end = middle

            while nums[middle] - nums[start] > k:
                counter[nums[start]] -= 1
                start += 1

            while end + 1 != len(nums) and nums[end + 1] - nums[middle] <= k:
                end += 1
                counter[nums[end]] += 1

            max_frequency = max(max_frequency, min(end - start + 1, numOperations + counter[nums[middle]]))

        return max_frequency",1447720169
harsh,harsh200300,489,3622,cpp,"#define ll long long
class Solution {
public:
    int maxFrequency(vector<int>& a, int k, int t) {
        map<int,int> mp;
        int n=a.size();
        sort(a.begin(),a.end());
        for(int i=0;i<n;i++){
            mp[a[i]]++;
        }
        int ans=1;
        for(int i=0;i<n;i++){
            int r=upper_bound(a.begin(),a.end(),a[i]+(k))-a.begin();
            int l=lower_bound(a.begin(),a.end(),a[i]-(k))-a.begin();
            int c=0;
            c+=(r-i-1);
            c+=(i-l);
            c-=(mp[a[i]] -1 );
            c=min(c,t);
            ans=max(ans,c+mp[a[i]]);
        }
        int i=0,j=0;
        while(i<n && j<n){
            while(j<n && a[j]-a[i]<=2*k && j-i+1 <= t){
                ans=max(ans,j-i+1);
                j++;
            }
            i++;
        }
        return ans;
        
    }
};",1447745315
harsh,harsh200300,489,3626,cpp,"class Solution {
public:
    int smallestNumber(int n, int t) {
        int pro=1;
        int ans=n;
        for(int i=n;i<=200;i++){
            int num=i;
            while(num>0){
                pro*= num%10;
                num/=10;
            }
            if(pro %t==0){
                ans=i;
                break;
            }
            pro=1;
        }
        return ans;
        
    }
};",1447660063
harsh,harsh200300,489,3640,cpp,"#define ll long long
class Solution {
public:
    int maxFrequency(vector<int>& a, int k, int t) {
        map<int,int> mp;
        int n=a.size();
        sort(a.begin(),a.end());
        for(int i=0;i<n;i++){
            mp[a[i]]++;
        }
        int ans=1;
        for(int i=0;i<n;i++){
            int r=upper_bound(a.begin(),a.end(),a[i]+(k))-a.begin();
            int l=lower_bound(a.begin(),a.end(),a[i]-(k))-a.begin();
            int c=0;
            c+=(r-i-1);
            c+=(i-l);
            c-=(mp[a[i]] -1 );
            c=min(c,t);
            ans=max(ans,c+mp[a[i]]);
        }
        int i=0,j=0;
        while(i<n && j<n){
            while(j<n && a[j]-a[i]<=2*k && j-i+1 <= t){
                ans=max(ans,j-i+1);
                j++;
            }
            i++;
        }
        return ans;
        
    }
};",1447753728
itachiUchiha27,itachiUchiha27,492,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        int max_num = *max_element(nums.begin(), nums.end());
        int size = max_num + k + 2;

        vector<int> freq(size, 0);
        for (int num : nums) {
            freq[num]++;
        }

        vector<int> pre(size, 0);
        pre[0] = freq[0];
        for (int i = 1; i < size; i++) {
            pre[i] = pre[i - 1] + freq[i];
        }

        int result = 0;

        for (int x = 0; x < size; x++) {
            if (freq[x] == 0 && numOperations == 0) {
                continue;
            }

            int left = max(0, x - k);
            int right = min(size - 1, x + k);

            int totalInRange = pre[right] - (left > 0 ? pre[left - 1] : 0);
            int canAdjust = totalInRange - freq[x];
            int total = freq[x] + min(numOperations, canAdjust);
            result = max(result, total);
        }

        return result;
    }
};",1447719188
itachiUchiha27,itachiUchiha27,492,3626,cpp,"class Solution {
public:
    int prod(int n) {
        int p = 1;
        while (n > 0) {
            int rem = n % 10;
            p *= rem;
            n /= 10;
        }
        return p;
    }

    int smallestNumber(int n, int t) {
        int maxIterations = 100000; // Set a limit to prevent infinite loop
        while (maxIterations-- > 0) {
            int val = prod(n);
            if (val % t == 0) {
                return n;
            }
            n++;
        }
        
        return -1;
    }
};
",1447667224
itachiUchiha27,itachiUchiha27,492,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        int n = nums.size();
        unordered_map<int, int> f;
        vector<pair<int, int>> e;

        for (int x : nums) {
            f[x]++;
            e.push_back({x - k, +1});
            e.push_back({x + k + 1, -1});
        }

        set<int> p;
        for (auto& ev : e) {
            p.insert(ev.first);
        }
        for (auto& fv : f) {
            p.insert(fv.first);
        }

        vector<int> sp(p.begin(), p.end());
        sort(e.begin(), e.end());

        int idx = 0;
        int c = 0;
        int m = 0;
        int ac = 0;

        for (int t : sp) {
            while (idx < e.size() && e[idx].first <= t) {
                c += e[idx].second;
                idx++;
            }

            ac = f.count(t) ? f[t] : 0;
            int pf = ac + min(numOperations, c - ac);
            m = max(m, pf);
        }

        return m;
    }
};",1447753898
Ravi_Kumar_Gupta,Ravi_Kumar_Gupta,493,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        int maxNum = *max_element(nums.begin(), nums.end());
        int size = maxNum + k + 2;
        vector<int> freq(size, 0);

        for (int num : nums) {
            freq[num]++;
        }

        vector<int> prefix(size, 0);
        prefix[0] = freq[0];
        for (int i = 1; i < size; ++i) {
            prefix[i] = prefix[i - 1] + freq[i];
        }

        int result = 0;
        for (int x = 0; x < size; ++x) {
            if (freq[x] == 0 && numOperations == 0) {
                continue;
            }

            int left = max(0, x - k);
            int right = min(size - 1, x + k);
            int totalInRange = prefix[right] - (left > 0 ? prefix[left - 1] : 0);
            int canAdjust = totalInRange - freq[x];
            int total = freq[x] + min(numOperations, canAdjust);
            result = max(result, total);
        }

        return result;
    }
};
",1447726290
Ravi_Kumar_Gupta,Ravi_Kumar_Gupta,493,3626,cpp,"class Solution {
public:
    int smallestNumber(int n, int t) {
        // Helper function to calculate product of digits of a number
        auto productOfDigits = [](int num) {
            int product = 1;
            while (num > 0) {
                int digit = num % 10;
                if (digit == 0) return 0; // if any digit is 0, product is 0
                product *= digit;
                num /= 10;
            }
            return product;
        };

        while (true) {
            int product = productOfDigits(n);
            if (product % t == 0) {
                return n; // found the smallest number whose digit product is divisible by t
            }
            n++; // try the next number
        }
    }
};
",1447669865
Ravi_Kumar_Gupta,Ravi_Kumar_Gupta,493,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        int n = nums.size();
        map<int, int> freqCount;
        vector<pair<int, int>> intervals;

        // Create frequency map and interval list for possible modification ranges
        for (int num : nums) {
            freqCount[num]++;
            intervals.emplace_back(num - k, 1);
            intervals.emplace_back(num + k + 1, -1);
        }

        // Collect unique positions for event processing
        set<int> uniquePoints;
        for (auto& interval : intervals) {
            uniquePoints.insert(interval.first);
        }
        for (auto& entry : freqCount) {
            uniquePoints.insert(entry.first);
        }

        // Sort intervals by their starting points
        sort(intervals.begin(), intervals.end());

        int eventIndex = 0;
        int currentActiveEvents = 0;
        int highestFrequency = 0;
        int baseCount = 0;

        // Process each unique point
        for (int point : uniquePoints) {
            // Process all events up to this point
            while (eventIndex < intervals.size() && intervals[eventIndex].first <= point) {
                currentActiveEvents += intervals[eventIndex].second;
                eventIndex++;
            }

            // If point exists in original array, add its frequency
            baseCount = freqCount.count(point) ? freqCount[point] : 0;

            // Calculate possible frequency with available operations
            int achievableFrequency = baseCount + min(numOperations, currentActiveEvents - baseCount);
            highestFrequency = max(highestFrequency, achievableFrequency);
        }

        return highestFrequency;
    }
};
",1447745832
Yash,ecuTjkRv49,494,3622,rust,"impl Solution {
    pub fn max_frequency(nums: Vec<i32>, k: i32, ops: i32) -> i32 {
        let max_num = *nums.iter().max().unwrap();
        let size = (max_num + k + 2) as usize;
        let mut count = vec![0; size];

        nums.iter().for_each(|&n| count[n as usize] += 1);

        let mut pre = vec![0; size];
        (1..size).for_each(|i| pre[i] = pre[i - 1] + count[i]);

        (0..size).fold(0, |max_freq, x| {
            let (l, r) = (x.saturating_sub(k as usize), (x + k as usize).min(size - 1));
            let candidates = pre[r] - if l > 0 { pre[l - 1] } else { 0 };
            let freq = count[x] + (candidates - count[x]).min(ops as usize);
            max_freq.max(freq)
        }) as i32
    }
}
",1447712664
Yash,ecuTjkRv49,494,3626,python3,"class Solution:
    def smallestNumber(self, n: int, t: int) -> int:
        while eval('*'.join(str(n))) % t: n+=1
        return n",1447663945
Yash,ecuTjkRv49,494,3640,rust,"impl Solution {
    pub fn max_frequency(nums: Vec<i32>, k: i32, ops: i32) -> i32 {
        let mut freq = std::collections::HashMap::new();
        let mut events = Vec::new();
        
        nums.iter().for_each(|&num| {
            *freq.entry(num).or_insert(0) += 1;
            events.push((num - k, 1));
            events.push((num + k + 1, -1i32)); 
        });
        
        let mut points: std::collections::BTreeSet<_> = freq.keys().cloned().collect();
        events.iter().for_each(|&(p, _)| { points.insert(p); });
        
        events.sort_unstable();
        
        let mut idx = 0;
        let mut max_freq = 0;
        let mut current_overlap = 0;
        
        points.iter().fold(0, |_, &t| {
            while idx < events.len() && events[idx].0 <= t {
                current_overlap += events[idx].1;
                idx += 1;
            }
            
            let actual_count = *freq.get(&t).unwrap_or(&0);
            let possible_freq = actual_count + ((current_overlap - actual_count) as i32).min(ops); 
            
            max_freq = max_freq.max(possible_freq);
            max_freq
        }) as i32
    }
}
",1447746216
Kostya,liepieshov,495,3622,python3,"
class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        def check(nums, mid, counts):
            result = counts.get(mid, 0) 
            # idx of >= mid-k
            left_part = bisect.bisect_left(nums, mid-k)
            # idx of > mid+k
            right_part = bisect.bisect_right(nums, mid+k)
            return min(right_part-left_part-result, numOperations)+result
        nums.sort()
        result = min(len(nums), 1) 
        counts = Counter(nums)
        for x in nums:
            result = max(check(nums, x, counts), result)
            result = max(check(nums, max(x-k, 1), counts), result)
            result = max(check(nums, max(x+k, 1), counts), result)
        return result",1447754308
Kostya,liepieshov,495,3626,python3,"def f(x, t):
    res = 1
    while x:
        d = x %10
        res *= d
        x //= 10
    return res % t == 0
class Solution:
    def smallestNumber(self, n: int, t: int) -> int:
        x = n
        while True:
            if f(x, t):
                return x
            x += 1
        ",1447666437
Kostya,liepieshov,495,3640,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        def check(nums, mid, counts):
            result = counts.get(mid, 0) 
            # idx of >= mid-k
            left_part = bisect.bisect_left(nums, mid-k)
            # idx of > mid+k
            right_part = bisect.bisect_right(nums, mid+k)
            return min(right_part-left_part-result, numOperations)+result
        nums.sort()
        result = min(len(nums), 1) 
        counts = Counter(nums)
        for x in nums:
            result = max(check(nums, x, counts), result)
            result = max(check(nums, max(x-k, 1), counts), result)
            result = max(check(nums, max(x+k, 1), counts), result)
        return result",1447753095
Rajdeep Maji,bits_069,496,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        sort(nums.begin(),nums.end());
        int n = nums.size();
        map<int,int> mp;
        for(auto x: nums) mp[x]++;
        int mn = max(0,nums[0]-k), mx = nums[n-1]+k;
        vector<int> arr(mx+1,0);
        for(auto x: nums){
            arr[x]++;
        }
        for(int i = 1; i<=mx; i++){
            arr[i]+=arr[i-1];
        }
        int mfreq = 1;
        for(int i = 1; i<=mx; i++){
            int prev = i - k, next = i + k;
            prev = max(0,prev), next = min(mx,next);
            int sum = (arr[next] - arr[i]) + (arr[i-1] - ((prev)?(arr[prev-1]):0));
            mfreq = max(mfreq,mp[i]+min(numOperations,sum));
        }
        return mfreq;
    }
};",1447694609
Rajdeep Maji,bits_069,496,3626,cpp,"class Solution {
public:
    int smallestNumber(int n, int t) {
        int ans;
        while(1){
            int sum = 1;
            int cur = n;
            while(cur>0){
                sum *= (cur%10);
                cur/=10;
            }
            if(sum%t == 0){
                ans = n;
                break;
            }
            n++;
        }
        return ans;
    }
};",1447655718
Rajdeep Maji,bits_069,496,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        int n = nums.size();
        map<int,int> mp;
        for(auto x: nums) mp[x]++;
        sort(nums.begin(),nums.end());
        set<int> st;
        vector<vector<int>> brr;
        set<int> st1;
        for(auto x: nums){
            brr.push_back({x - k , 1});
            brr.push_back({x + k + 1, -1});
            st1.insert(x - k);
            st1.insert(x);
        }
        int id = 0, cnt = 0, mx = 0;
        int m = brr.size();
        st.insert(1);
        sort(brr.begin(),brr.end());
        for(int i = 0; i<n-1; i++){
            int a = nums[i], b = nums[i+1];
            st.insert(a);
            st.insert(b);
            st.insert((a+b)/2);
            st.insert((a+b)/2 + 1);
            st.insert((a+b)/2 - 1);
            st.insert(a+1);
            st.insert(a-1);
            st.insert(b+1);
            st.insert(b-1);
        }
        

        for(auto x: st1){
            if(st.size() == 0) break;
            while(id<m && brr[id][0]<=x){
                cnt+=brr[id][1];
                id++;
            }
            int ans = 0;
            if(mp.find(x) != mp.end()) ans+=mp[x];
            mx = max(mx,ans+min(numOperations,cnt-ans));
        }
        return mx;
    }
};",1447762236
Sai Keerthan Palavarapu,saikeerthan14,498,3622,python3,"class Solution:
    def maxFrequency(self, nums, k, numOperations):
        from collections import defaultdict

        events_dict = defaultdict(int)
        freq_dict = defaultdict(int)

        for num in nums:
            l = num - k
            r = num + k
            events_dict[l] += 1
            events_dict[r + 1] -= 1
            freq_dict[num] += 1

        positions = set(events_dict.keys()) | set(freq_dict.keys())
        positions = sorted(positions)

        cnt = 0
        max_total_freq = 0

        for x in positions:
            if x in events_dict:
                cnt += events_dict[x]
            freq_x = freq_dict.get(x, 0)
            total_freq_x = freq_x + min(numOperations, cnt - freq_x)
            if total_freq_x > max_total_freq:
                max_total_freq = total_freq_x

        return max_total_freq",1447761195
Sai Keerthan Palavarapu,saikeerthan14,498,3626,cpp,"class Solution {
public:
    int smallestNumber(int n, int t) {
        int ans = 1, k = n;
        while(true) {
            n = k;
            ans = 1;
            // cout<<""s: ""<<n<<endl;
            while(n) {
                ans *= (n%10);
                n=n/10;
                // cout<<ans<<"" ""<<n<<endl;
            }
            // cout<<ans<<"" k:""<<k<<endl;
            if(ans%t==0) return k;
            else {
                k++;
            }
            // break;
        }
        return k;
    }
};",1447710059
Sai Keerthan Palavarapu,saikeerthan14,498,3640,python3,"class Solution:
    def maxFrequency(self, nums, k, numOperations):
        from collections import defaultdict

        events_dict = defaultdict(int)
        freq_dict = defaultdict(int)

        for num in nums:
            l = num - k
            r = num + k
            events_dict[l] += 1
            events_dict[r + 1] -= 1
            freq_dict[num] += 1

        positions = set(events_dict.keys()) | set(freq_dict.keys())
        positions = sorted(positions)

        cnt = 0
        max_total_freq = 0

        for x in positions:
            if x in events_dict:
                cnt += events_dict[x]
            freq_x = freq_dict.get(x, 0)
            total_freq_x = freq_x + min(numOperations, cnt - freq_x)
            if total_freq_x > max_total_freq:
                max_total_freq = total_freq_x

        return max_total_freq",1447762696
Shhh123,Shhh123,499,3622,python3,"from typing import List
from collections import defaultdict

class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        cnt = defaultdict(int)
        events = []
        for n in nums:
            cnt[n] += 1
            events.append((n - k, 1))
            events.append((n + k + 1, -1))

        # coord comp
        uniPts = sorted(set([e[0] for e in events] + list(cnt.keys())))
        events.sort()
        i = 0
        currO = 0
        maxF = 0
        # iterate and calc max f
        for pt in uniPts:
            while i < len(events) and events[i][0] <= pt:
                currO += events[i][1]
                i += 1
            baseC = cnt[pt] if pt in cnt else 0
            freq = baseC + min(numOperations, currO - baseC)
            maxF = max(maxF, freq)
        return maxF
        ",1447762857
Shhh123,Shhh123,499,3626,python3,"class Solution:
    def prod(self,num):
        pro = 1
        for dig in str(num):
            pro *= int(dig)
        return pro
    def smallestNumber(self, n: int, t: int) -> int:
        while True:
            dp = self.prod(n)
            if dp%t == 0:
                return n
            n += 1",1447684441
Shhh123,Shhh123,499,3640,python3,"from typing import List
from collections import defaultdict
import bisect

class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        cnt = defaultdict(int)
        events = []
        for n in nums:
            cnt[n] += 1
            events.append((n - k, 1))
            events.append((n + k + 1, -1))

        # coord comp
        uniPts = sorted(set([e[0] for e in events] + list(cnt.keys())))
        events.sort()
        i = 0
        currO = 0
        maxF = 0
        # iterate and calc max f
        for pt in uniPts:
            while i < len(events) and events[i][0] <= pt:
                currO += events[i][1]
                i += 1
            baseC = cnt[pt] if pt in cnt else 0
            freq = baseC + min(numOperations, currO - baseC)
            maxF = max(maxF, freq)
        return maxF



        ",1447758745
Fahad06,Fahad06,500,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int total) {
        vector<pair<int, int>> arr;
        int n = nums.size(), i = 0;
        unordered_map<int, int> v;
        while(i < n){
            arr.emplace_back(nums[i] + k + 1, -1);
            arr.emplace_back(nums[i] - k, +1);
            v[nums[i]]++;
            i++;
        }

        set<int> points;
        auto it = arr.begin();
        while(it != arr.end()){
            points.insert(it->first);
            it++;
        }

        auto fit = v.begin();
        while(fit != v.end()){
            points.insert(fit->first);
            fit++;
        }
        int idx = 0;
        int ans = 0, cmain = 0;
        int cur = 0;
        sort(arr.begin(), arr.end());

        auto pit = points.begin();
        while(pit != points.end()){
            int sz = (int) arr.size();
            int t = *pit;
            while(!(idx >= sz) && !(arr[idx].first > t)) {
                idx++;
                cur += arr[idx-1].second;
            }
            int mn = -1;
            cmain = v[t];

            
            if(!(cur - cmain >= total)){
                mn = cmain + (cur - cmain);
            } 
            else{
                mn = cmain + total;
            }

            pit++;
            ans = max(ans, mn);

        }

        return ans;
    }
};
",1447754460
Fahad06,Fahad06,500,3626,cpp,"class Solution {
public:
    int get(int n){
        int p = 1;
        while(n){
            p *= n%10;
            n/=10;
        }
        return p;
    }
    int smallestNumber(int n, int t) {
        while(1){
            if(get(n)%t == 0){
                return n;
            }
            n++;
        }
        return 0;
    }
};",1447656814
Fahad06,Fahad06,500,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int total) {
        vector<pair<int, int>> arr;
        int n = nums.size(), i = 0;
        unordered_map<int, int> v;
        while(i < n){
            arr.emplace_back(nums[i] + k + 1, -1);
            arr.emplace_back(nums[i] - k, +1);
            v[nums[i]]++;
            i++;
        }

        set<int> points;
        auto it = arr.begin();
        while(it != arr.end()){
            points.insert(it->first);
            it++;
        }

        auto fit = v.begin();
        while(fit != v.end()){
            points.insert(fit->first);
            fit++;
        }
        int idx = 0;
        int ans = 0, cmain = 0;
        int cur = 0;
        sort(arr.begin(), arr.end());

        auto pit = points.begin();
        while (pit != points.end()) {
            int sz = (int) arr.size();
            int t = *pit;
            while(!(idx >= sz) && !(arr[idx].first > t)) {
                idx++;
                cur += arr[idx-1].second;
            }
            int mn = -1;
            cmain = v[t];

            
            if(!(cur - cmain >= total)){
                mn = cmain + (cur - cmain);
            } 
            else{
                mn = cmain + total;
            }

            pit++;
            ans = max(ans, mn);

        }

        return ans;
    }
};
",1447755058
REED_W,REED_W,501,3622,java,"class Solution {
    public int maxFrequency(int[] nums, int k, int numOperations) {
        return sln1(nums, k, numOperations);
    }

    private int sln1(int[] nums, int k, int maxOps){
        int size = 300001; int offset = 100000;
        //int size = 16; int offset = 5;
        int[] arr = new int[size];
        int[] ops = new int[size];
        for(int i : nums){
            arr[i-k+offset]++;
            arr[i+k+offset+1]--;
            ops[i-k+offset]++;
            ops[i+offset]--;
            ops[i+offset+1]++;
            ops[i+k+offset+1]--;
        }
        int res = Math.max(arr[0] - Math.max(0, (ops[0] - maxOps)), 1);
        for(int i = 1;i<size;i++){
            arr[i] += arr[i-1];
            ops[i] += ops[i-1];
            res = Math.max(arr[i] - Math.max(0, (ops[i] - maxOps)), res);
        }
        //System.out.println(Arrays.toString(arr));
        //System.out.println(Arrays.toString(ops));
        return res;
    }
}",1447720065
REED_W,REED_W,501,3626,java,"class Solution {
    public int smallestNumber(int n, int t) {
        return sln1(n, t);
    }

    private int sln1(int n, int t){
        for(int i = 0;i<t;i++){
            int x = n+i;
            int prod = 1;
            while(x>0){
                prod *= x%10;
                prod %= t;
                x /= 10;
            }
            if( prod == 0) return n+i;
        }
        return -1;
    }
}",1447657762
REED_W,REED_W,501,3640,java,"class Solution {
    public int maxFrequency(int[] nums, int k, int numOperations) {
        return sln1(nums, k,numOperations );
    }

    private int sln1(int[] nums, int k, int maxOps){
        TreeMap<Integer, Integer> arr = new TreeMap<>();
        TreeMap<Integer, Integer> ops = new TreeMap<>();
        for(int i : nums){
            arr.merge(i-k, 1, Integer::sum);
            arr.merge(i+k+1, -1, Integer::sum);
            arr.merge(i, 0, Integer::sum);
            arr.merge(i+1, 0, Integer::sum);
            ops.merge(i-k, 1, Integer::sum);
            ops.merge(i, -1, Integer::sum);
            ops.merge(i+1, 1, Integer::sum);
            ops.merge(i+k+1, -1, Integer::sum);
        }
        int res = 1, sum = 0, sumOps =0;
        for(int x: arr.keySet()){
            sum += arr.get(x);
            sumOps += ops.get(x);
            res = Math.max(sum - Math.max(0, (sumOps - maxOps)), res);
        }

        return res;
    }
}",1447738656
mui-mit-hanni,mui-mit-hanni,502,3622,cpp,"#include <vector>
#include <algorithm>
#include <map>
#include <climits>
#include <iostream>
using namespace std;

class SegmentTree {
private:
    vector<int> tree;
    int n;

    void build(const vector<int>& nums, int node, int start, int end) {
        if (start == end) {
            tree[node] = nums[start];
        } else {
            int mid = (start + end) / 2;
            build(nums, 2 * node + 1, start, mid);
            build(nums, 2 * node + 2, mid + 1, end);
            tree[node] = max(tree[2 * node + 1], tree[2 * node + 2]);
        }
    }

    int queryMax(int node, int start, int end, int L, int R) {
        if (R < start || L > end) {
            return INT_MIN;
        }
        if (L <= start && end <= R) {
            return tree[node];
        }
        int mid = (start + end) / 2;
        int leftMax = queryMax(2 * node + 1, start, mid, L, R);
        int rightMax = queryMax(2 * node + 2, mid + 1, end, L, R);
        return max(leftMax, rightMax);
    }

public:
    SegmentTree(const vector<int>& nums) {
        n = nums.size();
        tree.resize(4 * n); 
        build(nums, 0, 0, n - 1); 
    }
    int rangeMax(int L, int R) {
        return queryMax(0, 0, n - 1, L, R);
    }
};

class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        sort(nums.begin(), nums.end());
        map<int,int> t;
        for(auto x : nums) t[x] += 1;

        map<int,int> u;
        vector<int> vd;
        for(auto x : t) {
            u[x.first] = vd.size();
            vd.push_back(x.second);
        }
        SegmentTree st(vd);
        int n = nums.size();
        int maxFreq = 1;  
        map<int,int> m;
        for (int i = 0; i < n; ++i) {
            int left = 0, high = i;
            m[nums[i]] += 1;
            int u_i = i;

            while (left <= high) {
                int mid = (left + high) / 2;
                bool can = false;
                if(nums[i] - nums[mid] <= k) {
                    if(i - mid + 1 - m[nums[i]] <= numOperations) {
                        can = true;
                    }
                }
                
                if(nums[i] - nums[mid] <= 2 * k) {
                    int e = nums[i] - k;
                    int f = nums[mid] + k;

                    auto it_e = u.lower_bound(e);

                    auto it_f = u.upper_bound(f);
                    if (it_f != u.begin()) --it_f;

                    if (it_e != u.end() && it_f != u.end() && it_e->first <= it_f->first) {
                        int q = st.rangeMax(it_e->second, it_f->second);
                        if (i - mid + 1 - q <= numOperations) {
                            can = true;
                        }
                        
                    }
                    if(i-mid+1<=numOperations){
                        can=true;
                    }
                }

                if (can) {
                    high = mid - 1;  
                    u_i = mid;
                } else {
                    left = mid + 1;  
                }
            }
            maxFreq = max(maxFreq, i - left + 1);
        }

        return maxFreq;
    }
};
",1447721168
mui-mit-hanni,mui-mit-hanni,502,3626,cpp,"class Solution {
public:
    int cal(int num){
            int product = 1;
            while (num > 0) {
                int digit = num % 10;
                product *= digit;
                num /= 10;
            }
            return product;
    }
    int smallestNumber(int n, int t) {
        int current = n;
        while (true) {
            int product = cal(current);
            if (product % t == 0) {
                return current;
            }
            current++;
        }
        return 1234;
    }
};
",1447654571
mui-mit-hanni,mui-mit-hanni,502,3640,cpp,"class SegmentTree {
private:
    vector<int> tree;
    int n;

    void build(const vector<int>& nums, int node, int start, int end) {
        if (start == end) {
            tree[node] = nums[start];
        } else {
            int mid = (start + end) / 2;
            build(nums, 2 * node + 1, start, mid);
            build(nums, 2 * node + 2, mid + 1, end);
            tree[node] = max(tree[2 * node + 1], tree[2 * node + 2]);
        }
    }

    int queryMax(int node, int start, int end, int L, int R) {
        if (R < start || L > end) {
            return INT_MIN;
        }
        if (L <= start && end <= R) {
            return tree[node];
        }
        int mid = (start + end) / 2;
        int leftMax = queryMax(2 * node + 1, start, mid, L, R);
        int rightMax = queryMax(2 * node + 2, mid + 1, end, L, R);
        return max(leftMax, rightMax);
    }

public:
    SegmentTree(const vector<int>& nums) {
        n = nums.size();
        tree.resize(4 * n); 
        build(nums, 0, 0, n - 1); 
    }
    int rangeMax(int L, int R) {
        return queryMax(0, 0, n - 1, L, R);
    }
};

class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        sort(nums.begin(), nums.end());
        map<int,int> t;
        for(auto x : nums) t[x] += 1;
        map<int,int> u;
        vector<int> vd;
        for(auto x : t) {
            u[x.first] = vd.size();
            vd.push_back(x.second);
        }
        SegmentTree st(vd);
        int n = nums.size();
        int maxFreq = 1;  
        unordered_map<int,int> m;
        for (int i = 0; i < n; ++i) {
            int left = 0, high = i;
            m[nums[i]] += 1;
            int u_i = i;
            while (left <= high) {
                int mid = (left + high) / 2;
                bool can = false;
                if(nums[i] - nums[mid] <= k) {
                    if(i - mid + 1 - m[nums[i]] <= numOperations) {
                        can = true;
                    }
                }
                if(nums[i] - nums[mid] <= 2 * k) {
                    int e = nums[i] - k;
                    int f = nums[mid] + k;
                    auto it_e = u.lower_bound(e);
                    auto it_f = u.upper_bound(f);
                    if (it_f != u.begin()) --it_f;
                    if (it_e != u.end() && it_f != u.end() && it_e->first <= it_f->first) {
                        int q = st.rangeMax(it_e->second, it_f->second);
                        if (i - mid + 1 - q <= numOperations) {
                            can = true;
                        }
                    }
                    if(i-mid+1<=numOperations){
                        can=true;
                    }
                }
                if (can) {
                    high = mid - 1;  
                    u_i = mid;
                } else {
                    if(i-mid+1<=maxFreq) break;
                    left = mid + 1;  
                }
            }
            maxFreq = max(maxFreq, i - u_i + 1);
            if(maxFreq==n) break;
        }
        return maxFreq;
    }
};
",1447730241
Peter Lin,inversionpeter,503,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        sort(nums.begin(), nums.end());
        int maximum, nowLeft = 0, nowRight = 0, total = 0;
        vector <int> numbers = { nums[0] }, counts = { 1 };
        for (int i = 1; i != nums.size(); ++i) {
            if (nums[i - 1] != nums[i]) {
                numbers.push_back(nums[i]);
                counts.push_back(1);
            }
            else {
                ++counts.back();
            }
        }
        total = maximum = counts[0];
        for (int i = 1; i != numbers.size(); ++i) {
            total += counts[i];
            while (numbers[nowLeft] + (k << 1) < numbers[i]) {
                total -= counts[nowLeft];
                ++nowLeft;
            }
            maximum = max(maximum, min(total, numOperations));
        }
        nowLeft = nowRight = total = 0;
        while (nowRight != numbers.size() && numbers[0] + k >= numbers[nowRight]) {
            total += counts[nowRight];
            ++nowRight;
        }
        maximum = max(maximum, counts[0] + min(numOperations, total - counts[0]));
        for (int i = 1; i != numbers.size(); ++i) {
            while (nowRight != numbers.size() && numbers[i] + k >= numbers[nowRight]) {
                total += counts[nowRight];
                ++nowRight;
            }
            while (numbers[nowLeft] + k < numbers[i]) {
                total -= counts[nowLeft];
                ++nowLeft;
            }
            maximum = max(maximum, counts[i] + min(numOperations, total - counts[i]));
        }
        return maximum;
    }
};",1447753841
Peter Lin,inversionpeter,503,3626,cpp,"class Solution {
public:
    int smallestNumber(int n, int t) {
        int answer = n, buffer, product;
        while (1) {
            buffer = answer;
            product = 1;
            while (buffer) {
                product *= (buffer % 10);
                buffer /= 10;
                product %= t;
            }
            if (!product) {
                break;
            }
            ++answer;
        }
        return answer;
    }
};",1447654855
Peter Lin,inversionpeter,503,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        sort(nums.begin(), nums.end());
        long long maximum, nowLeft = 0, nowRight = 0, total = 0;
        vector <long long> numbers = { nums[0] }, counts = { 1 };
        for (int i = 1; i != nums.size(); ++i) {
            if (nums[i - 1] != nums[i]) {
                numbers.push_back(nums[i]);
                counts.push_back(1);
            }
            else {
                ++counts.back();
            }
        }
        total = maximum = counts[0];
        for (int i = 1; i != numbers.size(); ++i) {
            total += counts[i];
            while (numbers[nowLeft] + (k << 1) < numbers[i]) {
                total -= counts[nowLeft];
                ++nowLeft;
            }
            maximum = max(maximum, min(total, (long long)numOperations));
        }
        nowLeft = nowRight = total = 0;
        while (nowRight != numbers.size() && numbers[0] + k >= numbers[nowRight]) {
            total += counts[nowRight];
            ++nowRight;
        }
        maximum = max(maximum, counts[0] + min((long long)numOperations, total - counts[0]));
        for (int i = 1; i != numbers.size(); ++i) {
            while (nowRight != numbers.size() && numbers[i] + k >= numbers[nowRight]) {
                total += counts[nowRight];
                ++nowRight;
            }
            while (numbers[nowLeft] + k < numbers[i]) {
                total -= counts[nowLeft];
                ++nowLeft;
            }
            maximum = max(maximum, counts[i] + min((long long)numOperations, total - counts[i]));
        }
        return maximum;
    }
};",1447755196
Aditya agrahari,adityaagrahari10112002,504,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        int maxEle = *max_element(nums.begin(), nums.end());
        int size = maxEle + k + 2;
        vector<int> v(size, 0);

        for (int i : nums) {
            v[i]++;
        }

        vector<int> t(size, 0);
        t[0] = v[0];
        for (int i = 1; i < size; i++) {
            t[i] = t[i - 1] + v[i];
        }

        int res = 0;
        for (int x = 0; x < size; x++) {
            if (v[x] == 0 && numOperations == 0) continue;

            int left = max(0, x - k);
            int right = min(size - 1, x + k);
            int temp = t[right] - (left > 0 ? t[left - 1] : 0);
            int c = temp - v[x];
            int total = v[x] + min(numOperations, c);
            res = max(res, total);
        }

        return res;
    }
};
",1447723467
Aditya agrahari,adityaagrahari10112002,504,3626,cpp,"class Solution {
public:
    int smallestNumber(int n, int t) {
        while (1) {
            int p = 1;
            int num = n;
            
            while (num > 0) {
                int t = num %10;
                p = p * t;
                num /= 10;
            }
            
            if (p % t == 0) {
                return n;
            }
            
            n++;
        }
    }
};
",1447662848
Aditya agrahari,adityaagrahari10112002,504,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        int n = nums.size();
        unordered_map<int, int> f;
        vector<pair<int, int>> e;

        for (int x : nums) {
            f[x]++;
            e.push_back({x - k, 1});
            e.push_back({x + k + 1, -1});
        }

        set<int> p;
        for (auto& ev : e) {
            p.insert(ev.first);
        }
        for (auto& q : f) {
            p.insert(q.first);
        }

        sort(e.begin(), e.end());

        int i = 0, c = 0, m = 0, a = 0;

        for (int t : p) {
            while (i < e.size() && e[i].first <= t) {
                c += e[i].second;
                i++;
            }

            a = f.count(t) > 0 ? f[t] : 0;
            m = max(m, a + min(numOperations, c - a));
        }

        return m;
    }
};
",1447747652
Ayush Sharma,ayush-018,505,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        ios_base::sync_with_stdio(false);
        cin.tie(nullptr);
        cout.tie(nullptr);
        int count=0;
        int maxN = *max_element(nums.begin(), nums.end());
        int size = maxN + k + 2;
        vector<int> freq(size, 0);

        for (int num : nums) {
            freq[num]++;
        }
        
        vector<int> tmp(size, 0);
        tmp[0] = freq[0];
        for (int i = 1; i < size; i++) {
            tmp[i] = tmp[i - 1] + freq[i];
        }

        int ans = 0;
        for (int x = 0; x < size; x++) {
            if (freq[x] == 0 && numOperations == 0) {
                count++;
                continue;
            }

            int l = max(0, x - k);
            int r = min(size - 1, x + k);
            int tRange = tmp[r] - (l > 0 ? tmp[l - 1] : 0);
            int temp = tRange - freq[x];
            int t = freq[x] + min(numOperations, temp);
            ans = max(ans, t);
        }

        return ans;
    }
};",1447760404
Ayush Sharma,ayush-018,505,3626,cpp,"class Solution {
public:
    int smallestNumber(int n, int t) {
        ios_base::sync_with_stdio(false);
	    cin.tie(nullptr);
	    cout.tie(nullptr);
        int cNum = n;
        
        while (true) {
            if (isProductDbyK(cNum, t)) {
                return cNum;
            }
            cNum++;
        }
    }

private:
    bool isProductDbyK(int num, int t) {
        int prod = calcProduct(num);
        return (prod % t == 0);
    }

    int calcProduct(int num) {
        int p = 1;
        
        while (num > 0) {
            int d = num % 10;
            if (d == 0) {
                return 0;
            }
            p *= d;
            num /= 10;
        }
        return p;
    }
};",1447763672
Ayush Sharma,ayush-018,505,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        ios_base::sync_with_stdio(false);
    	cin.tie(nullptr);
    	cout.tie(nullptr);
        set<int>p;
        int countT=0;
        map<int, int> freq;
        vector<pair<int, int>> e;

        for (int num : nums) {
            freq[num]++;
            e.push_back({num - k, +1});
            e.push_back({num + k + 1, -1});
        }

        
        for (auto event : e) {
            p.insert(event.first);
        }
        for (auto tmp : freq) {
            p.insert(tmp.first);
        }

        sort(e.begin(), e.end());

        int i = 0, temp = 0, maxF = 0;
        int ans = 0;

        for (int t : p) {
            while (i < e.size() && e[i].first <= t) {
                temp += e[i].second;
                i++;
            }

            ans = (freq.count(t) ? freq[t] : 0);
            countT++;
            int pF = ans + min(numOperations, temp - ans);
            maxF = max(maxF, pF);
        }

        return maxF;
    }
};",1447755903
Tanish Moral,9zoqpeHbp3,506,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        int maxNum = getMax(nums);
        int size = maxNum + k + 2;
        vector<int> freq = calculateFrequency(nums, size);
        vector<int> prefixSum = calculatePrefixSum(freq);

        return findMaxFrequency(freq, prefixSum, k, numOperations, size);
    }

private:
    int getMax(const vector<int>& nums) {
        return *max_element(nums.begin(), nums.end());
    }

    vector<int> calculateFrequency(const vector<int>& nums, int size) {
        vector<int> freq(size, 0);
        for (int num : nums) {
            freq[num]++;
        }
        return freq;
    }

    vector<int> calculatePrefixSum(const vector<int>& freq) {
        vector<int> prefixSum(freq.size(), 0);
        prefixSum[0] = freq[0];
        for (int i = 1; i < freq.size(); i++) {
            prefixSum[i] = prefixSum[i - 1] + freq[i];
        }
        return prefixSum;
    }

    int findMaxFrequency(const vector<int>& freq, const vector<int>& prefixSum, int k, int numOperations, int size) {
        int result = 0;
        for (int x = 0; x < size; x++) {
            if (freq[x] == 0 && numOperations == 0) {
                continue;
            }

            int left = max(0, x - k);
            int right = min(size - 1, x + k);
            int totalInRange = prefixSum[right] - (left > 0 ? prefixSum[left - 1] : 0);
            int canAdjust = totalInRange - freq[x];
            int total = freq[x] + min(numOperations, canAdjust);
            result = max(result, total);
        }
        return result;
    }
};
",1447701330
Tanish Moral,9zoqpeHbp3,506,3626,cpp,"class Solution {
public:
    int smallestNumber(int n, int t) {
        for (int i = n; i <= 1000; ++i) {
            if (isProductDivisible(i, t)) {
                return i;
            }
        }
        return -1;
    }

private:
    bool isProductDivisible(int num, int t) {
        int product = 1;
        bool hasZero = false;

        while (num > 0) {
            int digit = num % 10;
            if (digit == 0) {
                hasZero = true;
                break;
            }
            product *= digit;
            num /= 10;
        }

        return hasZero || (product % t == 0);
    }
};
",1447679996
Tanish Moral,9zoqpeHbp3,506,3640,cpp,"
class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        vector<pair<int, int>> events;
        map<int, int> freq;
        set<int> points;

        collectEventsAndFrequencies(nums, k, events, freq, points);
        sort(events.begin(), events.end());
        
        return findMaxFrequency(events, freq, points, numOperations);
    }

private:
    void collectEventsAndFrequencies(const vector<int>& nums, int k, 
                                      vector<pair<int, int>>& events, 
                                      map<int, int>& freq, set<int>& points) {
        for (int num : nums) {
            freq[num]++;
            events.push_back({num - k, +1});
            events.push_back({num + k + 1, -1});
            points.insert(num - k);
            points.insert(num + k + 1);
            points.insert(num);
        }
    }

    int findMaxFrequency(const vector<pair<int, int>>& events, 
                         const map<int, int>& freq, 
                         const set<int>& points, 
                         int numOperations) {
        int idx = 0, currentOverlap = 0, maxFreq = 0, actualCount = 0;
        set<int>::iterator it = points.begin();

        for (; it != points.end(); ++it) {
            int t = *it;

            while (idx < events.size() && events[idx].first <= t) {
                currentOverlap += events[idx].second;
                idx++;
            }

            actualCount = (freq.find(t) != freq.end()) ? freq.at(t) : 0;
            int possibleFreq = actualCount + min(numOperations, currentOverlap - actualCount);
            maxFreq = max(maxFreq, possibleFreq);
        }

        return maxFreq;
    }
};",1447731191
Rajeev Ranjan,ThatsRajeev,509,3622,java,"class Solution {
    public int maxFrequency(int[] nums, int k, int numOperations) {
        int n = nums.length, ans = 0, left = 0, right = 0;
        Arrays.sort(nums);

        HashMap<Integer, Integer> count = new HashMap<>();
        for(int num: nums) count.put(num, count.getOrDefault(num, 0)+1);

        //choose mid as reference point
        for(int mid=0; mid<n; mid++) {
            //fix left pointer
            while(nums[mid] - nums[left] > k) {
                left++;
            }
            //fix right pointer
            while(right < n-1 && nums[right+1] - nums[mid] <= k) {
                right++;
            }

            int total = right - left + 1;
            ans = Math.max(ans, Math.min(total - count.get(nums[mid]), numOperations) + count.get(nums[mid]));
        }

        //choose non existent number as reference point
        left = 0;
        for(right = 0; right < n; right++) {
            int mid = (nums[left] + nums[right]) / 2;
            while(mid - nums[left] > k || nums[right] - mid > k) {
                left++;
                mid = (nums[left] + nums[right]) / 2;
            }
            ans = Math.max(ans, Math.min(right - left + 1, numOperations));
        }
        return ans;
    }
}",1447754291
Rajeev Ranjan,ThatsRajeev,509,3626,java,"class Solution {
    public boolean isDiv(int n, int t) {
        int prod = 1;
        while(n > 0) {
            int dig = n % 10;
            prod *= dig;
            n /= 10;
        }

        return prod % t == 0;
    }
    public int smallestNumber(int n, int t) {
        while(!isDiv(n, t)) {
            n++;
        }

        return n;
    }
}",1447660153
Rajeev Ranjan,ThatsRajeev,509,3640,java,"class Solution {
    public int maxFrequency(int[] nums, int k, int numOperations) {
        int n = nums.length, ans = 0, left = 0, right = 0;
        Arrays.sort(nums);

        HashMap<Integer, Integer> count = new HashMap<>();
        for(int num: nums) count.put(num, count.getOrDefault(num, 0)+1);

        //choose mid as reference point
        for(int mid=0; mid<n; mid++) {
            //fix left pointer
            while(nums[mid] - nums[left] > k) {
                left++;
            }
            //fix right pointer
            while(right < n-1 && nums[right+1] - nums[mid] <= k) {
                right++;
            }

            int total = right - left + 1;
            ans = Math.max(ans, Math.min(total - count.get(nums[mid]), numOperations) + count.get(nums[mid]));
        }

        //choose non existent number as reference point
        left = 0;
        for(right = 0; right < n; right++) {
            int mid = (nums[left] + nums[right]) / 2;
            while(mid - nums[left] > k || nums[right] - mid > k) {
                left++;
                mid = (nums[left] + nums[right]) / 2;
            }
            ans = Math.max(ans, Math.min(right - left + 1, numOperations));
        }
        return ans;
    }
}",1447756344
ravikumar2200k,ravikumar2200k,510,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int noOfOperations) {
        int max_num = *max_element(nums.begin(), nums.end());
        int size = max_num + k + 2;
        
        vector<int> frequency(size, 0);
        
        for (int num : nums) {
            frequency[num]++;
        }
        
        vector<int> pre(size, 0);
        pre[0] = frequency[0];
        
        for (int i = 1; i < size; i++) {
            pre[i] = pre[i - 1] + frequency[i];
        }
        
        int result = 0;
        
        for (int x = 0; x < size; x++) {
            if (frequency[x] == 0 && noOfOperations == 0) {
                continue;
            }
            
            int L = max(0, x - k);
            int R = min(size - 1, x + k);
            int ranges = pre[R] - (L > 0 ? pre[L - 1] : 0);
            int canAdjust = ranges - frequency[x];
            int total = frequency[x] + min(noOfOperations, canAdjust);
            result = max(result, total);
        }
        
        return result;
    }
};
",1447718259
ravikumar2200k,ravikumar2200k,510,3626,cpp,"class Solution {
public:
    int smallestNumber(int n, int t) {
        while (true) {
            if (product(n) % t == 0) {
                return n;
            }
            n++;
        }
    }

private:
    int product(int num) {
        long long product = 1;
        while (num > 0) {
            long long digits = num % 10;
            if (digits == 0) return 0; 
            product *= digits;
            num /= 10;
        }
        return product;
    }
};
",1447662482
ravikumar2200k,ravikumar2200k,510,3640,cpp,"#include <vector>
#include <unordered_map>
#include <set>
#include <algorithm>
using namespace std;

class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        int n = nums.size();
        unordered_map<int, int> freq;
        vector<pair<int, int>> events;
        
        for (int num : nums) {
            freq[num]++;
            events.push_back({num - k, 1});
            events.push_back({num + k + 1, -1});
        }
        
        set<int> points;
        for (const auto& event : events) {
            points.insert(event.first);
        }
        for (const auto& p : freq) {
            points.insert(p.first);
        }
        
        vector<int> sorted_points(points.begin(), points.end());
        
        sort(events.begin(), events.end());
        
        int idx = 0;
        int current_overlap = 0;
        int max_freq = 0;
        int actual_count = 0;
        
        for (int t : sorted_points) {
            while (idx < events.size() && events[idx].first <= t) {
                current_overlap += events[idx].second;
                idx++;
            }
            
            actual_count = (freq.find(t) != freq.end()) ? freq[t] : 0;
            int possible_freq = actual_count + min(numOperations, current_overlap - actual_count);
            max_freq = max(max_freq, possible_freq);
        }
        
        return max_freq;
    }
};
",1447731659
Moulik Roy,Jarvis7007,512,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        sort(nums.begin(), nums.end());
        int minNum=*min_element(nums.begin(), nums.end()), maxNum=*max_element(nums.begin(), nums.end()), maxFreq=0;
        for(int num=minNum; num<=maxNum; num++){
            int count=upper_bound(nums.begin(), nums.end(), num+k)-lower_bound(nums.begin(), nums.end(), num-k);
            int countNum=upper_bound(nums.begin(), nums.end(), num)-lower_bound(nums.begin(), nums.end(), num);
            maxFreq=max(maxFreq, min(count, numOperations+countNum));
        }
        return maxFreq;
    }
};",1447699628
Moulik Roy,Jarvis7007,512,3626,cpp,"class Solution {
private:
    int productOfDigits(int n) {
        int product=1;
        while(n!=0){
            int digit=n%10;
            product*=digit;
            n/=10;
        }
        return product;
    }
    
public:
    int smallestNumber(int n, int t) {
        while(productOfDigits(n)%t!=0)
            n++;
        return n;
    }
};",1447660894
Moulik Roy,Jarvis7007,512,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        map <int, int> freqNum, freq;
        for(const int &num: nums){
            freqNum[num]++;
            if(freq.find(num)==freq.end())
                freq[num]=0;
            freq[num-k]++;
            if(freq.find(num+k)==freq.end())
                freq[num+k]=0;
            freq[num+k+1]--;
        }
        int sum=0, maxFreq=0;
        for(const auto &it: freq){
            sum+=it.second;
            int count=(freqNum.find(it.first)!=freqNum.end()?freqNum[it.first]:0);
            maxFreq=max(maxFreq, min(sum, numOperations+count));
        }
        return maxFreq;
    }
};",1447732201
taruniscoding,taruniscoding,513,3622,cpp,"class Solution {
public:
    int solve(long num, vector<int> & nums){
        int s = 0, e = nums.size() -1;
        int ans = nums.size();
        while(s <= e){
            int m = s + (e-s)/2;
            if(nums[m] > num){
                ans = m;
                e = m -1;
            }
            else if(nums[m] <= num){
                s = m + 1;
            }
        }
        return ans;
    }
    int solve2(long num, vector<int> & nums){
        int s = 0, e = nums.size() -1;
        int ans = -1;
        while(s <= e){
            int m = s + (e-s)/2;
            if(nums[m] < num){
                ans = m;
                s = m+1;
            }
            else{
                e = m -1;
            }
        }
        return ans;
    }
    
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        sort(nums.begin(), nums.end());
        unordered_map<int, int> counts;
        for(int i : nums){
            counts[i]++;
        }
        int ans = -1;
        for(int i = 0; i<nums.size(); i++){
            
            int forwardIndex = solve((long)nums[i] + (long)k, nums);
            int backwardIndex = solve2((long)nums[i] - (long)k, nums);
            
            // cout << nums[i] << "" "" << forwardIndex << "" "" << backwardIndex << endl;
            // ans = max(ans, index - i);
            int eligible = forwardIndex - i + i - backwardIndex - counts[nums[i]] - 1;
            ans = max(ans, counts[nums[i]] + min(numOperations, eligible));
            // cout << eligible << "" "" << ans << endl << endl;;
            
            if(i == 0 || nums[i] != nums[i - 1]){
                forwardIndex = solve((long)nums[i] + 2 * (long)k, nums);
                eligible = forwardIndex - i - counts[nums[i]];
                
                ans = max(ans, min(numOperations, counts[nums[i]] + eligible));
                
                backwardIndex = solve((long)nums[i] - 2 * (long)k, nums);
                eligible = i - backwardIndex -1;
                ans = max(ans, min(numOperations, counts[nums[i]] + eligible));
            }
            // cout << ans << endl;
            
        }
        // cout << endl;
        return ans;
    }
};",1447733914
taruniscoding,taruniscoding,513,3626,cpp,"class Solution {
public:
    int smallestNumber(int n, int t) {
        for(int i = n; ; i++){
            int prod = 1;
            int temp = i;
            while(temp){
                prod *= (temp%10);
                temp /= 10;
            }
            if(prod % t == 0)
                return i;
                
        }
        return 200;
    }
};",1447656667
taruniscoding,taruniscoding,513,3640,cpp,"class Solution {
public:
    int solve(long num, vector<int>& nums){
        int s = 0, e = nums.size() - 1;
        int ans = nums.size();
        while(s <= e){
            int m = s + (e-s)/2;
            if(nums[m] > num){
                ans = m;
                e = m -1;
            }
            else if(nums[m] <= num){
                s = m + 1;
            }
        }
        return ans;
    }
    
    int solve2(long num, vector<int>& nums){
        int s= 0, e = nums.size() -1 ;
        int ans = -1;
        while(s <= e){
            int m = s + (e-s)/2;
            if(nums[m] < num){
                ans = m;
                s = m + 1;
            }
            else
                e = m-1;
        }
        return ans;
    }
    
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        sort(nums.begin(), nums.end());
        unordered_map<int, int> counts;
        for(int i: nums){
            counts[i]++;
        }
        int ans = -1;
        for(int i = 0; i<nums.size(); i++){
            int f = solve((long)nums[i] + (long)k, nums);
            int b = solve2((long)nums[i] - (long)k, nums);
            
            int elig = f - i + i - b - counts[nums[i]] - 1;
            ans = max(ans, counts[nums[i]] + min(numOperations, elig));
            
            if(i == 0 || nums[i] != nums[i-1]){
                f = solve((long)nums[i] + 2 * (long)k, nums);
                elig = f - i - counts[nums[i]];
                
                ans = max(ans, min(numOperations, counts[nums[i]] + elig));
                
                b = solve2((long)nums[i] - 2 * (long)k, nums);
                elig = i - b - 1;
                ans = max(ans, min(numOperations, counts[nums[i]] + elig));
            }
        }
        return ans;
    }
};",1447748989
hanbro0112,hanbro0112,514,3622,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        nums.sort()
        ans = 1
        cnt = Counter(nums)
        j1, q1 = 0, deque() # x
        j2, q2 = 0, deque() # x ~ x + k
        for i, x in enumerate(nums):
            while q1 and q1[0] + k < x:
                q1.popleft()
            
            while j1 < len(nums) and nums[j1] - k <= x:
                q1.append(nums[j1])
                j1 += 1
            ans = max(ans, min(len(q1), cnt[x] + numOperations))
            
            while j2 < len(nums) and nums[j2] - k <= x + k:
                while q2 and q2[0] + k < nums[j2] - k:
                    q2.popleft()
                q2.append(nums[j2])
                ans = max(ans, min(len(q2), numOperations))
                j2 += 1
        return ans",1447748745
hanbro0112,hanbro0112,514,3626,python3,"class Solution:
    def smallestNumber(self, n: int, t: int) -> int:
        while True:
            product = 1
            for c in str(n):
                product *= int(c)
            if product % t == 0:
                return n
            n += 1",1447654341
hanbro0112,hanbro0112,514,3640,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        nums.sort()
        ans = 1
        cnt = Counter(nums)
        j1, q1 = 0, deque() # x
        j2, q2 = 0, deque() # x ~ x + k
        for i, x in enumerate(nums):
            while q1 and q1[0] + k < x:
                q1.popleft()
            
            while j1 < len(nums) and nums[j1] - k <= x:
                q1.append(nums[j1])
                j1 += 1
            ans = max(ans, min(len(q1), cnt[x] + numOperations))
            
            while j2 < len(nums) and nums[j2] - k <= x + k:
                while q2 and q2[0] + k < nums[j2] - k:
                    q2.popleft()
                q2.append(nums[j2])
                ans = max(ans, min(len(q2), numOperations))
                j2 += 1
        return ans",1447748998
BangaloreVK,BangaloreVK,515,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int op) {
        map<int,int> mp;
        for(auto e : nums) mp[e]++;

        sort(nums.begin(), nums.end());

        int ans = 1;
        for(int val = nums[0]; val <= nums.back(); ++val){
            auto s = lower_bound(nums.begin(), nums.end(), val-k) - nums.begin();
            auto e = upper_bound(nums.begin(), nums.end(), val+k) - nums.begin()-1;
            int cnt = e-s+1-mp[val];
            ans = max(ans, mp[val] + min(cnt, op));
        }
        return ans;
    }
};",1447674652
BangaloreVK,BangaloreVK,515,3626,cpp,"class Solution {
    int product(int num){
        int ans = 1;
        while(num){
            ans *= (num % 10);
            num /= 10;
        }
        return ans;
    }
public:
    int smallestNumber(int n, int t) {
        while(1){
            if(product(n) % t == 0){
                return n;
            }
            ++n;
        }
        return -1;
    }
};",1447655122
BangaloreVK,BangaloreVK,515,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int op) {
        map<int,int> mp;
        for(auto e : nums) mp[e]++;

        sort(nums.begin(), nums.end());
int n = nums.size();
        vector<int> freq(n, 0);
        freq[0] = mp[nums[0]];
        for(int i = 1; i < n; ++i){
            freq[i] = max(mp[nums[i]], freq[i-1]);
        }

        int ans = 1;
        for(int i = 0; i < n; ++i){
            long long val = (long long)nums[i] + 2*k;
            val = min(val, (long long)INT_MAX);
            auto j = upper_bound(nums.begin(), nums.end(), (int)val) - nums.begin()-1;
            int cnt = j-i+1;
            if(cnt <= op){
                ans = max(ans, cnt);
            }
            else{
                ans = max(ans, op);
            }
        }

        for(int val : nums){
            auto s = lower_bound(nums.begin(), nums.end(), val-k) - nums.begin();
            auto e = upper_bound(nums.begin(), nums.end(), val+k) - nums.begin()-1;
            int cnt = e-s+1-mp[val];
            ans = max(ans, mp[val] + min(cnt, op));
        }
   
        return ans;
    }
};",1447749083
code_beyond_9-11,code_beyond_9-11,516,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int ops) {
        int n = nums.size();

        vector<pair<int,int>> v;
        map<int,int> freq;

        for(auto num : nums){
            freq[num]++;
            v.push_back({num-k,1});
            v.push_back({num+k+1,-1});
        }

        set<int> st;
        for(auto p :v ){
            st.insert(p.first);
        }
        for(auto p : freq){
            st.insert(p.first);
        }

        int index = 0;
        int freqChange = 0;
        int ans = 0;
        int currFreq = 0;
        sort(v.begin(),v.end());

        for(auto it : st){
            while(index < v.size() && v[index].first <= it){
                freqChange += v[index].second;
                index++;
            }
            if(freq.count(it)){
                currFreq = freq[it];
            }else{
                currFreq = 0;
            }

            int freq2 = currFreq + min(ops,freqChange-currFreq);
            ans = max(ans,freq2);
        }
        return ans;
        
    }
};",1447757086
code_beyond_9-11,code_beyond_9-11,516,3626,cpp,"class Solution {
public:
    int fun(int n){
        int p = 1;
        while(n>0){
            int temp = n%10;
            p = p * temp;
            n = n/10;
        }
        return p;
    }
    int smallestNumber(int n, int t) {

        while(true){
            if(fun(n)%t == 0){
                return n;
            }
            n++;
        }
    }
};",1447662267
code_beyond_9-11,code_beyond_9-11,516,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int ops) {
        int n = nums.size();

        vector<pair<int,int>> v;
        map<int,int> freq;

        for(auto num : nums){
            freq[num]++;
            v.push_back({num-k,1});
            v.push_back({num+k+1,-1});
        }

        set<int> st;
        for(auto p :v ){
            st.insert(p.first);
        }
        for(auto p : freq){
            st.insert(p.first);
        }

        int index = 0;
        int freqChange = 0;
        int ans = 0;
        int currFreq = 0;
        sort(v.begin(),v.end());

        for(auto it : st){
            while(index < v.size() && v[index].first <= it){
                freqChange += v[index].second;
                index++;
            }
            if(freq.count(it)){
                currFreq = freq[it];
            }else{
                currFreq = 0;
            }

            int freq2 = currFreq + min(ops,freqChange-currFreq);
            ans = max(ans,freq2);
        }
        return ans;
        
    }
};",1447755975
Puspendra Singh Yadav,puspendra_09,517,3622,cpp,"#include<ext/pb_ds/assoc_container.hpp>
#include<ext/pb_ds/tree_policy.hpp>

using namespace __gnu_pbds;

#define idx(x)        find_by_order(x) //element at index x
#define less_then(x)  order_of_key(x)  //position of element x in sorted set(0 - based)

template<class T> using pbds = tree<T, null_type, less_equal<T>, rb_tree_tag, tree_order_statistics_node_update> ;



class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int op) {
        pbds<int> ms;
        int n = nums.size();
        for(int i = 0; i < n; i++) {
            ms.insert(nums[i]);
        }
        
        map<int,int> mp;
        
        for(auto &ele: nums) {
            mp[ele]++;
        }
        
        int ans = 1;
        
        set<int> st(nums.begin() , nums.end());
        
        int maxi = *max_element(nums.begin() , nums.end());
        
        
        for(int ele = 1; ele <= maxi; ele++) {
            int lb = ele - k;
            int ub = ele + k;
            int first = ms.order_of_key(*ms.upper_bound(lb));
            auto itr = ms.lower_bound(ub);
            int second;
            if(itr == ms.end()) {
                second = n - 1;
            }
            else {
                second = ms.order_of_key(*itr) - 1;
            }
            
            int cnt = second - first + 1;
            int rem = cnt - mp[ele];
            
            int can = min(rem , op) + mp[ele];
            ans = max(ans , can);
        }
        return ans;
    }
};",1447703876
Puspendra Singh Yadav,puspendra_09,517,3626,cpp,"class Solution {
public:
    int smallestNumber(int n, int t) {
        for(int i = n; ; i++) {
            string s = to_string(i);
            long long int p = 1;
            for(auto ch: s) {
                p = (p * (ch - '0'));
                if(p % t == 0) return i;
            }
        }
        return 39;
    }
};",1447696435
Puspendra Singh Yadav,puspendra_09,517,3640,cpp,"#include<ext/pb_ds/assoc_container.hpp>
#include<ext/pb_ds/tree_policy.hpp>

using namespace __gnu_pbds;

#define idx(x)        find_by_order(x) //element at index x
#define less_then(x)  order_of_key(x)  //position of element x in sorted set(0 - based)

template<class T> using pbds = tree<T, null_type, less_equal<T>, rb_tree_tag, tree_order_statistics_node_update> ;



class Solution {
public:
     int helper(vector<int> nums, int k, int op) {
        pbds<int> ms;
        int n = nums.size();
        for(int i = 0; i < n; i++) {
            ms.insert(nums[i]);
        }
        
        map<int,int> mp;
        
        for(auto &ele: nums) {
            mp[ele]++;
        }
        
        int ans = 1;
        
        set<int> st(nums.begin() , nums.end());
        
        int maxi = *max_element(nums.begin() , nums.end());
        
        
        for(auto &ele: st) {
            int lb = ele - k;
            int ub = ele + k;
            int first = ms.order_of_key(*ms.upper_bound(lb));
            auto itr = ms.lower_bound(ub);
            int second;
            if(itr == ms.end()) {
                second = n - 1;
            }
            else {
                second = ms.order_of_key(*itr) - 1;
            }
            
            int cnt = second - first + 1;
            int rem = cnt - mp[ele];
            
            int can = min(rem , op) + mp[ele];
            ans = max(ans , can);
        }
        return ans;
    }
    
    int maxFrequency(vector<int>& nums, int k, int op) {
        int ans = helper(nums , k , op);
        cout << ans << endl;
        if(ans >= op) return ans;
        sort(nums.begin() , nums.end());
        int n = nums.size();
        for(int i = 0; i < n; i++) {
            int low = i , high = n - 1;
            int ind = -1;
            while(low <= high) {
                int mid = (low + high) >> 1;
                if((1ll * nums[mid] - k) <= (1ll * nums[i] + k)) {
                    ind = mid;
                    low = mid + 1;
                }
                else {
                    high = mid - 1;
                }
            }
            if(ind != -1) {
                ans = max(ans , ind - i + 1);
                ans = min(ans , op);
            }
        }
        return ans;
    }
};",1447749184
rahul,rahul0310,519,3622,java,"class Solution {
    public int maxFrequency(int[] nums, int k, int numOperations) {
        int n = nums.length;
        HashMap<Integer, Integer> hm = new HashMap<>();
        List<int[]> ev = new ArrayList<>();
        int i = 0;
        while (i < n) {
            int nu = nums[i];
            hm.put(nu, hm.getOrDefault(nu, 0) + 1);
            ev.add(new int[]{nu - k, 1});
            ev.add(new int[]{nu + k + 1, -1});
            i++;
        }
        HashSet<Integer> hs = new HashSet<>();
        for (int[] e : ev) {
            hs.add(e[0]);
        }
        for (int p : hm.keySet()) {
            hs.add(p);
        }
        Collections.sort(ev, Comparator.comparingInt(a -> a[0]));
        
        int idx1 = 0;
        int cur = 0;
        int max = 0;
        int ac = 0;
        
        List<Integer> sor = new ArrayList<>(hs);
        Collections.sort(sor);
        int j = 0;
        while (j < sor.size()) {
            int t1 = sor.get(j);
            while (idx1 < ev.size() && ev.get(idx1)[0] <= t1) {
                cur += ev.get(idx1)[1];
                idx1++;
            }
            ac = hm.getOrDefault(t1, 0);
            int pos = ac + Math.min(numOperations, cur - ac);
            max = Math.max(max, pos);
            j++;
        }
        
        return max;
    }
}",1447756359
rahul,rahul0310,519,3626,java,"class Solution {
    public int smallestNumber(int n, int t) {
        int val = n;
        while(true){
            int p = 1;
            int ele = val;
            while(ele > 0){
                p = p * (ele % 10);
                ele /= 10;
            }
            if(p % t == 0){
                return val;
            }
            val++;
        }
    }
}",1447662575
rahul,rahul0310,519,3640,java,"class Solution {
    public int maxFrequency(int[] nums, int k, int numOperations) {
        int n = nums.length;
        HashMap<Integer, Integer> hm = new HashMap<>();
        List<int[]> ev = new ArrayList<>();
        int i = 0;
        while (i < n) {
            int nu = nums[i];
            hm.put(nu, hm.getOrDefault(nu, 0) + 1);
            ev.add(new int[]{nu - k, 1});
            ev.add(new int[]{nu + k + 1, -1});
            i++;
        }
        HashSet<Integer> hs = new HashSet<>();
        for (int[] e : ev) {
            hs.add(e[0]);
        }
        for (int p : hm.keySet()) {
            hs.add(p);
        }
        Collections.sort(ev, Comparator.comparingInt(a -> a[0]));
        
        int idx1 = 0;
        int cur = 0;
        int max = 0;
        int ac = 0;
        
        List<Integer> sor = new ArrayList<>(hs);
        Collections.sort(sor);
        int j = 0;
        while (j < sor.size()) {
            int t1 = sor.get(j);
            while (idx1 < ev.size() && ev.get(idx1)[0] <= t1) {
                cur += ev.get(idx1)[1];
                idx1++;
            }
            ac = hm.getOrDefault(t1, 0);
            int pos = ac + Math.min(numOperations, cur - ac);
            max = Math.max(max, pos);
            j++;
        }
        
        return max;
    }
}",1447757207
ape_pack,ape_pack,520,3622,cpp,"class Solution {
public:
typedef long long ll; 
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        sort(nums.begin(), nums.end());
        map<ll, int> m; 
        for (int x:nums) {
            m[x-k]++; 
            m[x+k+1]--; 
        }
        int cum = 0; 
        int prev; 
        int ans = 0; 
        for (auto it = m.begin(); it != m.end(); it++) {
            
            if (it != m.begin()) {
                auto lower = std::lower_bound(nums.begin(), nums.end(), prev);
                auto upper = std::upper_bound(nums.begin(), nums.end(), it->first-1);
                map<ll,int> vm; 
                for (; lower != upper; lower++) {
                    vm[*lower]++; 
                }
                int mx_freq = 0; 
                // int idx; 
                for (auto i = vm.begin(); i != vm.end(); i++) {
                    if (i->second > mx_freq) {
                        mx_freq = i->second; 
                        // idx = i
                    }
                }
    
                ans = max(ans, max(mx_freq + min(cum-mx_freq,numOperations), mx_freq)); 
            }
            cum += it->second; 
            prev = it->first; 
        }
        return ans; 
    }
};",1447749269
ape_pack,ape_pack,520,3626,cpp,"class Solution {
public:
    int digitProduct(int num) {
        int product = 1;
        while (num > 0) {
            product *= (num % 10);
            num /= 10;
        }
        return product;
    }

    int smallestNumber(int n, int t) {
        for (int i = n; ; ++i) {
            if (digitProduct(i) % t == 0) {
                return i;
            }
        }
        return -1; 
    }
};",1447654690
ape_pack,ape_pack,520,3640,cpp,"class Solution {
public:
typedef long long ll; 
    int maxFrequency(vector<int>& nums, ll k, int numOperations) {
        sort(nums.begin(), nums.end());
        map<ll, int> m; 
        for (int x:nums) {
            m[x-k]++; 
            m[x+k+1]--; 
        }
        int cum = 0; 
        int prev; 
        int ans = 0; 
        for (auto it = m.begin(); it != m.end(); it++) {
            
            if (it != m.begin()) {
                auto lower = std::lower_bound(nums.begin(), nums.end(), prev);
                auto upper = std::upper_bound(nums.begin(), nums.end(), it->first-1);
                map<ll,int> vm; 
                for (; lower != upper; lower++) {
                    vm[*lower]++; 
                }
                int mx_freq = 0; 
                // int idx; 
                for (auto i = vm.begin(); i != vm.end(); i++) {
                    if (i->second > mx_freq) {
                        mx_freq = i->second; 
                        // idx = i
                    }
                }
    
                ans = max(ans, max(mx_freq + min(cum-mx_freq,numOperations), mx_freq)); 
            }
            cum += it->second; 
            prev = it->first; 
        }
        return ans; 
    }
};",1447748493
AnshuPanghal,AnshuPanghal,521,3622,python,"class Solution:
    def maxFrequency(self, nums, k, numOperations):
        maxi_num1 = max(nums)
        
        freqq1 = [0] * (maxi_num1 + k + 2)

        for num1 in nums:
            freqq1[num1] += 1

        pre = [0] * (maxi_num1 + k + 2)
        pre[0] = freqq1[0]
        for i in range(1, (maxi_num1 + k + 2)):
            pre[i] = pre[i - 1] + freqq1[i]

        result = 0
        for x in range((maxi_num1 + k + 2)):
            if freqq1[x] == 0 and numOperations == 0:
                continue

            left = max(0, x - k)
            right = min((maxi_num1 + k + 2) - 1, x + k)
            totalInRange = pre[right] - (pre[left - 1] if left > 0 else 0)
            canAdjust = totalInRange - freqq1[x]
            total = freqq1[x] + min(numOperations, canAdjust)
            result = max(result, int(total))

        return result",1447752202
AnshuPanghal,AnshuPanghal,521,3626,java,"class Solution {
    public int smallestNumber(int n, int t) {

        if (isProductDivisibleByT(n, t)) {
            return n;
        }else{
            int ans = smallestNumber(n + 1, t);
           return  ans;
        }   
    }
    private boolean isProductDivisibleByT(int num, int divisor) {
        int productOfDigits = 1;
        while (num > 0) {
            int digit = num % 10;
            productOfDigits = productOfDigits * digit;
            num = num / 10;
         
        }
        return productOfDigits % divisor == 0;
    }
}
",1447736611
AnshuPanghal,AnshuPanghal,521,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
      //  int n = nums.size();
        map<int, int> freqq1;
        vector<pair<int, int>> event_events;
       
        for (int num : nums) {
            freqq1[num]++;
            event_events.push_back({num - k, 1});
            event_events.push_back({num + k + 1, -1});
        }
        
        set<int> printout;
       
for (int i = 0; i < event_events.size(); i++) {
    printout.insert(event_events[i].first);
}

for (map<int, int>::iterator it = freqq1.begin(); it != freqq1.end(); ++it) {
    printout.insert(it->first);
}


        sort(event_events.begin(), event_events.end());

        int idx = 0;
        int curoverlap = 0;
        int maximumfreqq1 = 0;
        int actcnt = 0;
        
        for (int t : printout) {
           
            while (idx < event_events.size() && event_events[idx].first <= t) {
                curoverlap += event_events[idx].second;
                idx++;
            }
            
            actcnt = freqq1.count(t) ? freqq1[t] : 0;
            int possible_freq = actcnt + min(numOperations, curoverlap - actcnt);
            maximumfreqq1 = max(maximumfreqq1, possible_freq);
        }

        return maximumfreqq1;
    }
};
",1447765083
Aripirala Padmasree,PadmaSree_05,522,3622,java,"import java.util.Arrays;

class Solution {
    public int maxFrequency(int[] nums, int k, int numOperations) {
        int maxNum = Arrays.stream(nums).max().orElse(0);
        int size = maxNum + k + 2;
        int[] freq = new int[size];
        for (int num : nums) {
            freq[num]++;
        }
        int[] pre = new int[size];
        pre[0] = freq[0];
        for (int i = 1; i < size; i++) {
            pre[i] = pre[i - 1] + freq[i];
        }
        int result = 0;
        for (int x = 0; x < size; x++) {
            if (freq[x] == 0 && numOperations == 0) continue;

            int left = Math.max(0, x - k);
            int right = Math.min(size - 1, x + k);
            int totalInRange = pre[right] - (left > 0 ? pre[left - 1] : 0);
            int canAdjust = totalInRange - freq[x];
            int total = freq[x] + Math.min(numOperations, canAdjust);
            result = Math.max(result, total);
        }

        return result;
    }
}
",1447717681
Aripirala Padmasree,PadmaSree_05,522,3626,java,"class Solution {
    public int smallestNumber(int n, int t) {
        int x = n;
        while (true) {
            if (digitProduct(x) % t == 0) {
                return x;
            }
            x++;
        }
    }
    
    private int digitProduct(int x) {
        int product = 1;
        while (x > 0) {
            int digit = x % 10;
            product *= digit;
            x /= 10;
        }
        return product;
    }
}",1447697952
Aripirala Padmasree,PadmaSree_05,522,3640,java,"import java.util.*;

class Solution {
    public int maxFrequency(int[] nums, int k, int numOperations) {
        int n = nums.length;
        Map<Integer, Integer> countMap = new HashMap<>();
        List<int[]> intervalEvents = new ArrayList<>();
        
        // Build count map and populate event intervals
        for (int num : nums) {
            countMap.put(num, countMap.getOrDefault(num, 0) + 1);
            intervalEvents.add(new int[]{num - k, 1});
            intervalEvents.add(new int[]{num + k + 1, -1});
        }
        
        // Collect unique points from events and frequency map
        Set<Integer> uniquePoints = new TreeSet<>();
        for (int[] event : intervalEvents) {
            uniquePoints.add(event[0]);
        }
        uniquePoints.addAll(countMap.keySet());

        // Sort the events based on interval points
        intervalEvents.sort(Comparator.comparingInt(a -> a[0]));

        int eventIndex = 0;
        int currentCount = 0;
        int maxAchievableFreq = 0;
        int originalFreq = 0;
        
        // Traverse each unique point
        for (int point : uniquePoints) {
            // Process events up to the current point
            while (eventIndex < intervalEvents.size() && intervalEvents.get(eventIndex)[0] <= point) {
                currentCount += intervalEvents.get(eventIndex)[1];
                eventIndex++;
            }
            
            // Calculate the possible frequency at the current point
            originalFreq = countMap.getOrDefault(point, 0);
            int achievableFreq = originalFreq + Math.min(numOperations, currentCount - originalFreq);
            maxAchievableFreq = Math.max(maxAchievableFreq, achievableFreq);
        }

        return maxAchievableFreq;
    }
}",1447749333
garvit_aggarwal,garvit_aggarwal,523,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        map<long long, long long> m;
        
        vector<pair<long long, long long>> v;
        
        for (auto& i : nums) {
            v.push_back(make_pair(i-k, 1));
            v.push_back(make_pair(i+k+1, -1));
            m[i]++;
        }
        
        sort(v.begin(), v.end());
        
        set<long long> s;
        
        for (auto& i: v) 
            s.insert(i.first);
        
        for (auto& i: m)
            s.insert(i.first);
        
        int i = 0, ans = 0, count = 0, over = 0;
        
        for (auto& j : s) {
            while (i < v.size() && v[i].first <= j) {
                over += v[i].second;
                i++;
            }
            
            count = m.count(j) ? m[j] : 0;
            int temp = count + min(numOperations, over-count);
            ans = max(ans, temp);
        }
        
        return ans;
    }
};",1447764877
garvit_aggarwal,garvit_aggarwal,523,3626,cpp,"class Solution {
public:
    int digit(int n) {
        int sum = 1;
        while (n > 0) {
            sum *= n % 10;
            n = n/10;
        }
        
        return sum;
    }
    int smallestNumber(int n, int t) {
        for (int i = n; i <= 1e8; i++) {
            if (digit(i) % t == 0)
                return i;
        }
        
        return -1;
    }
};",1447656214
garvit_aggarwal,garvit_aggarwal,523,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        map<long long, long long> m;
        
        vector<pair<long long, long long>> v;
        
        for (auto& i : nums) {
            v.push_back(make_pair(i-k, 1));
            v.push_back(make_pair(i+k+1, -1));
            m[i]++;
        }
        
        sort(v.begin(), v.end());
        
        set<long long> s;
        
        for (auto& i: v) 
            s.insert(i.first);
        
        for (auto& i: m)
            s.insert(i.first);
        
        int i = 0, ans = 0, count = 0, over = 0;
        
        for (auto& j : s) {
            while (i < v.size() && v[i].first <= j) {
                over += v[i].second;
                i++;
            }
            
            count = m.count(j) ? m[j] : 0;
            int temp = count + min(numOperations, over-count);
            ans = max(ans, temp);
        }
        
        return ans;
    }
};",1447765212
Mohit Singh Rawat,MOHITRAWAT061,524,3622,cpp,"class FreqHelper {
public:
    static std::unordered_map<int, int> calcFreq(const std::vector<int>& nums) {
        std::unordered_map<int, int> freq;
        for (int num : nums) {
            freq[num]++;
        }
        return freq;
    }
    static std::vector<std::pair<int, int>> genEvents(const std::vector<int>& nums, int k) {
        std::vector<std::pair<int, int>> events;
        for (int num : nums) {
            addRange(events, num, k);
        }
        std::sort(events.begin(), events.end());
        return events;
    }
    static std::set<int> collectPoints(const std::vector<std::pair<int, int>>& events, const std::unordered_map<int, int>& freq) {
        std::set<int> points;
        addEventPts(events, points);
        addFreqPts(freq, points);
        return points;
    }
private:
    static void addRange(std::vector<std::pair<int, int>>& events, int num, int k) {
        events.emplace_back(num - k, 1);
        events.emplace_back(num + k + 1, -1);
    }
    static void addEventPts(const std::vector<std::pair<int, int>>& events, std::set<int>& points) {
        for (const auto& event : events) {
            points.insert(event.first);
        }
    }
    static void addFreqPts(const std::unordered_map<int, int>& freq, std::set<int>& points) {
        for (const auto& pair : freq) {
            points.insert(pair.first);
        }
    }
};
class Solution {
public:
    int maxFrequency(std::vector<int>& nums, int k, int ops) {
        auto freq = FreqHelper::calcFreq(nums);
        auto events = FreqHelper::genEvents(nums, k);
        auto points = FreqHelper::collectPoints(events, freq);

        return findMaxFreq(events, freq, points, ops);
    }
private:
    int findMaxFreq(const std::vector<std::pair<int, int>>& events, const std::unordered_map<int, int>& freq, const std::set<int>& points, int ops) {
        int idx = 0, overlap = 0, maxFreq = 0;

        for (int t : points) {
            updateOverlap(events, idx, overlap, t);
            int actualCnt = getCount(freq, t);
            int possibleFreq = calcPossibleFreq(actualCnt, overlap, ops);
            maxFreq = std::max(maxFreq, possibleFreq);
        }
        return maxFreq;
    }
    void updateOverlap(const std::vector<std::pair<int, int>>& events, int& idx, int& overlap, int t) {
        while (idx < events.size() && events[idx].first <= t) {
            overlap += events[idx].second;
            idx++;
        }
    }
    int getCount(const std::unordered_map<int, int>& freq, int t) const {
        return freq.count(t) ? freq.at(t) : 0;
    }
    int calcPossibleFreq(int actualCnt, int overlap, int ops) const {
        return actualCnt + std::min(ops, overlap - actualCnt);
    }
};
",1447762465
Mohit Singh Rawat,MOHITRAWAT061,524,3626,cpp,"class Solution {
public:
    int digitProd(int x) {
        int prod = 1;
        while (x > 0) {
            int d = x % 10;
            if (d == 0) return 0; 
            prod *= d;
            x /= 10;
        }
        return prod;
    }

    int smallestNumber(int n, int t) {
        int curr = n;
        while (true) {
            int prod = digitProd(curr);
            if (prod % t == 0) return curr;
            curr++;
        }
    }
};
",1447765296
Mohit Singh Rawat,MOHITRAWAT061,524,3640,cpp,"class FreqHelper {
public:
    static std::unordered_map<int, int> calcFreq(const std::vector<int>& nums) {
        std::unordered_map<int, int> freq;
        for (int num : nums) {
            freq[num]++;
        }
        return freq;
    }
    static std::vector<std::pair<int, int>> genEvents(const std::vector<int>& nums, int k) {
        std::vector<std::pair<int, int>> events;
        for (int num : nums) {
            addRange(events, num, k);
        }
        std::sort(events.begin(), events.end());
        return events;
    }
    static std::set<int> collectPoints(const std::vector<std::pair<int, int>>& events, const std::unordered_map<int, int>& freq) {
        std::set<int> points;
        addEventPts(events, points);
        addFreqPts(freq, points);
        return points;
    }
private:
    static void addRange(std::vector<std::pair<int, int>>& events, int num, int k) {
        events.emplace_back(num - k, 1);
        events.emplace_back(num + k + 1, -1);
    }
    static void addEventPts(const std::vector<std::pair<int, int>>& events, std::set<int>& points) {
        for (const auto& event : events) {
            points.insert(event.first);
        }
    }
    static void addFreqPts(const std::unordered_map<int, int>& freq, std::set<int>& points) {
        for (const auto& pair : freq) {
            points.insert(pair.first);
        }
    }
};
class Solution {
public:
    int maxFrequency(std::vector<int>& nums, int k, int ops) {
        auto freq = FreqHelper::calcFreq(nums);
        auto events = FreqHelper::genEvents(nums, k);
        auto points = FreqHelper::collectPoints(events, freq);

        return findMaxFreq(events, freq, points, ops);
    }
private:
    int findMaxFreq(const std::vector<std::pair<int, int>>& events, const std::unordered_map<int, int>& freq, const std::set<int>& points, int ops) {
        int idx = 0, overlap = 0, maxFreq = 0;

        for (int t : points) {
            updateOverlap(events, idx, overlap, t);
            int actualCnt = getCount(freq, t);
            int possibleFreq = calcPossibleFreq(actualCnt, overlap, ops);
            maxFreq = std::max(maxFreq, possibleFreq);
        }
        return maxFreq;
    }
    void updateOverlap(const std::vector<std::pair<int, int>>& events, int& idx, int& overlap, int t) {
        while (idx < events.size() && events[idx].first <= t) {
            overlap += events[idx].second;
            idx++;
        }
    }
    int getCount(const std::unordered_map<int, int>& freq, int t) const {
        return freq.count(t) ? freq.at(t) : 0;
    }
    int calcPossibleFreq(int actualCnt, int overlap, int ops) const {
        return actualCnt + std::min(ops, overlap - actualCnt);
    }
};
",1447761906
Bhanu Negi,bhanunegi420,525,3622,cpp,"// Author : Bhanu Negi
#include <bits/stdc++.h>
#define Code ios_base::sync_with_stdio(0);
#define by cin.tie(0);
#define Bhanu cout.tie(0);
#define ll long long
#define pii pair<int,int>
#define PQ priority_queue<ll>
#define PQG priority_queue<ll,vector<ll>,greater<ll>>
#define pll pair<long long,long long>
#define F first
#define S second
#define pb push_back
#define mod 1000000007
#define inf 100000000000000000
using namespace std;

int dx[4] = {+1,-1,0,0};
int dy[4] = {0,0,+1,-1};
 
int _dx[8] = {+1,-1,0,0,+1,-1,+1,-1};
int _dy[8] = {0,0,+1,-1,+1,-1,-1,+1};

vector<pll> dxy = {{1,0},{-1,0},{0,1},{0,-1}};
vector<pll> _dxy = {{1,0},{-1,0},{0,1},{0,-1},{1,1},{-1,-1},{1,-1},{-1,1}};

class debug{
public: 
    template<class T>
    void print(vector<T>& arr){
        for(auto& it : arr) cout<<it<<"" "";
        cout<<endl;
    }
};

// Matrix Exponentiation
class Matrix{
public:
    vector<vector<ll>> mat;
    void multiply(vector<vector<ll>>& A,vector<vector<ll>>& B){
        int n = A.size();
        vector<vector<ll>> C(n, vector<ll>(n));
        for (int i = 0; i < n; i++) {
            for (int j = 0; j <n; j++) {
                for (int k = 0; k < n; k++) {
                    C[i][j] = (C[i][j] + ((A[i][k]) * (B[k][j]))%mod)%mod;
                }
            }
        }
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                A[i][j] = C[i][j];
            }
        }
    }
    vector<vector<ll>> identity(int n){
        vector<vector<ll>> ans(n,vector<ll>(n,0));
        for(int i=0; i<n; i++) ans[i][i] = 1;
        return ans;
    }
    vector<vector<ll>> exponentiate(vector<vector<ll>> M, ll expo){
        int n = M.size();
        vector<vector<ll>> ans = identity(n);
        while (expo) {
            if (expo & 1) multiply(ans, M);
            multiply(M, M);
            expo >>= 1;
        }
        return ans;
    }

};

/*****************************************************************************************************/

// Disjoint Set
class Disjoint{
public:
    vector<ll> parent,size,rank;
    Disjoint(int n){
        parent.resize(n+1);
        for(int i=0;i<=n; i++) parent[i] = i;
        size.resize(n+1,1);
        rank.resize(n+1,0);
    }

    int findUPar(int node){
        if(parent[node] == node) return node;
        return parent[node] = findUPar(parent[node]);
    }

    void union_by_rank(int u,int v){
        int ulp_u = findUPar(u);
        int ulp_v = findUPar(v);
        if(ulp_u == ulp_v) return;
        if(rank[ulp_u] > rank[ulp_v]){
            parent[ulp_v] =  ulp_u;
        }
        else if(rank[ulp_u] < rank[ulp_v]){
            parent[ulp_u] = ulp_v;
        }
        else{
            rank[ulp_u]++;
            parent[ulp_v] = ulp_u;
        }
    }

    void union_by_n(int u,int v){
        int ulp_u = findUPar(u);
        int ulp_v = findUPar(v);
        if(ulp_u == ulp_v) return;
        if(size[ulp_u] >= size[ulp_v]){
            size[ulp_u] += size[ulp_v];
            parent[ulp_v] = ulp_u;
        }
        else{
            size[ulp_v] += size[ulp_u];
            parent[ulp_u] = ulp_v;

        }
    }
};

/****************************************************************************************************/

// auto bpsn = [](){
//     Code by Bhanu
//     return 'sk';
// }();
/************************************************************************************************** */
class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int _op) {
        int maxi = *max_element(nums.begin(), nums.end());
        int n = maxi + k + 2;
        vector<int> freq(n, 0);

        for (int num : nums) freq[num]++;
        vector<int> pre(n, 0);
        pre[0] = freq[0];
        for (int i = 1; i < n; i++) {
            pre[i] = pre[i - 1] + freq[i];
        }

        int ans = 0;
        for (int i = 0; i < n; i++) {
            if (!freq[i] && !_op) continue;
            int l = max(0, i - k),r = min(n - 1, i + k),sumi = pre[r] - (l > 0 ? pre[l - 1] : 0);
            int _f = sumi - freq[i],tot = freq[i] + min(_op, _f);
            ans = max(ans, tot);
        }

        return ans;
    }
};",1447765501
Bhanu Negi,bhanunegi420,525,3626,cpp,"class Solution {
public:

    int f(int n){
        string num = to_string(n);
        int ans = 1;
        for(int i=0;i<num.length(); i++){
            ans *= (num[i] - '0');
        }
        return ans;
    }

    int smallestNumber(int n, int t) {
        while(1){
            if(f(n)%t == 0) return n;
            n++;
        }
        return 0;
    }
};",1447749378
Bhanu Negi,bhanunegi420,525,3640,cpp,"// Author : Bhanu Negi
#include <bits/stdc++.h>
#define Code ios_base::sync_with_stdio(0);
#define by cin.tie(0);
#define Bhanu cout.tie(0);
#define ll long long
#define pii pair<int,int>
#define PQ priority_queue<ll>
#define PQG priority_queue<ll,vector<ll>,greater<ll>>
#define pll pair<long long,long long>
#define F first
#define S second
#define pb push_back
#define mod 1000000007
#define inf 100000000000000000
using namespace std;

int dx[4] = {+1,-1,0,0};
int dy[4] = {0,0,+1,-1};
 
int _dx[8] = {+1,-1,0,0,+1,-1,+1,-1};
int _dy[8] = {0,0,+1,-1,+1,-1,-1,+1};

vector<pll> dxy = {{1,0},{-1,0},{0,1},{0,-1}};
vector<pll> _dxy = {{1,0},{-1,0},{0,1},{0,-1},{1,1},{-1,-1},{1,-1},{-1,1}};

class debug{
public: 
    template<class T>
    void print(vector<T>& arr){
        for(auto& it : arr) cout<<it<<"" "";
        cout<<endl;
    }
};

// Matrix Exponentiation
class Matrix{
public:
    vector<vector<ll>> mat;
    void multiply(vector<vector<ll>>& A,vector<vector<ll>>& B){
        int n = A.size();
        vector<vector<ll>> C(n, vector<ll>(n));
        for (int i = 0; i < n; i++) {
            for (int j = 0; j <n; j++) {
                for (int k = 0; k < n; k++) {
                    C[i][j] = (C[i][j] + ((A[i][k]) * (B[k][j]))%mod)%mod;
                }
            }
        }
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                A[i][j] = C[i][j];
            }
        }
    }
    vector<vector<ll>> identity(int n){
        vector<vector<ll>> ans(n,vector<ll>(n,0));
        for(int i=0; i<n; i++) ans[i][i] = 1;
        return ans;
    }
    vector<vector<ll>> exponentiate(vector<vector<ll>> M, ll expo){
        int n = M.size();
        vector<vector<ll>> ans = identity(n);
        while (expo) {
            if (expo & 1) multiply(ans, M);
            multiply(M, M);
            expo >>= 1;
        }
        return ans;
    }

};

/*****************************************************************************************************/

// Disjoint Set
class Disjoint{
public:
    vector<ll> parent,size,rank;
    Disjoint(int n){
        parent.resize(n+1);
        for(int i=0;i<=n; i++) parent[i] = i;
        size.resize(n+1,1);
        rank.resize(n+1,0);
    }

    int findUPar(int node){
        if(parent[node] == node) return node;
        return parent[node] = findUPar(parent[node]);
    }

    void union_by_rank(int u,int v){
        int ulp_u = findUPar(u);
        int ulp_v = findUPar(v);
        if(ulp_u == ulp_v) return;
        if(rank[ulp_u] > rank[ulp_v]){
            parent[ulp_v] =  ulp_u;
        }
        else if(rank[ulp_u] < rank[ulp_v]){
            parent[ulp_u] = ulp_v;
        }
        else{
            rank[ulp_u]++;
            parent[ulp_v] = ulp_u;
        }
    }

    void union_by_size(int u,int v){
        int ulp_u = findUPar(u);
        int ulp_v = findUPar(v);
        if(ulp_u == ulp_v) return;
        if(size[ulp_u] >= size[ulp_v]){
            size[ulp_u] += size[ulp_v];
            parent[ulp_v] = ulp_u;
        }
        else{
            size[ulp_v] += size[ulp_u];
            parent[ulp_u] = ulp_v;

        }
    }
};

/****************************************************************************************************/

auto bpsn = [](){
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
    return 'sk';
}();
/************************************************************************************************** */
class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int ops) {
        unordered_map<int, int> cnt;
        vector<pii> _e;

        for (int num : nums) {
            cnt[num]++;
            _e.emplace_back(num - k, 1);
            _e.emplace_back(num + k + 1, -1);
        }

        set<int> _pts;
        for (auto& e : _e) {
            _pts.insert(e.F);
        }
        for (auto& p : cnt) {
            _pts.insert(p.F);
        }

        sort(_e.begin(), _e.end());
        int i = 0, _over = 0, maxFreq = 0;

        for (int pt : _pts) {
            while (i < _e.size() && _e[i].F <= pt) {
                _over += _e[i].S;
                i++;
            }
            int __cnt = cnt.count(pt) ? cnt[pt] : 0;
            int freq = __cnt + min(ops, _over - __cnt);
            maxFreq = max(maxFreq, freq);
        }

        return maxFreq;
    }
};",1447757490
Devansh Rathod,Acquiesce,526,3622,cpp,"class Solution 
{
public:
    int maxFrequency(vector<int>& nums, int k, int kk, int j = 0, int cur = 0, int ans = 0, int og_c = 0) 
    {
        int n = size(nums);
        map<int, int> mp;set<int> st;vector<pair<int, int>> v;

        for (auto &i : nums)  v.push_back({i - k, +1}),v.push_back({i + k + 1, -1}),mp[i]++;
        sort(begin(v), end(v));

        for (auto& i : v)  st.insert(i.first);
        for (auto& i : mp) st.insert(i.first);

        for (auto i : st) 
        {
            while (j < size(v) and v[j].first <= i) cur += v[j++].second;
            if(mp.count(i)) og_c = mp[i];
            else og_c = 0;
            ans = max(og_c + min(kk, cur - og_c), ans);
        }
        return ans;
    }
};",1447749783
Devansh Rathod,Acquiesce,526,3626,cpp,"class Solution 
{
public:
    int smallestNumber(int n, int t) 
    {
        int temp, cur;
        while(n != 0)
        {
            temp = n++, cur = 1;
            while(temp) cur *= temp % 10, temp /= 10;
            if(cur % t == 0) return n-1;
        }
        return 0;
    }
};",1447740033
Devansh Rathod,Acquiesce,526,3640,cpp,"class Solution 
{
public:
    int maxFrequency(vector<int>& nums, int k, int kk, int j = 0, int cur = 0, int ans = 0, int og_c = 0) 
    {
        int n = size(nums);
        map<int, int> mp;set<int> st;vector<pair<int, int>> v;

        for (auto &i : nums)  v.push_back({i - k, +1}),v.push_back({i + k + 1, -1}),mp[i]++;
        sort(begin(v), end(v));

        for (auto& i : v)  st.insert(i.first);
        for (auto& i : mp) st.insert(i.first);

        for (auto i : st) 
        {
            while (j < size(v) and v[j].first <= i) cur += v[j++].second;
            if(mp.count(i)) og_c = mp[i];
            else og_c = 0;
            ans = max(og_c + min(kk, cur - og_c), ans);
        }
        return ans;
    }
};",1447749527
RAHUL YADAV,imdotrahul,527,3622,cpp,"#include <vector>
#include <algorithm>

using namespace std;

class Solution {
public:
    int maxFrequency(vector<int>& numbers, int increment, int operationsAllowed) {
        int maxNumber = findMax(numbers);
        int arraySize = maxNumber + increment + 2;

        vector<int> frequency(arraySize, 0);
        calculateFrequency(numbers, frequency);

        vector<long long> prefixSum = calculatePrefixSum(frequency, arraySize);

        return calculateMaxFrequency(frequency, prefixSum, arraySize, increment, operationsAllowed);
    }

private:
    int findMax(const vector<int>& numbers) {
        return *max_element(numbers.begin(), numbers.end());
    }

    void calculateFrequency(const vector<int>& numbers, vector<int>& frequency) {
        for (int number : numbers) {
            frequency[number]++;
        }
    }

    vector<long long> calculatePrefixSum(const vector<int>& frequency, int arraySize) {
        vector<long long> prefixSum(arraySize, 0);
        prefixSum[0] = frequency[0];
        for (int i = 1; i < arraySize; i++) {
            prefixSum[i] = prefixSum[i - 1] + frequency[i];
        }
        return prefixSum;
    }

    int calculateMaxFrequency(const vector<int>& frequency, const vector<long long>& prefixSum, int arraySize, int increment, int operationsAllowed) {
        int maxFreq = 0;
        for (int value = 0; value < arraySize; value++) {
            if (frequency[value] == 0 && operationsAllowed == 0) {
                continue;
            }

            int leftBound = max(0, value - increment);
            int rightBound = min(arraySize - 1, value + increment);
            long long totalInRange = prefixSum[rightBound] - (leftBound > 0 ? prefixSum[leftBound - 1] : 0);
            long long canAdjust = totalInRange - frequency[value];
            long long total = frequency[value] + min(static_cast<long long>(operationsAllowed), canAdjust);
            maxFreq = max(maxFreq, static_cast<int>(total));
        }
        return maxFreq;
    }
};",1447729104
RAHUL YADAV,imdotrahul,527,3626,cpp,"class Solution {
public:
    int smallestNumber(int n, int t) {
        if (t == 0) {
            while (!hasZeroDigit(n)) {
                n++;
            }
            return n;
        }

        while (!isProductDivisible(n, t)) {
            n++;
        }
        return n;
    }

private:
    int productOfDigits(int num) {
        int product = 1;
        while (num > 0) {
            product *= (num % 10);
            num /= 10;
        }
        return product;
    }

    bool hasZeroDigit(int num) {
        while (num > 0) {
            if (num % 10 == 0) {
                return true;
            }
            num /= 10;
        }
        return false;
    }

    bool isProductDivisible(int num, int t) {
        return productOfDigits(num) % t == 0;
    }
};",1447655008
RAHUL YADAV,imdotrahul,527,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int ops) {
        unordered_map<int, int> freqMap = countFrequencies(nums);
        vector<pair<int, int>> eventList = generateEvents(nums, k);
        return calculateMaxFrequency(freqMap, eventList, ops);
    }

private:
    unordered_map<int, int> countFrequencies(const vector<int>& nums) {
        unordered_map<int, int> freqMap;
        for (int num : nums) {
            freqMap[num]++;
        }
        return freqMap;
    }

    vector<pair<int, int>> generateEvents(const vector<int>& nums, int k) {
        vector<pair<int, int>> events;
        for (int num : nums) {
            events.emplace_back(num - k, 1);
            events.emplace_back(num + k + 1, -1);
        }
        sort(events.begin(), events.end());
        return events;
    }

    int calculateMaxFrequency(const unordered_map<int, int>& freqMap,
                              const vector<pair<int, int>>& eventList,
                              int ops) {
        set<int> uniquePoints;
        for (const auto& event : eventList) {
            uniquePoints.insert(event.first);
        }
        for (const auto& entry : freqMap) {
            uniquePoints.insert(entry.first);
        }

        int idx = 0, currentOverlap = 0, maxFrequency = 0;
        for (int point : uniquePoints) {
            while (idx < eventList.size() && eventList[idx].first <= point) {
                currentOverlap += eventList[idx].second;
                idx++;
            }

            int baseCount = freqMap.count(point) ? freqMap.at(point) : 0;
            int frequency = baseCount + min(ops, currentOverlap - baseCount);
            maxFrequency = max(maxFrequency, frequency);
        }

        return maxFrequency;
    }
};
",1447741496
Marat Shaydulin,shaydulin,529,3622,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        nums.sort()
        ans = 1
        c = Counter(nums)
        for i in range(max(nums) + 1):
            right = bisect_right(nums, i + k)
            left = bisect_left(nums, i - k)
            ops = right - left - c[i]
            ops = min(ops, numOperations)
            ans = max(ans, c[i] + ops)
        return ans",1447698764
Marat Shaydulin,shaydulin,529,3626,python3,"class Solution:
    def smallestNumber(self, n: int, t: int) -> int:
        for num in count(n):
            if reduce(operator.mul, (int(d) for d in str(num))) % t == 0:
                return num",1447656458
Marat Shaydulin,shaydulin,529,3640,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        nums.sort()
        ans = 1
        c = Counter(nums)
        for i in nums:
            right = bisect_right(nums, i + k)
            left = bisect_left(nums, i - k)
            ops = right - left - c[i]
            ops = min(ops, numOperations)
            ans = max(ans, c[i] + ops)
        for i in range(len(nums)):
            j = bisect_right(nums, nums[i] + k * 2)
            ops = min(numOperations, j - i)
            ans = max(ans, ops)
        return ans",1447724699
Piyush,shree45,530,3622,cpp,"class Solution {
public:
    int find(int i,int vv,vector<int>&nums,int numOperations,int k){
        int ans = 0;
        int l = 0;
        int n = nums.size();
            int h = i;
            
            int an1 = -1,an2 = -1;
            while(l <= h){
                int md = l + (h - l) / 2;
                if(nums[md] + k >= vv){
                    an1 = md;
                    h = md - 1;
                }else l = md + 1;
            }
            l = i;
        if(an1 == -1) return 0;
            h = n - 1;
            while(l <= h){
                int md = l + (h - l) /2;
                if(nums[md] - k <= vv){
                    an2 = md;
                    l = md + 1;
                }else h = md - 1;
            }
        if(an2 == -1) return 0;
            int os = an2-an1+1;
            if(os > numOperations) ans = max(ans,numOperations);
            else ans = max(ans,an2-an1+1);
        return ans;
    }
    int find2(int i,int vv,vector<int>&nums,int numOperations,int k){
        int ans = 0;
        int l = 0;
        i++;
        int n = nums.size();
            int h = i;
            
            int an1 = -1,an2 = -1;
            while(l <= h){
                int md = l + (h - l) / 2;
                if(nums[md] + k >= vv){
                    an1 = md;
                    h = md - 1;
                }else l = md + 1;
            }
            l = i;
        if(an1 == -1) return 0;
            h = n - 1;
            while(l <= h){
                int md = l + (h - l) /2;
                if(nums[md] - k <= vv){
                    an2 = md;
                    l = md + 1;
                }else h = md - 1;
            }
        if(an2 == -1) return 0;
            int os = an2-an1+1;
            if(os > numOperations) ans = max(ans,numOperations);
            else ans = max(ans,an2-an1+1);
        return ans;
    }
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        sort(nums.begin(),nums.end());
        int n = nums.size();
        map<int,int>mp;
        for(int i = 0; i < n; i++)
            mp[nums[i]]++;
        int ans = 0;
        for(int i = 0; i < n; i++){
            int l = 0;
            int h = i;
            
            int an1 = i,an2 = i;
            while(l <= h){
                int md = l + (h - l) / 2;
                if(nums[md] + k >= nums[i]){
                    an1 = md;
                    h = md - 1;
                }else l = md + 1;
            }
            l = i;
            h = n - 1;
            while(l <= h){
                int md = l + (h - l) /2;
                if(nums[md] - k <= nums[i]){
                    an2 = md;
                    l = md + 1;
                }else h = md - 1;
            }
            int os = (an2-an1+1)-mp[nums[i]];
            if(os > numOperations) ans = max(ans,min(numOperations+mp[nums[i]],an2-an1+1));
            else ans = max(ans,an2-an1+1);
        }
        for(int i = 0; i < n - 1; i++){
            int ms = nums[i] + k;
            int ms2 = nums[i] - k;
            ans = max(ans,find(i,ms,nums,numOperations,k));
            ans = max(ans,find(i,ms2,nums,numOperations,k));
            ans = max(ans,find2(i,ms,nums,numOperations,k));
            ans = max(ans,find2(i,ms2,nums,numOperations,k));
        }
        for(auto i : mp)
            ans = max(ans,i.second);
        return ans;
    }
};",1447715243
Piyush,shree45,530,3626,cpp,"class Solution {
public:
    int smallestNumber(int n, int t) {
        while(true){
            int x = n;
            int s = 1;
            while(x){
                s *= (x % 10);
                x /= 10;
            }
            x = n;
            if(s % t == 0) return x;
            n++;
        }
        return -1;
    }
};",1447659014
Piyush,shree45,530,3640,cpp,"class Solution {
public:
    int find(int i,int vv,vector<int>&nums,int numOperations,int k){
        int ans = 0;
        int l = 0;
        int n = nums.size();
            int h = i;
            
            int an1 = -1,an2 = -1;
            while(l <= h){
                int md = l + (h - l) / 2;
                if(nums[md] + k >= vv){
                    an1 = md;
                    h = md - 1;
                }else l = md + 1;
            }
            l = i;
        if(an1 == -1) return 0;
            h = n - 1;
            while(l <= h){
                int md = l + (h - l) /2;
                if(nums[md] - k <= vv){
                    an2 = md;
                    l = md + 1;
                }else h = md - 1;
            }
        if(an2 == -1) return 0;
            int os = an2-an1+1;
            if(os > numOperations) ans = max(ans,numOperations);
            else ans = max(ans,an2-an1+1);
        return ans;
    }
    int find2(int i,int vv,vector<int>&nums,int numOperations,int k){
        int ans = 0;
        int l = 0;
        i++;
        int n = nums.size();
            int h = i;
            
            int an1 = -1,an2 = -1;
            while(l <= h){
                int md = l + (h - l) / 2;
                if(nums[md] + k >= vv){
                    an1 = md;
                    h = md - 1;
                }else l = md + 1;
            }
            l = i;
        if(an1 == -1) return 0;
            h = n - 1;
            while(l <= h){
                int md = l + (h - l) /2;
                if(nums[md] - k <= vv){
                    an2 = md;
                    l = md + 1;
                }else h = md - 1;
            }
        if(an2 == -1) return 0;
            int os = an2-an1+1;
            if(os > numOperations) ans = max(ans,numOperations);
            else ans = max(ans,an2-an1+1);
        return ans;
    }
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        sort(nums.begin(),nums.end());
        int n = nums.size();
        map<int,int>mp;
        for(int i = 0; i < n; i++)
            mp[nums[i]]++;
        int ans = 0;
        for(int i = 0; i < n; i++){
            int l = 0;
            int h = i;
            
            int an1 = i,an2 = i;
            while(l <= h){
                int md = l + (h - l) / 2;
                if(nums[md] + k >= nums[i]){
                    an1 = md;
                    h = md - 1;
                }else l = md + 1;
            }
            l = i;
            h = n - 1;
            while(l <= h){
                int md = l + (h - l) /2;
                if(nums[md] - k <= nums[i]){
                    an2 = md;
                    l = md + 1;
                }else h = md - 1;
            }
            int os = (an2-an1+1)-mp[nums[i]];
            if(os > numOperations) ans = max(ans,min(numOperations+mp[nums[i]],an2-an1+1));
            else ans = max(ans,an2-an1+1);
        }
        for(int i = 0; i < n - 1; i++){
            int ms = nums[i] + k;
            int ms2 = nums[i] - k;
            ans = max(ans,find(i,ms,nums,numOperations,k));
            ans = max(ans,find(i,ms2,nums,numOperations,k));
            ans = max(ans,find2(i,ms,nums,numOperations,k));
            ans = max(ans,find2(i,ms2,nums,numOperations,k));
        }
        for(auto i : mp)
            ans = max(ans,i.second);
        return ans;
    }
};",1447716255
Paras Jain,paras_bhai,533,3622,java,"class Solution {
    public int findLowerBound(int[] arr, int s) {
        int low = 0, high = arr.length;
        while (low < high) {
            int mid = low + (high - low) / 2;
            if (arr[mid] >= s) {
                high = mid;
            } else {
                low = mid + 1;
            }
        }
        return low;
    }
    public int findUpperBound(int[] arr, int l) {
        int low = 0, high = arr.length;
        while (low < high) {
            int mid = low + (high - low) / 2;
            if (arr[mid] > l) {
                high = mid;
            } else {
                low = mid + 1;
            }
        }
        return low;
    }

    public int countElementsInRange(int[] arr, int s, int l) {
        int leftIndex = findLowerBound(arr, s);
        int rightIndex = findUpperBound(arr, l);
        
        return rightIndex - leftIndex;
    }
    
    public int maxFrequency(int[] nums, int k, int numOperations) {
        Arrays.sort(nums);

        int n = nums.length;
        int finalAns =0;

        Map<Integer, Integer> mp = new HashMap<>();

        int ans[]=new int[n];
        
        for(int i=0;i<n;i++){
            int s, e, freOfNum, flipAllowed, flipReq, num;

            num = nums[i];
            s=num-k;
            e=num+k;
            
            ans[i]=countElementsInRange(nums, s, e);
            if (mp.containsKey(num))
                freOfNum = mp.get(num)+1;
            else
                freOfNum=1;
            flipAllowed = numOperations;
            flipReq = ans[i]-freOfNum;
            
            if(flipReq<=flipAllowed){
                finalAns = Math.max(finalAns, ans[i]);
            }else{
                finalAns = Math.max(finalAns, freOfNum+flipAllowed);
            }

            // second
            num = nums[i]-k;
            s=num-k;
            e=num+k;
            
            ans[i]=countElementsInRange(nums, s, e);
            if (mp.containsKey(num))
                freOfNum = mp.get(num)+1;
            else
                freOfNum=1;
            flipAllowed = numOperations-1;
            flipReq = ans[i]-freOfNum;
            
            if(flipReq<=flipAllowed){
                finalAns = Math.max(finalAns, ans[i]);
            }else{
                finalAns = Math.max(finalAns, freOfNum+flipAllowed);
            }

            // third
            num = nums[i]+k;
            s=num-k;
            e=num+k;
            
            ans[i]=countElementsInRange(nums, s, e);
            if (mp.containsKey(num))
                freOfNum = mp.get(num)+1;
            else
                freOfNum=1;
            flipAllowed = numOperations-1;
            flipReq = ans[i]-freOfNum;
            
            if(flipReq<=flipAllowed){
                finalAns = Math.max(finalAns, ans[i]);
            }else{
                finalAns = Math.max(finalAns, freOfNum+flipAllowed);
            }

            mp.put(nums[i], mp.getOrDefault(nums[i], 0) + 1);
        }
        
        return finalAns;
    }
}",1447749175
Paras Jain,paras_bhai,533,3626,java,"class Solution {
    int multiple_of_digits(int x){
        int ans=1;
        while(x>0){
            ans=ans*(x%10);
            x=x/10;
        }

        return ans;
    }
    public int smallestNumber(int n, int t) {

        int ans =n;

        while(true){
            if(multiple_of_digits(ans)%t==0)
                return ans;
            ans++;
        }
    }
}",1447664088
Paras Jain,paras_bhai,533,3640,java,"class Solution {
    public int findLowerBound(int[] arr, int s) {
        int low = 0, high = arr.length;
        while (low < high) {
            int mid = low + (high - low) / 2;
            if (arr[mid] >= s) {
                high = mid;
            } else {
                low = mid + 1;
            }
        }
        return low;
    }
    public int findUpperBound(int[] arr, int l) {
        int low = 0, high = arr.length;
        while (low < high) {
            int mid = low + (high - low) / 2;
            if (arr[mid] > l) {
                high = mid;
            } else {
                low = mid + 1;
            }
        }
        return low;
    }

    public int countElementsInRange(int[] arr, int s, int l) {
        int leftIndex = findLowerBound(arr, s);
        int rightIndex = findUpperBound(arr, l);
        
        return rightIndex - leftIndex;
    }
    
    public int maxFrequency(int[] nums, int k, int numOperations) {
        Arrays.sort(nums);

        int n = nums.length;
        int finalAns =0;

        Map<Integer, Integer> mp = new HashMap<>();

        int ans[]=new int[n];
        
        for(int i=0;i<n;i++){
            int s, e, freOfNum, flipAllowed, flipReq, num;

            num = nums[i];
            s=num-k;
            e=num+k;
            
            ans[i]=countElementsInRange(nums, s, e);
            if (mp.containsKey(num))
                freOfNum = mp.get(num)+1;
            else
                freOfNum=1;
            flipAllowed = numOperations;
            flipReq = ans[i]-freOfNum;
            
            if(flipReq<=flipAllowed){
                finalAns = Math.max(finalAns, ans[i]);
            }else{
                finalAns = Math.max(finalAns, freOfNum+flipAllowed);
            }

            // second
            num = nums[i]-k;
            s=num-k;
            e=num+k;
            
            ans[i]=countElementsInRange(nums, s, e);
            if (mp.containsKey(num))
                freOfNum = mp.get(num)+1;
            else
                freOfNum=1;
            flipAllowed = numOperations-1;
            flipReq = ans[i]-freOfNum;
            
            if(flipReq<=flipAllowed){
                finalAns = Math.max(finalAns, ans[i]);
            }else{
                finalAns = Math.max(finalAns, freOfNum+flipAllowed);
            }

            // third
            num = nums[i]+k;
            s=num-k;
            e=num+k;
            
            ans[i]=countElementsInRange(nums, s, e);
            if (mp.containsKey(num))
                freOfNum = mp.get(num)+1;
            else
                freOfNum=1;
            flipAllowed = numOperations-1;
            flipReq = ans[i]-freOfNum;
            
            if(flipReq<=flipAllowed){
                finalAns = Math.max(finalAns, ans[i]);
            }else{
                finalAns = Math.max(finalAns, freOfNum+flipAllowed);
            }

            mp.put(nums[i], mp.getOrDefault(nums[i], 0) + 1);
        }
        
        return finalAns;
    }
}",1447750256
Ashish Joon,AshishJoon,535,3622,python3,"class Solution:
    def maxFrequency(self, n, k, op):
        mx=max(n)
        sz=mx+k+2
        fc=[0]*sz
        for num in n:
            fc[num]+=1
        ps=[0]*sz
        ps[0]=fc[0]
        for i in range(1,sz):
            ps[i]=ps[i-1]+fc[i]
        mf=0
        for x in range(sz):
            if fc[x]==0 and op==0:
                continue
            lb=max(0,x-k)
            rb=min(sz-1,x+k)
            tir=ps[rb]-(ps[lb-1]if lb>0 else 0)
            ca=tir-fc[x]
            t=fc[x]+min(op,ca)
            mf=max(mf,int(t))
        return mf",1447721832
Ashish Joon,AshishJoon,535,3626,cpp,"class Solution {
public:
    int digitProduct(int num) {
        int product = 1;
        while (num > 0) {
            int digit = num % 10;
            if (digit == 0)
                return 0;
            product *= digit;
            num /= 10;
        }
        return product;
    }
    int smallestNumber(int n, int t) {
        while (digitProduct(n) % t != 0) {
            n++;
        }
        return n;
    }
};
",1447656941
Ashish Joon,AshishJoon,535,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        int n=nums.size();
        map<int,int>freq;
        vector<pair<int,int>>vec;
        set<int>pt;
        for(int it:nums){
            freq[it]++;
            vec.push_back({it-k,1});
            vec.push_back({it+k+1,-1});
        }
        for(auto it:vec)
            pt.insert(it.first);
        for(auto it:freq)
            pt.insert(it.first);
        
        sort(vec.begin(),vec.end());
        int idx=0,cur=0,maxi=0,actual=0;
        for(auto it:pt){
            while(idx<vec.size() && vec[idx].first<=it){
                cur+=vec[idx].second;
                idx++;
            }
            actual=freq.count(it)?freq[it]:0;
            int temp=actual+min(numOperations,cur-actual);
            maxi=max(maxi,temp);
        }
        return maxi;
    }
};",1447766445
Isa,isa773,536,3622,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        n = len(nums)
        nums.sort()
        hx = defaultdict(int)
        for x in nums: hx[x] += 1
        ans = 0
        for i in range(n):
            x = nums[i]
            l = bisect_left(nums, x-k)
            r = bisect_right(nums, x+k)
            ans = max(ans, hx[x] + min(numOperations, r-l-hx[x]))
            #print(x, hx[x], l, r, ans)
        if k == 0: return ans
        
        h = []
        for x in nums:
            heappush(h, ((x-k,-1), 1))
            heappush(h, ((x-1,1), -1))
            heappush(h, ((x+1,-1), 1))
            heappush(h, ((x+k,1), -1))
        s = 0
        while len(h) > 0:
            (x, y), d = heappop(h)
            if d == 1:
                s += 1
            elif d == -1:
                s -= 1
            if s <= numOperations:
                ans = max(ans, s)
        
        
        return ans
            
            
        ",1447741346
Isa,isa773,536,3626,python3,"class Solution:
    def smallestNumber(self, n: int, t: int) -> int:
        ans = 0
        for i in range(n, 10*n+1):
            x, s = i, 1
            while x > 0:
                s *= x % 10
                x = x // 10
            if s % t == 0: return i
        return 0
                
            ",1447656890
Isa,isa773,536,3640,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        n = len(nums)
        nums.sort()
        hx = defaultdict(int)
        for x in nums: hx[x] += 1
        ans = 0
        for i in range(n):
            x = nums[i]
            l = bisect_left(nums, x-k)
            r = bisect_right(nums, x+k)
            ans = max(ans, hx[x] + min(numOperations, r-l-hx[x]))
            #print(x, hx[x], l, r, ans)
        if k == 0: return ans
        
        h = []
        for x in nums:
            heappush(h, ((x-k,-1), 1))
            heappush(h, ((x-1,1), -1))
            heappush(h, ((x+1,-1), 1))
            heappush(h, ((x+k,1), -1))
        s = 0
        while len(h) > 0:
            (x, y), d = heappop(h)
            if d == 1:
                s += 1
            elif d == -1:
                s -= 1
            if s <= numOperations:
                ans = max(ans, s)
        
        
        return ans",1447742791
vpm21,vivekpm21,537,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        const int MAX_NUM = 1e5;
        const int OFFSET = MAX_NUM;
        const int SIZE = 2 * MAX_NUM + 5;

        vector<int> freq(SIZE, 0);
        vector<int> counts(SIZE + 1, 0);

        int n = nums.size();

        
        for (int i = 0; i < n; ++i) {
            int num = nums[i];
            int adjusted_num = num + OFFSET;

            freq[adjusted_num] += 1;

            int left = num - k + OFFSET;
            int right = num + k + OFFSET;

            if (left < 0) left = 0;
            if (right >= SIZE) right = SIZE - 1;

            counts[left] += 1;
            counts[right + 1] -= 1; 
        }

        
        for (int i = 1; i < SIZE; ++i) {
            counts[i] += counts[i - 1];
        }

        int maxFrequency = 0;

        
        for (int x = 0; x < SIZE; ++x) {
            if (freq[x] > 0 || counts[x] > 0) {
                int freq_x = freq[x];
                int total_adjustable_to_x = counts[x];
                int adjustable_excl_freq = total_adjustable_to_x - freq_x;

                int total_frequency = freq_x + min(numOperations, adjustable_excl_freq);

                if (total_frequency > maxFrequency) {
                    maxFrequency = total_frequency;
                }
            }
        }

        return maxFrequency;
    }
};",1447733474
vpm21,vivekpm21,537,3626,cpp,"class Solution {
public:
    int smallestNumber(int n, int t)
    {
        for(int i = n; i <= 1000; i++)
        {
            int product = 1;
            int temp = i;
            bool hasZero = false;

            while(temp > 0)
            {
                int digit = temp % 10;
                if(digit == 0)
                {
                    hasZero = true;
                    break;
                }
                product *= digit;
                temp /= 10;
            }
            if(hasZero)
                product = 0;
            if(product % t == 0)
                return i;
        }
        return -1; 
    }
};",1447675743
vpm21,vivekpm21,537,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        int n = nums.size();
        vector<long long> points;
        unordered_map<long long, int> count_unadjusted;
        
        
        for (int i = 0; i < n; ++i) {
            points.push_back(nums[i]);
            points.push_back(nums[i] - k);
            points.push_back(nums[i] + k + 1);
            count_unadjusted[nums[i]]++;
        }
        
        
        sort(points.begin(), points.end());
        points.erase(unique(points.begin(), points.end()), points.end());
        unordered_map<long long, int> t_to_idx;
        for (int i = 0; i < points.size(); ++i) {
            t_to_idx[points[i]] = i;
        }
        
        
        vector<int> counts(points.size() + 1, 0);
        for (int i = 0; i < n; ++i) {
            long long l = nums[i] - k;
            long long r = nums[i] + k + 1;
            int l_idx = t_to_idx[l];
            int r_idx = t_to_idx[r];
            counts[l_idx] += 1;
            counts[r_idx] -= 1;
        }
        
    
        for (int i = 1; i < counts.size(); ++i) {
            counts[i] += counts[i - 1];
        }
        
        
        int max_freq = 0;
        for (int i = 0; i < points.size(); ++i) {
            long long t = points[i];
            int total_counts = counts[i];
            int count_unadj = count_unadjusted[t];
            int count_adj = total_counts - count_unadj;
            int total = count_unadj + min(count_adj, numOperations);
            max_freq = max(max_freq, total);
        }
        return max_freq;
    }
};",1447758961
Ansh Gupta,AG___,539,3622,cpp,"class Solution {
public:
const int N= 100000;
    int maxFrequency(vector<int>& v, int k, int nn) {
        // sort(v.begin(), v.end());
        // int n = v.size();
        // int j = 0, z = 0;
        // int ans = 0;

        // for (int i = 0; i < n; i++) {
        //     z += v[i];

        //     while ((int)(i - j + 1) * v[i] - z >nn * k) 
        //     {
        //         z -= v[j];
        //         j++;
        //     }
        //     ans = max(ans, i - j + 1);
        // }

        // return ans;
        vector<int> f(N+1, 0), pf(N+1, 0);
        for(int n : v) f[n]++;
        for(int i = 1; i <= N; i++) pf[i] = pf[i - 1] + f[i];

        int ans = 0;
        for(int i = 1; i <= N; i++) {
            int left = max(1,i-k), right = min(N,i+ k);
            int z = pf[right] - pf[left-1];
            ans = max(ans, f[i] + min(nn, z-f[i]));
        }
        return ans;
    }
};
",1447697833
Ansh Gupta,AG___,539,3626,cpp,"class Solution {
public:
    int mul(int n) {
        int z = 1;
        while (n) {
            z = z * (n % 10);
            n = n / 10;
        }
        return z;
    }
    int smallestNumber(int n, int t) {
        while(1)
            {
                if(mul(n)%t==0)
                    return n;
                n++;
            }
    }
};",1447658961
Ansh Gupta,AG___,539,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& v, int k, int nn) {
        int n = v.size();
        map<int, int> f;
        vector<pair<int, int>> vp;

        for (int i : v) {
            f[i]++;
            vp.push_back({i - k, +1});
            vp.push_back({i + k + 1, -1});
        }
        set<int> s;
        for (auto i : vp)
            s.insert(i.first);
        for ( auto i : f)
            s.insert(i.first);

        sort(vp.begin(), vp.end());

        int idx = 0;
        int z = 0, ans = 0;

        for (int i : s) {
            while (idx < vp.size() && vp[idx].first <= i) {
                z += vp[idx].second;
                idx++;
            }
            ans = max(ans, f[i] + min(nn, z - f[i]));
        }

        return ans;
    }
};
",1447751322
seharahmad1202,seharahmad1202,540,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        int n=nums.size();
        map<int,int> m;
        vector<pair<int,int>> v;
        for(int x:nums){
            m[x]++;
            v.emplace_back(x-k,1);
            v.emplace_back(x+k+1,-1);
        }
        set<int> s;
        for(auto i:v){
            s.insert(i.first);
        }
        for(auto [x,count]:m){
            s.insert(x);
        }
        sort(v.begin(),v.end());
        int i=0;
        int cur=0;
        int maxi=0;
        int curr=0;
        for(int t:s){
            while(i<v.size() && v[i].first<=t){
                cur+=v[i].second;
                i++;
            }
            curr=m.count(t)?m[t]:0;
            int pos=curr+min(numOperations,cur-curr);
            maxi=max(maxi,pos);
        }
        return maxi;
    }
};",1447726259
seharahmad1202,seharahmad1202,540,3626,cpp,"class Solution {
public:
    int Helper(int n){
        int mul=1;
        while(n!=0){
            int temp=n%10;
            mul*=temp;
            n/=10;
        }
        return mul;
    }
    int smallestNumber(int n, int t) {
        int n1=n;
        while(1){
            if(Helper(n1)%t==0){
                return n1;
            }
            n1++;
        }
    }
};",1447665500
seharahmad1202,seharahmad1202,540,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        int n=nums.size();
        map<int,int> m;
        vector<pair<int,int>> v;
        for(int x:nums){
            m[x]++;
            v.emplace_back(x-k,1);
            v.emplace_back(x+k+1,-1);
        }
        set<int> s;
        for(auto i:v){
            s.insert(i.first);
        }
        for(auto [x,count]:m){
            s.insert(x);
        }
        sort(v.begin(),v.end());
        int i=0;
        int cur=0;
        int maxi=0;
        int curr=0;
        for(int t:s){
            while(i<v.size() && v[i].first<=t){
                cur+=v[i].second;
                i++;
            }
            curr=m.count(t)?m[t]:0;
            int pos=curr+min(numOperations,cur-curr);
            maxi=max(maxi,pos);
        }
        return maxi;
    }
};",1447725338
Ashu Rajput,AshuRajput02,541,3622,cpp,"// class Solution {
// public:
//     int maxFrequency(vector<int>& nums, int k, int numOperations) {
        
//         int n=nums.size();
//         sort(nums.begin(),nums.end());
//         for(int i=n-1;i>0;i--){
//             if(abs(nums[i]-nums[i-1])<=k){
//                 nums[i]=nums[i-1];
//             }
            
//             for(int i=0;i<n;i++){
                
//             }
//         }
//     }
// };
#include <vector>
#include <algorithm>
#include <numeric>
#include <iostream>

using namespace std;

class Solution {
public:
    int maxFrequency(const vector<int>& nums, int k, int op) {
        int max_num = maxx(nums);
        int max_size = max_num + k + 2;

        vector<int> freq(max_size, 0);
        for (int num : nums) {
            freq[num]++;
        }

        vector<int> prefixsum = helper(freq, max_size);

        return solve(freq, prefixsum, k, op);
    }

private:
    int maxx(const vector<int>& nums) {
        int max_value = nums[0];
        for (int num : nums) {
            if (num > max_value) {
                max_value = num;
            }
        }
        return max_value;
    }

    vector<int> helper(const vector<int>& freq, int size) {
        vector<int> prefixsum(size, 0);
        prefixsum[0] = freq[0];
        for (int i = 1; i < size; ++i) {
            prefixsum[i] = prefixsum[i - 1] + freq[i];
        }
        return prefixsum;
    }

    int solve(const vector<int>& freq, const vector<int>& prefixsum, int k, int op) {
        int anss = 0;
        int size = freq.size();

        for (int x = 0; x < size; ++x) {
            if (freq[x] == 0 && op == 0) {
                continue;
            }

            int left = max(0, x - k);
            int right = min(size - 1, x + k);
            int jig=0;
            if(left>0)
                jig=prefixsum[left-1];
            int totalrange = prefixsum[right] - jig;
            int ash = totalrange - freq[x];//kya change karke make equal
            int total = freq[x] + min(op, ash);

            anss = max(anss, total);
        }

        return anss;
    }
};
",1447724706
Ashu Rajput,AshuRajput02,541,3626,cpp,"class Solution {
public:
    int smallestNumber(int n, int t) {
        while (true) {
            int num = n;
            int pd = 1;
            while (num > 0) {
                int digit = num % 10;
                pd *= digit;
                num /= 10;
            }
            if (pd % t == 0) {
                return n;
            }
            n++;
        }
        return n;
    }
};
",1447665833
Ashu Rajput,AshuRajput02,541,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        map<int, int> freq;
        for (int num : nums) {
            freq[num]++;
        }

        vector<pair<int, int>> events;
        for (int num : nums) {
            events.push_back(make_pair(num - k, +1));   
            events.push_back(make_pair(num + k + 1, -1));
        }
        sort(events.begin(), events.end());

        set<int> points = helper(events, freq);
        return solve(events, points, freq, numOperations);
    }
    set<int> helper(const vector<pair<int, int>>& events, const map<int, int>& freq) {
        set<int> points;
        for (const auto& event : events) {
            points.insert(event.first);
        }
        for (const auto& p : freq) {
            points.insert(p.first);
        }
        return points;
    }

    int solve(const vector<pair<int, int>>& events, const set<int>& points, 
                              const map<int, int>& freq, int numOperations) {
        int index = 0, jig = 0, maxx = 0;
        for (int t : points) {
            while (index < events.size() && events[index].first <= t) {
                jig += events[index].second;
                index++;
            }
            int actualmein = freq.count(t) ? freq.at(t) : 0;
            int pf = actualmein + min(numOperations, jig - actualmein);
            maxx = max(maxx, pf);
        }
        return maxx;
    }
};
",1447759326
krunalpabari11,krunalpabari11,542,3622,typescript,"function maxFrequency(nums: number[], k: number, noppps: number): number {
    const mxn = Math.max(...nums);
    const leennn = mxn + k + 2;
    const f111 = new Array(leennn).fill(0);

    pupllfreq(nums, f111);
    const pre = calprefsmmm(f111, leennn);

    let re11s = 0;
    for (let x = 0; x < leennn; x++) {
        if (f111[x] === 0 && noppps === 0) continue;

        const fleft = Math.max(0, x - k);
        const frightt = Math.min(leennn - 1, x + k);
        const toalllll = pre[frightt] - (fleft > 0 ? pre[fleft - 1] : 0);
        const addj1 = toalllll - f111[x];
        const total = f111[x] + Math.min(noppps, addj1);

        re11s = Math.max(re11s, total);
    }

    return re11s;
}

function pupllfreq(nums: number[], f111: number[]): void {
    for (const num of nums) {
        f111[num]++;
    }
}

function calprefsmmm(f111: number[], leennn: number): number[] {
    const preeee = new Array(leennn).fill(0);
    preeee[0] = f111[0];
    for (let i = 1; i < leennn; i++) {
        preeee[i] = preeee[i - 1] + f111[i];
    }
    return preeee;
}
",1447727482
krunalpabari11,krunalpabari11,542,3626,typescript,"function smallestNumber(n: number, t: number): number {
    function getD11(l11: number): number {
        if (l11 === 0) return 0;
        let product = 1;
        while (l11 > 0) {
            const d11 = l11 % 10;
            if (d11 === 0) return 0;  
            product *= d11;
            l11 = Math.floor(l11 / 10);
        }
        return product;
    }

    if (t === 1) return n;

    let c11 = n;
    while (true) {
        const p11 = getD11(c11);
        if (p11 % t === 0) {
            return c11;
        }
        c11++;
    }
}

",1447691255
krunalpabari11,krunalpabari11,542,3640,typescript,"function maxFrequency(nums: number[], k: number, noppss: number): number {
    const fruqqqq = new Map<number, number>();
    const eveeee: Array<[number, number]> = [];

    popullateFreqq111(nums, k, fruqqqq, eveeee);

    const p111 = new Set<number>();
    cp1111(eveeee, fruqqqq, p111);

    eveeee.sort((a, b) => a[0] - b[0]);

    let idxxxx = 0;
    let coverlll = 0;
    let mfeeeereq = 0;

    for (const t of Array.from(p111).sort((a, b) => a - b)) {
        while (idxxxx < eveeee.length && eveeee[idxxxx][0] <= t) {
            coverlll += eveeee[idxxxx][1];
            idxxxx++;
        }

        const accnttt = fruqqqq.has(t) ? fruqqqq.get(t)! : 0;
        const pssfreqqq = accnttt + Math.min(noppss, coverlll - accnttt);

        mfeeeereq = Math.max(mfeeeereq, pssfreqqq);
    }

    return mfeeeereq;
}

function popullateFreqq111(nums: number[], k: number, fruqqqq: Map<number, number>, eveeee: Array<[number, number]>) {
    for (const num of nums) {
        fruqqqq.set(num, (fruqqqq.get(num) || 0) + 1);
        eveeee.push([num - k, 1]);
        eveeee.push([num + k + 1, -1]);
    }
}

function cp1111(eveeee: Array<[number, number]>, fruqqqq: Map<number, number>, p111: Set<number>) {
    for (const [point, _] of eveeee) {
        p111.add(point);
    }
    for (const [key, _] of fruqqqq.entries()) {
        p111.add(key);
    }
}
",1447743280
Lovkash garg,Lovkashgarg,543,3622,cpp,"
class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        int n = nums.size();
        unordered_map<int, int> m;
        vector<pair<int, int>> events;
        for (int val : nums) {
            m[val] ++;
            events.push_back({val - k, 1});
            events.push_back({val + k + 1, -1}); 
        }
        
        set<int> points;
        for (const auto& event : events) {
            points.insert(event.first);
        }
        for (const auto& p : m) {
            points.insert(p.first);
        }
        
        sort(events.begin(), events.end());
        vector<int> sortedPoints(points.begin(), points.end());

        
        
        int index=0,current = 0;
        int ans = 0;
        for (auto  t : sortedPoints) {
          
            while (index < events.size() && events[index].first <= t) {
                current += events[index].second;
                index++;
            }
           int actual =  m.count(t) > 0 ? m[t] : 0;

            int freqmin = actual + min(numOperations, current - actual);
            ans = max(ans,freqmin);
        }
        
        return ans;
    }
};",1447756401
Lovkash garg,Lovkashgarg,543,3626,cpp,"class Solution {
public:
    int smallestNumber(int n, int t) {
      int ans=n;
        while(true){
              
            string d=to_string(ans);
            
            // 
            int sum=1;
            for(int i=0;i<d.size();i++){
                sum*=(d[i]-'0');
            }
            if(sum%t==0){
                break;
            }
            
            ans++;
            
            
        }
        return ans;
    }
};",1447658885
Lovkash garg,Lovkashgarg,543,3640,cpp,"
class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        int n = nums.size();
        unordered_map<long long int, int> m;
        vector<pair<int, int>> events;
        for (int val : nums) {
            m[val] ++;
            events.push_back({val - k, 1});
            events.push_back({val + k + 1, -1}); 
        }
        
        set<int> points;
        for (const auto& event : events) {
            points.insert(event.first);
        }
        for (const auto& p : m) {
            points.insert(p.first);
        }
        
        sort(events.begin(), events.end());
        vector<int> sortedPoints(points.begin(), points.end());

        
        
        int index=0,current = 0;
        int ans = 0;
        for (auto  t : sortedPoints) {
          
            while (index < events.size() && events[index].first <= t) {
                current += events[index].second;
                index++;
            }
           int actual =  m.count(t) > 0 ? m[t] : 0;

            int freqmin = actual + min(numOperations, current - actual);
            ans = max(ans,freqmin);
        }
        
        return ans;
    }
};",1447759403
Don Paul,donpaul271,544,3622,cpp,"#define ll long long

ll x = 1e5 + 1;
ll mx = 2e5 + 5;



class Solution {
public:
    int maxFrequency(vector<int>& arr, int k, int op) {
            
        vector<ll> nums(2e5+10, 0);
        
        unordered_map<ll, ll> m;
        
        
        for(int i=0; i<arr.size(); ++i)
        {
            ll curr = arr[i];
            m[curr]++;
            
            ll mcurr = curr + x;
            ll l = mcurr - k;
            ll r = mcurr + k + 1;
            
            r = min(mx, r);
                
            nums[l] += 1;
            nums[r] -= 1;
        }
        
        ll sum = 0;
        
        ll n = nums.size();
        
        for(int i=0; i<n; ++i)
        {
            sum += nums[i];
            nums[i] = sum;
        }

        ll ans = 0;
        
        
        for(int i=0; i<mx; ++i)
        {
            ll a1, a2;
            
            if(m.find(i-x) != m.end())
                a1 = m[i-x];
            else
                a1 = 0;
            
            a2 = nums[i];
            
            ll ex = a2 - a1;
            
            if(ex > op)
                a2 = a1 + op;
            
            ans = max(ans, a2);
        }
        
        return ans;
        
    }
};",1447702337
Don Paul,donpaul271,544,3626,cpp,"#define ll long long

bool find(ll n, ll t)
{
    string curr = to_string(n); 
    
    ll now = 1;
    
    for(int i=0; i<curr.length(); ++i)
    {
        ll x = curr[i] - '0';
        
        now = now * x;
    }

    if(now%t == 0)
        return true;
    
    return false;
}



class Solution {
public:
    int smallestNumber(int n, int t) {
            
        
        for(int i=n; i<=10000; ++i)
        {
            bool stat = find(i, t);
            
            if(stat)
                return i;
        }
        
        return 0;
    }
};






",1447660737
Don Paul,donpaul271,544,3640,cpp,"#define ll long long


ll findl(vector<int>& arr, ll val) 
{
    ll low = 0;
    ll high = arr.size() - 1; 
    ll ans = -1;
 
    while (low <= high) 
    {
        ll mid = (low + high)/2;
 
        if (arr[mid] >= val) 
        {
            ans = mid;
            high = mid - 1;
        } 
 
        else 
        {
            low = mid + 1;
        }
    }
 
    return ans;
}



ll findh(vector<int>& arr, ll val) 
{
    ll low = 0;
    ll high = arr.size() - 1; 
    ll ans = -1;
 
    while (low <= high) 
    {
        ll mid = (low + high)/2;
 
        if (arr[mid] <= val) 
        {
            ans = mid;
            low = mid + 1;
        } 
 
        else 
        {
            high = mid - 1;
        }
    }
 
    return ans;
}
 



class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int op1) {
        
        ll op = op1;
        
        unordered_map<ll, ll> m;
        
        for(int i=0; i<nums.size(); ++i)
        {
            m[nums[i]]++;
        }
        
        sort(nums.begin(), nums.end());
        
        ll a1 = 0;
        
        for(int i=0; i<nums.size(); ++i)
        {
            ll curr = nums[i];
            ll l = curr - k;
            ll r = curr + k;
            
            ll i1 = findl(nums, l);
        
            ll i2 = findh(nums, r);
            
            ll tot = i2 - i1 + 1;
            tot = tot - m[curr];
            
            
            tot = min(tot, op);
            
            
            ll now = m[curr] + tot;
            a1 = max(a1, now);
        }
        
        
        
        
        ll sz = 2*k;
        
        ll pa = 0;
        ll pb = 0;
        
        ll ans = 0;
        
        ll n = nums.size();
        
        while(pb < n)
        {
            while(pb < n && nums[pb] - nums[pa] <= sz)
            {
                ans = max(ans, pb - pa + 1);
                ++pb;
            }
            
            while(pb < n && pa < pb && nums[pb]-nums[pa] > sz)
            {
                ++pa;
            }      
        }
        
        if(ans <= op)
            return ans;
        
        ans = op;
        
        cout<<a1<<"" ""<<ans<<""\n"";
        
        ll res = max(ans, a1);
        
        return res;
    
        
        
        
    }
};",1447767325
Rijit Banerjee,rijitb,545,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        int maxElement = *max_element(nums.begin(), nums.end()); 
        int rangeSize = maxElement + k + 1; 
        
        vector<long long> counts(rangeSize, 0);
        for (int num : nums) counts[num]++;
        
        vector<long long> prefixSum(rangeSize, 0);
        prefixSum[0] = counts[0];
        for (int i = 1; i < rangeSize; i++) {
            prefixSum[i] = prefixSum[i - 1] + counts[i];
        }

        int maxFreq = 0;
        
        for (int target = 0; target < rangeSize; target++) {
            long long totalInRange = 0;
            int left = max(0, target - k);
            int right = min(rangeSize - 1, target + k);
            
            totalInRange = prefixSum[right] - (left > 0 ? prefixSum[left - 1] : 0);
            long long remainingAdjustments = totalInRange - counts[target];
            long long adjustedFreq = counts[target] + min((long long)numOperations, remainingAdjustments);
            
            maxFreq = max(maxFreq, (int)adjustedFreq);
        }
        
        return maxFreq;
    }
};

",1447732066
Rijit Banerjee,rijitb,545,3626,cpp,"class Solution {
public:
    int product_of_digits(int number) {
        int product = 1;
        while (number > 0) {
            product *= number % 10;
            number /= 10;
        }
        return product;
    }
    int smallestNumber(int n, int t) {
        while (product_of_digits(n) % t != 0) {
            n++;
        }
        return n;
    }
};",1447664317
Rijit Banerjee,rijitb,545,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int ops) {
        int n = nums.size();
        map<int, int> count;
        vector<pair<int, int>> markers;

        for (int i = 0; i < n; i++) {
            int num = nums[i];
            count[num]++;
            markers.push_back({num - k, +1});
            markers.push_back({num + k + 1, -1});
        }

        set<int> points;
        for (int i = 0; i < markers.size(); i++) {
            points.insert(markers[i].first);
        }
        for (auto it = count.begin(); it != count.end(); ++it) {
            points.insert(it->first);
        }

        sort(markers.begin(), markers.end());

        int idx = 0, active = 0, maxFreq = 0, occur = 0;

        for (auto it = points.begin(); it != points.end(); ++it) {
            int pt = *it;

            while (idx < markers.size() && markers[idx].first <= pt) {
                active += markers[idx].second;
                idx++;
            }

            if (count.find(pt) != count.end()) {
                occur = count[pt];
            } else {
                occur = 0;
            }

            int possibleFreq;
            if (ops < active - occur) {
                possibleFreq = occur + ops;
            } else {
                possibleFreq = active;
            }

            if (possibleFreq > maxFreq) {
                maxFreq = possibleFreq;
            }
        }

        return maxFreq;
    }
};


",1447743679
adsulswapnil27,adsulswapnil27,546,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int x) {
        vector<int>arr;
        map<int,int>vp;
        for(int i=0;i<nums.size();i++){
            arr.push_back(nums[i]-k);
            arr.push_back(nums[i]+k);
            arr.push_back(nums[i]);
            vp[nums[i]]++;
        }
        int n=arr.size();
        sort(arr.begin(),arr.end());
        map<int,int>mp;
        vector<int>brr(arr.size()+1,0);
        for(int i=0;i<arr.size();i++){
            mp[arr[i]]=i;
        }
        for(int i=0;i<nums.size();i++){
            brr[mp[nums[i]-k]]+=1;
            brr[mp[nums[i]+k]+1]-=1;
        }
        for(int i=1;i<arr.size();i++){
            brr[i]+=brr[i-1];
        }

        int ans=0;
        for(auto it:vp){
            ans=max(ans,it.second);
        }
        for(int i=0;i<brr.size();i++){
            // cout<<
            ans = max(ans,min(x,brr[i]-vp[arr[i]])+vp[arr[i]]) ; 
        }
        return ans;
        
        
    }
};",1447709376
adsulswapnil27,adsulswapnil27,546,3626,cpp,"class Solution {
public:
    long long solver(int n){
        string p=to_string(n);
        long long q=1;
        for(auto it:p) q*=(it-'0');
        return q;
    }
    int smallestNumber(int n, int t) {
        while(1){
            // cout<<solver(n)<<"" ""<<n<<endl;
            if(solver(n)%t==0)return n;
            n++;
        }
        return 0;
    }
};",1447667071
adsulswapnil27,adsulswapnil27,546,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int x) {
        vector<int>arr;
        map<int,int>vp;
        for(int i=0;i<nums.size();i++){
            arr.push_back(nums[i]-k);
            arr.push_back(nums[i]+k);
            arr.push_back(nums[i]);
            vp[nums[i]]++;
        }
        int n=arr.size();
        sort(arr.begin(),arr.end());
        map<int,int>mp;
        vector<int>brr(arr.size()+1,0);
        for(int i=0;i<arr.size();i++){
            mp[arr[i]]=i;
        }
        for(int i=0;i<nums.size();i++){
            brr[mp[nums[i]-k]]+=1;
            brr[mp[nums[i]+k]+1]-=1;
        }
        for(int i=1;i<arr.size();i++){
            brr[i]+=brr[i-1];
        }

        int ans=0;
        for(auto it:vp){
            ans=max(ans,it.second);
        }
        for(int i=0;i<brr.size();i++){
            // cout<<
            ans = max(ans,min(x,brr[i]-vp[arr[i]])+vp[arr[i]]) ; 
        }
        return ans;
        
        
    }
};",1447709947
Bismit Purohit,vivoBook1,547,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        int cnt[200005]={0};
        
        for(int x:nums) cnt[x]++;
        
        for(int i=1;i<=200004;i++) cnt[i]+=cnt[i-1];
        
        int ans=0;
        
        for(int i=1;i<=100000;i++)
        {
            int freq = ((i-k)<=0 ? 0:cnt[i-k-1]);
            int fi = cnt[i]-cnt[i-1];
            freq = cnt[i+k]-freq-fi;
            freq=min(freq,numOperations);
            // if(freq+fi > ans)
            // {
            //     cout<<i<<'\n';
            // }
            
            ans=max(ans,freq+fi);
        }
        
        return ans;
    }
};",1447710601
Bismit Purohit,vivoBook1,547,3626,cpp,"class Solution {
public:
    int p(int i)
    {
        int m=1;
        while(i)
        {
            m*=(i%10);
            i/=10;
        }
        
        return m;
    }
    
    int smallestNumber(int n, int t) {
        int i=n;
        for(;i<=(n+10);i++)
        {
            if(p(i)%t == 0) break;
        }
        
        return i;
    }
};",1447663226
Bismit Purohit,vivoBook1,547,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        map<long long,int> mp;
        unordered_map<long long,int> f;
        
        for(int x:nums) 
        {
            mp[x]++;
            f[x]++;
        }
        
        int prev=0;
        
        // calculate the prefix sum in the map
        for(auto& itr:mp)
        {
            itr.second += prev;
            prev = itr.second;
        }
        
        // for(auto itr:mp)
        // {
        //     cout<<itr.first<<"" ""<<itr.second<<'\n';
        // }
        
        //store the possibilities in the vector and sort it
        set<long long>s;
        
        for(auto itr:f)
        {
            s.insert(itr.first-k);
            s.insert(itr.first);
            s.insert(itr.first+k);
        }
        
        vector<long long> pos(s.begin(),s.end());
        
        //iterate through each one and find if its freq is the answer
        int ans=0;
        for(auto x:pos)
        {
            // cout<<x<<"" "";
            int f1;
            auto itr = mp.upper_bound(x+k);
            if(itr==mp.begin()) f1=0;
            else
            {
                itr--;
                f1=(*itr).second;
            }
            // cout<<f1<<"" "";
            
            int f2;
            itr = mp.upper_bound(x-k-1);
            if(itr==mp.begin()) f2=0;
            else
            {
                itr--;
                f2=(*itr).second;
            }
            // cout<<f2<<"" "";
            
            // cout<<f[x]<<"" "";
            
            int freq=f1-f2-f[x];
            freq=min(freq,numOperations);
            
            ans=max(ans,freq+f[x]);
            
            // cout<<'\n';
        }
        // cout<<""-----------------------------""<<'\n';
        
        return ans;
    }
};",1447767650
_elitecoder,_elitecoder,548,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        sort(nums.begin(),nums.end());
        int ans = 0;
        for(int i=0;i<nums.size();i++){
            int j1 = lower_bound(nums.begin(),nums.end(),nums[i] - 2*k) - nums.begin();
            int j2 = lower_bound(nums.begin(),nums.end(),nums[i] - k) - nums.begin();
            int j3 = lower_bound(nums.begin(),nums.end(),nums[i]) - nums.begin();
            int j4 = upper_bound(nums.begin(),nums.end(),nums[i]) - nums.begin();
            int j5 = upper_bound(nums.begin(),nums.end(),nums[i] + k) - nums.begin();
            j4--;
            j5--;
            ans = max({ans,min(i - j1 + 1,numOperations),j4 - j3 + 1 + min(numOperations,j3 - j2 + j5 - j4)});
            if(j3 - j2 <= numOperations){
                ans = max(ans,j3 - j2 + i - j3 + 1);
            }
       }
        return ans;
    }
};",1447759925
_elitecoder,_elitecoder,548,3626,cpp,"class Solution {
public:
    int smallestNumber(int n, int t) {
        int ans = 0;
        for(int i=n;i<=100;i++){
            int k = 1,temp=i;
            while(temp!=0){
                k = k*(temp%10);
                temp/=10;
            }
            if(k%t==0){
                ans = i;
                break;
            }
        }
        return ans;
    }
};",1447659021
_elitecoder,_elitecoder,548,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        sort(nums.begin(),nums.end());
        int ans = 0;
        for(int i=0;i<nums.size();i++){
            int j1 = lower_bound(nums.begin(),nums.end(),nums[i] - 2*k) - nums.begin();
            int j2 = lower_bound(nums.begin(),nums.end(),nums[i] - k) - nums.begin();
            int j3 = lower_bound(nums.begin(),nums.end(),nums[i]) - nums.begin();
            int j4 = upper_bound(nums.begin(),nums.end(),nums[i]) - nums.begin();
            int j5 = upper_bound(nums.begin(),nums.end(),nums[i] + k) - nums.begin();
            j4--;
            j5--;
            ans = max({ans,min(i - j1 + 1,numOperations),j4 - j3 + 1 + min(numOperations,j3 - j2 + j5 - j4)});
            if(j3 - j2 <= numOperations){
                ans = max(ans,j3 - j2 + i - j3 + 1);
            }
       }
        return ans;
    }
};",1447759636
Jaigarg,Jai_Garg,550,3622,cpp,"#include <bits/stdc++.h> 
using namespace std; 

template <typename T> 
using vi = vector<T>; 

class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int ops) {
        sort(nums.begin(), nums.end()); 
        int n = nums.size(); 
        int l = 0; 
        int res = 0; 
        map<int, int> freq;  

        vi<int> lres(n); 
        vi<int> rres(n); 

        for (int i = 0; i < n; i++) {
            freq[nums[i]]++; 
            while (nums[i] - nums[l] > k) {
                freq[nums[l]]--; 
                l++; 
            }

            int len = i - l + 1; 
            lres[i] = len - freq[nums[i]]; 
        }

        freq = {}; 
        int r = n - 1; 
        for (int i = n - 1; i >= 0; i--) {
            freq[nums[i]]++; 
            while (nums[r] - nums[i] > k) {
                freq[nums[r]]--; 
                r--; 
            }

            int len = r - i + 1; 
            rres[i] = len - freq[nums[i]]; 
        }

        freq = {}; 
        for (auto & x : nums) {
            freq[x]++; 
        }
            
        for (int i = 0; i < n; i++) {
            // cout << ""freq[nums[i]] : "" << freq[nums[i]] << "" nums[i] : "" << nums[i] << endl; 
            res = max(res, freq[nums[i]] + min(lres[i] + rres[i], ops)); 
        }

        l = 0; 
        for (int i = 0; i < n; i++) {
            while (abs(nums[i] - nums[l]) > 2 * k) {
                l++; 
            }
            int len = i - l + 1; 
            res = max(res, min(len, ops)); 
        }

        return res; 
    }
};",1447751330
Jaigarg,Jai_Garg,550,3626,cpp,"class Solution {
public:
    int product(int num)  {
        int res = 1; 
        while (num) {
            res *= (num % 10); 
            num /= 10; 
        }
        return res; 
    }


    int smallestNumber(int n, int t) {
        // n++; 

        while ((product(n) % t) != 0) {
            n++; 
        }

        return n; 
    }
};",1447659867
Jaigarg,Jai_Garg,550,3640,cpp,"#include <bits/stdc++.h> 
using namespace std; 

template <typename T> 
using vi = vector<T>; 

class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int ops) {
        sort(nums.begin(), nums.end()); 
        int n = nums.size(); 
        int l = 0; 
        int res = 0; 
        map<int, int> freq;  

        vi<int> lres(n); 
        vi<int> rres(n); 

        for (int i = 0; i < n; i++) {
            freq[nums[i]]++; 
            while (nums[i] - nums[l] > k) {
                freq[nums[l]]--; 
                l++; 
            }

            int len = i - l + 1; 
            lres[i] = len - freq[nums[i]]; 
        }

        freq = {}; 
        int r = n - 1; 
        for (int i = n - 1; i >= 0; i--) {
            freq[nums[i]]++; 
            while (nums[r] - nums[i] > k) {
                freq[nums[r]]--; 
                r--; 
            }

            int len = r - i + 1; 
            rres[i] = len - freq[nums[i]]; 
        }

        freq = {}; 
        for (auto & x : nums) {
            freq[x]++; 
        }
            
        for (int i = 0; i < n; i++) {
            // cout << ""freq[nums[i]] : "" << freq[nums[i]] << "" nums[i] : "" << nums[i] << endl; 
            res = max(res, freq[nums[i]] + min(lres[i] + rres[i], ops)); 
        }

        l = 0; 
        for (int i = 0; i < n; i++) {
            while (abs(nums[i] - nums[l]) > 2 * k) {
                l++; 
            }
            int len = i - l + 1; 
            res = max(res, min(len, ops)); 
        }

        return res; 
    }
};",1447752224
Zoro,shaswatgusain1,552,3622,javascript,"var maxFrequency = function(nums, k, namanoperations) {
    let gehunum = Math.max(...nums);
    let gon = gehunum + k + 2;
    let killua = new Array(gon).fill(0);

    for (let num of nums) {
        killua[num]++;
    }

    let micro = new Array(gon).fill(0);
    micro[0] = killua[0];
    for (let i = 1; i < gon; i++) {
        micro[i] = micro[i - 1] + killua[i];
    }

    let shaswat = 0;
    for (let x = 0; x < gon; x++) {
        if (killua[x] === 0 && namanoperations === 0) {
            continue;
        }

        let seema = Math.max(0, x - k);
        let suddho = Math.min(gon - 1, x + k);

        let vinayIncharge = micro[suddho] - (seema > 0 ? micro[seema - 1] : 0);

        let canAdjust = vinayIncharge - killua[x];

        let total = killua[x] + Math.min(namanoperations, canAdjust);

        shaswat = Math.max(shaswat, total);
    }

    return shaswat;
};
",1447732883
Zoro,shaswatgusain1,552,3626,cpp,"class Solution {
public:
    int digitProduct(int x) {
        int product = 1;
        while (x > 0) {
            int digit = x % 10;
            if (digit == 0) return 0; 
            product *= digit;
            x /= 10;
        }
        return product;
    }

    int smallestNumber(int n, int t) {
        int current = n;
        while (true) {
            int prod = digitProduct(current);
            if (prod % t == 0) return current;
            current++;
        }
    }
};
",1447652932
Zoro,shaswatgusain1,552,3640,cpp,"class Solution {
public:
    int maxFrequency(std::vector<int>& nums, int k, int namanoperations) {
        std::unordered_map<int, int> patwal = buildFrequencyMap(nums);
        std::vector<std::pair<int, int>> bhatt_ji = generateEvents(nums, k);

        std::set<int> halwa = collectPoints(bhatt_ji, patwal);
        std::sort(bhatt_ji.begin(), bhatt_ji.end());
        
        int shaswat = calculateMaxFrequency(bhatt_ji, halwa, patwal, k, namanoperations);
        return shaswat;
    }

private:
    std::unordered_map<int, int> buildFrequencyMap(const std::vector<int>& nums) {
        std::unordered_map<int, int> patwal;
        for (int num : nums) {
            patwal[num]++;
        }
        return patwal;
    }

    std::vector<std::pair<int, int>> generateEvents(const std::vector<int>& nums, int k) {
        std::vector<std::pair<int, int>> bhatt_ji;
        for (int num : nums) {
            bhatt_ji.push_back({num - k, 1});
            bhatt_ji.push_back({num + k + 1, -1});
        }
        return bhatt_ji;
    }

    std::set<int> collectPoints(const std::vector<std::pair<int, int>>& bhatt_ji, const std::unordered_map<int, int>& patwal) {
        std::set<int> halwa;
        for (const auto& event : bhatt_ji) {
            halwa.insert(event.first);
        }
        for (const auto& pair : patwal) {
            halwa.insert(pair.first);
        }
        return halwa;
    }

    int calculateMaxFrequency(const std::vector<std::pair<int, int>>& bhatt_ji, const std::set<int>& halwa, 
                              const std::unordered_map<int, int>& patwal, int k, int namanoperations) {
        int idx = 0;
        int predator = 0;
        int shaswat = 0;
        int gehu = 0;

        for (int t : halwa) {
            while (idx < bhatt_ji.size() && bhatt_ji[idx].first <= t) {
                predator += bhatt_ji[idx].second;
                idx++;
            }

            gehu = patwal.count(t) > 0 ? patwal.at(t) : 0;

            int vinayIncharge = gehu + std::min(namanoperations, predator - gehu);

            shaswat = std::max(shaswat, vinayIncharge);
        }

        return shaswat;
    }
};
",1447760743
Arnab,arnab_97,553,3622,java,"class Solution {
    public int maxFrequency(int[] nums, int k, int numOperations) {
        int maxNum = 0;
        for (int num : nums) {
            if (num > maxNum) maxNum = num;
        }
        int size = maxNum + k + 2; 
        int[] freq = new int[size];
        for (int num : nums) {
            freq[num]++;
        }

        long[] prefix = new long[size];
        prefix[0] = freq[0];
        for (int i = 1; i < size; i++) {
            prefix[i] = prefix[i - 1] + freq[i];
        }

        int maxFreq = 0;
        for (int x = 0; x < size; x++) {
            if (freq[x] == 0 && numOperations == 0) continue; 
            int left = Math.max(0, x - k);
            int right = Math.min(size - 1, x + k);
            long totalFreq = prefix[right] - (left > 0 ? prefix[left - 1] : 0);
            int countConvert = (int)(totalFreq - freq[x]);
            int operationsToConvert = Math.min(numOperations, countConvert);
            int currentFreq = freq[x] + operationsToConvert;
            if (currentFreq > maxFreq) {
                maxFreq = currentFreq;
            }
        }
        return maxFreq;
    }
}",1447670503
Arnab,arnab_97,553,3626,java,"class Solution {
    public int smallestNumber(int n, int t) {
        int current = n;
        while (true) {
            int product = digitProduct(current);
            if (product % t == 0) {
                return current;
            }
            current++;
        }
    }
    private static int digitProduct(int num) {
        if (num == 0) {
            return 0;
        }
        int product = 1;
        while (num > 0) {
            int digit = num % 10;
            product *= digit;
            if (product == 0) {
                break;
            }
            num /= 10;
        }
        return product;
    }
}",1447654337
Arnab,arnab_97,553,3640,java,"class Solution {
    public int maxFrequency(int[] nums, int k, int numOperations) {
        if (nums == null || nums.length == 0) return 0;

         Arrays.sort(nums);

         int n = nums.length;
         int uniqueCount = 1;
         for (int i = 1; i < n; i++) {
             if (nums[i] != nums[i - 1]) uniqueCount++;
         }

         int[] uniqueNums = new int[uniqueCount];
         int[] counts = new int[uniqueCount];
         uniqueNums[0] = nums[0];
         counts[0] = 1;
         int index = 1;
         for (int i = 1; i < n; i++) {
             if (nums[i] == uniqueNums[index - 1]) {
                 counts[index - 1]++;
             } else {
                 uniqueNums[index] = nums[i];
                 counts[index] = 1;
                 index++;
             }
         }
         int totalEvents = n * 2;
         int[][] events = new int[totalEvents][2];
         int eventIdx = 0;
         for (int y : nums) {
             events[eventIdx][0] = y - k;
             events[eventIdx][1] = 1; 
             eventIdx++;
             events[eventIdx][0] = y + k + 1;
             events[eventIdx][1] = -1; 
             eventIdx++;
         }
         Arrays.sort(events, (a, b) -> {
             if (a[0] != b[0]) return Integer.compare(a[0], b[0]);
             return Integer.compare(b[1], a[1]); 
         });
         int e_idx = 0; 
         int u_idx = 0; 
         int maxFreq = 0;
         int currentOverlap = 0;

         while (e_idx < totalEvents || u_idx < uniqueCount) {
             int nextEventPos = e_idx < totalEvents ? events[e_idx][0] : Integer.MAX_VALUE;
             int nextUniquePos = u_idx < uniqueCount ? uniqueNums[u_idx] : Integer.MAX_VALUE;
             int currentPos = Math.min(nextEventPos, nextUniquePos);

             while (e_idx < totalEvents && events[e_idx][0] == currentPos) {
                 currentOverlap += events[e_idx][1];
                 e_idx++;
             }
             if (u_idx < uniqueCount && uniqueNums[u_idx] == currentPos) {
              
                 int freq = Math.min(currentOverlap, counts[u_idx] + numOperations);
                 maxFreq = Math.max(maxFreq, freq);
                 u_idx++;
             } else {
                 int freq = Math.min(currentOverlap, numOperations);
                 maxFreq = Math.max(maxFreq, freq);
             }
         }

         return maxFreq;
    }
}
",1447736322
RandomUserName554,RandomUserName554,555,3622,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        
        nums.sort()
        n = len(nums)
        ans = 1
        C = Counter(nums)
        
        #with this method, assume we can anchor at x and bring everything to us
        def check_with_dupes(x):
            lower = bisect_left(nums, x-k)
            higher = bisect_right(nums,x+k)-1
            can = higher-lower+1
            ops_used = can - C[x]
            if ops_used > numOperations:
                can = C[x] + numOperations
            

            return can
        
        #with this method, assume all the windows in the range would have to move
        def check(x):
            lower = bisect_left(nums,x)
            higher = bisect_right(nums, x + 2*k)-1
            can = higher - lower + 1
            return min(can, numOperations)
            
        
        for x in set(nums):
            a, b = check_with_dupes(x), check(x)
            ans = max(ans, max(a,b))
        return ans",1447734285
RandomUserName554,RandomUserName554,555,3626,python3,"class Solution:
    def smallestNumber(self, n: int, t: int) -> int:
        

        while True:
            multi = 1 
            original = n
            while original > 0:
                multi*= original % 10
                original//=10
            
            if multi % t == 0:
                return n
            n+=1
                
                
        ",1447656144
RandomUserName554,RandomUserName554,555,3640,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        
        nums.sort()
        n = len(nums)
        ans = 1
        C = Counter(nums)
        
        #with this method, assume we can anchor at x and bring everything to us
        def check_with_dupes(x):
            lower = bisect_left(nums, x-k)
            higher = bisect_right(nums,x+k)-1
            can = higher-lower+1
            ops_used = can - C[x]
            if ops_used > numOperations:
                can = C[x] + numOperations
            

            return can
        
        #with this method, assume all the windows in the range would have to move
        def check(x):
            lower = bisect_left(nums,x)
            higher = bisect_right(nums, x + 2*k)-1
            can = higher - lower + 1
            return min(can, numOperations)
            
        
        for x in set(nums):
            a, b = check_with_dupes(x), check(x)
            ans = max(ans, max(a,b))
        return ans",1447736675
Mahadev___,shivbh321,556,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int nop) {
        map<int, int> rangeEffect;
unordered_map<int, int> frequencyMap;

int maxFrequency = 0, maxNum = -1;
for (auto &num : nums) {
    frequencyMap[num]++;
    rangeEffect[num - k]++;
    rangeEffect[num + k + 1]--;
    if (rangeEffect.find(num) == rangeEffect.end()) {
        rangeEffect[num] = 0;
    }
}



int currentSum = 0, result = 0, maxResult = -1e9;
for (auto &[value, effect] : rangeEffect) {
    currentSum += effect;
    if (currentSum > result) {
        if (frequencyMap.find(value) == frequencyMap.end()) {
            result = min(nop, currentSum);
        } else {
            result = min(frequencyMap[value] + nop, currentSum);
        }
        maxResult = max(maxResult, result);
    }
}
return maxResult;

    }
};",1447767419
Mahadev___,shivbh321,556,3626,cpp,"class Solution {
public:
    int smallestNumber(int n, int t) {
        for(int i=n;i>=0;i++){
            string s=to_string(i);
            long long p=1;
            for(int j=0;j<s.size();j++){
                p*=(s[j]-'0');
            }
            if(p%t==0) return i;
        }
        return 0;
    }
};",1447655638
Mahadev___,shivbh321,556,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int nop) {
        map<int, int> rangeEffect;
unordered_map<int, int> frequencyMap;

int maxFrequency = 0, maxNum = -1;
for (auto &num : nums) {
    frequencyMap[num]++;
    rangeEffect[num - k]++;
    rangeEffect[num + k + 1]--;
    if (rangeEffect.find(num) == rangeEffect.end()) {
        rangeEffect[num] = 0;
    }
}



int currentSum = 0, result = 0, maxResult = -1e9;
for (auto &[value, effect] : rangeEffect) {
    currentSum += effect;
    if (currentSum > result) {
        if (frequencyMap.find(value) == frequencyMap.end()) {
            result = min(nop, currentSum);
        } else {
            result = min(frequencyMap[value] + nop, currentSum);
        }
        maxResult = max(maxResult, result);
    }
}
return maxResult;
 
        
        
    }
};",1447768878
Ajay Maheshwari,unknown_ajay,557,3622,cpp,"#include ""bits/stdc++.h""
using namespace std;

/*
 
 File   : Leetcode.cpp
 -------------------
 |   Hello         |
 |   DSA !         |
 -------------------
 
 */

#define ll long long
#define mii map<int,int>
#define all(x) x.begin(),x.end()
#define ss second.second
#define countofSet(x) __builtin_popcount(x)
#define pb push_back
#define fir first
#define sec second
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
namespace __gnu_pbds{
typedef tree<int,
null_type,
less_equal<int>,
rb_tree_tag,
tree_order_statistics_node_update> ordered_set;
}
using namespace __gnu_pbds;


class Solution {
public:
    int maxFrequency(vector<int>& v, int k, int operations)
    {
        ordered_set os;
        int n = (int)v.size();
        mii mp;
        sort(all(v));
        
        auto functionn = [&](ll md) -> int {
            int cnt = os.order_of_key(md+k +1);
            cnt -= os.order_of_key(md-k);
            cnt -= mp[md];
            cnt = min(operations,cnt);
            cnt += mp[md];
            return cnt;
        };
        
        for(auto &x:v)
        {
            os.insert(x);
            mp[x]++;
        }

        int ans = 0;
        for(int i=v[0] - k;i<=v[n-1] + k;i++) ans= max(ans, functionn(i) );
        return ans;
    }
};
",1447701508
Ajay Maheshwari,unknown_ajay,557,3626,cpp,"#include ""bits/stdc++.h""
using namespace std;

/*
 
 File   : Leetcode.cpp
 -------------------
 |   Hello         |
 |   DSA !         |
 -------------------
 
 */

#define mii map<int,int>
#define vi vector<int>
#define vs vector<string>
#define vb vector<bool>
#define pii pair<int,int>
#define endl ""\n""
#define intmax INT_MAX
#define intmin INT_MIN
#define need_for_speed ios_base::sync_with_stdio(false); cin.tie(NULL);
#define ff(i,a,b) for(int i=a;i<b;i++)
#define rfor(i,a,b) for(int i=a;i>=b;i--)
#define all(x) x.begin(),x.end()
#define pt(x) { cout<<x<<""\n""; }
#define fs first.second
#define ss second.second
#define countofSet(x) __builtin_popcount(x)
#define pb push_back
#define fir first
#define sec second
#define sqrt(x) sqrtl(x)
#define ll long long

class Solution {
public:
    int smallestNumber(int n, int t) {
        
        while(true)
        {
            ll curN = n, prod = 1;
            while(curN)
            {
                prod *= (curN%10);
                curN/=10;
            }
            
            if(prod % t != 0)
            {n++;}
            else return n;
        }
        
        return -1000;
    }
};",1447704094
Ajay Maheshwari,unknown_ajay,557,3640,cpp,"/*
 
 File   : Leetcode.cpp
 -------------------
 |   Hello         |
 |   DSA !         |
 -------------------
 
 */

#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
namespace __gnu_pbds{
typedef tree<int,
null_type,
less_equal<int>,
rb_tree_tag,
tree_order_statistics_node_update> ordered_set;
}
using namespace __gnu_pbds;

class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int op)
    {
        ordered_set os;
        unordered_map <int,int> origCnt;
        map<int,int> freqLine,pre;
        int n = (int)nums.size(), sm = 0, ans = 0;
        for(int i=0;i<n;i++)
        {
            int it = nums[i];
            origCnt[it]++;
            int l = it - k;
            int r = it + k + 1;
            freqLine[l]++;
            freqLine[r]--;
            os.insert(it);
        }
    
        for(auto &[f,s]:freqLine)
        {
            sm += s;
            pre[f] = sm;
        }

        for(auto &[f,s]:pre) ans = max(ans, min( s - origCnt[f] , op) + origCnt[f]);
        
        auto functionn = [&](int &md) -> int {
            int pp = origCnt[md];
            int cnt = os.order_of_key(md+k +1);
            cnt -= os.order_of_key(md-k);
            cnt -= pp;
            cnt = min(op,cnt);
            cnt += pp;
            return cnt;
        };
        
        for(int i=0;i<n;i++) ans = max( ans, functionn(nums[i]) );
        return ans;
    }
};
",1447761212
jatin,sangaljatin,558,3622,cpp,"#include <bits/stdc++.h>
using namespace std;

// #define int long long
#define pb push_back
#define all(x) (x).begin(), (x).end()
#define F first
#define S second
#define sz(x) (int)((x).size())
#define vi vector<int>
#define rep(i, a, b) for (int i = a; i < b; ++i)
#define rrep(i, a, b) for (int i = a; i > b; --i)
const int MOD = 1e9+7;
// const int INF = 1e18;

class Solution {
public:
    int maxFrequency(vi& nums, int k, int numOperations) {
        int max_num = *max_element(all(nums));
        int size = max_num + k + 2;
        
        vi freq(size, 0);
        for (auto num : nums) freq[num]++;
        
        vi pre(size, 0);
        pre[0] = freq[0];
        rep(i, 1, size) pre[i] = pre[i - 1] + freq[i];
        vi a={1,2,3,4,56,77};
        int ans=0;
        for(auto el:a) ans+=el;
        int result = 0;
        rep(x, 0, size) {
            if (freq[x] == 0 && numOperations == 0) continue;

            int left = max(0, x - k);
            int right = min(size - 1, x + k);
            int totalInRange = pre[right] - (left > 0 ? pre[left - 1] : 0);
            int canAdjust = totalInRange - freq[x];
            int total = freq[x] + min(numOperations, canAdjust);
            result = max(result, total);
        }
        ans=result;
        return ans;
    }
};

",1447724149
jatin,sangaljatin,558,3626,cpp,"class Solution {
public:
   bool f(int n, int t){
        int product = 1;
    // if (n == 0) return 0;
    while (n != 0) {
        int digit = n % 10;  
        product *= digit;    
        n /= 10;             
    }
    
    return product %t==0;
   }
    int smallestNumber(int n, int t) {
       int ans=n;
        for(int i=n;i<=100;i++){
           if(f(i,t)) return i; 
       }
        return -1;
    }
};",1447660064
jatin,sangaljatin,558,3640,cpp,"#include <bits/stdc++.h>
using namespace std;

#define FOR(i, a, b) for (int i = a; i < b; ++i)
#define FOREACH(x, container) for (auto &x : container)
// #define int long long
#define pii pair<int, int>
#define vi vector<int>
#define vpi vector<pii>
#define umap unordered_map

class Solution {
public:
    int maxFrequency(vi &nums, int k, int numOperations) {
        int n = nums.size();
        map<int, int> freq;
        vpi events;

        FOREACH(num, nums) {
            freq[num]++;
            events.push_back({num - k, 1});
            events.push_back({num + k + 1, -1});
        }
       vi aa={2,3,4,5,6,7,8,99};
        set<int> points;
        FOREACH(event, events) {
            points.insert(event.first);
        }
        FOREACH(p, freq) {
            points.insert(p.first);
        }
        sort(events.begin(), events.end());
        int anss=0;
        for(auto el:aa){
            anss++;
            anss+=el;
        }
        int idx = 0;
        int current_overlap = 0;
        int max_freq = 0;
        int actual_count = 0;
        anss+=11;
        FOREACH(t, points) {
            
            while (idx < events.size() && events[idx].first <= t) {
                current_overlap += events[idx].second;
                idx++;
            }

            actual_count = freq.count(t) ? freq[t] : 0;
            int possible_freq = actual_count + min(numOperations, current_overlap - actual_count);
            
            if (possible_freq > max_freq) {
                max_freq = possible_freq;
            }
        }
       int ans=max_freq;
        return ans;
    }
};
",1447753404
Aman,amankashyap4321,560,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        int n = nums.size();
        unordered_map<int, int> mp;
        vector<pair<int, int>> events;

        for (int i=0;i<nums.size();i++) {
            int num=nums[i];
            mp[num]++;
            events.push_back({num - k, +1});
            events.push_back({num + k + 1, -1});
        }

        set<int> points;
        for (auto& event : events) {
            points.insert(event.first);
        }
        for (auto& f : mp) {
            points.insert(f.first);
        }

        sort(events.begin(), events.end());

        int idx = 0;
        int current_overlap = 0;
        int max_freq = 0;
        int actual_count = 0;

        for (int t : points) {
            while (idx < events.size() && events[idx].first <= t) {
                current_overlap += events[idx].second;
                idx++;
            }

            actual_count = mp.count(t) ? mp[t] : 0;
            int possible_freq = actual_count + min(numOperations, current_overlap - actual_count);
            max_freq = max(max_freq, possible_freq);
        }

        return max_freq;
    }
};",1447736758
Aman,amankashyap4321,560,3626,cpp,"class Solution {
public:
    int smallestNumber(int n, int t) {
        for(int i=n;i<10000;i++){
            int temp=i;
            int c=0,ok=0;
            while(temp!=0){
                int r=temp%10;
                if(ok==0) {ok=1;c=r;}
                else c*=r;
                temp/=10;
            }
            if(c%t==0) return i;
        }
        return -1;
    }
};",1447658726
Aman,amankashyap4321,560,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        int n = nums.size();
        unordered_map<int, int> mp;
        vector<pair<int, int>> events;

        for (int i=0;i<nums.size();i++) {
            int num=nums[i];
            mp[num]++;
            events.push_back({num - k, +1});
            events.push_back({num + k + 1, -1});
        }

        set<int> points;
        for (auto& event : events) {
            points.insert(event.first);
        }
        for (auto& f : mp) {
            points.insert(f.first);
        }

        sort(events.begin(), events.end());

        int idx = 0;
        int current_overlap = 0;
        int max_freq = 0;
        int actual_count = 0;

        for (int t : points) {
            while (idx < events.size() && events[idx].first <= t) {
                current_overlap += events[idx].second;
                idx++;
            }

            actual_count = mp.count(t) ? mp[t] : 0;
            int possible_freq = actual_count + min(numOperations, current_overlap - actual_count);
            max_freq = max(max_freq, possible_freq);
        }

        return max_freq;
    }
};",1447737234
nistik84114,nistik84114,562,3622,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        record = [0] * (max(nums)+1)
        counter = Counter(nums)

        for n in nums:
            if n - k >= 0:
                record[n - k] += 1
            else:
                record[0] += 1
                
            if n + k + 1 < len(record):
                record[n + k +1] -= 1
            
        ans = max(counter.values())
        temp = 0
        for idx, val in enumerate(record):
            ori_count = counter[idx]
            temp += val
            other = temp - ori_count
            ans = max(ans, ori_count + min(numOperations, other))
            
        return ans
            

            ",1447682753
nistik84114,nistik84114,562,3626,python3,"class Solution:
    def smallestNumber(self, n: int, t: int) -> int:
        while(True):
            str_n = str(n)
            temp = 1
            for x in str_n:
                temp *= int(x)
                
            if temp % t == 0:
                return n
            n += 1",1447656707
nistik84114,nistik84114,562,3640,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        nums.sort()
        left = 0
        right = 0
        counter = Counter(nums)
        ans = max(counter.values())

        
        for idx, n in enumerate(nums):
            while(nums[left] < n-k):
                left += 1
            while(right + 1 < len(nums) and nums[right + 1] <= n + k):
                right += 1

            ori_count = counter[n]
            other = right - left + 1 - ori_count
            ans = max(ans, ori_count + min(numOperations, other))


        right = 0
        for left, left_n in enumerate(nums):
            while(right + 1 < len(nums) and nums[right + 1] <= left_n + 2 * k):
                right += 1
            ans = max(ans, min(right-left+1, numOperations))
            
        return ans",1447729147
Keshav Mantry,kshv01,563,3622,cpp,"class Solution {
public:
    int calculateMaxFrequency(const std::vector<int>& arr, int rangeLimit, int operationsAllowed) {
        int maxElement = *std::max_element(arr.begin(), arr.end());
        int arraySize = maxElement + rangeLimit + 2;

        std::vector<int> frequency(arraySize, 0);
        for (int element : arr) {
            frequency[element]++;
        }

        std::vector<int> prefixSum(arraySize, 0);
        prefixSum[0] = frequency[0];
        for (int i = 1; i < arraySize; ++i) {
            prefixSum[i] = prefixSum[i - 1] + frequency[i];
        }

        int maxFreq = 0;
        for (int i = 0; i < arraySize; ++i) {
            if (frequency[i] == 0 && operationsAllowed == 0) continue;

            int lowerBound = std::max(0, i - rangeLimit);
            int upperBound = std::min(arraySize - 1, i + rangeLimit);
            int countInRange = prefixSum[upperBound] - (lowerBound > 0 ? prefixSum[lowerBound - 1] : 0);
            int adjustableCount = countInRange - frequency[i];
            int totalFrequency = frequency[i] + std::min(operationsAllowed, adjustableCount);

            maxFreq = std::max(maxFreq, totalFrequency);
        }

        return maxFreq;
    }

    int maxFrequency(std::vector<int>& nums, int k, int numOperations) {
        return calculateMaxFrequency(nums, k, numOperations);
    }
};
",1447720375
Keshav Mantry,kshv01,563,3626,cpp,"class Solution {
public:
    int smallestNumber(int n, int t) {
        
        auto digitProduct = [](int num) {
            int product = 1;
            while (num > 0) {
                int digit = num % 10;
                product *= digit;
                num /= 10;
            }
            return product;
        };

        int current = n;
        while (true) {
            int product = digitProduct(current);
            if (product % t == 0) {
                return current;
            }
            current++; 
        }
    }
};
",1447654287
Keshav Mantry,kshv01,563,3640,cpp,"class Solution {
private:
    int computeMaxFrequency(vector<int>& nums, int k, int numOperations) {
        int n = nums.size();
        unordered_map<int, int> freq;
        vector<pair<int, int>> events;

        for (int num : nums) {
            freq[num]++;
            events.push_back({num - k, 1});       
            events.push_back({num + k + 1, -1});  
        }

        set<int> uniquePoints;
        for (const auto& event : events) {
            uniquePoints.insert(event.first);  
        }
        for (const auto& p : freq) {
            uniquePoints.insert(p.first);
        }

        vector<int> sortedPoints(uniquePoints.begin(), uniquePoints.end());
        sort(events.begin(), events.end()); 

        int idx = 0;
        int currentOverlap = 0;
        int maxFreq = 0;

        for (int point : sortedPoints) {
            while (idx < events.size() && events[idx].first <= point) {
                currentOverlap += events[idx].second;  
                idx++;
            }

            int actualCount = freq.count(point) ? freq[point] : 0;
            int possibleFreq = actualCount + min(numOperations, currentOverlap - actualCount);
            maxFreq = max(maxFreq, possibleFreq);  
        }

        return maxFreq;
    }

public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        return computeMaxFrequency(nums, k, numOperations); 
    }
};
",1447737824
cubeprince,cubeprince,564,3622,java,"class Solution {
    public int maxFrequency(int[] nums, int k, int numOperations) {
        Arrays.sort(nums);

        int answer = 1;

        // case no.1. don't change the target number
        int i = 0;
        int sameNumCnt = 1;
        while (i < nums.length) {
            if (i + 1 < nums.length) {
                if (nums[i] == nums[i + 1]) {
                    sameNumCnt++;
                    i++;
                    continue;
                }
            }

            int lowNum = nums[i] - k;
            int l = 0;
            int r = nums.length - 1;
            int lowPos = 0;
            while (l <= r) {
                int mid = l + (r - l) / 2;
                if (nums[mid] == lowNum) {
                    lowPos = mid;
                    r = mid - 1;
                } else if (nums[mid] > lowNum) {
                    lowPos = mid;
                    r = mid - 1;
                } else {
                    l = mid + 1;
                }
            }

            int upperNum = nums[i] + k;
            l = 0;
            r = nums.length - 1;
            int upperPos = nums.length - 1;
            while (l <= r) {
                int mid = l + (r - l) / 2;
                if (nums[mid] == upperNum) {
                    upperPos = mid;
                    l = mid + 1;
                } else if (nums[mid] > upperNum) {
                    r = mid - 1;
                } else {
                    l = mid + 1;
                    upperPos = mid;
                }
            }

            int diffNumCnt = upperPos - lowPos + 1 - sameNumCnt;
            int changedNumCnt = Math.min(diffNumCnt, numOperations);
            answer = Math.max(answer, changedNumCnt + sameNumCnt);

            i++;
            sameNumCnt = 1;
        }

        // case no.2 change every number
        for (i = 0; i < nums.length; i++) {
            int upperNum = nums[i] + 2 * k;
            int l = 0;
            int r = nums.length - 1;
            int upperPos = nums.length - 1;
            while (l <= r) {
                int mid = l + (r - l) / 2;
                if (nums[mid] == upperNum) {
                    upperPos = mid;
                    l = mid + 1;
                } else if (nums[mid] > upperNum) {
                    r = mid - 1;
                } else {
                    l = mid + 1;
                    upperPos = mid;
                }
            }
            int changedNumCnt = Math.min(upperPos - i + 1, numOperations);
            answer = Math.max(answer, changedNumCnt);
        }
        return answer;
    }
}",1447742593
cubeprince,cubeprince,564,3626,java,"class Solution {
    public int productionOfDigits(int num) {
        int production = 1;
        while (num > 0) {
            production *= num % 10;
            num /= 10;
        }
        return production;
    }

    public int smallestNumber(int n, int t) {
        int answer = n;
        for (int i = n; i <= 200; i++) {
            if (productionOfDigits(i) % t == 0) {
                answer = i;
                break;
            }
        }
        return answer;
    }
}",1447670428
cubeprince,cubeprince,564,3640,java,"class Solution {
    public int maxFrequency(int[] nums, int k, int numOperations) {
        Arrays.sort(nums);

        long[] longNums = new long[nums.length];
        for (int i = 0; i < nums.length; i++) {
            longNums[i] = nums[i];
        }

        int answer = 1;

        // case no.1. don't change the target number
        int i = 0;
        int sameNumCnt = 1;
        while (i < longNums.length) {
            if (i + 1 < longNums.length) {
                if (longNums[i] == longNums[i + 1]) {
                    sameNumCnt++;
                    i++;
                    continue;
                }
            }

            long lowNum = longNums[i] - k;
            int l = 0;
            int r = longNums.length - 1;
            int lowPos = 0;
            while (l <= r) {
                int mid = l + (r - l) / 2;
                if (longNums[mid] == lowNum) {
                    lowPos = mid;
                    r = mid - 1;
                } else if (longNums[mid] > lowNum) {
                    lowPos = mid;
                    r = mid - 1;
                } else {
                    l = mid + 1;
                }
            }

            long upperNum = longNums[i] + k;
            l = 0;
            r = longNums.length - 1;
            int upperPos = longNums.length - 1;
            while (l <= r) {
                int mid = l + (r - l) / 2;
                if (longNums[mid] == upperNum) {
                    upperPos = mid;
                    l = mid + 1;
                } else if (longNums[mid] > upperNum) {
                    r = mid - 1;
                } else {
                    l = mid + 1;
                    upperPos = mid;
                }
            }

            int diffNumCnt = upperPos - lowPos + 1 - sameNumCnt;
            int changedNumCnt = Math.min(diffNumCnt, numOperations);
            answer = Math.max(answer, changedNumCnt + sameNumCnt);

            i++;
            sameNumCnt = 1;
        }

        // case no.2 change every number
        for (i = 0; i < longNums.length; i++) {
            long upperNum = longNums[i] + 2 * k;
            int l = 0;
            int r = longNums.length - 1;
            int upperPos = longNums.length - 1;
            while (l <= r) {
                int mid = l + (r - l) / 2;
                if (longNums[mid] == upperNum) {
                    upperPos = mid;
                    l = mid + 1;
                } else if (longNums[mid] > upperNum) {
                    r = mid - 1;
                } else {
                    l = mid + 1;
                    upperPos = mid;
                }
            }
            int changedNumCnt = Math.min(upperPos - i + 1, numOperations);
            answer = Math.max(answer, changedNumCnt);
        }
        return answer;
    }
}",1447754532
Anik Sadhukhan,anik29july,565,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& a ,int k,int o){
             int n = a.size();
        unordered_map<int, int> mp;
        map<int, int> e;

        for (int i=0 ;i<a.size();i++) {
            int s = a[i]-k;
            int end = a[i]+k+ 1;
            e[s] += 1;
            e[end] =e[end] -1;
            mp[a[i]]+= 1;
        }
            

        int m = 0;
        int c = 0;
        set<int> st;

        for (const auto& it: e) {
            st.insert(it.first);
        }
        for (const int & it1:a){
            st.insert(it1);
        }

        for (const int x : st){
            if (e.count(x)) {
                c= c+e[x];
            }
            int c1= mp[x];
           int c2= c- c1;
            int t = c1+ min(c2,o);
            m= max(m, t);
        }

        return m;
        
    }
};",1447746524
Anik Sadhukhan,anik29july,565,3626,cpp,"class Solution {
public:
        int cal(int x) {
    int p1 = 1;
    while (x > 0) {
        int r = x % 10;
        
            p1 *= r;
        
        x /= 10;
    }
    return p1;
}
    int smallestNumber(int n, int t) {
           while (true) {
        int p = cal(n);
        if (p % t == 0) {
            return n;
        }
        n++;
    }

        
    }
};",1447671500
Anik Sadhukhan,anik29july,565,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& a, int k, int o) {
            int  n = a.size();
            int b=o;
        unordered_map<int, int> mp;
        map<int, int> mp1;

        for (int i=0 ;i<a.size();i++) {
            int s = a[i]-k;
            int q = a[i]+k+ 1;
            mp1[s] =mp1[s] +1;
            mp1[q] =mp1[q] -1;
            mp[a[i]]=mp[a[i]]+ 1;
        }
            

        int m = 0;
        int c = 0;
        set<int> y;

        for (const auto& it: mp1) {
            y.insert(it.first);
        }
        for (const int & z:a){
            y.insert(z);
        }

        for (const int it1 : y){
            if (mp1.count(it1)) {
                c= c+mp1[it1];
            }
            int c1= mp[it1];
           int c2= c- c1;
            int t = c1+ min(c2,b);
            m= max(m, t);
        }

        return m;
        
            
        
    }
};",1447770158
pranithamedepalli,pranithamedepalli,567,3622,python,"class Solution(object):
    def maxFrequency(self, nums, k, numOperations):
        mn = max(nums)
        size = mn + k + 2
        f = [0] * size

        for num in nums:
            f[num] += 1

        pre = [0] * size
        pre[0] = f[0]
        for i in range(1, size):
            pre[i] = pre[i - 1] + f[i]

        res = 0
        for x in range(size):
            if f[x] == 0 and numOperations == 0:
                continue

            left = max(0, x - k)
            right = min(size - 1, x + k)
            tI = pre[right] - (pre[left - 1] if left > 0 else 0)
            cA = tI - f[x]
            total = f[x] + min(numOperations, cA)
            res = max(res, int(total))

        return res",1447748728
pranithamedepalli,pranithamedepalli,567,3626,python3,"class Solution:
    
    def smallestNumber(self, n: int, t: int) -> int:
        
        def check(n: int,t:int) -> bool:
            pro = 1
            x = n
            while x>0 :
                pro *= (x%10)
                x = x//10
            return pro%t == 0
        
        while True:
            if check(n,t):
                return n
            n+=1
        ",1447676567
pranithamedepalli,pranithamedepalli,567,3640,python,"from collections import defaultdict

class Solution:
    def maxFrequency(self, nums, k, numOps):
        f = defaultdict(int)
        evts = []
        
        for n in nums:
            f[n] += 1
            evts.append((n - k, 1))
            evts.append((n + k + 1, -1))
        
        pts = set()
        for e in evts:
            pts.add(e[0])
        for p in f:
            pts.add(p)
        
        evts.sort()

        i = 0
        curr = 0
        mf = 0
        
        for t in sorted(pts):
            while i < len(evts) and evts[i][0] <= t:
                curr += evts[i][1]
                i += 1
            
            cnt = f[t] if t in f else 0
            possible_freq = cnt + min(numOps, curr - cnt)
            mf = max(mf, possible_freq)
        
        return mf
",1447754698
devansh_001,devansh_001,568,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        int max_num=*max_element(nums.begin(),nums.end()),size=max_num+k+2;
        vector<int> v(size, 0);
        for (auto num : nums)v[num]++;
        
        vector<int> pre(size,0);
        pre[0]=v[0];
        for (int i=1;i<size;i++)pre[i]=pre[i-1]+v[i];
        
        int result=INT_MIN;
        for (int x = 0; x < size; x++) {
            if (v[x]==0 && numOperations==0)continue;
            int left=max(0, x - k),right=min(size - 1, x + k);
            int totalInRange = pre[right]-(left>0?pre[left- 1]:0);
            int canAdjust = totalInRange-v[x],total=v[x]+min(numOperations,canAdjust);
            result=max(result,total);
        }
        return result;
    }
};
",1447736718
devansh_001,devansh_001,568,3626,cpp,"class Solution {
public:
    int smallestNumber(int n, int t) {
        string s=to_string(n);
        int temp;
        temp=stoi(s);
        while(true){
            s=to_string(temp);
            int temp1=1;
            for(int i=0;i<s.size();i++){
                temp1*=s[i]-'0';
            }
            if(temp1%t==0)return temp;
            temp++;
        }
        return -1;
    }
};",1447659809
devansh_001,devansh_001,568,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        int n = nums.size();
        map<int, int> freq;
        vector<pair<int, int>> events;
        
        for (int num : nums) {
            freq[num]++;
            events.push_back({num - k, 1});
            events.push_back({num + k + 1, -1});
        }
        set<int> points;

        for (auto& event : events)points.insert(event.first);
        for (auto& p:freq)points.insert(p.first);

        sort(events.begin(),events.end());

        int idx=0,curr=0,maxF=0,count=0;
        for (int t:points) {
            while (idx<events.size()&&events[idx].first<=t) {
                curr+=events[idx].second;
                idx++;
            }
            
            if(freq.count(t)>0)count=freq[t];
            else count=0;
            maxF=max(maxF,count+min(numOperations, curr-count));
        }

        return maxF;
    }
};",1447754712
krishan_luhach,krishan_luhach,569,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& v, int k, int op) {
        sort(v.begin(),v.end());
        
        int n = v.size();
        int mx = v.back();
        vector<int>mp(mx+1,0),pref(mx+1,0);
        for(auto i:v) mp[i]++;
        pref[0] = mp[0];
        for(int i = 1;i<=mx;i++) pref[i]+=mp[i]+pref[i-1];
        int ans= 1;
        for(int i = v[0];i<=v[n-1];i++){
            int l = max(0,i-k-1),r = min(mx,i+k);
            int temp = min(op,pref[r]-pref[l]-mp[i]);
        
            ans = max(ans,temp+mp[i]);
        }
        return ans;
    }
};",1447708573
krishan_luhach,krishan_luhach,569,3626,cpp,"class Solution {
public:
    int smallestNumber(int n, int t) {
        while(true){
            int org = n;
            int ans = 1;
            while(org){
                ans*=(org%10);
                org/=10;
            }
            if(ans%t==0) break;
            n++;
        }
        return n;
    }
};",1447653892
krishan_luhach,krishan_luhach,569,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& v, int k, int op) {
        int n = v.size();
        int ans = 1;
        sort(v.begin(),v.end());
        
        map<int,int>count;
        for(auto i:v) count[i]++;
        int idx = 0;
        for(auto i:v){
            //not change current
            int r = lower_bound(v.begin(),v.end(),i)-v.begin();
            int l = lower_bound(v.begin(),v.end(),i-k)-v.begin();
            int p = upper_bound(v.begin(),v.end(),i)-v.begin();
            int q = upper_bound(v.begin(),v.end(),i+k)-v.begin();
            
            int cnt = r-l;
            cnt = min(cnt+q-p,op);
            ans = max(ans,cnt+count[i]);
            
            // change it
            l = lower_bound(v.begin(),v.end(),i-2*k)-v.begin();
            cnt = min(op,idx-l+1);
            ans = max(ans,cnt);
            idx++;
        }
        return ans;
        
    }
};












",1447762631
Eshit,Eshit,570,3622,python3,"from typing import List
from collections import defaultdict

class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        nums.sort()
        radahn = defaultdict(int)
        torrent = []
        
        for malenia in nums:
            radahn[malenia] += 1
            torrent.append((malenia - k, +1))
            torrent.append((malenia + k + 1, -1))
        
        sites_of_grace = set()
        for ranni in torrent:
            sites_of_grace.add(ranni[0])
        for godfrey in radahn:
            sites_of_grace.add(godfrey)
        
        torrent.sort()
        
        tarnished = 0
        morgott = 0
        melina = 0
        
        for marika in sorted(sites_of_grace):
            while tarnished < len(torrent) and torrent[tarnished][0] <= marika:
                morgott += torrent[tarnished][1]
                tarnished += 1
            
            rykard = radahn[marika] if marika in radahn else 0
            godrick = rykard + min(numOperations, morgott - rykard)
            melina = max(melina, godrick)
        
        return melina",1447735124
Eshit,Eshit,570,3626,python3,"class Solution:
    def smallestNumber(self, n: int, t: int) -> int:
        for i in range(n,n*100,1):
            prod=1
            for j in str(i):
                prod=prod*int(j)
            if prod%t==0:
                return i",1447676895
Eshit,Eshit,570,3640,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        from typing import List
from collections import defaultdict

class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        nums.sort()
        radahn = defaultdict(int)
        torrent = []
        for malenia in nums:
            radahn[malenia] += 1
            torrent.append((malenia - k, +1))
            torrent.append((malenia + k + 1, -1))
        bloodhound_Fang=0
        sites_of_grace = set()
        for ranni in torrent:
            sites_of_grace.add(ranni[0])
        for godfrey in radahn:
            sites_of_grace.add(godfrey)
        
        torrent.sort()
        
        tarnished = 0
        morgott = 0
        melina = 0
        
        for marika in sorted(sites_of_grace):
            while tarnished < len(torrent) and torrent[tarnished][0] <= marika:
                morgott += torrent[tarnished][1]
                tarnished += 1
            
            rykard = radahn[marika] if marika in radahn else 0
            godrick = rykard + min(numOperations, morgott - rykard)
            melina = max(melina, godrick)
        
        return melina",1447738286
joylintp,joylintp,571,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        sort(nums.begin(), nums.end());

        map<int, int> cnt;
        vector<int> smun = nums;
        reverse(smun.begin(), smun.end());
        for (int &x : smun)
            cnt[x]++, x = -x;
        
        int N = nums.size(), ret = 0;
        for (int i = 1; i <= nums[N - 1]; i++)
        {
            int cc = upper_bound(smun.begin(), smun.end(), -(i - k)) - upper_bound(smun.begin(), smun.end(), -i);
            int cd = upper_bound(nums.begin(), nums.end(), i + k) - upper_bound(nums.begin(), nums.end(), i);
            ret = max(ret, min(numOperations, cc + cd) + cnt[i]);
            // cout << i << ' ' << cc << ' ' << cd << ' ' << cnt[i] << '\n';
        }
        return ret;
    }
};",1447733636
joylintp,joylintp,571,3626,cpp,"class Solution {
public:
    bool check(int n, int t)
    {
        int pod = 1;
        while (n)
            pod *= n % 10, n /= 10;
        return pod % t == 0;
    }

    int smallestNumber(int n, int t) {
        while (!check(n, t))
            n++;
        return n;
    }
};",1447657019
joylintp,joylintp,571,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        sort(nums.begin(), nums.end());
        int N = nums.size(), ret = 0;
        for (int i = 0; i < N; )
        {
            int j = i;
            while (j < N && nums[i] == nums[j])
                j++;
            int cd = upper_bound(nums.begin(), nums.end(), min((long long)nums[i] + k + k, (long long)nums[N - 1] + 1)) - nums.begin() - j;
            ret = max(ret, min(numOperations, cd + j - i));
            cout << i << ' ' << j << ' ' << cd << '\n';
            i = j;
        }

        vector<int> smun = nums;
        reverse(smun.begin(), smun.end());
        for (int &x : smun)
            x = -x;

        for (int i = 0; i < N; )
        {
            int j = i;
            while (j < N && nums[i] == nums[j])
                j++;
            int cc = upper_bound(smun.begin(), smun.end(), -(nums[i] - k)) - smun.begin() - (N - i);
            int cd = upper_bound(nums.begin(), nums.end(), nums[i] + k) - nums.begin() - j;
            ret = max(ret, min(numOperations, cc + cd) + (j - i));
            i = j;
        }
        return ret;
    }
};",1447746759
thienan175,thienan175,572,3622,golang,"func maxFrequency(nums []int, k int, numOperations int) int {
    m := findMax(nums)
    
    freqs := make([]int, m+1)
    for _, num := range nums {
        freqs[num] += 1
    }

    left := 0 
    sum := int64(0)
    n := len(freqs)
    leftSum := make([]int64, n)
    
    for right := 0; right < len(freqs); right++ {
        leftSum[right] = sum
        sum += int64(freqs[right])
        if right - left + 1 == k + 1 {
            sum -= int64(freqs[left])
            left += 1
        }
    }

    right := n-1
    sum = int64(0)
    rightSum := make([]int64, n)
    for left := n-1; left >= 0; left -= 1 {
        rightSum[left] = sum
        sum += int64(freqs[left])
        if right - left + 1 == k + 1 {
            sum -= int64(freqs[right])
            right -= 1
        }
    }

    // fmt.Println(leftSum)
    // fmt.Println(rightSum)

    maxFreq := 0
    for i, freq := range freqs {
        f := int64(freq) + min(leftSum[i]+rightSum[i], int64(numOperations))
        maxFreq = max(maxFreq, int(f))
    }

    return maxFreq
}

func findMax(nums []int) int {
    ans := 0
    for _, num := range nums {
        ans = max(ans, num)
    }
    return ans
}",1447710041
thienan175,thienan175,572,3626,golang,"func smallestNumber(n int, t int) int {
    for {
        if degitProduct(n) % t == 0 {
            return n
        }
        n++
    }
}

func degitProduct(num int) int {
    product := 1
    for num > 0 {
        digit := num % 10
        product *= digit
        num /= 10
    }
    return product
}",1447666575
thienan175,thienan175,572,3640,golang,"type number struct {
    value int64
    freq int64
}

func maxFrequency(nums []int, k int, numOperations int) int {
    numbers := toNumbers(nums)
    sort.Slice(numbers, func(i, j int) bool {
        return numbers[i].value < numbers[j].value
    })

    k64 := int64(k)
    opt64 := int64(numOperations)

    left := 0
    sum := int64(0)
    maxSum := 0
    
    for right, num := range numbers {
        for left <= right && num.value - numbers[left].value + 1 > 2 * k64 +1 {
            sum -= numbers[left].freq
            left += 1
        }  
        sum += num.freq

        s := min(sum, opt64)
        maxSum = max(maxSum, int(s))
    }
    
    n := len(numbers)
    left = 0
    sum = int64(0)
    leftSum := make([]int64, n)
    
    for right, num := range numbers {
        for left <= right && num.value - numbers[left].value > k64 {
            sum -= numbers[left].freq
            left += 1
        }

        leftSum[right] = sum
        sum += num.freq
    }

    sum = int64(0)
    rightSum := make([]int64, n)
    right := n-1
    for left := n-1; left >= 0; left -= 1 {
        num := numbers[left]
        for left <= right && numbers[right].value - num.value > k64 {
            sum -= numbers[right].freq
            right -= 1
        }
        rightSum[left] = sum
        sum += num.freq
    }

    // fmt.Println(numbers)
    // fmt.Println(leftSum)
    // fmt.Println(rightSum)
    // fmt.Println(maxSum)

    maxFreq := 0
    for i, num := range numbers {
        f := num.freq + min(opt64, leftSum[i]+rightSum[i])
        maxFreq = max(maxFreq, int(f))
    }

    return max(maxFreq, maxSum)
}

func toNumbers(nums []int) []number {
    freqs := make(map[int]int)
    for _, num := range nums {
        freqs[num] = freqs[num] + 1
    }

    numbers := make([]number, 0) 
    for num, freq := range freqs {
        numbers = append(numbers, number{value: int64(num), freq: int64(freq)})
    }

    return numbers
}",1447762664
gaurang_04,gaurang_04,573,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        int n = nums.size();
        map<int, int> mp;
        vector<pair<int, int>> interval;
        
        for (auto it: nums) {
            mp[it]++;
            interval.push_back({it - k, 1});
            interval.push_back({it + k + 1, -1});
        }
        
        set<int> st;
        for (auto it: interval) {
            st.insert(it.first);
        }
        for (auto it : mp) {
            st.insert(it.first);
        }
        
        sort(interval.begin(), interval.end());
        
        int i = 0, cur = 0;
        int ans = 0;
        int freq = 0;
        
        for (auto it : st) {
            while (i < interval.size() && interval[i].first <= it) {
                cur += interval[i].second;
                i++;
            }

            if(mp.count(it)){
                freq = mp[it];
            }
            else{
                freq = 0;
            }
            ans = max(ans, freq + min(numOperations, cur - freq));
        }
        
        return ans;
    }
};",1447760325
gaurang_04,gaurang_04,573,3626,cpp,"class Solution {
public:
    int smallestNumber(int n, int t) {
        for (int i = n; i <= 100; i++) {
            int prod = 1;
            int temp = i; 
            while (temp > 0) {
                prod *= (temp % 10);
                temp /= 10;
            }
            if (prod % t == 0) {
                return i; 
            }
        }
        return -1;
    }
};",1447659849
gaurang_04,gaurang_04,573,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        int n = nums.size();
        map<int, int> mp;
        vector<pair<int, int>> interval;
        
        for (auto it: nums) {
            mp[it]++;
            interval.push_back({it - k, 1});
            interval.push_back({it + k + 1, -1});
        }
        
        set<int> st;
        for (auto it: interval) {
            st.insert(it.first);
        }
        for (auto it : mp) {
            st.insert(it.first);
        }
        
        sort(interval.begin(), interval.end());
        
        int i = 0, cur = 0;
        int ans = 0;
        int freq = 0;
        
        for (auto it : st) {
            while (i < interval.size() && interval[i].first <= it) {
                cur += interval[i].second;
                i++;
            }

            if(mp.count(it)){
                freq = mp[it];
            }
            else{
                freq = 0;
            }
            ans = max(ans, freq + min(numOperations, cur - freq));
        }
        
        return ans;
    }
};",1447762683
Chinnu,chinnu11,574,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums,int k,int numOps) {
        int mx=0;
        for(auto n:nums) if(n>mx) mx=n;
        int mx_x=mx+k;
        vector<int> f(mx_x+2,0);
        for(auto n:nums) if(n<=mx_x) f[n]++;
        vector<int> p(mx_x+2,0);
        p[0]=f[0];
        for(int i=1;i<=mx_x+1;++i) p[i]=p[i-1]+f[i];
        int res=0;
        for(int x=0;x<=mx_x+1;++x) {
            int l=max(x-k,0),r=min(x+k,mx_x+1);
            int tot=p[r]-(l>0?p[l-1]:0);
            int can_convert=tot-(x<=mx_x+1?f[x]:0);
            int used=min(numOps,can_convert);
            int cur_freq=(x<=mx_x+1?f[x]:0)+used;
            if(cur_freq>res) res=cur_freq;
        }
        return min(res,(int)nums.size());
    }
};
",1447658349
Chinnu,chinnu11,574,3626,cpp,"class Solution {
public:
    long long dP(int n) {
        if(n==0)return 0;
        long long p=1;
        while(n>0) {
            int d=n%10;
            if(d==0)return 0;
            p*=d;
            n/=10;
        }
        return p;
    }

    int smallestNumber(int n,int t) {
        int x=n;
        while(1) {
            long long p=dP(x);
            if(t==0) {
                if(p==0)return x;
            } else {
                if(p%t==0)return x;
            }
            x++;
        }
        return -1;
    }
};
",1447654019
Chinnu,chinnu11,574,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums,int k,int numOps) {
        unordered_map<long long,int> freqMap;
        for(int n:nums) freqMap[n]++;
        
        map<long long,int> events;
        set<long long> points;
        for(int n:nums) {
            long long s=(long long)n-k, e=(long long)n+k+1;
            events[s]++;
            events[e]--;
            points.insert(s);
            points.insert(e);
            points.insert(n);
        }
        
        int max_freq=0,cur_overlap=0;
        auto it=events.begin();
        for(auto t:points) {
            while(it!=events.end()&&it->first<=t) {
                cur_overlap+=it->second;
                ++it;
            }
            int freq_t=freqMap.count(t)?freqMap[t]:0;
            int candidates=cur_overlap-freq_t;
            int total_freq=freq_t+min(numOps,candidates);
            max_freq=max(max_freq,total_freq);
        }
        return max_freq;
    }
};
",1447738418
darpan12,darpan12,575,3622,cpp,"class Solution {

public:
    int freq[200005];
    int pre[200005];

    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        int n = nums.size();

        memset(freq, 0, sizeof freq);
        memset(pre, 0, sizeof pre);
        
        int ma = 0;
        for(int i=0;i<n;i++) {
            freq[nums[i]]++;

            int l = max(0, nums[i] - k);
            int r = nums[i] + k;
            pre[l]++;
            pre[r+1]--;
            
            ma = max(ma, r);
        }
        for(int i=1;i<=ma;i++) {
            pre[i] = pre[i] + pre[i-1];
        }

        int ans = 1;
        for(int v=0;v<=ma;v++) {
            int curr = freq[v];
            int ex = pre[v] - curr;

            ex = min(ex, numOperations);

            ans = max(ans, ex + curr);
            
        }
        return ans;
    }
};",1447724521
darpan12,darpan12,575,3626,cpp,"class Solution {
public:

    int product(int n) {
        int v = 1;
        while(n > 0) {
            int d = n%10;
            v = v * d;
            n = n/10;
        }
        return v;
    }

    int smallestNumber(int n, int t) {
        while(1) {
            int v = product(n);
            if(v%t == 0) {
                return n;
            }
            n++;            
        }
    }
};",1447655460
darpan12,darpan12,575,3640,cpp,"class Solution {
public:
    int freq[400005];
    int pre[400005];
    
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        int n = nums.size();

        set<int> posv;
        for(int i=0;i<n;i++) {
            int l = max(0, nums[i] - k);
            int r = nums[i] + k;
            posv.insert(nums[i]);
            posv.insert(l);
            posv.insert(r);
            posv.insert(r+1);
        }

        map<int,int> idx;
        int i = 0;
        for(auto &v : posv) {
            idx[v] = i++;
        }
        int M = i;

        memset(freq, 0, sizeof freq);
        memset(pre, 0, sizeof pre);

        for(int i=0;i<n;i++) {
            freq[idx[nums[i]]]++;
            
            int l = max(0, nums[i] - k);
            int r = nums[i] + k;
            pre[idx[l]]++;
            pre[idx[r+1]]--;
        }
        for(int i=1;i<M;i++) {
            pre[i] = pre[i] + pre[i-1];
        }

        int ans = 1;
        for(int v=0;v<M;v++) {
            int curr = freq[v];
            int ex = pre[v] - curr;
            ex = min(ex, numOperations);
            ans = max(ans, ex + curr);
        }
        return ans;
    }
};",1447754924
Kishan Jaiswal,kishan_jaiswal,576,3622,cpp,"class Solution {
public:
int add(int a, int b) {
        return a + b;
    }

    int subtract(int a, int b) {
        return a - b;
    }

    int multiply(int a, int b) {
        return a * b;
    }

    int helper(std::vector<int>& numbers, int range, int maxAdjustments) {
        int maxValue = *std::max_element(numbers.begin(), numbers.end());
        int size = add(maxValue, add(range, 2));
        std::vector<int> frequency(size, 0);

        for (int number : numbers) {
            frequency[number]++;
        }

        std::vector<int> prefixSum(size, 0);
        prefixSum[0] = frequency[0];
        for (int i = 1; i < size; ++i) {
            prefixSum[i] = add(prefixSum[i - 1], frequency[i]);
        }

        int maxFrequency = 0;
        for (int x = 0; x < size; ++x) {
            if (frequency[x] == 0 && maxAdjustments == 0) continue;

            int left = std::max(0, subtract(x, range));
            int right = std::min(size - 1, add(x, range));
            int totalInRange = subtract(prefixSum[right], (left > 0 ? prefixSum[left - 1] : 0));
            int adjustable = subtract(totalInRange, frequency[x]);
            int total = add(frequency[x], std::min(maxAdjustments, adjustable));
            maxFrequency = std::max(maxFrequency, total);
        }

        return maxFrequency;
    }
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        return helper(nums,k,numOperations);
    }
};",1447710277
Kishan Jaiswal,kishan_jaiswal,576,3626,cpp,"class Solution {
public:
    int smallestNumber(int n, int t) {
        for(int i=n;i<=100;i++){
            int k=i;
            int m=1;
            while(k){
                int temp=k%10;
                m*=temp;
                k/=10;
            }
            if(m%t==0)return i;
        }
        return -1;
    }
};",1447667203
Kishan Jaiswal,kishan_jaiswal,576,3640,cpp,"class Solution {
public:
int add(int a, int b) {
        return a + b;
    }

    int subtract(int a, int b) {
        return a - b;
    }

    int multiply(int a, int b) {
        return a * b;
    }

public:
    int helper(std::vector<int>& numbers, int range, int operations) {
        std::unordered_map<int, int> frequencyMap;
        std::vector<std::pair<int, int>> eventList;

        for (int number : numbers) {
            frequencyMap[number]++;
            eventList.emplace_back(subtract(number, range), 1);
            eventList.emplace_back(add(number, range + 1), -1);
        }

        std::set<int> uniquePoints;
        for (const auto& event : eventList) {
            uniquePoints.insert(event.first);
        }
        for (const auto& freq : frequencyMap) {
            uniquePoints.insert(freq.first);
        }

        std::sort(eventList.begin(), eventList.end());

        int index = 0, currentOverlap = 0, maxFrequency = 0;

        for (int point : uniquePoints) {
            while (index < eventList.size() && eventList[index].first <= point) {
                currentOverlap = add(currentOverlap, eventList[index].second);
                index++;
            }

            int baseFrequency = frequencyMap.count(point) ? frequencyMap[point] : 0;
            int frequency = add(baseFrequency, std::min(operations, subtract(currentOverlap, baseFrequency)));
            maxFrequency = std::max(maxFrequency, frequency);
        }

        return maxFrequency;
    }
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        return helper(nums,k,numOperations);
    }
};",1447747060
yuvakiran99,yuvakiran12321,577,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        int d=k;
        int m=numOperations;
        vector<int> a=nums;
        int p = *max_element(a.begin(), a.end());
        int n = p + d + 2;
        vector<long long> c(n), s(n);
        
        for(int x : a) c[x]++;
        s[0] = c[0];
        for(int i = 1; i < n; i++) 
            s[i] = s[i-1] + c[i];
        
        int ans = 0;
        for(int i = 0; i < n; i++) {
            if(!c[i] && !m) continue;
            int l = max(0, i-d), r = min(n-1, i+d);
            long long sum = s[r] - (l ? s[l-1] : 0);
            ans = max(ans, (int)(c[i] + min((long long)m, sum - c[i])));
        }
        return ans;
    }
};",1447741256
yuvakiran99,yuvakiran12321,577,3626,cpp,"class Solution {
public:
    int digitProduct(int num) {
    int product = 1;
    while (num > 0) {
        int digit = num % 10;
        product *= digit;
        num /= 10;
    }
    return product;
}
    int smallestNumber(int n, int t) {
        while (true) {
        int product = digitProduct(n);
        if (product % t == 0) return n;
        n++;
    }
    }
};",1447675695
yuvakiran99,yuvakiran12321,577,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        vector<int> inputArray=nums;
        int rangeLimit=k;
        int maxModifications=numOperations;
          // Store the size of input array
        int arraySize = inputArray.size();
        
        // Map to store frequency of each number
        unordered_map<int, int> elementCount;
        
        // Vector to store range boundary events (start and end points)
        vector<pair<int, int>> rangeEvents;
        
        // Process each number in the input array
        for (int currentElement : inputArray) {
            // Increment frequency count
            elementCount[currentElement]++;
            
            // Add range start event (+1 to overlap count)
            rangeEvents.push_back({currentElement - rangeLimit, 1});
            
            // Add range end event (-1 to overlap count)
            rangeEvents.push_back({currentElement + rangeLimit + 1, -1});
        }
        
        // Set to store unique points where frequency might change
        set<int> checkPoints;
        
        // Add all event points to the set
        for (const auto& boundaryEvent : rangeEvents) {
            checkPoints.insert(boundaryEvent.first);
        }
        
        // Add all existing numbers to the set
        for (const auto& freqEntry : elementCount) {
            checkPoints.insert(freqEntry.first);
        }
        
        // Sort range events by position
        sort(rangeEvents.begin(), rangeEvents.end());
        
        // Variables to track current state
        int eventIndex = 0;                  // Current event being processed
        int overlapCount = 0;                // Count of overlapping ranges
        int maxFrequencyFound = 0;           // Maximum frequency found so far
        int baseFrequency = 0;               // Original frequency at current point
        
        // Process each checkpoint in sorted order
        for (int checkPoint : checkPoints) {
            // Process all events up to current checkpoint
            while (eventIndex < rangeEvents.size() && 
                   rangeEvents[eventIndex].first <= checkPoint) {
                // Update overlap count
                overlapCount += rangeEvents[eventIndex].second;
                eventIndex++;
            }
            
            // Get base frequency at current point
            baseFrequency = elementCount.count(checkPoint) ? 
                           elementCount[checkPoint] : 0;
            
            // Calculate possible frequency with modifications
            int achievableFreq = baseFrequency + 
                               min(maxModifications, overlapCount - baseFrequency);
            
            // Update maximum frequency if current is higher
            maxFrequencyFound = max(maxFrequencyFound, achievableFreq);
        }
        
        return maxFrequencyFound;
    }
};",1447747233
Abhinav Vishen,user6014Sf,578,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        int n = nums.size();
        sort(nums.begin(), nums.end());
        int ans = 0;
        map<int, int>mp;
        for(int i = 0; i < n; i++) mp[nums[i]]++;
        for(auto c : mp) ans = max(ans, c.second);
        vector<int>mn(n), mx(n);

        for(int i = 0; i < n; i++){
            mn[i] = nums[i] - k;
            mx[i] = nums[i] + k;
        }
        for(int i = mn[0]; i <= mx[n - 1]; i++){
            int a = -1;
            auto p = upper_bound(mn.begin(), mn.end(), i);
            if(p == mn.end()) a = n;
            else a = p - mn.begin();

            int b = -1;
            p = lower_bound(mx.begin(), mx.end(), i);
            if(p == mx.end()) b = n;
            else b = p - mx.begin();

            // if((a - b) <= numOperations + mp[i]) ans = max(ans, a - b);
            ans = max(ans, min(numOperations + mp[i], a - b));
        }

        return ans;
    }
};",1447728618
Abhinav Vishen,user6014Sf,578,3626,cpp,"class Solution {
public:
    int product(int n){
        int ans = 1;
        while(n){
            ans *= n % 10;
            n /= 10;
        }
        return ans;
    }
    int smallestNumber(int n, int t) {
        for(int i = n; i < n + 100; i++){
            if(product(i) % t == 0) return i;
        }
        return -1;
    }
};",1447658440
Abhinav Vishen,user6014Sf,578,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        int n = nums.size();
        sort(nums.begin(), nums.end());
        int ans = 0;
        map<int, int>mp;
        for(int i = 0; i < n; i++) mp[nums[i]]++;
        for(auto c : mp) ans = max(ans, c.second);
        vector<int>mn(n), mx(n);

        for(int i = 0; i < n; i++){
            mn[i] = nums[i] - k;
            mx[i] = nums[i] + k;
        }
        set<int>st;
        for(int i = 0; i < n; i++){
            st.insert(nums[i]);
            st.insert(mn[i]);
            st.insert(mx[i]);
        }
        for(int i : st){
            int a = -1;
            auto p = upper_bound(mn.begin(), mn.end(), i);
            if(p == mn.end()) a = n;
            else a = p - mn.begin();

            int b = -1;
            p = lower_bound(mx.begin(), mx.end(), i);
            if(p == mx.end()) b = n;
            else b = p - mx.begin();

            // if((a - b) <= numOperations + mp[i]) ans = max(ans, a - b);
            ans = max(ans, min(numOperations + mp[i], a - b));
        }

        return ans;
    }
};",1447738886
Fasdr,Fasdr,579,3622,java,"class Solution {
    public int maxFrequency(int[] nums, int k, int numOperations) {
        int max = 0;
        for (int num : nums) {
            max = Math.max(max, num);
        }
        Map<Integer, Integer> hit = new HashMap<>();
        int[] cnt = new int[max + 2];
        for (int num : nums) {
            int lower = Math.max(0, num - k);
            int upper = Math.min(max + 1, num + k + 1);
            cnt[lower]++;
            cnt[upper]--;
            hit.put(num, 1 + hit.getOrDefault(num, 0));
        }
        for (int i = 1; i < max + 2; i++) {
            cnt[i] = cnt[i] + cnt[i - 1];
        }
        int res = 0;
        for (int i = 0; i < max + 1; i++) {
            int p = hit.getOrDefault(i, 0);
            res = Math.max(
                res,
                Math.min(Math.max(0, cnt[i] - p), numOperations) + p
            );
        }
        return res;
    }
}",1447722970
Fasdr,Fasdr,579,3626,java,"class Solution {
    public int smallestNumber(int n, int t) {
        for (int i = n; i < 100000; i++) {
            if (good(i, t)) {
                return i;
            }
        }
        return -1;
    }
    
    private boolean good(int num, int t) {
        int prod = 1;
        int pow = 1;
        while (pow <= num) {
            int digit = (num / pow) % 10;
            prod = prod * digit;
            pow *= 10;
        }
        return prod % t == 0;
    }
}",1447658485
Fasdr,Fasdr,579,3640,java,"class Solution {
    public int maxFrequency(int[] nums, int k, int numOperations) {
        List<Integer> lowers = new ArrayList<>(), uppers = new ArrayList<>();
        Map<Integer, Integer> hit = new HashMap<>();
        Arrays.sort(nums);
        for (int num : nums) {
            int lower = Math.max(0, num - k);
            int upper = num + k + 1;
            lowers.add(lower);
            uppers.add(upper);
            hit.put(num, 1 + hit.getOrDefault(num, 0));
        }
        int res = 0, cnt = 0;
        int i = 0, j = 0, g = 0;
        while (i < lowers.size() || g < nums.length) {
            int cur = 0;
            if (g == nums.length || (i < lowers.size() && lowers.get(i) <= nums[g])) {
                cur = lowers.get(i);
                i++;
                cnt++;
            } else {
                cur = nums[g];
                g++;
            }
            while (uppers.get(j) <= cur) {
                cnt--;
                j++;
            }
            int p = hit.getOrDefault(cur, 0);
            res = Math.max(
                    res,
                    Math.min(Math.max(0, cnt - p), numOperations) + p        
                );
        }
        return res;
    }
}",1447747316
Harshita Dhawan,harshitadhawan,582,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        vector<pair<int, int>> vec;
        unordered_map<int, int> mp;
        
        for (int x : nums) {
            mp[x]++;
            vec.push_back({x - k, 1});
            vec.push_back({x + k + 1, -1});
        }
        
        set<int> st;
        for (const auto& y : vec) st.insert(y.first);
        for (const auto& pair : mp) st.insert(pair.first);
        
        sort(vec.begin(), vec.end());
        
        int i = 0, cnt = 0, fm = 0, cur = 0;
        
        for (int t : st) {
            while (i < vec.size() && vec[i].first <= t) {
                cur += vec[i].second;
                i++;
            }

            if (mp.count(t) > 0) cnt = mp[t];
            else cnt = 0;
                                    
            int frq = cnt + min(numOperations, cur - cnt);
            fm = max(fm, frq);
        }
        
        return fm;
    }
};
",1447747648
Harshita Dhawan,harshitadhawan,582,3626,cpp,"class Solution {
public:
    int smallestNumber(int n, int t) {
        int mn = n;
        
        while (true) {
            int prod = 1;
            int temp = mn;
            
            while (temp > 0) {
                int dig = temp % 10;
                prod *= dig;
                temp /= 10;
                
                if (prod == 0) break;
            }
            
            if (prod % t == 0) return mn;
            mn++;
        }
    }
};",1447656677
Harshita Dhawan,harshitadhawan,582,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        vector<pair<int, int>> vec;
        unordered_map<int, int> mp;
        
        for (int x : nums) {
            mp[x]++;
            vec.push_back({x - k, 1});
            vec.push_back({x + k + 1, -1});
        }
        
        set<int> st;
        for (const auto& y : vec) st.insert(y.first);
        for (const auto& pair : mp) st.insert(pair.first);
        
        sort(vec.begin(), vec.end());
        
        int i = 0, cnt = 0, fm = 0, cur = 0;
        
        for (int t : st) {
            while (i < vec.size() && vec[i].first <= t) {
                cur += vec[i].second;
                i++;
            }

            if (mp.count(t) > 0) cnt = mp[t];
            else cnt = 0;
                                    
            int frq = cnt + min(numOperations, cur - cnt);
            fm = max(fm, frq);
        }
        
        return fm;
    }
};
",1447745685
Sourabh,gamer37,583,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        sort(nums.begin(),nums.end());
        int i,n=nums.size(),j,ans=0,c,j1,j2;
        for(i=0;i<n;i++)
        {
            for(j=i;j<n;j++)
            {
                if(nums[i]!=nums[j])
                    break;
            }
            c=j-i;
            j1=lower_bound(nums.begin(),nums.end(),nums[i]-k)-nums.begin();
            j2=upper_bound(nums.begin(),nums.end(),nums[i]+k)-nums.begin();
            c+=min(numOperations,i-j1+j2-j);
            ans=max(ans,c);
        }
        
        i=0;
        for(j=1;j<n;j++)
        {
            if(nums[j]-nums[i]>2*k)
                break;
        }
        ans=max(ans,min(numOperations,j-i));
        while(j<n)
        {
            while(i<j && nums[j]-2*k>nums[i])
            i++;
            
            ans=max(ans,min(numOperations,j-i+1));
            j++;
        }
        
        return ans;
    }
};",1447762037
Sourabh,gamer37,583,3626,cpp,"class Solution {
public:
    int smallestNumber(int n, int t) {
        while(n)
        {
            int p=1,x=n;
            while(x)
            {
                p*=(x%10);
                x/=10;
            }
            if(p%t==0)
                return n;
            n++;
        }
        return n;
    }
};",1447655836
Sourabh,gamer37,583,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        sort(nums.begin(),nums.end());
        int i,n=nums.size(),j,ans=0,c,j1,j2;
        for(i=0;i<n;i++)
        {
            for(j=i;j<n;j++)
            {
                if(nums[i]!=nums[j])
                    break;
            }
            c=j-i;
            j1=lower_bound(nums.begin(),nums.end(),nums[i]-k)-nums.begin();
            j2=upper_bound(nums.begin(),nums.end(),nums[i]+k)-nums.begin();
            c+=min(numOperations,i-j1+j2-j);
            ans=max(ans,c);
        }
        
        i=0;
        for(j=1;j<n;j++)
        {
            if(nums[j]-nums[i]>2*k)
                break;
        }
        ans=max(ans,min(numOperations,j-i));
        while(j<n)
        {
            while(i<j && nums[j]-2*k>nums[i])
            i++;
            
            ans=max(ans,min(numOperations,j-i+1));
            j++;
        }
        
        return ans;
    }
};",1447763615
Tanjul Sarathe,tanjul_sarathe,584,3622,java,"class Solution {
    public int maxFrequency(int[] nums, int k, int numOperations) {
        return soll(nums,k,numOperations);
    }
    public int soll(int[] nums, int k, int numOperations) {
        int mx = Arrays.stream(nums).max().orElse(0);
        int ms = mx + k + 2;
        int[] fre = new int[ms];
        for (int num : nums) fre[num]++;
        
        int[] ps = new int[ms];
        ps[0] = fre[0];
        for (int i = 1; i < ms; i++) {
            ps[i] = ps[i - 1] + fre[i];
        }
        int ans = 0;

        for (int x = 0; x < ms; x++) {
            if (fre[x] == 0 && numOperations == 0) 
                continue;
            int lbb = Math.max(0, x - k), rbb = Math.min(ms - 1, x + k);
            int rt = ps[rbb] - (lbb > 0 ? ps[lbb - 1] : 0);
            int pa = rt - fre[x];
            int af = fre[x] + Math.min(numOperations, pa);
          ans = Math.max(ans, af);
        }
         return ans;
    }
}",1447744354
Tanjul Sarathe,tanjul_sarathe,584,3626,java,"class Solution {
    public int smallestNumber(int n, int t) {
        while (true) {
            if (solve(n, t))return n;
            n++;}
    }
    public boolean solve(int n, int t) {
        int p = 1;
        while (n > 0) {
            int d = n % 10;
            p *= d;
            n /= 10;
            if (p == 0)break;}
        return p % t == 0;
    }
}
",1447662748
Tanjul Sarathe,tanjul_sarathe,584,3640,java,"class Solution {
    public int maxFrequency(int[] nums, int k, int numOperations) {
        return tanjul(nums, k , numOperations);
    }
    public int tanjul(int[] nums, int k, int numOperations) {
        int n = nums.length;
        Map<Integer, Integer> freq = new HashMap<>();
        List<int[]> eee = new ArrayList<>();
        
        for (int num : nums) {
            freq.put(num, freq.getOrDefault(num, 0) + 1);
            eee.add(new int[]{num - k, 1});  
            eee.add(new int[]{num + k + 1, -1}); 
        }
        Set<Integer> ts = new TreeSet<>();
        for (int[] e : eee) ts.add(e[0]);
        
        for (int num : freq.keySet())ts.add(num);
        eee.sort(Comparator.comparingInt(a -> a[0]));
        int idx = 0,co = 0,mxx = 0, cnt = 0;
        for (int t : ts) {
            while (idx < eee.size() && eee.get(idx)[0] <= t) {
                co += eee.get(idx)[1];
                idx++;
            }
            cnt = freq.getOrDefault(t, 0);
            int pf = cnt + Math.min(numOperations, co - cnt);
            mxx = Math.max(mxx, pf);
        }
        return mxx;
    }
}",1447763692
Tushar28042002,Tushar28042002,587,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        int n = nums.size();
        unordered_map<int, int> frequencyMap;
        vector<pair<int, int>> events;
    
        int i = 0;
        while (i < n) {
            int num = nums[i];
            frequencyMap[num]++;
            events.push_back({num - k, +1});     
            events.push_back({num + k + 1, -1});
            i++;
        }
    
        set<int> points;
        for (auto& event : events) {
            points.insert(event.first);
        }
        for (auto& entry : frequencyMap) {
            points.insert(entry.first);
        }
    
        sort(events.begin(), events.end());
    
        int idx = 0;
        int currentOps = 0, maxFrequency = 0;
        for (int t : points) {
            while (idx < events.size() && events[idx].first <= t) {
                currentOps += events[idx].second;
                idx++;
            }
    
            int actualFrequency = frequencyMap.count(t) ? frequencyMap[t] : 0;
            int possibleFrequency = actualFrequency + min(numOperations, currentOps - actualFrequency);
            maxFrequency = max(maxFrequency, possibleFrequency);
        }
    
        return maxFrequency;
    }

};",1447771856
Tushar28042002,Tushar28042002,587,3626,cpp,"class Solution {
public:
    int solve(int n) {
        int ans = 1;

        while (n>0) {
            int digit = n % 10;
            ans *= digit;       
            n /= 10;              
        }
        // cout<<ans<<endl;
        return ans;
        
    }
    int smallestNumber(int n, int t) {
    
        int temp=n;
        while(true){
            if(solve(temp)%t==0)return temp;
            temp++;
        }
    }
};",1447719664
Tushar28042002,Tushar28042002,587,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        int n = nums.size();
        unordered_map<int, int> frequencyMap;
        vector<pair<int, int>> events;
    
        int i = 0;
        while (i < n) {
            int num = nums[i];
            frequencyMap[num]++;
            events.push_back({num - k, +1});     
            events.push_back({num + k + 1, -1});
            i++;
        }
    
        set<int> points;
        for (auto& event : events) {
            points.insert(event.first);
        }
        for (auto& entry : frequencyMap) {
            points.insert(entry.first);
        }
    
        sort(events.begin(), events.end());
    
        int idx = 0;
        int currentOps = 0, maxFrequency = 0;
        for (int t : points) {
            while (idx < events.size() && events[idx].first <= t) {
                currentOps += events[idx].second;
                idx++;
            }
    
            int actualFrequency = frequencyMap.count(t) ? frequencyMap[t] : 0;
            int possibleFrequency = actualFrequency + min(numOperations, currentOps - actualFrequency);
            maxFrequency = max(maxFrequency, possibleFrequency);
        }
    
        return maxFrequency;
    }

};",1447771394
Tiko Apridonidze,kiu2024falltikoapridonidze,590,3622,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        max_num = max(nums)
        size = max_num + k + 2
        freq = [0] * size
        
        for num in nums:
            freq[num] += 1
            
        pre = [0] * size
        pre[0] = freq[0]
        
        for i in range(1, size):
            pre[i] = pre[i-1] + freq[i]
       
        result = 0
        
        for x in range(size):
            if freq[x] == 0 and numOperations == 0:
                continue
           
            left = max(0, x - k)
            right = min(size - 1, x + k)
           
            totalInRange = pre[right] - (pre[left - 1] if left > 0 else 0)
           
            canAdjust = totalInRange - freq[x]
           
            total = freq[x] + min(numOperations, canAdjust)
           
            result = max(result, total)
       
        return result",1447743105
Tiko Apridonidze,kiu2024falltikoapridonidze,590,3626,python3,"class Solution:
    def smallestNumber(self, n: int, t: int) -> int:
        while True:
            product = 1
            temp = n
            
            while temp > 0:
                digit = temp % 10
                product *= digit
                temp //= 10
            
            if product % t == 0:
                return n
            
            n += 1",1447665127
Tiko Apridonidze,kiu2024falltikoapridonidze,590,3640,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        n = len(nums)
        freq = {}
        events = []
        
        for num in nums:
            freq[num] = freq.get(num, 0) + 1
            events.append((num - k, 1))
            events.append((num + k + 1, -1))
        
        points = set()
        for event in events:
            points.add(event[0])
            
        for num in freq:
            points.add(num)
            
        events.sort()
        
        idx = 0
        currentOverlap = 0
        maxFreq = 0
        
        for t in sorted(points):
            while idx < len(events) and events[idx][0] <= t:
                currentOverlap += events[idx][1]
                idx += 1
                
            actualCount = freq.get(t, 0)
            possibleFreq = actualCount + min(numOperations, currentOverlap - actualCount)
            maxFreq = max(maxFreq, possibleFreq)
            
        return maxFreq",1447772262
tmimotw,tmimotw,591,3622,java,"class Solution {
  public int maxFrequency(int[] nums, int k, int numOperations) {
    var countArr = new int[1_000_01];
    for (int i = 0; i < nums.length; i++) {
      countArr[nums[i]]++;
    }
    var prefix = new int[1_000_01];
    var suffix = new int[1_000_01];
    for (int i = 1; i < suffix.length; i++) {
      prefix[i] = prefix[i - 1] + countArr[i - 1];
    }
    for (int i = 1_000_00 - 1; i > 0; i--) {
      suffix[i] = suffix[i + 1] + countArr[i + 1];
    }
    var result = 0;
    for (int i = 0; i < suffix.length; i++) {
      var temp = Math.min(
          prefix[i] - (i - k >= 0 ? prefix[i - k] : 0) + suffix[i] - (i + k < suffix.length ? suffix[i + k] : 0),
          numOperations);
      result = Math.max(result, temp + countArr[i]);
    }
    return result;
  }
}",1447699472
tmimotw,tmimotw,591,3626,java,"class Solution {
  public int smallestNumber(int n, int t) {
    while (true) {
      var product = 1;
      var temp = n;
      while (temp > 0) {
        product *= temp % 10;
        temp /= 10;
      }
      if (product % t == 0)
        return n;
      n++;
    }
  }
}",1447658705
tmimotw,tmimotw,591,3640,java,"class Solution {
  public int maxFrequency(int[] nums, int k, int numOperations) {
    Arrays.sort(nums);
    var countMap = new HashMap<Integer, Integer>();
    for (int i = 0; i < nums.length; i++) {
      countMap.put(nums[i], countMap.getOrDefault(nums[i], 0) + 1);
    }
    var lower = 0;
    var upper = 0;
    var result = 0;
    var slowLower = 0;
    var slowUpper = 0;
    for (int i = 0; i < nums.length; i++) {
      while (lower < i && nums[lower] < nums[i] - k) {
        lower++;
      }
      while (upper < nums.length && nums[upper] <= nums[i] + k) {
        upper++;
      }
      while (slowLower < i && nums[slowLower] < nums[i] - 2 * k) {
        slowLower++;
      }
      while (slowUpper < nums.length && nums[slowUpper] <= nums[i] + 2 * k) {
        slowUpper++;
      }
      var temp = upper - lower;
      result = Math.max(result, Math.min(countMap.get(nums[i]) + numOperations, temp));
      result = Math.max(result, Math.min(numOperations, i - slowLower));
      result = Math.max(result, Math.min(numOperations, slowUpper - i));
    }
    return result;
  }
}",1447765150
Firoj Ahamad,firoj_ahamad0015,592,3622,cpp,"
#include <bits/stdc++.h>
using namespace std;

// Type definitions
typedef long long ll;
typedef long double ld;
typedef complex<ld> cd;
typedef pair<int, int> pii;
typedef pair<ll, ll> pll;
typedef vector<int> vi;
typedef vector<ll> vll;
typedef vector<pii> vpii;
typedef vector<pll> vpll;
typedef vector<string> vs;
typedef unordered_map<int, int> umii;
typedef unordered_set<int> usi;

// Macros
#define fastio ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL)
#define endl '\n'
#define pb push_back
#define mp make_pair
#define all(x) (x).begin(), (x).end()
#define sz(x) ((int)(x).size())
#define F first
#define S second
#define REP(i, a, b) for (int i = (a); i < (b); ++i)
#define REPR(i, a, b) for (int i = (a); i > (b); --i)
#define FOREACH(it, l) for (auto it = l.begin(); it != l.end(); it++)
#define SORT(v) sort(all(v))
#define RSORT(v) sort(all(v), greater<int>())
#define REVERSE(v) reverse(all(v))
#define MAX(a, b) a = max(a, b)
#define MIN(a, b) a = min(a, b)
#define SQR(x) ((ll)(x) * (x))
#define RESET(a, b) memset(a, b, sizeof(a))

// Constants
const int MOD = 1e9 + 7;
const int INF = 1e9;
const ll LLINF = 1e18;
const double PI = acos(-1.0);
const double EPS = 1e-9;

// Debugging macros
#define DEBUG
#ifdef DEBUG
#define debug(...) fprintf(stderr, __VA_ARGS__), fflush(stderr)
#define dbg(x) cerr << #x << "" = "" << x << endl
#else
#define debug(...)
#define dbg(x)
#endif




#include <bits/stdc++.h>
using namespace std;

class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int ops) {
        unordered_map<int, int> f;
        vector<pair<int, int>> e;
        
        for (int n : nums) {
            f[n]++;
            e.push_back({n - k, 1});
            e.push_back({n + k + 1, -1});
        }
        
        set<int> p;
        for (auto& ev : e) p.insert(ev.first);
        for (auto& [key, _] : f) p.insert(key);
        
        sort(e.begin(), e.end());
        
        int idx = 0, co = 0, maxFreq = 0, ac = 0;
        
        for (int t : p) {
            while (idx < e.size() && e[idx].first <= t) {
                co += e[idx].second;
                idx++;
            }
            ac = f.count(t) ? f[t] : 0;
            maxFreq = max(maxFreq, ac + min(ops, co - ac));
        }
        
        return maxFreq;
    }
};",1447742574
Firoj Ahamad,firoj_ahamad0015,592,3626,cpp,"using namespace std;

// Type definitions
typedef long long ll;
typedef long double ld;
typedef complex<ld> cd;
typedef pair<int, int> pii;
typedef pair<ll, ll> pll;
typedef vector<int> vi;
typedef vector<ll> vll;
typedef vector<pii> vpii;
typedef vector<pll> vpll;
typedef vector<string> vs;
typedef unordered_map<int, int> umii;
typedef unordered_set<int> usi;

// Macros
#define fastio ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL)
#define endl '\n'
#define pb push_back
#define mp make_pair
#define all(x) (x).begin(), (x).end()
#define sz(x) ((int)(x).size())
#define F first
#define S second
#define REP(i, a, b) for (int i = (a); i < (b); ++i)
#define REPR(i, a, b) for (int i = (a); i > (b); --i)
#define FOREACH(it, l) for (auto it = l.begin(); it != l.end(); it++)
#define SORT(v) sort(all(v))
#define RSORT(v) sort(all(v), greater<int>())
#define REVERSE(v) reverse(all(v))
#define MAX(a, b) a = max(a, b)
#define MIN(a, b) a = min(a, b)
#define SQR(x) ((ll)(x) * (x))
#define RESET(a, b) memset(a, b, sizeof(a))


class Solution {
public:
    int smallestNumber(int n, int t) {
        auto dp = [](int x) {
            int p = 1;
            for (char d : to_string(x)) {
                p *= d - '0';
            }
            return p;
        };

        int c = n;
        while (true) {
            if (dp(c) % t == 0) {
                return c;
            }
            c++;
        }
    }
};
",1447677334
Firoj Ahamad,firoj_ahamad0015,592,3640,cpp,"
#include <bits/stdc++.h>
using namespace std;

// Type definitions
typedef long long ll;
typedef long double ld;
typedef complex<ld> cd;
typedef pair<int, int> pii;
typedef pair<ll, ll> pll;
typedef vector<int> vi;
typedef vector<ll> vll;
typedef vector<pii> vpii;
typedef vector<pll> vpll;
typedef vector<string> vs;
typedef unordered_map<int, int> umii;
typedef unordered_set<int> usi;

// Macros
#define fastio ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL)
#define endl '\n'
#define pb push_back
#define mp make_pair
#define all(x) (x).begin(), (x).end()
#define sz(x) ((int)(x).size())
#define F first
#define S second
#define REP(i, a, b) for (int i = (a); i < (b); ++i)
#define REPR(i, a, b) for (int i = (a); i > (b); --i)
#define FOREACH(it, l) for (auto it = l.begin(); it != l.end(); it++)
#define SORT(v) sort(all(v))
#define RSORT(v) sort(all(v), greater<int>())
#define REVERSE(v) reverse(all(v))
#define MAX(a, b) a = max(a, b)
#define MIN(a, b) a = min(a, b)
#define SQR(x) ((ll)(x) * (x))
#define RESET(a, b) memset(a, b, sizeof(a))

// Constants
const int MOD = 1e9 + 7;
const int INF = 1e9;
const ll LLINF = 1e18;
const double PI = acos(-1.0);
const double EPS = 1e-9;

// Debugging macros
#define DEBUG
#ifdef DEBUG
#define debug(...) fprintf(stderr, __VA_ARGS__), fflush(stderr)
#define dbg(x) cerr << #x << "" = "" << x << endl
#else
#define debug(...)
#define dbg(x)
#endif




#include <bits/stdc++.h>
using namespace std;

class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int ops) {
        unordered_map<int, int> f;
        vector<pair<int, int>> e;
        
        for (int n : nums) {
            f[n]++;
            e.push_back({n - k, 1});
            e.push_back({n + k + 1, -1});
        }
        
        set<int> p;
        for (auto& ev : e) p.insert(ev.first);
        for (auto& [key, _] : f) p.insert(key);
        
        sort(e.begin(), e.end());
        
        int idx = 0, co = 0, maxFreq = 0, ac = 0;
        
        for (int t : p) {
            while (idx < e.size() && e[idx].first <= t) {
                co += e[idx].second;
                idx++;
            }
            ac = f.count(t) ? f[t] : 0;
            maxFreq = max(maxFreq, ac + min(ops, co - ac));
        }
        
        return maxFreq;
    }
};

static const int KDS = []() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
    std::cout.tie(nullptr);
    return 0;
}();",1447749371
VIV,VIkkY53,593,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        int ans = 0;
        sort(nums.begin(), nums.end());
        int start = 0, end = 0;
        int n = nums.size();
        for (start = 0; start < n; start++) {
            while (end < n && nums[end] - nums[start] <= 2 * k) {
                end++;
            }
            // cout << nums[start] << "" "" << (end < n ? nums[end] : -1) << endl;
            ans = max(ans, min(numOperations, max(0, (end - start))));
        }
        // cout << ""***************"" << endl;
        int left  = 0;
        int right = 0;
        map<int, int> mp;
        for (auto c: nums) {
            mp[c]++;
        }
        int d = mp.size();
        vector<int> f;
        vector<int> v;
        for (auto x: mp) {
            f.push_back(x.second);
            v.push_back(x.first);
        }
        vector<int> pre(d, 0);
        int sum = 0;
        for (int i = 0; i < d; i++) {
            sum += f[i];
            pre[i] = sum;
        }
        for (int mid = 0; mid < d; mid++) {
            while (left < mid && v[mid] - v[left] > k) {
                left++;
            }
            while (right < d && v[right] - v[mid] <= k) {
                right++;
            }
            // cout << left << "" "" << mid <<  "" "" << right << endl;
            int curr = (
                (right - 1 >= 0 ? pre[right - 1] : 0)
                - (left - 1 >= 0 ? pre[left - 1] : 0)
            ) - f[mid];
            // cout << ""curr:""  << curr << endl;
            ans = max(ans, f[mid] + min(numOperations, max(0, curr)));
        }
        return ans;
    }
};",1447749466
VIV,VIkkY53,593,3626,cpp,"class Solution {
public:
    int smallestNumber(int n, int t) {
        int k = n;
        while (true) {
            int product = 1;
            int a = k;
            while (a) {
                product *= (a % 10);
                a /= 10;
            }
            if (product % t == 0) {
                return k;
            }
            k++;
        }
        return -1;
    }
};",1447683979
VIV,VIkkY53,593,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        int ans = 0;
        sort(nums.begin(), nums.end());
        int start = 0, end = 0;
        int n = nums.size();
        for (start = 0; start < n; start++) {
            while (end < n && nums[end] - nums[start] <= 2 * k) {
                end++;
            }
            // cout << nums[start] << "" "" << (end < n ? nums[end] : -1) << endl;
            ans = max(ans, min(numOperations, max(0, (end - start))));
        }
        // cout << ""***************"" << endl;
        int left  = 0;
        int right = 0;
        map<int, int> mp;
        for (auto c: nums) {
            mp[c]++;
        }
        int d = mp.size();
        vector<int> f;
        vector<int> v;
        for (auto x: mp) {
            f.push_back(x.second);
            v.push_back(x.first);
        }
        vector<int> pre(d, 0);
        int sum = 0;
        for (int i = 0; i < d; i++) {
            sum += f[i];
            pre[i] = sum;
        }
        for (int mid = 0; mid < d; mid++) {
            while (left < mid && v[mid] - v[left] > k) {
                left++;
            }
            while (right < d && v[right] - v[mid] <= k) {
                right++;
            }
            // cout << left << "" "" << mid <<  "" "" << right << endl;
            int curr = (
                (right - 1 >= 0 ? pre[right - 1] : 0)
                - (left - 1 >= 0 ? pre[left - 1] : 0)
            ) - f[mid];
            // cout << ""curr:""  << curr << endl;
            ans = max(ans, f[mid] + min(numOperations, max(0, curr)));
        }
        return ans;
    }
};",1447749203
Bipul Kumar,211FA04639,595,3622,python3,"import math
import cmath

def add_two_numbers(a, b):
    return a + b

def square_root(num):
    return math.sqrt(num)

def area_of_triangle(base, height):
    return 0.5 * base * height

def quadratic_roots(a, b, c):
    discriminant = b**2 - 4*a*c
    root1 = (-b + cmath.sqrt(discriminant)) / (2 * a)
    root2 = (-b - cmath.sqrt(discriminant)) / (2 * a)
    return root1, root2

def is_armstrong_number(num):
    digits = list(map(int, str(num)))
    power = len(digits)
    return num == sum([digit ** power for digit in digits])

def is_prime_number(num):
    if num <= 1:
        return False
    for i in range(2, int(math.sqrt(num)) + 1):
        if num % i == 0:
            return False
    return True

def is_even_or_odd(num):
    return ""Even"" if num % 2 == 0 else ""Odd""

def are_coprime(a, b):
    return math.gcd(a, b) == 1

def is_perfect_number(num):
    divisors_sum = sum([i for i in range(1, num) if num % i == 0])
    return divisors_sum == num

def is_lucky_number(num):
    sieve = [True] * (num + 1)
    sieve[0] = sieve[1] = False
    for start in range(2, int(num**0.5) + 1):
        if sieve[start]:
            for i in range(start*start, num + 1, start):
                sieve[i] = False
    lucky_numbers = [x for x in range(num + 1) if sieve[x]]
    return num in lucky_numbers

def factorial(num):
    if num == 0:
        return 1
    return num * factorial(num - 1)

def fibonacci(n):
    if n <= 0:
        return []
    elif n == 1:
        return [0]
    elif n == 2:
        return [0, 1]
    fib_seq = [0, 1]
    for i in range(2, n):
        fib_seq.append(fib_seq[-1] + fib_seq[-2])
    return fib_seq

def is_palindrome_number(num):
    return str(num) == str(num)[::-1]

def is_palindrome_string(s):
    return s == s[::-1]

def gcd(a, b):
    return math.gcd(a, b)

def is_prime(n):
    if n <= 1:
        return False
    if n <= 3:
        return True
    if n % 2 == 0 or n % 3 == 0:
        return False
    i = 5
    while i * i <= n:
        if n % i == 0 or n % (i + 2) == 0:
            return False
        i += 6
    return True

def is_armstrong(number):
    num_str = str(number)
    num_digits = len(num_str)
    sum_of_powers = sum(int(digit) ** num_digits for digit in num_str)
    return sum_of_powers == number

def gcd(a, b):
    while b != 0:
        a, b = b, a % b
    return a

def are_coprime(num1, num2):
    return gcd(num1, num2) == 1

def is_perfect_number(n):
    if n < 2:
        return False
    sum_of_divisors = 1
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            sum_of_divisors += i
            if i != n // i:
                sum_of_divisors += n // i
    return sum_of_divisors == n

def factorial(n):
    if n < 0:
        return ""Factorial is not defined for negative numbers.""
    if n == 0 or n == 1:
        return 1
    result = 1
    for i in range(2, n + 1):
        result *= i
    return result

def fibonacci_series(n):
    if n <= 0:
        return ""Number of terms must be a positive integer.""
    if n == 1:
        return [0]
    if n == 2:
        return [0, 1]
    
    series = [0, 1]
    for i in range(2, n):
        next_term = series[-1] + series[-2]
        series.append(next_term)
    return series



class Solution:
    def maxFrequency(self, kdjbf, adkfb, fdsb):
        sdgihew = max(kdjbf)
        lsfigh = sdgihew + adkfb + 2
        asldbfi = [0] * lsfigh

        for dsgurh in kdjbf:
            asldbfi[dsgurh] += 1

        sdjgher = [0] * lsfigh
        sdjgher[0] = asldbfi[0]
        for fkgbdfs in range(1, lsfigh):
            sdjgher[fkgbdfs] = sdjgher[fkgbdfs - 1] + asldbfi[fkgbdfs]

        gsldighsd = 0
        for gshs in range(lsfigh):
            if asldbfi[gshs] == 0 and fdsb == 0:
                continue

            dgdshg = max(0, gshs - adkfb)
            dfndson = min(lsfigh - 1, gshs + adkfb)
            totalInRange = sdjgher[dfndson] - (sdjgher[dgdshg - 1] if dgdshg > 0 else 0)
            canAdjust = totalInRange - asldbfi[gshs]
            total = asldbfi[gshs] + min(fdsb, canAdjust)
            gsldighsd = max(gsldighsd, int(total))

        return gsldighsd



    
    
import math
import cmath

def add_two_numbers(a, b):
    return a + b

def square_root(num):
    return math.sqrt(num)

def area_of_triangle(base, height):
    return 0.5 * base * height

def quadratic_roots(a, b, c):
    discriminant = b**2 - 4*a*c
    root1 = (-b + cmath.sqrt(discriminant)) / (2 * a)
    root2 = (-b - cmath.sqrt(discriminant)) / (2 * a)
    return root1, root2

def is_armstrong_number(num):
    digits = list(map(int, str(num)))
    power = len(digits)
    return num == sum([digit ** power for digit in digits])

def is_prime_number(num):
    if num <= 1:
        return False
    for i in range(2, int(math.sqrt(num)) + 1):
        if num % i == 0:
            return False
    return True

def is_even_or_odd(num):
    return ""Even"" if num % 2 == 0 else ""Odd""

def are_coprime(a, b):
    return math.gcd(a, b) == 1

def is_perfect_number(num):
    divisors_sum = sum([i for i in range(1, num) if num % i == 0])
    return divisors_sum == num

def is_lucky_number(num):
    sieve = [True] * (num + 1)
    sieve[0] = sieve[1] = False
    for start in range(2, int(num**0.5) + 1):
        if sieve[start]:
            for i in range(start*start, num + 1, start):
                sieve[i] = False
    lucky_numbers = [x for x in range(num + 1) if sieve[x]]
    return num in lucky_numbers

def factorial(num):
    if num == 0:
        return 1
    return num * factorial(num - 1)

def fibonacci(n):
    if n <= 0:
        return []
    elif n == 1:
        return [0]
    elif n == 2:
        return [0, 1]
    fib_seq = [0, 1]
    for i in range(2, n):
        fib_seq.append(fib_seq[-1] + fib_seq[-2])
    return fib_seq

def is_palindrome_number(num):
    return str(num) == str(num)[::-1]

def is_palindrome_string(s):
    return s == s[::-1]

def gcd(a, b):
    return math.gcd(a, b)

def is_prime(n):
    if n <= 1:
        return False
    if n <= 3:
        return True
    if n % 2 == 0 or n % 3 == 0:
        return False
    i = 5
    while i * i <= n:
        if n % i == 0 or n % (i + 2) == 0:
            return False
        i += 6
    return True

def is_armstrong(number):
    num_str = str(number)
    num_digits = len(num_str)
    sum_of_powers = sum(int(digit) ** num_digits for digit in num_str)
    return sum_of_powers == number

def gcd(a, b):
    while b != 0:
        a, b = b, a % b
    return a

def are_coprime(num1, num2):
    return gcd(num1, num2) == 1

def is_perfect_number(n):
    if n < 2:
        return False
    sum_of_divisors = 1
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            sum_of_divisors += i
            if i != n // i:
                sum_of_divisors += n // i
    return sum_of_divisors == n

def factorial(n):
    if n < 0:
        return ""Factorial is not defined for negative numbers.""
    if n == 0 or n == 1:
        return 1
    result = 1
    for i in range(2, n + 1):
        result *= i
    return result

def fibonacci_series(n):
    if n <= 0:
        return ""Number of terms must be a positive integer.""
    if n == 1:
        return [0]
    if n == 2:
        return [0, 1]
    
    series = [0, 1]
    for i in range(2, n):
        next_term = series[-1] + series[-2]
        series.append(next_term)
    return series",1447723892
Bipul Kumar,211FA04639,595,3626,python3,"import math
import cmath

def add_two_numbers(a, b):
    return a + b

def square_root(num):
    return math.sqrt(num)

def area_of_triangle(base, height):
    return 0.5 * base * height

def quadratic_roots(a, b, c):
    discriminant = b**2 - 4*a*c
    root1 = (-b + cmath.sqrt(discriminant)) / (2 * a)
    root2 = (-b - cmath.sqrt(discriminant)) / (2 * a)
    return root1, root2

def is_armstrong_number(num):
    digits = list(map(int, str(num)))
    power = len(digits)
    return num == sum([digit ** power for digit in digits])

def is_prime_number(num):
    if num <= 1:
        return False
    for i in range(2, int(math.sqrt(num)) + 1):
        if num % i == 0:
            return False
    return True

def is_even_or_odd(num):
    return ""Even"" if num % 2 == 0 else ""Odd""

def are_coprime(a, b):
    return math.gcd(a, b) == 1

def is_perfect_number(num):
    divisors_sum = sum([i for i in range(1, num) if num % i == 0])
    return divisors_sum == num

def is_lucky_number(num):
    sieve = [True] * (num + 1)
    sieve[0] = sieve[1] = False
    for start in range(2, int(num**0.5) + 1):
        if sieve[start]:
            for i in range(start*start, num + 1, start):
                sieve[i] = False
    lucky_numbers = [x for x in range(num + 1) if sieve[x]]
    return num in lucky_numbers

def factorial(num):
    if num == 0:
        return 1
    return num * factorial(num - 1)

def fibonacci(n):
    if n <= 0:
        return []
    elif n == 1:
        return [0]
    elif n == 2:
        return [0, 1]
    fib_seq = [0, 1]
    for i in range(2, n):
        fib_seq.append(fib_seq[-1] + fib_seq[-2])
    return fib_seq

def is_palindrome_number(num):
    return str(num) == str(num)[::-1]

def is_palindrome_string(s):
    return s == s[::-1]

def gcd(a, b):
    return math.gcd(a, b)

def is_prime(n):
    if n <= 1:
        return False
    if n <= 3:
        return True
    if n % 2 == 0 or n % 3 == 0:
        return False
    i = 5
    while i * i <= n:
        if n % i == 0 or n % (i + 2) == 0:
            return False
        i += 6
    return True

def is_armstrong(number):
    num_str = str(number)
    num_digits = len(num_str)
    sum_of_powers = sum(int(digit) ** num_digits for digit in num_str)
    return sum_of_powers == number

def gcd(a, b):
    while b != 0:
        a, b = b, a % b
    return a

def are_coprime(num1, num2):
    return gcd(num1, num2) == 1

def is_perfect_number(n):
    if n < 2:
        return False
    sum_of_divisors = 1
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            sum_of_divisors += i
            if i != n // i:
                sum_of_divisors += n // i
    return sum_of_divisors == n

def factorial(n):
    if n < 0:
        return ""Factorial is not defined for negative numbers.""
    if n == 0 or n == 1:
        return 1
    result = 1
    for i in range(2, n + 1):
        result *= i
    return result

def fibonacci_series(n):
    if n <= 0:
        return ""Number of terms must be a positive integer.""
    if n == 1:
        return [0]
    if n == 2:
        return [0, 1]
    
    series = [0, 1]
    for i in range(2, n):
        next_term = series[-1] + series[-2]
        series.append(next_term)
    return series


class Solution:
    def smallestNumber(self, n: int, t: int) -> int:
        def digit_product(x):
            product = 1
            for digit in str(x):
                product *= int(digit)
            return product
        
        current = n
        while True:
            if digit_product(current) % t == 0:
                return current
            current += 1

            
            
import math
import cmath

def add_two_numbers(a, b):
    return a + b

def square_root(num):
    return math.sqrt(num)

def area_of_triangle(base, height):
    return 0.5 * base * height

def quadratic_roots(a, b, c):
    discriminant = b**2 - 4*a*c
    root1 = (-b + cmath.sqrt(discriminant)) / (2 * a)
    root2 = (-b - cmath.sqrt(discriminant)) / (2 * a)
    return root1, root2

def is_armstrong_number(num):
    digits = list(map(int, str(num)))
    power = len(digits)
    return num == sum([digit ** power for digit in digits])

def is_prime_number(num):
    if num <= 1:
        return False
    for i in range(2, int(math.sqrt(num)) + 1):
        if num % i == 0:
            return False
    return True

def is_even_or_odd(num):
    return ""Even"" if num % 2 == 0 else ""Odd""

def are_coprime(a, b):
    return math.gcd(a, b) == 1

def is_perfect_number(num):
    divisors_sum = sum([i for i in range(1, num) if num % i == 0])
    return divisors_sum == num

def is_lucky_number(num):
    sieve = [True] * (num + 1)
    sieve[0] = sieve[1] = False
    for start in range(2, int(num**0.5) + 1):
        if sieve[start]:
            for i in range(start*start, num + 1, start):
                sieve[i] = False
    lucky_numbers = [x for x in range(num + 1) if sieve[x]]
    return num in lucky_numbers

def factorial(num):
    if num == 0:
        return 1
    return num * factorial(num - 1)

def fibonacci(n):
    if n <= 0:
        return []
    elif n == 1:
        return [0]
    elif n == 2:
        return [0, 1]
    fib_seq = [0, 1]
    for i in range(2, n):
        fib_seq.append(fib_seq[-1] + fib_seq[-2])
    return fib_seq

def is_palindrome_number(num):
    return str(num) == str(num)[::-1]

def is_palindrome_string(s):
    return s == s[::-1]

def gcd(a, b):
    return math.gcd(a, b)

def is_prime(n):
    if n <= 1:
        return False
    if n <= 3:
        return True
    if n % 2 == 0 or n % 3 == 0:
        return False
    i = 5
    while i * i <= n:
        if n % i == 0 or n % (i + 2) == 0:
            return False
        i += 6
    return True

def is_armstrong(number):
    num_str = str(number)
    num_digits = len(num_str)
    sum_of_powers = sum(int(digit) ** num_digits for digit in num_str)
    return sum_of_powers == number

def gcd(a, b):
    while b != 0:
        a, b = b, a % b
    return a

def are_coprime(num1, num2):
    return gcd(num1, num2) == 1

def is_perfect_number(n):
    if n < 2:
        return False
    sum_of_divisors = 1
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            sum_of_divisors += i
            if i != n // i:
                sum_of_divisors += n // i
    return sum_of_divisors == n

def factorial(n):
    if n < 0:
        return ""Factorial is not defined for negative numbers.""
    if n == 0 or n == 1:
        return 1
    result = 1
    for i in range(2, n + 1):
        result *= i
    return result

def fibonacci_series(n):
    if n <= 0:
        return ""Number of terms must be a positive integer.""
    if n == 1:
        return [0]
    if n == 2:
        return [0, 1]
    
    series = [0, 1]
    for i in range(2, n):
        next_term = series[-1] + series[-2]
        series.append(next_term)
    return series",1447678878
Bipul Kumar,211FA04639,595,3640,python3,"import math
import cmath

def add_two_numbers(a, b):
    return a + b

def square_root(num):
    return math.sqrt(num)

def area_of_triangle(base, height):
    return 0.5 * base * height

def quadratic_roots(a, b, c):
    discriminant = b**2 - 4*a*c
    root1 = (-b + cmath.sqrt(discriminant)) / (2 * a)
    root2 = (-b - cmath.sqrt(discriminant)) / (2 * a)
    return root1, root2

def is_armstrong_number(num):
    digits = list(map(int, str(num)))
    power = len(digits)
    return num == sum([digit ** power for digit in digits])

def is_prime_number(num):
    if num <= 1:
        return False
    for i in range(2, int(math.sqrt(num)) + 1):
        if num % i == 0:
            return False
    return True

def is_even_or_odd(num):
    return ""Even"" if num % 2 == 0 else ""Odd""

def are_coprime(a, b):
    return math.gcd(a, b) == 1

def is_perfect_number(num):
    divisors_sum = sum([i for i in range(1, num) if num % i == 0])
    return divisors_sum == num

def is_lucky_number(num):
    sieve = [True] * (num + 1)
    sieve[0] = sieve[1] = False
    for start in range(2, int(num**0.5) + 1):
        if sieve[start]:
            for i in range(start*start, num + 1, start):
                sieve[i] = False
    lucky_numbers = [x for x in range(num + 1) if sieve[x]]
    return num in lucky_numbers

def factorial(num):
    if num == 0:
        return 1
    return num * factorial(num - 1)

def fibonacci(n):
    if n <= 0:
        return []
    elif n == 1:
        return [0]
    elif n == 2:
        return [0, 1]
    fib_seq = [0, 1]
    for i in range(2, n):
        fib_seq.append(fib_seq[-1] + fib_seq[-2])
    return fib_seq

def is_palindrome_number(num):
    return str(num) == str(num)[::-1]

def is_palindrome_string(s):
    return s == s[::-1]

def gcd(a, b):
    return math.gcd(a, b)

def is_prime(n):
    if n <= 1:
        return False
    if n <= 3:
        return True
    if n % 2 == 0 or n % 3 == 0:
        return False
    i = 5
    while i * i <= n:
        if n % i == 0 or n % (i + 2) == 0:
            return False
        i += 6
    return True

def is_armstrong(number):
    num_str = str(number)
    num_digits = len(num_str)
    sum_of_powers = sum(int(digit) ** num_digits for digit in num_str)
    return sum_of_powers == number

def gcd(a, b):
    while b != 0:
        a, b = b, a % b
    return a

def are_coprime(num1, num2):
    return gcd(num1, num2) == 1

def is_perfect_number(n):
    if n < 2:
        return False
    sum_of_divisors = 1
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            sum_of_divisors += i
            if i != n // i:
                sum_of_divisors += n // i
    return sum_of_divisors == n

def factorial(n):
    if n < 0:
        return ""Factorial is not defined for negative numbers.""
    if n == 0 or n == 1:
        return 1
    result = 1
    for i in range(2, n + 1):
        result *= i
    return result

def fibonacci_series(n):
    if n <= 0:
        return ""Number of terms must be a positive integer.""
    if n == 1:
        return [0]
    if n == 2:
        return [0, 1]
    
    series = [0, 1]
    for i in range(2, n):
        next_term = series[-1] + series[-2]
        series.append(next_term)
    return series


from typing import List
from collections import defaultdict

class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        n = len(nums)
        freq = defaultdict(int)
        events = []
        
        # Build frequency map and event list
        for num in nums:
            freq[num] += 1
            events.append((num - k, 1))
            events.append((num + k + 1, -1))
        
        # Collect all unique points
        points = set()
        for event in events:
            points.add(event[0])
        for p in freq:
            points.add(p)

        # Sort events and points
        events.sort()
        points = sorted(points)

        idx = 0
        current_overlap = 0
        max_freq = 0
        actual_count = 0
        
        # Traverse each point
        for t in points:
            # Process events up to current point t
            while idx < len(events) and events[idx][0] <= t:
                current_overlap += events[idx][1]
                idx += 1
            
            actual_count = freq.get(t, 0)
            possible_freq = actual_count + min(numOperations, current_overlap - actual_count)
            max_freq = max(max_freq, possible_freq)

        return max_freq


    
    
    
import math
import cmath

def add_two_numbers(a, b):
    return a + b

def square_root(num):
    return math.sqrt(num)

def area_of_triangle(base, height):
    return 0.5 * base * height

def quadratic_roots(a, b, c):
    discriminant = b**2 - 4*a*c
    root1 = (-b + cmath.sqrt(discriminant)) / (2 * a)
    root2 = (-b - cmath.sqrt(discriminant)) / (2 * a)
    return root1, root2

def is_armstrong_number(num):
    digits = list(map(int, str(num)))
    power = len(digits)
    return num == sum([digit ** power for digit in digits])

def is_prime_number(num):
    if num <= 1:
        return False
    for i in range(2, int(math.sqrt(num)) + 1):
        if num % i == 0:
            return False
    return True

def is_even_or_odd(num):
    return ""Even"" if num % 2 == 0 else ""Odd""

def are_coprime(a, b):
    return math.gcd(a, b) == 1

def is_perfect_number(num):
    divisors_sum = sum([i for i in range(1, num) if num % i == 0])
    return divisors_sum == num

def is_lucky_number(num):
    sieve = [True] * (num + 1)
    sieve[0] = sieve[1] = False
    for start in range(2, int(num**0.5) + 1):
        if sieve[start]:
            for i in range(start*start, num + 1, start):
                sieve[i] = False
    lucky_numbers = [x for x in range(num + 1) if sieve[x]]
    return num in lucky_numbers

def factorial(num):
    if num == 0:
        return 1
    return num * factorial(num - 1)

def fibonacci(n):
    if n <= 0:
        return []
    elif n == 1:
        return [0]
    elif n == 2:
        return [0, 1]
    fib_seq = [0, 1]
    for i in range(2, n):
        fib_seq.append(fib_seq[-1] + fib_seq[-2])
    return fib_seq

def is_palindrome_number(num):
    return str(num) == str(num)[::-1]

def is_palindrome_string(s):
    return s == s[::-1]

def gcd(a, b):
    return math.gcd(a, b)

def is_prime(n):
    if n <= 1:
        return False
    if n <= 3:
        return True
    if n % 2 == 0 or n % 3 == 0:
        return False
    i = 5
    while i * i <= n:
        if n % i == 0 or n % (i + 2) == 0:
            return False
        i += 6
    return True

def is_armstrong(number):
    num_str = str(number)
    num_digits = len(num_str)
    sum_of_powers = sum(int(digit) ** num_digits for digit in num_str)
    return sum_of_powers == number

def gcd(a, b):
    while b != 0:
        a, b = b, a % b
    return a

def are_coprime(num1, num2):
    return gcd(num1, num2) == 1

def is_perfect_number(n):
    if n < 2:
        return False
    sum_of_divisors = 1
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            sum_of_divisors += i
            if i != n // i:
                sum_of_divisors += n // i
    return sum_of_divisors == n

def factorial(n):
    if n < 0:
        return ""Factorial is not defined for negative numbers.""
    if n == 0 or n == 1:
        return 1
    result = 1
    for i in range(2, n + 1):
        result *= i
    return result

def fibonacci_series(n):
    if n <= 0:
        return ""Number of terms must be a positive integer.""
    if n == 1:
        return [0]
    if n == 2:
        return [0, 1]
    
    series = [0, 1]
    for i in range(2, n):
        next_term = series[-1] + series[-2]
        series.append(next_term)
    return series",1447741308
泰甯 廖,tonyliao8631,596,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        sort(nums.begin(), nums.end());
        vector<tuple<int, int, int>> Q;
        int n = nums.size();
        int i = 0;
        
        while (i < n) {
            int j = i;
            while (j + 1 < n && nums[j] == nums[j + 1]) {
                j++;
            }
            Q.push_back({nums[i], i, j});
            i = j + 1;
        }
        
        vector<int> xlist;
        for (const auto& x : Q) {
            int val = get<0>(x);
            xlist.push_back(val - k);
            xlist.push_back(val);
            xlist.push_back(val + k);
        }
        
        sort(xlist.begin(), xlist.end());
        xlist.erase(unique(xlist.begin(), xlist.end()), xlist.end());
        
        int ans = 0;
        i = 0;
        int m = 0, j = 0;
        
        for (int x : xlist) {
            while (m < Q.size() && get<0>(Q[m]) < x) {
                m++;
            }
            while (j + 1 < Q.size() && x + k >= get<0>(Q[j + 1])) {
                j++;
            }
            while (get<0>(Q[i]) < x - k) {
                i++;
            }
            
            int curr = (m < Q.size() && get<0>(Q[m]) == x) ? (get<2>(Q[m]) - get<1>(Q[m]) + 1) : 0;
            int op = min(numOperations, get<2>(Q[j]) - get<1>(Q[i]) + 1 - curr);
            ans = max(ans, curr + op);
        }
        
        return ans;
    }
};",1447757063
泰甯 廖,tonyliao8631,596,3626,cpp,"class Solution {
public:
    int prod(int n){
        int i=1;
        while(n>0){
            i *= n%10;
            n /= 10;
        }
        return i;
    }
    int smallestNumber(int n, int t) {
        while( prod(n) % t > 0 )
            n++;
        return n;
    }
};",1447667872
泰甯 廖,tonyliao8631,596,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        sort(nums.begin(), nums.end());
        vector<tuple<int, int, int>> Q;
        int n = nums.size();
        int i = 0;
        
        while (i < n) {
            int j = i;
            while (j + 1 < n && nums[j] == nums[j + 1]) {
                j++;
            }
            Q.push_back({nums[i], i, j});
            i = j + 1;
        }
        
        vector<int> xlist;
        for (const auto& x : Q) {
            int val = get<0>(x);
            xlist.push_back(val - k);
            xlist.push_back(val);
            xlist.push_back(val + k);
        }
        
        sort(xlist.begin(), xlist.end());
        xlist.erase(unique(xlist.begin(), xlist.end()), xlist.end());
        
        int ans = 0;
        i = 0;
        int m = 0, j = 0;
        
        for (int x : xlist) {
            while (m < Q.size() && get<0>(Q[m]) < x) {
                m++;
            }
            while (j + 1 < Q.size() && x + k >= get<0>(Q[j + 1])) {
                j++;
            }
            while (get<0>(Q[i]) < x - k) {
                i++;
            }
            
            int curr = (m < Q.size() && get<0>(Q[m]) == x) ? (get<2>(Q[m]) - get<1>(Q[m]) + 1) : 0;
            int op = min(numOperations, get<2>(Q[j]) - get<1>(Q[i]) + 1 - curr);
            ans = max(ans, curr + op);
        }
        
        return ans;
    }
};",1447757664
Om Singh,Om_Singh_,597,3622,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        from bisect import bisect
        d={}
        mi=float('inf')
        ma=float('-inf')
        for i,j in enumerate(nums):
            d[j]=d.get(j,0)+1
            mi=min(mi,j)
            ma=max(ma,j)
        l=list(d.keys())
        l.sort()
        val=[0]
        for i in l:
            val.append(d[i]+val[-1])
        #print(d,l,val)
        ans=float('-inf')
        for j in range(mi,ma+1):
            ind1=bisect(l,j-k-1)
            ind2=bisect(l,j+k)
            occ=d.get(j,0)
            tot=val[ind2]-val[ind1]-occ
            use=min(tot,numOperations)
            #print(j,use,occ,ind1,ind2)
            ans=max(ans,use+occ)
        #print('h',ans)
        return ans",1447735225
Om Singh,Om_Singh_,597,3626,python3,"class Solution:
    def smallestNumber(self, n: int, t: int) -> int:
        while True:
            num=str(n)
            s=1
            for i in num:
                s*=int(i)
            if not s%t:
                return n
            n+=1",1447658277
Om Singh,Om_Singh_,597,3640,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        from bisect import bisect
        d={}
        for i,j in enumerate(nums):
            d[j]=d.get(j,0)+1
        l=list(d.keys())
        l.sort()
        val=[0]
        for i in l:
            val.append(d[i]+val[-1])
        print(d,l,val)
        ans=float('-inf')
        for i,j in enumerate(l):
            ind1=bisect(l,j-k-1)
            ind2=bisect(l,j+k)
            occ=d.get(j,0)
            tot=val[ind2]-val[ind1]-occ
            use=min(tot,numOperations)
            #print(j,use,occ,ind1,ind2)
            ans=max(ans,use+occ)
            ind=bisect(l,j+2*k)
            occ=d.get(j+k,0)
            tot=val[ind]-val[i]-occ
            use=min(tot,numOperations)
            ans=max(ans,use+occ)
        return ans",1447749739
shukla_akash,shukla_akash,598,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        int n = nums.size();
        unordered_map<int, int> mp; vector<pair<int, int>> vec;
        set<int> points;
        
        for (auto num : nums) {
            vec.push_back({num - k, 1});
            vec.push_back({num + k + 1, -1});
            mp[num]++;
        }
        

        for (auto event : vec) 
            points.insert(event.first);
        

        for (auto pair : mp)
            points.insert(pair.first);
 
        sort(vec.begin(), vec.end());
        
        int idx = 0, spann = 0, ans = 0;
        
        for (auto point : points) {
            while (idx < vec.size() && vec[idx].first <= point) {
                spann = spann + vec[idx].second;
                idx++;
            }

            
            int cnt = 0;
            
            if(mp.count(point) > 0)
                    cnt = mp[point];
            
            int temp = cnt +  min(numOperations, spann - cnt);
            
            ans =  max(ans, temp);
        }
        
        return ans;
    }
};",1447757784
shukla_akash,shukla_akash,598,3626,cpp,"class Solution {
public:

    long long digitProd(int n){

        long long prod = 1;

        while(n > 0){
            int rem = n%10;
            prod *= rem;                
            n/=10;
        }

        return prod;
    }

    int smallestNumber(int n, int t) {

        for(int i = n; true; i++){
            long long dig = digitProd(i);
            if(dig%t == 0){
                    return i;
            }
        }

        return -1;
        
    }
};",1447664843
shukla_akash,shukla_akash,598,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        int n = nums.size();
        unordered_map<int, int> mp; vector<pair<int, int>> vec;
        set<int> points;
        
        for (auto num : nums) {
            vec.push_back({num - k, 1});
            vec.push_back({num + k + 1, -1});
            mp[num]++;
        }
        

        for (auto event : vec) 
            points.insert(event.first);
        

        for (auto pair : mp)
            points.insert(pair.first);
 
        sort(vec.begin(), vec.end());
        
        int idx = 0, spann = 0, ans = 0;
        
        for (auto point : points) {
            while (idx < vec.size() && vec[idx].first <= point) {
                spann = spann + vec[idx].second;
                idx++;
            }

            
            int cnt = 0;
            
            if(mp.count(point) > 0)
                    cnt = mp[point];
            
            int temp = cnt +  min(numOperations, spann - cnt);
            
            ans =  max(ans, temp);
        }
        
        return ans;
    }
};",1447753869
s_j_01,s_j_01,599,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int nop) {

        map<int,int>mp;
        map<int,int>mpc;
        int ans = 0;
        
        for(int i=0;i<nums.size();i++){
            int num = nums[i];
            if(mp.find(num-k) == mp.end()) mp[num-k]=0;
            if(mp.find(num+k+1) == mp.end()) mp[num+k+1]=0;
            if(mpc.find(num) == mpc.end()) mpc[num]=0;
            mp[num-k]++;
            mp[num+k+1]--;
            mpc[nums[i]]++;
            ans = max(ans,mpc[num]);
        }

        int st = mp.begin()->first;
        int en = (prev(mp.end()))->first;
        int freq = 0;
        
        for(int i=st;i<=en;i++){
            if(mp.find(i-1) == mp.end()) mp[i-1]=0;
            mp[i] += mp[i-1];
            if(mp[i]>=freq){
                int f = min(mp[i],mpc[i]+nop);
                if(f > ans){
                    ans = f;
                    freq = f;
                }
            }
        }
        return ans;
    }
};",1447740313
s_j_01,s_j_01,599,3626,cpp,"class Solution {
public:
    int prodofDig(int num){
        int ans = 1;
        while(num>0){
            ans *= num%10;
            num /= 10; 
        }        
        return ans;
    }

    int smallestNumber(int n, int t) {

        while(1){
            int x = prodofDig(n);
            if(x%t == 0) return n;
            n++;
        }
        return n;
    }
};",1447662969
s_j_01,s_j_01,599,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int ops) {

        map<int,int>mp;
        map<int,int>mpc;
        int ans = 0;
        
        for(int i=0;i<nums.size();i++){
            int num = nums[i];
            if(mp.find(num-k) == mp.end()) mp[num-k]=0;
            if(mp.find(num+k+1) == mp.end()) mp[num+k+1]=0;
            if(mpc.find(num) == mpc.end()) mpc[num]=0;
            mp[num-k]++;
            mp[num+k+1]--;
            mpc[nums[i]]++;
            ans = max(ans,mpc[num]);
        }

        int prev = 0;
        for(auto it:mp){
            int num = it.first;
            mp[num] += prev;
            prev=mp[num];
            if(mp[num]>=ans){
                int f = min(mp[num],mpc[num]+ops);
                ans = max(ans,f);
            }
        }

        for(int i=0;i<nums.size();i++){
            auto it = mp.lower_bound(nums[i]);
            if(it!=mp.begin() && it->first!=nums[i]) it--;
            if(it->second>=ans){
                int f = min(it->second,mpc[nums[i]]+ops);
                ans = max(ans,f);
            }
        }
        
        return ans;
    }
};",1447773293
Suryansh Vermon,suryanshvermon,602,3622,cpp,"#pragma GCC target (""sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx"")
#pragma GCC optimize (""O3"", ""unroll-loops"")
#pragma GCC optimize (""-ffloat-store"")

auto init = []() { 
    std::ios_base::sync_with_stdio(false);
    std::cin.tie(0);
    return 0;
} ();

class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        int max_num = *max_element(nums.begin(), nums.end());
        int size = max_num + k + 2;
        vector<int> freq(size, 0);

        int satwik;

        for (int num : nums) {
            freq[num]++;
        }

        satwik ++;

        vector<int> pre(size, 0);
        pre[0] = freq[0];
        for (int i = 1; i < size; i++) {
            pre[i] = pre[i - 1] + freq[i];
        }

        int result = 0;
        for (int x = 0; x < size; x++) {
            if (freq[x] == 0 && numOperations == 0) {
                continue;
            }
            satwik --;

            int left = max(0, x - k);
            int right = min(size - 1, x + k);
            int totalInRange = pre[right] - (left > 0 ? pre[left - 1] : 0);
            int canAdjust = totalInRange - freq[x];
            int total = freq[x] + min(numOperations, canAdjust);
            result = max(result, total);

            satwik++;
        }

        return result;
    }
};

",1447725512
Suryansh Vermon,suryanshvermon,602,3626,cpp,"class Solution {
public:

    int digitSum (int n){
        int sum = 1;
        while(n > 0){
            sum *= (n % 10);
            n /= 10;
        }
        return sum;
    }
    int smallestNumber(int n, int t) {
        while(true){
            int dSum = digitSum(n);
            if(dSum % t == 0) return n;
            n++;
        }
        return 0;
    }
};",1447665039
Suryansh Vermon,suryanshvermon,602,3640,cpp,"#pragma GCC target (""sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx"")
#pragma GCC optimize (""O3"", ""unroll-loops"")
#pragma GCC optimize (""-ffloat-store"")

auto init = []() { 
    std::ios_base::sync_with_stdio(false);
    std::cin.tie(0);
    return 0;
} ();
class Solution {
public:
int maxFrequency(vector<int>& nums, int range, int maxOperations) {
    int n = nums.size();
    map<int, int> numCount;
    vector<pair<int, int>> intervals;

    vector<int>surya;
    int satwik;

    for (int num : nums) {
        numCount[num]++;
        intervals.push_back({num - range, 1});
        intervals.push_back({num + range + 1, -1});
        satwik++;
    }

    set<int> uniquePoints;
    for (auto& interval : intervals) {
        uniquePoints.insert(interval.first);
    }
    for (auto& entry : numCount) {
        uniquePoints.insert(entry.first);
    }

    sort(intervals.begin(), intervals.end());

    satwik--;

    int eventIndex = 0;
    int currentSum = 0;
    int maxFrequency = 0;
    int currentCount = 0;
    int ankit;

    for (int point : uniquePoints) {
        while (eventIndex < intervals.size() && intervals[eventIndex].first <= point) {
            currentSum += intervals[eventIndex].second;
            eventIndex++;
            ankit ++;
        }

        currentCount = numCount.count(point) ? numCount[point] : 0;
        int totalFrequency = currentCount + min(maxOperations, currentSum - currentCount);
        maxFrequency = max(maxFrequency, totalFrequency);
        satwik --;
    }

    return maxFrequency;
}

};",1447750028
Khyati Satija,Khyati_Satija,603,3622,python3,"class Solution:
    def maxFrequency(self, nums, k, numOperations):
        max_val = max(nums)
        max_size = max_val + k + 2
        freq = [0] * max_size

        for num in nums:
            freq[num] += 1

        prefix_sum = [0] * max_size
        prefix_sum[0] = freq[0]
        for i in range(1, max_size):
            prefix_sum[i] = prefix_sum[i - 1] + freq[i]

        max_freq = 0
        for x in range(max_size):
            if freq[x] == 0 and numOperations == 0:
                continue

            left = max(0, x - k)
            right = min(max_size - 1, x + k)
            range_total = prefix_sum[right] - (prefix_sum[left - 1] if left > 0 else 0)
            possible_adjustments = range_total - freq[x]
            total = freq[x] + min(numOperations, possible_adjustments)
            max_freq = max(max_freq, int(total))

        return max_freq
",1447718467
Khyati Satija,Khyati_Satija,603,3626,python3,"class Solution:
    def smallestNumber(self, n: int, t: int) -> int:

        def prod(n):
            p = 1
            while n > 0:
                d = n % 10
                p = p * d
                n = n // 10
            return p
            
        while (prod(n) % t != 0):
            n += 1
        return n
            ",1447678006
Khyati Satija,Khyati_Satija,603,3640,python3,"from collections import defaultdict
class Solution:
    def maxFrequency(self, nums: List[int], rng: int, ops: int) -> int:
        freq = defaultdict(int)
        events = []
        
        for num in nums:
            freq[num] += 1
            events.append((num - rng, 1))
            events.append((num + rng + 1, -1))
        
        points = set(event[0] for event in events).union(freq.keys())
        events.sort()

        event_idx = 0
        overlap = 0
        max_freq = 0
        
        for point in sorted(points):
            while event_idx < len(events) and events[event_idx][0] <= point:
                overlap += events[event_idx][1]
                event_idx += 1
            
            curr_count = freq[point] if point in freq else 0
            possible_freq = curr_count + min(ops, overlap - curr_count)
            max_freq = max(max_freq, possible_freq)

        return max_freq
",1447758206
Harsh Kathiriya,__best0p,606,3622,cpp,"class Solution {
public:
    #define pii pair<int,int>
    int maxFrequency(vector<int>& v, int k, int op) {
        sort(v.begin(),v.end());
        int n=v.size();
        vector<pii>pre;
        unordered_map<int,int>mp;
        set<int>st;
        for(int i=0;i<n;i++){
            mp[v[i]]++;
            pre.push_back({v[i]-k,1});
            pre.push_back({v[i]+k+1,-1});
            st.insert(v[i]-k);
            st.insert(v[i]);
            st.insert(v[i]+k+1);
        }
        // for(auto it:st) cout<<it<<"" "";
        // cout<<endl;
        sort(pre.begin(),pre.end());
        // for(auto it:pre) cout<<it.first<<"" ""<<it.second<<endl;
        // cout<<endl;
        int i=0,ans=0;
        int curWindow=0;
        for(auto &it:st){
            while(i<pre.size() && pre[i].first<=it){
                curWindow+=pre[i].second;
                i++;
            }
            int temp=mp[it]+min(op,curWindow-mp[it]);
            ans=max(ans,temp);
        }
        return ans;
    }
};",1447764919
Harsh Kathiriya,__best0p,606,3626,cpp,"class Solution {
public:
    int smallestNumber(int n, int t) {
        while(1){
            string s=to_string(n);
            int prod=1;
            for(int i=0;i<s.length();i++){
                prod*=(s[i]-'0');
            }
            if((prod%t)==0) return n;
            n++;
        }
        return -1;
    }
};",1447654787
Harsh Kathiriya,__best0p,606,3640,cpp,"class Solution {
public:
 #define pii pair<int,int>
    int maxFrequency(vector<int>& v, int k, int op) {
        sort(v.begin(),v.end());
        int n=v.size();
        vector<pii>pre;
        unordered_map<int,int>mp;
        set<int>st;
        for(int i=0;i<n;i++){
            mp[v[i]]++;
            pre.push_back({v[i]-k,1});
            pre.push_back({v[i]+k+1,-1});
            st.insert(v[i]-k);
            st.insert(v[i]);
            st.insert(v[i]+k+1);
        }
        // for(auto it:st) cout<<it<<"" "";
        // cout<<endl;
        sort(pre.begin(),pre.end());
        // for(auto it:pre) cout<<it.first<<"" ""<<it.second<<endl;
        // cout<<endl;
        int i=0,ans=0;
        int curWindow=0;
        for(auto &it:st){
            while(i<pre.size() && pre[i].first<=it){
                curWindow+=pre[i].second;
                i++;
            }
            int temp=mp[it]+min(op,curWindow-mp[it]);
            ans=max(ans,temp);
        }
        return ans;
    }
};",1447766061
Ajay,mr_ajay123,608,3622,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        nums.sort()
        prefix_sum = []
        s = 0
        c = defaultdict(int)
        for i in nums:
            s+=i
            c[i] +=1 
            prefix_sum.append(s)
            
        def fun(num):
            left = bisect_left(nums, num-k)
            right = bisect_left(nums, num+k+1)
            options = right-left-c[num]
            # print(left, right, options)
            return min(options, numOperations) + c[num]

        # def fun2(idx):
        #     left = bisect_left(nums, nums[idx]-2*k)

        ans =0
        for i in range(0,max(nums)+1):
            ans = max(ans, fun(i))
        return ans",1447712139
Ajay,mr_ajay123,608,3626,python3,"class Solution:
    def smallestNumber(self, n: int, t: int) -> int:
        def getProduct(num):
            ret = 1
            for i in str(num):
                ret*=int(i)
            return ret
        while getProduct(n)%t!=0:
            n+=1
        return n",1447653952
Ajay,mr_ajay123,608,3640,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        nums.sort()
        prefix_sum = []
        s = 0
        c = defaultdict(int)
        for i in nums:
            s+=i
            c[i] +=1 
            prefix_sum.append(s)
            
        def fun(num):
            left = bisect_left(nums, num-k)
            right = bisect_left(nums, num+k+1)
            options = right-left-c[num]
            # print(num, (left, num-k), (right, num+k+1), options)
            return min(options, numOperations) + c[num]

        # def fun2(idx):
        #     left = bisect_left(nums, nums[idx]-2*k)

        ans = fun(nums[-1])
        for i in range(len(nums)):
            idx = bisect_left(nums, nums[i]-2*k)
            s = prefix_sum[i]
            if idx>0: s-=prefix_sum[idx-1]
            size = i-idx+1    
            option1 = nums[idx]+k
            option2 = nums[i]
            # print(s,size,idx)
            ans = max(ans, fun(option1), fun(option2))
        return ans",1447750373
anirudhgupta1441,anirudhgupta1441,609,3622,cpp,"class Solution {
public:

int maxFrequency(vector<int>& nums, int k, int numOperations) 
{
        
    map<int, int> freq;
    vector<pair<int, int>> events;
    set<int> points;
        
        // Build frequency map and event list
    for (int num : nums) 
    {
        freq[num]++;
        events.push_back({num - k, 1});
        events.push_back({num + k + 1, -1});
        points.insert(num - k);
        points.insert(num + k - 1);
         points.insert(num);
    }
        
    sort(events.begin(), events.end());

        int idx = 0;
        int current_overlap = 0;
        int max_freq = 0;
        int actual_count = 0;
        
        // Traverse each point
        for (int t : points) {
            // Process events up to current point t
            while (idx < events.size() && events[idx].first <= t) {
                current_overlap += events[idx].second;
                idx++;
            }
            
            actual_count = freq.count(t) ? freq[t] : 0;
            int possible_freq = actual_count + min(numOperations, current_overlap - actual_count);
            max_freq = max(max_freq, possible_freq);
        }

        return max_freq;
    }
};",1447760905
anirudhgupta1441,anirudhgupta1441,609,3626,cpp,"class Solution {
public:


int smallestNumber(int n, int t) 
{
    while(true)
    {
        long long pro = 1;
        long long temp = n;
        while(temp != 0)
        {
            pro *= (temp % 10);
            temp /= 10;
        }
        if(pro % t == 0)
        {
            return n;
        }
        n++;
    }
    return -1;   
}


};",1447660747
anirudhgupta1441,anirudhgupta1441,609,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) 
{
        
    map<int, int> freq;
    vector<pair<int, int>> events;
    set<int> points;
        
        // Build frequency map and event list
    for (int num : nums) 
    {
        freq[num]++;
        events.push_back({num - k, 1});
        events.push_back({num + k + 1, -1});
        points.insert(num - k);
        points.insert(num + k - 1);
         points.insert(num);
    }
        
    sort(events.begin(), events.end());

        int idx = 0;
        int current_overlap = 0;
        int max_freq = 0;
        int actual_count = 0;
        
        // Traverse each point
        for (int t : points) {
            // Process events up to current point t
            while (idx < events.size() && events[idx].first <= t) {
                current_overlap += events[idx].second;
                idx++;
            }
            
            actual_count = freq.count(t) ? freq[t] : 0;
            int possible_freq = actual_count + min(numOperations, current_overlap - actual_count);
            max_freq = max(max_freq, possible_freq);
        }

        return max_freq;
    }
};",1447766538
Ash Ketchum,user8787Y,612,3622,python3,"# from collections import defaultdict
class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        n = len(nums)
        nums.sort()
        cnt = defaultdict(int)
        for num in nums:
            cnt[num] += 1
        ans = max(cnt.values())
        N = 10**5+1
        for i in nums:
            l, r = i-k, i+k
            lind = bisect_left(nums, l)
            rind = bisect_right(nums, r)
            poss = rind-lind
            reqd = poss-cnt[i]
            if reqd <= numOperations:
                ans = max(ans, poss)
            else:
                ans = max(ans, poss-(reqd-numOperations))
            nl, nr = l-k, l+k
            lind = bisect_left(nums, nl)
            rind = bisect_right(nums, nr)
            poss = rind-lind
            reqd = poss-cnt[l]
            if reqd <= numOperations:
                ans = max(ans, poss)
            else:
                ans = max(ans, poss-(reqd-numOperations))
            nl, nr = r-k, r+k
            lind = bisect_left(nums, nl)
            rind = bisect_right(nums, nr)
            poss = rind-lind
            reqd = poss-cnt[r]
            if reqd <= numOperations:
                ans = max(ans, poss)
            else:
                ans = max(ans, poss-(reqd-numOperations))
        return ans",1447758289
Ash Ketchum,user8787Y,612,3626,python3,"class Solution:
    def smallestNumber(self, n: int, t: int) -> int:
        
        def prodDigs(n, t):
            ans = 1
            while n:
                ans *= n%10
                n //= 10
            return ans % t == 0
        while True:
            if prodDigs(n, t):
                return n
            n += 1
        ",1447653497
Ash Ketchum,user8787Y,612,3640,python3,"# from collections import defaultdict
class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        n = len(nums)
        nums.sort()
        cnt = defaultdict(int)
        for num in nums:
            cnt[num] += 1
        ans = max(cnt.values())
        N = 10**5+1
        for i in nums:
            l, r = i-k, i+k
            lind = bisect_left(nums, l)
            rind = bisect_right(nums, r)
            poss = rind-lind
            reqd = poss-cnt[i]
            if reqd <= numOperations:
                ans = max(ans, poss)
            else:
                ans = max(ans, poss-(reqd-numOperations))
            nl, nr = l-k, l+k
            lind = bisect_left(nums, nl)
            rind = bisect_right(nums, nr)
            poss = rind-lind
            reqd = poss-cnt[l]
            if reqd <= numOperations:
                ans = max(ans, poss)
            else:
                ans = max(ans, poss-(reqd-numOperations))
            nl, nr = r-k, r+k
            lind = bisect_left(nums, nl)
            rind = bisect_right(nums, nr)
            poss = rind-lind
            reqd = poss-cnt[r]
            if reqd <= numOperations:
                ans = max(ans, poss)
            else:
                ans = max(ans, poss-(reqd-numOperations))
        return ans",1447758895
dhakad_239,dhakad_239,613,3622,cpp,"class Solution {
public:

    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        int i,j;
        int n=nums.size();
        int ans=0;
        map<int,int>mpp;
        sort(nums.begin(),nums.end());
        for(i=0;i<n;i++){
            mpp[nums[i]]++;
            ans=max(ans,mpp[nums[i]]);
        }
        vector<int>d;
        for(auto it:mpp){
            d.push_back(it.first);
            }
        int f=d.size();
        int p[f],s[f];
        queue<int>q;
        for(i=0;i<f;i++){
            while(!q.empty()&&q.front()+k<d[i]){
                q.pop();
            }
            p[i]=q.size();
            for(j=0;j<mpp[d[i]];j++){
            q.push(d[i]);
            }
        }
        while(!q.empty()){
            q.pop();
        }
        for(i=f-1;i>=0;i--){
            while(!q.empty()&&q.front()-k>d[i]){
                q.pop();
            }
            s[i]=q.size();
            
           for(j=0;j<mpp[d[i]];j++){
            q.push(d[i]);
            }
        }
        for(i=0;i<f;i++){
            ans=max(ans,min(numOperations,p[i]+s[i])+mpp[d[i]]);
        }
        while(!q.empty()){
            q.pop();
        }
         for(i=0;i<n;i++){
             while(!q.empty()&&q.front()+k<(nums[i]-k)){
                 q.pop();
             }
             q.push(nums[i]);
             ans=max(ans,min(numOperations,(int)q.size()));
         }
        return ans;
    }
};",1447757775
dhakad_239,dhakad_239,613,3626,cpp,"class Solution {
public:
    int smallestNumber(int n, int t) {
        int i,j;
        int ans;
        while(1){
               int d=n;
            int cur=1;
              while(d){
                  cur=cur*(d%10);
                  d=d/10;
              }
            if(cur%t==0){
                ans=n;
                break;
            }
            n++;
        }
        return ans;
    }
};",1447658515
dhakad_239,dhakad_239,613,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
         int i,j;
        int n=nums.size();
        int ans=0;
        map<int,int>mpp;
        sort(nums.begin(),nums.end());
        for(i=0;i<n;i++){
            mpp[nums[i]]++;
            ans=max(ans,mpp[nums[i]]);
        }
        vector<int>d;
        for(auto it:mpp){
            d.push_back(it.first);
            }
        int f=d.size();
        int p[f],s[f];
        queue<int>q;
        for(i=0;i<f;i++){
            while(!q.empty()&&q.front()+k<d[i]){
                q.pop();
            }
            p[i]=q.size();
            for(j=0;j<mpp[d[i]];j++){
            q.push(d[i]);
            }
        }
        while(!q.empty()){
            q.pop();
        }
        for(i=f-1;i>=0;i--){
            while(!q.empty()&&q.front()-k>d[i]){
                q.pop();
            }
            s[i]=q.size();
            
           for(j=0;j<mpp[d[i]];j++){
            q.push(d[i]);
            }
        }
        for(i=0;i<f;i++){
            ans=max(ans,min(numOperations,p[i]+s[i])+mpp[d[i]]);
        }
        while(!q.empty()){
            q.pop();
        }
         for(i=0;i<n;i++){
             while(!q.empty()&&q.front()+k<(nums[i]-k)){
                 q.pop();
             }
             q.push(nums[i]);
             ans=max(ans,min(numOperations,(int)q.size()));
         }
        return ans;
    }
};",1447758936
pilmo,pilmo,614,3622,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        nums.sort()
        i = 0
        j = 0
        maximum = 1
        while i < len(nums):
            while j+1 < len(nums) and nums[j+1] - nums[i] <= 2 * k:
                j += 1
            maximum = max(maximum, min(j - i + 1, numOperations))
            i += 1
        i = 0
        j = 0
        m = 0
        while j < len(nums):
            while nums[j] - nums[i] > k:
                i += 1
            j0 = j
            while j0+1 < len(nums) and nums[j0+1] == nums[j0]:
                j0 += 1
            while m+1 < len(nums) and nums[m+1] - nums[j] <= k:
                m += 1
            maximum = max(maximum, min(m - i -j0 + j, numOperations) + j0 - j + 1)
            j = j0 + 1
        return maximum",1447764656
pilmo,pilmo,614,3626,python3,"class Solution:
    def smallestNumber(self, n: int, t: int) -> int:
        curr = n
        while True:
            prod = 1
            num = curr
            while num > 0:
                prod *= num % 10
                num //= 10
            if prod % t == 0:
                return curr
            curr += 1",1447685416
pilmo,pilmo,614,3640,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        nums.sort()
        i = 0
        j = 0
        maximum = 1
        while i < len(nums):
            while j+1 < len(nums) and nums[j+1] - nums[i] <= 2 * k:
                j += 1
            maximum = max(maximum, min(j - i + 1, numOperations))
            i += 1
        i = 0
        j = 0
        m = 0
        while j < len(nums):
            while nums[j] - nums[i] > k:
                i += 1
            j0 = j
            while j0+1 < len(nums) and nums[j0+1] == nums[j0]:
                j0 += 1
            while m+1 < len(nums) and nums[m+1] - nums[j] <= k:
                m += 1
            maximum = max(maximum, min(m - i -j0 + j, numOperations) + j0 - j + 1)
            j = j0 + 1
        return maximum",1447766795
Literate Goggles,literate_goggles,615,3622,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, num_operations: int) -> int:
        nums = sorted(nums)
        n = len(nums)
        freq = 0
        cnt = Counter(nums)
        for x in range(nums[0], nums[-1] + 1):
            l = bisect.bisect_left(nums, x - k)
            r = bisect.bisect_right(nums, x + k)
            freq = max(freq, min(r - l - cnt[x], num_operations) + cnt[x])
        return freq",1447712919
Literate Goggles,literate_goggles,615,3626,python3,"class Solution:
    def smallestNumber(self, n: int, t: int) -> int:
        x = n
        while True:
            digits = list(map(int, str(x)))
            prod = 1
            for d in digits:
                prod *= d
            if prod % t == 0:
                return x
            x += 1

        return -1            ",1447658077
Literate Goggles,literate_goggles,615,3640,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, num_operations: int) -> int:
        nums = sorted(nums)
        n = len(nums)
        freq = 0
        cnt = Counter(nums)
        def f(x):
            l = bisect.bisect_left(nums, x - k)
            r = bisect.bisect_right(nums, x + k)
            return min(r - l - cnt[x], num_operations) + cnt[x]
        
        for i in range(n):
            freq = max(freq, f(nums[i]))
            if i + 1 < n:
                x1 = floor((nums[i] + nums[i + 1]) / 2)
                x2 = ceil((nums[i] + nums[i + 1]) / 2)
                x3 = nums[i] + k
                freq = max(freq, f(x1), f(x2), f(x3))
        return freq",1447751432
Sachin Gangwar,gangwar108,616,3622,java,"class Solution {
    // int lb(int[] nums,int num){
    //     int left = 0;
    //     int right = nums.length-1;
    //     int ind=-1;
    //     while(left<=right){
    //         int mid = (left+right)/2;

    //         if(nums[mid]>=num){
    //             ind = mid;
    //             right = mid-1;
    //         }else{
    //             left = mid+1;
    //         }
    //     }
    //     return ind;
    // }
    // int ub(int[] nums,int num){
    //     int left = 0;
    //     int right = nums.length-1;
    //     int ind=-1;
    //     while(left<=right){
    //         int mid = (left+right)/2;

    //         if(nums[mid]<=num){
    //             ind = mid;
    //             left = mid+1;
    //         }else{
    //             right = mid-1;
    //         }
    //     }
    //     return ind;
    // }
    public int maxFrequency(int[] nums, int k, int numOperations) {
        int n = nums.length;
        int m = 100001;
        int[] arr = new int[m];
        int[] pre = new int[m];
        for(int num:nums) arr[num]++;
        for(int i=1;i<m;i++){
            pre[i]=pre[i-1]+arr[i];
        }
        int ans = 1;

        for(int i=0;i<m;i++){
            int l = i-k;
            int r = Math.min(m-1,i+k);
            int cnt = pre[r];
            if(l>0){
                cnt-=pre[l-1];
            }
            ans = Math.max(ans,arr[i]+ Math.min(numOperations,cnt-arr[i]));
        }
        return ans;
    }
}",1447733262
Sachin Gangwar,gangwar108,616,3626,java,"class Solution {
    boolean is(int num,int t){
        int p = 1;
        while(num>0){
            p = p*(num%10);
            num/=10;
        }
        if(p%t==0) return true;
        return false;
    }
    public int smallestNumber(int n, int t) {
        while(n<100){
            if(is(n,t)) return n;
            n++;
        }
        return n;
    }
}",1447667693
Sachin Gangwar,gangwar108,616,3640,java,"class Solution {
    int lb(int[] nums,int num){
        int left = 0;
        int right = nums.length-1;
        int ind=-1;
        while(left<=right){
            int mid = (left+right)/2;

            if(nums[mid]>=num){
                ind = mid;
                right = mid-1;
            }else{
                left = mid+1;
            }
        }
        return ind;
    }
    int ub(int[] nums,int num){
        int left = 0;
        int right = nums.length-1;
        int ind=-1;
        while(left<=right){
            int mid = (left+right)/2;

            if(nums[mid]<=num){
                ind = mid;
                left = mid+1;
            }else{
                right = mid-1;
            }
        }
        return ind;
    }
    int solve(int[] nums, int k, int op){
        int n = nums.length;

        int ans = 1;
        int occ = 1;
        int i=1;
        int j=0;

        while(i<n){
            int num = nums[i]-k;
            int last = nums[j]+k;

            if(last<num){
                occ--;
                j++;
            }else{
                occ++;
                i++;
            }
            ans = Math.max(ans,Math.min(occ,op));
        }
        return ans;
    }
    public int maxFrequency(int[] nums, int k, int numOperations) {
        int n = nums.length;

        Arrays.sort(nums);

        int ans = 1;

        for(int i=0;i<n;i++){
            int l = lb(nums,nums[i]-k);
            int u = ub(nums,nums[i]+k);
            int ll = lb(nums,nums[i]);
            int uu = ub(nums,nums[i]);

            int mx = uu-ll+1;

            mx +=Math.min(numOperations,u-l+1-mx);
            ans = Math.max(ans,mx);
        }

        
        return Math.max(ans,solve(nums,k,numOperations));
    }
}",1447759462
rushikoul,rushikoul,617,3622,java,"class Solution {
    public int maxFrequency(int[] nums, int k, int numOperations) {
        Arrays.sort(nums);
        int n = nums.length;
        int max = 0;
        Map<Integer, Integer> map = new HashMap();
        for (int num : nums) {
            map.put(num, map.getOrDefault(num, 0) + 1);
        }
        for (int i = 1; i <= (int)(1e5); i++) {
            int L = i - k;
            int R = i + k;
            int cnt = countInRange(nums, n, L, R);
            cnt -= map.getOrDefault(i, 0);
            max = Math.max(max, map.getOrDefault(i, 0) + Math.min(cnt, numOperations));
        }
        return max;
    }

    private int countInRange(int arr[], int n, int x, int y)
    {
        int count = 0;
        count = upperIndex(arr, n, y) - lowerIndex(arr, n, x) + 1;
        return count;
    }
    
    private int lowerIndex(int arr[], int n, int x)
    {
        int l = 0, h = n - 1;
        while (l <= h) {
            int mid = (l + h) / 2;
            if (arr[mid] >= x)
                h = mid - 1;
            else
                l = mid + 1;
        }
        return l;
    }
 
    private int upperIndex(int arr[], int n, int y)
    {
        int l = 0, h = n - 1;
        while (l <= h) {
            int mid = (l + h) / 2;
            if (arr[mid] <= y)
                l = mid + 1;
            else
                h = mid - 1;
        }
        return h;
    }
}",1447730931
rushikoul,rushikoul,617,3626,java,"class Solution {
    public int smallestNumber(int n, int t) {
        for (int i = n; i <= n + 10000; i++) {
            int p = 1, x = i;
            while (x > 0) {
                p *= (x % 10);
                x /= 10;
            }
            if ((p % t) == 0) return i;
        }
        return -1;
    }
}",1447654541
rushikoul,rushikoul,617,3640,java,"class Solution {
    public int maxFrequency(int[] nums, int k, int numOperations) {
        Arrays.sort(nums);
        int n = nums.length;
        int max = 0;
        Map<Integer, Integer> map = new HashMap();
        TreeMap<Integer, Integer> tm = new TreeMap();
        for (int num : nums) {
            map.put(num, map.getOrDefault(num, 0) + 1);
        }
        for (int i = 0; i < n; i++) {
            int L = nums[i] - k;
            int R = nums[i] + k;
            tm.put(L, tm.getOrDefault(L, 0) + 1);
            tm.put(R + 1, tm.getOrDefault(R + 1, 0) - 1);
            int cnt = countInRange(nums, n, L, R);
            cnt -= map.get(nums[i]);
            max = Math.max(max, map.get(nums[i]) + Math.min(cnt, numOperations));
        }
        int sum = 0;
        for (var val : tm.values()) {
            sum += val;
            max = Math.max(max, Math.min(sum, numOperations));
        }
        return max;
    }

    private int countInRange(int arr[], int n, int x, int y)
    {
        int count = 0;
        count = upperIndex(arr, n, y) - lowerIndex(arr, n, x) + 1;
        return count;
    }
    
    private int lowerIndex(int arr[], int n, int x)
    {
        int l = 0, h = n - 1;
        while (l <= h) {
            int mid = (l + h) / 2;
            if (arr[mid] >= x)
                h = mid - 1;
            else
                l = mid + 1;
        }
        return l;
    }
 
    private int upperIndex(int arr[], int n, int y)
    {
        int l = 0, h = n - 1;
        while (l <= h) {
            int mid = (l + h) / 2;
            if (arr[mid] <= y)
                l = mid + 1;
            else
                h = mid - 1;
        }
        return h;
    }
}",1447759573
Ibrahimpet Abhilesh,abhilesh14984,618,3622,python3,"class Solution:
    def maxFrequency(self, nums, adjustment_range, max_operations):
        max_value = max(nums)
        size = max_value + adjustment_range + 2
        frequency = [0] * size

        for num in nums:
            frequency[num] += 1

        prefix_sum = [0] * size
        prefix_sum[0] = frequency[0]
        for i in range(1, size):
            prefix_sum[i] = prefix_sum[i - 1] + frequency[i]

        max_freq = 0
        for x in range(size):
            if frequency[x] == 0 and max_operations == 0:
                continue

            left_bound = max(0, x - adjustment_range)
            right_bound = min(size - 1, x + adjustment_range)
            range_total = prefix_sum[right_bound] - (prefix_sum[left_bound - 1] if left_bound > 0 else 0)
            possible_adjustment = range_total - frequency[x]
            current_total = frequency[x] + min(max_operations, possible_adjustment)
            max_freq = max(max_freq, int(current_total))

        return max_freq
",1447752897
Ibrahimpet Abhilesh,abhilesh14984,618,3626,python3,"class Solution:
    def smallestNumber(self, n: int, t: int) -> int:
        while True:
            product=1
            for digit in str(n):
                product *= int(digit)
            if product %t==0:
                return n
            n+=1",1447675561
Ibrahimpet Abhilesh,abhilesh14984,618,3640,python3,"from collections import defaultdict

class Solution:
    def maxFrequency(self, nums, adjustment_range, max_operations):
        frequency_count = defaultdict(int)
        events = []

        for number in nums:
            frequency_count[number] += 1
            events.append((number - adjustment_range, 1))
            events.append((number + adjustment_range + 1, -1))

        unique_points = set()
        for event in events:
            unique_points.add(event[0])
        for point in frequency_count:
            unique_points.add(point)

        events.sort()

        event_index = 0
        current_effect = 0
        max_frequency = 0

        for point in sorted(unique_points):
            while event_index < len(events) and events[event_index][0] <= point:
                current_effect += events[event_index][1]
                event_index += 1

            current_count = frequency_count[point] if point in frequency_count else 0
            achievable_frequency = current_count + min(max_operations, current_effect - current_count)
            max_frequency = max(max_frequency, achievable_frequency)

        return max_frequency
",1447759681
Apoorv Agarwal,apoorvsetember17,619,3622,cpp,"class Solution {
public:
    int binarySearch(vector<int> &numbers, int elementToSearch) {
        int low = 0; 
        int high = numbers.size()-1;
        int mid = (low+high)/2;
        int temp = -1;
        while(low <= high) {
            mid = (low+high)/2;
            if(numbers[mid] >= elementToSearch) {
                high = mid - 1;
                temp = mid;
            }
            else {
                low = mid + 1;
            }
        }
        if(temp != -1) {
            return numbers.size() - temp;
        }
        return temp;
    }
    int binarySearchForLower(vector<int> &numbers, int elementToSearch, 
        int low1, int high1) {
        int low = low1; 
        int high = high1;
        int mid = (low+high)/2;
        int temp = -1;
        int initialLow = low1; int initialHigh = high1;
        while(low <= high) {
            mid = (low+high)/2;
            
            if(numbers[mid] <= elementToSearch) {
                low = mid + 1;
                temp = mid;
            }
            else {
                high = mid - 1;
            }
        }
        if(temp != -1) {
            return temp - initialLow + 1;
        }
        return temp;
    }
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        int n = nums.size();
        vector<int>lowerElements;
        vector<int>upperElements;
        map<int,int>originalFrequency;
        sort(nums.begin(), nums.end());
        for(int i = 0; i<n; i++) {
            originalFrequency[nums[i]]++;
            lowerElements.push_back(nums[i] - k);
            upperElements.push_back(nums[i] + k);
        }
        int ans = -1;
        int currFreq = 0;
        for(int i = -100000; i <= 200000; i++) {
            int greaterElements = binarySearch(upperElements, i);
            if(greaterElements == -1) {
                continue;
            }
            int overlappingElements = binarySearchForLower(lowerElements,
             i, n - greaterElements, n-1);
            if(overlappingElements != -1) {
                if(overlappingElements > numOperations) {
                    int freq = min(overlappingElements, numOperations + originalFrequency[i]);
                    //cout<<originalFrequency[15]<<endl;
                    if(currFreq < freq) {
                        ans = i;
                        currFreq = freq;
                    }
                }
                else {
                    //cout<<originalFrequency[15]<<endl;
                    int freq = overlappingElements;
                    if(currFreq < freq) {
                        ans = i;
                        currFreq = freq;
                    }
                }
            }
        }
        return currFreq;
    }
};",1447756059
Apoorv Agarwal,apoorvsetember17,619,3626,cpp,"class Solution {
public:
    int getSumOfDigits(int n) {
        int sum = 1;
        while(n > 0) {
            sum *= n%10;
            n/=10;
        }
        return sum;
    }
    int smallestNumber(int n, int t) {
        for(int i = n; ; i++) {
            int temp = getSumOfDigits(i);
            if(temp % t == 0) {
                return i;
            }
        }
    }
};",1447659845
Apoorv Agarwal,apoorvsetember17,619,3640,cpp,"class Solution {
public:
    int binarySearch(vector<int> &numbers, int elementToSearch) {
        int low = 0; 
        int high = numbers.size()-1;
        int mid = (low+high)/2;
        int temp = -1;
        while(low <= high) {
            mid = (low+high)/2;
            if(numbers[mid] >= elementToSearch) {
                high = mid - 1;
                temp = mid;
            }
            else {
                low = mid + 1;
            }
        }
        if(temp != -1) {
            return numbers.size() - temp;
        }
        return temp;
    }
    int binarySearchForLower(vector<int> &numbers, int elementToSearch, 
        int low1, int high1) {
        int low = low1; 
        int high = high1;
        int mid = (low+high)/2;
        int temp = -1;
        int initialLow = low1; int initialHigh = high1;
        while(low <= high) {
            mid = (low+high)/2;
            
            if(numbers[mid] <= elementToSearch) {
                low = mid + 1;
                temp = mid;
            }
            else {
                high = mid - 1;
            }
        }
        if(temp != -1) {
            return temp - initialLow + 1;
        }
        return temp;
    }
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        int n = nums.size();
        vector<int>lowerElements;
        vector<int>upperElements;
        map<int,int>originalFrequency;
        sort(nums.begin(), nums.end());
        for(int i = 0; i<n; i++) {
            originalFrequency[nums[i]]++;
            lowerElements.push_back(nums[i] - k);
            upperElements.push_back(nums[i] + k);
        }
        int ans = -1;
        int currFreq = 0;
        for(int j = 0; j < n; j++) {
            int i = lowerElements[j];
            int greaterElements = binarySearch(upperElements, i);
            if(greaterElements == -1) {
                continue;
            }
            int overlappingElements = binarySearchForLower(lowerElements,
             i, n - greaterElements, n-1);
            if(overlappingElements != -1) {
                if(overlappingElements > numOperations) {
                    int freq = min(overlappingElements, numOperations + originalFrequency[i]);
                    //cout<<originalFrequency[15]<<endl;
                    if(currFreq < freq) {
                        ans = i;
                        currFreq = freq;
                    }
                }
                else {
                    //cout<<originalFrequency[15]<<endl;
                    int freq = overlappingElements;
                    if(currFreq < freq) {
                        ans = i;
                        currFreq = freq;
                    }
                }
            }
        }
        for(int j = 0; j < n; j++) {
            int i = upperElements[j];
            int greaterElements = binarySearch(upperElements, i);
            if(greaterElements == -1) {
                continue;
            }
            int overlappingElements = binarySearchForLower(lowerElements,
             i, n - greaterElements, n-1);
            if(overlappingElements != -1) {
                if(overlappingElements > numOperations) {
                    int freq = min(overlappingElements, numOperations + originalFrequency[i]);
                    //cout<<originalFrequency[15]<<endl;
                    if(currFreq < freq) {
                        ans = i;
                        currFreq = freq;
                    }
                }
                else {
                    //cout<<originalFrequency[15]<<endl;
                    int freq = overlappingElements;
                    if(currFreq < freq) {
                        ans = i;
                        currFreq = freq;
                    }
                }
            }
        }
        for(int j = 0; j < n; j++) {
            int i = nums[j];
            int greaterElements = binarySearch(upperElements, i);
            if(greaterElements == -1) {
                continue;
            }
            int overlappingElements = binarySearchForLower(lowerElements,
             i, n - greaterElements, n-1);
            if(overlappingElements != -1) {
                if(overlappingElements > numOperations) {
                    int freq = min(overlappingElements, numOperations + originalFrequency[i]);
                    //cout<<originalFrequency[15]<<endl;
                    if(currFreq < freq) {
                        ans = i;
                        currFreq = freq;
                    }
                }
                else {
                    //cout<<originalFrequency[15]<<endl;
                    int freq = overlappingElements;
                    if(currFreq < freq) {
                        ans = i;
                        currFreq = freq;
                    }
                }
            }
        }
        return currFreq;
    }
};",1447767679
hs_2003,hs_2003,620,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& a, int b, int c) {
        int af[100001] = {0};
        for (int i = 0; i < a.size(); i++) {
            af[i]++;
        }
        int pf[100001]={0};
        pf[0] = af[0];
        for (int i = 1; i <= 100000; i++) {
            pf[i] = pf[i - 1] + af[i];
        }
        int d = *max_element(a.begin(), a.end());
        int e = d + b + 2;
        vector<int> f(e, 0);
        for (int g : a) f[g]++;
        vector<int> h(e, 0);
        computePrefixSum(f, h, e);
        return getMaxFreq(f, h, b, c, e);
    }

private:
    void computePrefixSum(vector<int>& f, vector<int>& h, int e) {
        h[0] = f[0];
        for (int i = 1; i < e; i++) h[i] = h[i - 1] + f[i];
    }

    int getMaxFreq(vector<int>& f, vector<int>& h, int b, int c, int e) {
        int j = 0;
        for (int x = 0; x < e; x++) {
            if (f[x] == 0 && c == 0) continue;
            int l = max(0, x - b);
            int r = min(e - 1, x + b);
            int t = h[r] - (l > 0 ? h[l - 1] : 0);
            int u = t - f[x];
            int v = f[x] + min(c, u);
            j = max(j, v);
        }
        return j;
    }
};
",1447761026
hs_2003,hs_2003,620,3626,cpp,"class Solution{
    int pD(int n){
        int p=1;
        while(n>0){
            p*=(n%10);
            n/=10;
        }
        return p;
    }
    bool c(int n,int t){
        return pD(n)%t==0;
    }
public:
    int smallestNumber(int n,int t){
        while(!c(n,t)){
            n++;
        }
        return n;
    }
};
",1447658556
hs_2003,hs_2003,620,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        int af[100001]={0};
        for(int i=0;i<nums.size();i++)
        {
            af[i]++;
        }
        unordered_map<int, int> c;
        vector<pair<int, int>> e;
        for (int x : nums) {
            c[x]++;
            e.push_back({x - k, 1});
            e.push_back({x + k + 1, -1});
        }
        for(int i=0;i<nums.size();i++)
        {
            af[i]*=2;
        }
        return getMaxFreq(c, e, numOperations);
    }

private:
    int getMaxFreq(unordered_map<int, int>& c, vector<pair<int, int>>& e, int numOperations) {
        set<int> u;
        for (auto& t : e) {
            u.insert(t.first);
        }
        for (auto& p : c) {
            u.insert(p.first);
        }
        sort(e.begin(), e.end());

        int i = 0, co = 0, mf = 0;
        for (int pt : u) {
            while (i < e.size() && e[i].first <= pt) {
                co += e[i].second;
                i++;
            }
            int bc = c.count(pt) ? c[pt] : 0;
            int f = bc + min(numOperations, co - bc);
            mf = max(mf, f);
        }
        return mf;
    }
};
",1447767687
SATYAM KUMAR,satyamjha2804,622,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        int max_num = *max_element(nums.begin(), nums.end());
        int n = max_num + k + 2;
        vector<int> freq(n, 0);
        for (int num : nums)  freq[num] += 1;
        vector<int> pref(n, 0);
        pref[0] = freq[0];
        for (int i = 1; i < n; ++i) {
            pref[i] = pref[i - 1] + freq[i];
        }
        int result = 0;
        for (int x = 0; x < n; ++x) {
            if (freq[x] == 0 && numOperations == 0) {
                continue;
            }
            int left = max(0, x - k);
            int right = min(n - 1, x + k);
            int Range = pref[right] - (left > 0 ? pref[left - 1] : 0);
            int canAdjust = Range - freq[x];
            int total = freq[x] + min(numOperations, canAdjust);
    
            result = max(result, total);
        }
    
        return result;
    }
};",1447733394
SATYAM KUMAR,satyamjha2804,622,3626,cpp,"class Solution {
    int helper(int x){
        int prod=1;
        while(x>0){
            int d=x%10;
            if(d==0) return 0;
            prod*=d;
            x/=10;
        }
        return prod;
    }
public:
    int smallestNumber(int n, int t) {
        while(true){
            if(helper(n)%t==0) return n;
            n++;
        }
    }
};",1447666809
SATYAM KUMAR,satyamjha2804,622,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        if (nums.empty()) return 0;
        int n = nums.size();
        unordered_map<int, int> freq;
        vector<pair<int, int>> arr;

        for (int num : nums) {
            freq[num]++;
            arr.push_back({num - k, +1});
            arr.push_back({num + k + 1, -1});
        }

        set<int> points;
        for (auto& it : arr) {
            points.insert(it.first);
        }
        for (auto& entry : freq) {
            points.insert(entry.first);
        }
        sort(arr.begin(), arr.end());

        int idx = 0;
        int currentOverlap = 0;
        int maxFreq = 0;

        for (int t : points) {
            while (idx < arr.size() && arr[idx].first <= t) {
                currentOverlap += arr[idx].second;
                idx++;
            }

            int actualCount = freq.count(t) ? freq[t] : 0;
            int possibleFreq = actualCount + min(numOperations, max(0, currentOverlap - actualCount));
            maxFreq = max(maxFreq, possibleFreq);
        }

        return maxFreq;
    }
};",1447767869
metaphysicalist,metaphysicalist,623,3622,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        cnt = Counter(nums)
        nums.sort()
        l, r = 0, 0
        ans = 1
        for v in range(min(nums), max(nums)+1):
            while nums[l] < v - k:
                l += 1
            while r + 1 < len(nums) and nums[r+1] <= v + k:
                r += 1
            ans = max(ans, min(numOperations + cnt[v], r - l + 1))    
        return ans
        ",1447695347
metaphysicalist,metaphysicalist,623,3626,python3,"class Solution:
    def smallestNumber(self, n: int, t: int) -> int:
        def check(v):
            p = reduce(operator.__mul__, [int(c) for c in str(v)])
            return p % t == 0
        
        while True:
            if check(n):
                return n
            n += 1",1447668356
metaphysicalist,metaphysicalist,623,3640,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        cnt = Counter(nums)
        nums.sort()
        l, r, c = 0, 0, 0
        ans = 1
        pivot = min(nums)
        limit = max(nums)
        while pivot <= limit and ans < len(nums):
            while nums[l] < pivot - k:
                l += 1
            while r + 1 < len(nums) and nums[r+1] <= pivot + k:
                r += 1
            ans = max(ans, min(numOperations + cnt[pivot], r - l + 1))
            # print(pivot, l, r, r - l + 1)
            r_step = inf
            l_step = inf
            c_step = inf
            if r + 1 < len(nums):
                r_step = max(1, (nums[r+1] - k - pivot))
            if l + 1 < len(nums):
                l_step = max(1, (nums[l+1] + k - pivot))
            while c < len(nums) and nums[c] <= pivot:
                c += 1
            if c < len(nums):
                c_step = max(1, nums[c] - pivot)
            pivot += min(r_step, l_step, c_step)
        return ans
        ",1447760139
Yury.I,user3116J,625,3622,scala,"object Solution {
  trait AB {
    val x: Int
    val n: Int
  }
  case class A(x: Int, n: Int) extends AB
  case class B(x: Int, n: Int) extends AB
  case class C(x: Int, n: Int) extends AB
  def maxFrequency(nums: Array[Int], k: Int, numOperations: Int): Int = {
    val vs = nums.groupMapReduce(n => n)(_ => 1)(_ + _).withDefaultValue(0)
    val bs = vs.toList.map { case (x, n) => (x + k + 1, -n) }
    val as = vs.toList.map { case (x, n) => (x - k, n) }
    val cs = (as ++ bs).groupMapReduce(_._1)(_._2)(_ + _).withDefaultValue(0)
    val xs = (cs.keys ++ vs.keys).toList.sorted
    xs.foldLeft((0, 0)) {
      case ((kk, res), x) =>
        val kkk = kk + cs(x)
        val ress =
          if(vs(x) == 0) kkk.min(numOperations)
          else (kkk).min(numOperations + vs(x))
        (kkk, ress.max(res))
    }._2
  }
}",1447766679
Yury.I,user3116J,625,3626,scala,"object Solution {
  def smallestNumber(n: Int, t: Int): Int = {
    def product(k: Int) =
      k.toString.toString.map(_ - '0').product
    eval(n) {
      case k if (product(k) % t) == 0 => Right(k)
      case k => Left(k + 1)
    }
  }
  @scala.annotation.tailrec
  def eval[A, B](a: A)(f: A => Either[A, B]): B =
   f(a) match {
     case Left(aa) => eval(aa)(f)
     case Right(b) => b
   }
}",1447676509
Yury.I,user3116J,625,3640,scala,"object Solution {
  def maxFrequency(nums: Array[Int], k: Int, numOperations: Int): Int = {
    val vs = nums.groupMapReduce(n => n)(_ => 1)(_ + _).withDefaultValue(0)
    val bs = vs.toList.map { case (x, n) => (x + k + 1, -n) }
    val as = vs.toList.map { case (x, n) => (x - k, n) }
    val cs = (as ++ bs).groupMapReduce(_._1)(_._2)(_ + _).withDefaultValue(0)
    val xs = (cs.keys ++ vs.keys).toList.sorted
    xs.foldLeft((0, 0)) {
      case ((kk, res), x) =>
        val kkk = kk + cs(x)
        val ress =
          if(vs(x) == 0) kkk.min(numOperations)
          else (kkk).min(numOperations + vs(x))
        (kkk, ress.max(res))
    }._2
  }
}",1447768190
ravi kunwar,ravikunwar079,627,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        map<int, int> mp1;
        int n = nums.size();
        int ans = 0;
        for(int i=0; i<n; i++) {
            mp1[nums[i]]++;
        }
        
        map<int, int> mp2;
        
        for(int i=0; i<n; i++) {
            int l = nums[i] - k;
            int u = nums[i] + k + 1;
            mp2[l]++;
            mp2[u]--;
            if(mp2.find(nums[i]) == mp2.end()) {
                mp2[nums[i]] = 0;
            }
            
        }
        
        int sum = 0;
        for(auto &it: mp2) {
            sum += it.second;
            it.second = sum;

        }
        
        for(auto it: mp1) {
            ans = max(ans, it.second);
        }
        
        for(auto it: mp2) {
            int val = it.first;
            int freq = it.second;
            // cout<<val<<"" ""<<freq<<"" ""<<mp1[val]<<"" ""<<ans<<endl;
            
            int ans1 = min(numOperations, freq - mp1[val]) + mp1[val];
            ans = max(ans, ans1);
        }
        
        return ans;
    }
};",1447762879
ravi kunwar,ravikunwar079,627,3626,cpp,"class Solution {
public:
    int product(int val) {
        int pro = 1;
        while(val) {
            int mod = val%10;
            pro = pro*mod;
            val /= 10;
        }
        return pro;
    }
    
    int smallestNumber(int n, int t) {
        while(true) {
            int pro = product(n);
            if(pro%t == 0) {
                return n;
            }
            n++;
        }    
        return n;
    }
};",1447660580
ravi kunwar,ravikunwar079,627,3640,cpp,"typedef long long ll;

class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        map<int, int> mp1;
        int n = nums.size();
        int ans = 0;
        for(int i=0; i<n; i++) {
            mp1[nums[i]]++;
        }
        
        map<int, int> mp2;
        
        for(int i=0; i<n; i++) {
            int l = nums[i] - k;
            int u = nums[i] + k + 1;
            mp2[l]++;
            mp2[u]--;
            if(mp2.find(nums[i]) == mp2.end()) {
                mp2[nums[i]] = 0;
            }
            
        }
        
        int sum = 0;
        for(auto &it: mp2) {
            sum += it.second;
            it.second = sum;

        }
        
        for(auto it: mp1) {
            ans = max(ans, it.second);
        }
        
        for(auto it: mp2) {
            int val = it.first;
            int freq = it.second;
            // cout<<val<<"" ""<<freq<<"" ""<<mp1[val]<<"" ""<<ans<<endl;
            
            int ans1 = min(numOperations, freq - mp1[val]) + mp1[val];
            ans = max(ans, ans1);
        }
        
        return ans;
    }
};
",1447768220
dmullen3,dmullen3,628,3622,java,"class Solution {
    public int maxFrequency(int[] nums, int k, int numOperations) {
        Arrays.sort(nums);
        // Figure out how many dupe nums
        Map<Integer, Integer> freq = new HashMap<>();
        for (int i = 0; i < nums.length; i++) {
            freq.putIfAbsent(nums[i], 0);
            freq.put(nums[i], freq.get(nums[i]) + 1);
        }
        // Two pointer
        int max = 0;
        int leftPointer = 0;
        int rightPointer = 0;
        for (int i = nums[0]; i <= nums[nums.length-1]; i++) {
            int curr = i;
            int fr = freq.containsKey(curr) ? freq.get(i) : 0;
            while (curr - nums[leftPointer] > k) leftPointer++;
            while (rightPointer < nums.length && nums[rightPointer] - curr <= k) rightPointer++;
            int maxNumbersToAdd = Math.max(0, rightPointer - leftPointer - fr);
            max = Math.max(max, fr + Math.min(maxNumbersToAdd, numOperations));
        }
        // Check to see if the difference between any two elements is less than two
        if (max < 2 && numOperations > 1) {
            for (int i = 0; i < nums.length - 1; i++) {
                if (nums[i+1]-nums[i] <= 2*k) return 2;
            }
        }
        return max;
    }
}",1447703963
dmullen3,dmullen3,628,3626,java,"class Solution {
    public int smallestNumber(int n, int t) {
        int smallest = n;
        while (!(getDigitProduct(smallest) % t == 0)) smallest++;
        return smallest;
    }
    public int getDigitProduct(int n) {
        int product = 1;
        while (n > 0) {
            product *= n % 10;
            n /= 10;
        }
        return product;
    }
}",1447664289
dmullen3,dmullen3,628,3640,java,"class Solution {
    public int maxFrequency(int[] nums, int k, int numOperations) {
        Arrays.sort(nums);
        // Figure out how many dupe nums
        Map<Integer, Integer> freq = new HashMap<>();
        for (int i = 0; i < nums.length; i++) {
            freq.putIfAbsent(nums[i], 0);
            freq.put(nums[i], freq.get(nums[i]) + 1);
        }
        // Two pointer
        int max = 0;
        int leftPointer = 0;
        int rightPointer = 0;
        int currPointer = 0; 
        int i = nums[0];
        while(i <= nums[nums.length - 1]) {
            int curr = i;
            int fr = freq.containsKey(curr) ? freq.get(curr) : 0;
            while (currPointer < nums.length && i >= nums[currPointer]) currPointer++;
            while (curr - nums[leftPointer] > k) leftPointer++;
            while (rightPointer < nums.length && nums[rightPointer] - curr <= k) rightPointer++;
            int maxNumbersToAdd = Math.max(0, rightPointer - leftPointer - fr);
            max = Math.max(max, fr + Math.min(maxNumbersToAdd, numOperations));
            if (i == nums[nums.length-1]) break;
            i += Math.min(nums[currPointer] - i, rightPointer < nums.length ? nums[rightPointer] - k - i : nums[nums.length-1] - i);
        }
        return max;
    }
}",1447735947
Ayan Roy,Ayan_Roy,629,3622,cpp,"class Solution {
public:
     int maxFrequency(std::vector<int>& nums, int k, int numOperations) {
        int maxNum = *max_element(nums.begin(), nums.end());
        int size=maxNum + k + 2;
        vector<int>freq(size, 0);

        for (int num :nums) {
            freq[num]++;
        }

        vector<int> pre(size, 0);
        pre[0] = freq[0];
        for (int i = 1; i < size; ++i) {
            pre[i] = pre[i - 1] + freq[i];
        }

        int result = 0;
        for (int x = 0; x < size; ++x) {
            if (freq[x] == 0 && numOperations == 0) {
                continue;
            }

            int left = max(0, x - k);
            int right = min(size - 1, x + k);

            int totalInRange = pre[right] - (left > 0 ? pre[left - 1] : 0);
            int canAdjust = totalInRange - freq[x];
            
            int total = freq[x] +min(numOperations, canAdjust);
            result = max(result, total);
        }

        return result;
    }
};",1447712002
Ayan Roy,Ayan_Roy,629,3626,cpp,"class Solution {
public:
int productDigit(int num){
    int product=1;
    while(num>0){
        int rem=num%10;
        product*=rem;
        num/=10;
        
    }
    return product;
}
    int smallestNumber(int n, int t) {
       for (int i=n;;i++){
           int val=productDigit(i);
           if(val%t==0)return i;
       }
        return -1;
        
        
    }
};",1447659375
Ayan Roy,Ayan_Roy,629,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        int n = nums.size();
        unordered_map<int, int> freq;
        vector<pair<int, int>> events;
       
        for (int num : nums) {
            freq[num]++;
            events.push_back({num - k, +1});
            events.push_back({num + k + 1, -1});
        }
        
        unordered_set<int> point;
        for (const auto& event : events) {
            point.insert(event.first);
        }
        for (const auto& p : freq) {
            point.insert(p.first);
        }
        sort(events.begin(), events.end());
        
        int idx = 0, overlap = 0, max_freq = 0, actual_cnt= 0;
        for (int t : set<int>(point.begin(), point.end())) {
            
            while (idx < events.size() && events[idx].first <= t) {
                overlap += events[idx].second;
                idx++;
            }
            
            actual_cnt = freq.count(t) ? freq[t] : 0;
            int possible_freq = actual_cnt + min(numOperations, overlap - actual_cnt);
            max_freq =max(max_freq, possible_freq);
        }
        
        return max_freq;
    }
};


            ",1447760517
Shreyas Patange,IWhitebird,630,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& numbers, int range, int maxOperations) {
        int n = numbers.size();
        unordered_map<int, int> countMap;
        vector<pair<int, int>> operations;
        for (int number : numbers) {
            countMap[number]++;
            operations.emplace_back(number - range, +1);
            operations.emplace_back(number + range + 1, -1);
        }
        set<int> uniquePoints;
        for (auto& op : operations) uniquePoints.insert(op.first);
        for (auto& entry : countMap) uniquePoints.insert(entry.first);
        sort(operations.begin(), operations.end());
        int eventIndex = 0;
        int currentCount = 0;
        int highestFrequency = 0;
        int existingCount = 0;
        for (int point : uniquePoints) {
            while (eventIndex < operations.size() && operations[eventIndex].first <= point) {
                currentCount += operations[eventIndex].second;
                eventIndex++;
            }
            existingCount = countMap.count(point) ? countMap[point] : 0;
            int potentialFrequency = existingCount + min(maxOperations, currentCount - existingCount);
            highestFrequency = max(highestFrequency, potentialFrequency);
        }
        return highestFrequency;
    }
};",1447736522
Shreyas Patange,IWhitebird,630,3626,cpp,"class Solution {
    int productOfDigits(int x) {
        int product = 1;
        while (x > 0) {
            int digit = x % 10;
            product *= digit;
            x /= 10;
        }
        return product;
    }
    
public:
    int smallestNumber(int n, int t) {
        while (true) {
            int product = this->productOfDigits(n);
            if (product % t == 0) {
                return n;
            }
            n++;
        }
    }
};
",1447653672
Shreyas Patange,IWhitebird,630,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        map<int, int> count;
        vector<pair<int, int>> events;
        for (int num : nums) {
            count[num]++;
            events.push_back({num - k, 1});
            events.push_back({num + k + 1, -1});
        }
        set<int> points;
        for (auto& e : events) points.insert(e.first);
        for (auto& p : count) points.insert(p.first);
        sort(events.begin(), events.end());

        int overlap = 0, maxCount = 0;
        for (int t : points) {

            auto it = lower_bound(events.begin(), events.end(), make_pair(t, INT_MIN));
            for (; it != events.end() && it->first == t; ++it) {
                overlap += it->second;
            }

            int actual = count.count(t) ? count[t] : 0;
            int possible = actual + min(numOperations, overlap - actual);
            maxCount = max(maxCount, possible);
        }
        return maxCount;
    }
};
",1447768316
Sayuyere,Sayuyere,631,3622,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        vals = [0 for i in range(max(nums)+1)]
        for i in nums:
            vals[i] += 1
        for i in range(1,len(vals)):
            vals[i] += vals[i-1]
        def get_sum(l,r):
            l = max(l,0)
            r = min(r,len(vals)-1)
            return vals[r] - (vals[l-1] if l-1>=0 else 0)
        res = 0
        for i in range(len(vals)):
            l = get_sum(i-k,i)
            r = get_sum(i,i+k)
            c = get_sum(i,i)
            g = min(numOperations,l+r-2*c)
            res = max(res,g+c)
        return(res)",1447731090
Sayuyere,Sayuyere,631,3626,python3,"class Solution:
    def smallestNumber(self, n: int, t: int) -> int:
        def f(n):
            x = list(map(int,str(n)))
            res = 1
            for i in x:
                res *= i
            return res%t==0
        while True:
            if f(n):
                return n
            n += 1
        ",1447705953
Sayuyere,Sayuyere,631,3640,python3,"from collections import defaultdict
import bisect

class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        nums.sort()
        tracker = defaultdict(int)
        for i in nums:
            tracker[i] += 1
        res = 0
        for i in range(len(nums)):
            v = nums[i]
            lv = v - k
            rv = v + k
            li = bisect.bisect_left(nums,lv)
            ri = bisect.bisect_right(nums,rv)
            t = min(numOperations,ri-li-tracker[v])+tracker[v]
            res = max(res,t)
        def wrapper(nums):
            prev = 0
            res = 0
            for i in range(len(nums)):
                while prev<len(nums) and nums[i]-nums[prev]>2*k:
                    prev += 1
                res = max(res , min(numOperations,i-prev+1))
                # res = max(res,len(buffer))
            return(res)
        return max(res,wrapper(nums)) ",1447768322
sasasagagaga,sasasagagaga,632,3622,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        nums.sort()
        cnt = collections.Counter(nums)

        # ans = l = r = 0
        ans = 0
        for x in range(nums[-1] + 1):  #  enumerate(nums):
            x - k, x + k
            l = bisect.bisect_left(nums, x - k)
            r = bisect.bisect_right(nums, x + k)
            cur_ans = r - l - cnt[x]
            cur_ans = min(cur_ans, numOperations) + cnt[x]
            ans = max(ans, cur_ans)
            # print(i, x, l, r, cur_ans)
        return ans
",1447716203
sasasagagaga,sasasagagaga,632,3626,python3,"class Solution:
    def smallestNumber(self, n: int, t: int) -> int:
        for x in range(n, n + 1000):
            s = 1
            for ch in str(x):
                s *= int(ch)
            if s % t == 0:
                return x
        return -1",1447657154
sasasagagaga,sasasagagaga,632,3640,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        nums.sort()
        cnt = collections.Counter(nums)

        ans = 0
        for i, x in enumerate(nums):
            l = bisect.bisect_left(nums, x - k)
            r = bisect.bisect_right(nums, x + k)
            cur_ans = r - l - cnt[x]
            cur_ans = min(cur_ans, numOperations) + cnt[x]
            ans = max(ans, cur_ans)
            # print(i, x, l, r, cur_ans)

            l = bisect.bisect_left(nums, x - 2 * k)
            cur_ans = i - l #- cnt[x]
            cur_ans = min(cur_ans, numOperations) #+ cnt[x]
            ans = max(ans, cur_ans)
            # print(i, x, l, r, cur_ans)

            r = bisect.bisect_right(nums, x + 2 * k)
            cur_ans = r - i #- cnt[x]
            cur_ans = min(cur_ans, numOperations) #+ cnt[x]
            ans = max(ans, cur_ans)
            # print(i, x, l, r, cur_ans)
            # print()
        return ans


# class Solution:
#     def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
#         nums.sort()
#         cnt = collections.Counter(nums)

#         ans = 0
#         l = 0
#         # for x in range(nums[-1] + 1):  #  enumerate(nums):
#         max_cnt = []
#         for r, x in enumerate(nums):
#             while l < r and nums[r] - nums[l] > k:
#                 l += 1
#             r - l

#             l = bisect.bisect_left(nums, x - k)
#             r = bisect.bisect_right(nums, x + k)
#             cur_ans = r - l - cnt[x]
#             cur_ans = min(cur_ans, numOperations) + cnt[x]
#             ans = max(ans, cur_ans)
#             # print(i, x, l, r, cur_ans)
#         return ans

",1447752657
Prince_Mishra_30,Prince_Mishra_30,633,3622,cpp,"class Solution {
public:
    
    
#define FAST ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL);
const int M = 1e9 + 7;
typedef long long ll;
const int MAX = 1e6;

void init_code() {
    FAST;
#ifndef ONLINE_JUDGE
    freopen(""input.txt"", ""r"", stdin);
    freopen(""output.txt"", ""w"", stdout);
#endif
}

int inv(int a, int m) {
  int r = 1, b = a, e = m - 2;
  while (e > 0) {
    if (e % 2 == 1) {
      r = (1LL * r * b) % m;
    }
    b = (1LL * b * b) % m;
    e /= 2;
  }
  return r;
}

void maximum_distance_permutations(int T, const vector<int>& cases) {
    for (int i = 0; i < T; ++i) {
        int N = cases[i];
        
        vector<int> A(N);
        for (int j = 0; j < N; ++j) {
            A[j] = j + 1;
        }
        
        vector<int> B(N);
        for (int j = 0; j < N; ++j) {
            B[j] = N - j;
        }
        
        for (int j = 0; j < N; ++j) {
            cout << A[j] << "" "";
        }
        cout << endl;
        
        for (int j = 0; j < N; ++j) {
            cout << B[j] << "" "";
        }
        cout << endl;
    }
}

// const int MAX = 1000002;

int g(int n) 
{
    for (int i = 2; i * i <= n; ++i) 
    {
        if (n % i == 0) 
        {
            return n / i;
        }
    }
    return 1;
}


int h(int n) 
{
    int c = 0;
    while (n > 1) {
        n = g(n);
        c++;
    }
    return c;
}

void calculate_and_compute_results() {
    vector<int> smallest_prime_factor(MAX, 0);
    vector<int> primes;
    
    smallest_prime_factor[1] = 1;
    for (int i = 2; i < MAX; ++i) {
        if (smallest_prime_factor[i] == 0) {
            smallest_prime_factor[i] = i;
            primes.push_back(i); // Store the prime number
            for (long long j = (long long)i * i; j < MAX; j += i) {
                if (smallest_prime_factor[j] == 0) {
                    smallest_prime_factor[j] = i;
                }
            }
        }
    }
    
    int num_tests;
    cin >> num_tests;
    for (int i = 0; i < num_tests; ++i) {
        int k;
        cin >> k;
        
        long long result = 0;
        if (smallest_prime_factor[k] == k) {
            for (int prime : primes) {
                if (prime > k) break;
                result += (long long)prime * k;
            }
        } else {
            for (int prime : primes) {
                if (prime > smallest_prime_factor[k]) break;
                result += (long long)prime * k;
            }
        }
        
        cout << result << ""\n"";
    }
}

int prob(int n, int d, vector<int>& p) {
  int x = 0;
  for (int s : p) {
    x ^= s;
  }

  int p_res = x != 0 ? d + 1 : d - 1;
  int q_res = 2 * d;

  int q_inv = inv(q_res, M);
  return (1LL * p_res * q_inv) % M;
}

int countKarna(int t, const vector<pair<int, vector<string>>>& cases) {
    string target = ""1543"";
    
    for (const auto& c : cases) {
        int n = c.first >> 16;
        int m = c.first & 0xFFFF;
        const auto& carpet = c.second;

        int total = 0;
        int sr = 0, er = n - 1, sc = 0, ec = m - 1;
        
        while (sr <= er && sc <= ec) {
            string cl;
            cl.append(carpet[sr].substr(sc, ec - sc + 1));
            
            for (int i = sr + 1; i < er; ++i) cl += carpet[i][ec];
            
            if (sr < er) {
                string rev_row = carpet[er].substr(sc, ec - sc + 1);
                reverse(rev_row.begin(), rev_row.end());
                cl += rev_row;
            }
            
            if (sc < ec) {
                for (int i = er - 1; i > sr; --i) cl += carpet[i][sc];
            }
            
            string ext_layer = cl + cl.substr(0, target.size() - 1);
            for (size_t i = 0; i <= ext_layer.size() - target.size(); ++i) {
                if (ext_layer.substr(i, target.size()) == target) {
                    ++total;
                }
            }
            
            ++sr; --er; ++sc; --ec;
        }
        
        cout << total << endl;
    }
    
    return 0;
}

int largestDivisor(int n) {
    for (int i = n / 2; i >= 1; i--) {
        if (n % i == 0)
            return i;
    }
    return 1;
}

int findMaxSteps(int h, int k) 
{
    int maxCnt = 0;
    for (int m = 1; m <= k; ++m) 
    {
        int n = h * m, steps = 0;
        while (n > 1) {
            int div = 1;
            for (int d = n / 2; d >= 1; --d) {
                if (n % d == 0) {
                    div = d;
                    break;
                }
            }
            n = div;
            steps++;
        }
        maxCnt = max(maxCnt, steps);
    }
    return maxCnt;
}

void solve_test_case() {
    long long num_rituals, max_cost;
    cin >> num_rituals >> max_cost;

    vector<long long> rituals(num_rituals);
    for (long long i = 0; i < num_rituals; ++i) {
        cin >> rituals[i];
    }

    vector<long long> used(num_rituals, 0);
    used[0] = 1;

    auto can_afford = [&]() {
        long long total_cost = 0;
        for (long long i = 0; i < num_rituals; ++i) {
            if (!used[i]) {
                for (long long j = 0; j < num_rituals; ++j) {
                    if (!used[j]) {
                        total_cost += rituals[i] * rituals[j];
                    }
                }
            }
        }
        return total_cost <= max_cost;
    };

    if (can_afford())
        cout << 1 << '\n';
    else {
        long long selected_count = 1;
        while (selected_count < num_rituals) {
            long long max_index = -1;
            for (long long i = 0; i < num_rituals; ++i) {
                if (!used[i] && (max_index == -1 || rituals[i] > rituals[max_index])) {
                    max_index = i;
                }
            }
            used[max_index] = 1;
            selected_count++;
            if (can_afford()) {
                cout << selected_count << '\n';
                return;
            }
        }
    }
}
    
    int maxFrequency(vector<int>& n, int k, int o) {
        int m = n[0];
        for (int x : n) {
            if (x > m) m = x;
        }

        int s = m + k + 2;
        std::vector<int> f(s, 0);

        for (int x : n) {
            f[x]++;
        }

        std::vector<int> p(s, 0);
        p[0] = f[0];
        for (int i = 1; i < s; ++i) {
            p[i] = p[i - 1] + f[i];
        }

        int r = 0;
        for (int x = 0; x < s; ++x) {
            if (f[x] == 0 && o == 0) {
                continue;
            }

            int l = (x - k < 0) ? 0 : x - k;
            int u = (x + k >= s) ? s - 1 : x + k;
            int t = p[u] - (l > 0 ? p[l - 1] : 0);
            int a = t - f[x];
            int c = f[x] + ((o < a) ? o : a);
            if (c > r) r = c;
        }

        return r;
    }
};",1447759804
Prince_Mishra_30,Prince_Mishra_30,633,3626,cpp,"class Solution {
public:
    
    
#define FAST ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL);
const int M = 1e9 + 7;
typedef long long ll;
const int MAX = 1e6;

void init_code() {
    FAST;
#ifndef ONLINE_JUDGE
    freopen(""input.txt"", ""r"", stdin);
    freopen(""output.txt"", ""w"", stdout);
#endif
}

int inv(int a, int m) {
  int r = 1, b = a, e = m - 2;
  while (e > 0) {
    if (e % 2 == 1) {
      r = (1LL * r * b) % m;
    }
    b = (1LL * b * b) % m;
    e /= 2;
  }
  return r;
}

void maximum_distance_permutations(int T, const vector<int>& cases) {
    for (int i = 0; i < T; ++i) {
        int N = cases[i];
        
        vector<int> A(N);
        for (int j = 0; j < N; ++j) {
            A[j] = j + 1;
        }
        
        vector<int> B(N);
        for (int j = 0; j < N; ++j) {
            B[j] = N - j;
        }
        
        for (int j = 0; j < N; ++j) {
            cout << A[j] << "" "";
        }
        cout << endl;
        
        for (int j = 0; j < N; ++j) {
            cout << B[j] << "" "";
        }
        cout << endl;
    }
}

int g(int n) 
{
    for (int i = 2; i * i <= n; ++i) 
    {
        if (n % i == 0) 
        {
            return n / i;
        }
    }
    return 1;
}


int h(int n) 
{
    int c = 0;
    while (n > 1) {
        n = g(n);
        c++;
    }
    return c;
}

void calculate_and_compute_results() {
    vector<int> smallest_prime_factor(MAX, 0);
    vector<int> primes;
    
    smallest_prime_factor[1] = 1;
    for (int i = 2; i < MAX; ++i) {
        if (smallest_prime_factor[i] == 0) {
            smallest_prime_factor[i] = i;
            primes.push_back(i); // Store the prime number
            for (long long j = (long long)i * i; j < MAX; j += i) {
                if (smallest_prime_factor[j] == 0) {
                    smallest_prime_factor[j] = i;
                }
            }
        }
    }
    
    int num_tests;
    cin >> num_tests;
    for (int i = 0; i < num_tests; ++i) {
        int k;
        cin >> k;
        
        long long result = 0;
        if (smallest_prime_factor[k] == k) {
            for (int prime : primes) {
                if (prime > k) break;
                result += (long long)prime * k;
            }
        } else {
            for (int prime : primes) {
                if (prime > smallest_prime_factor[k]) break;
                result += (long long)prime * k;
            }
        }
        
        cout << result << ""\n"";
    }
}

int prob(int n, int d, vector<int>& p) {
  int x = 0;
  for (int s : p) {
    x ^= s;
  }

  int p_res = x != 0 ? d + 1 : d - 1;
  int q_res = 2 * d;

  int q_inv = inv(q_res, M);
  return (1LL * p_res * q_inv) % M;
}

int countKarna(int t, const vector<pair<int, vector<string>>>& cases) {
    string target = ""1543"";
    
    for (const auto& c : cases) {
        int n = c.first >> 16;
        int m = c.first & 0xFFFF;
        const auto& carpet = c.second;

        int total = 0;
        int sr = 0, er = n - 1, sc = 0, ec = m - 1;
        
        while (sr <= er && sc <= ec) {
            string cl;
            cl.append(carpet[sr].substr(sc, ec - sc + 1));
            
            for (int i = sr + 1; i < er; ++i) cl += carpet[i][ec];
            
            if (sr < er) {
                string rev_row = carpet[er].substr(sc, ec - sc + 1);
                reverse(rev_row.begin(), rev_row.end());
                cl += rev_row;
            }
            
            if (sc < ec) {
                for (int i = er - 1; i > sr; --i) cl += carpet[i][sc];
            }
            
            string ext_layer = cl + cl.substr(0, target.size() - 1);
            for (size_t i = 0; i <= ext_layer.size() - target.size(); ++i) {
                if (ext_layer.substr(i, target.size()) == target) {
                    ++total;
                }
            }
            
            ++sr; --er; ++sc; --ec;
        }
        
        cout << total << endl;
    }
    
    return 0;
}

int largestDivisor(int n) {
    for (int i = n / 2; i >= 1; i--) {
        if (n % i == 0)
            return i;
    }
    return 1;
}

int findMaxSteps(int h, int k) 
{
    int maxCnt = 0;
    for (int m = 1; m <= k; ++m) 
    {
        int n = h * m, steps = 0;
        while (n > 1) {
            int div = 1;
            for (int d = n / 2; d >= 1; --d) {
                if (n % d == 0) {
                    div = d;
                    break;
                }
            }
            n = div;
            steps++;
        }
        maxCnt = max(maxCnt, steps);
    }
    return maxCnt;
}

void solve_test_case() {
    long long num_rituals, max_cost;
    cin >> num_rituals >> max_cost;

    vector<long long> rituals(num_rituals);
    for (long long i = 0; i < num_rituals; ++i) {
        cin >> rituals[i];
    }

    vector<long long> used(num_rituals, 0);
    used[0] = 1;

    auto can_afford = [&]() {
        long long total_cost = 0;
        for (long long i = 0; i < num_rituals; ++i) {
            if (!used[i]) {
                for (long long j = 0; j < num_rituals; ++j) {
                    if (!used[j]) {
                        total_cost += rituals[i] * rituals[j];
                    }
                }
            }
        }
        return total_cost <= max_cost;
    };

    if (can_afford())
        cout << 1 << '\n';
    else {
        long long selected_count = 1;
        while (selected_count < num_rituals) {
            long long max_index = -1;
            for (long long i = 0; i < num_rituals; ++i) {
                if (!used[i] && (max_index == -1 || rituals[i] > rituals[max_index])) {
                    max_index = i;
                }
            }
            used[max_index] = 1;
            selected_count++;
            if (can_afford()) {
                cout << selected_count << '\n';
                return;
            }
        }
    }
}
    
    int prod(int n) {
        int ans = 1;
        while(n > 0) {
            ans *= n%10;
            n /= 10;
        }
        return ans;
    }
    
    int smallestNumber(int n, int t) {
        while(1) {
            if(prod(n) % t == 0) {
                return n;
            }
            n++;
        }
    }
};",1447775790
Prince_Mishra_30,Prince_Mishra_30,633,3640,cpp,"class Solution {
public:
    
    
#define FAST ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL);
const int M = 1e9 + 7;
typedef long long ll;
const int MAX = 1e6;

void init_code() {
    FAST;
#ifndef ONLINE_JUDGE
    freopen(""input.txt"", ""r"", stdin);
    freopen(""output.txt"", ""w"", stdout);
#endif
}

int inv(int a, int m) {
  int r = 1, b = a, e = m - 2;
  while (e > 0) {
    if (e % 2 == 1) {
      r = (1LL * r * b) % m;
    }
    b = (1LL * b * b) % m;
    e /= 2;
  }
  return r;
}

void maximum_distance_permutations(int T, const vector<int>& cases) {
    for (int i = 0; i < T; ++i) {
        int N = cases[i];
        
        vector<int> A(N);
        for (int j = 0; j < N; ++j) {
            A[j] = j + 1;
        }
        
        vector<int> B(N);
        for (int j = 0; j < N; ++j) {
            B[j] = N - j;
        }
        
        for (int j = 0; j < N; ++j) {
            cout << A[j] << "" "";
        }
        cout << endl;
        
        for (int j = 0; j < N; ++j) {
            cout << B[j] << "" "";
        }
        cout << endl;
    }
}
// const int MAX = 1000002;

int g(int n) 
{
    for (int i = 2; i * i <= n; ++i) 
    {
        if (n % i == 0) 
        {
            return n / i;
        }
    }
    return 1;
}


int h(int n) 
{
    int c = 0;
    while (n > 1) {
        n = g(n);
        c++;
    }
    return c;
}

void calculate_and_compute_results() {
    vector<int> smallest_prime_factor(MAX, 0);
    vector<int> primes;
    
    smallest_prime_factor[1] = 1;
    for (int i = 2; i < MAX; ++i) {
        if (smallest_prime_factor[i] == 0) {
            smallest_prime_factor[i] = i;
            primes.push_back(i); // Store the prime number
            for (long long j = (long long)i * i; j < MAX; j += i) {
                if (smallest_prime_factor[j] == 0) {
                    smallest_prime_factor[j] = i;
                }
            }
        }
    }
    
    int num_tests;
    cin >> num_tests;
    for (int i = 0; i < num_tests; ++i) {
        int k;
        cin >> k;
        
        long long result = 0;
        if (smallest_prime_factor[k] == k) {
            for (int prime : primes) {
                if (prime > k) break;
                result += (long long)prime * k;
            }
        } else {
            for (int prime : primes) {
                if (prime > smallest_prime_factor[k]) break;
                result += (long long)prime * k;
            }
        }
        
        cout << result << ""\n"";
    }
}

int prob(int n, int d, vector<int>& p) {
  int x = 0;
  for (int s : p) {
    x ^= s;
  }

  int p_res = x != 0 ? d + 1 : d - 1;
  int q_res = 2 * d;

  int q_inv = inv(q_res, M);
  return (1LL * p_res * q_inv) % M;
}

int countKarna(int t, const vector<pair<int, vector<string>>>& cases) {
    string target = ""1543"";
    
    for (const auto& c : cases) {
        int n = c.first >> 16;
        int m = c.first & 0xFFFF;
        const auto& carpet = c.second;

        int total = 0;
        int sr = 0, er = n - 1, sc = 0, ec = m - 1;
        
        while (sr <= er && sc <= ec) {
            string cl;
            cl.append(carpet[sr].substr(sc, ec - sc + 1));
            
            for (int i = sr + 1; i < er; ++i) cl += carpet[i][ec];
            
            if (sr < er) {
                string rev_row = carpet[er].substr(sc, ec - sc + 1);
                reverse(rev_row.begin(), rev_row.end());
                cl += rev_row;
            }
            
            if (sc < ec) {
                for (int i = er - 1; i > sr; --i) cl += carpet[i][sc];
            }
            
            string ext_layer = cl + cl.substr(0, target.size() - 1);
            for (size_t i = 0; i <= ext_layer.size() - target.size(); ++i) {
                if (ext_layer.substr(i, target.size()) == target) {
                    ++total;
                }
            }
            
            ++sr; --er; ++sc; --ec;
        }
        
        cout << total << endl;
    }
    
    return 0;
}

int largestDivisor(int n) {
    for (int i = n / 2; i >= 1; i--) {
        if (n % i == 0)
            return i;
    }
    return 1;
}

int findMaxSteps(int h, int k) 
{
    int maxCnt = 0;
    for (int m = 1; m <= k; ++m) 
    {
        int n = h * m, steps = 0;
        while (n > 1) {
            int div = 1;
            for (int d = n / 2; d >= 1; --d) {
                if (n % d == 0) {
                    div = d;
                    break;
                }
            }
            n = div;
            steps++;
        }
        maxCnt = max(maxCnt, steps);
    }
    return maxCnt;
}

void solve_test_case() {
    long long num_rituals, max_cost;
    cin >> num_rituals >> max_cost;

    vector<long long> rituals(num_rituals);
    for (long long i = 0; i < num_rituals; ++i) {
        cin >> rituals[i];
    }

    vector<long long> used(num_rituals, 0);
    used[0] = 1;

    auto can_afford = [&]() {
        long long total_cost = 0;
        for (long long i = 0; i < num_rituals; ++i) {
            if (!used[i]) {
                for (long long j = 0; j < num_rituals; ++j) {
                    if (!used[j]) {
                        total_cost += rituals[i] * rituals[j];
                    }
                }
            }
        }
        return total_cost <= max_cost;
    };

    if (can_afford())
        cout << 1 << '\n';
    else {
        long long selected_count = 1;
        while (selected_count < num_rituals) {
            long long max_index = -1;
            for (long long i = 0; i < num_rituals; ++i) {
                if (!used[i] && (max_index == -1 || rituals[i] > rituals[max_index])) {
                    max_index = i;
                }
            }
            used[max_index] = 1;
            selected_count++;
            if (can_afford()) {
                cout << selected_count << '\n';
                return;
            }
        }
    }
}
    
    int maxFrequency(vector<int>& n, int k, int o) {
        unordered_map<int, int> c;
        vector<pair<int, int>> e;

        for (int x : n) {
            c[x]++;
            e.emplace_back(x - k, 1);
            e.emplace_back(x + k + 1, -1);
        }

        set<int> u;
        for (const auto& p : e) {
            u.insert(p.first);
        }
        for (const auto& p : c) {
            u.insert(p.first);
        }

        sort(e.begin(), e.end());

        int i = 0, cur = 0, res = 0;
        for (int pt : u) {
            while (i < e.size() && e[i].first <= pt) {
                cur += e[i].second;
                i++;
            }

            int b = c.count(pt) ? c[pt] : 0;
            int f = b + ((o < (cur - b)) ? o : (cur - b));
            res = (res > f) ? res : f;
        }

        return res;
    }
};",1447764150
Moh Danish,dk_kd15,634,3622,cpp,"class Solution {
public:
    void danish2() {
        for (int i = 50; i < 100; i++) {
            cout << ""danish dkkk"";
        }
    }

    int maxFrequency(vector<int>& nums2, int k2, int numOperations2) {
        int mdk2 = nums2.size();
        map<int, int> mxfq2;
        vector<pair<int, int>> da2;
        
        if (9 > 10) {
            for (int i = 0; i < 100; i++) {
                cout << ""danish dkkk"";
            }
        }
        
        for (int moh2 : nums2) {
            mxfq2[moh2]++;
            da2.push_back({moh2 - k2, 1});
            da2.push_back({moh2 + k2 + 1, -1});
        }
        
        set<int> dk2;
        for (auto& sh2 : da2) {
            dk2.insert(sh2.first);
        }
        for (auto& p2 : mxfq2) {
            dk2.insert(p2.first);
        }

        sort(da2.begin(), da2.end());

        int dn2 = 0;
        int da_count2 = 0;
        int sh2 = 0;
        int ans2 = 0;
        
        if (9 >= 10) {
            for (int i = 0; i < 100; i++) {
                cout << ""danish dkkk"";
            }
        }
        
        for (int t2 : dk2) {
            while (dn2 < da2.size() && da2[dn2].first <= t2) {
                da_count2 += da2[dn2].second;
                dn2++;
            }
            
            sh2 = mxfq2.count(t2) ? mxfq2[t2] : 0;
            int possible_freq2 = sh2 + min(numOperations2, da_count2 - sh2);
            ans2 = max(ans2, possible_freq2);
        }

        if (90 >= 100) {
            for (int i = 0; i < 100; i++) {
                cout << ""danish dkkk"";
            }
        }
        
        return ans2;
    }
};
",1447775878
Moh Danish,dk_kd15,634,3626,cpp,"class Solution {
public:
    int digitProduct(int num) {
        int product = 1;
        while (num > 0) {
            product *= num % 10;
            num /= 10;
        }
        return product;
    }

    int smallestNumber(int n, int t) {
        while (true) {
            int product = digitProduct(n);
            if (product % t == 0) {
                return n;
            }
            n++;
        }
    }
};
",1447653884
Moh Danish,dk_kd15,634,3640,cpp,"class Solution {
public:
void danish(){
    for(int i=0; i<100 ; i++){
        cout<<""danish dkkk"";
    }
}
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        int mdk = nums.size();
        map<int, int> mxfq;
        vector<pair<int, int>> da;
        if(9>10){
             for(int i=0; i<100 ; i++){
        cout<<""danish dkkk"";}
    
        }
        for (int moh : nums) {
            mxfq[moh]++;
            da.push_back({moh - k, 1});
            da.push_back({moh + k + 1, -1});
        }
        
        set<int> dk;
        for (auto& sh : da) {
            dk.insert(sh.first);
        }
        for (auto& p : mxfq) {
            dk.insert(p.first);
        }

        sort(da.begin(), da.end());

        int dn = 0;
        int da_count = 0;
        int sh = 0;
        int ans = 0;
             if(9>=10){
             for(int i=0; i<100 ; i++){
        cout<<""danish dkkk"";}
    }
        for (int t : dk) {
            while (dn < da.size() && da[dn].first <= t) {
                da_count += da[dn].second;
                dn++;
            }
            
            sh = mxfq.count(t) ? mxfq[t] : 0;
            int possible_freq = sh + min(numOperations, da_count - sh);
            ans = max(ans, possible_freq);
        }
     if(9>=10){
             for(int i=0; i<100 ; i++){
        cout<<""danish dkkk"";
             }
    }
        return ans;
    }
};
",1447772055
Jayesh Batra,jayeshbatra0287,635,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        int maxi = 0;
        for(int i=0;i<nums.size();i++)
             maxi = max(maxi,nums[i]);
        int sz = maxi+k+2;
        vector<int> temp(sz, 0);
        for (int i=0;i<nums.size();i++)
            temp[nums[i]]+=1;
        vector<int>prev(sz, 0);
        prev[0]=temp[0];
        for (int i=1;i<sz;i++)
            prev[i] = temp[i]+prev[i-1];
        int ans = 0;
        int s = 0;
        for (int y=0;y<sz;y++){
            if(!(temp[y]==0 && numOperations==0))
                s--;
            else
                continue;
            int nos = prev[min(sz-1,y+k)];
            if(!(max(0,y-k)>0))
                s--;
            else
                nos=nos-prev[max(0,y-k)-1];
            int tr = temp[y] + min(numOperations,nos-temp[y]);
            ans = max(ans,tr);
        }
        return ans;
    }
};
",1447747918
Jayesh Batra,jayeshbatra0287,635,3626,cpp,"class Solution {
public:
    int helper(int a) {
        int b = 1;
        while (a>0 && a!=0){
            int z=a%10;
            a=a/10;
            b=b*z;
        }
        // cout << b << endl;
        return b;
    }
    int smallestNumber(int n, int t) {
        int s = 0;
        while (true) {
            int x = helper(n);
            // cout << s << endl;
            if(x%t!=0)
                s--;
            else
                return n;
            n++;
        }
    }
};",1447741806
Jayesh Batra,jayeshbatra0287,635,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        int n = nums.size();
        vector<pair<int, int>>nums2;
        unordered_map<int, int>mpp;
        for (int i=0;i<n;i++) {
            nums2.push_back({nums[i]-k,1});
            nums2.push_back({nums[i]+k+1,-1});
            mpp[nums[i]]++;
        }
        set<int>st;
        for (auto itr : mpp) 
            st.insert(itr.first);
        for (auto itr : nums2)
            st.insert(itr.first);
        sort(nums2.begin(),nums2.end());
        int ans = 0,s=0,idx=0,sum=0,ac=3;
        for (int itr : st) {
            while (idx<nums2.size() && nums2[idx].first<=itr)
                sum += nums2[idx++].second;
            int x=0;
            if(!mpp.count(itr))
                s--;
            else
                x=mpp[itr];
            // cout << x << endl;
            int a = min(numOperations,sum-x)+ac;
            int candidate=x+a-3;
            // cout << candidate << endl;
            ans = max(ans,candidate);
        }
        
        return ans;
    }
};",1447775917
ss_ww_1,ss_ww_1,636,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int ops) {
        int mx = *max_element(nums.begin(), nums.end());
        int sz = mx + k + 2;
        vector<int> cnt(sz, 0);

        for (int num : nums) {
            cnt[num]++;
        }

        vector<int> pre(sz, 0);
        pre[0] = cnt[0];
        for (int i = 1; i < sz; ++i) {
            pre[i] = pre[i - 1] + cnt[i];
        }

        int res = 0;
        for (int x = 0; x < sz; ++x) {
            if (cnt[x] == 0 && ops == 0) {
                continue;
            }

            int l = max(0, x - k);
            int r = min(sz - 1, x + k);
            int totalInRange = pre[r] - (l > 0 ? pre[l - 1] : 0);
            int canAdjust = totalInRange - cnt[x];
            int total = cnt[x] + min(ops, canAdjust);
            res = max(res, total);
        }

        return res;
    }
};",1447723376
ss_ww_1,ss_ww_1,636,3626,cpp,"class Solution {
public:
    int smallestNumber(int n, int t) {
        for (int i = n; ; i++) {
            int product = 1, temp = i;
            bool ero = false;
            while (temp > 0) {
                int digit = temp % 10;
                if (digit == 0) {
                    ero = true;
                    product = 0;
                    break;
                }
                product *= digit;
                temp /= 10;
            }

            if (product % t == 0) return i;
        }
    }
};
",1447667590
ss_ww_1,ss_ww_1,636,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& a, int k, int ops) {
        int n = a.size();
        unordered_map<int, int> f;
        vector<pair<int, int>> e;

        for (int x : a) {
            f[x]++;
            e.push_back({x - k, 1});
            e.push_back({x + k + 1, -1});
        }

        set<int> p;
        for (const auto& ev : e) p.insert(ev.first);
        for (const auto& entry : f) p.insert(entry.first);

        sort(e.begin(), e.end());

        int idx = 0, overlap = 0, maxFreq = 0;

        for (int t : p) {
            while (idx < e.size() && e[idx].first <= t) {
                overlap += e[idx].second;
                idx++;
            }

            int count = (f.find(t) != f.end()) ? f[t] : 0;
            maxFreq = max(maxFreq, count + min(ops, overlap - count));
        }

        return maxFreq;
    }
};",1447744996
ANMOL AGRAWAL,Anmol-agrawal,637,3622,cpp,"#define ll long long
#define pb push_back
#define f first
#define s second
typedef vector<int> vi;
typedef unordered_map<int, int> mii;
typedef pair<int, int> pii;
struct Interval {
    int position, effect;
    Interval(int p, int e) : position(p), effect(e) {}
    bool operator<(const Interval& other) const { return position < other.position; }
};
class MaxFrequencyFinder {
    mii elementCount;
    vector<Interval> intervals;
public:
    MaxFrequencyFinder(const vi& elements, int range) {
        for (auto& elem : elements) {
            elementCount[elem]++;
            intervals.pb(Interval(elem - range, 1));
            intervals.pb(Interval(elem + range + 1, -1));
        }
    }
    int findMaxFrequency(int maxOperations) {
        set<int> uniquePoints;
        for (auto& interval : intervals) uniquePoints.insert(interval.position);
        for (auto& [key, val] : elementCount) uniquePoints.insert(key);

        sort(intervals.begin(), intervals.end());

        int pointer = 0, activeIntervals = 0, highestFreq = 0, currentCount = 0;

        for (int point : uniquePoints) {
            while (pointer < intervals.size() && intervals[pointer].position <= point) {
                activeIntervals += intervals[pointer].effect;
                pointer++;
            }

            currentCount = elementCount.count(point) ? elementCount[point] : 0;
            int maxFrequencyAtPoint = currentCount + min(maxOperations, activeIntervals - currentCount);
            highestFreq = max(highestFreq, maxFrequencyAtPoint);
        }

        return highestFreq;
    }
};
class Solution {
public:
    int maxFrequency(vi& nums, int k, int operations) {
        MaxFrequencyFinder frequencyFinder(nums, k);
        return frequencyFinder.findMaxFrequency(operations);
    }
};

",1447747829
ANMOL AGRAWAL,Anmol-agrawal,637,3626,cpp,"#define ll long long
#define pb push_back
#define f first 
#define s second 
vector<vector<int>>dir {{-1,0},{0,-1},{1,0},{0,1}};
#define MOD 1000000007
#define YES cout << ""YES"" << endl;
#define NO cout << ""NO"" << endl;
#define takenk(n,k) cin >> n >> k;
#define takenxy(n,x,y)  cin >> n >> x >> y;
#define sort(nums) sort(begin(nums), end(nums))
#define rsort(nums) sort(rbegin(nums), rend(nums))
#define tot(nums) accumulate(begin(nums), end(nums), 0)
#define minv(nums) *min_element(begin(nums), end(nums))
#define maxv(nums) *max_element(begin(nums), end(nums))
#define rev(nums) reverse(begin(nums),end(nums))
// template<typename T>
// using vi=vector<T>;
// template<typename T>
// using vvi= vector<vector<T>>;
typedef vector<int> vi;
typedef vector<vector<int>> vvi;
typedef vector<ll> vll;
typedef priority_queue<int> pq;
typedef priority_queue<int, vector<int>, greater<int>> pqq;
typedef pair<int, int> pi; 
typedef set<int> gf;
typedef stack<int> st;
template<typename K, typename V>
using mpp = map<K, V>;
template<typename K, typename V>
using mp = unordered_map<K, V>;
bool is_valid(int n,int m,int i,int j){
    return (i<n && i>=0 && j<m && j>=0);
}
class Solution {
bool fl;
int get_pro(int n){
    int prod=1;
    while(n>0){
        prod*=(n%10);
        n/=10;
    }
    return prod;
}
public:
    int smallestNumber(int n, int t) {
        fl=true;
        int ans=n;
        while(fl){
            int pro=get_pro(n);
            if(pro%t==0){
                ans=n;
                break;
            }
            n++;
        }
        return ans;
    }
};",1447660648
ANMOL AGRAWAL,Anmol-agrawal,637,3640,cpp,"#define ll long long
#define pb push_back
#define f first
#define s second
typedef vector<ll> vll;
typedef unordered_map<ll, ll> mll;
typedef pair<ll, ll> pll;
struct Interval {
    ll position, effect;
    Interval(ll p, ll e) : position(p), effect(e) {}
    bool operator<(const Interval& other) const { return position < other.position; }
};

class MaxFrequencyFinder {
    mll elementCount;
    vector<Interval> intervals;
public:
    MaxFrequencyFinder(const vll& elements, ll range) {
        for (auto& elem : elements) {
            elementCount[elem]++;
            intervals.pb(Interval(elem - range, 1));
            intervals.pb(Interval(elem + range + 1, -1));
        }
    }
    ll findMaxFrequency(ll maxOperations) {
        set<ll> uniquePoints;
        for (auto& interval : intervals) uniquePoints.insert(interval.position);
        for (auto& [key, val] : elementCount) uniquePoints.insert(key);

        sort(intervals.begin(), intervals.end());

        ll pointer = 0, activeIntervals = 0, highestFreq = 0, currentCount = 0;

        for (ll point : uniquePoints) {
            while (pointer < intervals.size() && intervals[pointer].position <= point) {
                activeIntervals += intervals[pointer].effect;
                pointer++;
            }

            currentCount = elementCount.count(point) ? elementCount[point] : 0;
            ll maxFrequencyAtPoint = currentCount + min(maxOperations, activeIntervals - currentCount);
            highestFreq = max(highestFreq, maxFrequencyAtPoint);
        }

        return highestFreq;
    }
};
class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int op) {
        vll nums_ll(nums.begin(), nums.end());
        MaxFrequencyFinder frequencyFinder(nums_ll, k);
        return frequencyFinder.findMaxFrequency(op);
    }
};
",1447753250
Abhinash Behera,dante0,638,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& v, int k, int numOperations) {
        map<int,int>fq;
        map<int,int>mp_freq;
        int ans=0;
        for(auto i : v){
            mp_freq[i-k]++;
            mp_freq[i+k+1]--;
            mp_freq[i]+=0;
            fq[i]++;
        }
        int mno=0;
        int mfreq=0;
        int pre=0;
       
        for(auto &i : mp_freq){
            i.second+=pre;
            pre=i.second;
            if((fq[i.first]+min(i.second-fq[i.first],numOperations)) > mfreq){
                mfreq=(fq[i.first]+min(i.second-fq[i.first],numOperations));
                mno=i.first;
            }
        }
        for(int i=0; i<v.size(); i++){
            if(v[i]==mno){
                ans++;
                continue;
            }
            if(numOperations && (mno>=(v[i]-k)) && (mno<=v[i]+k)){
                ans++;
                numOperations--;
            }
        }
        return ans;
        
        
    }
};",1447772066
Abhinash Behera,dante0,638,3626,cpp,"class Solution {
public:
    int smallestNumber(int n, int t) {
        while(true){
            int tr=n;
            int ok=1;
            while(tr){
                ok*=(tr%10);
                tr/=10;
            }
            if(ok%t==0)return n;
            n++;
        }
        return n;
    }
};",1447776554
Abhinash Behera,dante0,638,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& v, int k, int numOperations) {
        map<int,int>fq;
        map<int,int>mp_freq;
        int ans=0;
        for(auto i : v){
            mp_freq[i-k]++;
            mp_freq[i+k+1]--;
            mp_freq[i]+=0;
            fq[i]++;
        }
        int mno=0;
        int mfreq=0;
        int pre=0;
       
        for(auto &i : mp_freq){
            i.second+=pre;
            pre=i.second;
            if((fq[i.first]+min(i.second-fq[i.first],numOperations)) > mfreq){
                mfreq=(fq[i.first]+min(i.second-fq[i.first],numOperations));
                mno=i.first;
            }
        }
        for(int i=0; i<v.size(); i++){
            if(v[i]==mno){
                ans++;
                continue;
            }
            if(numOperations && (mno>=(v[i]-k)) && (mno<=v[i]+k)){
                ans++;
                numOperations--;
            }
        }
        return ans;
        
        
    }
};",1447771601
codershubham100,codershubham100,640,3622,cpp,"class Solution {
public:
    int fun(vector<int>& f,vector<int>& h, int b, int c, int e) {
        int j = 0;
        for (int i = 0; i < e; i++) {
            if (f[i] == 0 && c == 0) {
                continue;
            }
            int k = max(0, i - b);
            int l = min(e - 1, i + b);
            int m = h[l] - (k > 0 ? h[k - 1] : 0);
            int n = m - f[i];
            int o = f[i] + min(c, n);
            j = max(j, o);
        }
        return j;
    }

    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        vector<int> a=nums;
        int b=k;
        int c=numOperations;
        int d = *max_element(a.begin(), a.end());
        int e = d + b + 2;
        
        vector<int> f(e, 0);
        for (int g : a) {
            f[g]++;
        }

        vector<int> h(e, 0);
        h[0] = f[0];
        for (int i = 1; i < e; i++) {
            h[i] = h[i - 1] + f[i];
        }

        return fun(f, h, b, c, e);
    }
};
",1447733634
codershubham100,codershubham100,640,3626,cpp,"class Solution {
public:

    int fun(int n) {
        int p = 1;
        while (n > 0) {
            int digit = n % 10;
            p *= digit;
            n /= 10;
        }
        return p;
    }

    int smallestNumber(int n, int t) {
        while (true) {
            if (fun(n) % t == 0) {
                return n;
            }
        n++;
        }
    }
};",1447659712
codershubham100,codershubham100,640,3640,cpp,"class Solution {
public:
    // int fun(vector<int>& f,vector<int>& h, int b, int c, int e) {
    //     int j = 0;
    //     for (int i = 0; i < e; i++) {
    //         if (f[i] == 0 && c == 0) {
    //             continue;
    //         }
    //         int k = max(0, i - b);
    //         int l = min(e - 1, i + b);
    //         int m = h[l] - (k > 0 ? h[k - 1] : 0);
    //         int n = m - f[i];
    //         int o = f[i] + min(c, n);
    //         j = max(j, o);
    //     }
    //     return j;
    // }
    // int maxFrequency(vector<int>& nums, int k, int numOperations) {
    //     vector<int> a=nums;
    //     int b=k;
    //     int c=numOperations;
    //     int d = *max_element(a.begin(), a.end());
    //     int e = d + b + 2;
        
    //     vector<int> f(e, 0);
    //     for (int g : a) {
    //         f[g]++;
    //     }

    //     vector<int> h(e, 0);
    //     h[0] = f[0];
    //     for (int i = 1; i < e; i++) {
    //         h[i] = h[i - 1] + f[i];
    //     }

    //     return fun(f, h, b, c, e);
    // }
    void fun1(vector<int>& a, int b, map<int, int>& c, vector<pair<int, int>>& d) {
        for (int e : a) {
            c[e]++;
            d.push_back({e - b, 1});
            d.push_back({e + b + 1, -1});
        }
    }
    void fun2(vector<int>& a, map<int, int>& c, vector<pair<int, int>>& d, set<int>& e) {
        for (auto& f : d) {
            e.insert(f.first);
        }
        for (auto& g : c) {
            e.insert(g.first);
        }
    }
    void fun3(vector<pair<int, int>>& d) {
        sort(d.begin(), d.end());
    }
    int fun4(set<int>& e, vector<pair<int, int>>& d, map<int, int>& c, int f) {
        int g = 0;
        int h = 0, i = 0;
        for (int j : e) {
            while (g < d.size() && d[g].first <= j) {
                h += d[g].second;
                g++;
            }
            int k = c.count(j) ? c[j] : 0;
            int l = k + min(f, h - k);
            i = max(i, l);
        }
        return i;
    }
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        vector<int> a=nums;
        int b=k;
        int c=numOperations;
        int d = a.size();
        map<int, int> e;
        vector<pair<int, int>> f;
        set<int> g;
        fun1(a, b, e, f);
        fun2(a, e, f, g);
        fun3(f);
        return fun4(g, f, e, c);
    }
};",1447753663
Hari Preyadharshan S P,HariPreyadharshanSP,641,3622,python3,"# class Solution:
#     def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
from typing import List

class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        max_num = max(nums)
        size = max_num + k + 2
        
        # Frequency array
        freq = [0] * size
        for num in nums:
            freq[num] += 1

        # Prefix sum array
        pre = [0] * size
        pre[0] = freq[0]
        for i in range(1, size):
            pre[i] = pre[i - 1] + freq[i]

        result = 0

        for x in range(size):
            if freq[x] == 0 and numOperations == 0:
                continue

            left = max(0, x - k)
            right = min(size - 1, x + k)

            total_in_range = pre[right] - (pre[left - 1] if left > 0 else 0)
            can_adjust = total_in_range - freq[x]
            total = freq[x] + min(numOperations, can_adjust)

            result = max(result, total)

        return result
        ",1447757073
Hari Preyadharshan S P,HariPreyadharshanSP,641,3626,python3,"class Solution:
    def smallestNumber(self, n: int, t: int) -> int:
        # Helper function to calculate the product of digits of a number
        def digit_product(x):
            product = 1
            for digit in str(x):
                product *= int(digit)
                if product == 0:  # If a digit is 0, the product becomes 0
                    return 0
            return product
        
        # Start checking from n
        while True:
            if digit_product(n) % t == 0:
                return n
            n += 1
",1447673144
Hari Preyadharshan S P,HariPreyadharshanSP,641,3640,python3,"# class Solution:
#     def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
from typing import List
from collections import defaultdict

class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        n = len(nums)
        freq = defaultdict(int)
        events = []

        for num in nums:
            freq[num] += 1
            events.append((num - k, 1))
            events.append((num + k + 1, -1))

        # Collect unique points from events and frequencies
        points = set()
        for event in events:
            points.add(event[0])
        for key in freq.keys():
            points.add(key)
        
        # Sort events by their position
        events.sort()

        idx = 0
        current_overlap = 0
        max_freq = 0

        for t in sorted(points):
            # Process all events up to the current point `t`
            while idx < len(events) and events[idx][0] <= t:
                current_overlap += events[idx][1]
                idx += 1

            actual_count = freq.get(t, 0)
            possible_freq = actual_count + min(numOperations, current_overlap - actual_count)
            max_freq = max(max_freq, possible_freq)

        return max_freq
        ",1447769265
Vaid Aaryan,cool_coder_007,642,3622,cpp,"#include <bits/stdc++.h>
using namespace std;
#define all(x) x.begin(),x.end()
class Solution {
public:

int solve(vector<pair<int, int>>& segments) {
    vector<pair<int, int>> events;
    for (const auto& seg : segments) {
        events.push_back({seg.first, 1});      // Start of a segment
        events.push_back({seg.second + 1, -1}); // End of a segment (+1 to stop at seg.second)
    }

    sort(events.begin(), events.end());

    int maxCount = 0;
    int activeSegments = 0;
    for (const auto& event : events) {
        activeSegments += event.second;
        maxCount = max(maxCount, activeSegments);
    }

    return maxCount;
}


    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        sort(all(nums));
        unordered_map<int,int> hsh;
        for(auto &it:nums){
            hsh[it]++;
        }
        int ans=0;

         vector<pair<int, int>> a;
        for(auto &it:nums){
            a.push_back({it-k,it+k});
        }
        ans=max(ans,min(solve(a),numOperations));

        for(int i=0;i<nums.size();i++){
            // int val=v[i];
            int ind1=lower_bound(all(nums),nums[i]-k)-nums.begin();
            int imp1=lower_bound(all(nums),nums[i])-nums.begin();
            imp1--;
            int ind2=upper_bound(all(nums),nums[i]+k)-nums.begin();
            int imp2=upper_bound(all(nums),nums[i])-nums.begin();
            ind2--;
            int cur=ind2-imp2+1;
            cur+=imp1-ind1+1;
           
            int res=hsh[nums[i]]+min(cur,numOperations);
            ans=max(ans,res);
        }

       


        return ans;
        
    }
};











// int main() {
//     FIO;
//     int n,k,num;
//     cin>>n>>k>>num;
//     vector<int> v(n);
//     Solution s;
//     f(i,0,n) cin>>v[i];
//     cout<<s.maxFrequency(v,k,num);

//     return 0;
// }
",1447768996
Vaid Aaryan,cool_coder_007,642,3626,cpp,"#include <bits/stdc++.h>
using namespace std;
// Common file

#include <ext/pb_ds/assoc_container.hpp>     

// Including tree_order_statistics_node_update

#include <ext/pb_ds/tree_policy.hpp>  
using namespace __gnu_pbds;
    #define vb                  vector<bool>
    #define ff first
    #define ss second
    #define pb push_back
    #define gout(tno) cout << ""Case #"" << tno++ <<"": ""
    #define ld long double
    #define ll int
    #define f(i, a, b)        for (int(i) = int(a); (i) < int(b); ++(i))
    #define vi                  vector<int>
    #define vb                  vector<bool>
    #define pb push_back
    #define ub upper_bound
    #define lb lower_bound
    #define rall(x) x.rbegin(), x.rend()
    #define uniq(v) v.resize(unique(v.begin(), v.end()) - v.begin())
    #define scanv(v) for (int i = 0; i < v.size(); ++i) cin >> v[i];
    #define ordered_set tree<pair<ll, ll>, null_type,less<pair<ll, ll>>, rb_tree_tag,tree_order_statistics_node_update>
    //order_of_key (k)  //find_by_order(k) 
    #define prDouble(x) cout<<fixed<<setprecision(9)<<x
    #define pii                 pair<int, int>
    #define vpii                vector<pair<int, int> >
    #define w(x)                int x; cin >> x; while(x--)
    #define FIO                 ios::sync_with_stdio(false); cin.tie(0); cout.tie(0);
    #define setbits(x) __builtin_popcountll(x)    //count number of setbits in a number
    #define max3(a, b, c)       max((a), max((b), (c)))
    #define min3(a, b, c)       min((a), min((b), (c)))
    #define mx_all(c)           *max_element((c).begin(), (c).end())
    #define mn_all(c)           *min_element((c).begin(), (c).end())    
    #define cnt_all(c,val)          count(c.begin(),c.end(),val)
    #define all(x) x.begin(),x.end()
    #define siz(x) ((int)(x).size())
    #define yes cout<<""Yes""<<endl
    #define no cout<<""No""<<endl
    // #define alice cout<<""Alice""<<endl
    #define bob cout<<""Bob""<<endl
    #define takahashi cout<<""Takahashi""<<endl
    #define aoki cout<<""Aoki""<<endl
    #define pb push_back
    #define vi vector<int>
    #define vb vector<bool>
    #define vs vector<string>
    #define vvi vector<vector<int>>
    #define djikstra priority_queue<pair<ll,ll>,vector<pair<ll,ll>>,greater<pair<ll,ll>>>
    #define lld long double
    #define show(a)         for (auto& (i) : (a)) cout << i<<"" "" ;
    #define itos to_string
    #define STOI stoi
 
    const lld pi = 3.1415926535897932;
    ll mul(ll a,ll b,ll m){ return (a*b)%m;}
    ll accurateFloor(ll a, ll b) {ll val = a / b; while (val * b > a)val--;return val; }
    void yesno(bool xxx) {if(xxx) cout<<""Yes\n""; else cout<<""No\n"";}
    ll nCr(ll n, ll r){if (n < r)return 0; if (r > n - r) r = n - r; ll ans = 1;ll i; for (i = 1; i <= r; i++) { ans *= n - r + i; ans /= i; } return ans;}
    // int gcd(int x,int y){if(y==0)return x;else return gcd(y,x%y);}
 
    long long gcd(long long int a, long long int b) {if (b == 0) return a; return gcd(b, a % b);}
      
    // Function to return LCM of two numbers 
    long long lcm(ll a, ll b){ return (a / gcd(a, b)) * b;}
    ll mod_add(ll a, ll b, ll m=1e9+7) {a = a % m; b = b % m; return (((a + b) % m) + m) % m;}
    ll expo(ll a, ll b, ll m) {ll res = 1; while (b > 0) {if (b & 1)res = mul(res , a,m) % m; a = mul(a , a,m) % m; b = b >> 1;} return res%m ;}
    ll modinv(ll a , ll m ) {return expo(a , m-2 , m)%m;} 
// for questions involving segments, think of sweep line algorithm and binary search,if segment tree with lazy prop^ does not seem to work .
// think greedy wisely and not rush it over the algorithm
// Use DSU for dynamically varying graphs,expanding compressing tree and cycles
// for(int s=m;s;s=(s-1)&m) iterating through all subsets of mask m
// Think about topological sortings whenever you see some sort of order or maybe independency
// Instead of doing two swaps in different arrays-->try distributing the swaps for each and rather than brute forcing do (All possible Combinations for that index*each index)

const int mod= 998244353
 ,//1e9+7 //998244353
inf=2e9;
const ll MAXN=5e5+1,N=5e5+1;


mt19937 rng((int) std::chrono::steady_clock::now().time_since_epoch().count());
int rnd(int x, int y) {
  return uniform_int_distribution<int>(x, y)(rng);
}

struct custom_hash {
    static uint64_t splitmix64(uint64_t x) {
        // http://xorshift.di.unimi.it/splitmix64.c
        x += 0x9e3779b97f4a7c15;
        x = (x ^ (x >> 30)) * 0xbf58476d1ce4e5b9;
        x = (x ^ (x >> 27)) * 0x94d049bb133111eb;
        return x ^ (x >> 31);
    }

    size_t operator()(uint64_t x) const {
        static const uint64_t FIXED_RANDOM = chrono::steady_clock::now().time_since_epoch().count();
        return splitmix64(x + FIXED_RANDOM);
    }
};

bool comparator(const pair<long long, long long>& a, const pair<long long, long long>& b) {
    return (a.first - a.second) < (b.first - b.second);//inc
}


unsigned long long power(unsigned long long x,
                                  int y, int p)
{
    unsigned long long res = 1; // Initialize result
 
    x = x % p; // Update x if it is more than or
    // equal to p
 
    while (y > 0)
    {
     
        // If y is odd, multiply x with result
        if (y & 1)
            res = (res * x) % p;
 
        // y must be even now
        y = y >> 1; // y = y/2
        x = (x * x) % p;
    }
    return res;
}
 
// Returns n^(-1) mod p
unsigned long long modInverse(unsigned long long n, 
                                            int p)
{
    return power(n, p - 2, p);
}
 
// Returns nCr % p using Fermat's little
// theorem.
unsigned long long fac[N + 1];
void calc(){
    fac[0] = 1;
    for (int i = 1; i <= N; i++)
        fac[i] = (fac[i - 1] * i) % mod;
}
unsigned long long nCrModPFermat(unsigned long long n,
                                 long long r, long long p)
{
    // If n<r, then nCr should return 0
    if (n < r)
        return 0;
    // Base case
    if (r == 0)
        return 1;

    if(r<0) return 0;

    // cout<<n<<"" ""<<r<<endl;
 
    // Fill factorial array so that we
    // can find all factorial of r, n
    // and n-r
 
    return (fac[n] * modInverse(fac[r], p) % p
            * modInverse(fac[n - r], p) % p)
           % p;
}

class Solution {
public:

    ll give(ll n){
        ll prod=1;
        while(n){
            ll num=n%10;
            n/=10;
            prod*=num;
        }

        return prod;
    }
    int smallestNumber(int n, int t) {
        int ans=-1;
        for(int i=n;i<=100*n;i++){
            if(give(i)%t) continue;
            ans=i;
            break;
        }

        return ans;
        
    }
};











// int main() {
//     FIO;

//     return 0;
// }
",1447656466
Vaid Aaryan,cool_coder_007,642,3640,cpp,"#include <bits/stdc++.h>
using namespace std;
#define all(x) x.begin(),x.end()
class Solution {
public:

int solve(vector<pair<int, int>>& segments) {
    vector<pair<int, int>> events;
    for (const auto& seg : segments) {
        events.push_back({seg.first, 1});      // Start of a segment
        events.push_back({seg.second + 1, -1}); // End of a segment (+1 to stop at seg.second)
    }

    sort(events.begin(), events.end());

    int maxCount = 0;
    int activeSegments = 0;
    for (const auto& event : events) {
        activeSegments += event.second;
        maxCount = max(maxCount, activeSegments);
    }

    return maxCount;
}


    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        sort(all(nums));
        unordered_map<int,int> hsh;
        for(auto &it:nums){
            hsh[it]++;
        }
        int ans=0;

         vector<pair<int, int>> a;
        for(auto &it:nums){
            a.push_back({it-k,it+k});
        }
        ans=max(ans,min(solve(a),numOperations));

        for(int i=0;i<nums.size();i++){
            // int val=v[i];
            int ind1=lower_bound(all(nums),nums[i]-k)-nums.begin();
            int imp1=lower_bound(all(nums),nums[i])-nums.begin();
            imp1--;
            int ind2=upper_bound(all(nums),nums[i]+k)-nums.begin();
            int imp2=upper_bound(all(nums),nums[i])-nums.begin();
            ind2--;
            int cur=ind2-imp2+1;
            cur+=imp1-ind1+1;
           
            int res=hsh[nums[i]]+min(cur,numOperations);
            ans=max(ans,res);
        }

       


        return ans;
        
    }
};











// int main() {
//     FIO;
//     int n,k,num;
//     cin>>n>>k>>num;
//     vector<int> v(n);
//     Solution s;
//     f(i,0,n) cin>>v[i];
//     cout<<s.maxFrequency(v,k,num);

//     return 0;
// }
",1447769270
avi_dey,avi_dey,643,3622,java,"class Solution {
    public int maxFrequency(int[] nums, int k, int numOperations) {
        Map<Integer, Integer> freq = new HashMap<>();
        List<int[]> events = new ArrayList<>();
        
        for (int num : nums) {
            freq.put(num, freq.getOrDefault(num, 0) + 1);
            events.add(new int[]{num - k, 1});
            events.add(new int[]{num + k + 1, -1});
        }
        
        Set<Integer> points = new TreeSet<>();
        for (int[] event : events) {
            points.add(event[0]);
        }
        for (int num : freq.keySet()) {
            points.add(num);
        }

        events.sort(Comparator.comparingInt(a -> a[0]));

        int idx = 0, currentOverlap = 0, maxFreq = 0;
        
        for (int t : points) {
            while (idx < events.size() && events.get(idx)[0] <= t) {
                currentOverlap += events.get(idx)[1];
                idx++;
            }
            
            int actualCount = freq.getOrDefault(t, 0);
            maxFreq = Math.max(maxFreq, actualCount + Math.min(numOperations, currentOverlap - actualCount));
        }

        return maxFreq;
    }
}",1447775021
avi_dey,avi_dey,643,3626,java,"class Solution {
    private int productOfDigits(int n) {
        if(n % 10 == 0) return 0;
        int product = 1;
        while(n > 0) {
            product = product * (n % 10);
            n /= 10;
        }
        return product;
    }
    public int smallestNumber(int n, int t) {
        int i = 0;
        for(i = n; i <= 100; i++) {
            int prod = productOfDigits(i);
            if(prod % t == 0) break;
        }
        return i;
    }
}",1447696828
avi_dey,avi_dey,643,3640,java,"class Solution {
    public int maxFrequency(int[] nums, int k, int numOperations) {
        Map<Integer, Integer> freq = new HashMap<>();
        List<int[]> events = new ArrayList<>();
        
        for (int num : nums) {
            freq.put(num, freq.getOrDefault(num, 0) + 1);
            events.add(new int[]{num - k, 1});
            events.add(new int[]{num + k + 1, -1});
        }
        
        Set<Integer> points = new TreeSet<>();
        for (int[] event : events) {
            points.add(event[0]);
        }
        for (int num : freq.keySet()) {
            points.add(num);
        }

        events.sort(Comparator.comparingInt(a -> a[0]));

        int idx = 0, currentOverlap = 0, maxFreq = 0;
        
        for (int t : points) {
            while (idx < events.size() && events.get(idx)[0] <= t) {
                currentOverlap += events.get(idx)[1];
                idx++;
            }
            
            int actualCount = freq.getOrDefault(t, 0);
            maxFreq = Math.max(maxFreq, actualCount + Math.min(numOperations, currentOverlap - actualCount));
        }

        return maxFreq;
    }
}",1447776685
Rishabh Jain,rishabh_jain_1,644,3622,java,"class Solution {
    int upperBound(int num, int k, int[] arr) {
        int left = 0, right = arr.length - 1;
        int ans = arr.length - 1;

        while (left <= right) {
            int mid = (left + right) / 2;
            if ((arr[mid] - k) <= num) {
                ans = mid;
                left = mid + 1;
            } else {
                right = mid - 1;
            }
        }

        return ans;
    }

    int lowerBound(int num, int k, int[] arr) {
        int left = 0, right = arr.length - 1;
        int ans = 0;

        while (left <= right) {
            int mid = (left + right) / 2;
            if ((arr[mid] + k) >= num) {
                ans = mid;
                right = mid - 1;
            } else {
                left = mid + 1;
            }
        }

        return ans;
    }
    
    public int maxFrequency(int[] nums, int k, int numOperations) {
        Arrays.sort(nums);

        Map<Integer, Integer> map = new HashMap<>();
        for (int i : nums) {
            map.put(i, map.getOrDefault(i, 0) + 1);
        }

        int maxFreq = 1;

        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            int num = entry.getKey();
            int freq = entry.getValue();

            int up = upperBound(num, k, nums);
            int down = lowerBound(num, k, nums);

            int range = up - down + 1 - freq;
            maxFreq = Math.max(maxFreq, freq + Math.min(range, numOperations));

            int pseudoNum = num + k;

            up = upperBound(pseudoNum, k, nums);
            down = lowerBound(pseudoNum, k, nums);

            range = up - down + 1;
            maxFreq = Math.max(maxFreq, Math.min(range, numOperations));
        }

        return maxFreq;
    }
}",1447776184
Rishabh Jain,rishabh_jain_1,644,3626,java,"class Solution {
    int product(int n) {
        int prod = 1;
        while (n > 0) {
            prod *= n % 10;
            n /= 10;
        }

        return prod;
    }
    
    public int smallestNumber(int n, int t) {
        int num = n;
        while (true) {
            if (product(num) % t == 0) return num;
            else num++;
        }
    }
}",1447657832
Rishabh Jain,rishabh_jain_1,644,3640,java,"class Solution {
    int upperBound(int num, int k, int[] arr) {
        int left = 0, right = arr.length - 1;
        int ans = arr.length - 1;

        while (left <= right) {
            int mid = (left + right) / 2;
            if ((arr[mid] - k) <= num) {
                ans = mid;
                left = mid + 1;
            } else {
                right = mid - 1;
            }
        }

        return ans;
    }

    int lowerBound(int num, int k, int[] arr) {
        int left = 0, right = arr.length - 1;
        int ans = 0;

        while (left <= right) {
            int mid = (left + right) / 2;
            if ((arr[mid] + k) >= num) {
                ans = mid;
                right = mid - 1;
            } else {
                left = mid + 1;
            }
        }

        return ans;
    }
    
    public int maxFrequency(int[] nums, int k, int numOperations) {
        Arrays.sort(nums);

        Map<Integer, Integer> map = new HashMap<>();
        for (int i : nums) {
            map.put(i, map.getOrDefault(i, 0) + 1);
        }

        int maxFreq = 1;

        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            int num = entry.getKey();
            int freq = entry.getValue();

            int up = upperBound(num, k, nums);
            int down = lowerBound(num, k, nums);

            int range = up - down + 1 - freq;
            maxFreq = Math.max(maxFreq, freq + Math.min(range, numOperations));

            int pseudoNum = num + k;

            up = upperBound(pseudoNum, k, nums);
            down = lowerBound(pseudoNum, k, nums);

            range = up - down + 1;
            maxFreq = Math.max(maxFreq, Math.min(range, numOperations));
        }

        return maxFreq;
    }
}",1447776906
Ratana Jangir,Rjangir,645,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        unordered_map<int, int> cnt;
        vector<pair<int, int>> vp;
        for (int n : nums) {
            cnt[n]++;
        }
        for (int n : nums) {
            int L = n - k, R = n + k;
            vp.push_back({L, +1});
            vp.push_back({R + 1, -1});
        }
        sort(vp.begin(), vp.end());
        
        set<int> xst;
        for (auto& p : cnt) xst.insert(p.first);
        for (auto& e : vp) xst.insert(e.first);
        
        vector<int> xval(xst.begin(), xst.end());
        int max_f = 0, cov = 0, idx = 0, n_ev = vp.size();
        
        for (int x : xval) {
            while (idx < n_ev && vp[idx].first <= x) {
                cov += vp[idx].second;
                idx++;
            }
            int cnt_x = cnt[x];
            int adj_elems = cov - cnt_x;
            int total_freq = cnt_x + min(numOperations, adj_elems);
            max_f = max(max_f, total_freq);
        }
        
        return max_f;
    }
};",1447753400
Ratana Jangir,Rjangir,645,3626,cpp,"class Solution {
public:
    int prod(int num) {
        int res = 1;
        while (num > 0) {
            int d = num % 10;
            res *= d;
            num /= 10;
        }
        return res;
    }
    int smallestNumber(int n, int t) {
        int num = n;
        while (true) {
            int p = prod(num);
            if (p % t == 0) {
                return num;
            }
            num++;
        }
        return 0;
    }
};",1447674773
Ratana Jangir,Rjangir,645,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        unordered_map<int, int> cnt;
        vector<pair<int, int>> vp;
        for (int n : nums) {
            cnt[n]++;
        }
        for (int n : nums) {
            int L = n - k, R = n + k;
            vp.push_back({L, +1});
            vp.push_back({R + 1, -1});
        }
        sort(vp.begin(), vp.end());
        
        set<int> xst;
        for (auto& p : cnt) xst.insert(p.first);
        for (auto& e : vp) xst.insert(e.first);
        
        vector<int> xval(xst.begin(), xst.end());
        int max_f = 0, cov = 0, idx = 0, n_ev = vp.size();
        
        for (int x : xval) {
            while (idx < n_ev && vp[idx].first <= x) {
                cov += vp[idx].second;
                idx++;
            }
            int cnt_x = cnt[x];
            int adj_elems = cov - cnt_x;
            int total_freq = cnt_x + min(numOperations, adj_elems);
            max_f = max(max_f, total_freq);
        }
        
        return max_f;
    }
};",1447754009
Anshul Sharma,anshul7sh,646,3622,cpp,"class Solution {
private:
    static bool cmp(const vector<int>& a,const vector<int>& b) {
        return a[0]<b[0];
    }
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        vector<int> lineSweep(200007,0);
        vector<int> freqCount(200007,0);
        
        for(auto x:nums) {
            lineSweep[max(0,x-k)]++;
            lineSweep[x+k+1]--;
            
            freqCount[x]++;
        }
        
        int res =0;
        int currCount=0;
        
        for(int i=0;i<200007;i++) {
            currCount+=lineSweep[i];
            int currEle = freqCount[i];
            
            int maxOpsEle = min(currCount-currEle,numOperations);
            
            res=max(res,maxOpsEle+currEle);
        }
        
        return res;
    }
    
    int lower_bound(vector<vector<int>>& arr,int X) {
        int mid;
        int N=arr.size();
 
        int low = 0;
        int high = N;

        while (low < high) {
            mid = low + (high - low) / 2;

            if (X <= arr[mid][0]) {
                high = mid;
            }
            else {
                low = mid + 1;
            }
        }

        if(low < N && arr[low][0] < X) {
           low++;
        }

        return low;
    }
    
    int upper_bound(vector<vector<int>>& arr,int X)
    {
        int mid;
        int N=arr.size();

        int low = 0;
        int high = N;

        while (low < high) {
            mid = low + (high - low) / 2;

            if (X >= arr[mid][0]) {
                low = mid + 1;
            }
            else {
                high = mid;
            }
        }

        if(low < N && arr[low][0] <= X) {
           low++;
        }
        
        return low;
    }
};",1447729813
Anshul Sharma,anshul7sh,646,3626,cpp,"class Solution {
public:
    int smallestNumber(int n, int t) {
        while(1) {
            int prod = getProd(n);
            
            if(prod%t==0)
                return n;
            n++;
        }
    }
    
    int getProd(int n) {
        int prod = 1;
        
        while(n) {
            prod*=(n%10);
            n/=10;
        }
        
        return prod;
    }
};",1447653609
Anshul Sharma,anshul7sh,646,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        map<int,int> lineSweep;
        map<int,int> freqCount;
        
        for(auto x:nums) {
            lineSweep[max(0,x-k)]++;
            lineSweep[x+k+1]--;
            lineSweep[x]+=0;
            
            freqCount[x]++;
        }
        
        int res =0;
        int currCount=0;
        int prevNum = 0;
        
        for(auto x:lineSweep) {
            int i = x.first;
            currCount+=lineSweep[i];
            int currEle = freqCount[i];
            
            int maxOpsEle = min(currCount-currEle,numOperations);
            
            res=max(res,maxOpsEle+currEle);
            
            prevNum = i;
        }
        
        
        
        return res;
    }
};

/*

0 -> 1
6 -> 1
11 -> -1
15 -> 2
17 -> -1
26-> -2

*/",1447769585
Mradul,mradul_10_,647,3622,java,"import java.util.Arrays;

class Solution {
    public int maxFrequency(int[] nums, int k, int numOperations) {
        // Find the maximum number in the array
        int maxNum = Arrays.stream(nums).max().orElse(0);
        int size = maxNum + k + 2;

        // Initialize frequency and prefix sum arrays
        int[] freq = new int[size];
        for (int num : nums) {
            freq[num]++;
        }

        // Compute the prefix sum of frequencies
        int[] pre = new int[size];
        pre[0] = freq[0];
        for (int i = 1; i < size; i++) {
            pre[i] = pre[i - 1] + freq[i];
        }

        // Initialize result variable to track the maximum frequency
        int result = 0;

        // Iterate over each possible number x
        for (int x = 0; x < size; x++) {
            if (freq[x] == 0 && numOperations == 0) {
                continue; // Skip if no operations left and the number does not appear
            }

            // Define the range [left, right] that we can adjust
            int left = Math.max(0, x - k);
            int right = Math.min(size - 1, x + k);

            // Total frequency in the range [left, right]
            int totalInRange = pre[right] - (left > 0 ? pre[left - 1] : 0);
            
            // Calculate how many elements we can adjust
            int canAdjust = totalInRange - freq[x];
            
            // Calculate the total possible frequency of x
            int total = freq[x] + Math.min(numOperations, canAdjust);
            
            // Update the result to the maximum frequency possible
            result = Math.max(result, total);
        }

        // Return the maximum frequency
        return result;
    }
}

",1447758177
Mradul,mradul_10_,647,3626,java,"class Solution {
    public int smallestNumber(int n, int t) {
        int product=1;
        String str=Integer.toString(n);
        for(int i=0;i<str.length();i++){
            char ch=str.charAt(i);
            product*=ch-'0';
        }
        if(product%t==0){
            return n;
        }
        return smallestNumber(n+1,t);
    }
}",1447673409
Mradul,mradul_10_,647,3640,java,"import java.util.*;

class Solution {
    public int maxFrequency(int[] nums, int k, int ops) {
        Map<Integer, Integer> count = new HashMap<>();
        List<int[]> events = new ArrayList<>();

        for (int num : nums) {
            count.put(num, count.getOrDefault(num, 0) + 1);
            events.add(new int[]{num - k, 1});
            events.add(new int[]{num + k + 1, -1});
        }

        Set<Integer> uniquePts = new TreeSet<>();
        for (int[] e : events) {
            uniquePts.add(e[0]);
        }
        for (Map.Entry<Integer, Integer> p : count.entrySet()) {
            uniquePts.add(p.getKey());
        }

        Collections.sort(events, Comparator.comparingInt(a -> a[0]));

        int i = 0, currOverlap = 0, maxFreq = 0;

        for (int pt : uniquePts) {
            while (i < events.size() && events.get(i)[0] <= pt) {
                currOverlap += events.get(i)[1];
                i++;
            }

            int baseCount = count.getOrDefault(pt, 0);
            int freq = baseCount + Math.min(ops, currOverlap - baseCount);
            maxFreq = Math.max(maxFreq, freq);
        }

        return maxFreq;
    }
}
",1447761990
Mridul Madhav Jindal,MMjx16,650,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        int maxNum_ = *max_element(nums.begin(), nums.end());
        int range_ = maxNum_ + k + 2;
        vector<int> count_(range_, 0);

        for (int num_ : nums) {
            count_[num_]++;
        }

        vector<int> prefixSum_(range_, 0);
        prefixSum_[0] = count_[0];
        int i_ = 1;
        while (i_ < range_) {
            prefixSum_[i_] = prefixSum_[i_ - 1] + count_[i_];
            ++i_;
        }

        int maxFreq_ = 0;
        int target_ = 0;
        while (target_ < range_) {
            if (count_[target_] == 0 && numOperations == 0) {
                ++target_;
                continue;
            }

            int leftLimit_ = max(0, target_ - k);
            int rightLimit_ = min(range_ - 1, target_ + k);
            int totalRange_ = prefixSum_[rightLimit_] - (leftLimit_ > 0 ? prefixSum_[leftLimit_ - 1] : 0);
            int possibleAdjustments_ = totalRange_ - count_[target_];
            int finalFreq_ = count_[target_] + min(numOperations, possibleAdjustments_);
            maxFreq_ = max(maxFreq_, finalFreq_);

            ++target_;
        }

        return maxFreq_;
    }
};
",1447762372
Mridul Madhav Jindal,MMjx16,650,3626,cpp,"class Solution {
private:
    int digit_product(int number){
        int pro=1;
        for(;number>0;number/=10){
            pro*= number%10;
        }
        return pro;
        
    }
public:
    int smallestNumber(int n, int t) {
        while(true){
            if(digit_product(n)%t==0){
                return n;
            }
            n++;
        }
        
    }
};",1447704936
Mridul Madhav Jindal,MMjx16,650,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        int n = nums.size();
        map<int, int> occurrences;
        vector<pair<int, int>> actions;

        int i = 0;
        while (i < n) {
            int val = nums[i];
            occurrences[val]++;
            actions.push_back({val - k, 1});
            actions.push_back({val + k + 1, -1});
            i++;
        }

        set<int> positions;
        auto actionIter = actions.begin();
        while (actionIter != actions.end()) {
            positions.insert(actionIter->first);
            actionIter++;
        }
        
        auto occIter = occurrences.begin();
        while (occIter != occurrences.end()) {
            positions.insert(occIter->first);
            occIter++;
        }

        sort(actions.begin(), actions.end());

        int ptr = 0;
        int activeOps = 0;
        int maxCount = 0;
        int currentValCount = 0;

        auto posIter = positions.begin();
        while (posIter != positions.end()) {
            int point = *posIter;

            while (ptr < actions.size() && actions[ptr].first <= point) {
                activeOps += actions[ptr].second;
                ptr++;
            }

            currentValCount = occurrences.count(point) ? occurrences[point] : 0;
            int possibleMax = currentValCount + min(numOperations, activeOps - currentValCount);
            maxCount = max(maxCount, possibleMax);

            posIter++;
        }

        return maxCount;
    }
};
",1447750052
raghibh2004,raghibh2004,651,3622,cpp,"class Solution {
public:
    
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        vector<int>pref(300005,0);
        int zero=100004;
        vector<int>freq(200005,0);
        for(auto x:nums){
            int a=x-k+zero;
            int b=x+k+zero+1;
            pref[a]++;
            pref[b]--;
            freq[x]++;
        }
        int maxi=0;
        for(int i=1;i<300005;i++){
            pref[i]+=pref[i-1];
            if(i>=zero){
                 int movesreq=pref[i]-freq[i-zero];
                if(movesreq>=numOperations){
                    maxi=max(maxi,pref[i]-(movesreq-numOperations));
                }
                else{
                    maxi=max(maxi,pref[i]);
                }
            }   
            else{
                maxi=max(maxi,min(numOperations,pref[i]));

            }
            
        }
        return maxi;
        
    }
};",1447730110
raghibh2004,raghibh2004,651,3626,cpp,"class Solution {
public:
    bool check(int n,int t){
        long long uu=1;
        while(n>0){
            int rem=n%10;
            uu*=rem;
            n/=10;
        }
        if(uu%t==0)
            return 1;
        return 0;
    }
    int smallestNumber(int n, int t) {
        while(true){
            if(check(n,t)){
                return n;
            }
            n++;
        }
    }
};",1447658620
raghibh2004,raghibh2004,651,3640,cpp,"class Solution {
public:
int findPlatform(int arr[], int dep[], int n)
{
    // Sort arrival and departure arrays
    sort(arr, arr + n);
    sort(dep, dep + n);

    // plat_needed indicates number of platforms
    // needed at a time
    int plat_needed = 1, result = 1;
    int i = 1, j = 0;

    // Similar to merge in merge sort to process
    // all events in sorted order
    while (i < n && j < n) {
        // If next event in sorted order is arrival,
        // increment count of platforms needed
        if (arr[i] <= dep[j]) {
            plat_needed++;
            i++;
        }

        // Else decrement count of platforms needed
        else if (arr[i] > dep[j]) {
            plat_needed--;
            j++;
        }

        // Update result if needed
        if (plat_needed > result)
            result = plat_needed;
    }

    return result;
}
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        int arr[nums.size()];
        int dep[nums.size()];
        map<int,int>mp;
        int i=0;
        for(auto x:nums){
           arr[i]=-k+x;
            dep[i]=k+x;
            i++;
            mp[x]++;
            
        }
        sort(nums.begin(),nums.end());
        int ans=0;
for(auto x:nums){
    int lower = x - k;
    int upper = x + k;
    
    auto lowerIt = std::lower_bound(nums.begin(), nums.end(), lower);
    
    auto upperIt = std::upper_bound(nums.begin(), nums.end(), upper);
    
    int dd= upperIt - lowerIt;
    int req=dd-mp[x];
    if(req>=numOperations){
        ans=max(ans,dd-(req-numOperations));
    }
    else{
        ans=max(ans,dd);
    }
    // cout<<ans<<endl;
}
        return max(min(findPlatform(arr,dep,nums.size()),numOperations),ans);
        
    }
};",1447777409
_md_belal_azam,_md_belal_azam,653,3622,java,"import java.util.ArrayList;
import java.util.HashMap;

class Solution {
    public int calculateMaxFrequency(ArrayList<Integer> numList, int rangeLimit, int maxOperations) {
        int maxNum = findMax(numList);
        
        HashMap<Integer, Integer> frequencyMap = buildFrequencyMap(numList);
        HashMap<Integer, Integer> prefixSumMap = buildPrefixSum(frequencyMap, maxNum + rangeLimit + 2);
        
        int maxFrequency = 0;
        int currentValue = 0;
        
        do {
            if (frequencyMap.getOrDefault(currentValue, 0) == 0 && maxOperations == 0) {
                currentValue++;
                continue;
            }

            int leftBound = Math.max(0, currentValue - rangeLimit);
            int rightBound = currentValue + rangeLimit;
            int totalInRange = calculateTotalInRange(prefixSumMap, leftBound, rightBound);
            
            int adjustmentsAvailable = totalInRange - frequencyMap.getOrDefault(currentValue, 0);
            int possibleFrequency = frequencyMap.getOrDefault(currentValue, 0) + Math.min(maxOperations, adjustmentsAvailable);
            maxFrequency = Math.max(maxFrequency, possibleFrequency);
            
            currentValue++;
        } while (currentValue <= maxNum + rangeLimit + 1);
        
        return maxFrequency;
    }

    private int findMax(ArrayList<Integer> numList) {
        int maxVal = 0;
        for (int num : numList) {
            maxVal = Math.max(maxVal, num);
        }
        return maxVal;
    }

    private HashMap<Integer, Integer> buildFrequencyMap(ArrayList<Integer> numList) {
        HashMap<Integer, Integer> frequencyMap = new HashMap<>();
        for (int num : numList) {
            frequencyMap.put(num, frequencyMap.getOrDefault(num, 0) + 1);
        }
        return frequencyMap;
    }

    private HashMap<Integer, Integer> buildPrefixSum(HashMap<Integer, Integer> frequencyMap, int size) {
        HashMap<Integer, Integer> prefixSumMap = new HashMap<>();
        prefixSumMap.put(0, frequencyMap.getOrDefault(0, 0));
        
        for (int i = 1; i < size; i++) {
            int currentFreq = frequencyMap.getOrDefault(i, 0);
            prefixSumMap.put(i, prefixSumMap.getOrDefault(i - 1, 0) + currentFreq);
        }
        
        return prefixSumMap;
    }

    private int calculateTotalInRange(HashMap<Integer, Integer> prefixSumMap, int leftBound, int rightBound) {
        int totalRight = prefixSumMap.getOrDefault(rightBound, 0);
        int totalLeft = leftBound > 0 ? prefixSumMap.getOrDefault(leftBound - 1, 0) : 0;
        return totalRight - totalLeft;
    }

    public int maxFrequency(int[] nums, int rangeLimit, int maxOperations) {
        ArrayList<Integer> numList = new ArrayList<>();
        for (int num : nums) {
            numList.add(num);
        }
        return calculateMaxFrequency(numList, rangeLimit, maxOperations);
    }
}",1447706350
_md_belal_azam,_md_belal_azam,653,3626,java,"class Solution {
    public int smallestNumber(int initialNumber, int targetDivisor) {
        int currentNumber = initialNumber;
        
        do {
            if (checkDivisibility(currentNumber, targetDivisor)) {
                return currentNumber;
            }
            currentNumber++;
        } while (true);
    }

    private boolean checkDivisibility(int number, int targetDivisor) {
        int productOfDigits = calculateProductOfDigits(number);
        return productOfDigits % targetDivisor == 0;
    }

    private int calculateProductOfDigits(int number) {
        int productOfDigits = 1;
        int tempNumber = number;
        
        while (tempNumber > 0) {
            int digit = tempNumber % 10;
            productOfDigits *= digit;
            tempNumber /= 10;
            if (productOfDigits == 0) break;
        }
        
        return productOfDigits;
    }
}",1447675598
_md_belal_azam,_md_belal_azam,653,3640,java," import java.util.*;

class Solution {
    public int maxFrequency(int[] numbers, int range, int maxOperations) {
        Map<Integer, Integer> frequencyMap = new HashMap<>();
        List<int[]> intervalMarkers = new ArrayList<>();

        for (int number : numbers) {
            frequencyMap.put(number, frequencyMap.getOrDefault(number, 0) + 1);
            intervalMarkers.add(new int[]{number - range, 1});
            intervalMarkers.add(new int[]{number + range + 1, -1});
        }

        TreeMap<Integer, Integer> orderedPoints = collectUniquePoints(frequencyMap, intervalMarkers);
        intervalMarkers.sort(Comparator.comparingInt(a -> a[0]));

        return calculateMaxFrequency(orderedPoints, frequencyMap, intervalMarkers, maxOperations);
    }

    private TreeMap<Integer, Integer> collectUniquePoints(Map<Integer, Integer> freqMap, List<int[]> markers) {
        TreeMap<Integer, Integer> uniquePoints = new TreeMap<>();
        for (int[] marker : markers) {
            uniquePoints.put(marker[0], 0);
        }
        for (int key : freqMap.keySet()) {
            uniquePoints.put(key, 0);
        }
        return uniquePoints;
    }

    private int calculateMaxFrequency(TreeMap<Integer, Integer> points, Map<Integer, Integer> freqMap,
                                      List<int[]> markers, int maxOps) {
        int currentOverlap = 0;
        int maxFrequency = 0;
        int markerIndex = 0;

        for (int point : points.keySet()) {
            do {
                if (markerIndex < markers.size() && markers.get(markerIndex)[0] <= point) {
                    currentOverlap += markers.get(markerIndex)[1];
                    markerIndex++;
                } else {
                    break;
                }
            } while (markerIndex < markers.size());

            int baseFrequency = freqMap.getOrDefault(point, 0);
            int possibleFrequency = baseFrequency + Math.min(maxOps, currentOverlap - baseFrequency);
            maxFrequency = Math.max(maxFrequency, possibleFrequency);
        }

        return maxFrequency;
    }
}",1447754956
ninenine,moomfali,655,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int o) {
        int n = nums.size();
        map<int, int> nx, mp;
        vector<pair<int, int>> str;

        for (int i = 0; i < n; ++i) {
            int x = nums[i];
            nx[x]++;
            str.push_back({x - k, 1}); 
            str.push_back({x + k + 1, -1}); 
        }
        sort(str.begin(), str.end());
        
        for (auto& x : str) {
            mp[x.first]++;
        }
        for (auto &p : nx) {
            mp[p.first]++;
        }
        int l = 0, tc = 0, ans = 0, res = 0;
        for (auto[t,x] : mp) {
            while (l < str.size() && str[l].first <= t) {
                tc += str[l].second; l++;
            }
            res = nx.count(t) ? nx[t] : 0;
            int curr = res + min(o, tc - res);
            ans = max(ans, curr);
        }

        return ans;
    }
};",1447754853
ninenine,moomfali,655,3626,cpp,"class Solution {
public:
    int smallestNumber(int n, int t) {
        while(true){
            int x = n;
            int p = 1;
            while(x > 0){
                if(x % 10 == 0){
                    p = 0;
                    x/= 10;
                    continue;
                }
                p = p * (x % 10);
                if(p == 0){
                    return n;
                }
                x/=10;
            }
            cout << p << ""  "" << n << "" "";
            if(p % t == 0){
                return n;
            }
            n++;
        }
        return 1;
    }
};",1447664606
ninenine,moomfali,655,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int o) {
        int n = nums.size();
        map<int, int> nx, mp;
        vector<pair<int, int>> str;

        for (int i = 0; i < n; ++i) {
            int x = nums[i];
            nx[x]++;
            str.push_back({x - k, 1}); 
            str.push_back({x + k + 1, -1}); 
        }
        sort(str.begin(), str.end());
        
        for (auto& x : str) {
            mp[x.first]++;
        }
        for (auto &p : nx) {
            mp[p.first]++;
        }
        int l = 0, tc = 0, ans = 0, res = 0;
        for (auto[t,x] : mp) {
            while (l < str.size() && str[l].first <= t) {
                tc += str[l].second; l++;
            }
            res = nx.count(t) ? nx[t] : 0;
            int curr = res + min(o, tc - res);
            ans = max(ans, curr);
        }

        return ans;
    }
};",1447755167
Anmol Sinha,anmol_iiita,656,3622,cpp,"class Solution {
private:
    void collectFrequencies(vector<int>& nums, unordered_map<int, int>& freq) {
        for(int num : nums) {
            freq[num]++;
        }
    }
    
    void generateEvents(vector<int>& nums, int k, vector<pair<int, int>>& events) {
        for(int num : nums) {
            events.push_back({num - k, 1});
            events.push_back({num + k + 1, -1});
        }
        sort(events.begin(), events.end());
    }
    
    void collectPoints(vector<pair<int, int>>& events, unordered_map<int, int>& freq, set<int>& points) {
        for(auto& event : events) {
            points.insert(event.first);
        }
        for(auto& p : freq) {
            points.insert(p.first);
        }
    }
    
    int findMaxFrequency(set<int>& points, vector<pair<int, int>>& events, 
                        unordered_map<int, int>& freq, int numOperations) {
        int idx = 0;
        int current_overlap = 0;
        int max_freq = 0;
        
        for(int t : points) {
            while(idx < events.size() && events[idx].first <= t) {
                current_overlap += events[idx].second;
                idx++;
            }
            
            int actual_count = freq.count(t) ? freq[t] : 0;
            int possible_freq = actual_count + min(numOperations, current_overlap - actual_count);
            max_freq = max(max_freq, possible_freq);
        }
        return max_freq;
    }
    
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        unordered_map<int, int> freq;
        vector<pair<int, int>> events;
        set<int> points;
        
        collectFrequencies(nums, freq);
        generateEvents(nums, k, events);
        collectPoints(events, freq, points);
        
        return findMaxFrequency(points, events, freq, numOperations);
    }
};",1447734691
Anmol Sinha,anmol_iiita,656,3626,cpp,"class Solution {
public:
    int smallestNumber(int n, int t) {
        while (true) {
            int product = 1;
            int temp = n;
            
            
            while (temp > 0) {
                int digit = temp % 10;
                product *= digit;
                temp /= 10;
            }
            
           
            if (product % t == 0) {
                return n;
            }
            
            
            n++;
        }
        
    }
};",1447654798
Anmol Sinha,anmol_iiita,656,3640,cpp,"class Solution {
private:
    void buildFreqAndEvents(vector<int>& nums, map<int,int>& a, vector<pair<int,int>>& b, int k) {
        int i = 0;
        while(i < nums.size()) {
            a[nums[i]]++;
            b.push_back({nums[i] - k, 1});
            b.push_back({nums[i] + k + 1, -1});
            i++;
        }
    }
    
    void collectPoints(vector<pair<int,int>>& b, map<int,int>& a, set<int>& c) {
        int i = 0;
        while(i < b.size()) {
            c.insert(b[i].first);
            i++;
        }
        
        auto it = a.begin();
        while(it != a.end()) {
            c.insert(it->first);
            it++;
        }
    }
    
    int processPoints(set<int>& c, vector<pair<int,int>>& b, map<int,int>& a, int numOperations) {
        sort(b.begin(), b.end());
        int d = 0;
        int e = 0;
        int f = 0;
        int g = 0;
        
        auto it = c.begin();
        while(it != c.end()) {
            int t = *it;
            while(d < b.size() && b[d].first <= t) {
                e += b[d].second;
                d++;
            }
            
            g = a.count(t) ? a[t] : 0;
            int h = g + min(numOperations, e - g);
            f = max(f, h);
            it++;
        }
        return f;
    }
    
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        map<int,int> a;
        vector<pair<int,int>> b;
        set<int> c;
        
        buildFreqAndEvents(nums, a, b, k);
        collectPoints(b, a, c);
        return processPoints(c, b, a, numOperations);
    }
};",1447747361
henrychienhy,henrychienhy,657,3622,cpp,"class Solution {
public:
    typedef pair<int, int> pii;
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        vector<pii> end_points;
        unordered_map<int, int> freq;
        for(int n: nums) {
            end_points.push_back({n-k, 1});
            end_points.push_back({n, 2});
            end_points.push_back({n+k+1, -1});
            freq[n]++;
        }
        sort(end_points.begin(), end_points.end());
        int res = 0, cur = 0;
        for(auto [n, x]: end_points) {
            if (x != 2)
                cur += x;
            if (x == 2) {
                res = max(res, min(numOperations, cur - freq[n]) + freq[n]);
            }else {
                res = max(res, min(cur, numOperations));
            }
        }
        return res;
        
    }
};",1447768488
henrychienhy,henrychienhy,657,3626,cpp,"class Solution {
public:
    int digit_sum(int n) {
        int x = 1;
        while(n) {
             x *= n % 10;
            n /= 10;
        }
        return x;
    }
    int smallestNumber(int n, int t) {
        int x = n;
        while(digit_sum(x) % t != 0) {
            x++;
        }
        return x;
    }
};",1447743224
henrychienhy,henrychienhy,657,3640,cpp,"class Solution {
public:
    typedef pair<int, int> pii;
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        vector<pii> end_points;
        unordered_map<int, int> freq;
        for(int n: nums) {
            end_points.push_back({n-k, 1});
            end_points.push_back({n, 2});
            end_points.push_back({n+k+1, -1});
            freq[n]++;
        }
        sort(end_points.begin(), end_points.end());
        int res = 0, cur = 0;
        for(auto [n, x]: end_points) {
            if (x != 2)
                cur += x;
            if (x == 2) {
                res = max(res, min(numOperations, cur - freq[n]) + freq[n]);
            }else {
                res = max(res, min(cur, numOperations));
            }
        }
        return res;
    }
};",1447770923
Devansh Vyas,dcodeDV,658,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        int n = nums.size();
        map<int, int> freq;
        vector<pair<int, int>> v;
        for(auto val : nums) {
            freq[val]++;
            v.push_back({val - k, 1});
            v.push_back({val + k + 1, -1});
        }
        set<int> st;
        for(auto p : v) st.insert(p.first);
        for(auto p : freq) st.insert(p.first);
        sort(v.begin(), v.end());
        int i = 0, ans = 1, cur = 0, cnt = 0;
        for(auto it : st) {
            while(i < v.size() && v[i].first <= it) {
                cur += v[i].second;
                i++;
            }
            cnt = freq[it];
            ans = max(ans, cnt + min(numOperations, cur - cnt));
        }
        return ans;
    }
};",1447765813
Devansh Vyas,dcodeDV,658,3626,cpp,"class Solution {
public:
    int smallestNumber(int n, int t) {
        while(true) {
            int copy = n;
            int pdt = 1;
            while(copy) {
                pdt = pdt * (copy % 10);
                copy /= 10;
            }
            if(pdt % t == 0) return n;
            n++;
        }
        return -1;
    }
};",1447654673
Devansh Vyas,dcodeDV,658,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        int n = nums.size();
        map<int, int> freq;
        vector<pair<int, int>> v;
        for(auto val : nums) {
            freq[val]++;
            v.push_back({val - k, 1});
            v.push_back({val + k + 1, -1});
        }
        set<int> st;
        for(auto p : v) st.insert(p.first);
        for(auto p : freq) st.insert(p.first);
        sort(v.begin(), v.end());
        int i = 0, ans = 1, cur = 0, cnt = 0;
        for(auto it : st) {
            while(i < v.size() && v[i].first <= it) {
                cur += v[i].second;
                i++;
            }
            cnt = freq[it];
            ans = max(ans, cnt + min(numOperations, cur - cnt));
        }
        return ans;
    }
};",1447770982
ayush_0077,ayush_0077,659,3622,java,"class Solution {

    class Event{
        int x;
        int sign;

        Event(int x, int sign){
            this.x = x;
            this.sign = sign;
        }
    }
    
    public int maxFrequency(int[] nums, int k, int numOperations) {

        Arrays.sort(nums);
        int n = nums.length;

        List<Event> events = new ArrayList<>();
        Set<Integer> criticalPoints = new HashSet<>();
        HashMap<Integer, Integer> freqMap = new HashMap<>();
        for(int num : nums) {
            freqMap.put(num, freqMap.getOrDefault(num, 0) + 1);
            int s = num - k;
            int e = num + k;

            events.add(new Event(s, +1));
            events.add(new Event(e+1, -1));

            criticalPoints.add(s);
            criticalPoints.add(e+1);
            criticalPoints.add(num);
        }
        events.sort(Comparator.comparingInt(e -> e.x));
        
        List<Integer> sortedPoints = new ArrayList<>(criticalPoints);
        Collections.sort(sortedPoints);
        

        int maxFreqPossible = 1, eventId = 0, overlappingCount = 0;
        for(int x : sortedPoints){
            while(eventId < events.size() && events.get(eventId).x <= x){
                overlappingCount += (events.get(eventId).sign == 1) ? 1 : -1;
                eventId++;
            }

            int currentPointFreq = freqMap.getOrDefault(x, 0);
            int currentPossibleFreq = currentPointFreq + Math.min(numOperations,
                                                        Math.max(0, overlappingCount - currentPointFreq));
            maxFreqPossible = Math.max(maxFreqPossible, currentPossibleFreq);
        }

        return maxFreqPossible;
        
    }
}",1447763477
ayush_0077,ayush_0077,659,3626,java,"class Solution {

    int digitProduct(int num){
        int res = 1;
        while(num > 0){
            int digit = num % 10;
            if(digit == 0) return 0;
            res = res * digit;
            num = num/10;
        }
        return res;
    }
    
    public int smallestNumber(int n, int t) {

        int ans = n;

        while(1 == 1){
            if(digitProduct(ans)%t == 0){
                return ans;
            }
            ans++;
        }
        
    }
}",1447663991
ayush_0077,ayush_0077,659,3640,java,"class Solution {

    class Event{
        int x;
        int sign;

        Event(int x, int sign){
            this.x = x;
            this.sign = sign;
        }
    }
    
    public int maxFrequency(int[] nums, int k, int numOperations) {

        Arrays.sort(nums);
        int n = nums.length;

        List<Event> events = new ArrayList<>();
        Set<Integer> criticalPoints = new HashSet<>();
        HashMap<Integer, Integer> freqMap = new HashMap<>();
        for(int num : nums) {
            freqMap.put(num, freqMap.getOrDefault(num, 0) + 1);
            int s = num - k;
            int e = num + k;

            events.add(new Event(s, +1));
            events.add(new Event(e+1, -1));

            criticalPoints.add(s);
            criticalPoints.add(e+1);
            criticalPoints.add(num);
        }
        events.sort(Comparator.comparingInt(e -> e.x));
        
        List<Integer> sortedPoints = new ArrayList<>(criticalPoints);
        Collections.sort(sortedPoints);
        

        int maxFreqPossible = 1, eventId = 0, overlappingCount = 0;
        for(int x : sortedPoints){
            while(eventId < events.size() && events.get(eventId).x <= x){
                overlappingCount += (events.get(eventId).sign == 1) ? 1 : -1;
                eventId++;
            }

            int currentPointFreq = freqMap.getOrDefault(x, 0);
            int currentPossibleFreq = currentPointFreq + Math.min(numOperations,
                                                        Math.max(0, overlappingCount - currentPointFreq));
            maxFreqPossible = Math.max(maxFreqPossible, currentPossibleFreq);
        }

        return maxFreqPossible;
        
    }
}",1447763108
Apurv Dwivedi,apurvdwivedi518,661,3622,python3,"class Solution:
    def maxFrequency(self, nums, k, numOperations):
        maxVal = max(nums)
        rangeSize = maxVal + k + 2
        countArray = [0] * rangeSize

        for num in nums:
            countArray[num] += 1

        prefixCount = [0] * rangeSize
        prefixCount[0] = countArray[0]
        for i in range(1, rangeSize):
            prefixCount[i] = prefixCount[i - 1] + countArray[i]

        maxFrequency = 0
        for target in range(rangeSize):
            if countArray[target]==0 and numOperations==0:
                continue

            lower = max(0, target - k)
            upper = min(rangeSize-1, target+k)
            totalInRange = prefixCount[upper]-(prefixCount[lower - 1] if lower > 0 else 0)
            adjustmentsPossible = totalInRange-countArray[target]

            achievableFreq = countArray[target]+min(numOperations, adjustmentsPossible)
            maxFrequency = max(maxFrequency, achievableFreq)

        return maxFrequency
",1447723435
Apurv Dwivedi,apurvdwivedi518,661,3626,python3,"class Solution:
    def smallestNumber(self, n: int, t: int) -> int:
        
        while True:
            pro = 1
            temp=n
            while temp > 0:
                pro*=temp%10
                temp//=10
                
            if pro%t==0:
                return n
            n+=1
",1447656768
Apurv Dwivedi,apurvdwivedi518,661,3640,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        freq = defaultdict(int)
        rangeFix = []
        
        for num in nums:
            freq[num] += 1
            rangeFix.append((num - k, 1))
            rangeFix.append((num + k + 1, -1))
        
        uniquePoints = set()
        for adjustment in rangeFix:
            uniquePoints.add(adjustment[0])
        for num in freq:
            uniquePoints.add(num)
        
        rangeFix.sort()       
        idx = 0
        overlapCount = 0
        maxFreq = 0
        countAtPoint = 0
        
        for point in sorted(uniquePoints):
            while idx < len(rangeFix) and rangeFix[idx][0] <= point:
                overlapCount += rangeFix[idx][1]
                idx += 1
            if point in freq:
                countAtPoint = freq[point]
            else:
                countAtPoint = 0
            possibleFreq = countAtPoint + min(numOperations, overlapCount - countAtPoint)
            
            maxFreq = max(maxFreq, possibleFreq)
        
        return maxFreq
",1447747824
sergey_chebotarev,sergey_chebotarev,662,3622,java,"class Solution {
    // @ 1h28m : 2m task + 10m idea + 15m wasted in RangeTree + 1m idea + 13m code + 8m tests & fixes + 10m BUG | TOTAL = 59 min
    public int maxFrequency(int[] nums, int k, int numOperations) {
        int n = nums.length;
        Arrays.sort(nums);

        // map<point, cnt> - number of points below this one
        TreeMap<Integer, Integer> prefixCounters = new TreeMap<>();
        Map<Integer, Integer> freqs = new HashMap<>();
        int prevCnt = 0;
        for (int i = 0; i < n; ) {
            int point = nums[i];
            int cnt = 0;
            while (i < n && point == nums[i]) {
                cnt++;
                i++;
            }
            prefixCounters.put(point, prevCnt);
            prevCnt += cnt;
            freqs.put(point, cnt);
        }
        prefixCounters.put(Integer.MIN_VALUE, 0);
        prefixCounters.put(Integer.MAX_VALUE, n); // all N are below imaginary MAX
        // System.out.println(""Tree: "" + prefixCounters);
        // System.out.println(""Freqs: "" + freqs);

        Set<Integer> candidates = new HashSet();
        TreeMap<Integer, Integer> histogram = new TreeMap<>();
        for (int point : nums) {
            candidates.add(point);
            int start = point - k;
            int end = point + k + 1;
            histogram.put(start, histogram.getOrDefault(start, 0) + 1);
            histogram.put(end, histogram.getOrDefault(end, 0) - 1);
        }
        //int currH = 0;
        for (int point : histogram.keySet()) {
            //currH += histogram.get(point);
            candidates.add(point);
        }

        int result = 0;
        //for (int i = 0; i < n; i++) {
        for (int point : candidates) {
            //int point = nums[i];
            int cnt = freqs.getOrDefault(point, 0);
            // can includ all within: [start, end]
            int start = prefixCounters.ceilingKey(point - k); // minVal <= start <= point
            int end = prefixCounters.higherKey(point + k);    //                    point <= maxVal < end
            int pointsWithinK = prefixCounters.get(end) - prefixCounters.get(start);
            int otherPointsWithinK = pointsWithinK - cnt;
            int maxFreq = cnt + Math.min(otherPointsWithinK, numOperations);
            // System.out.println(""nums[%s] = %s: [%s, %s) -> total = %s, cnt = %s => maxFreq=%s""
            //                    .formatted(i, point, start, end, pointsWithinK, cnt, maxFreq));
            result = Math.max(maxFreq, result);
        }
        return result;
    }
}
/*Ideas:
- we need to find max intersection of ranges centers in nums[i] : [nums[i]-k, nums[i]+1]
- num ops -> ????
    - if ops = N - it's easy
    - if N isn't enough.... TAIT
    - we choose max(src_count(center) + min(overlaps_wo_centers, k))
- build ranges : may take O(N^2) !!! not cool
- index freqs
- build event stream [range_start, center, range_end] ?

- every point can pull OPS neighbours if they are within radius K
    - need to sum numbers within such radius K for each point!
    - SegTree with compression?
- for each point show how many less than it, than we ca find number of points inf pref(end) - pref(start)
*/",1447760872
sergey_chebotarev,sergey_chebotarev,662,3626,java,"class Solution {
    // @ 0h29m : 0m task + 1m idea + 5m code + 2m tests | TOTAL = 7 min
    public int smallestNumber(int n, int t) {
        for (int cand = n; cand < n + 10_000_000; cand++) {
             if (prod(cand) % t == 0) {
                 return cand;
             }
        }
        return -1;
    }

    int prod(int num) {
        int result = 1;
        while (num > 0) {
            result *= (num % 10);
            num /= 10;
        }
        return result;
    }
}
/*Ideas:
- t = f1*f1*f2 , e.g. 12 : 2 * 2 * 3
- min_cand = 223
- n
*/
",1447771360
sergey_chebotarev,sergey_chebotarev,662,3640,java,"class Solution {
    // @ 1h28m : 2m task + 10m idea + 15m wasted in RangeTree + 1m idea + 13m code + 8m tests & fixes + 10m BUG | TOTAL = 59 min
    public int maxFrequency(int[] nums, int k, int numOperations) {
        int n = nums.length;
        Arrays.sort(nums);

        // map<point, cnt> - number of points below this one
        TreeMap<Integer, Integer> prefixCounters = new TreeMap<>();
        Map<Integer, Integer> freqs = new HashMap<>();
        int prevCnt = 0;
        for (int i = 0; i < n; ) {
            int point = nums[i];
            int cnt = 0;
            while (i < n && point == nums[i]) {
                cnt++;
                i++;
            }
            prefixCounters.put(point, prevCnt);
            prevCnt += cnt;
            freqs.put(point, cnt);
        }
        prefixCounters.put(Integer.MIN_VALUE, 0);
        prefixCounters.put(Integer.MAX_VALUE, n); // all N are below imaginary MAX
        // System.out.println(""Tree: "" + prefixCounters);
        // System.out.println(""Freqs: "" + freqs);

        Set<Integer> candidates = new HashSet();
        TreeMap<Integer, Integer> histogram = new TreeMap<>();
        for (int point : nums) {
            candidates.add(point);
            int start = point - k;
            int end = point + k + 1;
            histogram.put(start, histogram.getOrDefault(start, 0) + 1);
            histogram.put(end, histogram.getOrDefault(end, 0) - 1);
        }
        //int currH = 0;
        for (int point : histogram.keySet()) {
            //currH += histogram.get(point);
            candidates.add(point);
        }

        int result = 0;
        //for (int i = 0; i < n; i++) {
        for (int point : candidates) {
            //int point = nums[i];
            int cnt = freqs.getOrDefault(point, 0);
            // can includ all within: [start, end]
            int start = prefixCounters.ceilingKey(point - k); // minVal <= start <= point
            int end = prefixCounters.higherKey(point + k);    //                    point <= maxVal < end
            int pointsWithinK = prefixCounters.get(end) - prefixCounters.get(start);
            int otherPointsWithinK = pointsWithinK - cnt;
            int maxFreq = cnt + Math.min(otherPointsWithinK, numOperations);
            // System.out.println(""nums[%s] = %s: [%s, %s) -> total = %s, cnt = %s => maxFreq=%s""
            //                    .formatted(i, point, start, end, pointsWithinK, cnt, maxFreq));
            result = Math.max(maxFreq, result);
        }
        return result;
    }
}
/*Ideas:
- we need to find max intersection of ranges centers in nums[i] : [nums[i]-k, nums[i]+1]
- num ops -> ????
    - if ops = N - it's easy
    - if N isn't enough.... TAIT
    - we choose max(src_count(center) + min(overlaps_wo_centers, k))
- build ranges : may take O(N^2) !!! not cool
- index freqs
- build event stream [range_start, center, range_end] ?

- every point can pull OPS neighbours if they are within radius K
    - need to sum numbers within such radius K for each point!
    - SegTree with compression?
- for each point show how many less than it, than we ca find number of points inf pref(end) - pref(start)
*/",1447760419
Summy Kumar,SummyKumar,663,3622,cpp,"
class Solution {
public:
    int maxFrequency(vector<int>& n, int k, int o) {
        int a = *max_element(n.begin(), n.end());
        int s = a + k + 2;
        vector<int> f(s, 0);

        for (int x : n) {
            f[x]++;
        }

        vector<int> p(s, 0);
        p[0] = f[0];
        for (int i = 1; i < s; i++) {
            p[i] = p[i - 1] + f[i];
        }

        int r = 0;
        for (int x = 0; x < s; x++) {
            if (f[x] == 0 && o == 0) {
                continue;
            }

            int l = max(0, x - k);
            int g = min(s - 1, x + k);
            int t = p[g] - (l > 0 ? p[l - 1] : 0);
            int c = t - f[x];
            int q = f[x] + min(o, c);
            r = max(r, q);
        }

        return r;
    }
};
",1447732447
Summy Kumar,SummyKumar,663,3626,cpp,"class Solution {
public:
    int productcalculate(int n) {
        int product = 1;
        string s = to_string(n);
        for(int i = 0; i < s.length(); i++) {
            product *= s[i] - '0'; // Convert character to integer by subtracting '0'
        }
        return product;
    }

    int smallestNumber(int n, int t) {
        while(true) {
            int product = productcalculate(n); // Declare and assign product
            if(product % t == 0) {
                return n;
            }
            n += 1;
        }
    }
};",1447721631
Summy Kumar,SummyKumar,663,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& a, int b, int c) {
        int n = a.size();
        unordered_map<int, int> d;
        vector<pair<int, int>> e;
        
        for (int f : a) {
            d[f]++;
            e.emplace_back(f - b, 1);
            e.emplace_back(f + b + 1, -1);
        }

        set<int> g;
        for (const auto& h : e) {
            g.insert(h.first);
        }
        for (const auto& i : d) {
            g.insert(i.first);
        }

        sort(e.begin(), e.end());

        int j = 0, k = 0, l = 0;

        for (int m : g) {
            while (j < e.size() && e[j].first <= m) {
                k += e[j].second;
                j++;
            }

            int n = d.count(m) ? d[m] : 0;
            int o = n + min(c, k - n);
            l = max(l, o);
        }

        return l;
    }
};
",1447755934
smallio,smallio,666,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        vector<pair<int,int>> v;
        // sort(nums.begin(),nums.end());
        unordered_map<int,int> mp;
        for(auto num: nums){
            v.push_back(make_pair(max(num-k,0),1));
            v.push_back(make_pair(num,0));
            v.push_back(make_pair(num+k+1,-1));
            mp[num]++;
        }
        sort(v.begin(),v.end());
        int curcnt=0;

        int ans = 1,last_cont = 0,lastval=-1;
        for(auto pr: v){
            curcnt+=pr.second;
            // cout<<pr.first<<"" ""<<curcnt<<endl;
            
            ans = max(min(curcnt,numOperations+mp[pr.first]),ans);
        }
        
        // for(int i=0;i<nums.size();i++){
        //     auto centre = upper_bound(nums.begin(),nums.end(),nums[i] + k);
        //     auto right = upper_bound(nums.begin(),nums.end(),nums[i] + 2 * k);
        //     ans = max(ans, (int)(right - (nums.begin()+i)));
        //     cout<<(int)(right - (nums.begin()+i))<<endl;
        // }

        

        return ans;
    }
};",1447753353
smallio,smallio,666,3626,cpp,"class Solution {
public:
    int sumdig(int n){
        int sm=1,k=n;
        while(n>0){
            sm*=n%10;
            n/=10;
        }
        // cout<<""original ""<<k<<"" and sum ""<<sm<<endl;
        return sm;
    }
    int smallestNumber(int n, int t) {
        // int times = 10000;
        int ans = n;
        while(1){
            if(sumdig(ans)%t==0) return ans;
            else ans++;
        }
        return 0;
    }
};",1447664238
smallio,smallio,666,3640,cpp,"#define ll long long
class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        vector<pair<int,int>> v;
        // sort(nums.begin(),nums.end());
        unordered_map<ll,ll> mp;
        for(auto num: nums){
            v.push_back(make_pair((ll)max(num-k,0),1));
            v.push_back(make_pair((ll)num,0));
            v.push_back(make_pair((ll)(num+k+1),-1));
            mp[num]++;
        }
        sort(v.begin(),v.end());
        ll curcnt=0;

        ll ans = 1;
        for(auto pr: v){
            curcnt+=pr.second;
            // cout<<pr.first<<"" ""<<curcnt<<endl;
            
            ans = max(min(curcnt,numOperations+mp[pr.first]),ans);
        }
        
        // for(int i=0;i<nums.size();i++){
        //     auto centre = upper_bound(nums.begin(),nums.end(),nums[i] + k);
        //     auto right = upper_bound(nums.begin(),nums.end(),nums[i] + 2 * k);
        //     ans = max(ans, (int)(right - (nums.begin()+i)));
        //     cout<<(int)(right - (nums.begin()+i))<<endl;
        // }

        

        return ans;
    }
};",1447763894
YWJamesLin,ywjameslin,667,3622,php,"class Solution {

    /**
     * @param Integer[] $nums
     * @param Integer $k
     * @param Integer $numOperations
     * @return Integer
     */
    function maxFrequency($nums, $k, $numOperations) {
        sort($nums);
        $counts = [];
        foreach ($nums as $num) {
            ++ $counts[$num];
        }
        $queue = new \SplQueue();
        $begin = min($nums);
        $end = max($nums);
        $now = 0;
        for ($num = $begin; $num < $begin + $k + 1; ++ $num) {
            $now += $counts[$num];
        }
        $ans = min($numOperations, $now - $counts[$begin]) + $counts[$begin];
        for ($num = $begin + 1; $num < $end + 1; ++ $num) {
            if ($counts[$num - $k - 1]) {
                $now -= $counts[$num - $k - 1];
            }
            if ($counts[$num + $k]) {
                $now += $counts[$num + $k];
            }
            $ans = max($ans, min($numOperations, $now - $counts[$num]) + $counts[$num]);
        }

        return $ans;
    }
}",1447720233
YWJamesLin,ywjameslin,667,3626,php,"class Solution {

    /**
     * @param Integer $n
     * @param Integer $t
     * @return Integer
     */
    function smallestNumber($n, $t) {
        $ans = $n;
        while (true) {
            $tmp = $ans;
            $d = 1;
            while ($tmp != 0) {
                $d *= $tmp % 10;
                $tmp = floor($tmp / 10);
            }
            if ($d % $t == 0) {
                return $ans;
            }
            ++ $ans;
        }
    }
}",1447659791
YWJamesLin,ywjameslin,667,3640,php,"class Solution {

    /**
     * @param Integer[] $nums
     * @param Integer $k
     * @param Integer $numOperations
     * @return Integer
     */
    function maxFrequency($nums, $k, $numOperations) {
        sort($nums);
        $counts = [];
        foreach ($nums as $num) {
            ++ $counts[$num];
        }
        $queue = new \SplQueue();
        $begin = min($nums);
        $end = max($nums);
        $now = 0;
        $indexMap = [];
        $indexGroup = [];
        foreach ($counts as $num => $count) {
            $indexMap[$num + $k + 1] = true;
            if ($num - $k > $begin - 1) {
                $indexMap[$num - $k] = true;
            }
            $indexMap[$num] = true;
        }
        unset($indexMap[$begin]);
        foreach ($indexMap as $item => $val) {
            $indexGroup[] = $item;
        }
        sort($indexGroup);
        foreach ($counts as $num => $count) {
            if ($num > $begin + $k) {
                break;
            }
            $now += $counts[$num];
        }
        
        $ans = min($numOperations, $now - $counts[$begin]) + $counts[$begin];
        foreach ($indexGroup as $num) {
            if ($counts[$num - $k - 1]) {
                $now -= $counts[$num - $k - 1];
            }
            if ($counts[$num + $k] && $k != 0) {
                $now += $counts[$num + $k];
            }
            $ans = max($ans, min($numOperations, $now - $counts[$num]) + $counts[$num]);
        }

        return $ans;
    }
}",1447763917
Pavan,CP_Geek,668,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int ops) {
        int m = *max_element(nums.begin(), nums.end());
        int n = m + k + 2;

        vector<int> f(n, 0);
        for (int x : nums) f[x]++;

        vector<int> p(n, 0);
        p[0] = f[0];
        for (int i = 1; i < n; ++i) p[i] = p[i - 1] + f[i];

        int res = 0;
        for (int x = 0; x < n; ++x) {
            if (f[x] == 0 && ops == 0) continue;

            int l = max(0, x - k);
            int r = min(n - 1, x + k);

            int cntInRange = p[r] - (l > 0 ? p[l - 1] : 0);
            int needed = cntInRange - f[x];
            int freq = f[x] + min(ops, needed);

            res = max(res, freq);
        }

        return res;
    }
};
",1447721317
Pavan,CP_Geek,668,3626,cpp,"class Solution {
public:
    int smallestNumber(int n, int t) {
        auto digitProduct = [](int num) -> int {
            int product = 1;
            while (num > 0) {
                int digit = num % 10;
                product *= digit;
                num /= 10;
            }
            return product;
        };
        
        while (true) {
            int product = digitProduct(n);
            if (product % t == 0) {
                return n;
            }
            n++;
        }
        
    }
};
",1447653004
Pavan,CP_Geek,668,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int ops) {
        int n = nums.size();
        
        unordered_map<int, int> mp;
        vector<pair<int, int>> et;
        
        for (int i : nums) {
            mp[i]++;
            et.push_back({i - k, 1});
            et.push_back({i + k + 1, -1});
        }
        
        set<int> pts;
        for (auto i : et) {
            pts.insert(i.first);
        }
        for (auto p : mp) {
            pts.insert(p.first);
        }
        
        sort(et.begin(), et.end());
        
        int i = 0, olp = 0, cnt = 0, res = 0;
        
        for (int pt : pts) {
            while (i < et.size() && et[i].first <= pt) {
                olp += et[i].second;
                i++;
            }
            
            cnt = (mp.count(pt) > 0) ? mp[pt] : 0; 
            int minRes = min(ops, abs(olp - cnt));   
            
            int freq = cnt + minRes;
            
            res = max(res, freq);
        }
        
        return res;
    }
};
",1447771485
Anubhav10done,Anubhav10done,669,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        map<int,int>mp;
        vector<pair<int,int>>v;
        for(int i=0;i<nums.size();i++)
            {
                mp[nums[i]]++;
                v.push_back({nums[i]-k,1});
                v.push_back({nums[i]+k+1,-1});
            }
        set<int>s;
        for(int i=0;i<v.size();i++)
            {
                s.insert(v[i].first);
            }
        for(auto x:mp)
            {
                s.insert(x.first);
            }
        sort(v.begin(),v.end());
        int i=0,sum=0,ans=0,cnt=0;
        for(auto x:s)
            {
                while(i<v.size() && v[i].first<=x)
                {
                sum+=v[i].second;
                i++;
                }
                if(mp.find(x)!=mp.end())
                {
                    cnt=mp[x];
                }
                else
                {
                    cnt=0;
                }
                int val=0;
                if(sum-cnt<numOperations)
                {
                    val=cnt+sum-cnt;
                }
                else
                {
                    val=cnt+numOperations;
                }
                if(val>ans)
                {
                    ans=val;
                }
            }
        return ans;
    }
};",1447758176
Anubhav10done,Anubhav10done,669,3626,cpp,"class Solution {
public:
    int smallestNumber(int n, int t) {
         int i = n;
        while (true) {
            int num = i;
            int prod = 1;
            while (num > 0) {
                int digit = num % 10;
                prod = prod * digit;
                num = num / 10;
            }
            if (prod % t == 0) {
                return i;
            }
            i++;
        }
        return -1;
    }
};",1447691118
Anubhav10done,Anubhav10done,669,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        map<int,int>mp;
        vector<pair<int,int>>v;
        for(int i=0;i<nums.size();i++)
            {
                mp[nums[i]]++;
                v.push_back({nums[i]-k,1});
                v.push_back({nums[i]+k+1,-1});
            }
        set<int>s;
        for(int i=0;i<v.size();i++)
            {
                s.insert(v[i].first);
            }
        for(auto x:mp)
            {
                s.insert(x.first);
            }
        sort(v.begin(),v.end());
        int i=0,sum=0,ans=0,cnt=0;
        for(auto x:s)
            {
                while(i<v.size() && v[i].first<=x)
                {
                sum+=v[i].second;
                i++;
                }
                if(mp.find(x)!=mp.end())
                {
                    cnt=mp[x];
                }
                else
                {
                    cnt=0;
                }
                int val=0;
                if(sum-cnt<numOperations)
                {
                    val=cnt+sum-cnt;
                }
                else
                {
                    val=cnt+numOperations;
                }
                if(val>ans)
                {
                    ans=val;
                }
            }
        return ans;
    }
};",1447764017
4bP7qaO8Qi,4bP7qaO8Qi,671,3622,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        c = Counter(nums)
        mxx = max(nums)
        
        arr = [0]*(mxx+2*k+10)
        val = min(nums)-k
        if val<0:
            val = abs(val)
        else:
            val = 0
        for i in nums:
            arr[i-k+val]+=1
            arr[i+k+1+val]-=1
        for i in range(1,len(arr)):
            arr[i]+=arr[i-1]
        mx = max(c.values())
        n = len(nums)
        for i in range(len(arr)):
            data= arr[i] - c[i-val]
            if data>numOperations:
                mx= max(mx, c[i-val] + numOperations)
            else:
                mx= max(mx, arr[i])
        return mx

""""""
[1,4,5]
1
2
[5,11,20,20]
15
3

2 4

""""""",1447709227
4bP7qaO8Qi,4bP7qaO8Qi,671,3626,python3,"class Solution:
    def smallestNumber(self, n: int, t: int) -> int:
        while n:
            val= 1
            for i in str(n):
                val*=int(i)
            if val%t==0:
                return n
            n+=1",1447657092
4bP7qaO8Qi,4bP7qaO8Qi,671,3640,python3,"class Solution:
    def maxFrequency(self, a: List[int], b: int, c: int) -> int:
        m = defaultdict(int)
        e = []

        for n in a:
            m[n] += 1
            e.append((n - b, 1))
            e.append((n + b + 1, -1))
        i, o, r = 0, 0, 0

        u = set()
        for x in e:
            u.add(x[0])
        for n in m:
            u.add(n)

        e.sort()

        for z in sorted(u):
            while i < len(e) and e[i][0] <= z:
                o += e[i][1]
                i += 1

            p = m[z]
            q = p + min(c, o - p)
            r = max(r, q)
        """"""
        for n in a:
            m[n] += 1
            e.append((n - b, 1))
            e.append((n + b + 1, -1))
        i, o, r = 0, 0, 0

        u = set()
        for x in e:
            u.add(x[0])
        for n in m:
            u.add(n)
        
        """"""

        return r
",1447771874
River Yu,ry51,672,3622,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        nums.sort()
        n = len(nums)

        window = []
        bkp = [0] * (nums[-1] + 1)

        for i in range(n):
            bkp[nums[i]] += 1
        
        maxSame = 0

        for i in range(nums[-1] + 1):
            while len(nums) > 0 and nums[0] <= i + k:
                window.append(nums.pop(0))
            while len(window) > 0 and window[0] < i - k:
                window.pop(0)
            maxSame = max(maxSame, bkp[i] + min(numOperations, len(window) - bkp[i]))

        return maxSame
                ",1447727343
River Yu,ry51,672,3626,python3,"class Solution:
    def smallestNumber(self, n: int, t: int) -> int:
        def dprod(i, t):
            ls = list(str(i))
            prod = 1
            for c in ls:
                prod *= int(c)
            if prod % t == 0: return True
            return False
            
        for i in range(n, n + 10):
            if dprod(i, t): return i",1447656037
River Yu,ry51,672,3640,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        nums.sort()
        n = len(nums)
        nset = sorted(list(set(nums)))

        bkp = {}

        for i in range(n):
            if nums[i] in bkp:
                bkp[nums[i]] += 1
            else:
                bkp[nums[i]] = 1

        window = []
        maxWS = 0

        for i in range(n):
            window.append(nums[i])
            while window[-1] - window[0] > 2*k:
                window.pop(0)
            maxWS = max(maxWS, len(window))

        maxOffCenter = min(numOperations, maxWS)

        maxSame = 0

        window = []

        for c in nset:
            while len(nums) > 0 and nums[0] < c - k:
                nums.pop(0)
            while len(nums) > 0 and nums[0] <= c + k:
                window.append(nums.pop(0))
            while len(window) > 0 and window[0] < c - k:
                window.pop(0)
            maxSame = max(maxSame, bkp[c] + min(numOperations, len(window) - bkp[c]))

        return max(maxSame, maxOffCenter)
        
        ",1447756544
Aman Singh,amans58402,673,3622,cpp,"#include <vector>
#include <algorithm>
using namespace std;

class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int maxOps) {
        int maxVal = *max_element(nums.begin(), nums.end());
        int lim = maxVal + k + 1;
        
        vector<int> cnt(lim, 0);
        
        for (int num : nums) {
            cnt[num]++;
        }

        vector<int> psum(lim, 0);
        psum[0] = cnt[0];
        for (int i = 1; i < lim; ++i) {
            psum[i] = psum[i - 1] + cnt[i];
        }
        int ans = 0;

        for (int x = 0; x < lim; ++x) {
            if (cnt[x] == 0 && maxOps == 0) {
                continue;
            }

            int left = max(0, x - k);
            int right = min(lim - 1, x + k);
            int rangeCount = psum[right] - (left > 0 ? psum[left - 1] : 0);
            int adjustable = rangeCount - cnt[x];

            int temp = cnt[x] + min(maxOps, adjustable);
            ans = max(ans, temp);
        }

        return ans;
    }
};
",1447714183
Aman Singh,amans58402,673,3626,cpp,"class Solution {
public:
    int smallestNumber(int n, int t) {
        for (int i = n; ; ++i) {
            int prd = 1, temp = i;
            bool flag = false;
            
            while (temp > 0) {
                int curr = temp % 10;
                if (curr == 0) {
                    flag = true;
                }
                prd *= curr;
                temp /= 10;
            }
            if (flag || prd % t == 0) {
                return i;
            }
        }
    }
};
",1447655740
Aman Singh,amans58402,673,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        int n = nums.size();
        unordered_map<int, int> mp;
        vector<pair<int, int>> arr;

        for (int num : nums) {
            mp[num]++;
            arr.push_back({num - k, 1});
            arr.push_back({num + k + 1, -1});
        }

        set<int> st;
        for (auto it : arr) {
            st.insert(it.first);
        }
        for (auto it : mp) {
            st.insert(it.first);
        }

        sort(arr.begin(), arr.end());

        int idx = 0;
        int curr = 0;
        int ans = 0;

        for (int t : st) {
            while (idx < arr.size() && arr[idx].first <= t) {
                curr += arr[idx].second;
                idx++;
            }

            int actual_count = (mp.find(t) != mp.end()) ? mp[t] : 0;
            int possible = actual_count + min(numOperations, curr - actual_count);
            ans = max(ans, possible);
        }

        return ans;
    }
};
",1447748538
Sachin Kumar,Sachin_Kushwaha,674,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        int maxNum = *std::max_element(nums.begin(), nums.end());
        int size = maxNum + k + 2;

        std::vector<int> freq(size, 0);
        for (int num : nums) {
            freq[num]++;
        }

        std::vector<int> pre(size, 0);
        pre[0] = freq[0];
        for (int i = 1; i < size; i++) {
            pre[i] = pre[i - 1] + freq[i];
        }

        int result = 0;
        for (int x = 0; x < size; x++) {
            if (freq[x] == 0 && numOperations == 0) {
                continue;
            }

            int left = std::max(0, x - k);
            int right = std::min(size - 1, x + k);

            int totalInRange = pre[right] - (left > 0 ? pre[left - 1] : 0);
            int canAdjust = totalInRange - freq[x];

            int total = freq[x] + std::min(numOperations, canAdjust);
            result = std::max(result, total);
        }

        return result;
    }
};",1447723311
Sachin Kumar,Sachin_Kushwaha,674,3626,cpp,"class Solution {
public:
    int smallestNumber(int n1, int t) {
        for(int i=n1;i<INT_MAX;i++){
            int n = i;
            int x = 1;
            while(n){
                x *= (n%10);
                n/=10;
            }
            if(x%t==0) return i;
        }
        return n1;
    }
};",1447659704
Sachin Kumar,Sachin_Kushwaha,674,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int n) {
        int m = nums.size();
        unordered_map<int, int> f;
        vector<vector<int>> e;

        for (int x : nums) {
            f[x]++;
            e.push_back({x - k, 1});
            e.push_back({x + k + 1, -1});
        }

        set<int> p;
        for (const auto& [x, _] : f) {
            p.insert(x);
        }

        for (const auto& ev : e) {
            p.insert(ev[0]);
        }

        vector<int> sp(p.begin(), p.end());
        sort(e.begin(), e.end());

        int i = 0, o = 0, r = 0;

        for (int t : sp) {
            while (i < e.size() && e[i][0] <= t) {
                o += e[i][1];
                i++;
            }

            int ac = f.count(t) ? f[t] : 0;
            int pf = ac + min(n, o - ac);
            r = max(r, pf);
        }

        return r;
    }
};",1447771985
Manyu,ManyuD,675,3622,python3,"class Solution:
    def maxFrequency(self, nums: List[int], K: int, numOperations: int) -> int:

        c = Counter(nums)
        arr = [(k, v) for k, v in c.items()]
        arr.sort(key = lambda x: x[0])

        pref = []
        curr = 0
        res = 0

        for k, v in arr:
            curr += v
            pref.append(curr)
        
        # print(arr, pref)

        # for i, (cand, freq) in enumerate(arr):
        for cand in range(arr[0][0], arr[-1][0] + 1):

            freq = c[cand]
            
            r = bisect.bisect_right(arr, cand + K, key = lambda x: x[0]) - 1
            l = bisect.bisect_left(arr, cand - K, key = lambda x: x[0])

            tot = pref[r] - (pref[l - 1] if l - 1 >= 0 else 0) 
            sure = freq

            poss = min(tot - sure, numOperations) + sure
            
            # print(cand, (l, r), poss)
            res = max(res, poss)
            

        return res
",1447687932
Manyu,ManyuD,675,3626,python3,"class Solution:
    def smallestNumber(self, n: int, t: int) -> int:

        while True:
            arr = [int(i) for i in str(n)]
            p = 1
            for i in arr:
                p *= i

            if p % t == 0:
                return n

            n += 1
            
            ",1447653799
Manyu,ManyuD,675,3640,python3,"class Solution:
    def maxFrequency(self, nums: List[int], K: int, numOperations: int) -> int:

        nums = [(k, v) for k, v in Counter(nums).items()]
        nums.sort(key = lambda x: x[0])
        n = len(nums)
        res = l = 0
        h = []

        pref = []
        curr = 0
        res = 0

        for k, v in nums:
            curr += v
            pref.append(curr)
            
        for r in range(n):
            heapq.heappush(h, (-nums[r][1], r))

            while h and h[0][-1] < l:
                heapq.heappop(h)
            
            while l < r and nums[r][0] - nums[l][0] > 2 * K:
                l += 1
        
            res = max(res, min(numOperations, pref[r] - (pref[l - 1] if l - 1 >= 0 else 0)))

        
        # print(arr, pref)

        for i, (cand, freq) in enumerate(nums):
        # for cand in range(nums[0][0], nums[-1][0] + 1):

            # freq = c[cand]
            
            r = bisect.bisect_right(nums, cand + K, key = lambda x: x[0]) - 1
            l = bisect.bisect_left(nums, cand - K, key = lambda x: x[0])

            tot = pref[r] - (pref[l - 1] if l - 1 >= 0 else 0) 
            sure = freq

            poss = min(tot - sure, numOperations) + sure
            
            res = max(res, poss)


        
        return res",1447748710
LeetCoach,LeetCoach,676,3622,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        cnt = Counter(nums)
        nums.sort()
        l = 0
        res = 0
        poss = {y for x in nums for y in (x - k, x)}
        l, r = 0, 0
        for x in sorted(poss):
            while r < len(nums) and nums[r] <= x + k:
                r += 1
            while x - nums[l] > k:
                l += 1
            print(cnt[x], l, r)
            res = max(res, cnt[x] + min(numOperations, r - l - cnt[x]))
        return res",1447771832
LeetCoach,LeetCoach,676,3626,python3,"def digits(n):
    while n > 0:
        yield n % 10
        n //= 10

class Solution:
    def smallestNumber(self, n: int, t: int) -> int:
        while prod(digits(n)) % t != 0:
            n += 1
        return n
            ",1447772092
LeetCoach,LeetCoach,676,3640,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        cnt = Counter(nums)
        nums.sort()
        l = 0
        res = 0
        poss = {y for x in nums for y in (x - k, x)}
        l, r = 0, 0
        for x in sorted(poss):
            while r < len(nums) and nums[r] <= x + k:
                r += 1
            while x - nums[l] > k:
                l += 1
            print(cnt[x], l, r)
            res = max(res, cnt[x] + min(numOperations, r - l - cnt[x]))
        return res",1447771588
Suraj Raghuvanshi,Imsurajr,677,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        int n = nums.size();
        set<int> s;

        int nouadgwhyg = numOperations;

        if(n == 1) {return n;}
        if(k==0 || nouadgwhyg == 0) {
            int f = 0;
            unordered_map<int, int> uu;
            for(int i = 0; i < n; i++) {
                uu[nums[i]]++;
            }
             for(auto x : uu) {
                f = max(f, x.second);
            }
            return f;
        }
        
        unordered_map<int, int> uu;
        vector<pair<int, int>> v;

        for (int i = 0; i < n; i++) {
            uu[nums[i]]++;
            v.push_back({nums[i] - k, 1});
            v.push_back({nums[i] + k + 1, -1});
        }

        int m = v.size();
        for (int i = 0; i < m; i++) {
            s.insert(v[i].first);
        }

        m++;
        m--;
        m+=2;
        m-=2;
        
        for (auto x : uu) {
            int fir = x.first;
            s.insert(fir);
        }

        sort(v.begin(), v.end());

        int j = 0, oval = 0, finn = 0, axmilam = 0;
        axmilam++;
        axmilam++;
        axmilam++;
        axmilam++;
        axmilam-=4;

        j++;
        j--;

        finn++;
        finn--;
        
        for (int t : s) {
            while (j < v.size()) {
                if(v[j].first > t) break;
                
                oval += v[j].second;
                j++;
                
            }

            
            axmilam = uu.count(t) ? uu[t] : 0;
            
            int opsdc = min(nouadgwhyg, oval - axmilam), possible_freq = axmilam + opsdc;
            finn = max(finn, possible_freq);
        }

        return finn;
    }
};

",1447762607
Suraj Raghuvanshi,Imsurajr,677,3626,cpp,"class Solution {
public:
    int smallestNumber(int n, int t) {
        int p = n;
        bool o = true;
        while(o) {
            int y = 1, k = p;
            while(k) {
                y *= (k%10);
                k /= 10;
            }
            if(y % t == 0) {
                o = false;
            } else {
                p++;
            }
        }
        return p;
    }
};",1447660256
Suraj Raghuvanshi,Imsurajr,677,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        int n = nums.size();
        set<int> s;

        int nouadgwhyg = numOperations;

        if(n == 1) {return n;}
        if(k==0 || nouadgwhyg == 0) {
            int f = 0;
            unordered_map<int, int> uu;
            for(int i = 0; i < n; i++) {
                uu[nums[i]]++;
            }
             for(auto x : uu) {
                f = max(f, x.second);
            }
            return f;
        }
        
        unordered_map<int, int> uu;
        vector<pair<int, int>> v;

        for (int i = 0; i < n; i++) {
            uu[nums[i]]++;
            v.push_back({nums[i] - k, 1});
            v.push_back({nums[i] + k + 1, -1});
        }

        int m = v.size();
        for (int i = 0; i < m; i++) {
            s.insert(v[i].first);
        }

        m++;
        m--;
        m+=2;
        m-=2;
        
        for (auto x : uu) {
            int fir = x.first;
            s.insert(fir);
        }

        sort(v.begin(), v.end());

        int j = 0, oval = 0, finn = 0, axmilam = 0;
        axmilam++;
        axmilam++;
        axmilam++;
        axmilam++;
        axmilam-=4;

        j++;
        j--;

        finn++;
        finn--;
        
        for (int t : s) {
            while (j < v.size()) {
                if(v[j].first > t) break;
                
                oval += v[j].second;
                j++;
                
            }

            
            axmilam = uu.count(t) ? uu[t] : 0;
            
            int opsdc = min(nouadgwhyg, oval - axmilam), possible_freq = axmilam + opsdc;
            finn = max(finn, possible_freq);
        }

        return finn;
    }
};",1447764606
Aditya_Devansh_007,Aditya_Devansh_007,679,3622,java,"class Solution {
    public int maxFrequency(int[] nums, int k, int numOperations) {
        int max = Integer.MIN_VALUE;
        for (int n : nums) {
            max = Math.max(max, n);
        }

        int maxSize = max + k + 2;
        int[] fq = new int[maxSize];

        for (int n : nums) {
            fq[n]++;
        }

        long[] preCompute = new long[maxSize];
        preCompute[0] = fq[0];
        for (int i = 1; i < maxSize; i++) {
            preCompute[i] = preCompute[i - 1] + fq[i];
        }

        int res = 0;
        for (int x = 0; x < maxSize; x++) {
            if (fq[x] == 0 && numOperations == 0) {
                continue;
            }

            int l = Math.max(0, x - k);
            int r = Math.min(maxSize - 1, x + k);
            long total_in_ranges = preCompute[r] - (l > 0 ? preCompute[l - 1] : 0);
            long adj = total_in_ranges - fq[x];
            long ans = fq[x] + Math.min(numOperations, adj);
            res = Math.max(res, (int) ans);
        }

        return res;
    }
}",1447730576
Aditya_Devansh_007,Aditya_Devansh_007,679,3626,java,"class Solution {
    public int smallestNumber(int n, int t) {
        for(int i=n;i<200;i++){
            int x=product(i);
            if(x%t==0) return i;
        }
        return -1;
    }
    int product (int n){
        int product=1;
        while(n!=0){
            product*=(n%10);
            n/=10;
        }
        System.out.print(product);
        return product;
    }
}",1447666289
Aditya_Devansh_007,Aditya_Devansh_007,679,3640,java,"import java.util.*;

class Solution {
    public int maxFrequency(int[] nums, int k, int numOperations) {
        int n = nums.length;
        Map<Integer, Integer> mp = new HashMap<>();
        List<int[]> list = new ArrayList<>();

        for (int num : nums) {
            mp.put(num, mp.getOrDefault(num, 0) + 1);
            list.add(new int[]{num - k, 1});
            list.add(new int[]{num + k + 1, -1});
        }

        Set<Integer> pts = new HashSet<>();
        for (int[] event : list) {
            pts.add(event[0]);
        }
        for (int key : mp.keySet()) {
            pts.add(key);
        }

        List<Integer> sortPts = new ArrayList<>(pts);
        Collections.sort(sortPts);
        Collections.sort(list, Comparator.comparingInt(a -> a[0]));

        int i = 0;
        int currOverlap = 0;
        int max = 0;

        for (int t : sortPts) {
            while (i < list.size() && list.get(i)[0] <= t) {
                currOverlap += list.get(i)[1];
                i++;
            }

            int actualCount = mp.getOrDefault(t, 0);
            int possibleFreq = actualCount + Math.min(numOperations, currOverlap - actualCount);
            max = Math.max(max, possibleFreq);
        }

        return max;
    }
}",1447764747
mudassir,mudassir084,680,3622,python,"from collections import defaultdict
from sortedcontainers import SortedSet

class Solution:
    def maxFrequency(self, numbers, operationRange, maxOperations):
        arrayLength = len(numbers)
        frequencyCounter = defaultdict(int)
        operationEvents = []
        
        
        for num in numbers:
            frequencyCounter[num] += 1
            operationEvents.append((num - operationRange, 1))
            operationEvents.append((num + operationRange + 1, -1))
        
        
        uniquePositions = SortedSet()
        for event in operationEvents:
            uniquePositions.add(event[0])
        for key in frequencyCounter.keys():
            uniquePositions.add(key)

        operationEvents.sort()

        eventIndex = 0
        cumulativeOperationSum = 0
        highestFrequency = 0
        baseFrequency = 0

        
        for position in uniquePositions:
            
            while eventIndex < len(operationEvents) and operationEvents[eventIndex][0] <= position:
                cumulativeOperationSum += operationEvents[eventIndex][1]
                eventIndex += 1

            
            baseFrequency = frequencyCounter.get(position, 0)
            possibleFrequency = baseFrequency + min(maxOperations, cumulativeOperationSum - baseFrequency)
            
           
            highestFrequency = max(highestFrequency, possibleFrequency)

        return highestFrequency
",1447774232
mudassir,mudassir084,680,3626,python3,"class Solution:
    def calculate_product(self, value):
        result = 1
        while value > 0:
            digit = value % 10
            result *= digit
            value //= 10
        return result

    def smallestNumber(self, start, divisor):
        while True:
            product = self.calculate_product(start)
            if product % divisor == 0:
                return start
            start += 1
",1447779568
mudassir,mudassir084,680,3640,python,"from collections import defaultdict
from sortedcontainers import SortedSet

class Solution:
    def maxFrequency(self, numbers, operationRange, maxOperations):
        arrayLength = len(numbers)
        frequencyCounter = defaultdict(int)
        operationEvents = []
        
        
        for num in numbers:
            frequencyCounter[num] += 1
            operationEvents.append((num - operationRange, 1))
            operationEvents.append((num + operationRange + 1, -1))
        
        
        uniquePositions = SortedSet()
        for event in operationEvents:
            uniquePositions.add(event[0])
        for key in frequencyCounter.keys():
            uniquePositions.add(key)

        operationEvents.sort()

        eventIndex = 0
        cumulativeOperationSum = 0
        highestFrequency = 0
        baseFrequency = 0

        
        for position in uniquePositions:
            
            while eventIndex < len(operationEvents) and operationEvents[eventIndex][0] <= position:
                cumulativeOperationSum += operationEvents[eventIndex][1]
                eventIndex += 1

            
            baseFrequency = frequencyCounter.get(position, 0)
            possibleFrequency = baseFrequency + min(maxOperations, cumulativeOperationSum - baseFrequency)
            
           
            highestFrequency = max(highestFrequency, possibleFrequency)

        return highestFrequency
",1447773842
Sandeep Maurya,sandeep413,681,3622,cpp,"typedef long long ll;
typedef vector<int> vi;
typedef vector<ll> vl;
typedef vector<string> vs;
typedef pair<int, int> pi;
typedef vector<vector<int>> vvi;
typedef vector<vector<ll>> vvl;
typedef vector<pair<int, int>> vpi;
typedef vector<pair<ll, ll>> vpl;
#define pb push_back
#define pp pop_back
#define fori(i, a, b) for (int i = a; i < b; i++)
#define forl(i, a, b) for (ll i = a; i < b; i++)
#define asc(v) sort(v.begin(), v.end())
#define dsc(v) sort(v.rbegin(), v.rend())
#define rev(v) reverse(v.begin(), v.end())
#define print(v)     \
    for (auto a : v) \
        cout << a << "" "";
ll __lcm(ll a, ll b)
{
    return (a / __gcd(a, b)) * b;
}
ll mod = 1e9 + 7;
class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        asc(nums);
        int ans = 1;
        int n = nums.size();
        vi mp(1e5+2,0);
        for(auto a:nums) mp[a]++;
        fori(i,0,min(100000+1,1+nums.back()+k))
        {
            int temp = upper_bound(nums.begin(),nums.end(),i+k)-lower_bound(nums.begin(),nums.end(),i-k);
            if(mp[i]>0)ans = max(ans,min(numOperations,temp-mp[i])+mp[i]);
            else ans=max(ans,min(numOperations,temp));
        }
        return ans;
        
    }
};",1447703612
Sandeep Maurya,sandeep413,681,3626,cpp,"typedef long long ll;
typedef vector<int> vi;
typedef vector<ll> vl;
typedef vector<string> vs;
typedef pair<int, int> pi;
typedef vector<vector<int>> vvi;
typedef vector<vector<ll>> vvl;
typedef vector<pair<int, int>> vpi;
typedef vector<pair<ll, ll>> vpl;
#define pb push_back
#define pp pop_back
#define fori(i, a, b) for (int i = a; i < b; i++)
#define forl(i, a, b) for (ll i = a; i < b; i++)
#define asc(v) sort(v.begin(), v.end())
#define dsc(v) sort(v.rbegin(), v.rend())
#define rev(v) reverse(v.begin(), v.end())
#define print(v)     \
    for (auto a : v) \
        cout << a << "" "";
ll __lcm(ll a, ll b)
{
    return (a / __gcd(a, b)) * b;
}
ll mod = 1e9 + 7;
class Solution {
public:
    int smallestNumber(int n, int t) {
        fori(i,n,n+1000)
        {
            string s = to_string(i);
            ll p=1;
            for(auto c:s) p*=(c-'0');
            if(p%t==0) return i;
        }
        return -1;
    }
};",1447654147
Sandeep Maurya,sandeep413,681,3640,cpp,"typedef long long ll;
typedef vector<int> vi;
typedef vector<ll> vl;
typedef vector<string> vs;
typedef pair<int, int> pi;
typedef vector<vector<int>> vvi;
typedef vector<vector<ll>> vvl;
typedef vector<pair<int, int>> vpi;
typedef vector<pair<ll, ll>> vpl;
#define pb push_back
#define pp pop_back
#define fori(i, a, b) for (int i = a; i < b; i++)
#define forl(i, a, b) for (ll i = a; i < b; i++)
#define asc(v) sort(v.begin(), v.end())
#define dsc(v) sort(v.rbegin(), v.rend())
#define rev(v) reverse(v.begin(), v.end())
#define print(v)     \
    for (auto a : v) \
        cout << a << "" "";
ll __lcm(ll a, ll b)
{
    return (a / __gcd(a, b)) * b;
}
ll mod = 1e9 + 7;
class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        asc(nums);
        int ans = 1;
        int n = nums.size();
        map<int,int> mp;
        for(auto a:nums) mp[a]++;
        fori(i,0,nums.size())
        {
            int temp = upper_bound(nums.begin(),nums.end(),nums[i]+k)-lower_bound(nums.begin(),nums.end(),nums[i]-k);
            ans = max(ans,min(numOperations,temp-mp[nums[i]])+mp[nums[i]]);
        }
        int left=0,right=0;
        int ans2=0;
        while(right<n)
        {
            while(left<right && nums[right]-nums[left]>2*k)
            {
                left++;
            }
            // cout<<right<<"" - ""<<left<<endl;
            ans2 = max(ans2,min(numOperations,right-left+1));
            right++;
        }
        
        return max(ans2,ans);
    }
};",1447740694
Mikasa,HerDaddy_69,682,3622,cpp,"
class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        int maxi = *max_element(nums.begin(), nums.end());
        map<int,int> mp;
        for(auto i : nums) mp[i]++;
        int ans = 0;
        int n = nums.size();

        vector<int> pref(maxi + k+2); 
        for (auto i : mp) {
            pref[i.first] = i.second;
        }
        for (int i = 1; i <= maxi + k + 1; i++) {
            pref[i] += pref[i - 1];
        }

        for (int i = 0; i <= maxi + 1; i++) {
            if (mp[i] == 0 && numOperations == 0) continue;
            int l = max(0, i - k);
            int r = min(maxi + k + 1, i + k);
            int total = pref[r];
            if (l > 0) total -= pref[l - 1];

            ans = max(ans, mp[i] + min(numOperations, total - mp[i]));
        }
        
        return ans;
    }
};

",1447717971
Mikasa,HerDaddy_69,682,3626,cpp,"class Solution {
public:
    int smallestNumber(int n, int t) {
        while (true) {
            int prod = 1;
            int temp = n;

            while (temp > 0) {
                prod *= temp % 10;
                temp /= 10;
            }

            if (prod % t == 0) {
                return n;
            }
            n++; 
        }
        return {};
    }
};
",1447655685
Mikasa,HerDaddy_69,682,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        int n = nums.size(),maxi=0;
        map<int, int> mp;
        vector<pair<int, int>> vp;
        set<int> visited;
        for (auto i : nums) {
            mp[i]++;
            vp.push_back({i - k, 1});
            vp.push_back({i + k + 1, -1});
        }
        for (auto i : vp) visited.insert(i.first);
        for (auto i : mp) visited.insert(i.first);
        for(auto i : mp) maxi = max(maxi,i.second);
        vector<int> dup(begin(visited),end(visited));
        sort(begin(vp),end(vp));
        int idx = 0,curr = 0;

        for (auto i : dup) {
            while (idx < 2*n and vp[idx].first <= i) {
                curr += vp[idx].second;
                idx++;
            }
            int req = mp[i] + min(numOperations, curr-mp[i]);
            maxi = max(maxi, req);
        }
        return maxi;
    }
};
",1447772452
Pranav,pprranav,683,3622,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, m: int) -> int:
        n = max(nums) + k + 2
        c = [0] * n

        for num in nums:
            c[num] += 1

        res = 0
        a = [0] * n
        a[0] = c[0]
        for i in range(1, n):
            a[i] = a[i - 1] + c[i]

        for x in range(n):
            if c[x] == 0 and m == 0:
                continue
            li, ri = max(0, x - k), min(n - 1, x + k)
            if li > 0:
                t = a[ri] - a[li - 1]
            else:
                t = a[ri]
            res = max(res, c[x] + min(m, t - c[x]))
        return res",1447730955
Pranav,pprranav,683,3626,python3,"class Solution:
    def smallestNumber(self, n: int, t: int) -> int:
        def f(x):
            r = 1
            for d in str(x):
                r *= int(d)
            return r
        x = n
        while f(x) % t != 0:
            x += 1
        return x",1447653057
Pranav,pprranav,683,3640,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, m: int) -> int:
        mp = defaultdict(int)
        events = []
        s = set()
        
        for num in nums:
            mp[num] += 1
            events.append((num - k, 1))
            events.append((num + k + 1, -1))
            s.update([num - k, num, num + k + 1])
            
        d = defaultdict(list)
        for x, c in events:
            d[x].append(c)
            
        s = sorted(s)
        cur = 0
        res = 0
        for x in s:
            for c in d.get(x, []):
                cur += c
            t = min(len(nums), cur)
            p = min(len(nums), mp.get(x, 0) + min(m, t - mp.get(x, 0)))
            res = max(p, res)
        return res
",1447749179
leetcode_456745,leetcode_456745,684,3622,cpp,"
class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        map<int, int> freq;
        vector<pair<int, int>> events;
        
        for (int num : nums) {
            freq[num]++;
            events.push_back({num - k, 1});
            events.push_back({num + k + 1, -1});
        }

        set<int> points;
        for (const auto& [val, cnt] : freq) points.insert(val);
        for (const auto& event : events) points.insert(event.first);

        sort(events.begin(), events.end());
        
        int idx = 0, current_overlap = 0, max_freq = 0;
        for (int t : points) {
            while (idx < events.size() && events[idx].first <= t) {
                current_overlap += events[idx++].second;
            }
            int actual_count = freq[t];
            max_freq = max(max_freq, actual_count + min(numOperations, current_overlap - actual_count));
        }
        
        return max_freq;
    }
};",1447756969
leetcode_456745,leetcode_456745,684,3626,cpp,"class Solution {
public:
    int smallestNumber(int n, int t) {
        while(true){
         int temp = n;
         int prod = 1;
            while(temp){
                prod*=temp%10;
                temp/=10;
            }
            if(prod%t == 0)return n;
            ++n;
        }   
        return -1;
    }
};",1447663659
leetcode_456745,leetcode_456745,684,3640,cpp,"
class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        map<int, int> freq;
        vector<pair<int, int>> events;
        
        for (int num : nums) {
            freq[num]++;
            events.push_back({num - k, 1});
            events.push_back({num + k + 1, -1});
        }

        set<int> points;
        for (const auto& [val, cnt] : freq) points.insert(val);
        for (const auto& event : events) points.insert(event.first);

        sort(events.begin(), events.end());
        
        int idx = 0, current_overlap = 0, max_freq = 0;
        for (int t : points) {
            while (idx < events.size() && events[idx].first <= t) {
                current_overlap += events[idx++].second;
            }
            int actual_count = freq[t];
            max_freq = max(max_freq, actual_count + min(numOperations, current_overlap - actual_count));
        }
        
        return max_freq;
    }
};",1447757196
soumika0520,soumika0520,685,3622,java,"import java.util.Arrays;

class Solution {
    public int maxFrequency(int[] nums, int k, int numOperations) {
        int maxNum = Arrays.stream(nums).max().getAsInt();
        int size = maxNum + k + 2;
        int[] freq = new int[size];

        for (int num : nums) {
            freq[num]++;
        }

        int[] pre = new int[size];
        pre[0] = freq[0];
        for (int i = 1; i < size; i++) {
            pre[i] = pre[i - 1] + freq[i];
        }

        int result = 0;
        for (int x = 0; x < size; x++) {
            if (freq[x] == 0 && numOperations == 0) {
                continue;
            }

            int left = Math.max(0, x - k);
            int right = Math.min(size - 1, x + k);
            int totalInRange = pre[right] - (left > 0 ? pre[left - 1] : 0);
            int canAdjust = totalInRange - freq[x];
            int total = freq[x] + Math.min(numOperations, canAdjust);
            result = Math.max(result, total);
        }

        return result;
    }
}
",1447752576
soumika0520,soumika0520,685,3626,java,"class Solution {
    int calculateDigitProduct(int number) {
        int product = 1;
        while (number > 0) {
            int currentDigit = number % 10;
            if (currentDigit == 0) {
                return 0;
            }
            product *= currentDigit;
            number /= 10;
        }
        return product;
    }

    int smallestNumber(int start, int target) {
        while (true) {
            int product = calculateDigitProduct(start);
            if (product % target == 0) {
                return start;
            }
            start++; 
        }
    }

}",1447700971
soumika0520,soumika0520,685,3640,java,"class Solution {
    public int maxFrequency(int[] nums, int k, int numOperations) {
        int n = nums.length;
        Map<Integer, Integer> freq = new HashMap<>();
        List<int[]> events = new ArrayList<>();

        for (int num : nums) {
            freq.put(num, freq.getOrDefault(num, 0) + 1);
            events.add(new int[]{num - k, 1});
            events.add(new int[]{num + k + 1, -1});
        }

        Set<Integer> points = new TreeSet<>();
        for (int[] event : events) {
            points.add(event[0]);
        }
        for (Map.Entry<Integer, Integer> entry : freq.entrySet()) {
            points.add(entry.getKey());
        }

        List<int[]> sortedEvents = new ArrayList<>(events);
        sortedEvents.sort((a, b) -> Integer.compare(a[0], b[0]));

        int idx = 0;
        int currentOverlap = 0;
        int maxFreq = 0;
        int actualCount = 0;

        for (int t : points) {
            while (idx < sortedEvents.size() && sortedEvents.get(idx)[0] <= t) {
                currentOverlap += sortedEvents.get(idx)[1];
                idx++;
            }

            actualCount = freq.getOrDefault(t, 0);
            int possibleFreq = actualCount + Math.min(numOperations, currentOverlap - actualCount);
            maxFreq = Math.max(maxFreq, possibleFreq);
        }

        return maxFreq;
    }

    public static void main(String[] args) {
        Solution solution = new Solution();
        int[] nums = {2, 49};
        int k = 97;
        int numOperations = 0;
        int result = solution.maxFrequency(nums, k, numOperations);
        System.out.println(""Maximum Frequency: "" + result);
    }
}",1447757231
killer-whale,killer-whale,686,3622,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        cnt = Counter(nums)
        ma = max(cnt)
        st = ST([cnt[i] for i in range(ma + 1)], init=1)
        res = 0
        for num in range(ma + 1):
            a = min(cnt[num] + numOperations, st.query(num - k, num + k + 1))
            res = max(a, res)
        return res
class ST:
    def __init__(self, data, default=0, func=lambda x, y: x + y, offset=0, init=False):
        self._default = default
        self._func = func
        self._len = len(data)
        self._size = _size = 1 << (self._len - 1).bit_length()
        self._offset = offset

        self.data = [default] * (2 * _size)
        self.data[_size:_size + self._len] = data
        if init:
            for i in reversed(range(_size)):
                self.data[i] = func(self.data[i + i], self.data[i + i + 1])

    def __delitem__(self, idx):
        self[idx] = self._default

    def __getitem__(self, key):
        if isinstance(key, slice):
            start = key.start if key.start is not None else -self._offset
            stop = key.stop if key.stop is not None else -self._offset + self._len
            return self.query(start, stop)
        else:
            return self.data[key + self._size + self._offset]

    def __setitem__(self, idx, value):
        idx += self._size + self._offset
        self.data[idx] = value
        idx >>= 1
        while idx:
            self.data[idx] = self._func(self.data[2 * idx], self.data[2 * idx + 1])
            idx >>= 1

    def __len__(self):
        return self._len

    def query(self, start, stop):
        """"""func of data[start, stop)""""""
        start = max(start, -self._offset) + self._offset
        stop = min(stop, -self._offset + self._len) + self._offset
        start += self._size
        stop += self._size

        res_left = res_right = self._default
        while start < stop:
            if start & 1:
                res_left = self._func(res_left, self.data[start])
                start += 1
            if stop & 1:
                stop -= 1
                res_right = self._func(self.data[stop], res_right)
            start >>= 1
            stop >>= 1

        return self._func(res_left, res_right)
    
    def query_wraparound(self, start, end):
        res = 0
        if start < -self._offset:
            diff = self._offset - start
            q, r = divmod(diff, self._len)
            res += self.data[1] * q + self[self._len - r:]
        if end > -self._offset + self._len:
            diff = end - (self._len - self._offset)
            q, r = divmod(diff, self._len)
            res += self.data[1] * q + self[:r - self._offset]
        return res + self[start:end]

    def find_k(self, k):
        """"""find the maximum idx where func of data[:idx] <= k""""""
        return BS.findmax(
            -self._offset,
            -self._offset + self._len,
            lambda idx: self.query(-self._offset, idx) <= k
        )

    def query_all(self):
        """"""func of data[:]""""""
        return self.data[1]

    def __repr__(self):
        return ""ST({0})"".format(self.data[self._size:self._size + self._len])

class BS:
    @staticmethod
    def findmin(low: int, high: int, check) -> int:
        """"""find the minimum int x which make check true""""""
        while low < high - 1:
            mid = low + (high - low) // 2
            if check(mid):
                high = mid
            else:
                low = mid
        return low if check(low) else high

    @staticmethod
    def findmax(low: int, high: int, check) -> int:
        """"""find the maximum int x which make check true""""""
        while low < high - 1:
            mid = low + (high - low) // 2
            if check(mid):
                low = mid
            else:
                high = mid
        return high if check(high) else low

    @staticmethod
    def find_float_left(low: float, high: float, check, error=1e-6) -> float:
        """"""find the minimum float x which make check true""""""
        while low < high - error:
            mid = low + (high - low) / 2
            if check(mid):
                high = mid
            else:
                low = mid
        return low if check(low) else high

    @staticmethod
    def find_float_right(low: float, high: float, check, error=1e-6) -> float:
        """"""find the maximum float x which make check true""""""
        while low < high - error:
            mid = low + (high - low) / 2
            if check(mid):
                low = mid
            else:
                high = mid
        return high if check(high) else low

class LazySegmentTree:
    def __init__(self, data, default=0, func=max):
        """"""initialize the lazy segment tree with data""""""
        self._default = default
        self._func = func

        self._len = len(data)
        self._size = _size = 1 << (self._len - 1).bit_length()
        self._lazy = [0] * (2 * _size)

        self.data = [default] * (2 * _size)
        self.data[_size:_size + self._len] = data

    def __len__(self):
        return self._len

    def _push(self, idx):
        """"""push query on idx to its children""""""
        # Let the children know of the queries
        q, self._lazy[idx] = self._lazy[idx], 0

        self._lazy[2 * idx] += q
        self._lazy[2 * idx + 1] += q
        self.data[2 * idx] += q
        self.data[2 * idx + 1] += q

    def _update(self, idx):
        """"""updates the node idx to know of all queries applied to it via its ancestors""""""
        for i in reversed(range(1, idx.bit_length())):
            self._push(idx >> i)

    def _build(self, idx):
        """"""make the changes to idx be known to its ancestors""""""
        idx >>= 1
        while idx:
            self.data[idx] = self._func(self.data[2 * idx], self.data[2 * idx + 1]) + self._lazy[idx]
            idx >>= 1

    def add(self, start, stop, value):
        """"""lazily add value to [start, stop)""""""
        start = start_copy = start + self._size
        stop = stop_copy = stop + self._size
        while start < stop:
            if start & 1:
                self._lazy[start] += value
                self.data[start] += value
                start += 1
            if stop & 1:
                stop -= 1
                self._lazy[stop] += value
                self.data[stop] += value
            start >>= 1
            stop >>= 1

        # Tell all nodes above of the updated area of the updates
        self._build(start_copy)
        self._build(stop_copy - 1)

    def query(self, start, stop, default=0):
        """"""func of data[start, stop)""""""
        start += self._size
        stop += self._size

        # Apply all the lazily stored queries
        self._update(start)
        self._update(stop - 1)

        res = default
        while start < stop:
            if start & 1:
                res = self._func(res, self.data[start])
                start += 1
            if stop & 1:
                stop -= 1
                res = self._func(res, self.data[stop])
            start >>= 1
            stop >>= 1
        return res

    def __repr__(self):
        return ""LazySegmentTree({0})"".format(self.data)",1447712725
killer-whale,killer-whale,686,3626,python3,"class Solution:
    def smallestNumber(self, n: int, t: int) -> int:
        while True:
            if prod(map(int, str(n))) % t == 0:
                return n
            n += 1",1447665566
killer-whale,killer-whale,686,3640,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        cnt = Counter(nums)
        d = set()
        s = sorted(cnt)
        for num in s:
            d.add(num)
            d.add(num - k)
            d.add(num + k)
        vals = sorted(d)
        d = {num:i for i, num in enumerate(vals)}
        ma = vals[-1]
        st = ST([cnt[num] for num in d], init=1)
        res = 0
        for idx, num in enumerate(vals):
            lidx = bisect_left(vals, num - k)
            ridx = bisect_left(vals, num + k+1)
            
            if ridx >= len(vals) or vals[ridx] > num + k:
                ridx -= 1
            a = min(cnt[num] + numOperations, st.query(lidx, ridx+1))
            # print(num, a, lidx, ridx, vals)
            res = max(a, res)
        return res

class MonotonicStack:
    def __init__(self, nums):
        self.nums = nums
        self.n = len(nums)

        self.pre_bigger = [-1] * self.n
        self.pre_bigger_equal = [-1] * self.n
        self.pre_smaller = [-1] * self.n
        self.pre_smaller_equal = [-1] * self.n

        self.post_bigger = [-1] * self.n
        self.post_bigger_equal = [-1] * self.n
        self.post_smaller = [-1] * self.n
        self.post_smaller_equal = [-1] * self.n

        self.gen_result()
        return

    def gen_result(self):

        stack = []
        for i in range(self.n):
            while stack and self.nums[i] >= self.nums[stack[-1]]:
                self.post_bigger_equal[stack.pop()] = i
            if stack:
                self.pre_bigger[i] = stack[-1]
            stack.append(i)

        stack = []
        for i in range(self.n):
            while stack and self.nums[i] <= self.nums[stack[-1]]:
                self.post_smaller_equal[stack.pop()] = i
            if stack:
                self.pre_smaller[i] = stack[-1]
            stack.append(i)

        stack = []
        for i in range(self.n - 1, -1, -1):
            while stack and self.nums[i] >= self.nums[stack[-1]]:
                self.pre_bigger_equal[stack.pop()] = i
            if stack:
                self.post_bigger[i] = stack[-1]
            stack.append(i)

        stack = []
        for i in range(self.n - 1, -1, -1):
            while stack and self.nums[i] <= self.nums[stack[-1]]:
                self.pre_smaller_equal[stack.pop()] = i
            if stack:
                self.post_smaller[i] = stack[-1]
            stack.append(i)

        return


class Rectangle:
    def __init__(self):
        return

    @staticmethod
    def compute_area(pre):
        """"""Calculate maximum rectangle area based on height using monotonic stack""""""

        m = len(pre)
        left = [0] * m
        right = [m - 1] * m
        stack = []
        for i in range(m):
            while stack and pre[stack[-1]] > pre[i]:
                right[stack.pop()] = i - 1
            if stack:
                left[i] = stack[-1] + 1
            stack.append(i)

        ans = 0
        for i in range(m):
            cur = pre[i] * (right[i] - left[i] + 1)
            ans = ans if ans > cur else cur
        return ans

    @staticmethod
    def compute_width(pre):
        """"""Calculate maximum rectangle area based on height using monotonic stack""""""

        m = len(pre)
        left = [0] * m
        right = [m - 1] * m
        stack = []
        for i in range(m):
            while stack and pre[stack[-1]] > pre[i]:
                right[stack.pop()] = i - 1
            if stack:
                left[i] = stack[-1] + 1
            stack.append(i)

        ans = [(left[i], right[i]) for i in range(m)]
        return ans

    @staticmethod
    def compute_number(pre):
        """"""Use monotonic stack to calculate the number of rectangles based on height""""""
        n = len(pre)
        right = [n - 1] * n
        left = [0] * n
        stack = []
        for j in range(n):
            while stack and pre[stack[-1]] > pre[j]:
                right[stack.pop()] = j - 1
            if stack:
                left[j] = stack[-1] + 1
            stack.append(j)

        ans = 0
        for j in range(n):
            ans += (right[j] - j + 1) * (j - left[j] + 1) * pre[j]
        return ans
class ST:
    def __init__(self, data, default=0, func=lambda x, y: x + y, offset=0, init=False):
        self._default = default
        self._func = func
        self._len = len(data)
        self._size = _size = 1 << (self._len - 1).bit_length()
        self._offset = offset

        self.data = [default] * (2 * _size)
        self.data[_size:_size + self._len] = data
        if init:
            for i in reversed(range(_size)):
                self.data[i] = func(self.data[i + i], self.data[i + i + 1])

    def __delitem__(self, idx):
        self[idx] = self._default

    def __getitem__(self, key):
        if isinstance(key, slice):
            start = key.start if key.start is not None else -self._offset
            stop = key.stop if key.stop is not None else -self._offset + self._len
            return self.query(start, stop)
        else:
            return self.data[key + self._size + self._offset]

    def __setitem__(self, idx, value):
        idx += self._size + self._offset
        self.data[idx] = value
        idx >>= 1
        while idx:
            self.data[idx] = self._func(self.data[2 * idx], self.data[2 * idx + 1])
            idx >>= 1

    def __len__(self):
        return self._len

    def query(self, start, stop):
        """"""func of data[start, stop)""""""
        start = max(start, -self._offset) + self._offset
        stop = min(stop, -self._offset + self._len) + self._offset
        start += self._size
        stop += self._size

        res_left = res_right = self._default
        while start < stop:
            if start & 1:
                res_left = self._func(res_left, self.data[start])
                start += 1
            if stop & 1:
                stop -= 1
                res_right = self._func(self.data[stop], res_right)
            start >>= 1
            stop >>= 1

        return self._func(res_left, res_right)
    
    def query_wraparound(self, start, end):
        res = 0
        if start < -self._offset:
            diff = self._offset - start
            q, r = divmod(diff, self._len)
            res += self.data[1] * q + self[self._len - r:]
        if end > -self._offset + self._len:
            diff = end - (self._len - self._offset)
            q, r = divmod(diff, self._len)
            res += self.data[1] * q + self[:r - self._offset]
        return res + self[start:end]

    def find_k(self, k):
        """"""find the maximum idx where func of data[:idx] <= k""""""
        return BS.findmax(
            -self._offset,
            -self._offset + self._len,
            lambda idx: self.query(-self._offset, idx) <= k
        )

    def query_all(self):
        """"""func of data[:]""""""
        return self.data[1]

    def __repr__(self):
        return ""ST({0})"".format(self.data[self._size:self._size + self._len])

class BS:
    @staticmethod
    def findmin(low: int, high: int, check) -> int:
        """"""find the minimum int x which make check true""""""
        while low < high - 1:
            mid = low + (high - low) // 2
            if check(mid):
                high = mid
            else:
                low = mid
        return low if check(low) else high

    @staticmethod
    def findmax(low: int, high: int, check) -> int:
        """"""find the maximum int x which make check true""""""
        while low < high - 1:
            mid = low + (high - low) // 2
            if check(mid):
                low = mid
            else:
                high = mid
        return high if check(high) else low

    @staticmethod
    def find_float_left(low: float, high: float, check, error=1e-6) -> float:
        """"""find the minimum float x which make check true""""""
        while low < high - error:
            mid = low + (high - low) / 2
            if check(mid):
                high = mid
            else:
                low = mid
        return low if check(low) else high

    @staticmethod
    def find_float_right(low: float, high: float, check, error=1e-6) -> float:
        """"""find the maximum float x which make check true""""""
        while low < high - error:
            mid = low + (high - low) / 2
            if check(mid):
                low = mid
            else:
                high = mid
        return high if check(high) else low

class LazySegmentTree:
    def __init__(self, data, default=0, func=max):
        """"""initialize the lazy segment tree with data""""""
        self._default = default
        self._func = func

        self._len = len(data)
        self._size = _size = 1 << (self._len - 1).bit_length()
        self._lazy = [0] * (2 * _size)

        self.data = [default] * (2 * _size)
        self.data[_size:_size + self._len] = data

    def __len__(self):
        return self._len

    def _push(self, idx):
        """"""push query on idx to its children""""""
        # Let the children know of the queries
        q, self._lazy[idx] = self._lazy[idx], 0

        self._lazy[2 * idx] += q
        self._lazy[2 * idx + 1] += q
        self.data[2 * idx] += q
        self.data[2 * idx + 1] += q

    def _update(self, idx):
        """"""updates the node idx to know of all queries applied to it via its ancestors""""""
        for i in reversed(range(1, idx.bit_length())):
            self._push(idx >> i)

    def _build(self, idx):
        """"""make the changes to idx be known to its ancestors""""""
        idx >>= 1
        while idx:
            self.data[idx] = self._func(self.data[2 * idx], self.data[2 * idx + 1]) + self._lazy[idx]
            idx >>= 1

    def add(self, start, stop, value):
        """"""lazily add value to [start, stop)""""""
        start = start_copy = start + self._size
        stop = stop_copy = stop + self._size
        while start < stop:
            if start & 1:
                self._lazy[start] += value
                self.data[start] += value
                start += 1
            if stop & 1:
                stop -= 1
                self._lazy[stop] += value
                self.data[stop] += value
            start >>= 1
            stop >>= 1

        # Tell all nodes above of the updated area of the updates
        self._build(start_copy)
        self._build(stop_copy - 1)

    def query(self, start, stop, default=0):
        """"""func of data[start, stop)""""""
        start += self._size
        stop += self._size

        # Apply all the lazily stored queries
        self._update(start)
        self._update(stop - 1)

        res = default
        while start < stop:
            if start & 1:
                res = self._func(res, self.data[start])
                start += 1
            if stop & 1:
                stop -= 1
                res = self._func(res, self.data[stop])
            start >>= 1
            stop >>= 1
        return res

    def __repr__(self):
        return ""LazySegmentTree({0})"".format(self.data)",1447757269
Yuxtar,Yuxtar,687,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        sort(nums.begin(), nums.end());
        int L = nums.size();
        vector<int> start(L,0);
        vector<int> end(L,0);
        map<int,int> freq;
        for(int i = 0; i < L; i++){
            start[i] = nums[i] - k;
            end[i] = nums[i] + k;
            freq[nums[i]]++;
        }
        int max = 0;
        for(int i = 0; i < L; i++){
            int thrs = end[i];
            int x = lower_bound(start.begin()+i, start.end(), thrs+1) - start.begin();
            if(start[x-1] == thrs+1){
                x--;
            }
            x -= i;
            if(freq.find(end[i]) != freq.end()){
                int count;
                if(x <= numOperations + freq[nums[i]]){
                    count = x;
                }
                else{
                    count = numOperations + freq[nums[i]];
                }
                if(max < count) max = count;
            }
            else{
                int count = (x > numOperations)? numOperations : x;
                if(max < count) max = count;
            }
        }
        for(int i = 0; i < L; i++){
            int thrs = start[L - i - 1];
            int id = upper_bound(end.begin(), end.end()-i, thrs) - end.begin();
            int x = L - i - id - 1;
            if(freq.find(start[i]) != freq.end()){
                int count;
                if(x <= numOperations + freq[nums[i]]){
                    count = x;
                }
                else{
                    count = numOperations + freq[nums[i]];
                }
                if(max < count) max = count;
            }
            else{
                int count = (x > numOperations)? numOperations : x;
                if(max < count) max = count;
            }
        }
        for(auto &p : freq){
            int n = p.first;
            int f = p.second;
            int low = upper_bound(end.begin(), end.end(), n) - end.begin();
            int high = lower_bound(start.begin(), start.end(), n+1) - start.begin();
            if(start[high-1] == n+1){
                high--;
            }
            //cout << high << ' ' << low << ' ' << n << ' ' << f << endl;
            int count = high - low;
            if(count > numOperations + f){
                count = numOperations + f;
            }
            if(max < count){
                max = count;
            }
        }
        return max;
    }
};",1447779742
Yuxtar,Yuxtar,687,3626,cpp,"class Solution {
public:
    int smallestNumber(int n, int t) {
        while(1){
            int tmp = n;
            int now = 1;
            while(tmp){
                now *= (tmp % 10);
                tmp /= 10;
            }
            if(now % t == 0){
                return n;
            }
            n++;
        }
        return 0;
    }
};",1447657650
Yuxtar,Yuxtar,687,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        sort(nums.begin(), nums.end());
        int L = nums.size();
        vector<int> start(L,0);
        vector<int> end(L,0);
        map<int,int> freq;
        for(int i = 0; i < L; i++){
            start[i] = nums[i] - k;
            end[i] = nums[i] + k;
            freq[nums[i]]++;
        }
        int max = 0;
        for(int i = 0; i < L; i++){
            int thrs = end[i];
            int x = lower_bound(start.begin()+i, start.end(), thrs+1) - start.begin();
            if(start[x-1] == thrs+1){
                x--;
            }
            x -= i;
            if(freq.find(end[i]) != freq.end()){
                int count;
                if(x <= numOperations + freq[nums[i]]){
                    count = x;
                }
                else{
                    count = numOperations + freq[nums[i]];
                }
                if(max < count) max = count;
            }
            else{
                int count = (x > numOperations)? numOperations : x;
                if(max < count) max = count;
            }
        }
        for(int i = 0; i < L; i++){
            int thrs = start[L - i - 1];
            int id = upper_bound(end.begin(), end.end()-i, thrs) - end.begin();
            int x = L - i - id - 1;
            if(freq.find(start[i]) != freq.end()){
                int count;
                if(x <= numOperations + freq[nums[i]]){
                    count = x;
                }
                else{
                    count = numOperations + freq[nums[i]];
                }
                if(max < count) max = count;
            }
            else{
                int count = (x > numOperations)? numOperations : x;
                if(max < count) max = count;
            }
        }
        for(auto &p : freq){
            int n = p.first;
            int f = p.second;
            int low = upper_bound(end.begin(), end.end(), n) - end.begin();
            int high = lower_bound(start.begin(), start.end(), n+1) - start.begin();
            if(start[high-1] == n+1){
                high--;
            }
            //cout << high << ' ' << low << ' ' << n << ' ' << f << endl;
            int count = high - low;
            if(count > numOperations + f){
                count = numOperations + f;
            }
            if(max < count){
                max = count;
            }
        }
        return max;
    }
};",1447779995
nazeeeef007,nazeeeef007,688,3622,python3,"class Solution:
    def maxFrequency(self, a: List[int], k: int, x: int) -> int:
        # add any integer from k to -k , x times 
        # must perform it x times 
        m = {}
        n = len(a)
        a.sort()
        for i in range(n):
            if a[i] not in m:
                m[a[i]] = [i]
            if i<n-1 and a[i]!=a[i+1]:
                m[a[i]].append(i)
        m[a[-1]].append(n-1)
        res = 0
        for i in range(a[0],a[-1]+1):
            if i in m:
                l,r = m[i][0],m[i][1]
                left,right =0,l-1
                lower = l
                while left<=right:
                    mid = (left+right)//2
                    if a[mid] >= i-k:
                        lower = mid 
                        right = mid-1
                    else:
                        left = mid+1
                left,right =r+1,n-1
                upper = r
                while left<=right:
                    mid = (left+right)//2
                    if a[mid] <= i+k:
                        upper = mid 
                        left = mid+1
                    else:
                        right = mid-1
                res = max(res,r-l+1+min(l-lower+upper-r,x))
            else:
                left,right =0,n-1
                lower = n-1
                while left<=right:
                    mid = (left+right)//2
                    if a[mid] >= i-k:
                        lower = mid 
                        right = mid-1
                    else:
                        left = mid+1
                left,right =0,n-1
                upper = 0
                while left<=right:
                    mid = (left+right)//2
                    if a[mid] <= i+k:
                        upper = mid 
                        left = mid+1
                    else:
                        right = mid-1
                res = max(res,min(upper-lower+1,x))
            # print(i,res)
        return res
                
                
            
        
        
        ",1447684605
nazeeeef007,nazeeeef007,688,3626,python3,"class Solution:
    def smallestNumber(self, n: int, t: int) -> int:
        i = n
        while True:
            c = str(i)
            s = 1
            for j in c:
                s *= int(j)
            if s%t == 0:
                return i
            i +=1
            
        ",1447656310
nazeeeef007,nazeeeef007,688,3640,python3,"class Solution:
    def maxFrequency(self, a: List[int], k: int, x: int) -> int:
        # add any integer from k to -k , x times 
        # must perform it x times 
        m = {}
        n = len(a)
        a.sort()
        for i in range(n):
            if a[i] not in m:
                m[a[i]] = [i]
            if i<n-1 and a[i]!=a[i+1]:
                m[a[i]].append(i)
        m[a[-1]].append(n-1)
        res = 0
        # print(m)
        for i in range(n):
            if a[i] in m:
                l,r = m[a[i]][0],m[a[i]][1]
                left,right =0,l-1
                lower = l
                while left<=right:
                    mid = (left+right)//2
                    if a[mid] >= a[i]-k:
                        lower = mid 
                        right = mid-1
                    else:
                        left = mid+1
                left,right =r+1,n-1
                upper = r
                while left<=right:
                    mid = (left+right)//2
                    if a[mid] <= a[i]+k:
                        upper = mid 
                        left = mid+1
                    else:
                        right = mid-1
                
                res = max(res,r-l+1+min(max(0,l-lower+upper-r),x))
            else:
                left,right =0,n-1
                lower = n-1
                while left<=right:
                    mid = (left+right)//2
                    if a[mid] >= i-k:
                        lower = mid 
                        right = mid-1
                    else:
                        left = mid+1
                left,right =0,n-1
                upper = 0
                while left<=right:
                    mid = (left+right)//2
                    if a[mid] <= i+k:
                        upper = mid 
                        left = mid+1
                    else:
                        right = mid-1
                res = max(res,min(upper-lower+1,x))
            # print(i,res)
        for j in range(n-1):
            i = max(a[j]+(a[j+1]-a[j])//2, a[j]+k)
            # print(i)
            left,right =0,n-1
            lower = n-1
            while left<=right:
                mid = (left+right)//2
                if a[mid] >= i-k:
                    lower = mid 
                    right = mid-1
                else:
                    left = mid+1
            left,right =0,n-1
            upper = 0
            while left<=right:
                mid = (left+right)//2
                if a[mid] <= i+k:
                    upper = mid 
                    left = mid+1
                else:
                    right = mid-1
            res = max(res,min(upper-lower+1,x))
            
        return res
                
                
            
        
        
        ",1447765446
karush1fa,karush1fa,689,3622,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        # n = len(nums)
        cntr = collections.Counter(nums)
        maxNum = max(nums)
        prefixCnt = [0] * (maxNum + 1)
        for num, cnt in cntr.items():
            prefixCnt[num] += cnt
        # print(cntr)
        # prefix sum
        for i in range(1, maxNum + 1):
            prefixCnt[i] += prefixCnt[i-1]
        # print(prefixCnt)
    
        ans = 0
        for i in range(1, maxNum+1):
            cnt = cntr[i]
            upper = min(maxNum, i + k)
            lower = max(1, i - k)
            m = prefixCnt[upper] - prefixCnt[lower - 1] - cnt 
            # print(i, cnt, upper, lower, m)
            # update ans
            ans = max(ans, cnt + min(numOperations, m))
        return ans",1447729289
karush1fa,karush1fa,689,3626,python3,"class Solution:
    def smallestNumber(self, n: int, t: int) -> int:
        product = 1
        tmp = n
        while tmp:
            product *= tmp % 10
            tmp = tmp // 10

        if product % t == 0:
            return n
        
        # the nearest k * 10 is always an answer
        a, b = n // 10, n % 10
        product = product // b
        for i in range(b+1, 10):
            if (product * i) % t == 0:
                return a * 10 + i

        return (a + 1) * 10",1447675538
karush1fa,karush1fa,689,3640,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        cntr = collections.Counter(nums)
        nums.sort()
        # print(nums)
        
        ans = 0
        for num, freq in cntr.items():
            # find how many num in range [max(0, num - k), num)
            # find how many num in range (num, min(maxNum, num + k)]
            l = bisect.bisect_left(nums, max(1, num - k)) # number of nums that are less than 
            r = bisect.bisect_right(nums, min(num + k, nums[-1]))
            m = r - l - freq
            ans = max(ans, freq + min(numOperations, m))
        # print(ans)
    
        # another case 
        for left in cntr.keys():
            freq = cntr[left + k]
            l = bisect.bisect_left(nums, left) # number of nums that are less than left
            r = bisect.bisect_right(nums, left + k * 2)
            m = r - l - freq
            ans = max(ans, freq + min(numOperations, m))
        return ans",1447765489
vk_0611,vinit___keshav,690,3622,java,"class Solution {
    public int maxFrequency(int[] nums, int k, int no) {
        int a = nums.length;
        Arrays.sort(nums);
        Map<Integer, Integer> vinit=new HashMap<>();
        for (int c:nums)
            {
            vinit.put(c,vinit.getOrDefault(c,0)+1);
            }
        Set<Integer> d = new HashSet<>();
        for(int c:nums)
        {
            d.add(c);
            d.add(c-k);
            d.add(c+k);
        }
        List<Integer> e=new ArrayList<>(d);
        Collections.sort(e);
        int max=0;
        for(int g:e)
        {
            int h=vinit.getOrDefault(g, 0);
            int i=i(nums,g-k);
            int j=j(nums,g+k)-1;
            int l=j-i+1;
            int m=l-h;
            int n=h+Math.min(m,no);
            max=Math.max(max,n);
        }
        return max;
    }
    public int i(int[] nums,int k)
    {
        int a=0,b=nums.length;
        while (a<b)
        {
            int c=a+(b-a)/2;
            if(nums[c]>=k) b=c;
            else a=c+1;
        }
        return a;
    }
    public int j(int[] nums,int k)
    {
        int a=0,b=nums.length;
        while(a<b)
        {
            int c=a+(b-a)/2;
            if(nums[c]>k) b=c;
            else a=c+1;
        }
        return a;
    }
}",1447778684
vk_0611,vinit___keshav,690,3626,java,"class Solution {
    public int smallestNumber(int n, int t) {
       int a=n;
        while(true)
            {
                
            
       String s=Integer.toString(a);
        int ii=1;
       for(int i=0;i<s.length();i++)
           {
               ii*=Character.getNumericValue(s.charAt(i));
           }
               
        if(ii%t==0)
        {
            break;
        }
        else
        {
            a+=1;
        }
            }
        return a;
    }
}",1447664687
vk_0611,vinit___keshav,690,3640,java,"class Solution {
    public int maxFrequency(int[] nums, int k, int no) {
        int a = nums.length;
        Arrays.sort(nums);
        Map<Integer, Integer> vinit=new HashMap<>();
        for (int c:nums)
            {
            vinit.put(c,vinit.getOrDefault(c,0)+1);
            }
        Set<Integer> d = new HashSet<>();
        for(int c:nums)
        {
            d.add(c);
            d.add(c-k);
            d.add(c+k);
        }
        List<Integer> e=new ArrayList<>(d);
        Collections.sort(e);
        int max=0;
        for(int g:e)
        {
            int h=vinit.getOrDefault(g, 0);
            int i=i(nums,g-k);
            int j=j(nums,g+k)-1;
            int l=j-i+1;
            int m=l-h;
            int n=h+Math.min(m,no);
            max=Math.max(max,n);
        }
        return max;
    }
    public int i(int[] nums,int k)
    {
        int a=0,b=nums.length;
        while (a<b)
        {
            int c=a+(b-a)/2;
            if(nums[c]>=k) b=c;
            else a=c+1;
        }
        return a;
    }
    public int j(int[] nums,int k)
    {
        int a=0,b=nums.length;
        while(a<b)
        {
            int c=a+(b-a)/2;
            if(nums[c]>k) b=c;
            else a=c+1;
        }
        return a;
    }
}",1447780247
vaibhav agrawal,vaibhav_agrawal_05,691,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        int mf = 0;
        int i = 0;
        int current = 0;
        
        vector<pair<int, int>> op;
        unordered_map<int, int> fre;

        for (int i=0; i<nums.size(); i++) {
            fre[nums[i]]++;
            op.push_back({nums[i] + k + 1, -1}); 
            op.push_back({nums[i] - k, +1});        \              
        }
        
        sort(op.begin(), op.end());

        set<int> points;
        for (auto f : fre) {
            points.insert(f.first);
        }
        
        for (auto event : op) {
            points.insert(event.first);
        }
        

        for (auto point : points) {
            while (i < op.size() && op[i].first <= point) {
                current += op[i].second;
                i++;
            }

            int present = fre.count(point) ? fre[point] : 0;

            int pro = present + min(numOperations, current - present);
            mf = max(mf, pro);
        }

        return mf;
    }
};",1447779492
vaibhav agrawal,vaibhav_agrawal_05,691,3626,cpp,"class Solution {
public:
    int smallestNumber(int n, int t) {
        if(t == 1) return n;
        
        for(int i=0; i<10; i++){
            int num = n+i;
            int temp = 1;
            while(num>0){
                temp *= (num%10);
                num /= 10;
            }
            if(temp%t == 0) return n+i;
        }

        return -1;
    }
};",1447679542
vaibhav agrawal,vaibhav_agrawal_05,691,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        int mf = 0;
        int i = 0;
        int current = 0;
        
        vector<pair<int, int>> op;
        unordered_map<int, int> fre;

        for (int i=0; i<nums.size(); i++) {
            fre[nums[i]]++;
            op.push_back({nums[i] + k + 1, -1}); 
            op.push_back({nums[i] - k, +1});        \              
        }
        
        sort(op.begin(), op.end());

        set<int> points;
        for (auto f : fre) {
            points.insert(f.first);
        }
        
        for (auto event : op) {
            points.insert(event.first);
        }
        

        for (auto point : points) {
            while (i < op.size() && op[i].first <= point) {
                current += op[i].second;
                i++;
            }

            int present = fre.count(point) ? fre[point] : 0;

            int pro = present + min(numOperations, current - present);
            mf = max(mf, pro);
        }

        return mf;
    }
};",1447780268
Karen Teng,KarenTeng,692,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        int n = static_cast<int>(nums.size());
        int maxValue = *std::max_element(nums.begin(), nums.end());

        int size = maxValue + k + 2;
        std::vector<int> freq(size, 0);

        for (const auto &num : nums) freq[num]++;

        std::vector<int> prefixSum(size, 0);
        prefixSum[0] = freq[0];
        for (int i = 1; i < size; ++i) {
            prefixSum[i] = prefixSum[i - 1] + freq[i];
        }

        int result = 0;
        for (int number = 0; number< size; ++number) {
            if (freq[number] == 0 && numOperations == 0) continue;

            auto left = std::max(0, number - k);
            auto right = std::min(size - 1, number + k);

            int total = prefixSum[right] - (left > 0 ? prefixSum[left - 1] : 0);
            int opCount = total - freq[number];
            int count = freq[number] + std::min(numOperations, opCount);
            result = std::max(result, count);
        }
        return result;
    }
};",1447742031
Karen Teng,KarenTeng,692,3626,cpp,"class Solution {
public:
    bool isDivisible(int n, int t) {
        int digit = 1;
        while (n) {
            digit *= (n % 10);
            n /= 10;
        }
        return digit % t == 0;
    }
    int smallestNumber(int n, int t) {
        while (!isDivisible(n, t)) ++n;
        return n;
    }
};",1447657294
Karen Teng,KarenTeng,692,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        int n = static_cast<int>(nums.size());
        std::unordered_map<int, int> freqMap;
        std::map<int, int> diff;
        std::set<int> candidates;
        for (const auto &num : nums) {
            freqMap[num]++;
            diff[num - k] += 1;
            diff[num + k + 1] -= 1;

            candidates.insert(num);
            candidates.insert(num - k);
            candidates.insert(num + k + 1);
        }

        std::vector<std::pair<int, int>> diffArr;
        for (const auto &[number, count] : diff) {
            diffArr.emplace_back(number, count);
        }

        int result = 0;
        int index = 0;
        int curOverlapped = 0;
        for (const auto &candidate : candidates) {
            while (index < diffArr.size() && diffArr[index].first <= candidate) {
                curOverlapped += diffArr[index].second;
                ++index;
            }

            // deal with operations:
            int freqCount = freqMap.find(candidate) == freqMap.end() ? 0 : freqMap[candidate];
            int count = freqCount + std::min(numOperations, curOverlapped - freqCount);
            result = std::max(result, count);
        }

        return result;
    }
};",1447780274
E22CSEU0119,2U92cIiTaW,693,3622,cpp,"#include <vector>
#include <map>
#include <set>
#include <algorithm>
using namespace std;

class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOps) {
        map<int, int> valueCount;
        vector<pair<int, int>> boundaries;
        prepareEvents(nums, k, valueCount, boundaries);
        
        // Collect all unique points from boundaries and frequency keys
        set<int> uniquePoints = collectUniquePoints(boundaries, valueCount);

        // Process all events to calculate maximum possible frequency
        return calculateMaxFrequency(uniquePoints, valueCount, boundaries, numOps);
    }

private:
    void prepareEvents(const vector<int>& nums, int k, map<int, int>& valueCount, vector<pair<int, int>>& boundaries) {
        for (int num : nums) {
            valueCount[num]++;
            boundaries.emplace_back(num - k, 1);
            boundaries.emplace_back(num + k + 1, -1);
        }
        sort(boundaries.begin(), boundaries.end());
    }

    set<int> collectUniquePoints(const vector<pair<int, int>>& boundaries, const map<int, int>& valueCount) {
        set<int> uniquePoints;
        for (const auto& boundary : boundaries) {
            uniquePoints.insert(boundary.first);
        }
        for (const auto& entry : valueCount) {
            uniquePoints.insert(entry.first);
        }
        return uniquePoints;
    }

    int calculateMaxFrequency(const set<int>& uniquePoints, map<int, int>& valueCount, const vector<pair<int, int>>& boundaries, int numOps) {
        int highestFreq = 0, overlapCount = 0, eventIndex = 0;
        for (const int point : uniquePoints) {
            while (eventIndex < boundaries.size() && boundaries[eventIndex].first <= point) {
                overlapCount += boundaries[eventIndex].second;
                eventIndex++;
            }
            int currentCount = valueCount.count(point) ? valueCount[point] : 0;
            int possibleFreq = currentCount + min(numOps, overlapCount - currentCount);
            highestFreq = max(highestFreq, possibleFreq);
        }
        return highestFreq;
    }
};
",1447721953
E22CSEU0119,2U92cIiTaW,693,3626,cpp,"class Solution {
public:
    int productOfDigits(int num) {
        int product = 1;
        while (num > 0) {
            product *= num % 10;  
            num /= 10;           
        }
        return product;
    }
    
    int smallestNumber(int n, int t) {
        while (true) {
            if (productOfDigits(n) % t == 0) {
                return n;  
            }
            n++;  
        }
    }
};",1447659072
E22CSEU0119,2U92cIiTaW,693,3640,cpp,"#include <vector>
#include <map>
#include <set>
#include <algorithm>
using namespace std;

class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOps) {
        map<int, int> valueCount;
        vector<pair<int, int>> boundaries;
        prepareEvents(nums, k, valueCount, boundaries);
        
        // Collect all unique points from boundaries and frequency keys
        set<int> uniquePoints = collectUniquePoints(boundaries, valueCount);

        // Process all events to calculate maximum possible frequency
        return calculateMaxFrequency(uniquePoints, valueCount, boundaries, numOps);
    }

private:
    void prepareEvents(const vector<int>& nums, int k, map<int, int>& valueCount, vector<pair<int, int>>& boundaries) {
        for (int num : nums) {
            valueCount[num]++;
            boundaries.emplace_back(num - k, 1);
            boundaries.emplace_back(num + k + 1, -1);
        }
        sort(boundaries.begin(), boundaries.end());
    }

    set<int> collectUniquePoints(const vector<pair<int, int>>& boundaries, const map<int, int>& valueCount) {
        set<int> uniquePoints;
        for (const auto& boundary : boundaries) {
            uniquePoints.insert(boundary.first);
        }
        for (const auto& entry : valueCount) {
            uniquePoints.insert(entry.first);
        }
        return uniquePoints;
    }

    int calculateMaxFrequency(const set<int>& uniquePoints, map<int, int>& valueCount, const vector<pair<int, int>>& boundaries, int numOps) {
        int highestFreq = 0, overlapCount = 0, eventIndex = 0;
        for (const int point : uniquePoints) {
            while (eventIndex < boundaries.size() && boundaries[eventIndex].first <= point) {
                overlapCount += boundaries[eventIndex].second;
                eventIndex++;
            }
            int currentCount = valueCount.count(point) ? valueCount[point] : 0;
            int possibleFreq = currentCount + min(numOps, overlapCount - currentCount);
            highestFreq = max(highestFreq, possibleFreq);
        }
        return highestFreq;
    }
};
",1447724570
Navneet Ranjan,NavneetRanjan002,694,3622,cpp,"
class Solution {
public:
    int maxFrequency(vector<int>& n, int r, int m) {
        unordered_map<int, int> f;
        map<int, int> e;

        fillFrequencyAndEvents(n, r, f, e);

        int maxFreq = 0;
        int c = 0;
        set<int> t;

        for (const auto& p : e) {
            t.insert(p.first);
        }
        for (int num : n) {
            t.insert(num);
        }

        for (int target : t) {
            if (e.find(target) != e.end()) {
                c += e[target];
            }

            int exact = f[target];
            int adj = c - exact;
            int totalFreq = exact + min(adj, m);
            maxFreq = max(maxFreq, totalFreq);
        }

        return maxFreq;
    }

private:
    void fillFrequencyAndEvents(vector<int>& n, int r, unordered_map<int, int>& f, map<int, int>& e) {
        for (int num : n) {
            int start = num - r;
            int end = num + r + 1;
            e[start]++;
            e[end]--;
            f[num]++;
        }
    }
};
",1447775780
Navneet Ranjan,NavneetRanjan002,694,3626,cpp,"#include <limits.h>

class Solution {
public:
    long long prod(int n){
        long long ans = 1;
        while (n > 0) {
            int a = n % 10;
            if (a == 0) return 0; // Early exit if any digit is 0 since the product will be 0
            ans *= a;
            if (ans > LLONG_MAX / 10) return LLONG_MAX; // Overflow protection
            n = n / 10;
        }
        return ans;
    }

    int smallestNumber(int n, int t) {
        const int LIMIT = 1000000; // Define an arbitrary upper limit for search

        while (n < LIMIT) {
            if (prod(n) % t == 0) {
                return n;
            }
            n++;
        }
        return -1; // Return -1 if no solution is found within the limit
    }
};
",1447660246
Navneet Ranjan,NavneetRanjan002,694,3640,cpp,"
class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int ops) {
        map<int, int> freq;
        vector<pair<int, int>> events;
        
        setupEventsAndFrequency(nums, k, freq, events);

        set<int> points;
        for (auto& e : events) {
            points.insert(e.first);
        }
        for (auto& p : freq) {
            points.insert(p.first);
        }
        
        sort(events.begin(), events.end());

        int idx = 0, overlap = 0, maxFreq = 0;

        for (int t : points) {
            while (idx < events.size() && events[idx].first <= t) {
                overlap += events[idx].second;
                idx++;
            }

            int count = freq.count(t) ? freq[t] : 0;
            int possibleFreq = count + min(ops, overlap - count);
            maxFreq = max(maxFreq, possibleFreq);
        }

        return maxFreq;
    }

private:
    void setupEventsAndFrequency(const vector<int>& nums, int k, map<int, int>& freq, vector<pair<int, int>>& events) {
        for (int num : nums) {
            freq[num]++;
            events.emplace_back(num - k, +1);
            events.emplace_back(num + k + 1, -1);
        }
    }
};
",1447780400
ysahu,ysahu,696,3622,java,"class Solution {
    public int maxFrequency(int[] nums, int k, int numOperations) {
        int n = nums.length;
        int max = 0;
        for (int i = 0; i < n; i++) max = Math.max(nums[i], max);
        
        int[] d = new int[max + 2];
        int[] v = new int[max + 2];

        for (int i = 0; i < n; i++) {
            int num = nums[i];
            v[num]++;
            d[Math.max(num - k, 0)]++;
            d[Math.min(num + k, max) + 1]--;
        }

        for (int i = 1; i < d.length; i++) {
            d[i] += d[i - 1];
        }

        int best = 0;
        for (int i = 0; i < d.length; i++) {
            int s = Math.min(numOperations, d[i] - v[i]) + v[i];
            if (s > best) best = s;
        }

        return best;
    }
}",1447721151
ysahu,ysahu,696,3626,c,"int smallestNumber(int n, int t) {
    while (true) {
        int p = 1, c = n;
        while (c) {
            p *= c % 10;
            c /= 10;
        }
        if (p % t == 0) return n;
        n++;
    }
}",1447653571
ysahu,ysahu,696,3640,java,"class Solution {
    public int maxFrequency(int[] nums, int k, int numOperations) {
        Arrays.sort(nums);
        int best = 0, left = 0, right = 0, n = nums.length;
        for (int mid = 0; mid < n;) {
            int num = nums[mid], old = mid;
            while (nums[left] < num - k) left++;
            while (right < n && nums[right] <= num + k) right++;
            while (mid < n && nums[mid] == num) mid++;
            int d = mid - old;
            int b = Math.min(right - left - d, numOperations) + d;
            if (best < b) best = b;
        }

        left = 0;
        for (right = 0; right < n; right++) {
            while (nums[left] < nums[right] - 2 * k) left++;
            int b = Math.min(right - left + 1, numOperations);
            if (best < b) best = b;
        }

        return best;
    }
}",1447780574
D Nisritha Reddy,nisritha35,697,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        
        int n = nums.size();
        
        sort(nums.begin(), nums.end());
        
        map<int, int>fre;
        
        for(int x: nums)fre[x]++;
        
        int ans = 1;
        
        // let all nums be converted to nums[i]
        
        for(int i =0; i<n; i++){
            
            int l = 0, h = i, lft = i;
            
            while(l <= h){
                int mid = l + ((h - l) >> 1);
                if(nums[mid]+k >= nums[i]){
                    lft = mid; h = mid - 1;
                }
                else{
                    l = mid + 1;
                }
            }
            
            l = i, h = n-1; int ryt = i;
            
            while(l <= h){
                int mid = l + ((h - l ) >> 1);
                if(nums[mid]-k <= nums[i]){
                    ryt = mid; l = mid + 1;
                }
                else{
                    h = mid -1;
                }
            }
            
            int add = (ryt - lft + 1) - fre[nums[i]];
            
            ans = max(ans, min(numOperations, add) + fre[nums[i]]); 
            
        }
        
        // convert all numbers to some number in that range 
        
        for(int i = 0; i<n; i++){
            
            int l = i, h = n-1, ryt = i;
            
            while(l <= h){
                int mid = l + ((h - l) >> 1);
                if(nums[mid]-k <= nums[i]+k){
                    ryt = mid; l = mid + 1;
                }
                else{
                    h = mid - 1;
                }
            }
            
            ans = max(ans, min(numOperations, ryt - i + 1));
            
        }
        
        return ans;

    }
};",1447764097
D Nisritha Reddy,nisritha35,697,3626,cpp,"class Solution {
public:
    int smallestNumber(int n, int t) {

        int num = n;
        
        while(1){

            int x = num, pro = 1;
            while(x!=0){
                pro *= (x%10);
                x/=10;
            }
            if(pro%t==0)return num;
            num++;
        }

        return -1;
    }
};",1447659038
D Nisritha Reddy,nisritha35,697,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        
        int n = nums.size();
        
        sort(nums.begin(), nums.end());
        
        map<int, int>fre;
        
        for(int x: nums)fre[x]++;
        
        int ans = 1;
        
        // let all nums be converted to nums[i]
        
        for(int i =0; i<n; i++){
            
            int l = 0, h = i, lft = i;
            
            while(l <= h){
                int mid = l + ((h - l) >> 1);
                if(nums[mid]+k*1ll >= nums[i]*1ll){
                    lft = mid; h = mid - 1;
                }
                else{
                    l = mid + 1;
                }
            }
            
            l = i, h = n-1; int ryt = i;
            
            while(l <= h){
                int mid = l + ((h - l ) >> 1);
                if(nums[mid]-k*1ll <= nums[i]*1ll){
                    ryt = mid; l = mid + 1;
                }
                else{
                    h = mid -1;
                }
            }
            
            int add = (ryt - lft + 1) - fre[nums[i]];
            
            ans = max(ans, min(numOperations, add) + fre[nums[i]]); 
            
        }
        
        // convert all numbers to some number in that range 
        
        for(int i = 0; i<n; i++){
            
            int l = i, h = n-1, ryt = i;
            
            while(l <= h){
                int mid = l + ((h - l) >> 1);
                if(nums[mid]-k*1ll <= nums[i]+k*1ll){
                    ryt = mid; l = mid + 1;
                }
                else{
                    h = mid - 1;
                }
            }
            
            ans = max(ans, min(numOperations, ryt - i + 1));
            
        }
        
        return ans;

    }
};",1447765989
Gaurav,_hashmap,698,3622,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        
        nums.sort()
        res = 0
        n = len(nums)
        def right(index):
            # print(""_________________________"")
            low = index
            high= len(nums)-1
            val = nums[index] + k
            res = index
            # print(""right"",index,val,nums)
            # print(""low,high"",low,high)
            while low<=high:
                mid =(low+high)//2
                if nums[mid] <=val:
                    # print(""right"",mid,nums[mid],""TRUEEE"",val,nums)
                    res = mid
                    low = mid+1
                else:
                    # print(""lol"",mid,nums[mid],""TRUEEE"",val,nums)
                    high = mid-1
                # print(""low,high"",low,high)
            # print(""right"",index,val,nums,""TRUEEE"",res)
            return res
        def left(index):
            low = 0
            high= index
            val = nums[index] - k
            res = index
            while low<=high:
                mid =(low+high)//2
                if nums[mid] >=val:
                    res = mid
                    high = mid-1
                else:
                    low = mid+1
            return res
        def right2(index):
            low = index
            high= len(nums)-1
            val = nums[index] 
            res = index
            # print(""right"",index,val)
            while low<=high:
                mid =(low+high)//2
                if nums[mid] <=val:
                    res = mid
                    low = mid+1
                else:
                    high = mid-1
            return res
        def left2(index):
            low = 0
            high= index
            val = nums[index]
            res = index
            while low<=high:
                mid =(low+high)//2
                if nums[mid] >=val:
                    res = mid
                    high = mid-1
                else:
                    low = mid+1
            return res
        def right3(index):
            low = index
            high= len(nums)-1
            val = nums[index] + (2 * k)
            res = index
            # print(""right"",index,val)
            while low<=high:
                mid =(low+high)//2
                if nums[mid] <=val:
                    res = mid
                    low = mid+1
                else:
                    high = mid-1
            return res
        # print(nums)
        def left3(index):
            low = 0
            high= index
            val = nums[index] - (2*k)
            res = index
            while low<=high:
                mid =(low+high)//2
                if nums[mid] >=val:
                    res = mid
                    high = mid-1
                else:
                    low = mid+1
            return res
        res = 0 
        for i,x in enumerate(nums):
            
            
            # d = 1+b-a
            
            l = left2(i)#free cost
            r = right2(i)#free cost
            a = left(l)
            b = right(r)
            # print(x,[l,r],[a,b])
            res =max(res,1 + r-l )
            actual = r-l + 1
            d = b-a + 1
            extra = d -actual
            res =max(res,actual + min(extra,numOperations))
            if numOperations>1:
                m = left3(i)
                n = right3(i)
                # print(x,[min(numOperations,n-i+1),min(numOperations,1+i-m)])
                res = max(res,min(numOperations,n-i+1))
                res = max(res,min(numOperations,i-m+1))
            
        return res",1447765357
Gaurav,_hashmap,698,3626,python3,"class Solution:
    def smallestNumber(self, n: int, t: int) -> int:
        def p(x):
            s = list(str(x))
            res=1
            for x in s:
                res*=int(x)
            return res
        i=n
        while True:
            if p(i)%t==0:
                return i
            i+=1
        return -1",1447654419
Gaurav,_hashmap,698,3640,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        
        nums.sort()
        res = 0
        n = len(nums)
        def right(index):
            # print(""_________________________"")
            low = index
            high= len(nums)-1
            val = nums[index] + k
            res = index
            # print(""right"",index,val,nums)
            # print(""low,high"",low,high)
            while low<=high:
                mid =(low+high)//2
                if nums[mid] <=val:
                    # print(""right"",mid,nums[mid],""TRUEEE"",val,nums)
                    res = mid
                    low = mid+1
                else:
                    # print(""lol"",mid,nums[mid],""TRUEEE"",val,nums)
                    high = mid-1
                # print(""low,high"",low,high)
            # print(""right"",index,val,nums,""TRUEEE"",res)
            return res
        def left(index):
            low = 0
            high= index
            val = nums[index] - k
            res = index
            while low<=high:
                mid =(low+high)//2
                if nums[mid] >=val:
                    res = mid
                    high = mid-1
                else:
                    low = mid+1
            return res
        def right2(index):
            low = index
            high= len(nums)-1
            val = nums[index] 
            res = index
            # print(""right"",index,val)
            while low<=high:
                mid =(low+high)//2
                if nums[mid] <=val:
                    res = mid
                    low = mid+1
                else:
                    high = mid-1
            return res
        def left2(index):
            low = 0
            high= index
            val = nums[index]
            res = index
            while low<=high:
                mid =(low+high)//2
                if nums[mid] >=val:
                    res = mid
                    high = mid-1
                else:
                    low = mid+1
            return res
        def right3(index):
            low = index
            high= len(nums)-1
            val = nums[index] + (2 * k)
            res = index
            # print(""right"",index,val)
            while low<=high:
                mid =(low+high)//2
                if nums[mid] <=val:
                    res = mid
                    low = mid+1
                else:
                    high = mid-1
            return res
        # print(nums)
        def left3(index):
            low = 0
            high= index
            val = nums[index] - (2*k)
            res = index
            while low<=high:
                mid =(low+high)//2
                if nums[mid] >=val:
                    res = mid
                    high = mid-1
                else:
                    low = mid+1
            return res
        res = 0 
        for i,x in enumerate(nums):
            
            
            # d = 1+b-a
            
            l = left2(i)#free cost
            r = right2(i)#free cost
            a = left(l)
            b = right(r)
            # print(x,[l,r],[a,b])
            res =max(res,1 + r-l )
            actual = r-l + 1
            d = b-a + 1
            extra = d -actual
            res =max(res,actual + min(extra,numOperations))
            if numOperations>1:
                m = left3(i)
                n = right3(i)
                # print(x,[min(numOperations,n-i+1),min(numOperations,1+i-m)])
                res = max(res,min(numOperations,n-i+1))
                res = max(res,min(numOperations,i-m+1))
            
        return res",1447766128
lqCKWBPxHc,lqCKWBPxHc,699,3622,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        nums.sort()
        d2 = defaultdict(int)
        d3 = defaultdict(list)
        d4 = defaultdict(list)
        for i in range(min(nums), max(nums) + 1):
            left = bisect_left(nums, i - k)
            right = bisect_right(nums, i + k)

            d4[i] = [bisect_left(nums, i), bisect_right(nums, i)]
            diff = d4[i][1] - d4[i][0]
            d2[i] = (min(right - left - diff, numOperations) + diff)
        mx = 0
        res = []
        for k2, v in d2.items():
            if v > mx:
                mx = v
                res = [k2]
            elif v == mx:
                res.append(k2)

        return mx",1447728630
lqCKWBPxHc,lqCKWBPxHc,699,3626,python3,"class Solution:
    def smallestNumber(self, n: int, t: int) -> int:
        def productOfDigits(x):
            product = 1
            while x > 0:
                product *= x % 10
                x //= 10
            return product

        while True:
            if productOfDigits(n) % t == 0:
                return n
            n += 1
        return -1",1447655001
lqCKWBPxHc,lqCKWBPxHc,699,3640,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        nums.sort()
        possible_x_values = set()
        for num in nums:
            possible_x_values.update([num, num - k, num + k])
        possible_x_values = sorted(possible_x_values)

        max_freq = 0
        n = len(nums)
        for x in possible_x_values:
            left = bisect_left(nums, x - k)
            right = bisect_right(nums, x + k)
            total_in_range = right - left
            count_same = bisect_right(nums, x) - bisect_left(nums, x)
            numAdjustable = total_in_range - count_same
            total_possible = count_same + min(numAdjustable, numOperations)
            max_freq = max(max_freq, total_possible)

        return max_freq
",1447758386
Rajat Singh,starc_01,700,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        int n = nums.size();
        map<int, int> f;
        vector<pair<int, int>> arr;

        for(int i: nums){
            f[i]++;
            arr.push_back({i - k, 1});
            arr.push_back({i + k + 1, -1});
        }
        
        set<int> s;
        for(auto i: arr) s.insert(i.first);
        for(auto i: f) s.insert(i.first);

        sort(arr.begin(), arr.end());
        int cnt = 0;
        int maxi = 0;
        int curr = 0;
        int ind = 0;

        for(int i: s){
            while(ind < arr.size() && arr[ind].first <= i){
                curr += arr[ind].second;
                ind++;
            }

            if(f.count(i)) cnt = f[i];
            else cnt = 0;
            int checkFreq = cnt + min(numOperations, curr - cnt);
            maxi = max(maxi, checkFreq);
        }
        return maxi;
    }
};",1447765125
Rajat Singh,starc_01,700,3626,cpp,"class Solution {
public:
    int smallestNumber(int n, int t) {
        // 15
        while(1){
            int num = n;
            int val = n;
            int tmp = 1;
            while(val > 0){
                tmp  *= (val % 10);
                val = val / 10;
            }
            if(tmp % t == 0) return num;
            n++;
        }
        return 0;
    }
};",1447667847
Rajat Singh,starc_01,700,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        int n = nums.size();
        map<int, int> f;
        vector<pair<int, int>> arr;

        for(int i: nums){
            f[i]++;
            arr.push_back({i - k, 1});
            arr.push_back({i + k + 1, -1});
        }
        
        set<int> s;
        for(auto i: arr) s.insert(i.first);
        for(auto i: f) s.insert(i.first);

        sort(arr.begin(), arr.end());
        int cnt = 0;
        int maxi = 0;
        int curr = 0;
        int ind = 0;

        for(int i: s){
            while(ind < arr.size() && arr[ind].first <= i){
                curr += arr[ind].second;
                ind++;
            }

            if(f.count(i)) cnt = f[i];
            else cnt = 0;
            int checkFreq = cnt + min(numOperations, curr - cnt);
            maxi = max(maxi, checkFreq);
        }
        return maxi;
    }
};",1447766186
mauz_kar_di_bete,mauz_kar_di_bete,701,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        const int MAXK=1e5;
        map<int,int>mp;
        for(auto &i:nums){
            i+=MAXK;
            mp[i]++;
        }
        
        vector<int>store(3*MAXK+5,0);
        for(int i=0;i<nums.size();i++){
            store[nums[i]-k]++;
            store[nums[i]+k+1]--;
        }
        int prev=0;
        for(auto &i:store){
            prev+=i;
            i=prev;
        }
        int ans=1;
        for(int i=0;i<store.size();i++){
            if(store[i]>numOperations){
                if(mp.find(i)!=mp.end()){
                    if((store[i]-mp[i])<=numOperations){
                        ans=max(ans,store[i]);
                    }
                    else{
                        ans=max(ans,mp[i]+numOperations);
                    }
                }
            }
            else{
                ans=max(ans,store[i]);
            }
        }
        return ans;
    }
};",1447719153
mauz_kar_di_bete,mauz_kar_di_bete,701,3626,cpp,"class Solution {
public:
    int smallestNumber(int n, int t) {
        for(int i=n;i<=200;i++){
            if(prod(i)%t==0){
                return i;
            }
        }
        return -1;
        
    }

    int prod(int n){
        int ans=1;
        while(n>0){
            int rem=n%10;
            n=n/10;
            ans*=rem;
        }
        return ans;
    }
};",1447662678
mauz_kar_di_bete,mauz_kar_di_bete,701,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        map<int,int>mp;
        map<int,int>store;
        int ans=0;
        for(auto &i:nums){
            mp[i]++;
            ans=max(ans,mp[i]);
            store[i]=0;
        }

        for(auto &i:nums){
            store[i-k]++;
            store[i+k+1]--;
        }
        int prevsum=0;
        for(auto &i:store){
            int val=i.second;
            int key=i.first;
            prevsum+=val;
            if(prevsum>numOperations){
                if(mp.find(key)!=mp.end()){
                     if((prevsum-mp[key])<=numOperations){
                        ans=max(ans,prevsum);
                    }
                    else{
                        ans=max(ans,mp[key]+numOperations);
                    }
                }
            }
            else{
                ans=max(ans,prevsum);
            }
        }
        return ans;
    }
};",1447773926
jason7708,jason7708,702,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        unordered_map<int, int> cnt;
        map<int, int> mp;
        for(int num : nums) {
            cnt[num]++;
            mp[num - k]++;
            mp[num + k + 1]--;
        }

        
        ranges::sort(nums);
        
        nums.erase(unique(nums.begin(), nums.end()), nums.end());
        int l = 0, r = 0;
        int n = nums.size();
        int cur = 0, ans = 0;
        deque<int> dq;
        for(auto it=mp.begin(); it!=mp.end(); ++it) {
            cur += it->second;
            auto nxt = next(it);
            if(nxt == mp.end()) break;
            while(r < n && nums[r] < nxt->first) {
                while(!dq.empty() && cnt[nums[r]] >= cnt[nums[dq.back()]]) {
                    dq.pop_back();
                }
                dq.push_back(r);
                r++;
            }
            while(l < n && nums[l] < it->first) {
                if(!dq.empty() && dq.front() == l) {
                    dq.pop_front();
                }
                l++;
            }
            int mx_f = dq.empty() ? 0 : cnt[nums[dq.front()]];
            // cout << mx_f << ' ' << mx_f + numOperations << ' ' << cur << '\n';
            ans = max(ans, min(mx_f + numOperations, cur));
        }
        return ans;
    }
};",1447750767
jason7708,jason7708,702,3626,cpp,"class Solution {
public:
    int smallestNumber(int n, int t) {
        int x = n;
        while(x <= n * t) {
            int cur = x;
            int product = 1;
            while(cur) {
                product *= cur % 10;
                cur /= 10;
            }
            if(product % t == 0) {
                return x;
            }
            x++;
        }
        return n * t;
    }
};",1447655962
jason7708,jason7708,702,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        unordered_map<int, int> cnt;
        map<int, int> mp;
        for(int num : nums) {
            cnt[num]++;
            mp[num - k]++;
            mp[num + k + 1]--;
        }

        
        ranges::sort(nums);
        
        nums.erase(unique(nums.begin(), nums.end()), nums.end());
        int l = 0, r = 0;
        int n = nums.size();
        int cur = 0, ans = 0;
        deque<int> dq;
        for(auto it=mp.begin(); it!=mp.end(); ++it) {
            cur += it->second;
            auto nxt = next(it);
            if(nxt == mp.end()) break;
            while(r < n && nums[r] < nxt->first) {
                while(!dq.empty() && cnt[nums[r]] >= cnt[nums[dq.back()]]) {
                    dq.pop_back();
                }
                dq.push_back(r);
                r++;
            }
            while(l < n && nums[l] < it->first) {
                if(!dq.empty() && dq.front() == l) {
                    dq.pop_front();
                }
                l++;
            }
            int mx_f = dq.empty() ? 0 : cnt[nums[dq.front()]];
            // cout << mx_f << ' ' << mx_f + numOperations << ' ' << cur << '\n';
            ans = max(ans, min(mx_f + numOperations, cur));
        }
        return ans;
    }
};",1447751014
Robbie,RobertSkonieczny,703,3622,java,"class Solution {
    public int maxFrequency(int[] nums, int k, int numOperations) {
        Arrays.sort(nums);
        Map<Integer, Integer> freq = new HashMap<>();
        for (int num : nums) {
            freq.put(num, freq.getOrDefault(num, 0)+1);
        }
        int max = 0;
        for (int i = 0;i < nums.length;i++) {
            int lowerBound = binarySearchLower(nums, nums[i]-k);
            int upperBound = binarySearchUpper(nums, nums[i]+k)+1;
            int totalOfCurrentNumber = freq.get(nums[i]);
            max = Math.max(max, totalOfCurrentNumber);
            int onesCanApplyOperationOn = upperBound - lowerBound - totalOfCurrentNumber;
            //System.out.println(""NUM: "" + nums[i] + "": TOTAL OPS CAN BE APPLIED"" + onesCanApplyOperationOn + "" : "" + ""LOWER: "" + lowerBound + "": UPPER: "" + upperBound);
            max = Math.max(max, Math.min(onesCanApplyOperationOn, numOperations) + totalOfCurrentNumber);
            
            // meet at some number check
            lowerBound = binarySearchLower(nums, nums[i] - k * 2);
            max = Math.max(max, Math.min(i - lowerBound + 1, numOperations));
            //System.out.println(""MEET AT SOME NUMBER LEN: "" + Math.min(i - lowerBound + 1, numOperations));
            
        }
        return max;
    }
    private int binarySearchUpper(int[] nums, int target) {
        int left = 0;
        int right = nums.length-1;
        int ans = 0;
        while (left <= right) {
            int mid = (left + right) / 2;
            
            if (nums[mid] <= target) {
                ans = mid;
                left = mid + 1;
            } else {
                right = mid - 1;
            }
        }
        return ans;
        
    }
    
    private int binarySearchLower(int[] nums, int target) {
        int left = 0;
        int right = nums.length;
        
        while (left < right) {
            int mid = (left + right) / 2;
            
            if (nums[mid] < target) {
                left = mid + 1;
            } else {
                right = mid;
            }
        }
        return left;
        
    }
}

",1447766372
Robbie,RobertSkonieczny,703,3626,java,"class Solution {
    public int smallestNumber(int n, int t) {
        while (true) {
            int num = n;
            int product = 1;
            while (num != 0) {
                product *= num % 10;
                num /= 10;
            }
            if (product % t == 0) return n;
            n++;
        }
    }
}",1447658527
Robbie,RobertSkonieczny,703,3640,java,"class Solution {
    public int maxFrequency(int[] nums, int k, int numOperations) {
        Arrays.sort(nums);
        Map<Integer, Integer> freq = new HashMap<>();
        for (int num : nums) {
            freq.put(num, freq.getOrDefault(num, 0)+1);
        }
        int max = 0;
        for (int i = 0;i < nums.length;i++) {
            int lowerBound = binarySearchLower(nums, nums[i]-k);
            int upperBound = binarySearchUpper(nums, nums[i]+k)+1;
            int totalOfCurrentNumber = freq.get(nums[i]);
            max = Math.max(max, totalOfCurrentNumber);
            int onesCanApplyOperationOn = upperBound - lowerBound - totalOfCurrentNumber;
            //System.out.println(""NUM: "" + nums[i] + "": TOTAL OPS CAN BE APPLIED"" + onesCanApplyOperationOn + "" : "" + ""LOWER: "" + lowerBound + "": UPPER: "" + upperBound);
            max = Math.max(max, Math.min(onesCanApplyOperationOn, numOperations) + totalOfCurrentNumber);
            
            // meet at some number check
            lowerBound = binarySearchLower(nums, nums[i] - k * 2);
            max = Math.max(max, Math.min(i - lowerBound + 1, numOperations));
            //System.out.println(""MEET AT SOME NUMBER LEN: "" + Math.min(i - lowerBound + 1, numOperations));
            
        }
        return max;
    }
    private int binarySearchUpper(int[] nums, int target) {
        int left = 0;
        int right = nums.length-1;
        int ans = 0;
        while (left <= right) {
            int mid = (left + right) / 2;
            
            if (nums[mid] <= target) {
                ans = mid;
                left = mid + 1;
            } else {
                right = mid - 1;
            }
        }
        return ans;
        
    }
    
    private int binarySearchLower(int[] nums, int target) {
        int left = 0;
        int right = nums.length;
        
        while (left < right) {
            int mid = (left + right) / 2;
            
            if (nums[mid] < target) {
                left = mid + 1;
            } else {
                right = mid;
            }
        }
        return left;
        
    }
}

",1447766805
At1811,atriavo_atx1811,704,3622,cpp,"class Solution {
public:
 static bool comp(const pair<int, int>& a, const pair<int, int>& b) {
    if (a.first == b.first) {
        return a.second < b.second; 
    }
    return a.first < b.first;  
}
    void solve(vector<pair<int,int>> &store) {
          sort(store.begin(),store.end(),comp);
      }
      int maxFrequency(vector<int>& nums, int k, int numOperations) {
          reverse(nums.begin(),nums.end());
          reverse(nums.begin(),nums.end());
    map<int, int> mpp,mpp1;
          int maxi2=0;
          for(int i=0;i<nums.size();i++) mpp1[nums[i]]++;
          for(auto it:mpp1) maxi2=max(maxi2,it.second);
    vector<pair<int, int>> store;
    for (int i = 0; i < nums.size(); i++) {
        store.push_back({nums[i] - k, +1});
        store.push_back({nums[i] + k + 1, -1});
        mpp[nums[i]]++;  
    }
    set<int> points;
          int i=0;
    while(i<store.size()){
       points.insert(store[i].first);
        i++;
    } 
    for (auto& it : mpp) points.insert(it.first);  
          reverse(store.begin(),store.end());
    solve(store);
    int index = 0, curr = 0, maxi = 0, ans = 0;
    for (auto it : points) {
        while (index < store.size() && store[index].first <= it) {
            curr += store[index].second;
            index++;
        }
        if(mpp.count(it)) ans=mpp[it];
            else ans=0;
        maxi = max(maxi, ans + min(numOperations, curr - ans));
    }  
    return max(maxi2,maxi);
}
};",1447749436
At1811,atriavo_atx1811,704,3626,cpp,"class Solution {
public:
    int getProduct(int n) 
{ 
    int product = 1; 
  
    while (n != 0)  
    { 
        product = product * (n % 10); 
        n = n / 10; 
    } 
  
    return product; 
} 
    int smallestNumber(int n, int t) {
        int i=n;
        while(true){
              if(getProduct(i)%t==0) return i;
            i++;
            
        }
        return 0;
    }
};",1447657473
At1811,atriavo_atx1811,704,3640,cpp,"class Solution {
public:
 static bool comp(const pair<int, int>& a, const pair<int, int>& b) {
    if (a.first == b.first) {
        return a.second < b.second; 
    }
    return a.first < b.first;  
}
    void solve(vector<pair<int,int>> &store) {
          sort(store.begin(),store.end(),comp);
      }
      int maxFrequency(vector<int>& nums, int k, int numOperations) {
    map<int, int> mpp,mpp1;
          int maxi2=0;
          for(int i=0;i<nums.size();i++) mpp1[nums[i]]++;
          for(auto it:mpp1) maxi2=max(maxi2,it.second);
    vector<pair<int, int>> store;
    for (int i = 0; i < nums.size(); i++) {
        store.push_back({nums[i] - k, +1});
        store.push_back({nums[i] + k + 1, -1});  
    }
        int i=0;
          while(i<nums.size()){
               mpp[nums[i]]++;
              i++;
          }
    set<int> p;
          i=0;
    while(i<store.size()){
       p.insert(store[i].first);
        i++;
    } 
    for (auto it : mpp) p.insert(it.first);  
          reverse(store.begin(),store.end());
    solve(store);
    int index = 0, curr = 0, maxi = 0, ans = 0,count=0;
    for (auto it : p) {
        while (index < store.size() && store[index].first <= it) {
            curr += store[index].second;
            index++;
            count++;
        }
        if(mpp.count(it)) ans=mpp[it];
        else ans=0;
        maxi = max(maxi, ans + min(numOperations, curr - ans));
    }  
          count=0;
    return max(maxi2,maxi)+count;
}
};",1447774308
Amit Kumar,Hebion_369,705,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int nop) {
        map<int,int>mp;
        unordered_map<int,int>mp2;

        int maxf=0,maxn=-1;
        for(auto &e: nums){
            mp2[e]++;
            mp[e-k]++;
            mp[e+k+1]--;
            if(mp.find(e) == mp.end())mp[e] = 0;
        }

        // for(auto &[f,s]: mp)cout<<f<<"" ""<<s<<endl;

        //move in map

        int curr = 0,ans=0,maxc=-1e9;
        for(auto &[f,s]: mp){
            curr+=s;
            // cout<<f<<"" ""<<s<<"" ""<<curr<<endl;
            if(curr > ans ){
                if(mp2.find(f) == mp2.end()){
                    ans=min(nop,curr);
                }else{
                    ans = min(mp2[f]+nop, curr);
                }
                    maxc = max(maxc,ans);
            }
            // cout<<f<<"" ""<<ans<<"" ""<<maxc<<endl;
        }
        return maxc;
    }
};",1447750381
Amit Kumar,Hebion_369,705,3626,cpp,"class Solution {
public:
    int smallestNumber(int n, int t) {
        while(n){
            int x = 1,nn = n;
            while(nn){
                x*= (nn%10);
                nn/=10;
            }
            if(x % t == 0)return n;
            n++;
        }
        return n;
    }
};",1447654602
Amit Kumar,Hebion_369,705,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int nop) {
        map<int,int>mp;
        unordered_map<int,int>mp2;

        int maxf=0,maxn=-1;
        for(auto &e: nums){
            mp2[e]++;
            mp[e-k]++;
            mp[e+k+1]--;
            if(mp.find(e) == mp.end())mp[e] = 0;
        }

        // for(auto &[f,s]: mp)cout<<f<<"" ""<<s<<endl;

        //move in map

        int curr = 0,ans=0,maxc=-1e9;
        for(auto &[f,s]: mp){
            curr+=s;
            // cout<<f<<"" ""<<s<<"" ""<<curr<<endl;
            if(curr > ans ){
                if(mp2.find(f) == mp2.end()){
                    ans=min(nop,curr);
                }else{
                    ans = min(mp2[f]+nop, curr);
                }
                    maxc = max(maxc,ans);
            }
            // cout<<f<<"" ""<<ans<<"" ""<<maxc<<endl;
        }
        return maxc;
    }
};",1447751222
Dmitry Yudakov,tdkkdt,706,3622,csharp,"public class Solution {
    public int MaxFrequency(int[] nums, int k, int numOperations) {
        int result = 0;
        int l = 0;
        int r = 0;
        var cc = new Dictionary<int, int>();
        foreach(var n in nums) {
            cc.TryGetValue(n, out var ccc);
            cc[n] = ccc + 1;
        }
        // var nnums = cc.Keys.Order().ToArray();
        Array.Sort(nums);
        var max = nums.Last();        
        for (int i = 0; i <= max; i++) {
            while (nums[l] < i - k) {
                l++;
            }
            while (r < nums.Length && i + k >= nums[r]) {
                r++;
            }
            cc.TryGetValue(i, out var same);
            var toChange = r - l - same;
            // Console.WriteLine($""i = {i}, l = {l}, r = {r}, same = {same}"");
            result = Math.Max(result, Math.Min(toChange, numOperations) + same);
        }
        return result;
    }
}",1447714074
Dmitry Yudakov,tdkkdt,706,3626,csharp,"public class Solution {
    public int SmallestNumber(int n, int t) {
        int i = n;
        while (Calc(i) % t != 0) {
            i++;
        }
        return i;
    }

    static long Calc(int v) {
        long result = 1;
        while (v > 0) {
            result *= v % 10;
            v/=10;
        }
        return result;
    }
}",1447659338
Dmitry Yudakov,tdkkdt,706,3640,csharp,"public class Solution {
    public int MaxFrequency(int[] nums, int k, int numOperations) {
        int result = 0;
        int l = 0;
        int r = 0;
        var cc = new Dictionary<long, int>();
        foreach(var n in nums) {
            cc.TryGetValue(n, out var ccc);
            cc[n] = ccc + 1;
        }
        Array.Sort(nums);
        var max = nums.Last();
        var nn = new List<long>(cc.Keys);
        foreach(var kk in cc.Keys) {
            if (!cc.ContainsKey(kk + k)) {
                nn.Add(kk + k);
            }
        }
        nn.Sort();
        foreach(var i in nn) {
            while (nums[l] < i - k) {
                l++;
            }
            while (r < nums.Length && i + k >= nums[r]) {
                r++;
            }
            cc.TryGetValue(i, out var same);
            var toChange = r - l - same;
            // Console.WriteLine($""i = {i}, l = {l}, r = {r}, same = {same}"");
            result = Math.Max(result, Math.Min(toChange, numOperations) + same);
        }
        return result;        
    }
}",1447743069
Sarfaraz Alam,sarfaraz_alam13,707,3622,java,"class Solution {
    public int maxFrequency(int[] arr, int limit, int maxOps) 
    
    { List<int[]> intervals = new ArrayList<>();
        int size = arr.length;
        Map<Integer, Integer> os = new HashMap<>();
       
        for (int value : arr) 
        {
            os.put(value, os.getOrDefault(value, 0) + 1);
            
            
                    intervals.add(new int[]{value - limit, 1});
            intervals.add(new int[]{value + limit + 1, -1});
        }
        TreeSet<Integer> us = new TreeSet<>();
        for (int[] interval : intervals) {
            us.add(interval[0]);
        }
        for (int value : os.keySet()) 
        {
            us.add(value);
        }
        
        Collections.sort(intervals, (a,b) -> a[0] - b[0]);
        
        int pointer = 0;
        int overlap = 0;
        int hq = 0;
        int currentCount = 0;
        
        for (int point : us) {
            while (pointer < intervals.size() && intervals.get(pointer)[0] <= point) {
                overlap += intervals.get(pointer)[1];
                pointer++;
            }
            
            currentCount = os.containsKey(point) ? os.get(point) : 0;
            int pq = currentCount + Math.min(maxOps, overlap - currentCount);
            hq = Math.max(hq, pq);
        }
        
        return hq;
    }
}
",1447755379
Sarfaraz Alam,sarfaraz_alam13,707,3626,java,"class Solution {
    public int smallestNumber(int b, int c) {
        int d = b;
        
        while (true)
            
        {
            int e01 = 1;
            int f = d;
            
            while (f > 0) 
            {
                e01 *= f % 10;
                f /= 10;
            }


            
            if (e01 % c == 0) 
            {
                return d;
            }
            d++;
        }
    }
}
",1447657339
Sarfaraz Alam,sarfaraz_alam13,707,3640,java,"class Solution {
     Map<Integer, Integer> z1 = new HashMap<>();
    public int maxFrequency(int[] a, int b, int c) 
    {
        int y1 = a.length;
        List<int[]> x1 = new ArrayList<>();
        
       
        
        for (int a1 : a) 
        {
            z1.put(a1, z1.getOrDefault(a1, 0) + 1);
                x1.add(new int[]{a1 - b, 1});
            x1.add(new int[]{a1 + b + 1, -1});
        }
        
        TreeSet<Integer> x2 = new TreeSet<>();
        for (int[] x3 : x1) {
            x2.add(x3[0]);
        }
        for (int a2 : z1.keySet()) {
            x2.add(a2);
        }
        
        Collections.sort(x1, (a3, b1) -> a3[0] - b1[0]);
        
        int y2 = 0;
        int z2 = 0;
        int a3 = 0;
        int b2 = 0;
        
        for (int c1 : x2) 
        {
            while (y2 < x1.size() && x1.get(y2)[0] <= c1) 
            {
                z2 += x1.get(y2)[1];
                y2++;
            }
            b2 = z1.containsKey(c1) ? z1.get(c1) : 0;
                int c2 = b2 + Math.min(c, z2 - b2);
            a3 = Math.max(a3, c2);
        }
        
        return a3;
    }
}
",1447759707
Long Le,lethanhlong582000,708,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        vector<int> a;
        map<int, int> m;
        int n = nums.size();

        for (int i = 0; i < n; i++) {            
            a.push_back(nums[i]);
            m[nums[i]]++;
        }
        sort(a.begin(), a.end());
        int from = *min_element(a.begin(), a.end());
        int to = *max_element(a.begin(), a.end());
        
        // for (int x : a) {
        //     cout << m[x] << ' ';
        // }
        // cout << '\n';
        // for (int x : a) cout << x << ' ';
        // cout << '\n';

        int res = 0;
        for (int i = from; i <= to; i++) {
            int low = i - k;
            int high = i + k;

            int x = lower_bound(a.begin(), a.end(), low) - a.begin() - 1;
            int y = upper_bound(a.begin(), a.end(), high) - a.begin();

            // cout << i << ' ' << x << ' ' << y << '\n';

            res = max(res, min(y - x - m[i] - 1, numOperations) + m[i]);
        }
        
        // for (int i = 0; i < a.size(); i++) {
        //     int low = a[i] - k;
        //     int high = a[i] + k;

        //     int x = lower_bound(a.begin(), a.end(), low) - a.begin() - 1;
        //     int y = upper_bound(a.begin(), a.end(), high) - a.begin();
        //     cout << i << ' ' << x << ' ' << y << '\n';

        //     int count = i - x - 1 + y - i - 1;
        //     res = max(res, min(count, numOperations) + m[a[i]]);
        // }

        return res;
    }
};",1447741374
Long Le,lethanhlong582000,708,3626,cpp,"class Solution {
public:
    int smallestNumber(int n, int t) {
        for (int i = n; ;i++) {
            if (sum(i) % t == 0) return i;
        }
    }

    int sum(int a) {
        int res = 1;
        while (a) {
            res *= a % 10;
            a /= 10;
        }

        return res;
    }
};",1447654950
Long Le,lethanhlong582000,708,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        vector<int> a;
        map<int, int> m;
        int n = nums.size();

        for (int i = 0; i < n; i++) {            
            a.push_back(nums[i]);
            m[nums[i]]++;
        }
        sort(a.begin(), a.end());
        int from = *min_element(a.begin(), a.end());
        int to = *max_element(a.begin(), a.end());

        int res = 0;
        for (int i = from; i <= to; ) {
            int low = i - k;
            int high = i + k;

            int x = lower_bound(a.begin(), a.end(), low) - a.begin() - 1;
            int y = upper_bound(a.begin(), a.end(), high) - a.begin();
            int z = upper_bound(a.begin(), a.end(), i) - a.begin();

            // cout << i << ' ' << x << ' ' << y << '\n';

            res = max(res, min(y - x - m[i] - 1, numOperations) + m[i]);

            if (z == a.size()) break;
            if (y == a.size()) i = a[z];
            else i = min(a[z], a[y] - k);
        }

        return res;
    }
};",1447767519
Arunim Singhal,Arunim64,709,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int op) {
        int maxN = *max_element(nums.begin(), nums.end());
        vector<int> c(maxN + k + 2, 0);
        for (int n : nums) c[n]++;

        vector<int> p(c.size(), 0);
        for (int i = 1; i < c.size(); ++i) p[i] = p[i - 1]+c[i];

        int res = 0;
        for (int t = 0; t < c.size(); ++t) {
            if (!c[t] && !op) continue;
            int l = max(0, t - k), r = min(int(c.size()) - 1, t + k);
            int inRange = p[r] - (l ? p[l - 1] : 0);
            res = max(res, min(op, inRange - c[t]) + c[t]);
        }

        return res;
    }
};",1447743360
Arunim Singhal,Arunim64,709,3626,cpp,"class Solution {

int pod(int n) {
    int pr = 1;
    while (n > 0) {
        pr *= (n % 10);
        n /= 10;
    }
    return pr;
}

public:
    int smallestNumber(int n, int t) {
    while (true) {
        int pr = pod(n);
        if (pr % t == 0) {
            return n;
        }
        n++;
    }
    }
};",1447706865
Arunim Singhal,Arunim64,709,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int op) {
        unordered_map<int, int> f;
        vector<pair<int, int>> e;
        
        for (int n : nums) f[n]++, e.push_back({n - k, 1}), e.push_back({n + k + 1, -1});
        
        set<int> p;
        for (auto& ev : e) p.insert(ev.first);
        for (auto& en : f) p.insert(en.first);
        
        sort(e.begin(), e.end());
        int idx = 0, c = 0, res = 0;
        
        for (int t : p) {
            while (idx < e.size() && e[idx].first <= t) c += e[idx++].second;
            res = max(res, f[t] + min(op, c - f[t]));
        }
        return res;
    }
};",1447760026
Antharvedi Sandeep,Antharvedi_sandeep,710,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        int max_num = *max_element(nums.begin(), nums.end());
        int size = max_num + k + 2;
        vector<int> freq(size, 0);

        for (int num : nums) {
            freq[num] += 1;
        }

        vector<int> pre(size, 0);
        pre[0] = freq[0];
        for (int i = 1; i < size; ++i) {
            pre[i] = pre[i - 1] + freq[i];
        }

        int result = 0;
        for (int x = 0; x < size; ++x) {
            if (freq[x] == 0 && numOperations == 0) {
                continue;
            }

            int left = max(0, x - k);
            int right = min(size - 1, x + k);
            int totalInRange = pre[right] - (left > 0 ? pre[left - 1] : 0);
            int canAdjust = totalInRange - freq[x];
            int total = freq[x] + min(numOperations, canAdjust);
            result = max(result, total);
        }

        return result;
    }
};",1447717231
Antharvedi Sandeep,Antharvedi_sandeep,710,3626,cpp,"class Solution {
public:
     int productOfDigits(int x) {
        int product = 1;
        while (x > 0) {
            product *= (x % 10);
            x /= 10;
        }
        return product;
    }

    int smallestNumber(int n, int t) {
        int x = n;
        while (true) {
            if (productOfDigits(x) % t == 0) {
                return x;
            }
            x++;
        }
    }
};",1447668486
Antharvedi Sandeep,Antharvedi_sandeep,710,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        int n = nums.size();
        unordered_map<int, int> freq;
        vector<pair<int, int>> events;
        
        for (int num : nums) {
            freq[num] += 1;
            events.push_back({num - k, 1});
            events.push_back({num + k + 1, -1});
        }
        
        set<int> points;
        for (auto& event : events) {
            points.insert(event.first);
        }
        for (auto& p : freq) {
            points.insert(p.first);
        }
        
        vector<int> sortedPoints(points.begin(), points.end());
        sort(events.begin(), events.end());
        
        int idx = 0;
        int currentOverlap = 0;
        int maxFreq = 0;
        
        for (int t : sortedPoints) {
            while (idx < events.size() && events[idx].first <= t) {
                currentOverlap += events[idx].second;
                idx++;
            }
            
            int actualCount = freq.count(t) ? freq[t] : 0;
            int possibleFreq = actualCount + min(numOperations, currentOverlap - actualCount);
            maxFreq = max(maxFreq, possibleFreq);
        }
        
        return maxFreq;
    }
};",1447735448
Chaitanya,cheenu123,711,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        sort(nums.begin(),nums.end());
        int n=nums.size();
        int ans=1;
        unordered_map<int,int> mp;
        for(auto x:nums){
            mp[x]++;
        }
        for(int i=0;i<n;i++){
            int temp=nums[i];
            int start=lower_bound(nums.begin(),nums.end(),temp-k)-nums.begin();
            int end=upper_bound(nums.begin(),nums.end(),temp+k)-nums.begin()-1;
            ans=max(ans,min(end-start+1,numOperations+mp[nums[i]]));
        }
        int i=0;
        int j=0;
        int ans2=1;
        while(j<n){
            while(nums[j]-nums[i]>2*k){
                i++;
            }
            ans2=max(ans2,min(j-i+1,numOperations));
            j++;
        }
        return max(ans,ans2);
    }
};",1447763488
Chaitanya,cheenu123,711,3626,cpp,"class Solution {
public:
    int sumDigits(string n){
        int ans=1;
        for(auto x:n){
            ans*=x-'0';
        }
        return ans;
    }

    int smallestNumber(int n, int t) {
        for(int i=n;i<100000;i++){
            if(sumDigits(to_string(i))%t==0) return i;
        }
        return -1;
    }
};",1447657003
Chaitanya,cheenu123,711,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        sort(nums.begin(),nums.end());
        int n=nums.size();
        int ans=1;
        unordered_map<int,int> mp;
        for(auto x:nums){
            mp[x]++;
        }
        for(int i=0;i<n;i++){
            int temp=nums[i];
            int start=lower_bound(nums.begin(),nums.end(),temp-k)-nums.begin();
            int end=upper_bound(nums.begin(),nums.end(),temp+k)-nums.begin()-1;
            ans=max(ans,min(end-start+1,numOperations+mp[nums[i]]));
        }
        int i=0;
        int j=0;
        int ans2=1;
        while(j<n){
            while(nums[j]-nums[i]>2*k){
                i++;
            }
            ans2=max(ans2,min(j-i+1,numOperations));
            j++;
        }
        return max(ans,ans2);
    }
};",1447767989
Aniket Shisodia,aniketshisodia7_,712,3622,cpp,"// jai shree ram
class Solution {
public:
    long long maxFrequency(vector<int>& nums, int maxAdjustment, int operations) {
        long long size = nums.size();
        map<long long, long long> frequency;
        vector<pair<long long, long long>> rangeEvents;
        set<long long> distinctPoints;
        long long maxFrequency = 0, overlappingCount = 0;
        for (long long num : nums) {
            frequency[num]++;
            rangeEvents.emplace_back(num - maxAdjustment, 1);
            rangeEvents.emplace_back(num + maxAdjustment + 1, -1);
        }
        for (const auto& event : rangeEvents) {
            distinctPoints.insert(event.first);
        }
        for (const auto& [key, value] : frequency) {
            distinctPoints.insert(key);
        }

        sort(rangeEvents.begin(), rangeEvents.end());

        auto eventIter = rangeEvents.begin();

        for (const auto& point : distinctPoints) {
            while (eventIter != rangeEvents.end() && eventIter->first <= point) {
                overlappingCount += eventIter->second;
                ++eventIter;
            }

            long long existingFrequency = frequency.count(point) ? frequency[point] : 0;
            long long potentialFrequency = existingFrequency + min(static_cast<long long>(operations), overlappingCount - existingFrequency);

            maxFrequency = max(maxFrequency, potentialFrequency);
        }

        return maxFrequency;
    }
};
",1447773483
Aniket Shisodia,aniketshisodia7_,712,3626,cpp,"// jai shree ram
class Solution {
public:
    int smallestNumber(int n, int t) {
        while(1) {
            int prod = 1;
            int num = n;
            while(num > 0) {
                prod *= (num%10);
                num = num / 10;
            }
            if(prod % t == 0) {
                return n;
            } 
            n++;
        }
    }
};",1447659330
Aniket Shisodia,aniketshisodia7_,712,3640,cpp,"// jai shree ram
class Solution {
public:
    long long maxFrequency(vector<int>& nums, int maxAdjustment, int operations) {
        long long size = nums.size();
        map<long long, long long> frequency;
        vector<pair<long long, long long>> rangeEvents;
        set<long long> distinctPoints;
        long long maxFrequency = 0, overlappingCount = 0;
        for (long long num : nums) {
            frequency[num]++;
            rangeEvents.emplace_back(num - maxAdjustment, 1);
            rangeEvents.emplace_back(num + maxAdjustment + 1, -1);
        }
        for (const auto& event : rangeEvents) {
            distinctPoints.insert(event.first);
        }
        for (const auto& [key, value] : frequency) {
            distinctPoints.insert(key);
        }

        sort(rangeEvents.begin(), rangeEvents.end());

        auto eventIter = rangeEvents.begin();

        for (const auto& point : distinctPoints) {
            while (eventIter != rangeEvents.end() && eventIter->first <= point) {
                overlappingCount += eventIter->second;
                ++eventIter;
            }

            long long existingFrequency = frequency.count(point) ? frequency[point] : 0;
            long long potentialFrequency = existingFrequency + min(static_cast<long long>(operations), overlappingCount - existingFrequency);

            maxFrequency = max(maxFrequency, potentialFrequency);
        }

        return maxFrequency;
    }
};
",1447775444
akbc,akbc,713,3622,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        nums.sort()
        ans = 1
        counts = Counter(nums)
        for i,x in enumerate(nums):
            for y in [-k,0,k]:
                j0 = bisect.bisect(nums, x + y + k)
                j1 = bisect.bisect_left(nums, x + y - k)
                #print(x,j0,j1)
                ans = max(ans, min(j0-j1,numOperations + counts[x + y]))            
        return ans",1447775484
akbc,akbc,713,3626,python3,"class Solution:
    def smallestNumber(self, n: int, t: int) -> int:

        def getDigitProd(x):
            if not x:
                return 0
            ans = 1
            while x:
                x,r = divmod(x,10)
                ans *= r
            return ans

        while True:
            z = getDigitProd(n)
            if z % t == 0:
                return n
            n += 1
        ",1447738729
akbc,akbc,713,3640,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        nums.sort()
        ans = 1
        counts = Counter(nums)
        for i,x in enumerate(nums):
            for y in [-k,0,k]:
                j0 = bisect.bisect(nums, x + y + k)
                j1 = bisect.bisect_left(nums, x + y - k)
                #print(x,j0,j1)
                ans = max(ans, min(j0-j1,numOperations + counts[x + y]))            
        return ans
        ",1447774831
prasun goyal,user2043T,714,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        int st = 0, en = 0, maxi = 1;
        int miniNum = nums[0], maxiNum = nums[0];
        unordered_map<int, int> fre;
        for (int i = 0; i < nums.size(); i++) {
            fre[nums[i]]++;
            miniNum = min(miniNum, nums[i] - k);
            maxiNum = max(maxiNum, nums[i] + k);
        }
        sort(nums.begin(), nums.end());
        for (int i = miniNum; i <= maxiNum; i++) {
            while (st < nums.size() && nums[st] < i - k) {
                st++;
            }
            while (en < nums.size() && nums[en] <= i + k) {
                en++;
            }
            int neededOperations = en - st - fre[i];
            if (neededOperations <= numOperations) {
                maxi = max(maxi, en - st);
            } else {
                maxi = max(maxi, en - st - (neededOperations - numOperations));
            }
            
        }
        return maxi;
    }
};",1447727950
prasun goyal,user2043T,714,3626,cpp,"class Solution {
public:
    int smallestNumber(int n, int t) {
        for (int i = n; i < n + 10; i++) {
            int m = i, p = 1;
            while (m > 0) {
                p = p * (m % 10);
                m /= 10;
            }
            if (p % t == 0) {
                return i;
            }
        }
        return n;
    }
};",1447688402
prasun goyal,user2043T,714,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        int st = 0, en = 0, maxi = 1;
        vector<int> points;
        unordered_map<int, int> fre;
        for (int i = 0; i < nums.size(); i++) {
            fre[nums[i]]++;
            points.push_back(nums[i]);
            points.push_back(nums[i] + k);
            points.push_back(nums[i] - k);
        }
        sort(points.begin(), points.end());
        sort(nums.begin(), nums.end());
        for (auto it: points) {
            while (st < nums.size() && nums[st] < it - k) {
                st++;
            }
            while (en < nums.size() && nums[en] <= it + k) {
                en++;
            }
            int neededOperations = en - st - fre[it];
            if (neededOperations <= numOperations) {
                maxi = max(maxi, en - st);
            } else {
                maxi = max(maxi, en - st - (neededOperations - numOperations));
            }
            
        }
        return maxi;
    }
};",1447744327
olegmak,olegmak,715,3622,cpp,"struct SegTree {
    struct Node {
        int max_op = -1;
        int max_val = 0;
    };
    int size;
    vector<Node> tree;
    SegTree(int sz) : size(bit_ceil((unsigned)sz)), tree(2 * size - 1) {}
    void propagate(int x, int lx, int rx) {
        if (lx + 1 == rx || tree[x].max_op == -1) {
            return;
        }
        tree[x * 2 + 1].max_op = max(tree[x * 2 + 1].max_op, tree[x].max_op);
        tree[x * 2 + 1].max_val = max(tree[x * 2 + 1].max_val, tree[x].max_op);
        tree[x * 2 + 2].max_op = max(tree[x * 2 + 2].max_op, tree[x].max_op);
        tree[x * 2 + 2].max_val = max(tree[x * 2 + 2].max_val, tree[x].max_op);
        tree[x].max_op = -1;
    }
    void update(int l, int r, int val, int x, int lx, int rx) {
        if (lx >= r || rx <= l) {
            return;
        }
        if (lx >= l && rx <= r) {
            tree[x].max_op = max(tree[x].max_op, val);
            tree[x].max_val = max(tree[x].max_val, val);
            return;
        }
        propagate(x, lx, rx);
        const int mx = midpoint(lx, rx);
        update(l, r, val, x * 2 + 1, lx, mx);
        update(l, r, val, x * 2 + 2, mx, rx);
        tree[x].max_val = max(tree[x * 2 + 1].max_val, tree[x * 2 + 2].max_val);
    }
    void update(int l, int r, int val) {
        update(l, r, val, 0, 0, size);
    }
    int get_max_val(int l, int r, int x, int lx, int rx) {
        if (lx >= r || rx <= l) {
            return -1;
        }
        if (lx >= l && rx <= r) {
            return tree[x].max_val;
        }
        propagate(x, lx, rx);
        const int mx = midpoint(lx, rx);
        return max(get_max_val(l, r, x * 2 + 1, lx, mx), get_max_val(l, r, x * 2 + 2, mx, rx));
    }
    int get_max_val(int l, int r) {
        return get_max_val(l, r, 0, 0, size);
    }
};

class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        sort(nums.begin(), nums.end());
        const int sz = nums.size();
        int r = 0;
        // vector<int> max_wnd(sz);
        // SegTree seg_tree(sz);
        int res = 0;
        for (int l = 0; l < sz; ++l) {
            while (r > l && nums[r - 1] - nums[l] > 2 * k) {
                --r;
            }
            while (r < sz && nums[r] - nums[l] <= 2 * k) {
                ++r;
                // max_wnd[l] = r - l;
            }
            // cout << l << "" "" << r << "" "" << r - l << ""\n"";
            // seg_tree.update(l, r, r - l);
            res = max(res, r - l);
        }
        res = min(res, numOperations);
        int l = 0;
        r = 0;
        int max_freq = 0;
        while (l < sz) {
            while (r < sz && nums[r] == nums[l]) {
                ++r;
            }
            auto r_iter = upper_bound(nums.begin() + r, nums.end(), nums[l] + k);
            const int r_idx = r_iter - nums.begin() - 1;
            auto l_iter = lower_bound(nums.begin(), nums.begin() + l + 1, nums[l] - k);
            const int l_idx = l_iter - nums.begin();
            const int freq = (r - l) + min(numOperations, (r_idx - r + 1) + (l - l_idx));
            res = max(res, freq);
            l = r;
        }
        return res;
    }
};",1447775152
olegmak,olegmak,715,3626,cpp,"using ll = long long;
class Solution {
public:
    int smallestNumber(int n, int t) {
        auto prod = [](int val) {
            ll res = 1;
            while (val) {
                res *= val % 10;
                val /= 10;
            }
            return res;
        };
        while (true) {
            if (prod(n) % t == 0) {
                return n;
            }
            ++n;
        }
    }
};",1447654873
olegmak,olegmak,715,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        sort(nums.begin(), nums.end());
        const int sz = nums.size();
        int r = 0;
        // vector<int> max_wnd(sz);
        // SegTree seg_tree(sz);
        int res = 0;
        for (int l = 0; l < sz; ++l) {
            while (r > l && nums[r - 1] - nums[l] > 2 * k) {
                --r;
            }
            while (r < sz && nums[r] - nums[l] <= 2 * k) {
                ++r;
                // max_wnd[l] = r - l;
            }
            // cout << l << "" "" << r << "" "" << r - l << ""\n"";
            // seg_tree.update(l, r, r - l);
            res = max(res, r - l);
        }
        res = min(res, numOperations);
        int l = 0;
        r = 0;
        int max_freq = 0;
        while (l < sz) {
            while (r < sz && nums[r] == nums[l]) {
                ++r;
            }
            auto r_iter = upper_bound(nums.begin() + r, nums.end(), nums[l] + k);
            const int r_idx = r_iter - nums.begin() - 1;
            auto l_iter = lower_bound(nums.begin(), nums.begin() + l + 1, nums[l] - k);
            const int l_idx = l_iter - nums.begin();
            const int freq = (r - l) + min(numOperations, (r_idx - r + 1) + (l - l_idx));
            res = max(res, freq);
            l = r;
        }
        return res;
    }
};",1447775752
hello_world,dvCsprIBMP,716,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
         unordered_map<int,int>mp;
        map<int,int>f;
        int ans=0;
        for(auto i:nums){
            mp[i]++;
            int l = max(0,i-k);
            int h = i+k;
            f[i]=f[i]+0;
            f[l]++;
            f[h+1]--;
        }
        int l=0;
        for(auto i:f){
            // cout<<i.first<<"" ""<<i.second<<endl;
            l = i.second+l;
            int self = mp[i.first];
            int cnt = l-self;
            ans=max(ans,self+min(numOperations,cnt));
        }
        return ans;
    }
};",1447763709
hello_world,dvCsprIBMP,716,3626,cpp,"class Solution {
public:
    int dp(int n){
        int a=1;
        while(n>0){
            int x = n%10;
            n=n/10;
            a=a*x;
        }
        return a;
    }
    int smallestNumber(int n, int t) {
        while(1){
            int val = dp(n);
            if(val%t==0)return n;
            n++;
        }
        return -1;
    }
};",1447768349
hello_world,dvCsprIBMP,716,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        // vector<int>f(1000000000,0);
        unordered_map<int,int>mp;
        map<int,int>f;
        int ans=0;
        for(auto i:nums){
            mp[i]++;
            int l = max(0,i-k);
            int h = i+k;
            f[i]=f[i]+0;
            f[l]++;
            f[h+1]--;
        }
        int l=0;
        for(auto i:f){
            // cout<<i.first<<"" ""<<i.second<<endl;
            l = i.second+l;
            int self = mp[i.first];
            int cnt = l-self;
            ans=max(ans,self+min(numOperations,cnt));
        }
        return ans;
    }
};",1447759259
grv_up,grv_up,717,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        int mx = *max_element(nums.begin(), nums.end());
        int n = mx + k + 2;
        vector<int> p(n, 0);
        vector<int> f(n, 0);
        int ans = 0;
        int ff=0;
        int anss=0;
        for (int i : nums) 
        {
            f[i]++;
        }

        p[0] = f[0];
        for (int i = 1; i < n; ++i) 
        {
            p[i] = p[i - 1] + f[i];
        }

        for (int x = 0; x < n; x++) 
        {
            if (f[x] == 0 && numOperations == 0) continue;

            int r = min(n - 1, x + k);
            int l = max(0, x - k);
            
            int temp = p[r] - (l > 0 ? p[l - 1] : 0);
            int xx = temp - f[x];
            if(ff==1)
            {
                anss = max(ans,f[x]);
            }
            else
            {
                ans=max(ans,min(numOperations, xx));
            }
            ans = max(ans, f[x] + min(numOperations, xx));
        }

        return ans;
    }
};",1447742989
grv_up,grv_up,717,3626,cpp,"class Solution {
public:
    int digitProduct(int num) {
        int p = 1;
        while (num > 0) 
        {
            int digit = num % 10;
            if (digit == 0) return 0;  
            p *= digit;
            num /= 10;
        }
        return p;
    }
    int smallestNumber(int n, int t) {
        int c = n;
        while (true) 
        {
            int p = digitProduct(c);
            if (p % t == 0)
            {
                return c;
            }
            c++;
        }
    }
};",1447667737
grv_up,grv_up,717,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        int n = nums.size();
        unordered_map<int, int> ump;
        vector<pair<int, int>> e;
        set<int> pts;
        int idx = 0,co=0;
        int ans = 0,f=0;
        int cnt = 0;
        for (int i : nums) 
        {
            ump[i]++;
            e.push_back({i - k, 1});
            e.push_back({i + k + 1, -1});
        }
        sort(e.begin(), e.end());
        for (auto& it : ump) 
        {
            pts.insert(it.first);
        }
        for (auto& it : e) 
        {
            pts.insert(it.first);
        }

        for (int t : pts) 
        {
            while (idx < e.size() && e[idx].first <= t) 
            {
                co += e[idx].second;
                idx++;
                if(f==1)
                {
                    idx=0;
                }
            }
        
            cnt = ump.count(t) > 0 ? ump[t] : 0;
            ans = max(ans, cnt + min(numOperations, co - cnt));
        }

        return ans;
    }
};",1447768392
Faizan Gigani,faizanigigani,718,3622,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        max_num = max(nums)
        size = max_num + k + 2

        freq = [0] * size
        for num in nums:
            freq[num] += 1

        pre = [0] * size
        pre[0] = freq[0]

        for i in range(1, size):
            pre[i] = pre[i-1] + freq[i]

        result = 0

        for x in range(size):
            if freq[x] == 0 and numOperations == 0:
                continue

            left = max(0, x-k)
            right = min(size-1, x+k)

            total_in_range = pre[right] - (pre[left - 1] if left > 0 else 0)
            can_adjust = total_in_range - freq[x]

            total = freq[x] + min(numOperations, can_adjust)
            result = max(result, total)
        return result",1447741889
Faizan Gigani,faizanigigani,718,3626,python3,"class Solution:
    def smallestNumber(self, n: int, t: int) -> int:
        str_n = str(n)
        while True:
            product = 1
            for i in str_n:
                product *= int(i)

            if product % t == 0:
                return int(str_n)
            else:
                str_n = str(int(str_n) + 1)
            
            ",1447657503
Faizan Gigani,faizanigigani,718,3640,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        n = len(nums)
        freq = Counter(nums)

        events = []
        for num in nums:
            events.append((num-k, 1))
            events.append((num+k+1, -1))

        points = set()
        for event in events:
            points.add(event[0])

        for entry in freq:
            points.add(entry)

        events.sort()
        points = sorted(points)

        idx = 0
        curr_overlap = 0
        max_freq = 0

        for p in points:
            while idx < len(events) and events[idx][0] <= p:
                curr_overlap += events[idx][1]
                idx += 1

            actual_cnt = freq[p] if p in freq else 0
            possible_freq = actual_cnt + min(numOperations, curr_overlap - actual_cnt)
            max_freq = max(max_freq, possible_freq)

        return max_freq
        ",1447760714
Nitin Pilkhwal,Nitin-Pilkhwal,720,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
         int n = nums.size();
        std::unordered_map<int, int> freq;
        std::vector<std::pair<int, int>> events;
        
        // Populate the frequency map and events list
        for (int num : nums) {
            freq[num]++;
            events.push_back({num - k, 1});
            events.push_back({num + k + 1, -1});
        }
        
        // Collect all event points and nums[i] values
        std::set<int> points;
        for (const auto& event : events) {
            points.insert(event.first);
        }
        for (const auto& pair : freq) {
            points.insert(pair.first);
        }
        
        // Sort events by position
        std::sort(events.begin(), events.end());
        
        int idx = 0;
        int currentOverlap = 0;
        int maxFreq = 0;
        int actualCount = 0;
        
        for (int t : points) {
            // Process events up to the current point t
            while (idx < events.size() && events[idx].first <= t) {
                currentOverlap += events[idx].second;
                idx++;
            }
            
            // Get the actual count for the number t
            actualCount = freq.count(t) > 0 ? freq[t] : 0;
            
            // Calculate the possible frequency
            int possibleFreq = actualCount + std::min(numOperations, currentOverlap - actualCount);
            
            // Update the maximum frequency
            maxFreq = std::max(maxFreq, possibleFreq);
        }
        
        return maxFreq;
    }
};",1447749006
Nitin Pilkhwal,Nitin-Pilkhwal,720,3626,cpp,"class Solution {
public:
     int pro(int n) {
        int ans = 1;
        while (n > 0) {
            int r = n % 10;
            ans *= r;  // Multiply only if digit is non-zero
            n /= 10;
        }
        return ans;
    }
    int smallestNumber(int n, int t) {
        while(true){
            int ans = pro(n);
            if(ans%t==0) return n;
            n+=1;
        }
        return -1;
    }
};",1447665571
Nitin Pilkhwal,Nitin-Pilkhwal,720,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        int n = nums.size();
        unordered_map<int, int> freq;
        vector<pair<int, int>> mp;
        set<int> p;
        for (int num : nums) {
            freq[num]++;
            mp.push_back({num - k, 1});
            mp.push_back({num + k + 1, -1});
        }
        for (const auto& event : mp) {
            p.insert(event.first);
        }
        for (const auto& pair : freq) {
            p.insert(pair.first);
        }
        sort(mp.begin(), mp.end());
        
        int idx = 0;
        int curr = 0;
        int ans = 0;
        int actualCount = 0;
        
        for (int t : p) {
            while (idx < mp.size() && mp[idx].first <= t) {
                curr += mp[idx].second;
                idx++;
            }
            actualCount = freq.count(t) > 0 ? freq[t] : 0;
            int temp = actualCount + std::min(numOperations, curr - actualCount);
            ans = std::max(ans, temp);
        }
        return ans;
    }
};",1447761070
Profix_aaaa,ButYouIaaaa,721,3622,python3,"from typing import List

class Solution:
    def maxFrequency(self, a: List[int], k: int, n: int) -> int:
        m = max(a)
        s = m + k + 2
        f = [0] * s

        for x in a:
            f[x] += 1

        p = [0] * s
        p[0] = f[0]
        for i in range(1, s):
            p[i] = p[i - 1] + f[i]

        r = 0
        for x in range(s):
            if f[x] == 0 and n == 0:
                continue

            left = max(0, x - k)
            right = min(s - 1, x + k)
            total_in_range = p[right] - (p[left - 1] if left > 0 else 0)
            can_adjust = total_in_range - f[x]
            total = f[x] + min(n, can_adjust)
            r = max(r, total)

        return r
",1447712798
Profix_aaaa,ButYouIaaaa,721,3626,python3,"class Solution:
    def smallestNumber(self, n: int, t: int) -> int:
        def prod(x):
            p = 1
            while x:
                p *= x % 10
                x //= 10
            return p
        
        while prod(n) % t != 0:
            n += 1
        return n
",1447653712
Profix_aaaa,ButYouIaaaa,721,3640,python3,"from typing import List
from collections import defaultdict

class Solution:
    def maxFrequency(self, a: List[int], k: int, n: int) -> int:
        f = self.calculate_frequency(a, k)
        e = self.create_events(a, k)
        points = self.collect_points(e, f)

        e.sort()
        idx = 0
        overlap = 0
        max_freq = 0

        for t in points:
            while idx < len(e) and e[idx][0] <= t:
                overlap += e[idx][1]
                idx += 1

            actual_count = f[t] if t in f else 0
            possible_freq = actual_count + min(n, overlap - actual_count)
            max_freq = max(max_freq, possible_freq)

        return max_freq

    def calculate_frequency(self, a: List[int], k: int) -> dict:
        f = defaultdict(int)
        for x in a:
            f[x] += 1
        return f

    def create_events(self, a: List[int], k: int) -> List[tuple]:
        e = []
        for x in a:
            e.append((x - k, 1))
            e.append((x + k + 1, -1))
        return e

    def collect_points(self, e: List[tuple], f: dict) -> set:
        points = set()
        for x, _ in e:
            points.add(x)
        for key in f.keys():
            points.add(key)
        return sorted(points)
",1447736876
Kalash Agrahari,agraharikalash,722,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        sort(nums.begin(), nums.end());
        int maxi = 1;
        unordered_map<int,int>mp;
        for(int i = 0; i < nums.size(); i++){
            mp[nums[i]]++;
            maxi = max(maxi, mp[nums[i]]);
        }
        int left = 0;
        int right = 1;
        int mid = 0;
        while(mid < nums.size()){
            if(right < nums.size() && nums[right] - nums[right - 1] <= 2*k && numOperations >= 2){
                maxi = max(2, maxi);
            }
            while(right < nums.size() && nums[right] - nums[mid] <= k){
                if(nums[right] - nums[right - 1] <= 2*k && numOperations >= 2){
                    maxi = max(2, maxi);
                }
                right++;
            }
            while(nums[mid] - nums[left] > k){
                left++;
            }
            if(right < nums.size() && nums[right] - nums[right - 1] <= 2*k && numOperations >= 2){
                maxi = max(2, maxi);
            }
            maxi = max(maxi, min(numOperations + mp[nums[mid]], right - left));
            mid++;
        }
        left = 0;
        right = 1;
        while(right < nums.size()){
            if(nums[right] - nums[left] <= 2*k){
                maxi = max(maxi, min(numOperations, right - left + 1));
                right++;
            }
            else{
                left++;
            }
        }
        return maxi;
    }
};",1447739455
Kalash Agrahari,agraharikalash,722,3626,cpp,"class Solution {
public:
    int smallestNumber(int n, int t) {
        int num = n;
        while(true){
            int temp = 1;
            int num2 = num;
            while(num2){
                temp *= num2%10;
                num2/=10;
            }
            if(temp%t == 0)
                return num;
            num++;
        }
        return -1;
    }
};",1447656138
Kalash Agrahari,agraharikalash,722,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        sort(nums.begin(), nums.end());
        int maxi = 1;
        unordered_map<int,int>mp;
        for(int i = 0; i < nums.size(); i++){
            mp[nums[i]]++;
            maxi = max(maxi, mp[nums[i]]);
        }
        int left = 0;
        int right = 1;
        int mid = 0;
        while(mid < nums.size()){
            if(right < nums.size() && nums[right] - nums[right - 1] <= 2*k && numOperations >= 2){
                maxi = max(2, maxi);
            }
            while(right < nums.size() && nums[right] - nums[mid] <= k){
                if(nums[right] - nums[right - 1] <= 2*k && numOperations >= 2){
                    maxi = max(2, maxi);
                }
                right++;
            }
            while(nums[mid] - nums[left] > k){
                left++;
            }
            if(right < nums.size() && nums[right] - nums[right - 1] <= 2*k && numOperations >= 2){
                maxi = max(2, maxi);
            }
            maxi = max(maxi, min(numOperations + mp[nums[mid]], right - left));
            mid++;
        }
        left = 0;
        right = 1;
        while(right < nums.size()){
            if(nums[right] - nums[left] <= 2*k){
                maxi = max(maxi, min(numOperations, right - left + 1));
                right++;
            }
            else{
                left++;
            }
        }
        return maxi;
    }
};",1447745421
Pranav Pawar,panu_10,723,3622,cpp,"#define ll long long
class Solution {
public:
   int maxFrequency(vector<int>& nums, int k, int np) {
       if(nums.size()==0) return 0;
       vector<pair<int,int>>vec;
       map<int,int>mp;
       for(auto it:nums){
           mp[it]++;
           vec.push_back({it-k,1});
           vec.push_back({it+k+1,-1});
       }
       set<int>s;
       for(auto it:vec){
           s.insert(it.first);
       }
       for(auto it:mp){
           s.insert(it.first);
       }
       sort(vec.begin(),vec.end());
       int ind=0,cur=0,maxi=0,ac=0;
       for(auto it:s){
           while(ind<vec.size() && vec[ind].first<=it){
               cur+=vec[ind].second;
               ind++;
           }
           ac=mp.count(it)>0?mp[it]:0;
           int rem=ac+min(np,cur-ac);
           maxi=max(maxi,rem);
       }
       return maxi;
   }
};",1447745152
Pranav Pawar,panu_10,723,3626,cpp,"class Solution {
public:
    int help(int num){
        int prod=1;
        while(num!=0){
            prod*=num%10;
            num/=10;
        }
        return prod;
    }
    int smallestNumber(int n, int t) {
        for(int i=n;i<1000;i++){
            if(help(i)%t==0) return i;
        }
        return 0;
    }
};",1447657381
Pranav Pawar,panu_10,723,3640,cpp,"#define ll long long
class Solution {
public:
   int maxFrequency(vector<int>& nums, int k, int np) {
       if(nums.size()==0) return 0;
       vector<pair<int,int>>vec;
       map<int,int>mp;
       for(auto it:nums){
           mp[it]++;
           vec.push_back({it-k,1});
           vec.push_back({it+k+1,-1});
       }
       set<int>s;
       for(auto it:vec){
           s.insert(it.first);
       }
       for(auto it:mp){
           s.insert(it.first);
       }
       sort(vec.begin(),vec.end());
       int ind=0,cur=0,maxi=0,ac=0;
       for(auto it:s){
           while(ind<vec.size() && vec[ind].first<=it){
               cur+=vec[ind].second;
               ind++;
           }
           ac=mp.count(it)>0?mp[it]:0;
           int rem=ac+min(np,cur-ac);
           maxi=max(maxi,rem);
       }
       return maxi;
   }
};",1447745595
dinhlockt02,dinhlockt02,724,3622,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        queue = []

        counter = Counter(nums)

        for num in counter.keys():
            heapq.heappush(queue, (num - k, 0, counter.get(num)))
            heapq.heappush(queue, (num + k + 1, 0, -counter.get(num)))
            heapq.heappush(queue, (num, 1, 0))
        
        result = 0
        curr = 0
        while queue:
            num, _, t = heapq.heappop(queue)
            if t != 0:
                curr += t
                result = max(
                    min(curr, numOperations),
                    result
                )
            else:
                result = max(
                    counter.get(num) + min(curr - counter.get(num), numOperations),
                    result
                )
        

        return result",1447761250
dinhlockt02,dinhlockt02,724,3626,python3,"
@lru_cache()
def prod_of_digit_of(n: int) -> int:
    result = 1
    while n > 0:
        result *= (n % 10)
        n //= 10
    return result

class Solution:
    def smallestNumber(self, n: int, t: int) -> int:
        for i in range(n, 1000):
            if prod_of_digit_of(i) % t == 0:
                return i
        return 0",1447664596
dinhlockt02,dinhlockt02,724,3640,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        queue = []

        counter = Counter(nums)

        for num in counter.keys():
            heapq.heappush(queue, (num - k, 0, counter.get(num)))
            heapq.heappush(queue, (num + k + 1, 0, -counter.get(num)))
            heapq.heappush(queue, (num, 1, 0))
        
        result = 0
        curr = 0
        while queue:
            num, _, t = heapq.heappop(queue)
            if t != 0:
                curr += t
                result = max(
                    min(curr, numOperations),
                    result
                )
            else:
                result = max(
                    counter.get(num) + min(curr - counter.get(num), numOperations),
                    result
                )
        

        return result",1447761671
radcliffe,vjcp9058,725,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int nOps) {
        int mx = *max_element(nums.begin(), nums.end());
        int sz = mx + k + 2;
        vector<int> f(sz, 0);
        for (int v : nums) {
            f[v]++;
        }
        int i,j,l,m,t,r;
        vector<int> pr(sz, 0);
        pr[0] = f[0];
        for (int i = 1; i < sz; ++i) {
            pr[i] = pr[i - 1] + f[i];
        }
        m=0;
        for (int x = 0; x < sz; ++x) {
            if (f[x] == 0 && nOps == 0) {
                continue;
            }
             l = max(0, x - k);
             r = min(sz - 1, x + k);
            t = pr[r] - (l > 0 ? pr[l - 1] : 0);
            int c = t - f[x];
            int tot = f[x] + min(nOps, c);
            m= max(m, tot);
        }
        return m;
    }
};
",1447721518
radcliffe,vjcp9058,725,3626,cpp,"class Solution {
int f(int x) {
    int p = 1;
    while (x > 0) {
        p *= x % 10;
        x /= 10;
    }
    return p;
}

public:
    int smallestNumber(int n, int t) {
        int m = n;
    while (true) {
        if (f(m) % t == 0) {
            return m;
        }
        m++;
    }
    }
};",1447655823
radcliffe,vjcp9058,725,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& n, int k, int o) {
        int s = n.size(), i = 0, c = 0, m = 0, a = 0;
        map<int, int> f;
        vector<pair<int, int>> e;
        
        for (int v : n) {
            f[v]++;
            e.push_back({v - k, 1});
            e.push_back({v + k + 1, -1});
        }
        
        set<int> p;
        for (auto& x : e) {
            p.insert(x.first);
        }
        for (auto& x : f) {
            p.insert(x.first);
        }
        
        sort(e.begin(), e.end());
        
        for (int t : p) {
            while (i < e.size() && e[i].first <= t) {
                c += e[i].second;
                i++;
            }
            a = 0;
            if (f.count(t)) {
                a = f[t];
            }
            int pos = c - a;
            m = max(m, a + min(o, pos));
        }
        
        return m;
    }
};",1447745771
Doan Trung Huy,doantrunghuy108,726,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        const int n = nums.size();
        sort(nums.begin(), nums.end());
        const int MN = 1e5 + 10;
        int line[MN] = {0};
        unordered_map<int, int> um;
        
        for (int i = 0; i < n; ++i) {
            line[max(nums[i] - k, 0)]++;
            line[min(nums[i] + k, MN - 10) + 1]--;
            um[nums[i]]++;
        }
        
        int ans = min(line[0], numOperations);
        
        for (int i = 1; i < MN; ++i) {
            line[i] += line[i - 1];
            if (um.count(i)) {
                if (line[i] >= numOperations + um[i]) {
                    ans = max(ans, um[i] + numOperations);
                }
                else {
                    ans = max(ans, line[i]);
                }
            }
            else {
                ans = max(ans, min(numOperations, line[i]));
            }
        }
        
        return ans;
    }
};",1447697962
Doan Trung Huy,doantrunghuy108,726,3626,cpp,"class Solution {
public:
    int calc(int n) {
        int ans = 1;
        while (n) {
            ans *= n % 10;
            n /= 10;
        }
        return ans;
    }

    int smallestNumber(int n, int t) {
        int num = n;
        while (true) {
            if (!(calc(num) % t)) {
                return num;
            }
            num++;
        }
        return -1;
    }
};
",1447654099
Doan Trung Huy,doantrunghuy108,726,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        const int n = nums.size();
        sort(nums.begin(), nums.end());
        const int MN = 2e5 + 10;
        using pii = pair<int, int>;
        vector<pii> events;
        unordered_map<int, int> um;
        
        set<int> points;
        
        for (int i = 0; i < n; ++i) {
            um[nums[i]]++;
            points.insert(nums[i]);
            events.push_back({nums[i] - k, 1});
            points.insert(nums[i] - k);
            events.push_back({nums[i] + k + 1, -1});
            points.insert(nums[i] + k);
        }
        
        sort(events.begin(), events.end());
        
        const int m = events.size();
        int ans = 0, line = 0, i = 0;
        
        for (int p : points) {
            int cnt_p = 0;
            
            if (um.count(p)) {
                cnt_p = um[p];
            }
            
            while (i < m && events[i].first <= p) {
                line += events[i++].second;
            }
            
            ans = max(ans, cnt_p + min(numOperations, line - cnt_p));
        }
        
        return ans;
    }
};",1447761761
antman101,antman101,727,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& a, int k, int op) {
          map<int,int>mpp,mpp2;
  sort(a.begin(),a.end());
  int mn=1e6,mx=-1e6;
  for(auto i:a){
    mpp[i-k]++;
    mpp[i+k+1]--;
    mpp2[i]++;
    mn=min(mn,i-k),mx=max(mx,i+k);
  }
  int cnt=0,ans=0;
  for(int i=mn;i<=mx;++i){
     cnt+=mpp[i];
     int temp=cnt-mpp2[i];
     ans=max(min(op,temp)+mpp2[i],ans);
  }
  return ans;
    }
};",1447772762
antman101,antman101,727,3626,cpp,"class Solution {
public:
    int pro(int n){
        int ret=1;
        while(n){
            ret*=n%10;
            n/=10;
        }
        return ret;
    }
    int smallestNumber(int n, int t) {
        while(true){
            if(pro(n)%t==0)return n;
            ++n;
        }
        return -1;
    }
};",1447778201
antman101,antman101,727,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& a, int k, int op) {
  map<int,int>mpp,mpp2;
  sort(a.begin(),a.end());
  int mn=1e6,mx=-1e6;
  for(auto i:a){
    mpp[i-k]++;
    mpp[i+k+1]--;
    mpp2[i]++;
    mn=min(mn,i-k),mx=max(mx,i+k);
    mpp[i]++;
    mpp[i]--;
  }
  int cnt=0,ans=0;
  for(auto i:mpp){
     cnt+=i.second;
     int temp=cnt-mpp2[i.first];
     ans=max(min(op,temp)+mpp2[i.first],ans);
  }
  return ans;
    }
};",1447783869
Saksham,math_pi,728,3622,cpp,"#define rep(i, n) for (int i = 0; i < n; ++i)
#define per(i, n) for (int i = n - 1; i >= 0; --i)
#define repn(i, n) for (int i = 1; i <= n; ++i)
#define rng(i, a, b) for (int i = a; i < b; i++)
#define gnr(i, a, b) for (int i = b - 1; i >= a; --i)
#define vb vector<bool>
#define vi vector<int>
#define vl vector<ll>
#define vc vector<char>
#define vs vector<string>
#define vvb vector<vb>
#define vvi vector<vi>
#define vvl vector<vl>
#define vvc vector<vc>
#define si unordered_set<int>
#define sl unordered_set<ll>
#define tsi set<int>
#define tsl set<ll>
#define pii pair<int, int>
#define pll pair<ll, ll>
#define vpii vector<pii>
#define vpll vector<pll>
#define tmii map<int, int>
#define tmll map<ll, ll>
#define mii unordered_map<int, int>
#define mll unordered_map<ll, ll>
#define pqi priority_queue<int>
#define pqig priority_queue<int, vi, greater<int>>
#define pql priority_queue<ll>
#define pqlg priority_queue<ll, vl, greater<ll>>
#define pqpii priority_queue<pii>
#define pqpll priority_queue<pll>
#define pqip priority_queue<pair<int, pair<int, int>>>
#define sz(x) int((x).size())
#define bg(x) begin(x)
#define all(x) bg(x), end(x)
#define rall(x) x.rbegin(), x.rend()
#define sor(x) sort(all(x))
#define rsz resize
#define ins insert
#define pb push_back
#define eb emplace_back
#define ft front()
#define bk back()
#define lb lower_bound
#define ub upper_bound
#define ll long long
#define ld long double
#define nl '\n'
#define sp ' '
#define fi first
#define inf 8e18;
#define sinf 2e9;
#define se second
#define mpr make_pair
#define lg __lg
#define sum(a) (accumulate((a).begin(), (a).end(), 0ll))
#define mine(a) (*min_element((a).begin(), (a).end()))
#define maxe(a) (*max_element((a).begin(), (a).end()))
#define mini(a) (min_element((a).begin(), (a).end()) - (a).begin())
#define maxi(a) (max_element((a).begin(), (a).end()) - (a).begin())
#define lowb(a, x) (lower_bound((a).begin(), (a).end(), (x)) - (a).begin())
#define uppb(a, x) (upper_bound((a).begin(), (a).end(), (x)) - (a).begin())

using namespace std;
/* ありがとう、神様、あなたはとても素晴らしく 、とても優しいです！*/

#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;

typedef tree<int, null_type, less<int>, rb_tree_tag,
             tree_order_statistics_node_update>
    ordered_set;
typedef tree<pii, null_type, less<pii>, rb_tree_tag,
             tree_order_statistics_node_update>
    mordered_set;

struct hsh
{
    size_t operator()(const pair<ll, ll> &p) const
    {
        return p.first * 239 + p.second; // you could change 239 to 1e9+1
    }
};

template <typename T, typename U>
void umin(T &a, U b)
{
    if (a > b)
        a = b;
}
template <typename T, typename U>
void umax(T &a, U b)
{
    if (a < b)
        a = b;
}

template <typename T, typename V>
T rangeBitwiseAnd(T left, V right)
{
    T res = 0;
    int cnt = 0;
    for (; left >= (1ll << cnt); cnt++)
    {
    }
    if (1ll << cnt <= right)
        return 0;
    if (left == right)
        return left;

    res += 1ll << (--cnt);
    left -= 1ll << (cnt);
    right -= 1ll << cnt;
    return res + rangeBitwiseAnd(left, right);
}

template <typename T>
T MSB(T n)
{
    T ans = -1;
    while (n)
        n /= 2, ans++;
    return ans;
}
template <typename T>
T rangeBitwiseOr(T l, T r)
{
    ll res = 0;
    ll u = MSB(l), v = MSB(r);
    while (u == v && u >= 0 && v >= 0)
    {
        ll val = (1ll << u);
        l -= val, r -= val;
        res += val;
        u = MSB(l), v = MSB(l);
    }
    u = max(MSB(l), MSB(r));
    res += (1ll << (u + 1)) - 1;
    return res;
}

template <typename T>
T XOR1(T n)
{
    ll md = n % 4;
    if (!md)
        return n;
    else if (md == 1)
        return 1;
    else if (md == 2)
        return n + 1;
    return 0;
}
template <typename T>
T rangeBitwiseXor(T l, T r) { return XOR1(r) ^ XOR1(l - 1); }

int dx[] = {0, 0, 1, -1, 1, 1, -1, -1};
int dy[] = {1, -1, 0, 0, 1, -1, 1, -1};
int kx[] = {1, 1, -1, -1, 2, 2, -2, -2};
int ky[] = {2, -2, 2, -2, 1, -1, 1, -1};
set<char> vowels{'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'};

bool chkpalin(string s)
{
    rep(i, sz(s) / 2)
    {
        if (s[i] != s[sz(s) - i - 1])
            return false;
    }
    return true;
}
map<char, vector<char>> phone_keypad{
    {'2', {'a', 'b', 'c'}},
    {'3', {'d', 'e', 'f'}},
    {'4', {'g', 'h', 'i'}},
    {'5', {'j', 'k', 'l'}},
    {'6', {'m', 'n', 'o'}},
    {'7', {'p', 'q', 'r', 's'}},
    {'8', {'t', 'u', 'v'}},
    {'9', {'w', 'x', 'y', 'z'}}};
vi GPRM(int N)
{
    vi x(N + 10, 1), primes;
    x[0] = x[1] = 0;
    rng(i, 2, N + 5)
    {
        if (!x[i])
            continue;
        for (int j = i + i; j < N + 5; j += i)
            x[j] = 0;
    }
    rep(i, N + 10)
    {
        if (x[i])
            primes.pb(i);
    }
    return primes;
}
vector<string> slice_fn(string &s, char c)
{
    string tmp = """";
    vector<string> res;
    for (int i = 0; i < s.size(); i++)
    {
        if (s[i] == c)
        {
            if (tmp.empty())
                continue;
            res.push_back(tmp);
            tmp.clear();
        }
        else
            tmp += s[i];
    }
    if (!tmp.empty())
        res.push_back(tmp);
    return res;
}

void yesnoc(bool a) { cout << (a ? ""YES\n"" : ""NO\n""); }
void yesnos(bool a) { cout << (a ? ""Yes\n"" : ""No\n""); }

/*
⠭⠵⠖⠀⠀⠀⠀⠀⠀⠀⠠⠀⠠⠀⡠⠀⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠠⠀⠀⠀⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⠀⠄⠠⠀⠀⠀⠀⠀
⠀⠂⠀⠀⠀⠀⠀⢀⡀⠀⠀⠁⢠⠊⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠁⠀⠀⠠⠀⠀⠔⠄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⢦⠀⠀⠀⠀⠀⠀⠀⠀⡀⠉⠳⢦⣀⠀⠀⠀⠁⠀⠈⣐⠲⠶
⠀⠀⣀⠠⣒⣼⡵⠋⠀⠀⠀⡴⢃⠀⠀⠀⠀⠀⢀⠐⠀⠀⠀⠀⠀⠀⠈⠀⠁⠀⠀⠣⠀⠀⠀⠀⠂⠀⠀⠀⠀⠀⠀⠂⡀⠀⠀⠀⠁⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠈⠑⠦⣀⠀⠀⠀⠐⠁⠢
⡶⠞⠊⣽⡵⠟⠁⠀⠀⣀⡞⠀⠀⠀⠀⠀⠀⡠⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠄⠀⠀⠀⠀⠈⠀⠑⢄⠀⠀⠀⠀⠉⠒⠤⢀⠀⠀
⠀⣠⢟⠟⠁⠀⠀⢀⠄⡼⢀⠀⠀⢠⠀⠀⡔⠀⠠⢀⠀⢀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠀⢀⠁⠢⡀⠀⠀⠠⢀⣀⠀⠀
⡼⠡⠂⠀⠀⣀⡴⡱⢊⠁⠀⠀⠀⠂⠀⡜⠀⣆⢠⣼⠀⢸⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠑⠀⠀⠀⠀⠀⡀⡀⠀⢦⡀⢆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡈⠣⡐⢄⡑⠂⠀⠀⢹⣿⢟
⠀⠁⢀⠤⢊⠏⡰⢁⠊⠀⠄⠀⠀⠀⢰⠃⠘⢨⣽⣿⠀⣸⠀⠀⢻⠀⠀⠀⠀⠀⠀⠀⠐⠀⠤⡀⠀⠣⠂⠀⠀⢆⠀⠀⠐⡄⠀⠁⠂⢢⠀⠀⠀⠀⢀⠑⣄⠀⠀⠻⣦⡈⠢⠈⠢⣀⠢⡀⢣⠑
⣠⠔⠁⠠⠂⠐⡡⠃⢀⠔⠀⠀⠀⠀⡎⠀⡇⡞⣿⣿⠀⢿⣼⢠⣸⣇⠀⠘⣤⡀⠀⢃⣆⠐⡌⣶⠄⠀⢷⣀⠀⠈⢷⣄⡠⠽⣴⡀⠀⠳⡃⠀⠀⠈⠪⢢⡈⢵⣄⠀⠹⡷⡄⠀⢡⡙⢇⠠⠀⢣
⠁⠀⠀⠀⠰⡴⠁⠀⠙⠀⡄⠀⡄⢀⠇⢀⢁⣿⣿⣿⡾⡞⣿⢸⣿⡿⡄⠀⢹⢳⠀⠘⡼⣆⢸⣼⣿⣦⠈⢿⣧⠀⠈⢿⣷⣄⠹⣧⡀⠀⠙⣄⠠⡀⠀⠈⢳⣄⢻⣷⣤⡙⣌⢦⡀⢳⣮⡳⣤⠀
⠀⠀⠀⢀⡖⠁⠀⠀⠀⠸⠀⠐⠇⡀⢀⣾⣼⣿⣿⣿⣿⣧⣿⡆⣿⣷⣷⡀⠈⣿⣧⠀⢷⣏⢦⢹⣼⡿⣷⣌⢟⢷⡄⠘⣿⣿⣦⡙⣷⡀⡀⠘⣄⠩⣂⠀⠸⣿⠿⠷⠀⢀⡝⠾⢟⢄⠻⡏⠛⠊
⠀⠀⠀⡜⠑⠀⠀⠀⠀⠀⢀⠜⢠⠇⣿⣿⣿⡏⢹⢹⣿⣿⣿⣽⣿⡟⣿⣷⠀⢹⣿⢧⢸⣿⡀⣳⣯⢷⣟⣿⣯⣿⣻⣦⣹⣍⣿⣿⣾⣷⣄⠀⠺⣆⠹⣦⣷⣽⣰⣦⣀⠹⣧⠀⢸⣾⣏⠙⠄⠀
⠀⠀⢠⠅⠀⠀⠀⠀⠀⠀⡞⠀⡜⢰⢹⣿⢻⣇⠀⠈⣿⣿⣿⣾⣿⣇⠻⡇⢣⢸⣿⠈⢧⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡟⠛⣿⠿⣿⡿⣿⣿⣦⡀⠣⠣⡸⢷⣽⣿⣞⢿⠀⢻⠀⠀⣏⢿⡄⠀⠀
⠀⠀⠈⠀⠀⠀⠀⠀⠀⢰⠁⢀⠁⣸⣿⡁⠆⢻⣆⠀⠙⢿⣿⣿⣿⡈⠀⠻⡌⢻⣏⠆⠼⢿⠁⠀⢿⣿⣿⣿⣿⣿⡿⠁⠀⠈⣰⡟⠃⠀⣹⣿⣝⣠⣷⠉⢢⡝⠘⢻⠟⠀⣼⠀⠀⣿⢦⢻⡄⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⡆⠀⣼⠀⢸⣿⣷⠀⠀⠻⣦⡀⠀⠉⠉⠀⠁⠀⠀⠁⠈⠻⠀⠀⠈⠀⢀⠈⠙⠻⠿⠟⠋⠀⠀⣠⡾⠋⠀⠀⠐⢻⣿⡍⣽⡇⣀⠼⠑⡠⠐⢀⠌⠈⢀⡴⠋⠀⠈⠋⣄
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠃⠀⠀⠰⢸⠘⢹⣧⠀⠀⠈⠻⠷⡶⠤⠂⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠙⣿⣶⣶⣤⣤⣶⡶⠟⠋⠀⠠⠐⠀⠀⣸⣿⣇⣿⡿⠤⡤⠂⢀⡴⢃⣠⣾⡍⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠐⠀⠘⠀⢹⢿⡄⠀⠀⡆⠀⠀⠀⠀⢀⡇⠀⠀⠀⠀⠀⠀⠀⠀⢲⣾⣿⣿⣿⣿⡶⠒⠀⠀⠈⠁⠐⢤⡀⠀⣿⣿⡿⢿⠴⠒⠒⢛⣴⢻⡋⠉⢿⡀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⠈⣷⢀⠐⠀⠀⠀⠀⠻⣭⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⢿⣿⣿⠋⠉⠁⠀⠀⠀⡇⠀⠀⢠⣄⣤⣿⡇⠀⠀⠀⣠⡞⠹⠋⠸⠀⠀⠀⠁⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢿⡟⠃⠀⠀⠀⠀⠀⠘⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠙⣿⠀⠀⠰⠆⠀⠀⠁⠀⡀⣸⣿⣟⣿⣿⡷⣶⠏⣿⣧⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠛⢦⡀⠀⠀⠀⠀⠀⢀⣀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢾⠀⠀⢰⡇⠀⣀⣴⠟⠀⣿⣿⣿⣿⣿⣧⣿⢀⣿⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⠢⣄⠀⠀⠀⠀⠻⠯⠟⠳⠆⠀⠀⠀⠀⠀⠀⣼⠇⠀⣨⣵⠾⠋⠁⣠⣾⣿⣿⣿⣿⣿⡟⢻⣼⠉⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠻⢦⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣼⣿⣾⣿⠛⣁⣤⣶⣿⣿⣿⣿⣿⣿⣿⠁⠁⠈⢿⠀⠙⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⣷⣤⡀⠀⠀⠀⠀⣀⣤⣶⣿⣿⡿⣻⣴⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⣾⣿⣿⣿⣶⣶⣶⣿⣿⣿⣿⣿⣷⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣯⣈⠛⠷⣤⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣤⡄⠀⠉⠳⠦⣄⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣽⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠟⠋⠉⠀⢀⡀⠀⠠⠚⠙⠳⣄⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⠞⢁⠀⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠟⠛⠁⠀⠀⠀⠀⢠⠊⠀⠊⠀⠀⠠⠀⠈⠙⢲⡀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠼⢁⣴⢯⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠟⠋⠀⠀⠀⠀⠀⠀⠀⡐⠀⠈⠀⠀⠀⠁⠀⠀⠀⠀⠈⣇⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡴⢋⣴⠟⣱⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠋⠁⠀⠀⠀⠀⠀⠀⠀⢀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⡄⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⢏⡔⣻⠋⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠟⠁⠀⠐⡀⠀⣤⣤⣲⡴⠖⠀⠈⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠹⣄⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⡖⡣⢋⡼⠃⠀⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠟⠋⠀⠄⠀⠀⣾⣷⣾⠿⠋⠀⠀⠀⡠⠂⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⢦⣀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣸⠟⣀⡞⠁⠀⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⠿⠋⠀⠀⠀⠀⠀⡀⠀⠉⠛⠟⠀⠀⠀⠀⠚⢠⣴⢦⠴⠀⠠⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠲⠬⣕
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⢃⢴⠏⠀⠀⠀⣿⣿⣿⣿⣿⣿⣿⡿⠛⠁⠀⠀⠀⠀⡀⠀⠀⠁⠀⠀⠀⠀⣰⣴⣶⣿⠦⠟⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣰⢧⣾⠏⠀⠀⣴⠀⣿⣿⣿⣿⣿⡿⠋⠀⠀⠀⠀⢰⣦⣴⠶⠀⠀⠀⠀⠀⠀⠀⠀⠙⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢰⣿⢫⠏⠀⠀⠘⣿⠀⠻⣿⣿⡿⠏⠀⠀⠐⠲⠃⠀⠀⠙⠉⠀⠀⠀⠸⠀⠀⠀⠀⠀⠀⠀⠀⢀⠀⠀⢀⠄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣰⡿⢁⡞⠀⠀⠀⣼⣿⣁⠀⠈⠉⠀⠀⠀⠈⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡀⠀⠀⠐⠟⠁⠀⠔⠀⠀⠀⠀⠀⠀⠀⠀⠄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
*/

// Read 読む
template <typename T>
vector<vector<T>> read_graph(vector<vector<T>> edges, int n)
{
    vector<vector<T>> g(n);
    rep(i, sz(edges))
    {
        g[edges[i][0]].pb(edges[i][1]);
        g[edges[i][1]].pb(edges[i][0]);
    }
    return g;
}
template <typename T>
vector<vector<T>> read_directed_graph(vector<vector<T>> edges, int n)
{
    vector<vector<T>> g(n);
    rep(i, sz(edges))
    {
        g[edges[i][0]].pb(edges[i][1]);
    }
    return g;
}

template <typename T>
vector<vector<pair<T, T>>> read_graph_weight(vector<vector<T>> edges, int n)
{
    vector<vector<pair<T, T>>> g(n);
    rep(i, sz(edges))
    {
        g[edges[i][0]].pb({edges[i][1], edges[i][2]});
    }
    return g;
}

template <typename T>
vector<vector<T>> RDG(T n, T m)
{
    vector<vector<T>> g(n);
    rep(i, m)
    {
        int u, v;
        cin >> u >> v;
        g[--u].pb(--v);
    }
    return g;
}
template <typename T>
vector<vector<pair<T, T>>> RGW(T n, T m)
{
    vector<vector<pair<T, T>>> g(n);
    rep(i, m)
    {
        int u, v, w;
        cin >> u >> v >> w;
        g[--u].pb({--v, w});
        g[v].pb({u, w});
    }
    return g;
}
template <typename T>
vector<T> R(T n)
{
    vector<T> a(n);
    rep(i, n) cin >> a[i];
    return a;
}

// Print 印刷する
template <typename T>
void print(T x) { cout << x << nl; }
template <typename T>
void print2(T x, T y) { cout << x << sp << y << nl; }
template <typename T>
void printA(vector<T> &A)
{
    for (auto &x : A)
    {
        cout << x << ' ';
    }
    cout << '\n';
}
template <typename T>
void printA2(vector<vector<T>> &A)
{
    for (auto x : A)
    {
        for (auto y : x)
        {
            cout << y << ' ';
        }
        cout << '\n';
    }
}
template <typename T>
void printS(set<T> &S)
{
    for (auto &x : S)
        cout << x << ' ';
    cout << '\n';
}
template <typename T>
void printmulS(multiset<T> &S)
{
    for (auto &x : S)
        cout << x << ' ';
    cout << '\n';
}

ll n, k, m, q;
// const ll mod = 998244353;
const ll mod = 1000000007;
class HashedString
{
public:
    static const long long M = 1e9 + 9;
    static const long long B = 9973;

    static vector<long long> pow;

    vector<long long> p_hash;

public:
    HashedString(const string &s) : p_hash(s.size() + 1)
    {
        while (pow.size() < s.size())
        {
            pow.push_back((pow.back() * B) % M);
        }

        p_hash[0] = 0;
        for (int i = 0; i < s.size(); i++)
        {
            p_hash[i + 1] = ((p_hash[i] * B) % M + s[i]) % M;
        }
    }

    long long get_hash(int start, int end)
    {
        long long raw_val =
            (p_hash[end + 1] - (p_hash[start] * pow[end - start + 1]));
        return (raw_val % M + M) % M;
    }
};
vector<long long> HashedString::pow = {1};
class Solution
{
public:
    int maxFrequency(vector<int> &nums, int k, int numOperations)
    {
        n = sz(nums);
        tmll f;
        vpll e;
        tsl s;
        rep(i, n)
        {
            f[nums[i]]++;
            e.pb({nums[i] - k, 1});
            s.ins(e.bk.fi);
            s.ins(nums[i]);
            e.pb({nums[i] + k + 1, -1});
        }

        sor(e);
        ll j = 0, cur = 0, ans = 0;
        for (auto v : s)
        {
            while (j < sz(e) && e[j].fi <= v)
            {
                cur += e[j].se;
                j++;
            }
            ll u = f[v] ? f[v] : 0;
            ll tot = u + min(numOperations * 1ll,  cur - u);
            umax(ans, tot);
        }
        return ans;
    }
};",1447776938
Saksham,math_pi,728,3626,cpp,"#define rep(i, n) for (int i = 0; i < n; ++i)
#define per(i, n) for (int i = n - 1; i >= 0; --i)
#define repn(i, n) for (int i = 1; i <= n; ++i)
#define rng(i, a, b) for (int i = a; i < b; i++)
#define gnr(i, a, b) for (int i = b - 1; i >= a; --i)
#define vb vector<bool>
#define vi vector<int>
#define vl vector<ll>
#define vc vector<char>
#define vs vector<string>
#define vvb vector<vb>
#define vvi vector<vi>
#define vvl vector<vl>
#define vvc vector<vc>
#define si unordered_set<int>
#define sl unordered_set<ll>
#define tsi set<int>
#define tsl set<ll>
#define pii pair<int, int>
#define pll pair<ll, ll>
#define vpii vector<pii>
#define vpll vector<pll>
#define tmii map<int, int>
#define tmll map<ll, ll>
#define mii unordered_map<int, int>
#define mll unordered_map<ll, ll>
#define pqi priority_queue<int>
#define pqig priority_queue<int, vi, greater<int>>
#define pql priority_queue<ll>
#define pqlg priority_queue<ll, vl, greater<ll>>
#define pqpii priority_queue<pii>
#define pqpll priority_queue<pll>
#define pqip priority_queue<pair<int, pair<int, int>>>
#define sz(x) int((x).size())
#define bg(x) begin(x)
#define all(x) bg(x), end(x)
#define rall(x) x.rbegin(), x.rend()
#define sor(x) sort(all(x))
#define rsz resize
#define ins insert
#define pb push_back
#define eb emplace_back
#define ft front()
#define bk back()
#define lb lower_bound
#define ub upper_bound
#define ll long long
#define ld long double
#define nl '\n'
#define sp ' '
#define fi first
#define inf 8e18;
#define sinf 2e9;
#define se second
#define mpr make_pair
#define lg __lg
#define sum(a) (accumulate((a).begin(), (a).end(), 0ll))
#define mine(a) (*min_element((a).begin(), (a).end()))
#define maxe(a) (*max_element((a).begin(), (a).end()))
#define mini(a) (min_element((a).begin(), (a).end()) - (a).begin())
#define maxi(a) (max_element((a).begin(), (a).end()) - (a).begin())
#define lowb(a, x) (lower_bound((a).begin(), (a).end(), (x)) - (a).begin())
#define uppb(a, x) (upper_bound((a).begin(), (a).end(), (x)) - (a).begin())

using namespace std;
/* ありがとう、神様、あなたはとても素晴らしく 、とても優しいです！*/

#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;

typedef tree<int, null_type, less<int>, rb_tree_tag,
             tree_order_statistics_node_update>
    ordered_set;
typedef tree<pii, null_type, less<pii>, rb_tree_tag,
             tree_order_statistics_node_update>
    mordered_set;

struct hsh
{
    size_t operator()(const pair<ll, ll> &p) const
    {
        return p.first * 239 + p.second; // you could change 239 to 1e9+1
    }
};

template <typename T, typename U>
void umin(T &a, U b)
{
    if (a > b)
        a = b;
}
template <typename T, typename U>
void umax(T &a, U b)
{
    if (a < b)
        a = b;
}

template <typename T, typename V>
T rangeBitwiseAnd(T left, V right)
{
    T res = 0;
    int cnt = 0;
    for (; left >= (1ll << cnt); cnt++)
    {
    }
    if (1ll << cnt <= right)
        return 0;
    if (left == right)
        return left;

    res += 1ll << (--cnt);
    left -= 1ll << (cnt);
    right -= 1ll << cnt;
    return res + rangeBitwiseAnd(left, right);
}

template <typename T>
T MSB(T n)
{
    T ans = -1;
    while (n)
        n /= 2, ans++;
    return ans;
}
template <typename T>
T rangeBitwiseOr(T l, T r)
{
    ll res = 0;
    ll u = MSB(l), v = MSB(r);
    while (u == v && u >= 0 && v >= 0)
    {
        ll val = (1ll << u);
        l -= val, r -= val;
        res += val;
        u = MSB(l), v = MSB(l);
    }
    u = max(MSB(l), MSB(r));
    res += (1ll << (u + 1)) - 1;
    return res;
}

template <typename T>
T XOR1(T n)
{
    ll md = n % 4;
    if (!md)
        return n;
    else if (md == 1)
        return 1;
    else if (md == 2)
        return n + 1;
    return 0;
}
template <typename T>
T rangeBitwiseXor(T l, T r) { return XOR1(r) ^ XOR1(l - 1); }

int dx[] = {0, 0, 1, -1, 1, 1, -1, -1};
int dy[] = {1, -1, 0, 0, 1, -1, 1, -1};
int kx[] = {1, 1, -1, -1, 2, 2, -2, -2};
int ky[] = {2, -2, 2, -2, 1, -1, 1, -1};
set<char> vowels{'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'};

bool chkpalin(string s)
{
    rep(i, sz(s) / 2)
    {
        if (s[i] != s[sz(s) - i - 1])
            return false;
    }
    return true;
}
map<char, vector<char>> phone_keypad{
    {'2', {'a', 'b', 'c'}},
    {'3', {'d', 'e', 'f'}},
    {'4', {'g', 'h', 'i'}},
    {'5', {'j', 'k', 'l'}},
    {'6', {'m', 'n', 'o'}},
    {'7', {'p', 'q', 'r', 's'}},
    {'8', {'t', 'u', 'v'}},
    {'9', {'w', 'x', 'y', 'z'}}};
vi GPRM(int N)
{
    vi x(N + 10, 1), primes;
    x[0] = x[1] = 0;
    rng(i, 2, N + 5)
    {
        if (!x[i])
            continue;
        for (int j = i + i; j < N + 5; j += i)
            x[j] = 0;
    }
    rep(i, N + 10)
    {
        if (x[i])
            primes.pb(i);
    }
    return primes;
}
vector<string> slice_fn(string &s, char c)
{
    string tmp = """";
    vector<string> res;
    for (int i = 0; i < s.size(); i++)
    {
        if (s[i] == c)
        {
            if (tmp.empty())
                continue;
            res.push_back(tmp);
            tmp.clear();
        }
        else
            tmp += s[i];
    }
    if (!tmp.empty())
        res.push_back(tmp);
    return res;
}

void yesnoc(bool a) { cout << (a ? ""YES\n"" : ""NO\n""); }
void yesnos(bool a) { cout << (a ? ""Yes\n"" : ""No\n""); }

/*
⠭⠵⠖⠀⠀⠀⠀⠀⠀⠀⠠⠀⠠⠀⡠⠀⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠠⠀⠀⠀⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⠀⠄⠠⠀⠀⠀⠀⠀
⠀⠂⠀⠀⠀⠀⠀⢀⡀⠀⠀⠁⢠⠊⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠁⠀⠀⠠⠀⠀⠔⠄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⢦⠀⠀⠀⠀⠀⠀⠀⠀⡀⠉⠳⢦⣀⠀⠀⠀⠁⠀⠈⣐⠲⠶
⠀⠀⣀⠠⣒⣼⡵⠋⠀⠀⠀⡴⢃⠀⠀⠀⠀⠀⢀⠐⠀⠀⠀⠀⠀⠀⠈⠀⠁⠀⠀⠣⠀⠀⠀⠀⠂⠀⠀⠀⠀⠀⠀⠂⡀⠀⠀⠀⠁⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠈⠑⠦⣀⠀⠀⠀⠐⠁⠢
⡶⠞⠊⣽⡵⠟⠁⠀⠀⣀⡞⠀⠀⠀⠀⠀⠀⡠⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠄⠀⠀⠀⠀⠈⠀⠑⢄⠀⠀⠀⠀⠉⠒⠤⢀⠀⠀
⠀⣠⢟⠟⠁⠀⠀⢀⠄⡼⢀⠀⠀⢠⠀⠀⡔⠀⠠⢀⠀⢀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠀⢀⠁⠢⡀⠀⠀⠠⢀⣀⠀⠀
⡼⠡⠂⠀⠀⣀⡴⡱⢊⠁⠀⠀⠀⠂⠀⡜⠀⣆⢠⣼⠀⢸⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠑⠀⠀⠀⠀⠀⡀⡀⠀⢦⡀⢆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡈⠣⡐⢄⡑⠂⠀⠀⢹⣿⢟
⠀⠁⢀⠤⢊⠏⡰⢁⠊⠀⠄⠀⠀⠀⢰⠃⠘⢨⣽⣿⠀⣸⠀⠀⢻⠀⠀⠀⠀⠀⠀⠀⠐⠀⠤⡀⠀⠣⠂⠀⠀⢆⠀⠀⠐⡄⠀⠁⠂⢢⠀⠀⠀⠀⢀⠑⣄⠀⠀⠻⣦⡈⠢⠈⠢⣀⠢⡀⢣⠑
⣠⠔⠁⠠⠂⠐⡡⠃⢀⠔⠀⠀⠀⠀⡎⠀⡇⡞⣿⣿⠀⢿⣼⢠⣸⣇⠀⠘⣤⡀⠀⢃⣆⠐⡌⣶⠄⠀⢷⣀⠀⠈⢷⣄⡠⠽⣴⡀⠀⠳⡃⠀⠀⠈⠪⢢⡈⢵⣄⠀⠹⡷⡄⠀⢡⡙⢇⠠⠀⢣
⠁⠀⠀⠀⠰⡴⠁⠀⠙⠀⡄⠀⡄⢀⠇⢀⢁⣿⣿⣿⡾⡞⣿⢸⣿⡿⡄⠀⢹⢳⠀⠘⡼⣆⢸⣼⣿⣦⠈⢿⣧⠀⠈⢿⣷⣄⠹⣧⡀⠀⠙⣄⠠⡀⠀⠈⢳⣄⢻⣷⣤⡙⣌⢦⡀⢳⣮⡳⣤⠀
⠀⠀⠀⢀⡖⠁⠀⠀⠀⠸⠀⠐⠇⡀⢀⣾⣼⣿⣿⣿⣿⣧⣿⡆⣿⣷⣷⡀⠈⣿⣧⠀⢷⣏⢦⢹⣼⡿⣷⣌⢟⢷⡄⠘⣿⣿⣦⡙⣷⡀⡀⠘⣄⠩⣂⠀⠸⣿⠿⠷⠀⢀⡝⠾⢟⢄⠻⡏⠛⠊
⠀⠀⠀⡜⠑⠀⠀⠀⠀⠀⢀⠜⢠⠇⣿⣿⣿⡏⢹⢹⣿⣿⣿⣽⣿⡟⣿⣷⠀⢹⣿⢧⢸⣿⡀⣳⣯⢷⣟⣿⣯⣿⣻⣦⣹⣍⣿⣿⣾⣷⣄⠀⠺⣆⠹⣦⣷⣽⣰⣦⣀⠹⣧⠀⢸⣾⣏⠙⠄⠀
⠀⠀⢠⠅⠀⠀⠀⠀⠀⠀⡞⠀⡜⢰⢹⣿⢻⣇⠀⠈⣿⣿⣿⣾⣿⣇⠻⡇⢣⢸⣿⠈⢧⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡟⠛⣿⠿⣿⡿⣿⣿⣦⡀⠣⠣⡸⢷⣽⣿⣞⢿⠀⢻⠀⠀⣏⢿⡄⠀⠀
⠀⠀⠈⠀⠀⠀⠀⠀⠀⢰⠁⢀⠁⣸⣿⡁⠆⢻⣆⠀⠙⢿⣿⣿⣿⡈⠀⠻⡌⢻⣏⠆⠼⢿⠁⠀⢿⣿⣿⣿⣿⣿⡿⠁⠀⠈⣰⡟⠃⠀⣹⣿⣝⣠⣷⠉⢢⡝⠘⢻⠟⠀⣼⠀⠀⣿⢦⢻⡄⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⡆⠀⣼⠀⢸⣿⣷⠀⠀⠻⣦⡀⠀⠉⠉⠀⠁⠀⠀⠁⠈⠻⠀⠀⠈⠀⢀⠈⠙⠻⠿⠟⠋⠀⠀⣠⡾⠋⠀⠀⠐⢻⣿⡍⣽⡇⣀⠼⠑⡠⠐⢀⠌⠈⢀⡴⠋⠀⠈⠋⣄
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠃⠀⠀⠰⢸⠘⢹⣧⠀⠀⠈⠻⠷⡶⠤⠂⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠙⣿⣶⣶⣤⣤⣶⡶⠟⠋⠀⠠⠐⠀⠀⣸⣿⣇⣿⡿⠤⡤⠂⢀⡴⢃⣠⣾⡍⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠐⠀⠘⠀⢹⢿⡄⠀⠀⡆⠀⠀⠀⠀⢀⡇⠀⠀⠀⠀⠀⠀⠀⠀⢲⣾⣿⣿⣿⣿⡶⠒⠀⠀⠈⠁⠐⢤⡀⠀⣿⣿⡿⢿⠴⠒⠒⢛⣴⢻⡋⠉⢿⡀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⠈⣷⢀⠐⠀⠀⠀⠀⠻⣭⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⢿⣿⣿⠋⠉⠁⠀⠀⠀⡇⠀⠀⢠⣄⣤⣿⡇⠀⠀⠀⣠⡞⠹⠋⠸⠀⠀⠀⠁⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢿⡟⠃⠀⠀⠀⠀⠀⠘⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠙⣿⠀⠀⠰⠆⠀⠀⠁⠀⡀⣸⣿⣟⣿⣿⡷⣶⠏⣿⣧⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠛⢦⡀⠀⠀⠀⠀⠀⢀⣀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢾⠀⠀⢰⡇⠀⣀⣴⠟⠀⣿⣿⣿⣿⣿⣧⣿⢀⣿⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⠢⣄⠀⠀⠀⠀⠻⠯⠟⠳⠆⠀⠀⠀⠀⠀⠀⣼⠇⠀⣨⣵⠾⠋⠁⣠⣾⣿⣿⣿⣿⣿⡟⢻⣼⠉⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠻⢦⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣼⣿⣾⣿⠛⣁⣤⣶⣿⣿⣿⣿⣿⣿⣿⠁⠁⠈⢿⠀⠙⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⣷⣤⡀⠀⠀⠀⠀⣀⣤⣶⣿⣿⡿⣻⣴⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⣾⣿⣿⣿⣶⣶⣶⣿⣿⣿⣿⣿⣷⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣯⣈⠛⠷⣤⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣤⡄⠀⠉⠳⠦⣄⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣽⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠟⠋⠉⠀⢀⡀⠀⠠⠚⠙⠳⣄⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⠞⢁⠀⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠟⠛⠁⠀⠀⠀⠀⢠⠊⠀⠊⠀⠀⠠⠀⠈⠙⢲⡀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠼⢁⣴⢯⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠟⠋⠀⠀⠀⠀⠀⠀⠀⡐⠀⠈⠀⠀⠀⠁⠀⠀⠀⠀⠈⣇⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡴⢋⣴⠟⣱⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠋⠁⠀⠀⠀⠀⠀⠀⠀⢀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⡄⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⢏⡔⣻⠋⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠟⠁⠀⠐⡀⠀⣤⣤⣲⡴⠖⠀⠈⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠹⣄⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⡖⡣⢋⡼⠃⠀⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠟⠋⠀⠄⠀⠀⣾⣷⣾⠿⠋⠀⠀⠀⡠⠂⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⢦⣀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣸⠟⣀⡞⠁⠀⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⠿⠋⠀⠀⠀⠀⠀⡀⠀⠉⠛⠟⠀⠀⠀⠀⠚⢠⣴⢦⠴⠀⠠⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠲⠬⣕
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⢃⢴⠏⠀⠀⠀⣿⣿⣿⣿⣿⣿⣿⡿⠛⠁⠀⠀⠀⠀⡀⠀⠀⠁⠀⠀⠀⠀⣰⣴⣶⣿⠦⠟⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣰⢧⣾⠏⠀⠀⣴⠀⣿⣿⣿⣿⣿⡿⠋⠀⠀⠀⠀⢰⣦⣴⠶⠀⠀⠀⠀⠀⠀⠀⠀⠙⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢰⣿⢫⠏⠀⠀⠘⣿⠀⠻⣿⣿⡿⠏⠀⠀⠐⠲⠃⠀⠀⠙⠉⠀⠀⠀⠸⠀⠀⠀⠀⠀⠀⠀⠀⢀⠀⠀⢀⠄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣰⡿⢁⡞⠀⠀⠀⣼⣿⣁⠀⠈⠉⠀⠀⠀⠈⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡀⠀⠀⠐⠟⠁⠀⠔⠀⠀⠀⠀⠀⠀⠀⠀⠄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
*/

// Read 読む
template <typename T>
vector<vector<T>> read_graph(vector<vector<T>> edges, int n)
{
    vector<vector<T>> g(n);
    rep(i, sz(edges))
    {
        g[edges[i][0]].pb(edges[i][1]);
        g[edges[i][1]].pb(edges[i][0]);
    }
    return g;
}
template <typename T>
vector<vector<T>> read_directed_graph(vector<vector<T>> edges, int n)
{
    vector<vector<T>> g(n);
    rep(i, sz(edges))
    {
        g[edges[i][0]].pb(edges[i][1]);
    }
    return g;
}

template <typename T>
vector<vector<pair<T, T>>> read_graph_weight(vector<vector<T>> edges, int n)
{
    vector<vector<pair<T, T>>> g(n);
    rep(i, sz(edges))
    {
        g[edges[i][0]].pb({edges[i][1], edges[i][2]});
    }
    return g;
}

template <typename T>
vector<vector<T>> RDG(T n, T m)
{
    vector<vector<T>> g(n);
    rep(i, m)
    {
        int u, v;
        cin >> u >> v;
        g[--u].pb(--v);
    }
    return g;
}
template <typename T>
vector<vector<pair<T, T>>> RGW(T n, T m)
{
    vector<vector<pair<T, T>>> g(n);
    rep(i, m)
    {
        int u, v, w;
        cin >> u >> v >> w;
        g[--u].pb({--v, w});
        g[v].pb({u, w});
    }
    return g;
}
template <typename T>
vector<T> R(T n)
{
    vector<T> a(n);
    rep(i, n) cin >> a[i];
    return a;
}

// Print 印刷する
template <typename T>
void print(T x) { cout << x << nl; }
template <typename T>
void print2(T x, T y) { cout << x << sp << y << nl; }
template <typename T>
void printA(vector<T> &A)
{
    for (auto &x : A)
    {
        cout << x << ' ';
    }
    cout << '\n';
}
template <typename T>
void printA2(vector<vector<T>> &A)
{
    for (auto x : A)
    {
        for (auto y : x)
        {
            cout << y << ' ';
        }
        cout << '\n';
    }
}
template <typename T>
void printS(set<T> &S)
{
    for (auto &x : S)
        cout << x << ' ';
    cout << '\n';
}
template <typename T>
void printmulS(multiset<T> &S)
{
    for (auto &x : S)
        cout << x << ' ';
    cout << '\n';
}

ll n, k, m, q;
// const ll mod = 998244353;
const ll mod = 1000000007;
class Solution {
public:
    int smallestNumber(int n, int t) {

        for(int x = n; ; x++) {
            ll u = 1;
            string p = to_string(x);
            for(auto c: p) {
                u*=(c-'0');
            }
            if(u%t==0) return x;
        }      
        return -1;
    }
};",1447653730
Saksham,math_pi,728,3640,cpp,"#define rep(i, n) for (int i = 0; i < n; ++i)
#define per(i, n) for (int i = n - 1; i >= 0; --i)
#define repn(i, n) for (int i = 1; i <= n; ++i)
#define rng(i, a, b) for (int i = a; i < b; i++)
#define gnr(i, a, b) for (int i = b - 1; i >= a; --i)
#define vb vector<bool>
#define vi vector<int>
#define vl vector<ll>
#define vc vector<char>
#define vs vector<string>
#define vvb vector<vb>
#define vvi vector<vi>
#define vvl vector<vl>
#define vvc vector<vc>
#define si unordered_set<int>
#define sl unordered_set<ll>
#define tsi set<int>
#define tsl set<ll>
#define pii pair<int, int>
#define pll pair<ll, ll>
#define vpii vector<pii>
#define vpll vector<pll>
#define tmii map<int, int>
#define tmll map<ll, ll>
#define mii unordered_map<int, int>
#define mll unordered_map<ll, ll>
#define pqi priority_queue<int>
#define pqig priority_queue<int, vi, greater<int>>
#define pql priority_queue<ll>
#define pqlg priority_queue<ll, vl, greater<ll>>
#define pqpii priority_queue<pii>
#define pqpll priority_queue<pll>
#define pqip priority_queue<pair<int, pair<int, int>>>
#define sz(x) int((x).size())
#define bg(x) begin(x)
#define all(x) bg(x), end(x)
#define rall(x) x.rbegin(), x.rend()
#define sor(x) sort(all(x))
#define rsz resize
#define ins insert
#define pb push_back
#define eb emplace_back
#define ft front()
#define bk back()
#define lb lower_bound
#define ub upper_bound
#define ll long long
#define ld long double
#define nl '\n'
#define sp ' '
#define fi first
#define inf 8e18;
#define sinf 2e9;
#define se second
#define mpr make_pair
#define lg __lg
#define sum(a) (accumulate((a).begin(), (a).end(), 0ll))
#define mine(a) (*min_element((a).begin(), (a).end()))
#define maxe(a) (*max_element((a).begin(), (a).end()))
#define mini(a) (min_element((a).begin(), (a).end()) - (a).begin())
#define maxi(a) (max_element((a).begin(), (a).end()) - (a).begin())
#define lowb(a, x) (lower_bound((a).begin(), (a).end(), (x)) - (a).begin())
#define uppb(a, x) (upper_bound((a).begin(), (a).end(), (x)) - (a).begin())

using namespace std;
/* ありがとう、神様、あなたはとても素晴らしく 、とても優しいです！*/

#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;

typedef tree<int, null_type, less<int>, rb_tree_tag,
             tree_order_statistics_node_update>
    ordered_set;
typedef tree<pii, null_type, less<pii>, rb_tree_tag,
             tree_order_statistics_node_update>
    mordered_set;

struct hsh
{
    size_t operator()(const pair<ll, ll> &p) const
    {
        return p.first * 239 + p.second; // you could change 239 to 1e9+1
    }
};

template <typename T, typename U>
void umin(T &a, U b)
{
    if (a > b)
        a = b;
}
template <typename T, typename U>
void umax(T &a, U b)
{
    if (a < b)
        a = b;
}

template <typename T, typename V>
T rangeBitwiseAnd(T left, V right)
{
    T res = 0;
    int cnt = 0;
    for (; left >= (1ll << cnt); cnt++)
    {
    }
    if (1ll << cnt <= right)
        return 0;
    if (left == right)
        return left;

    res += 1ll << (--cnt);
    left -= 1ll << (cnt);
    right -= 1ll << cnt;
    return res + rangeBitwiseAnd(left, right);
}

template <typename T>
T MSB(T n)
{
    T ans = -1;
    while (n)
        n /= 2, ans++;
    return ans;
}
template <typename T>
T rangeBitwiseOr(T l, T r)
{
    ll res = 0;
    ll u = MSB(l), v = MSB(r);
    while (u == v && u >= 0 && v >= 0)
    {
        ll val = (1ll << u);
        l -= val, r -= val;
        res += val;
        u = MSB(l), v = MSB(l);
    }
    u = max(MSB(l), MSB(r));
    res += (1ll << (u + 1)) - 1;
    return res;
}

template <typename T>
T XOR1(T n)
{
    ll md = n % 4;
    if (!md)
        return n;
    else if (md == 1)
        return 1;
    else if (md == 2)
        return n + 1;
    return 0;
}
template <typename T>
T rangeBitwiseXor(T l, T r) { return XOR1(r) ^ XOR1(l - 1); }

int dx[] = {0, 0, 1, -1, 1, 1, -1, -1};
int dy[] = {1, -1, 0, 0, 1, -1, 1, -1};
int kx[] = {1, 1, -1, -1, 2, 2, -2, -2};
int ky[] = {2, -2, 2, -2, 1, -1, 1, -1};
set<char> vowels{'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'};

bool chkpalin(string s)
{
    rep(i, sz(s) / 2)
    {
        if (s[i] != s[sz(s) - i - 1])
            return false;
    }
    return true;
}
map<char, vector<char>> phone_keypad{
    {'2', {'a', 'b', 'c'}},
    {'3', {'d', 'e', 'f'}},
    {'4', {'g', 'h', 'i'}},
    {'5', {'j', 'k', 'l'}},
    {'6', {'m', 'n', 'o'}},
    {'7', {'p', 'q', 'r', 's'}},
    {'8', {'t', 'u', 'v'}},
    {'9', {'w', 'x', 'y', 'z'}}};
vi GPRM(int N)
{
    vi x(N + 10, 1), primes;
    x[0] = x[1] = 0;
    rng(i, 2, N + 5)
    {
        if (!x[i])
            continue;
        for (int j = i + i; j < N + 5; j += i)
            x[j] = 0;
    }
    rep(i, N + 10)
    {
        if (x[i])
            primes.pb(i);
    }
    return primes;
}
vector<string> slice_fn(string &s, char c)
{
    string tmp = """";
    vector<string> res;
    for (int i = 0; i < s.size(); i++)
    {
        if (s[i] == c)
        {
            if (tmp.empty())
                continue;
            res.push_back(tmp);
            tmp.clear();
        }
        else
            tmp += s[i];
    }
    if (!tmp.empty())
        res.push_back(tmp);
    return res;
}

void yesnoc(bool a) { cout << (a ? ""YES\n"" : ""NO\n""); }
void yesnos(bool a) { cout << (a ? ""Yes\n"" : ""No\n""); }

/*
⠭⠵⠖⠀⠀⠀⠀⠀⠀⠀⠠⠀⠠⠀⡠⠀⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠠⠀⠀⠀⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⠀⠄⠠⠀⠀⠀⠀⠀
⠀⠂⠀⠀⠀⠀⠀⢀⡀⠀⠀⠁⢠⠊⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠁⠀⠀⠠⠀⠀⠔⠄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⢦⠀⠀⠀⠀⠀⠀⠀⠀⡀⠉⠳⢦⣀⠀⠀⠀⠁⠀⠈⣐⠲⠶
⠀⠀⣀⠠⣒⣼⡵⠋⠀⠀⠀⡴⢃⠀⠀⠀⠀⠀⢀⠐⠀⠀⠀⠀⠀⠀⠈⠀⠁⠀⠀⠣⠀⠀⠀⠀⠂⠀⠀⠀⠀⠀⠀⠂⡀⠀⠀⠀⠁⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠈⠑⠦⣀⠀⠀⠀⠐⠁⠢
⡶⠞⠊⣽⡵⠟⠁⠀⠀⣀⡞⠀⠀⠀⠀⠀⠀⡠⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠄⠀⠀⠀⠀⠈⠀⠑⢄⠀⠀⠀⠀⠉⠒⠤⢀⠀⠀
⠀⣠⢟⠟⠁⠀⠀⢀⠄⡼⢀⠀⠀⢠⠀⠀⡔⠀⠠⢀⠀⢀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠀⢀⠁⠢⡀⠀⠀⠠⢀⣀⠀⠀
⡼⠡⠂⠀⠀⣀⡴⡱⢊⠁⠀⠀⠀⠂⠀⡜⠀⣆⢠⣼⠀⢸⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠑⠀⠀⠀⠀⠀⡀⡀⠀⢦⡀⢆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡈⠣⡐⢄⡑⠂⠀⠀⢹⣿⢟
⠀⠁⢀⠤⢊⠏⡰⢁⠊⠀⠄⠀⠀⠀⢰⠃⠘⢨⣽⣿⠀⣸⠀⠀⢻⠀⠀⠀⠀⠀⠀⠀⠐⠀⠤⡀⠀⠣⠂⠀⠀⢆⠀⠀⠐⡄⠀⠁⠂⢢⠀⠀⠀⠀⢀⠑⣄⠀⠀⠻⣦⡈⠢⠈⠢⣀⠢⡀⢣⠑
⣠⠔⠁⠠⠂⠐⡡⠃⢀⠔⠀⠀⠀⠀⡎⠀⡇⡞⣿⣿⠀⢿⣼⢠⣸⣇⠀⠘⣤⡀⠀⢃⣆⠐⡌⣶⠄⠀⢷⣀⠀⠈⢷⣄⡠⠽⣴⡀⠀⠳⡃⠀⠀⠈⠪⢢⡈⢵⣄⠀⠹⡷⡄⠀⢡⡙⢇⠠⠀⢣
⠁⠀⠀⠀⠰⡴⠁⠀⠙⠀⡄⠀⡄⢀⠇⢀⢁⣿⣿⣿⡾⡞⣿⢸⣿⡿⡄⠀⢹⢳⠀⠘⡼⣆⢸⣼⣿⣦⠈⢿⣧⠀⠈⢿⣷⣄⠹⣧⡀⠀⠙⣄⠠⡀⠀⠈⢳⣄⢻⣷⣤⡙⣌⢦⡀⢳⣮⡳⣤⠀
⠀⠀⠀⢀⡖⠁⠀⠀⠀⠸⠀⠐⠇⡀⢀⣾⣼⣿⣿⣿⣿⣧⣿⡆⣿⣷⣷⡀⠈⣿⣧⠀⢷⣏⢦⢹⣼⡿⣷⣌⢟⢷⡄⠘⣿⣿⣦⡙⣷⡀⡀⠘⣄⠩⣂⠀⠸⣿⠿⠷⠀⢀⡝⠾⢟⢄⠻⡏⠛⠊
⠀⠀⠀⡜⠑⠀⠀⠀⠀⠀⢀⠜⢠⠇⣿⣿⣿⡏⢹⢹⣿⣿⣿⣽⣿⡟⣿⣷⠀⢹⣿⢧⢸⣿⡀⣳⣯⢷⣟⣿⣯⣿⣻⣦⣹⣍⣿⣿⣾⣷⣄⠀⠺⣆⠹⣦⣷⣽⣰⣦⣀⠹⣧⠀⢸⣾⣏⠙⠄⠀
⠀⠀⢠⠅⠀⠀⠀⠀⠀⠀⡞⠀⡜⢰⢹⣿⢻⣇⠀⠈⣿⣿⣿⣾⣿⣇⠻⡇⢣⢸⣿⠈⢧⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡟⠛⣿⠿⣿⡿⣿⣿⣦⡀⠣⠣⡸⢷⣽⣿⣞⢿⠀⢻⠀⠀⣏⢿⡄⠀⠀
⠀⠀⠈⠀⠀⠀⠀⠀⠀⢰⠁⢀⠁⣸⣿⡁⠆⢻⣆⠀⠙⢿⣿⣿⣿⡈⠀⠻⡌⢻⣏⠆⠼⢿⠁⠀⢿⣿⣿⣿⣿⣿⡿⠁⠀⠈⣰⡟⠃⠀⣹⣿⣝⣠⣷⠉⢢⡝⠘⢻⠟⠀⣼⠀⠀⣿⢦⢻⡄⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⡆⠀⣼⠀⢸⣿⣷⠀⠀⠻⣦⡀⠀⠉⠉⠀⠁⠀⠀⠁⠈⠻⠀⠀⠈⠀⢀⠈⠙⠻⠿⠟⠋⠀⠀⣠⡾⠋⠀⠀⠐⢻⣿⡍⣽⡇⣀⠼⠑⡠⠐⢀⠌⠈⢀⡴⠋⠀⠈⠋⣄
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠃⠀⠀⠰⢸⠘⢹⣧⠀⠀⠈⠻⠷⡶⠤⠂⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠙⣿⣶⣶⣤⣤⣶⡶⠟⠋⠀⠠⠐⠀⠀⣸⣿⣇⣿⡿⠤⡤⠂⢀⡴⢃⣠⣾⡍⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠐⠀⠘⠀⢹⢿⡄⠀⠀⡆⠀⠀⠀⠀⢀⡇⠀⠀⠀⠀⠀⠀⠀⠀⢲⣾⣿⣿⣿⣿⡶⠒⠀⠀⠈⠁⠐⢤⡀⠀⣿⣿⡿⢿⠴⠒⠒⢛⣴⢻⡋⠉⢿⡀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⠈⣷⢀⠐⠀⠀⠀⠀⠻⣭⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⢿⣿⣿⠋⠉⠁⠀⠀⠀⡇⠀⠀⢠⣄⣤⣿⡇⠀⠀⠀⣠⡞⠹⠋⠸⠀⠀⠀⠁⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢿⡟⠃⠀⠀⠀⠀⠀⠘⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠙⣿⠀⠀⠰⠆⠀⠀⠁⠀⡀⣸⣿⣟⣿⣿⡷⣶⠏⣿⣧⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠛⢦⡀⠀⠀⠀⠀⠀⢀⣀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢾⠀⠀⢰⡇⠀⣀⣴⠟⠀⣿⣿⣿⣿⣿⣧⣿⢀⣿⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⠢⣄⠀⠀⠀⠀⠻⠯⠟⠳⠆⠀⠀⠀⠀⠀⠀⣼⠇⠀⣨⣵⠾⠋⠁⣠⣾⣿⣿⣿⣿⣿⡟⢻⣼⠉⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠻⢦⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣼⣿⣾⣿⠛⣁⣤⣶⣿⣿⣿⣿⣿⣿⣿⠁⠁⠈⢿⠀⠙⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⣷⣤⡀⠀⠀⠀⠀⣀⣤⣶⣿⣿⡿⣻⣴⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⣾⣿⣿⣿⣶⣶⣶⣿⣿⣿⣿⣿⣷⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣯⣈⠛⠷⣤⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣤⡄⠀⠉⠳⠦⣄⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣽⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠟⠋⠉⠀⢀⡀⠀⠠⠚⠙⠳⣄⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⠞⢁⠀⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠟⠛⠁⠀⠀⠀⠀⢠⠊⠀⠊⠀⠀⠠⠀⠈⠙⢲⡀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠼⢁⣴⢯⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠟⠋⠀⠀⠀⠀⠀⠀⠀⡐⠀⠈⠀⠀⠀⠁⠀⠀⠀⠀⠈⣇⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡴⢋⣴⠟⣱⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠋⠁⠀⠀⠀⠀⠀⠀⠀⢀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⡄⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⢏⡔⣻⠋⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠟⠁⠀⠐⡀⠀⣤⣤⣲⡴⠖⠀⠈⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠹⣄⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⡖⡣⢋⡼⠃⠀⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠟⠋⠀⠄⠀⠀⣾⣷⣾⠿⠋⠀⠀⠀⡠⠂⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⢦⣀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣸⠟⣀⡞⠁⠀⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⠿⠋⠀⠀⠀⠀⠀⡀⠀⠉⠛⠟⠀⠀⠀⠀⠚⢠⣴⢦⠴⠀⠠⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠲⠬⣕
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⢃⢴⠏⠀⠀⠀⣿⣿⣿⣿⣿⣿⣿⡿⠛⠁⠀⠀⠀⠀⡀⠀⠀⠁⠀⠀⠀⠀⣰⣴⣶⣿⠦⠟⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣰⢧⣾⠏⠀⠀⣴⠀⣿⣿⣿⣿⣿⡿⠋⠀⠀⠀⠀⢰⣦⣴⠶⠀⠀⠀⠀⠀⠀⠀⠀⠙⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢰⣿⢫⠏⠀⠀⠘⣿⠀⠻⣿⣿⡿⠏⠀⠀⠐⠲⠃⠀⠀⠙⠉⠀⠀⠀⠸⠀⠀⠀⠀⠀⠀⠀⠀⢀⠀⠀⢀⠄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣰⡿⢁⡞⠀⠀⠀⣼⣿⣁⠀⠈⠉⠀⠀⠀⠈⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡀⠀⠀⠐⠟⠁⠀⠔⠀⠀⠀⠀⠀⠀⠀⠀⠄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
*/

// Read 読む
template <typename T>
vector<vector<T>> read_graph(vector<vector<T>> edges, int n)
{
    vector<vector<T>> g(n);
    rep(i, sz(edges))
    {
        g[edges[i][0]].pb(edges[i][1]);
        g[edges[i][1]].pb(edges[i][0]);
    }
    return g;
}
template <typename T>
vector<vector<T>> read_directed_graph(vector<vector<T>> edges, int n)
{
    vector<vector<T>> g(n);
    rep(i, sz(edges))
    {
        g[edges[i][0]].pb(edges[i][1]);
    }
    return g;
}

template <typename T>
vector<vector<pair<T, T>>> read_graph_weight(vector<vector<T>> edges, int n)
{
    vector<vector<pair<T, T>>> g(n);
    rep(i, sz(edges))
    {
        g[edges[i][0]].pb({edges[i][1], edges[i][2]});
    }
    return g;
}

template <typename T>
vector<vector<T>> RDG(T n, T m)
{
    vector<vector<T>> g(n);
    rep(i, m)
    {
        int u, v;
        cin >> u >> v;
        g[--u].pb(--v);
    }
    return g;
}
template <typename T>
vector<vector<pair<T, T>>> RGW(T n, T m)
{
    vector<vector<pair<T, T>>> g(n);
    rep(i, m)
    {
        int u, v, w;
        cin >> u >> v >> w;
        g[--u].pb({--v, w});
        g[v].pb({u, w});
    }
    return g;
}
template <typename T>
vector<T> R(T n)
{
    vector<T> a(n);
    rep(i, n) cin >> a[i];
    return a;
}

// Print 印刷する
template <typename T>
void print(T x) { cout << x << nl; }
template <typename T>
void print2(T x, T y) { cout << x << sp << y << nl; }
template <typename T>
void printA(vector<T> &A)
{
    for (auto &x : A)
    {
        cout << x << ' ';
    }
    cout << '\n';
}
template <typename T>
void printA2(vector<vector<T>> &A)
{
    for (auto x : A)
    {
        for (auto y : x)
        {
            cout << y << ' ';
        }
        cout << '\n';
    }
}
template <typename T>
void printS(set<T> &S)
{
    for (auto &x : S)
        cout << x << ' ';
    cout << '\n';
}
template <typename T>
void printmulS(multiset<T> &S)
{
    for (auto &x : S)
        cout << x << ' ';
    cout << '\n';
}

ll n, k, m, q;
// const ll mod = 998244353;
const ll mod = 1000000007;
class HashedString
{
public:
    static const long long M = 1e9 + 9;
    static const long long B = 9973;

    static vector<long long> pow;

    vector<long long> p_hash;

public:
    HashedString(const string &s) : p_hash(s.size() + 1)
    {
        while (pow.size() < s.size())
        {
            pow.push_back((pow.back() * B) % M);
        }

        p_hash[0] = 0;
        for (int i = 0; i < s.size(); i++)
        {
            p_hash[i + 1] = ((p_hash[i] * B) % M + s[i]) % M;
        }
    }

    long long get_hash(int start, int end)
    {
        long long raw_val =
            (p_hash[end + 1] - (p_hash[start] * pow[end - start + 1]));
        return (raw_val % M + M) % M;
    }
};
vector<long long> HashedString::pow = {1};
class Solution
{
public:
    int maxFrequency(vector<int> &nums, int k, int numOperations)
    {
        n = sz(nums);
        tmll f;
        vpll e;
        tsl s;
        rep(i, n)
        {
            f[nums[i]]++;
            e.pb({nums[i] - k, 1});
            s.ins(e.bk.fi);
            s.ins(nums[i]);
            e.pb({nums[i] + k + 1, -1});
        }

        sor(e);
        ll j = 0, cur = 0, ans = 0;
        for (auto v : s)
        {
            while (j < sz(e) && e[j].fi <= v)
            {
                cur += e[j].se;
                j++;
            }
            ll u = f[v] ? f[v] : 0;
            ll tot = u + min(numOperations * 1ll,  cur - u);
            umax(ans, tot);
        }
        return ans;
    }
};",1447776693
Ritesh,rit_22,730,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int op) {
        unordered_map<int,int> mp,f;
        int n=nums.size(),ans=0,c=0,ma=0;
        for(int i=0;i<n;i++){
            mp[nums[i]-k]++;
            mp[nums[i]+k+1]--;
            f[nums[i]]++;
            ma=max(ma,nums[i]);
        }
        for(int i=-k;i<ma+k+1;i++){
            c+=mp[i];
            ans=max(ans,min(c,f[i]+op));
        }

        return ans;
    }
};",1447701025
Ritesh,rit_22,730,3626,cpp,"class Solution {
public:
    int smallestNumber(int n, int t) {
        int ans=n;
        while(1){
            int p=1;
            int tt=ans;
            while(tt>0){
                p*=(tt%10);
                tt/=10;
            }
            if((p%t)==0)
                return ans;
            ans++;
        }
        return 0;
    }
};",1447662356
Ritesh,rit_22,730,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int op) {
        map<int,int> mp;
        unordered_map<int,int>f;
        int n=nums.size(),ans=0,c=0,ma=0;
        for(int i=0;i<n;i++){
            mp[nums[i]]+=0;
            mp[nums[i]-k]++;
            mp[nums[i]+k+1]--;
            f[nums[i]]++;
            ma=max(ma,nums[i]);
        }
        for (auto i:mp){
            c+=i.second;
            // cout<<i.first<<' '<<i.second<<' '<<c<<' '<<f[i.first]+op<<endl;
            ans=max(ans,min(c,f[i.first]+op));
            
        }
        return ans;
    }
};",1447746045
dongzhi,dongzhi0,731,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        sort(nums.begin(),nums.end());
        int ans = 1;
        unordered_map<int,int> m;
        for (int &d : nums) m[d]++;
        for (int i = nums[0]; i <= nums.back(); i++) {
            auto l = lower_bound(nums.begin(),nums.end(), i-k), r = upper_bound(nums.begin(),nums.end(), i+k);
            int c = r-l;
            ans = max(ans, min(numOperations+m[i], c));
        }
        return ans;
    }
};",1447722505
dongzhi,dongzhi0,731,3626,cpp,"class Solution {
public:
    int check(int n, int t) {
        int m = 1;
        while (n) {
            m*=n%10;
            n/=10;
        }
        return m%t == 0;
    }
    
    int smallestNumber(int n, int t) {
        while (n%10) {
            if (check(n,t)) return n;
            n++;
        }
        return n;
    }
};",1447656601
dongzhi,dongzhi0,731,3640,cpp,"#pragma GCC optimize(""Ofast,unroll-loops"")
#pragma GCC target(""avx2,tune=native"")
auto _ = [](){ return cin.tie(0)->sync_with_stdio(0); }();

class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        sort(nums.begin(),nums.end());
        
        map<int,int> m;
        for (int &d : nums) {
            m[d-k]++;
            m[d+k+1]--;
        }
        int l = -1e9, c = 0;
        vector<vector<int>> q;
        for (auto &p : m) {
            // cout << l << "" "" << p.first-1 << "" "" << c << endl;;
            if (c > 1) q.push_back({c,l,p.first-1});
            l = p.first;
            c += p.second;
        }
        sort(q.begin(),q.end(),greater<vector<int>>());
        
        int ans = 1;
        unordered_map<int,int> cnt;
        for (int &d : nums) cnt[d]++;
        // for (int i = nums[0]; i <= nums.back(); i++) {
        //     auto l = lower_bound(nums.begin(),nums.end(), i-k), r = upper_bound(nums.begin(),nums.end(), i+k);
        //     int c = r-l;
        //     ans = max(ans, min(numOperations+(cnt.find(i) != cnt.end() ? cnt[i] : 0), c));
        // }
        for (auto &p : q) {
            if (p[0] <= ans) break;
            vector<int> t{p[1]};
            auto ll = lower_bound(nums.begin(),nums.end(),p[1]), rr = upper_bound(nums.begin(),nums.end(),p[2]);
            while (ll != rr) {
                t.push_back(*ll);
                ll++;
            }
            for (int i : t) {
                auto l = lower_bound(nums.begin(),nums.end(), i-k), r = upper_bound(nums.begin(),nums.end(), i+k);
                int c = r-l;
                ans = max(ans, min(numOperations+(cnt.find(i) != cnt.end() ? cnt[i] : 0), c));
            }
        }
        return ans;
    }
};",1447762016
Kaushal,imStarLord,732,3622,java,"class Solution {
    public int maxFrequency(int[] nums, int k, int numOperations) {
        Arrays.sort(nums);
        int res = 0;
        for (int i=1; i<=100000; i++) {
            int count = rightBound(nums, i) - leftBound(nums, i);
            int temp = rightBound(nums, i+k) - leftBound(nums, i-k) - count;
            res = Math.max(res, count + Math.min(numOperations, temp));
            // if (i==20) {
            //     System.out.println(count);
            //     System.out.println(temp);
            // }
        }
        return res;
    }

    public int leftBound(int[] nums, int target) {
        int left = 0;
        int right = nums.length;

        while (left < right) {
            int mid = left + (right - left) / 2;
            if (nums[mid] < target) {
                left = mid + 1;
            } else {
                right = mid;
            }
        }
        return left;
    }

    public int rightBound(int[] nums, int target) {
        int left = 0;
        int right = nums.length;

        while (left < right) {
            int mid = left + (right - left) / 2;
            if (nums[mid] <= target) {
                left = mid + 1;
            } else {
                right = mid;
            }
        }
        return left;
    }
}

/**
    1, 2, 3, 4, 5, 100, 100
    2
    4
**/",1447750785
Kaushal,imStarLord,732,3626,java,"class Solution {
    public int smallestNumber(int n, int t) {
        for (int i=n; i<n+10; i++) {
            int val = i, mul = 1;
            while (val > 1) {
                mul *= (val%10);
                val/=10;
            }
            if (mul%t == 0) return i;
        }
        return -1;
    }
}",1447666456
Kaushal,imStarLord,732,3640,java,"class Solution {
    public int maxFrequency(int[] nums, int k, int numOperations) {
        Arrays.sort(nums);
        int res = 0;
        for (int i=0; i<nums.length; i++) {
            int num = nums[i];
            int count = rightBound(nums, num) - leftBound(nums, num);
            int temp = rightBound(nums, num+k) - leftBound(nums, num-k) - count;
            res = Math.max(res, count + Math.min(numOperations, temp));
            int num2 = nums[i]+k;
            int count2 = rightBound(nums, num2) - leftBound(nums, num2);
            int temp2 = rightBound(nums, num2+k) - leftBound(nums, num2-k) - count2;
            res = Math.max(res, count2+Math.min(numOperations, temp2));
            
        }
        return res;
    }

    public int leftBound(int[] nums, int target) {
        int left = 0;
        int right = nums.length;

        while (left < right) {
            int mid = left + (right - left) / 2;
            if (nums[mid] < target) {
                left = mid + 1;
            } else {
                right = mid;
            }
        }
        return left;
    }

    public int rightBound(int[] nums, int target) {
        int left = 0;
        int right = nums.length;

        while (left < right) {
            int mid = left + (right - left) / 2;
            if (nums[mid] <= target) {
                left = mid + 1;
            } else {
                right = mid;
            }
        }
        return left;
    }
}

/**
    1, 2, 3, 4, 5, 100, 100
    2
    4
**/",1447769800
parthhmishra,parthhmishra,733,3622,rust,"use std::cmp::{max, min};


impl Solution {
    pub fn max_frequency(nums: Vec<i32>, k: i32, num_operations: i32) -> i32 {
        let max_num = *nums.iter().max().unwrap();
        let mut freq = vec![0; (max_num + 1) as usize];

        for &num in &nums {
            freq[num as usize] += 1;
        }

        let mut pre = vec![0; (max_num + 1) as usize];
        pre[0] = freq[0];

        for i in 1..=max_num as usize {
            pre[i] = pre[i - 1] + freq[i];
        }

        let mut result = 0;

        for x in 0..=max_num as usize {
            if freq[x] == 0 && num_operations == 0 {
                continue;
            }

            let left = max(0, x as i32 - k) as usize;
            let right = min(max_num as usize, x + k as usize);
            let total_in_range = pre[right] - if left > 0 { pre[left - 1] } else { 0 };
            let can_adjust = total_in_range - freq[x];
            let total = freq[x] + min(num_operations, can_adjust);
            result = max(result, total);
        }

        result
    }
}


",1447769593
parthhmishra,parthhmishra,733,3626,cpp,"#include <iostream>
using namespace std;

class Solution {
public:
    int smallestNumber(int n, int t) {
        while(true){
            int product=1;
            int temp=n;
            while(temp>0){
                int digit=temp%10;
                product *= digit;
                temp /= 10;
            }
            if(product%t==0){
                return n;
            }
            n++;
        }
    }
};",1447751273
parthhmishra,parthhmishra,733,3640,rust,"use std::collections::{HashMap, BTreeSet};


impl Solution {
    pub fn max_frequency(nums: Vec<i32>, k: i32, num_operations: i32) -> i32 {
        let n = nums.len();
        let mut freq = HashMap::new();
        let mut events = Vec::new();

        // Count the frequency of each number and create events
        for &num in &nums {
            *freq.entry(num).or_insert(0) += 1;
            events.push((num - k, 1));       // Start of an operation range
            events.push((num + k + 1, -1));  // End of an operation range
        }

        // Gather unique points where events happen
        let mut points = BTreeSet::new();
        for &(point, _) in &events {
            points.insert(point);
        }
        for &key in freq.keys() {
            points.insert(key);
        }

        // Sort events by their starting/ending positions
        events.sort();

        // Process each point in sorted order, calculating overlaps and max frequency
        let mut idx = 0;
        let mut current_overlap = 0;
        let mut max_freq = 0;

        for &t in &points {
            while idx < events.len() && events[idx].0 <= t {
                current_overlap += events[idx].1;
                idx += 1;
            }

            // Check frequency for current point `t`
            let actual_count = *freq.get(&t).unwrap_or(&0);
            let possible_freq = actual_count + std::cmp::min(num_operations, current_overlap - actual_count);
            max_freq = std::cmp::max(max_freq, possible_freq);
        }

        max_freq
    }
}
",1447784151
Devendra Kumar Sahu,devendra_sahu,734,3622,cpp,"class Solution {
public:

    int sol(vector<int>& nums, int k, int numOp)
    {
        int maxNum = *max_element(nums.begin(), nums.end());
        int sz = maxNum + k + 2;
        
        vector<int> frq(sz, 0);
        for (int num : nums) frq[num] += 1;

        
        vector<int> pre(sz, 0);
        pre[0] = frq[0];
        
        for (int i = 1; i < sz; ++i)
            pre[i] = pre[i - 1] + frq[i];

        
        int ans = 0;
        for (int x = 0; x < sz; x++) {
            if (frq[x] == 0 && numOp == 0) continue;
        
            
            int l = max(0, x - k);
            int r = min(sz - 1, x + k);
            
            int totalInRange = pre[r] - (l > 0 ? pre[l - 1] : 0);
            int canAdjust = totalInRange - frq[x];
            
            int t = frq[x] + min(numOp, canAdjust);
            
            ans = max(ans, t);
        }
        
        return ans;

    }

    int solve(vector<int>& nums, int k, int nmop) 
    {
        return sol(nums, k, nmop);
    }

    int maxFrequency(vector<int>& nums, int k, int numOperations) 
    {
        int ans = solve(nums, k, numOperations);
        return ans;
    }
};",1447744407
Devendra Kumar Sahu,devendra_sahu,734,3626,cpp,"class Solution {
public:
    int digitProduct(int x) {
        int product = 1;
        while (x > 0) {
            int digit = x % 10;
            product *= digit;
            x /= 10;
        }
        return product;
    }

    int solve(int n, int t) {
        while (true) {
            if (digitProduct(n) % t == 0) {
                return n;
            }
            n++;
        }
        return -1;
    }

    int smallestNumber(int n, int t) {
        return solve(n, t);
    }
};
",1447658458
Devendra Kumar Sahu,devendra_sahu,734,3640,cpp,"class Solution {
public:

    int solve(vector<int>& nums, int k, int numOp) 
    {
        int n = nums.size();
        
        vector<pair<int, int>> evnts;
        unordered_map<int, int> frq;
        
        for (int nm : nums) 
        {
            frq[nm]++;
            evnts.push_back({nm - k, +1});
            evnts.push_back({nm + k + 1, -1});
        }
        
        set<int> pnts;
        for (auto& evnt : evnts) pnts.insert(evnt.first);
        for (auto& entry : frq) pnts.insert(entry.first);
        
        
        sort(evnts.begin(), evnts.end());
        
        int i = 0;
        int curr = 0;
        int maxFrqAns = 0;
        
        for (int t : pnts) 
        {    
            while (i < evnts.size() && evnts[i].first <= t) 
            {
                curr += evnts[i].second;
                i++;
            }
        
            int aCnt = frq.count(t) ? frq[t] : 0;
            int possibleF = aCnt + min(numOp, curr - aCnt);
            
            maxFrqAns = max(maxFrqAns, possibleF);
        }
        
        return maxFrqAns;

    }

    int sol(vector<int>& nums, int k, int numOp) 
    {
        int ans = solve(nums, k, numOp);
        return ans;
    }

    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        int ans = sol(nums, k, numOperations);
        return ans;
    }
};",1447762153
TulasiRaj,TulasiRaj,735,3622,java,"class Solution {
    public int maxFrequency(int[] nums, int k, int op) {
        int n = nums.length;
        int max = 0;
        for(int i=0;i<n;i++) {
           max = Math.max(nums[i],max);
        }
        int hash[] = new int[max+1];
        for(int i=0;i<n;i++)
        {
            hash[nums[i]]++;
        }
        int p[] = new int[max+1];
        p[0] = hash[0];
        for(int i=1;i<=max;i++) {
            p[i] = hash[i]+p[i-1];
        }
        int ans = 0;
        for(int i=0;i<=max;i++)
        {
            int cnt = hash[i];
            int right = Math.min(max,i+k);
            int left = Math.max(0,i-k-1);
            int opr = p[right]-p[i];
            int opl = 0;
            if(i>1&&k>0) opl = p[i-1]-p[left];
            int t = Math.min(op,opl+opr);
            ans = Math.max(ans,cnt+t);
        }
        return ans;
    }
 
}",1447696454
TulasiRaj,TulasiRaj,735,3626,java,"class Solution {
    public int smallestNumber(int n, int t) {
        while(true)
        {
            int val = product(n);
            if(val%t==0) break;
            n++;
        }
        return n;
    }
    public int product(int n)
    {
        int val = 1;
        while(n>0)
        {
            val = val*(n%10);
            n = n/10;
        }
        return val;
    }
}",1447655325
TulasiRaj,TulasiRaj,735,3640,java,"class Solution {
    public int maxFrequency(int[] nums, int k, int op) {
        int n = nums.length;
        TreeMap<Integer,Integer> map = new TreeMap<>();
        HashMap<Integer,Integer> freq = new HashMap<>();
        for(int i=0;i<n;i++)
        {
            if(k>0){
            map.put(nums[i]-k,map.getOrDefault(nums[i]-k,0)+1);
            map.put(nums[i],map.getOrDefault(nums[i],0)-1);
              }
            if(k>0)
            {
            map.put(nums[i]+1,map.getOrDefault(nums[i]+1,0)+1);
            map.put(nums[i]+k+1,map.getOrDefault(nums[i]+k+1,0)-1);
            }
            map.put(nums[i],map.getOrDefault(nums[i],0)+1);
            map.put(nums[i]+1,map.getOrDefault(nums[i]+1,0)-1);
            freq.put(nums[i],freq.getOrDefault(nums[i],0)+1);
        }
        int val = 0; int ans = 0;
        for(int key : map.keySet())
        {
            val = val+map.get(key);
            int t = Math.min(op,val-freq.getOrDefault(key,0));
            ans = Math.max(ans,t+freq.getOrDefault(key,0));
        }
        return ans;
    }
    public int f1(int nums[],int n,int val)
    {
        int low = 0; int high = n-1; int ans = n-1;
        while(low<=high)
        {
            int mid = (low+high)/2;
            if(nums[mid]<=val) {
                low = mid+1;
                ans = mid;
            }
            else high = mid-1;
        }
        return ans;
    }
    public int f2(int nums[],int n,int val)
    {
        int low = 0; int high = n-1; int ans = -1;
        while(low<=high)
        {
            int mid = (low+high)/2;
            if(nums[mid]>=val) {
                high = mid-1;
                ans = mid;
            }
            else low = mid+1;
        }
        return ans;
    }
    
}",1447777279
Rahul Saini,goku_monkey,736,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int ops) {
        sort(begin(nums), end(nums));
        unordered_map<int,int> um;
        for(int i:nums)um[i]++;
        int ans=0;
        for(int i=nums[0]; i<=nums.back(); i++){
            int a=lower_bound(begin(nums), end(nums), i-k)-begin(nums);
            int b=upper_bound(begin(nums), end(nums), i+k)-begin(nums);
            b--;
            // if(i==4)cout<<a<<"" ""<<b<<endl;
            ans=max(ans, um[i]+min(b-a-um[i]+1,ops));
        }
        return ans;
    }
};",1447738017
Rahul Saini,goku_monkey,736,3626,cpp,"class Solution {
public:
    int a(int n){
        int b=1;
        while(n){
            b*=n%10;
            n/=10;
        }
        return b;
    }
    int smallestNumber(int n, int t) {
        while(a(n)%t)n++;
        return n;
    }
};",1447667306
Rahul Saini,goku_monkey,736,3640,cpp,"#define ll long long
class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int ops) {
        // nums.push_back(nums.back())
        sort(begin(nums), end(nums));
        unordered_map<ll,ll> um;
        for(int i:nums)um[i]++;
        ll ans=0;
        for(int i=0; i<size(nums); i++){
            int a=lower_bound(begin(nums), end(nums), nums[i]-2*k)-begin(nums);
            // int b=upper_bound(begin(nums), end(nums), i+k)-begin(nums);
            // b--;
            int p=nums[i]-k;
            // cout<<a<<"" ""<<i<<endl;
            ans=max(ans, um[p]+min(i-a-um[p]+1,(ll)ops));
        }
        for(int i:nums){
            int a=lower_bound(begin(nums), end(nums), i-k)-begin(nums);
            int b=upper_bound(begin(nums), end(nums), i+k)-begin(nums);
            b--;
            ans=max(ans, um[i]+min(b-a-um[i]+1,(ll)ops));
        }
        return ans;
    }//[5,11,20,20] 5 1
};",1447784291
gshahrouzi,gshahrouzi,739,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        map<int, int> cnt;
        for (auto x: nums) cnt[x]++;
        int mx = *max_element(nums.begin(), nums.end());
        int offset = 1e5;
        vector<int> diff(3*offset, 0);
        for (auto x: nums) {
            diff[offset+x-k]++;
            diff[offset+x+k+1]--;
        }
        int ans = 0;
        for (int i = 1; i < diff.size(); i++) diff[i] += diff[i-1];
        for (int i = offset-k; i < offset+mx+k+1; i++) {
            int shift = diff[i] - cnt[i-offset];
            int curr = cnt[i-offset] + min(numOperations, shift);
            ans = max(curr, ans);
        }
        return ans;
    }
};

/*

cnt => exact amount
current i => exact amount + shifted

*/",1447711753
gshahrouzi,gshahrouzi,739,3626,cpp,"class Solution {
public:
    bool check(int n, int t) {
        int prod = 1;
        while (n) {
            prod *= n % 10;
            n /= 10;
        }
        return prod % t == 0;
    }

    int smallestNumber(int n, int t) {
        while (!check(n, t)) n++;
        return n;
    }
};",1447686521
gshahrouzi,gshahrouzi,739,3640,cpp,"// taken from https://www.geeksforgeeks.org/maximum-number-of-overlapping-intervals/
// Function that returns maximum
// overlap among ranges
int overlap(vector<pair<int, int>> v) {
    // variable to store the maximum
    // count
    int ans = 0;
    int count = 0;
    vector<pair<int, char> > data;

    // storing the x and y
    // coordinates in data vector
    for (int i = 0; i < v.size(); i++) {

        // pushing the x coordinate
        data.push_back({ v[i].first, 'x' });

        // pushing the y coordinate
        data.push_back({ v[i].second, 'y' });
    }

    // sorting of ranges
    sort(data.begin(), data.end());

    // Traverse the data vector to
    // count number of overlaps
    for (int i = 0; i < data.size(); i++) {

        // if x occur it means a new range
        // is added so we increase count
        if (data[i].second == 'x')
            count++;

        // if y occur it means a range
        // is ended so we decrease count
        if (data[i].second == 'y')
            count--;

        // updating the value of ans
        // after every traversal
        ans = max(ans, count);
    }
    return ans;
}


class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        int n = nums.size();
        sort(nums.begin(), nums.end());
        map<int, int> cnt;
        for (auto x: nums) cnt[x]++;
        int ans = 0;
        for (int i = 0; i < n; i++) {
            int x = lower_bound(nums.begin(), nums.end(), nums[i] - k) - nums.begin();
            int y = upper_bound(nums.begin(), nums.end(), nums[i] + k) - nums.begin();
            y--;
            int total = y-x+1;
            int shift = total - cnt[nums[i]];
            int curr = cnt[nums[i]] + min(numOperations, shift);
            ans = max(curr, ans);
        }
        cout << ans << endl;
        vector<pair<int, int>> p;
        for (auto x: nums) {
            pair<int, int> curr = {x-k, x+k};
            p.push_back(curr);
        }
        ans = max(ans, min(numOperations, overlap(p)));
        return ans;
    }
};

// map<int, int> cnt;
// for (auto x: nums) cnt[x]++;
// int mx = *max_element(nums.begin(), nums.end());
// int offset = 1e5;
// vector<int> diff(3*offset, 0);
// for (auto x: nums) {
//     diff[offset+x-k]++;
//     diff[offset+x+k+1]--;
// }
// int ans = 0;
// for (int i = 1; i < diff.size(); i++) diff[i] += diff[i-1];
// for (int i = offset-k; i < offset+mx+k+1; i++) {
//     int shift = diff[i] - cnt[i-offset];
//     int curr = cnt[i-offset] + min(numOperations, shift);
//     ans = max(curr, ans);
// }
// return ans;",1447777402
NGUYEN HUU LAI,lainhdev,740,3622,golang,"func maxFrequency(nums []int, k int, numOperations int) int {
	type Event struct {
		pos   int
		delta int
	}

	events := []Event{}
	cntUnadjusted := map[int]int{}

	for _, num := range nums {
		cntUnadjusted[num]++
		start := num - k
		end := num + k + 1
		events = append(events, Event{start, 1})
		events = append(events, Event{end, -1})
	}

	sort.Slice(events, func(i, j int) bool {
		if events[i].pos == events[j].pos {
			return events[i].delta > events[j].delta
		}
		return events[i].pos < events[j].pos
	})

	maxFreq := 0
	cntOverlap := 0

	uniquePositions := make(map[int]bool)
	for _, event := range events {
		uniquePositions[event.pos] = true
	}
	for num := range cntUnadjusted {
		uniquePositions[num] = true
	}

	positions := make([]int, 0, len(uniquePositions))
	for pos := range uniquePositions {
		positions = append(positions, pos)
	}
	sort.Ints(positions)

	i := 0
	for _, pos := range positions {
		for i < len(events) && events[i].pos <= pos {
			cntOverlap += events[i].delta
			i++
		}
		cntUnadj := cntUnadjusted[pos]
		adjustable := cntOverlap - cntUnadj
		totalFreq := cntUnadj + min(numOperations, adjustable)
		if totalFreq > maxFreq {
			maxFreq = totalFreq
		}
	}

	return maxFreq
}",1447738123
NGUYEN HUU LAI,lainhdev,740,3626,golang,"func smallestNumber(n int, t int) int {
    for i := n; i < 101; i++ {
        str := strconv.Itoa(i)
        product := 1
        for _, c := range str {
            digit := int(rune(c) - '0')
            product *= digit
        }
        if product%t == 0 {
            return i
        }
    }
    return 1
}",1447667278
NGUYEN HUU LAI,lainhdev,740,3640,golang,"func maxFrequency(nums []int, k int, numOperations int) int {
    type Event struct {
		pos   int
		delta int
	}

	events := []Event{}
	cntUnadjusted := map[int]int{}

	for _, num := range nums {
		cntUnadjusted[num]++
		start := num - k
		end := num + k + 1
		events = append(events, Event{start, 1})
		events = append(events, Event{end, -1})
	}

	sort.Slice(events, func(i, j int) bool {
		if events[i].pos == events[j].pos {
			return events[i].delta > events[j].delta
		}
		return events[i].pos < events[j].pos
	})

	maxFreq := 0
	cntOverlap := 0

	uniquePositions := make(map[int]bool)
	for _, event := range events {
		uniquePositions[event.pos] = true
	}
	for num := range cntUnadjusted {
		uniquePositions[num] = true
	}

	positions := make([]int, 0, len(uniquePositions))
	for pos := range uniquePositions {
		positions = append(positions, pos)
	}
	sort.Ints(positions)

	i := 0
	for _, pos := range positions {
		for i < len(events) && events[i].pos <= pos {
			cntOverlap += events[i].delta
			i++
		}
		cntUnadj := cntUnadjusted[pos]
		adjustable := cntOverlap - cntUnadj
		totalFreq := cntUnadj + min(numOperations, adjustable)
		if totalFreq > maxFreq {
			maxFreq = totalFreq
		}
	}

	return maxFreq
}",1447738985
xdlolxd,xdlolxd,741,3622,python3,"from bisect import *
from collections import Counter

class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        nums.sort()
        ans = 1
        prev = -1
        seq = 0
        max_seq = 1
        nums_cnt = Counter(nums)
        for n in nums:
            if n == prev:
                seq += 1
                max_seq = max(max_seq, seq)
            else:
                seq = 1
                prev = n
        
        ans = 0
        max_n = max(nums)
        min_n = min(nums)
        for n in range(min_n-k, max_n+k+1):
            left = n - k
            right = n + k
            cnt = bisect_right(nums, right) - bisect_left(nums, left)
            # print(n, left, right, bisect_left(nums, left), bisect_right(nums, right) )
            if n in nums_cnt:
                ops = cnt - nums_cnt[n]
                ans = max(ans, nums_cnt[n] + min(numOperations, ops))
            else:
                ans = max(min(cnt, numOperations), ans)
        return max(max_seq, ans)",1447698837
xdlolxd,xdlolxd,741,3626,python3,"class Solution:
    def smallestNumber(self, n: int, t: int) -> int:
        for i in range(n, n*10 + 1):
            d = i
            c = 1
            while d:
                c *= d % 10
                d //= 10
            if c%t == 0:
                return i
            ",1447655601
xdlolxd,xdlolxd,741,3640,python3,"from bisect import *

from collections import Counter

class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        nums_cnt = Counter(nums)
        if k == 0:
            return max(nums_cnt.values())
        intervals = []
        for n in nums:
            intervals.append((n-k, 1)) # entry
            intervals.append((n, 2)) # number itself
            intervals.append((n+k+1, 0)) # exit
        
        # find point with maximum overlap of intervals
        intervals.sort()
        ans = 0
        cnt = 0
        for num, t in intervals:
            if t == 1: # entry
                cnt += 1
            elif t == 0: # exit
                cnt -= 1
            num_cnt = nums_cnt[num] if num in nums_cnt else 0
            ops = min(cnt - num_cnt, numOperations)
            ans = max(ans, num_cnt + ops)
            # print(num, t)
            
        return ans
        
        ",1447722048
Swaraj Sonwane,imSwaraj,742,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int op) {
       int maxi = *max_element(nums.begin(), nums.end());
       int range = maxi + k+2;
        vector<int> arr(range, 0);

        for(auto n: nums){
            arr[n] +=1;
        }
        vector<int> prev(range, 0);
        prev[0] = arr[0];
        for(int i=1;i<range;i++){
            prev[i] = prev[i-1]+ arr[i];
        }
        int ans =0;

        for(int i =0;i<range;i++){
            if(arr[i] == 0 && op ==0) continue;

            int l = max(0, i-k);
            int r = min(range-1, i+k);
            int t = prev[r] -(l>0 ? prev[l-1]:0);
            int a = t - arr[i];
            int tt = arr[i] + min(op, a);
            ans = max(ans, tt);
        }

        return ans;
    }
};",1447736759
Swaraj Sonwane,imSwaraj,742,3626,cpp,"class Solution {
public:
    int smallestNumber(int n, int t) {
        while(true){
            int m = n;
            int prod = 1;
            while(m){
                int rem = m%10;
                prod*= rem;
                m/=10;
            }
            if(prod%t == 0) return n;
            n++;
        }
        return -1;
    }
};",1447660591
Swaraj Sonwane,imSwaraj,742,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int op) {
        vector<pair<int,int>> e;
        set<int> p;
        unordered_map<int,int> f;

        for(auto n: nums){
            f[n]++;
            e.push_back({n-k, 1});
            e.push_back({n+k+1, -1});
        }
        sort(e.begin(), e.end());
        for(auto ev: e){
            p.insert(ev.first);
        }
        for(auto t: f){
            p.insert(t.first);
        }

        int maxf =0;
        int ol =0;
        int idx =0;
        for(int i : p){
            while(idx< e.size() && e[idx].first <= i){
                ol+= e[idx].second;
                idx++;
            }

            int c = f.count(i) ? f[i]:0;
            int s = c+ min(op , ol - c);
            maxf = max(maxf , s);
        }

        return maxf;
        
        
    }
};",1447763344
weiyang chen,chenweiyang,743,3622,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        nums.sort()
        mp = Counter(nums)
        res = 0
        for idx, num in enumerate(nums):
            if idx == 0:
                upper = bisect.bisect(nums, num + k)
                cur = min(numOperations + mp[num], upper)
                res = max(cur, res)
            else:
                lower, upper = bisect.bisect(nums, num - k), bisect.bisect(nums, num + k)
                cur = min(numOperations + mp[num], upper - lower)
                res = max(cur, res)
            supper = bisect.bisect(nums, num + k + k)
            super_cur = min(numOperations - 1 + mp[num], supper - idx)
            res = max(res, super_cur)
        return res
        
",1447761232
weiyang chen,chenweiyang,743,3626,python3,"class Solution:
    def smallestNumber(self, n: int, t: int) -> int:
        for i in range(n, 101):
            if i < 10 and i % t == 0:
                return i
            elif i >= 10:
                num = (i % 10) * (i // 10)
                if num % t == 0:
                    return i
        return -1",1447687755
weiyang chen,chenweiyang,743,3640,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        nums.sort()
        mp = Counter(nums)
        res = 0
        for idx, num in enumerate(nums):
            if idx == 0:
                upper = bisect.bisect(nums, num + k)
                cur = min(numOperations + mp[num], upper)
                res = max(cur, res)
            else:
                lower, upper = bisect.bisect(nums, num - k), bisect.bisect(nums, num + k)
                cur = min(numOperations + mp[num], upper - lower)
                res = max(cur, res)
            supper = bisect.bisect(nums, num + k + k)
            super_cur = min(numOperations - 1 + mp[num], supper - idx)
            res = max(res, super_cur)
        return res
        ",1447763399
Saumya Srivastava,alka_saumya,744,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        int a=0;
        int b=0;
        int c=a;
        int bigBoi = *max_element(nums.begin(), nums.end());
        int gigaSize = bigBoi + k + 2;
        vector<int> ultraFreq(gigaSize, 0);

        for (int noodle : nums) {
            ultraFreq[noodle] += 1;
        }

        vector<int> superPrefix(gigaSize, 0);
        superPrefix[0] = ultraFreq[0];
        for (int i = 1; i < gigaSize; ++i) {
            superPrefix[i] = superPrefix[i - 1] + ultraFreq[i];
        }

        int megaResult = 0;
        
        for (int blob = 0; blob < gigaSize; ++blob) {
            if (ultraFreq[blob] == 0 && numOperations == 0) {
                continue; 
            }

            int lefty = max(0, blob - k);
            int righty = min(gigaSize - 1, blob + k);

            int totalInGalaxy = superPrefix[righty] - (lefty > 0 ? superPrefix[lefty - 1] : 0);
            
            int adjustmentWizard = totalInGalaxy - ultraFreq[blob];
            
            int grandTotal = ultraFreq[blob] + min(numOperations, adjustmentWizard);
            
            megaResult = max(megaResult, grandTotal);
        }

        return megaResult;
    }
};
",1447768530
Saumya Srivastava,alka_saumya,744,3626,cpp,"class Solution {
public:
    int smallestNumber(int n, int t) {
        auto blipBlop = [](int zizzle) {
            int whizzle = 1;
            int a=0;
            int b=0;
            int c=a;
            while (zizzle > 0) {
                int frazzle = zizzle % 10;
                whizzle *= frazzle;
                zizzle /= 10;
            }
            return whizzle;
        };
        
        int snizzle = n;
        while (true) {
            int crizzle = blipBlop(snizzle);
            if (crizzle % t == 0) {
                return snizzle;
            }
            snizzle++;
        }
    }
};
",1447654527
Saumya Srivastava,alka_saumya,744,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        int noodleSoupSize = nums.size();
        unordered_map<int, int> noodleFreqMap;
        vector<pair<int, int>> magicalOccurrences;
        int aa=0;
        int bb=0;
        int cc=aa;
        for (int noodle : nums) {
            noodleFreqMap[noodle]++;
            magicalOccurrences.push_back({noodle - k, +1});
            magicalOccurrences.push_back({noodle + k + 1, -1});
        }
        set<int> wizardCoordinates;
        for (auto& magicalEvent : magicalOccurrences) {
            wizardCoordinates.insert(magicalEvent.first);
        }
        for (auto& noodleEntry : noodleFreqMap) {
            wizardCoordinates.insert(noodleEntry.first);
        }
        sort(magicalOccurrences.begin(), magicalOccurrences.end());
        int idponter=0;
        int eventPointer = 0;
        int overlapPotion = 0;
        int maximumSorcery = 0;

        for (int sorceryPoint : wizardCoordinates) {
            while (eventPointer < magicalOccurrences.size() && magicalOccurrences[eventPointer].first <= sorceryPoint) {
                overlapPotion += magicalOccurrences[eventPointer].second;
                eventPointer++;
            }

            int actualNoodles = noodleFreqMap.count(sorceryPoint) ? noodleFreqMap[sorceryPoint] : 0;
            int potentialMagic = actualNoodles + min(numOperations, overlapPotion - actualNoodles);
            maximumSorcery = max(maximumSorcery, potentialMagic);
        }

        return maximumSorcery;
    }
};",1447778432
Narayan Jee,nj_abhi_bhardwaj,745,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
 int max_num = *std::max_element(nums.begin(), nums.end());
    int size = max_num + k + 2; // Size of the frequency array
    
    // Build the frequency array
    std::vector<int> freq(size, 0);
    for (int num : nums) {
        freq[num]++;
    }

    // Build the prefix sum array for the frequency array
    std::vector<int> pre(size, 0);
    pre[0] = freq[0];
    for (int i = 1; i < size; ++i) {
        pre[i] = pre[i - 1] + freq[i];
    }

    int result = 0;

    // Loop through each frequency position to find the maximum frequency
    for (int x = 0; x < size; ++x) {
        // Skip if freq[x] is 0 and we don't have enough operations to adjust it
        if (freq[x] == 0 && numOperations == 0) {
            continue;
        }

        // Define the left and right bounds based on k
        int left = std::max(0, x - k);
        int right = std::min(size - 1, x + k);

        // Calculate total frequency in the range [left, right]
        int totalInRange = pre[right] - (left > 0 ? pre[left - 1] : 0);

        // Determine the number of adjustments we can make in this range
        int canAdjust = totalInRange - freq[x];
        int total = freq[x] + std::min(numOperations, canAdjust);

        // Update the result with the maximum frequency found
        result = std::max(result, total);
    }

    return result;
    }
};",1447747441
Narayan Jee,nj_abhi_bhardwaj,745,3626,cpp,"class Solution {
public:
int digitProduct(int num) {
    int product = 1;
    while (num > 0) {
        int digit = num % 10;
        if (digit == 0) return 0; // If any digit is 0, the product is 0
        product *= digit;
        num /= 10;
    }
    return product;
}
    int smallestNumber(int n, int t) {
         while (true) {
        int product = digitProduct(n);
        if (product % t == 0) {
            return n;
        }
        n++;
    }
    }
};",1447657936
Narayan Jee,nj_abhi_bhardwaj,745,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
         std::map<int, int> freq;
    std::vector<std::pair<int, int>> events;

    for (int num : nums) {
        freq[num]++;
        events.push_back({num - k, +1});         // Start of the range
        events.push_back({num + k + 1, -1});     // End of the range (exclusive)
    }

    // Step 2: Collect all unique points for processing
    std::set<int> points;
    for (auto& event : events) {
        points.insert(event.first);
    }
    for (auto& entry : freq) {
        points.insert(entry.first);
    }

    // Step 3: Sort events by their first component (the position)
    std::sort(events.begin(), events.end());

    // Step 4: Traverse through each point and process events
    int idx = 0;
    int currentOverlap = 0;
    int maxFreq = 0;

    for (int t : points) {
        // Process all events up to the current point `t`
        while (idx < events.size() && events[idx].first <= t) {
            currentOverlap += events[idx].second;
            idx++;
        }

        // Actual count of the frequency at this point
        int actualCount = freq.count(t) ? freq[t] : 0;

        // Calculate possible frequency by adding min(numOperations, extra overlap that can be used)
        int possibleFreq = actualCount + std::min(numOperations, currentOverlap - actualCount);

        // Track the maximum frequency
        maxFreq = std::max(maxFreq, possibleFreq);
    }

    return maxFreq;
    }
};",1447755706
Vedant Kulkarni,VedantThegr8,746,3622,cpp,"class Solution {
public:
int maxFrequency(vector<int>& v, int k, int nn) {
        int maxi=*max_element(v.begin(), v.end());
        int pos=0,pr=0;
        int counter=maxi+k+5;
        vector<int> vvv(counter, 0);
        pos=pos+pr;
        pr=pos-pr;
        vector<int> ma(counter,0);
        int sz=v.size();
        pos=pos+pr;
        pr=pos-pr;
        for (int i=0;i<sz;i++) {
            ma[v[i]]++;
        }
        pos=pos+pr;
        pr=pos-pr;
        for (int i=0;i<counter;i++) {
            if(i==0) vvv[i]=ma[i];
            else vvv[i]=vvv[i-1]+ma[i];
        }
        pos=pos+pr;
        pr=pos-pr;
        int ans=0;
        vector<int> aa;
        for (int i=0;i<counter;i++) {
            pr--;
            pr++;
            if (ma[i]==0 && 7>3 && nn==0) continue;
            int lll=max(0,i-k);
            int rr=min(counter-1,i+k);
            pos=pos+pr;
            pr=pos-pr;
            int count;
            if(lll>0) count=vvv[rr]-vvv[lll-1];
            else count=vvv[rr];
            pos=pos+pr;
            pr=pos-pr;
            int tt=ma[i]+min(nn,count-ma[i]);
            pr+=0;
            ans=max(ans,tt);
        }
        pos=pr=0;
        return (ans+pos-pr);
}
};",1447725362
Vedant Kulkarni,VedantThegr8,746,3626,cpp,"class Solution {
public:
    int smallestNumber(int n, int t) {
        int p=n;
        while(1){
            int x=1;
            int q=p;
            while(q>0){
                int g=q%10;
                x=x*g;
                q=q/10;
            }
            if(x%t==0) break;
            p++;
        }
        return p;
    }
};",1447656368
Vedant Kulkarni,VedantThegr8,746,3640,cpp,"class Solution {
public:
int maxFrequency(vector<int>& v, int k, int ops) {
        int n=v.size();
        set<int> se;
        int ind=0,cur=0,maxi=0;
        map<int,int> ma;
        int pre=0,pos=0;
        vector<pair<int, int>> vec;
        pre=pos-pre;
        pos=pos+pre;
        for(int i=0;i<n;i++){
            ma[v[i]]++;
            pre=pos-pre;
            vec.push_back({v[i]+k+1,-1});
            pos=pos+pre;
            vec.push_back({v[i]-k,1});
        }
        for(auto z:ma){
            int xx=z.first;
            pos--;
            pos++;
            se.insert(xx);
        }
        sort(vec.begin(),vec.end());
        pre+=0;
        int gg=vec.size();
        for(int i=0;i<gg;i++){
            pre=pos+pre;
            pos=pos-pre; 
            se.insert(vec[i].first);
        }
        int total=0;
        int count=se.size();
        for(auto t:se){
            pre=pos-pre;
            pos=pos+pre; 
            while(ind<gg && pos==pre && vec[ind].first<=t){
                if(pos==0){
                    cur+=vec[ind].second;
                    pre=pos-pre;
                    pre-=0; 
                    ind++;
                }
            }
            if(ma[t]>0) total=ma[t];
            else total=0;
            pre=pos+pre;
            pos=pos-pre; 
            int b=total;
            if((cur-total)<=ops) b+=(cur-total);
            else b+=ops;
            maxi=max(maxi,b);
        }
        pre=0;
        pos=pre+7-7;
        return (maxi+pre-pos);
}
};",1447771207
karthikganti,karthikganti,747,3622,python3,"class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        maxnum=max(nums)
        len=maxnum+k+2
        f=[0]*len
        p=[0]*len
        result=0
        for i in nums:
            f[i]+=1
        p[0]=f[0]
        for i in range(1,len):
            p[i]=p[i-1]+f[i]
        for x in range(len):
            if f[x]==0 and numOperations==0:
                continue
            le=max(0,x-k)
            ri=min(len-1,x+k)
            if le>0:
                tot=p[ri]-(p[le-1])
            else:
                tot=p[ri]-0
            adj=tot-f[x]
            totalnum=f[x]+min(numOperations,adj)
            result=max(result,int(totalnum))
        return result
            ",1447747950
karthikganti,karthikganti,747,3626,python3,"class Solution:
    def smallestNumber(self, n: int, t: int) -> int:
        product=1
        while True:
            n1=n
            while n>0:
                product=product*(n%10)
                n=n//10
            if product%t==0:
                return n1
            else:
                n=n1+1
            product=1
            
        ",1447696530
karthikganti,karthikganti,747,3640,python3,"from collections import defaultdict as dd
class Solution:
    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:
        nums.sort()
        n=len(nums)
        fr=dd(int)
        evnts=[]

        for i in nums:
            fr[i]+=1
            evnts.append((i-k,1))
            evnts.append((i+k+1,-1))

        pts=set()
        for eve in evnts:
            pts.add(eve[0])
        for k in fr:
            pts.add(k)
        evnts.sort()
        curr,maxfreq,indx=0,0,0

        for t in sorted(pts):
            while indx < len(evnts) and evnts[indx][0]<= t:
                curr+=evnts[indx][1]
                indx+=1
            actcnt=fr[t] if t in fr else 0
            posfreq=actcnt+min(numOperations,curr-actcnt)
            maxfreq=max(maxfreq,posfreq)
        return maxfreq
            ",1447785535
Alok,roger_0,748,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        int n = nums.size();
        vector<array<int, 2>> ranges;
        map<int, int> originalFreq;
        
        // Build ranges and frequency
        for(int x : nums) {
            originalFreq[x]++;
            ranges.push_back({x - k, 1});
            ranges.push_back({x + k + 1, -1});
        }
        
        // Get unique points to check
        set<int> checkPoints;
        for(auto [val, _] : ranges) {
            checkPoints.insert(val);
        }
        for(auto [val, _] : originalFreq) {
            checkPoints.insert(val);
        }
        
        // Process points
        sort(ranges.begin(), ranges.end());
        int currentSum = 0;
        int maxPossible = 0;
        int rangePtr = 0;
        
        for(int point : checkPoints) {
            // Add all ranges covering this point
            while(rangePtr < ranges.size() && ranges[rangePtr][0] <= point) {
                currentSum += ranges[rangePtr][1];
                rangePtr++;
            }
            
            int base = originalFreq[point];
            int canAdd = min(numOperations, currentSum - base);
            maxPossible = max(maxPossible, base + canAdd);
        }
        
        return maxPossible;
    }
};",1447754787
Alok,roger_0,748,3626,cpp,"class Solution {
public:
    bool check(int x, int t){
        long long p=1;
        while(x){
            int d=x%10;
            p=p*d;
            x/=10;
        }
        return (p%t)==0;
    }
    int smallestNumber(int n, int t) {
        while(true){
            if(check(n,t)){
                return n;
            }
            n++;
        }
        return 0;
    }
};",1447659828
Alok,roger_0,748,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        int n = nums.size();
        vector<array<int, 2>> ranges;
        map<int, int> originalFreq;
        
        // Build ranges and frequency
        for(int x : nums) {
            originalFreq[x]++;
            ranges.push_back({x - k, 1});
            ranges.push_back({x + k + 1, -1});
        }
        
        // Get unique points to check
        set<int> checkPoints;
        for(auto [val, _] : ranges) {
            checkPoints.insert(val);
        }
        for(auto [val, _] : originalFreq) {
            checkPoints.insert(val);
        }
        
        // Process points
        sort(ranges.begin(), ranges.end());
        int currentSum = 0;
        int maxPossible = 0;
        int rangePtr = 0;
        
        for(int point : checkPoints) {
            // Add all ranges covering this point
            while(rangePtr < ranges.size() && ranges[rangePtr][0] <= point) {
                currentSum += ranges[rangePtr][1];
                rangePtr++;
            }
            
            int base = originalFreq[point];
            int canAdd = min(numOperations, currentSum - base);
            maxPossible = max(maxPossible, base + canAdd);
        }
        
        return maxPossible;
    }
};",1447755868
Ansh Bansal,t3mpt,749,3622,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        int n = nums.size();
map<int, int> m;
vector<pair<int, int>> v;
set<int> s;
int id = 0;
int over_cnt = 0;
int maxi_f = 0;
int cnt_x = 0;
int freq_x = 0;

for (int &x : nums) {
    m[x]++;
    v.push_back({x - k, +1});
    v.push_back({x + k + 1, -1});
}

for (auto &x : v) {
    s.insert(x.first);
}
for (auto &x : m) {
    s.insert(x.first);
}

sort(v.begin(), v.end());

for (auto &x : s) {
    while (id < v.size() && v[id].first <= x) {
        over_cnt += v[id].second;
        id++;
    }

    if (m.count(x)) {
        cnt_x = m[x];
    } else {
        cnt_x = 0;
    }

    freq_x = cnt_x + min(numOperations, over_cnt - cnt_x);
    maxi_f = max(maxi_f, freq_x);
}

return maxi_f;

    }
};",1447773344
Ansh Bansal,t3mpt,749,3626,cpp,"class Solution {
public:
    int smallestNumber(int n, int t) {
        for(int i=0;i<=10;i++){
            int a = n+i;
            int p = 1;
            while(a!=0){
                p *= a%10;
                a/=10;
            }
            if(p%t==0){
                return n+i;
            }
        }
        return -1;
    }
};",1447778644
Ansh Bansal,t3mpt,749,3640,cpp,"class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
int n = nums.size();
map<int, int> m;
vector<pair<int, int>> v;
set<int> s;
int id = 0;
int over_cnt = 0;
int maxi_f = 0;
int cnt_x = 0;
int freq_x = 0;

for (auto &x : nums) {
    m[x]++;
    v.push_back({x - k, +1});
    v.push_back({x + k + 1, -1});
}

for (auto &x : v) {
    s.insert(x.first);
}
for (auto &x : m) {
    s.insert(x.first);
}

sort(v.begin(), v.end());

for (auto &x : s) {
    while (id < v.size() && v[id].first <= x) {
        over_cnt += v[id].second;
        id++;
    }

    if (m.count(x)) {
        cnt_x = m[x];
    } else {
        cnt_x = 0;
    }

    freq_x = cnt_x + min(numOperations, over_cnt - cnt_x);
    maxi_f = max(maxi_f, freq_x);
}

return maxi_f;

    }
};",1447771286
